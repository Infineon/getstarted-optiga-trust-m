   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,4
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc1_scu.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_SCU_CalcTSEVAR,"ax",%progbits
  18              	 .align 1
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_SCU_CalcTSEVAR:
  23              	.LFB67:
  24              	 .file 1 "../Libraries/XMCLib/src/xmc1_scu.c"
   1:../Libraries/XMCLib/src/xmc1_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc1_scu.c ****  * @file xmc1_scu.c
   3:../Libraries/XMCLib/src/xmc1_scu.c ****  * @date 2019-03-20
   4:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc1_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc1_scu.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc1_scu.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc1_scu.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  12:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc1_scu.c ****  * following conditions are met:
  14:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  15:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer.
  17:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  18:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  21:../Libraries/XMCLib/src/xmc1_scu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc1_scu.c ****  * products derived from this software without specific prior written permission.
  23:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  24:../Libraries/XMCLib/src/xmc1_scu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc1_scu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc1_scu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc1_scu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc1_scu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc1_scu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc1_scu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  32:../Libraries/XMCLib/src/xmc1_scu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc1_scu.c ****  * Infineon Technologies AG dave@infineon.com).
  34:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc1_scu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc1_scu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  39:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  42:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_StartTempMeasurement API is modified
  44:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_ASSERT statements are added in XMC_SCU_INTERRUPT_SetEventHandler
  45:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  46:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  48:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  49:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus APIs are added
  50:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  51:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-09-23:
  52:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC1400 support added
  53:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  54:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-11-30:
  55:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Documentation improved
  56:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  57:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-02-29:
  58:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_ScaleMCLKFrequency
  59:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues with down clock frequency scaling
  60:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  61:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-04-15:
  62:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_Init for XMC1400
  63:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues when trying to disable the OSCHP and use the XTAL pins as GPIO
  64:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  65:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-02-09
  66:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - At XMC_SCU_CLOCK_Init() fixed issue while reading oscillator watchdog status
  67:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  68:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-04-11:
  69:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Added XMC_SCU_SetBMI()
  70:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  71:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-06-24
  72:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_SetBMI() for XMC11/XMC12/XMC13 to set to 1 the bit 11 of BMI
  73:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  74:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-10-25
  75:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Move the following functions to xmc1_scu.h as STATCI_INLINE and make them available for XM
  76:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_EnableDCO1OscillatorWatchdog(), 
  77:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_DisableDCO1OscillatorWatchdog(), 
  78:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_ClearDCO1OscillatorWatchdogStatus(), 
  79:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_IsDCO1ClockFrequencyUsable()
  80:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_SetBMI() for XMC11/XMC12/XMC13 to set to 1 the bits [7:6] of BMI
  81:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  82:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2018-06-21:
  83:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_CLOCK_Init() for XMC1400 adding a delay between disable/enable oscillator 
  84:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_CLOCK_Init() for XMC1400 adding a wait time of 5s after enabling the RTC_X
  85:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  86:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2019-03-20:
  87:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fix XMC_SCU_CLOCK_Init() if external XTAL is used  for XMC1400 (clock watchdog issue, see 
  88:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Added DISABLE_WAIT_RTC_XTAL_OSC_STARTUP preprocessor guard:
  89:../Libraries/XMCLib/src/xmc1_scu.c ****  *         The RTC_XTAL can be used as clock source for RTC or as reference for DCO1 calibration 
  90:../Libraries/XMCLib/src/xmc1_scu.c ****  *         In both cases if no wait is done in the startup after enabling the RTC_XTAL oscillator,
  91:../Libraries/XMCLib/src/xmc1_scu.c ****  *         the RTC_Enable() or the calibration will stall the MCU until the oscillator is stable (m
  92:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Added XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode() and XMC_SCU_CLOCK_SetLowPerformance
  93:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  94:../Libraries/XMCLib/src/xmc1_scu.c ****  * @endcond
  95:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  96:../Libraries/XMCLib/src/xmc1_scu.c ****  */
  97:../Libraries/XMCLib/src/xmc1_scu.c **** 
  98:../Libraries/XMCLib/src/xmc1_scu.c **** /**
  99:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 100:../Libraries/XMCLib/src/xmc1_scu.c ****  * @brief SCU low level driver API prototype definition for XMC1 family of microcontrollers <br>
 101:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 102:../Libraries/XMCLib/src/xmc1_scu.c ****  * <b>Detailed description of file</b> <br>
 103:../Libraries/XMCLib/src/xmc1_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
 104:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
 105:../Libraries/XMCLib/src/xmc1_scu.c ****  * ----Temperature Monitoring, Voltage Monitoring, CCU Start etc
 106:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 107:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_)<br>
 108:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Clock initialization, Clock Gating, Sleep Management etc
 109:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 110:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
 111:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Reset Init, Cause, Manual Reset Assert/Deassert etc
 112:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 113:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_)<br>
 114:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Initialization, Manual Assert/Deassert, Acknowledge etc
 115:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 116:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 117:../Libraries/XMCLib/src/xmc1_scu.c **** 
 118:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 119:../Libraries/XMCLib/src/xmc1_scu.c ****  * HEADER FILES
 120:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 121:../Libraries/XMCLib/src/xmc1_scu.c **** #include <xmc_scu.h>
 122:../Libraries/XMCLib/src/xmc1_scu.c **** 
 123:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_FAMILY == XMC1
 124:../Libraries/XMCLib/src/xmc1_scu.c **** 
 125:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 126:../Libraries/XMCLib/src/xmc1_scu.c ****  * MACROS
 127:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 128:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_IRQ_NUM             (3U)  /**< array index value for list of events that can generate S
 129:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_ENABLE  (195UL) /**< Password for enabling protection */
 130:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_DISABLE (192UL) /**< Password for disabling protection */
 131:../Libraries/XMCLib/src/xmc1_scu.c **** 
 132:../Libraries/XMCLib/src/xmc1_scu.c **** 
 133:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_CHECK_RTCCLKSRC(source)       ( (source == XMC_SCU_CLOCK_RTCCLKSRC_DCO2) || \
 134:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ERU_IOUT0) || \
 135:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP0_OUT) || \
 136:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP1_OUT) || \
 137:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP2_OUT) ) /**
 138:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 whe
 139:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 clo
 140:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 or 
 141:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Msk SCU_GENERAL_INTCR0_INTSEL0_Msk /**< Mask value of Interrupt So
 142:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 0 */
 143:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Size SCU_GENERAL_INTCR0_INTSEL1_Pos /**< Bit position value of Int
 144:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 1 */
 145:../Libraries/XMCLib/src/xmc1_scu.c **** 
 146:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T1   (0x10000F30U) /**< d is a constant data can be retrieved from Flash sector 0 t
 147:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 148:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T2   (0x10000F31U) /**< e is a constant data can be retrieved from Flash sector 0 t
 149:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 150:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T1 (0x10000F32U) /**< b is a constant data can be retrieved from Flash sector 0 t
 151:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 152:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T2 (0x10000F33U) /**< a is a constant data can be retrieved from Flash sector 0 t
 153:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 154:../Libraries/XMCLib/src/xmc1_scu.c **** 
 155:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 156:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (64U) /**< Maximum supported SCU events for XMC14 device. */
 157:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 158:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (32U)  /**< Maximum supported SCU events for XMC11/12/13 device
 159:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 160:../Libraries/XMCLib/src/xmc1_scu.c **** 
 161:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 162:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q22_10 (48000U << 10) /**< used to configures main clock (MCLK) fre
 163:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC14 d
 164:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 165:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q24_8 (32000U << 8) /**< used to configures main clock (MCLK) frequ
 166:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC11/1
 167:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 168:../Libraries/XMCLib/src/xmc1_scu.c **** 
 169:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_BmiInstallationReq \
 170:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t requestedBmiValue))0x00000108U)) /**< Pointer to Request BMI ins
 171:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          available inside ROM. */
 172:../Libraries/XMCLib/src/xmc1_scu.c **** 
 173:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTemperature \
 174:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(void))0x0000010cU)) /**<  Pointer to Calculate chip temperature routine i
 175:../Libraries/XMCLib/src/xmc1_scu.c ****                                                     available inside ROM. */
 176:../Libraries/XMCLib/src/xmc1_scu.c **** 
 177:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTSEVAR \
 178:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t temperature))0x00000120U)) /**<  Pointer to Calculate target lev
 179:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                     comparison routine is available
 180:../Libraries/XMCLib/src/xmc1_scu.c ****         
 181:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 182:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL DATA
 183:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 184:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For 
 185:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         functions o
 186:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         occurrence.
 187:../Libraries/XMCLib/src/xmc1_scu.c **** 
 188:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_t event_masks[SCU_IRQ_NUM] =
 189:../Libraries/XMCLib/src/xmc1_scu.c **** {
 190:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR |
 191:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED |
 192:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PESRAM |
 193:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC0 |
 194:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 195:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC1 |
 196:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 197:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 198:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEMCAN |
 199:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 200:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 201:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK |
 202:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 203:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOCI),
 204:../Libraries/XMCLib/src/xmc1_scu.c **** 
 205:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL |
 206:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 207:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC |
 208:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 209:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDDPI |
 210:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDROP |
 211:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VCLIP |
 212:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_DONE |
 213:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_HIGH |
 214:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_LOW |
 215:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_WDT_WARN |
 216:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC |
 217:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_ALARM |
 218:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED |
 219:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED |
 220:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED |
 221:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED |
 222:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED),
 223:../Libraries/XMCLib/src/xmc1_scu.c **** 
 224:../Libraries/XMCLib/src/xmc1_scu.c ****   (
 225:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 226:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC0 |
 227:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC1 |
 228:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC2 |
 229:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC3 |
 230:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC4 |
 231:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC5 |
 232:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC6 |
 233:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC7 |
 234:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 235:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 236:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP0 |
 237:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP1 |
 238:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP2 |
 239:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 240:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP3 |
 241:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 242:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 243:../Libraries/XMCLib/src/xmc1_scu.c ****    0)
 244:../Libraries/XMCLib/src/xmc1_scu.c **** }; /**<   Defines list of events that can generate SCU interrupt and also indicates SCU events mapp
 245:../Libraries/XMCLib/src/xmc1_scu.c ****          service request number. These event mask values can be used to verify which event is trigg
 246:../Libraries/XMCLib/src/xmc1_scu.c ****          to service request number during runtime. All the event items are tabulated as per service
 247:../Libraries/XMCLib/src/xmc1_scu.c ****          table of SCU. */
 248:../Libraries/XMCLib/src/xmc1_scu.c **** 
 249:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 250:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL ROUTINES
 251:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 252:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 253:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t idiv);
 254:../Libraries/XMCLib/src/xmc1_scu.c **** 
 255:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 256:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t idiv);
 257:../Libraries/XMCLib/src/xmc1_scu.c **** 
 258:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the value which must be installed in ANATSEIx register to get indication in
 259:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_INTERRUPT->SRRAW  bit when the chip temperature is above/below some target/threshold. */
 260:../Libraries/XMCLib/src/xmc1_scu.c **** static uint32_t XMC_SCU_CalcTSEVAR(uint32_t temperature)
 261:../Libraries/XMCLib/src/xmc1_scu.c **** {
  25              	 .loc 1 261 0
  26              	 .cfi_startproc
  27              	.LVL0:
  28 0000 38B5     	 push {r3,r4,r5,lr}
  29              	.LCFI0:
  30              	 .cfi_def_cfa_offset 16
  31              	 .cfi_offset 3,-16
  32              	 .cfi_offset 4,-12
  33              	 .cfi_offset 5,-8
  34              	 .cfi_offset 14,-4
 262:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t limit;
 263:../Libraries/XMCLib/src/xmc1_scu.c **** 
 264:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CalcTSEVAR: temperature out of range", (temperature >= 233U) && (temperature 
 265:../Libraries/XMCLib/src/xmc1_scu.c **** 
 266:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = ROM_CalcTSEVAR(temperature);
  35              	 .loc 1 266 0
  36 0002 9025     	 mov r5,#144
  37 0004 6D00     	 lsl r5,r5,#1
  38 0006 2B68     	 ldr r3,[r5]
 261:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t limit;
  39              	 .loc 1 261 0
  40 0008 041C     	 mov r4,r0
  41              	 .loc 1 266 0
  42 000a 9847     	 blx r3
  43              	.LVL1:
 267:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
  44              	 .loc 1 267 0
  45 000c 0028     	 cmp r0,#0
  46 000e 07D1     	 bne .L2
 268:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 269:../Libraries/XMCLib/src/xmc1_scu.c ****     limit = ROM_CalcTSEVAR(temperature + 1U);
  47              	 .loc 1 269 0
  48 0010 601C     	 add r0,r4,#1
  49              	.LVL2:
  50 0012 2B68     	 ldr r3,[r5]
  51 0014 9847     	 blx r3
  52              	.LVL3:
 270:../Libraries/XMCLib/src/xmc1_scu.c ****     if (limit == 0U)
  53              	 .loc 1 270 0
  54 0016 0028     	 cmp r0,#0
  55 0018 02D1     	 bne .L2
  56              	.LVL4:
  57              	.LBB30:
  58              	.LBB31:
 271:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 272:../Libraries/XMCLib/src/xmc1_scu.c ****       limit = ROM_CalcTSEVAR(temperature - 1U);
  59              	 .loc 1 272 0
  60 001a 601E     	 sub r0,r4,#1
  61              	.LVL5:
  62 001c 2B68     	 ldr r3,[r5]
  63 001e 9847     	 blx r3
  64              	.LVL6:
  65              	.L2:
  66              	.LBE31:
  67              	.LBE30:
 273:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 274:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 275:../Libraries/XMCLib/src/xmc1_scu.c ****   
 276:../Libraries/XMCLib/src/xmc1_scu.c ****   return (limit);
 277:../Libraries/XMCLib/src/xmc1_scu.c **** }
  68              	 .loc 1 277 0
  69              	 
  70              	.LVL7:
  71 0020 38BD     	 pop {r3,r4,r5,pc}
  72              	 .cfi_endproc
  73              	.LFE67:
  75              	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
  76              	 .align 1
  77              	 .global XMC_SCU_INTERRUPT_EnableEvent
  78              	 .code 16
  79              	 .thumb_func
  81              	XMC_SCU_INTERRUPT_EnableEvent:
  82              	.LFB69:
 278:../Libraries/XMCLib/src/xmc1_scu.c **** 
 279:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 280:../Libraries/XMCLib/src/xmc1_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 281:../Libraries/XMCLib/src/xmc1_scu.c **** __STATIC_FORCEINLINE void delay(uint32_t cycles)
 282:../Libraries/XMCLib/src/xmc1_scu.c **** {
 283:../Libraries/XMCLib/src/xmc1_scu.c ****   while(--cycles > 0U)
 284:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 285:../Libraries/XMCLib/src/xmc1_scu.c ****     __NOP();
 286:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 287:../Libraries/XMCLib/src/xmc1_scu.c **** }
 288:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 289:../Libraries/XMCLib/src/xmc1_scu.c **** 
 290:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 291:../Libraries/XMCLib/src/xmc1_scu.c ****  * API IMPLEMENTATION
 292:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 293:../Libraries/XMCLib/src/xmc1_scu.c ****  #ifdef XMC_ASSERT_ENABLE
 294:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to verify SCU event weather it is valid event or not */
 295:../Libraries/XMCLib/src/xmc1_scu.c **** __STATIC_INLINE bool XMC_SCU_INTERRUPT_IsValidEvent(XMC_SCU_INTERRUPT_EVENT_t event)
 296:../Libraries/XMCLib/src/xmc1_scu.c **** {
 297:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((event == XMC_SCU_INTERRUPT_EVENT_WDT_WARN) ||
 298:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC) ||
 299:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_ALARM) ||
 300:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDDPI) ||
 301:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 302:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC1) ||
 303:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 304:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 305:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEMCAN) ||
 306:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 307:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 308:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK) ||
 309:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC) ||
 310:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 311:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 312:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP0) ||
 313:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP1) ||
 314:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP2) ||
 315:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 316:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP3) ||
 317:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 318:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 319:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDROP) ||
 320:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 321:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC0) ||
 322:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC1) ||
 323:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC2) ||
 324:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC3) ||
 325:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC4) ||
 326:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC5) ||
 327:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC6) ||
 328:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC7) ||
 329:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 330:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOCI) ||
 331:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PESRAM) ||
 332:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC0) ||
 333:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR) ||
 334:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED) ||
 335:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VCLIP) ||
 336:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL) ||
 337:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED) ||
 338:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED) ||
 339:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED) ||
 340:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED) ||
 341:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED) ||
 342:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_DONE) ||
 343:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_HIGH) ||
 344:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_LOW));
 345:../Libraries/XMCLib/src/xmc1_scu.c **** }
 346:../Libraries/XMCLib/src/xmc1_scu.c ****  #endif
 347:../Libraries/XMCLib/src/xmc1_scu.c **** 
 348:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to enable the SCU event */
 349:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 350:../Libraries/XMCLib/src/xmc1_scu.c **** {
  83              	 .loc 1 350 0
  84              	 .cfi_startproc
  85              	.LVL8:
 351:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
  86              	 .loc 1 351 0
  87 0000 034B     	 ldr r3,.L5
 352:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 353:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 |= (uint32_t)(event >> 32U);
 354:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 355:../Libraries/XMCLib/src/xmc1_scu.c **** }
  88              	 .loc 1 355 0
  89              	 
 351:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
  90              	 .loc 1 351 0
  91 0002 5A68     	 ldr r2,[r3,#4]
  92 0004 1043     	 orr r0,r2
  93              	.LVL9:
  94 0006 5860     	 str r0,[r3,#4]
 353:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
  95              	 .loc 1 353 0
  96 0008 5A6A     	 ldr r2,[r3,#36]
  97 000a 1143     	 orr r1,r2
  98 000c 5962     	 str r1,[r3,#36]
  99              	 .loc 1 355 0
 100 000e 7047     	 bx lr
 101              	.L6:
 102              	 .align 2
 103              	.L5:
 104 0010 38000140 	 .word 1073807416
 105              	 .cfi_endproc
 106              	.LFE69:
 108              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
 109              	 .align 1
 110              	 .global XMC_SCU_INTERRUPT_DisableEvent
 111              	 .code 16
 112              	 .thumb_func
 114              	XMC_SCU_INTERRUPT_DisableEvent:
 115              	.LFB70:
 356:../Libraries/XMCLib/src/xmc1_scu.c **** 
 357:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to disable the SCU event */
 358:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 359:../Libraries/XMCLib/src/xmc1_scu.c **** {
 116              	 .loc 1 359 0
 117              	 .cfi_startproc
 118              	.LVL10:
 360:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
 119              	 .loc 1 360 0
 120 0000 034B     	 ldr r3,.L8
 361:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 362:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 &= (uint32_t)~(event >> 32U);
 363:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 364:../Libraries/XMCLib/src/xmc1_scu.c **** }
 121              	 .loc 1 364 0
 122              	 
 360:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
 123              	 .loc 1 360 0
 124 0002 5A68     	 ldr r2,[r3,#4]
 125 0004 8243     	 bic r2,r0
 126 0006 5A60     	 str r2,[r3,#4]
 362:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 127              	 .loc 1 362 0
 128 0008 5A6A     	 ldr r2,[r3,#36]
 129 000a 8A43     	 bic r2,r1
 130 000c 5A62     	 str r2,[r3,#36]
 131              	 .loc 1 364 0
 132 000e 7047     	 bx lr
 133              	.L9:
 134              	 .align 2
 135              	.L8:
 136 0010 38000140 	 .word 1073807416
 137              	 .cfi_endproc
 138              	.LFE70:
 140              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
 141              	 .align 1
 142              	 .global XMC_SCU_INTERRUPT_TriggerEvent
 143              	 .code 16
 144              	 .thumb_func
 146              	XMC_SCU_INTERRUPT_TriggerEvent:
 147              	.LFB71:
 365:../Libraries/XMCLib/src/xmc1_scu.c **** 
 366:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to trigger the SCU event */
 367:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 368:../Libraries/XMCLib/src/xmc1_scu.c **** {
 148              	 .loc 1 368 0
 149              	 .cfi_startproc
 150              	.LVL11:
 369:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 151              	 .loc 1 369 0
 152 0000 034B     	 ldr r3,.L11
 370:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 371:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET1 |= (uint32_t)(event >> 32U);
 372:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 373:../Libraries/XMCLib/src/xmc1_scu.c **** }
 153              	 .loc 1 373 0
 154              	 
 369:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 155              	 .loc 1 369 0
 156 0002 DA68     	 ldr r2,[r3,#12]
 157 0004 1043     	 orr r0,r2
 158              	.LVL12:
 159 0006 D860     	 str r0,[r3,#12]
 371:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 160              	 .loc 1 371 0
 161 0008 DA6A     	 ldr r2,[r3,#44]
 162 000a 1143     	 orr r1,r2
 163 000c D962     	 str r1,[r3,#44]
 164              	 .loc 1 373 0
 165 000e 7047     	 bx lr
 166              	.L12:
 167              	 .align 2
 168              	.L11:
 169 0010 38000140 	 .word 1073807416
 170              	 .cfi_endproc
 171              	.LFE71:
 173              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 174              	 .align 1
 175              	 .global XMC_SCU_INTERUPT_GetEventStatus
 176              	 .code 16
 177              	 .thumb_func
 179              	XMC_SCU_INTERUPT_GetEventStatus:
 180              	.LFB72:
 374:../Libraries/XMCLib/src/xmc1_scu.c **** 
 375:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to get the SCU event status */
 376:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 377:../Libraries/XMCLib/src/xmc1_scu.c **** {
 181              	 .loc 1 377 0
 182              	 .cfi_startproc
 378:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t tmp;
 379:../Libraries/XMCLib/src/xmc1_scu.c **** 
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp = SCU_INTERRUPT->SRRAW;
 183              	 .loc 1 380 0
 184 0000 014B     	 ldr r3,.L14
 381:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 382:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp |= ((int64_t)SCU_INTERRUPT->SRRAW1 << 32U);
 383:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 384:../Libraries/XMCLib/src/xmc1_scu.c ****   return (tmp);
 385:../Libraries/XMCLib/src/xmc1_scu.c **** }
 185              	 .loc 1 385 0
 186              	 
 380:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 187              	 .loc 1 380 0
 188 0002 1868     	 ldr r0,[r3]
 189              	.LVL13:
 382:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 190              	 .loc 1 382 0
 191 0004 196A     	 ldr r1,[r3,#32]
 192              	.LVL14:
 193              	 .loc 1 385 0
 194 0006 7047     	 bx lr
 195              	.L15:
 196              	 .align 2
 197              	.L14:
 198 0008 38000140 	 .word 1073807416
 199              	 .cfi_endproc
 200              	.LFE72:
 202              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 203              	 .align 1
 204              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 205              	 .code 16
 206              	 .thumb_func
 208              	XMC_SCU_INTERRUPT_ClearEventStatus:
 209              	.LFB73:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 387:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to clear the SCU event status */
 388:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 389:../Libraries/XMCLib/src/xmc1_scu.c **** {
 210              	 .loc 1 389 0
 211              	 .cfi_startproc
 212              	.LVL15:
 390:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 213              	 .loc 1 390 0
 214 0000 034B     	 ldr r3,.L17
 391:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 392:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR1 |= (uint32_t)(event >> 32U);
 393:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 394:../Libraries/XMCLib/src/xmc1_scu.c **** }
 215              	 .loc 1 394 0
 216              	 
 390:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 217              	 .loc 1 390 0
 218 0002 9A68     	 ldr r2,[r3,#8]
 219 0004 1043     	 orr r0,r2
 220              	.LVL16:
 221 0006 9860     	 str r0,[r3,#8]
 392:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 222              	 .loc 1 392 0
 223 0008 9A6A     	 ldr r2,[r3,#40]
 224 000a 1143     	 orr r1,r2
 225 000c 9962     	 str r1,[r3,#40]
 226              	 .loc 1 394 0
 227 000e 7047     	 bx lr
 228              	.L18:
 229              	 .align 2
 230              	.L17:
 231 0010 38000140 	 .word 1073807416
 232              	 .cfi_endproc
 233              	.LFE73:
 235              	 .section .text.XMC_SCU_LockProtectedBits,"ax",%progbits
 236              	 .align 1
 237              	 .global XMC_SCU_LockProtectedBits
 238              	 .code 16
 239              	 .thumb_func
 241              	XMC_SCU_LockProtectedBits:
 242              	.LFB74:
 395:../Libraries/XMCLib/src/xmc1_scu.c **** 
 396:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to lock protected bitfields from being modified */
 397:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_LockProtectedBits(void)
 398:../Libraries/XMCLib/src/xmc1_scu.c **** {
 243              	 .loc 1 398 0
 244              	 .cfi_startproc
 399:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 245              	 .loc 1 399 0
 246 0000 C322     	 mov r2,#195
 247 0002 014B     	 ldr r3,.L20
 400:../Libraries/XMCLib/src/xmc1_scu.c **** }
 248              	 .loc 1 400 0
 249              	 
 399:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 250              	 .loc 1 399 0
 251 0004 5A62     	 str r2,[r3,#36]
 252              	 .loc 1 400 0
 253 0006 7047     	 bx lr
 254              	.L21:
 255              	 .align 2
 256              	.L20:
 257 0008 00000140 	 .word 1073807360
 258              	 .cfi_endproc
 259              	.LFE74:
 261              	 .section .text.XMC_SCU_UnlockProtectedBits,"ax",%progbits
 262              	 .align 1
 263              	 .global XMC_SCU_UnlockProtectedBits
 264              	 .code 16
 265              	 .thumb_func
 267              	XMC_SCU_UnlockProtectedBits:
 268              	.LFB75:
 401:../Libraries/XMCLib/src/xmc1_scu.c **** 
 402:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to make protected bitfields available for modification */
 403:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_UnlockProtectedBits(void)
 404:../Libraries/XMCLib/src/xmc1_scu.c **** {
 269              	 .loc 1 404 0
 270              	 .cfi_startproc
 405:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
 271              	 .loc 1 405 0
 272 0000 C022     	 mov r2,#192
 273 0002 034B     	 ldr r3,.L24
 274 0004 5A62     	 str r2,[r3,#36]
 275              	.L23:
 406:../Libraries/XMCLib/src/xmc1_scu.c **** 
 407:../Libraries/XMCLib/src/xmc1_scu.c ****   while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
 276              	 .loc 1 407 0 discriminator 1
 277 0006 5A6A     	 ldr r2,[r3,#36]
 278 0008 5207     	 lsl r2,r2,#29
 279 000a FCD4     	 bmi .L23
 408:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 409:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Loop until the lock is removed */
 410:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 411:../Libraries/XMCLib/src/xmc1_scu.c **** }
 280              	 .loc 1 411 0
 281              	 
 282 000c 7047     	 bx lr
 283              	.L25:
 284 000e C046     	 .align 2
 285              	.L24:
 286 0010 00000140 	 .word 1073807360
 287              	 .cfi_endproc
 288              	.LFE75:
 290              	 .section .text.XMC_SCU_SupplyMonitorInit,"ax",%progbits
 291              	 .align 1
 292              	 .global XMC_SCU_SupplyMonitorInit
 293              	 .code 16
 294              	 .thumb_func
 296              	XMC_SCU_SupplyMonitorInit:
 297              	.LFB76:
 412:../Libraries/XMCLib/src/xmc1_scu.c **** 
 413:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to initialize power supply monitoring unit */
 414:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SupplyMonitorInit(const XMC_SCU_SUPPLYMONITOR_t *obj)
 415:../Libraries/XMCLib/src/xmc1_scu.c **** {
 298              	 .loc 1 415 0
 299              	 .cfi_startproc
 300              	.LVL17:
 416:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t anavdel;
 417:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t irqmask;
 418:../Libraries/XMCLib/src/xmc1_scu.c **** 
 419:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel = 0UL;
 420:../Libraries/XMCLib/src/xmc1_scu.c **** 
 421:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj-> ext_supply_threshold) << SCU_ANALOG_ANAVDEL_VDEL_SELECT_Pos);
 422:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj->ext_supply_monitor_speed) << SCU_ANALOG_ANAVDEL_VDEL_TIM_ADJ_Pos);
 301              	 .loc 1 422 0
 302 0000 4368     	 ldr r3,[r0,#4]
 303 0002 0268     	 ldr r2,[r0]
 304 0004 9B00     	 lsl r3,r3,#2
 305 0006 1343     	 orr r3,r2
 306              	.LVL18:
 423:../Libraries/XMCLib/src/xmc1_scu.c **** 
 424:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_at_init))
 307              	 .loc 1 424 0
 308 0008 C27A     	 ldrb r2,[r0,#11]
 309 000a 002A     	 cmp r2,#0
 310 000c 01D0     	 beq .L27
 425:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 426:../Libraries/XMCLib/src/xmc1_scu.c ****     anavdel |= (uint32_t)SCU_ANALOG_ANAVDEL_VDEL_EN_Msk;
 311              	 .loc 1 426 0
 312 000e 1022     	 mov r2,#16
 313 0010 1343     	 orr r3,r2
 314              	.LVL19:
 315              	.L27:
 427:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 428:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_ANALOG->ANAVDEL = (uint16_t) anavdel;
 316              	 .loc 1 428 0
 317 0012 0B4A     	 ldr r2,.L41
 318 0014 9BB2     	 uxth r3,r3
 319              	.LVL20:
 320 0016 1380     	 strh r3,[r2]
 321              	.LVL21:
 429:../Libraries/XMCLib/src/xmc1_scu.c **** 
 430:../Libraries/XMCLib/src/xmc1_scu.c ****   irqmask = 0UL;
 431:../Libraries/XMCLib/src/xmc1_scu.c **** 
 432:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_prewarning_int))
 322              	 .loc 1 432 0
 323 0018 037A     	 ldrb r3,[r0,#8]
 433:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 434:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDDPI_Msk;
 324              	 .loc 1 434 0
 325 001a 5A1E     	 sub r2,r3,#1
 326 001c 9341     	 sbc r3,r3,r2
 435:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 436:../Libraries/XMCLib/src/xmc1_scu.c **** 
 437:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vdrop_int))
 327              	 .loc 1 437 0
 328 001e 427A     	 ldrb r2,[r0,#9]
 434:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 329              	 .loc 1 434 0
 330 0020 DB00     	 lsl r3,r3,#3
 331              	.LVL22:
 332              	 .loc 1 437 0
 333 0022 002A     	 cmp r2,#0
 334 0024 01D0     	 beq .L29
 438:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 439:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDROPI_Msk;
 335              	 .loc 1 439 0
 336 0026 8022     	 mov r2,#128
 337 0028 1343     	 orr r3,r2
 338              	.LVL23:
 339              	.L29:
 440:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 441:../Libraries/XMCLib/src/xmc1_scu.c **** 
 442:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vclip_int))
 340              	 .loc 1 442 0
 341 002a 827A     	 ldrb r2,[r0,#10]
 342 002c 002A     	 cmp r2,#0
 343 002e 02D0     	 beq .L30
 443:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 444:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VCLIPI_Msk;
 344              	 .loc 1 444 0
 345 0030 8022     	 mov r2,#128
 346 0032 9203     	 lsl r2,r2,#14
 347 0034 1343     	 orr r3,r2
 348              	.LVL24:
 349              	.L30:
 445:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 446:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)irqmask;
 350              	 .loc 1 446 0
 351 0036 0349     	 ldr r1,.L41+4
 447:../Libraries/XMCLib/src/xmc1_scu.c **** }
 352              	 .loc 1 447 0
 353              	 
 446:../Libraries/XMCLib/src/xmc1_scu.c **** }
 354              	 .loc 1 446 0
 355 0038 4A68     	 ldr r2,[r1,#4]
 356 003a 1343     	 orr r3,r2
 357              	.LVL25:
 358 003c 4B60     	 str r3,[r1,#4]
 359              	 .loc 1 447 0
 360 003e 7047     	 bx lr
 361              	.L42:
 362              	 .align 2
 363              	.L41:
 364 0040 50100140 	 .word 1073811536
 365 0044 38000140 	 .word 1073807416
 366              	 .cfi_endproc
 367              	.LFE76:
 369              	 .section .text.XMC_SCU_SetTempLowLimit,"ax",%progbits
 370              	 .align 1
 371              	 .global XMC_SCU_SetTempLowLimit
 372              	 .code 16
 373              	 .thumb_func
 375              	XMC_SCU_SetTempLowLimit:
 376              	.LFB77:
 448:../Libraries/XMCLib/src/xmc1_scu.c **** 
 449:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program lower temperature limit */
 450:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempLowLimit(uint32_t limit)
 451:../Libraries/XMCLib/src/xmc1_scu.c **** {
 377              	 .loc 1 451 0
 378              	 .cfi_startproc
 379              	.LVL26:
 380 0000 08B5     	 push {r3,lr}
 381              	.LCFI1:
 382              	 .cfi_def_cfa_offset 8
 383              	 .cfi_offset 3,-8
 384              	 .cfi_offset 14,-4
 452:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 453:../Libraries/XMCLib/src/xmc1_scu.c **** 
 454:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 385              	 .loc 1 454 0
 386 0002 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 387              	.LVL27:
 455:../Libraries/XMCLib/src/xmc1_scu.c **** 
 456:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 457:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 458:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIL = (uint16_t)limit;
 459:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 460:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 461:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 462:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 388              	 .loc 1 462 0
 389 0006 0123     	 mov r3,#1
 456:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 390              	 .loc 1 456 0
 391 0008 0028     	 cmp r0,#0
 392 000a 03D0     	 beq .L44
 458:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 393              	 .loc 1 458 0
 394 000c 024B     	 ldr r3,.L47
 395 000e 80B2     	 uxth r0,r0
 396              	.LVL28:
 397 0010 9886     	 strh r0,[r3,#52]
 452:../Libraries/XMCLib/src/xmc1_scu.c **** 
 398              	 .loc 1 452 0
 399 0012 0023     	 mov r3,#0
 400              	.L44:
 401              	.LVL29:
 463:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 464:../Libraries/XMCLib/src/xmc1_scu.c **** 
 465:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 466:../Libraries/XMCLib/src/xmc1_scu.c **** }
 402              	 .loc 1 466 0
 403 0014 181C     	 mov r0,r3
 404              	 
 405 0016 08BD     	 pop {r3,pc}
 406              	.L48:
 407              	 .align 2
 408              	.L47:
 409 0018 00100140 	 .word 1073811456
 410              	 .cfi_endproc
 411              	.LFE77:
 413              	 .section .text.XMC_SCU_SetTempHighLimit,"ax",%progbits
 414              	 .align 1
 415              	 .global XMC_SCU_SetTempHighLimit
 416              	 .code 16
 417              	 .thumb_func
 419              	XMC_SCU_SetTempHighLimit:
 420              	.LFB78:
 467:../Libraries/XMCLib/src/xmc1_scu.c ****   
 468:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program higher temperature limit */
 469:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempHighLimit(uint32_t limit)
 470:../Libraries/XMCLib/src/xmc1_scu.c **** {
 421              	 .loc 1 470 0
 422              	 .cfi_startproc
 423              	.LVL30:
 424 0000 08B5     	 push {r3,lr}
 425              	.LCFI2:
 426              	 .cfi_def_cfa_offset 8
 427              	 .cfi_offset 3,-8
 428              	 .cfi_offset 14,-4
 471:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 472:../Libraries/XMCLib/src/xmc1_scu.c **** 
 473:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 429              	 .loc 1 473 0
 430 0002 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 431              	.LVL31:
 474:../Libraries/XMCLib/src/xmc1_scu.c **** 
 475:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 476:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 477:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIH = (uint16_t)limit;
 478:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 479:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 480:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 481:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 432              	 .loc 1 481 0
 433 0006 0123     	 mov r3,#1
 475:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 434              	 .loc 1 475 0
 435 0008 0028     	 cmp r0,#0
 436 000a 03D0     	 beq .L50
 477:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 437              	 .loc 1 477 0
 438 000c 024B     	 ldr r3,.L53
 439 000e 80B2     	 uxth r0,r0
 440              	.LVL32:
 441 0010 1886     	 strh r0,[r3,#48]
 471:../Libraries/XMCLib/src/xmc1_scu.c **** 
 442              	 .loc 1 471 0
 443 0012 0023     	 mov r3,#0
 444              	.L50:
 445              	.LVL33:
 482:../Libraries/XMCLib/src/xmc1_scu.c ****   } 
 483:../Libraries/XMCLib/src/xmc1_scu.c **** 
 484:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 485:../Libraries/XMCLib/src/xmc1_scu.c **** }
 446              	 .loc 1 485 0
 447 0014 181C     	 mov r0,r3
 448              	 
 449 0016 08BD     	 pop {r3,pc}
 450              	.L54:
 451              	 .align 2
 452              	.L53:
 453 0018 00100140 	 .word 1073811456
 454              	 .cfi_endproc
 455              	.LFE78:
 457              	 .section .text.XMC_SCU_SetRawTempLimits,"ax",%progbits
 458              	 .align 1
 459              	 .global XMC_SCU_SetRawTempLimits
 460              	 .code 16
 461              	 .thumb_func
 463              	XMC_SCU_SetRawTempLimits:
 464              	.LFB79:
 486:../Libraries/XMCLib/src/xmc1_scu.c **** 
 487:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program temperature limits as raw digital values into temperature sensor */
 488:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 489:../Libraries/XMCLib/src/xmc1_scu.c **** {
 465              	 .loc 1 489 0
 466              	 .cfi_startproc
 467              	.LVL34:
 490:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 468              	 .loc 1 490 0
 469 0000 024B     	 ldr r3,.L56
 470 0002 89B2     	 uxth r1,r1
 471              	.LVL35:
 491:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 472              	 .loc 1 491 0
 473 0004 80B2     	 uxth r0,r0
 474              	.LVL36:
 490:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 475              	 .loc 1 490 0
 476 0006 1986     	 strh r1,[r3,#48]
 492:../Libraries/XMCLib/src/xmc1_scu.c **** }
 477              	 .loc 1 492 0
 478              	 
 491:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 479              	 .loc 1 491 0
 480 0008 9886     	 strh r0,[r3,#52]
 481              	 .loc 1 492 0
 482 000a 7047     	 bx lr
 483              	.L57:
 484              	 .align 2
 485              	.L56:
 486 000c 00100140 	 .word 1073811456
 487              	 .cfi_endproc
 488              	.LFE79:
 490              	 .section .text.XMC_SCU_StartTempMeasurement,"ax",%progbits
 491              	 .align 1
 492              	 .global XMC_SCU_StartTempMeasurement
 493              	 .code 16
 494              	 .thumb_func
 496              	XMC_SCU_StartTempMeasurement:
 497              	.LFB80:
 493:../Libraries/XMCLib/src/xmc1_scu.c **** 
 494:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to start temperature measurement */
 495:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StartTempMeasurement(void)
 496:../Libraries/XMCLib/src/xmc1_scu.c **** {
 498              	 .loc 1 496 0
 499              	 .cfi_startproc
 497:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 500              	 .loc 1 497 0
 501 0000 0121     	 mov r1,#1
 502 0002 024A     	 ldr r2,.L59
 498:../Libraries/XMCLib/src/xmc1_scu.c **** }
 503              	 .loc 1 498 0
 504              	 
 497:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 505              	 .loc 1 497 0
 506 0004 938C     	 ldrh r3,[r2,#36]
 507 0006 0B43     	 orr r3,r1
 508 0008 9384     	 strh r3,[r2,#36]
 509              	 .loc 1 498 0
 510 000a 7047     	 bx lr
 511              	.L60:
 512              	 .align 2
 513              	.L59:
 514 000c 00100140 	 .word 1073811456
 515              	 .cfi_endproc
 516              	.LFE80:
 518              	 .section .text.XMC_SCU_StopTempMeasurement,"ax",%progbits
 519              	 .align 1
 520              	 .global XMC_SCU_StopTempMeasurement
 521              	 .code 16
 522              	 .thumb_func
 524              	XMC_SCU_StopTempMeasurement:
 525              	.LFB81:
 499:../Libraries/XMCLib/src/xmc1_scu.c **** 
 500:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to stop temperature measurement */
 501:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StopTempMeasurement(void)
 502:../Libraries/XMCLib/src/xmc1_scu.c **** {
 526              	 .loc 1 502 0
 527              	 .cfi_startproc
 503:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 528              	 .loc 1 503 0
 529 0000 0121     	 mov r1,#1
 530 0002 024A     	 ldr r2,.L62
 504:../Libraries/XMCLib/src/xmc1_scu.c **** }
 531              	 .loc 1 504 0
 532              	 
 503:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 533              	 .loc 1 503 0
 534 0004 938C     	 ldrh r3,[r2,#36]
 535 0006 8B43     	 bic r3,r1
 536 0008 9384     	 strh r3,[r2,#36]
 537              	 .loc 1 504 0
 538 000a 7047     	 bx lr
 539              	.L63:
 540              	 .align 2
 541              	.L62:
 542 000c 00100140 	 .word 1073811456
 543              	 .cfi_endproc
 544              	.LFE81:
 546              	 .section .text.XMC_SCU_HighTemperature,"ax",%progbits
 547              	 .align 1
 548              	 .global XMC_SCU_HighTemperature
 549              	 .code 16
 550              	 .thumb_func
 552              	XMC_SCU_HighTemperature:
 553              	.LFB82:
 505:../Libraries/XMCLib/src/xmc1_scu.c **** 
 506:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature has gone past the ceiling */
 507:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_HighTemperature(void)
 508:../Libraries/XMCLib/src/xmc1_scu.c **** {
 554              	 .loc 1 508 0
 555              	 .cfi_startproc
 509:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 556              	 .loc 1 509 0
 557 0000 024B     	 ldr r3,.L65
 510:../Libraries/XMCLib/src/xmc1_scu.c **** }
 558              	 .loc 1 510 0
 559              	 
 509:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 560              	 .loc 1 509 0
 561 0002 1868     	 ldr r0,[r3]
 562 0004 4000     	 lsl r0,r0,#1
 563 0006 C00F     	 lsr r0,r0,#31
 564              	 .loc 1 510 0
 565 0008 7047     	 bx lr
 566              	.L66:
 567 000a C046     	 .align 2
 568              	.L65:
 569 000c 38000140 	 .word 1073807416
 570              	 .cfi_endproc
 571              	.LFE82:
 573              	 .section .text.XMC_SCU_LowTemperature,"ax",%progbits
 574              	 .align 1
 575              	 .global XMC_SCU_LowTemperature
 576              	 .code 16
 577              	 .thumb_func
 579              	XMC_SCU_LowTemperature:
 580              	.LFB83:
 511:../Libraries/XMCLib/src/xmc1_scu.c **** 
 512:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature is lower than normal */
 513:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_LowTemperature(void)
 514:../Libraries/XMCLib/src/xmc1_scu.c **** {
 581              	 .loc 1 514 0
 582              	 .cfi_startproc
 515:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 583              	 .loc 1 515 0
 584 0000 014B     	 ldr r3,.L68
 516:../Libraries/XMCLib/src/xmc1_scu.c **** }
 585              	 .loc 1 516 0
 586              	 
 515:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 587              	 .loc 1 515 0
 588 0002 1868     	 ldr r0,[r3]
 589 0004 C00F     	 lsr r0,r0,#31
 590              	 .loc 1 516 0
 591 0006 7047     	 bx lr
 592              	.L69:
 593              	 .align 2
 594              	.L68:
 595 0008 38000140 	 .word 1073807416
 596              	 .cfi_endproc
 597              	.LFE83:
 599              	 .section .text.XMC_SCU_GetTemperature,"ax",%progbits
 600              	 .align 1
 601              	 .global XMC_SCU_GetTemperature
 602              	 .code 16
 603              	 .thumb_func
 605              	XMC_SCU_GetTemperature:
 606              	.LFB84:
 517:../Libraries/XMCLib/src/xmc1_scu.c **** 
 518:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to retrieve the device temperature */
 519:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_GetTemperature(void)
 520:../Libraries/XMCLib/src/xmc1_scu.c **** {
 607              	 .loc 1 520 0
 608              	 .cfi_startproc
 521:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t temperature;
 522:../Libraries/XMCLib/src/xmc1_scu.c **** 
 523:../Libraries/XMCLib/src/xmc1_scu.c ****   temperature = (uint32_t)(SCU_ANALOG->ANATSEMON);
 609              	 .loc 1 523 0
 610 0000 014B     	 ldr r3,.L71
 524:../Libraries/XMCLib/src/xmc1_scu.c **** 
 525:../Libraries/XMCLib/src/xmc1_scu.c ****   return (temperature);
 526:../Libraries/XMCLib/src/xmc1_scu.c **** }
 611              	 .loc 1 526 0
 612              	 
 523:../Libraries/XMCLib/src/xmc1_scu.c **** 
 613              	 .loc 1 523 0
 614 0002 D88F     	 ldrh r0,[r3,#62]
 615 0004 80B2     	 uxth r0,r0
 616              	.LVL37:
 617              	 .loc 1 526 0
 618 0006 7047     	 bx lr
 619              	.L72:
 620              	 .align 2
 621              	.L71:
 622 0008 02100140 	 .word 1073811458
 623              	 .cfi_endproc
 624              	.LFE84:
 626              	 .section .text.XMC_SCU_CalcTemperature,"ax",%progbits
 627              	 .align 1
 628              	 .global XMC_SCU_CalcTemperature
 629              	 .code 16
 630              	 .thumb_func
 632              	XMC_SCU_CalcTemperature:
 633              	.LFB85:
 527:../Libraries/XMCLib/src/xmc1_scu.c **** 
 528:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the die temperature value using ROM function */
 529:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CalcTemperature(void)
 530:../Libraries/XMCLib/src/xmc1_scu.c **** {
 634              	 .loc 1 530 0
 635              	 .cfi_startproc
 636 0000 08B5     	 push {r3,lr}
 637              	.LCFI3:
 638              	 .cfi_def_cfa_offset 8
 639              	 .cfi_offset 3,-8
 640              	 .cfi_offset 14,-4
 531:../Libraries/XMCLib/src/xmc1_scu.c ****   return (ROM_CalcTemperature());
 641              	 .loc 1 531 0
 642 0002 8623     	 mov r3,#134
 643 0004 5B00     	 lsl r3,r3,#1
 644 0006 1B68     	 ldr r3,[r3]
 645 0008 9847     	 blx r3
 646              	.LVL38:
 532:../Libraries/XMCLib/src/xmc1_scu.c **** }
 647              	 .loc 1 532 0
 648              	 
 649 000a 08BD     	 pop {r3,pc}
 650              	 .cfi_endproc
 651              	.LFE85:
 653              	 .section .text.XMC_SCU_CLOCK_SetRtcClockSource,"ax",%progbits
 654              	 .align 1
 655              	 .global XMC_SCU_CLOCK_SetRtcClockSource
 656              	 .code 16
 657              	 .thumb_func
 659              	XMC_SCU_CLOCK_SetRtcClockSource:
 660              	.LFB87:
 533:../Libraries/XMCLib/src/xmc1_scu.c **** 
 534:../Libraries/XMCLib/src/xmc1_scu.c **** 
 535:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which initializes the clock tree ofthe device */
 536:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 537:../Libraries/XMCLib/src/xmc1_scu.c **** {
 538:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 539:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 540:../Libraries/XMCLib/src/xmc1_scu.c **** 
 541:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 542:../Libraries/XMCLib/src/xmc1_scu.c ****   /* OSCHP source selection - OSC mode */
 543:../Libraries/XMCLib/src/xmc1_scu.c **** 
 544:../Libraries/XMCLib/src/xmc1_scu.c ****   if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
 545:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 546:../Libraries/XMCLib/src/xmc1_scu.c ****     if (OSCHP_GetFrequency() > 20000000U)
 547:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 548:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
 549:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 550:../Libraries/XMCLib/src/xmc1_scu.c **** 
 551:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY
 552:../Libraries/XMCLib/src/xmc1_scu.c ****                                config->oschp_mode;
 553:../Libraries/XMCLib/src/xmc1_scu.c **** 
 554:../Libraries/XMCLib/src/xmc1_scu.c ****     do 
 555:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 556:../Libraries/XMCLib/src/xmc1_scu.c ****       /* clear the status bit before restarting the detection. */
 557:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
 558:../Libraries/XMCLib/src/xmc1_scu.c **** 
 559:../Libraries/XMCLib/src/xmc1_scu.c ****       /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watch
 560:../Libraries/XMCLib/src/xmc1_scu.c ****          keeping in between at least one DCO2 cycle */
 561:../Libraries/XMCLib/src/xmc1_scu.c ****     
 562:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Disable XOWD */
 563:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
 564:../Libraries/XMCLib/src/xmc1_scu.c ****       
 565:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Clock domains synchronization, at least 1 DCO2 cycle */
 566:../Libraries/XMCLib/src/xmc1_scu.c ****       /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
 567:../Libraries/XMCLib/src/xmc1_scu.c ****       delay(538);
 568:../Libraries/XMCLib/src/xmc1_scu.c ****       
 569:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Enable XOWD */
 570:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
 571:../Libraries/XMCLib/src/xmc1_scu.c **** 
 572:../Libraries/XMCLib/src/xmc1_scu.c ****       /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
 573:../Libraries/XMCLib/src/xmc1_scu.c ****       while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
 574:../Libraries/XMCLib/src/xmc1_scu.c **** 
 575:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
 576:../Libraries/XMCLib/src/xmc1_scu.c ****       /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
 577:../Libraries/XMCLib/src/xmc1_scu.c ****       delay(2685);
 578:../Libraries/XMCLib/src/xmc1_scu.c ****       
 579:../Libraries/XMCLib/src/xmc1_scu.c ****     } while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
 580:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 581:../Libraries/XMCLib/src/xmc1_scu.c ****   else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
 582:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 583:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
 584:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 585:../Libraries/XMCLib/src/xmc1_scu.c **** 
 586:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
 587:../Libraries/XMCLib/src/xmc1_scu.c **** #ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP  
 588:../Libraries/XMCLib/src/xmc1_scu.c ****   if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
 589:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 590:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait oscillator startup time ~5s */
 591:../Libraries/XMCLib/src/xmc1_scu.c ****     delay(6500000);
 592:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 593:../Libraries/XMCLib/src/xmc1_scu.c **** #endif  
 594:../Libraries/XMCLib/src/xmc1_scu.c **** 
 595:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
 596:../Libraries/XMCLib/src/xmc1_scu.c ****                     config->dclk_src;
 597:../Libraries/XMCLib/src/xmc1_scu.c **** 
 598:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 599:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update PCLK selection mux. */
 600:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSE
 601:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 602:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 603:../Libraries/XMCLib/src/xmc1_scu.c **** 
 604:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Close the lock opened above. */
 605:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 606:../Libraries/XMCLib/src/xmc1_scu.c **** 
 607:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update the dividers now */
 608:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
 609:../Libraries/XMCLib/src/xmc1_scu.c **** 
 610:../Libraries/XMCLib/src/xmc1_scu.c **** }
 611:../Libraries/XMCLib/src/xmc1_scu.c **** 
 612:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which selects one of the available parent clock nodes for a given child clock node */
 613:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetRtcClockSource(const XMC_SCU_CLOCK_RTCCLKSRC_t source)
 614:../Libraries/XMCLib/src/xmc1_scu.c **** {
 661              	 .loc 1 614 0
 662              	 .cfi_startproc
 663              	.LVL39:
 664 0000 10B5     	 push {r4,lr}
 665              	.LCFI4:
 666              	 .cfi_def_cfa_offset 8
 667              	 .cfi_offset 4,-8
 668              	 .cfi_offset 14,-4
 669              	 .loc 1 614 0
 670 0002 041C     	 mov r4,r0
 615:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetRtcSourceClock:Wrong Parent Clock", XMC_SCU_CHECK_RTCCLKSRC(source))
 616:../Libraries/XMCLib/src/xmc1_scu.c **** 
 617:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 671              	 .loc 1 617 0
 672 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 673              	.LVL40:
 618:../Libraries/XMCLib/src/xmc1_scu.c **** 
 619:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_RTCCLKSEL_Msk) |
 674              	 .loc 1 619 0
 675 0008 044A     	 ldr r2,.L75
 676 000a 054B     	 ldr r3,.L75+4
 677 000c 1068     	 ldr r0,[r2]
 620:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 621:../Libraries/XMCLib/src/xmc1_scu.c **** 
 622:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 623:../Libraries/XMCLib/src/xmc1_scu.c **** }
 678              	 .loc 1 623 0
 679              	 
 619:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 680              	 .loc 1 619 0
 681 000e 1840     	 and r0,r3
 682 0010 2043     	 orr r0,r4
 683 0012 1060     	 str r0,[r2]
 684              	.LBB32:
 685              	.LBB33:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 686              	 .loc 1 399 0
 687 0014 C322     	 mov r2,#195
 688 0016 034B     	 ldr r3,.L75+8
 689 0018 5A62     	 str r2,[r3,#36]
 690              	.LVL41:
 691              	.LBE33:
 692              	.LBE32:
 693              	 .loc 1 623 0
 694 001a 10BD     	 pop {r4,pc}
 695              	.L76:
 696              	 .align 2
 697              	.L75:
 698 001c 00030140 	 .word 1073808128
 699 0020 FFFFF1FF 	 .word -917505
 700 0024 00000140 	 .word 1073807360
 701              	 .cfi_endproc
 702              	.LFE87:
 704              	 .section .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource,"ax",%progbits
 705              	 .align 1
 706              	 .global XMC_SCU_CLOCK_SetFastPeripheralClockSource
 707              	 .code 16
 708              	 .thumb_func
 710              	XMC_SCU_CLOCK_SetFastPeripheralClockSource:
 711              	.LFB88:
 624:../Libraries/XMCLib/src/xmc1_scu.c **** 
 625:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program the divider placed between fperiph and its parent */
 626:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetFastPeripheralClockSource(const XMC_SCU_CLOCK_PCLKSRC_t source)
 627:../Libraries/XMCLib/src/xmc1_scu.c **** {
 712              	 .loc 1 627 0
 713              	 .cfi_startproc
 714              	.LVL42:
 715 0000 10B5     	 push {r4,lr}
 716              	.LCFI5:
 717              	 .cfi_def_cfa_offset 8
 718              	 .cfi_offset 4,-8
 719              	 .cfi_offset 14,-4
 720              	 .loc 1 627 0
 721 0002 041C     	 mov r4,r0
 628:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 722              	 .loc 1 628 0
 723 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 724              	.LVL43:
 629:../Libraries/XMCLib/src/xmc1_scu.c **** 
 630:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_PCLKSEL_Msk) |
 725              	 .loc 1 630 0
 726 0008 044A     	 ldr r2,.L78
 727 000a 054B     	 ldr r3,.L78+4
 728 000c 1068     	 ldr r0,[r2]
 631:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 632:../Libraries/XMCLib/src/xmc1_scu.c **** 
 633:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 634:../Libraries/XMCLib/src/xmc1_scu.c **** }
 729              	 .loc 1 634 0
 730              	 
 630:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 731              	 .loc 1 630 0
 732 000e 1840     	 and r0,r3
 733 0010 2043     	 orr r0,r4
 734 0012 1060     	 str r0,[r2]
 735              	.LBB34:
 736              	.LBB35:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 737              	 .loc 1 399 0
 738 0014 C322     	 mov r2,#195
 739 0016 034B     	 ldr r3,.L78+8
 740 0018 5A62     	 str r2,[r3,#36]
 741              	.LVL44:
 742              	.LBE35:
 743              	.LBE34:
 744              	 .loc 1 634 0
 745 001a 10BD     	 pop {r4,pc}
 746              	.L79:
 747              	 .align 2
 748              	.L78:
 749 001c 00030140 	 .word 1073808128
 750 0020 FFFFFEFF 	 .word -65537
 751 0024 00000140 	 .word 1073807360
 752              	 .cfi_endproc
 753              	.LFE88:
 755              	 .section .text.XMC_SCU_CLOCK_GatePeripheralClock,"ax",%progbits
 756              	 .align 1
 757              	 .global XMC_SCU_CLOCK_GatePeripheralClock
 758              	 .code 16
 759              	 .thumb_func
 761              	XMC_SCU_CLOCK_GatePeripheralClock:
 762              	.LFB89:
 635:../Libraries/XMCLib/src/xmc1_scu.c **** 
 636:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which gates a clock node at its source */
 637:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 638:../Libraries/XMCLib/src/xmc1_scu.c **** {
 763              	 .loc 1 638 0
 764              	 .cfi_startproc
 765              	.LVL45:
 766 0000 10B5     	 push {r4,lr}
 767              	.LCFI6:
 768              	 .cfi_def_cfa_offset 8
 769              	 .cfi_offset 4,-8
 770              	 .cfi_offset 14,-4
 771              	 .loc 1 638 0
 772 0002 041C     	 mov r4,r0
 639:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 773              	 .loc 1 639 0
 774 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 775              	.LVL46:
 776              	.LBB36:
 777              	.LBB37:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 778              	 .loc 1 399 0
 779 0008 C322     	 mov r2,#195
 780              	.LBE37:
 781              	.LBE36:
 640:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
 782              	 .loc 1 640 0
 783 000a 034B     	 ldr r3,.L81
 641:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 642:../Libraries/XMCLib/src/xmc1_scu.c **** }
 784              	 .loc 1 642 0
 785              	 
 640:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
 786              	 .loc 1 640 0
 787 000c D868     	 ldr r0,[r3,#12]
 788 000e 2043     	 orr r0,r4
 789 0010 D860     	 str r0,[r3,#12]
 790              	.LBB39:
 791              	.LBB38:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 792              	 .loc 1 399 0
 793 0012 024B     	 ldr r3,.L81+4
 794 0014 5A62     	 str r2,[r3,#36]
 795              	.LVL47:
 796              	.LBE38:
 797              	.LBE39:
 798              	 .loc 1 642 0
 799 0016 10BD     	 pop {r4,pc}
 800              	.L82:
 801              	 .align 2
 802              	.L81:
 803 0018 00030140 	 .word 1073808128
 804 001c 00000140 	 .word 1073807360
 805              	 .cfi_endproc
 806              	.LFE89:
 808              	 .section .text.XMC_SCU_CLOCK_UngatePeripheralClock,"ax",%progbits
 809              	 .align 1
 810              	 .global XMC_SCU_CLOCK_UngatePeripheralClock
 811              	 .code 16
 812              	 .thumb_func
 814              	XMC_SCU_CLOCK_UngatePeripheralClock:
 815              	.LFB90:
 643:../Libraries/XMCLib/src/xmc1_scu.c **** 
 644:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which ungates a clock note at its source */
 645:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 646:../Libraries/XMCLib/src/xmc1_scu.c **** {
 816              	 .loc 1 646 0
 817              	 .cfi_startproc
 818              	.LVL48:
 819 0000 10B5     	 push {r4,lr}
 820              	.LCFI7:
 821              	 .cfi_def_cfa_offset 8
 822              	 .cfi_offset 4,-8
 823              	 .cfi_offset 14,-4
 824              	 .loc 1 646 0
 825 0002 041C     	 mov r4,r0
 647:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 826              	 .loc 1 647 0
 827 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 828              	.LVL49:
 648:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
 829              	 .loc 1 648 0
 830 0008 054B     	 ldr r3,.L85
 831 000a 1869     	 ldr r0,[r3,#16]
 832 000c 2043     	 orr r0,r4
 833 000e 1861     	 str r0,[r3,#16]
 834              	.L84:
 649:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 835              	 .loc 1 649 0 discriminator 1
 836 0010 1A68     	 ldr r2,[r3]
 837 0012 5200     	 lsl r2,r2,#1
 838 0014 FCD4     	 bmi .L84
 839              	.LBB40:
 840              	.LBB41:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 841              	 .loc 1 399 0
 842 0016 C322     	 mov r2,#195
 843 0018 024B     	 ldr r3,.L85+4
 844              	.LBE41:
 845              	.LBE40:
 650:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 651:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 652:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 653:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 654:../Libraries/XMCLib/src/xmc1_scu.c **** }
 846              	 .loc 1 654 0
 847              	 
 848              	.LBB43:
 849              	.LBB42:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 850              	 .loc 1 399 0
 851 001a 5A62     	 str r2,[r3,#36]
 852              	.LVL50:
 853              	.LBE42:
 854              	.LBE43:
 855              	 .loc 1 654 0
 856 001c 10BD     	 pop {r4,pc}
 857              	.L86:
 858 001e C046     	 .align 2
 859              	.L85:
 860 0020 00030140 	 .word 1073808128
 861 0024 00000140 	 .word 1073807360
 862              	 .cfi_endproc
 863              	.LFE90:
 865              	 .section .text.XMC_SCU_CLOCK_IsPeripheralClockGated,"ax",%progbits
 866              	 .align 1
 867              	 .global XMC_SCU_CLOCK_IsPeripheralClockGated
 868              	 .code 16
 869              	 .thumb_func
 871              	XMC_SCU_CLOCK_IsPeripheralClockGated:
 872              	.LFB91:
 655:../Libraries/XMCLib/src/xmc1_scu.c **** 
 656:../Libraries/XMCLib/src/xmc1_scu.c **** /* Checks the status of peripheral clock gating */
 657:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 658:../Libraries/XMCLib/src/xmc1_scu.c **** {
 873              	 .loc 1 658 0
 874              	 .cfi_startproc
 875              	.LVL51:
 659:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 876              	 .loc 1 659 0
 877 0000 034B     	 ldr r3,.L88
 660:../Libraries/XMCLib/src/xmc1_scu.c **** }
 878              	 .loc 1 660 0
 879              	 
 659:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 880              	 .loc 1 659 0
 881 0002 9B68     	 ldr r3,[r3,#8]
 882 0004 1840     	 and r0,r3
 883              	.LVL52:
 884 0006 431E     	 sub r3,r0,#1
 885 0008 9841     	 sbc r0,r0,r3
 886 000a C0B2     	 uxtb r0,r0
 887              	 .loc 1 660 0
 888 000c 7047     	 bx lr
 889              	.L89:
 890 000e C046     	 .align 2
 891              	.L88:
 892 0010 00030140 	 .word 1073808128
 893              	 .cfi_endproc
 894              	.LFE91:
 896              	 .section .text.XMC_SCU_CLOCK_ScaleMCLKFrequency,"ax",%progbits
 897              	 .align 1
 898              	 .global XMC_SCU_CLOCK_ScaleMCLKFrequency
 899              	 .code 16
 900              	 .thumb_func
 902              	XMC_SCU_CLOCK_ScaleMCLKFrequency:
 903              	.LFB93:
 661:../Libraries/XMCLib/src/xmc1_scu.c **** 
 662:../Libraries/XMCLib/src/xmc1_scu.c **** /* This API configures main clock (MCLK) frequency to requested frequency value. */
 663:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetMCLKFrequency(uint32_t freq_khz)
 664:../Libraries/XMCLib/src/xmc1_scu.c **** {
 665:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 666:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_int;
 667:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_frac;
 668:../Libraries/XMCLib/src/xmc1_scu.c **** 
 669:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 670:../Libraries/XMCLib/src/xmc1_scu.c ****   if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
 671:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 672:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = DCO1_DIV2_FREQUENCY_KHZ_Q22_10 / freq_khz;
 673:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 674:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 675:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 676:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = ((OSCHP_GetFrequency() / 1000U) << 10U) / freq_khz;
 677:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 678:../Libraries/XMCLib/src/xmc1_scu.c **** 
 679:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 680:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffffU)
 681:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 682:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffffU;
 683:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 684:../Libraries/XMCLib/src/xmc1_scu.c **** 
 685:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 10U;
 686:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0x3ffU;
 687:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 688:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = DCO1_DIV2_FREQUENCY_KHZ_Q24_8 / freq_khz;
 689:../Libraries/XMCLib/src/xmc1_scu.c **** 
 690:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 691:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffU)
 692:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 693:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffU;
 694:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 695:../Libraries/XMCLib/src/xmc1_scu.c **** 
 696:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 8U;
 697:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0xffU;
 698:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 699:../Libraries/XMCLib/src/xmc1_scu.c **** 
 700:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(ratio_int, ratio_frac);
 701:../Libraries/XMCLib/src/xmc1_scu.c **** }
 702:../Libraries/XMCLib/src/xmc1_scu.c **** 
 703:../Libraries/XMCLib/src/xmc1_scu.c **** 
 704:../Libraries/XMCLib/src/xmc1_scu.c **** /* A utility routine which updates the fractional dividers in steps */
 705:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
 706:../Libraries/XMCLib/src/xmc1_scu.c **** {
 904              	 .loc 1 706 0
 905              	 .cfi_startproc
 906              	.LVL53:
 907 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 908              	.LCFI8:
 909              	 .cfi_def_cfa_offset 24
 910              	 .cfi_offset 3,-24
 911              	 .cfi_offset 4,-20
 912              	 .cfi_offset 5,-16
 913              	 .cfi_offset 6,-12
 914              	 .cfi_offset 7,-8
 915              	 .cfi_offset 14,-4
 916              	 .loc 1 706 0
 917 0002 0D1C     	 mov r5,r1
 707:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Find out current and target value of idiv */
 708:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t curr_idiv;
 709:../Libraries/XMCLib/src/xmc1_scu.c **** 
 710:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 711:../Libraries/XMCLib/src/xmc1_scu.c **** 
 712:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Take a snapshot of value already programmed into IDIV */
 713:../Libraries/XMCLib/src/xmc1_scu.c ****   curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
 714:../Libraries/XMCLib/src/xmc1_scu.c **** 
 715:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 716:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
 918              	 .loc 1 716 0
 919 0004 0326     	 mov r6,#3
 706:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Find out current and target value of idiv */
 920              	 .loc 1 706 0
 921 0006 041C     	 mov r4,r0
 710:../Libraries/XMCLib/src/xmc1_scu.c **** 
 922              	 .loc 1 710 0
 923 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 924              	.LVL54:
 713:../Libraries/XMCLib/src/xmc1_scu.c **** 
 925              	 .loc 1 713 0
 926 000c 224B     	 ldr r3,.L102
 717:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 927              	 .loc 1 717 0
 928 000e 280A     	 lsr r0,r5,#8
 713:../Libraries/XMCLib/src/xmc1_scu.c **** 
 929              	 .loc 1 713 0
 930 0010 1A68     	 ldr r2,[r3]
 716:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 931              	 .loc 1 716 0
 932 0012 D969     	 ldr r1,[r3,#28]
 718:../Libraries/XMCLib/src/xmc1_scu.c **** 
 719:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 720:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 933              	 .loc 1 720 0
 934 0014 EDB2     	 uxtb r5,r5
 935              	.LVL55:
 716:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 936              	 .loc 1 716 0
 937 0016 B143     	 bic r1,r6
 938 0018 0143     	 orr r1,r0
 939 001a D961     	 str r1,[r3,#28]
 719:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 940              	 .loc 1 719 0
 941 001c 1868     	 ldr r0,[r3]
 942 001e 1F49     	 ldr r1,.L102+4
 713:../Libraries/XMCLib/src/xmc1_scu.c **** 
 943              	 .loc 1 713 0
 944 0020 1204     	 lsl r2,r2,#16
 719:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 945              	 .loc 1 719 0
 946 0022 0140     	 and r1,r0
 947 0024 1E48     	 ldr r0,.L102+8
 713:../Libraries/XMCLib/src/xmc1_scu.c **** 
 948              	 .loc 1 713 0
 949 0026 120E     	 lsr r2,r2,#24
 950              	.LVL56:
 951 0028 0143     	 orr r1,r0
 952              	 .loc 1 720 0
 953 002a 0D43     	 orr r5,r1
 719:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 954              	 .loc 1 719 0
 955 002c 1D60     	 str r5,[r3]
 956              	.L91:
 721:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 722:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 723:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 724:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 725:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 726:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 727:../Libraries/XMCLib/src/xmc1_scu.c **** 
 728:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
 957              	 .loc 1 728 0 discriminator 1
 958 002e 1968     	 ldr r1,[r3]
 959 0030 4900     	 lsl r1,r1,#1
 960 0032 FCD4     	 bmi .L91
 961 0034 1B4D     	 ldr r5,.L102+12
 962              	.LBB50:
 963              	.LBB51:
 729:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 730:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Spin until the core supply stabilizes */
 731:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 732:../Libraries/XMCLib/src/xmc1_scu.c **** 
 733:../Libraries/XMCLib/src/xmc1_scu.c ****   if(curr_idiv <= idiv)
 734:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 735:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
 736:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
 737:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 738:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 739:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 740:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
 741:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
 742:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 743:../Libraries/XMCLib/src/xmc1_scu.c **** 
 744:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 745:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 746:../Libraries/XMCLib/src/xmc1_scu.c **** 
 747:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 748:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 749:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 750:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 751:../Libraries/XMCLib/src/xmc1_scu.c **** 
 752:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 753:../Libraries/XMCLib/src/xmc1_scu.c **** 
 754:../Libraries/XMCLib/src/xmc1_scu.c ****   SystemCoreClockUpdate();
 755:../Libraries/XMCLib/src/xmc1_scu.c **** 
 756:../Libraries/XMCLib/src/xmc1_scu.c **** }
 757:../Libraries/XMCLib/src/xmc1_scu.c **** 
 758:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 759:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
 760:../Libraries/XMCLib/src/xmc1_scu.c **** {
 761:../Libraries/XMCLib/src/xmc1_scu.c ****   while (curr_idiv > (target_idiv * 4UL))
 964              	 .loc 1 761 0
 965 0036 A600     	 lsl r6,r4,#2
 966              	.LBE51:
 967              	.LBE50:
 733:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 968              	 .loc 1 733 0
 969 0038 A242     	 cmp r2,r4
 970 003a 1AD8     	 bhi .L93
 971              	.LVL57:
 972              	.L96:
 973              	.LBB53:
 974              	.LBB54:
 762:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 763:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
 764:../Libraries/XMCLib/src/xmc1_scu.c **** 
 765:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 766:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 767:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 768:../Libraries/XMCLib/src/xmc1_scu.c **** 
 769:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 770:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 771:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 772:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 773:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 774:../Libraries/XMCLib/src/xmc1_scu.c **** }
 775:../Libraries/XMCLib/src/xmc1_scu.c **** 
 776:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 777:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
 778:../Libraries/XMCLib/src/xmc1_scu.c **** {
 779:../Libraries/XMCLib/src/xmc1_scu.c **** 
 780:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((curr_idiv * 4UL) < target_idiv)
 975              	 .loc 1 780 0
 976 003c 9100     	 lsl r1,r2,#2
 977 003e A142     	 cmp r1,r4
 978 0040 0DD2     	 bcs .L101
 781:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 782:../Libraries/XMCLib/src/xmc1_scu.c ****     if(0U == curr_idiv)
 979              	 .loc 1 782 0
 980 0042 002A     	 cmp r2,#0
 981 0044 00D1     	 bne .L94
 783:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 784:../Libraries/XMCLib/src/xmc1_scu.c ****       curr_idiv = 1U;
 982              	 .loc 1 784 0
 983 0046 0132     	 add r2,r2,#1
 984              	.LVL58:
 985              	.L94:
 785:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 786:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
 787:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 986              	 .loc 1 787 0
 987 0048 1968     	 ldr r1,[r3]
 786:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 988              	 .loc 1 786 0
 989 004a 9200     	 lsl r2,r2,#2
 990              	.LVL59:
 991              	 .loc 1 787 0
 992 004c 2940     	 and r1,r5
 993 004e 0143     	 orr r1,r0
 788:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 994              	 .loc 1 788 0
 995 0050 1602     	 lsl r6,r2,#8
 996 0052 3143     	 orr r1,r6
 787:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 997              	 .loc 1 787 0
 998 0054 1960     	 str r1,[r3]
 999              	.L95:
 789:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 790:../Libraries/XMCLib/src/xmc1_scu.c **** 
 791:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1000              	 .loc 1 791 0
 1001 0056 1968     	 ldr r1,[r3]
 1002 0058 4900     	 lsl r1,r1,#1
 1003 005a FCD4     	 bmi .L95
 1004 005c EEE7     	 b .L96
 1005              	.LVL60:
 1006              	.L101:
 1007              	.LBE54:
 1008              	.LBE53:
 744:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1009              	 .loc 1 744 0
 1010 005e 1A68     	 ldr r2,[r3]
 745:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1011              	 .loc 1 745 0
 1012 0060 2402     	 lsl r4,r4,#8
 1013              	.LVL61:
 744:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1014              	 .loc 1 744 0
 1015 0062 2A40     	 and r2,r5
 1016 0064 1043     	 orr r0,r2
 745:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1017              	 .loc 1 745 0
 1018 0066 2043     	 orr r0,r4
 744:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1019              	 .loc 1 744 0
 1020 0068 1860     	 str r0,[r3]
 747:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1021              	 .loc 1 747 0
 1022 006a 0CE0     	 b .L98
 1023              	.LVL62:
 1024              	.L99:
 1025              	.LBB55:
 1026              	.LBB52:
 769:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 1027              	 .loc 1 769 0
 1028 006c 1968     	 ldr r1,[r3]
 1029 006e 4900     	 lsl r1,r1,#1
 1030 0070 FCD4     	 bmi .L99
 1031              	.LVL63:
 1032              	.L93:
 761:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1033              	 .loc 1 761 0
 1034 0072 B242     	 cmp r2,r6
 1035 0074 F3D9     	 bls .L101
 765:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1036              	 .loc 1 765 0
 1037 0076 1968     	 ldr r1,[r3]
 763:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1038              	 .loc 1 763 0
 1039 0078 9208     	 lsr r2,r2,#2
 1040              	.LVL64:
 765:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1041              	 .loc 1 765 0
 1042 007a 2940     	 and r1,r5
 1043 007c 0143     	 orr r1,r0
 766:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 1044              	 .loc 1 766 0
 1045 007e 1702     	 lsl r7,r2,#8
 1046 0080 3943     	 orr r1,r7
 765:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1047              	 .loc 1 765 0
 1048 0082 1960     	 str r1,[r3]
 1049 0084 F2E7     	 b .L99
 1050              	.LVL65:
 1051              	.L98:
 1052              	.LBE52:
 1053              	.LBE55:
 747:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1054              	 .loc 1 747 0 discriminator 1
 1055 0086 1A68     	 ldr r2,[r3]
 1056 0088 5200     	 lsl r2,r2,#1
 1057 008a FCD4     	 bmi .L98
 1058              	.LBB56:
 1059              	.LBB57:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1060              	 .loc 1 399 0
 1061 008c C322     	 mov r2,#195
 1062 008e 064B     	 ldr r3,.L102+16
 1063              	.LBE57:
 1064              	.LBE56:
 756:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1065              	 .loc 1 756 0
 1066              	 
 1067              	.LBB59:
 1068              	.LBB58:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1069              	 .loc 1 399 0
 1070 0090 5A62     	 str r2,[r3,#36]
 1071              	.LBE58:
 1072              	.LBE59:
 754:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1073              	 .loc 1 754 0
 1074 0092 FFF7FEFF 	 bl SystemCoreClockUpdate
 1075              	.LVL66:
 756:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1076              	 .loc 1 756 0
 1077 0096 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1078              	.L103:
 1079              	 .align 2
 1080              	.L102:
 1081 0098 00030140 	 .word 1073808128
 1082 009c 00FF0FC0 	 .word -1072693504
 1083 00a0 0000F03F 	 .word 1072693248
 1084 00a4 FF000FC0 	 .word -1072758529
 1085 00a8 00000140 	 .word 1073807360
 1086              	 .cfi_endproc
 1087              	.LFE93:
 1089              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 1090              	 .align 1
 1091              	 .global XMC_SCU_CLOCK_Init
 1092              	 .code 16
 1093              	 .thumb_func
 1095              	XMC_SCU_CLOCK_Init:
 1096              	.LFB86:
 537:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 1097              	 .loc 1 537 0
 1098              	 .cfi_startproc
 1099              	.LVL67:
 1100 0000 38B5     	 push {r3,r4,r5,lr}
 1101              	.LCFI9:
 1102              	 .cfi_def_cfa_offset 16
 1103              	 .cfi_offset 3,-16
 1104              	 .cfi_offset 4,-12
 1105              	 .cfi_offset 5,-8
 1106              	 .cfi_offset 14,-4
 537:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 1107              	 .loc 1 537 0
 1108 0002 041C     	 mov r4,r0
 539:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1109              	 .loc 1 539 0
 1110 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 1111              	.LVL68:
 544:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1112              	 .loc 1 544 0
 1113 0008 A279     	 ldrb r2,[r4,#6]
 1114 000a 2C4D     	 ldr r5,.L120
 1115 000c 302A     	 cmp r2,#48
 1116 000e 2FD0     	 beq .L105
 546:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 1117              	 .loc 1 546 0
 1118 0010 FFF7FEFF 	 bl OSCHP_GetFrequency
 1119              	.LVL69:
 1120 0014 2A4B     	 ldr r3,.L120+4
 1121 0016 9842     	 cmp r0,r3
 1122 0018 03D9     	 bls .L106
 548:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 1123              	 .loc 1 548 0
 1124 001a 4022     	 mov r2,#64
 1125 001c 2B88     	 ldrh r3,[r5]
 1126 001e 1343     	 orr r3,r2
 1127 0020 2B80     	 strh r3,[r5]
 1128              	.L106:
 551:../Libraries/XMCLib/src/xmc1_scu.c ****                                config->oschp_mode;
 1129              	 .loc 1 551 0
 1130 0022 3222     	 mov r2,#50
 1131 0024 2B88     	 ldrh r3,[r5]
 1132 0026 9343     	 bic r3,r2
 1133 0028 A279     	 ldrb r2,[r4,#6]
 1134 002a 1343     	 orr r3,r2
 1135 002c 2B80     	 strh r3,[r5]
 1136              	.L112:
 557:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1137              	 .loc 1 557 0
 1138 002e 0223     	 mov r3,#2
 1139 0030 2449     	 ldr r1,.L120+8
 563:../Libraries/XMCLib/src/xmc1_scu.c ****       
 1140              	 .loc 1 563 0
 1141 0032 254A     	 ldr r2,.L120+12
 557:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1142              	 .loc 1 557 0
 1143 0034 8B62     	 str r3,[r1,#40]
 563:../Libraries/XMCLib/src/xmc1_scu.c ****       
 1144              	 .loc 1 563 0
 1145 0036 254B     	 ldr r3,.L120+16
 1146 0038 5869     	 ldr r0,[r3,#20]
 1147 003a 0240     	 and r2,r0
 1148 003c 181C     	 mov r0,r3
 1149 003e 5A61     	 str r2,[r3,#20]
 1150              	.LVL70:
 1151 0040 234A     	 ldr r2,.L120+20
 1152              	.LVL71:
 1153              	.L107:
 1154 0042 013A     	 sub r2,r2,#1
 1155              	.LVL72:
 1156              	.LBB60:
 1157              	.LBB61:
 283:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1158              	 .loc 1 283 0
 1159 0044 002A     	 cmp r2,#0
 1160 0046 01D0     	 beq .L118
 1161              	.LVL73:
 285:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1162              	 .loc 1 285 0
 1163              	
 1164 0048 C046     	 nop
 1165              	
 1166              	 .code 16
 1167 004a FAE7     	 b .L107
 1168              	.LVL74:
 1169              	.L118:
 1170              	.LBE61:
 1171              	.LBE60:
 570:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1172              	 .loc 1 570 0
 1173 004c C025     	 mov r5,#192
 1174 004e 5A69     	 ldr r2,[r3,#20]
 1175              	.LVL75:
 1176 0050 AD04     	 lsl r5,r5,#18
 1177 0052 2A43     	 orr r2,r5
 1178 0054 5A61     	 str r2,[r3,#20]
 1179              	.L109:
 573:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1180              	 .loc 1 573 0 discriminator 1
 1181 0056 4369     	 ldr r3,[r0,#20]
 1182 0058 DB01     	 lsl r3,r3,#7
 1183 005a FCD4     	 bmi .L109
 1184 005c 1D4B     	 ldr r3,.L120+24
 1185              	.L110:
 1186              	.LVL76:
 1187 005e 013B     	 sub r3,r3,#1
 1188              	.LVL77:
 1189              	.LBB62:
 1190              	.LBB63:
 283:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1191              	 .loc 1 283 0
 1192 0060 002B     	 cmp r3,#0
 1193 0062 01D0     	 beq .L119
 1194              	.LVL78:
 285:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1195              	 .loc 1 285 0
 1196              	
 1197 0064 C046     	 nop
 1198              	
 1199              	 .code 16
 1200 0066 FAE7     	 b .L110
 1201              	.LVL79:
 1202              	.L119:
 1203              	.LBE63:
 1204              	.LBE62:
 579:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1205              	 .loc 1 579 0
 1206 0068 0B6A     	 ldr r3,[r1,#32]
 1207              	.LVL80:
 1208 006a 9B07     	 lsl r3,r3,#30
 1209 006c DFD4     	 bmi .L112
 1210 006e 02E0     	 b .L113
 1211              	.L105:
 583:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1212              	 .loc 1 583 0
 1213 0070 2B88     	 ldrh r3,[r5]
 1214 0072 1343     	 orr r3,r2
 1215 0074 2B80     	 strh r3,[r5]
 1216              	.L113:
 586:../Libraries/XMCLib/src/xmc1_scu.c **** #ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP  
 1217              	 .loc 1 586 0
 1218 0076 E379     	 ldrb r3,[r4,#7]
 1219 0078 174A     	 ldr r2,.L120+28
 1220 007a 99B2     	 uxth r1,r3
 1221 007c 1180     	 strh r1,[r2]
 588:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1222              	 .loc 1 588 0
 1223 007e 002B     	 cmp r3,#0
 1224 0080 05D1     	 bne .L115
 1225 0082 164B     	 ldr r3,.L120+32
 1226              	.L114:
 1227              	.LVL81:
 1228 0084 013B     	 sub r3,r3,#1
 1229              	.LVL82:
 1230              	.LBB64:
 1231              	.LBB65:
 283:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1232              	 .loc 1 283 0
 1233 0086 002B     	 cmp r3,#0
 1234 0088 01D0     	 beq .L115
 1235              	.LVL83:
 285:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1236              	 .loc 1 285 0
 1237              	
 1238 008a C046     	 nop
 1239              	
 1240              	 .code 16
 1241 008c FAE7     	 b .L114
 1242              	.LVL84:
 1243              	.L115:
 1244              	.LBE65:
 1245              	.LBE64:
 595:../Libraries/XMCLib/src/xmc1_scu.c ****                     config->dclk_src;
 1246              	 .loc 1 595 0
 1247 008e 0F49     	 ldr r1,.L120+16
 1248 0090 134A     	 ldr r2,.L120+36
 1249 0092 CB69     	 ldr r3,[r1,#28]
 1250 0094 A088     	 ldrh r0,[r4,#4]
 1251 0096 1340     	 and r3,r2
 1252 0098 0343     	 orr r3,r0
 1253 009a E268     	 ldr r2,[r4,#12]
 1254 009c A068     	 ldr r0,[r4,#8]
 1255 009e CB61     	 str r3,[r1,#28]
 600:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1256              	 .loc 1 600 0
 1257 00a0 0B68     	 ldr r3,[r1]
 1258 00a2 1043     	 orr r0,r2
 1259 00a4 0F4A     	 ldr r2,.L120+40
 610:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1260              	 .loc 1 610 0
 1261              	 
 600:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1262              	 .loc 1 600 0
 1263 00a6 1340     	 and r3,r2
 1264              	.LBB66:
 1265              	.LBB67:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1266              	 .loc 1 399 0
 1267 00a8 C322     	 mov r2,#195
 1268              	.LBE67:
 1269              	.LBE66:
 601:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 1270              	 .loc 1 601 0
 1271 00aa 0343     	 orr r3,r0
 600:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1272              	 .loc 1 600 0
 1273 00ac 0B60     	 str r3,[r1]
 1274              	.LBB69:
 1275              	.LBB68:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1276              	 .loc 1 399 0
 1277 00ae 0E4B     	 ldr r3,.L120+44
 1278 00b0 5A62     	 str r2,[r3,#36]
 1279              	.LBE68:
 1280              	.LBE69:
 608:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1281              	 .loc 1 608 0
 1282 00b2 A078     	 ldrb r0,[r4,#2]
 1283 00b4 2188     	 ldrh r1,[r4]
 1284 00b6 FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 1285              	.LVL85:
 1286              	.LVL86:
 610:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1287              	 .loc 1 610 0
 1288 00ba 38BD     	 pop {r3,r4,r5,pc}
 1289              	.L121:
 1290              	 .align 2
 1291              	.L120:
 1292 00bc 90100140 	 .word 1073811600
 1293 00c0 002D3101 	 .word 20000000
 1294 00c4 38000140 	 .word 1073807416
 1295 00c8 FFFFFFFD 	 .word -33554433
 1296 00cc 00030140 	 .word 1073808128
 1297 00d0 1A020000 	 .word 538
 1298 00d4 7D0A0000 	 .word 2685
 1299 00d8 8C100140 	 .word 1073811596
 1300 00dc A02E6300 	 .word 6500000
 1301 00e0 FFFDFFFF 	 .word -513
 1302 00e4 FFFFF0FF 	 .word -983041
 1303 00e8 00000140 	 .word 1073807360
 1304              	 .cfi_endproc
 1305              	.LFE86:
 1307              	 .global __aeabi_uidiv
 1308              	 .section .text.XMC_SCU_CLOCK_SetMCLKFrequency,"ax",%progbits
 1309              	 .align 1
 1310              	 .global XMC_SCU_CLOCK_SetMCLKFrequency
 1311              	 .code 16
 1312              	 .thumb_func
 1314              	XMC_SCU_CLOCK_SetMCLKFrequency:
 1315              	.LFB92:
 664:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 1316              	 .loc 1 664 0
 1317              	 .cfi_startproc
 1318              	.LVL87:
 670:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1319              	 .loc 1 670 0
 1320 0000 0E4B     	 ldr r3,.L127
 664:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 1321              	 .loc 1 664 0
 1322 0002 10B5     	 push {r4,lr}
 1323              	.LCFI10:
 1324              	 .cfi_def_cfa_offset 8
 1325              	 .cfi_offset 4,-8
 1326              	 .cfi_offset 14,-4
 670:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1327              	 .loc 1 670 0
 1328 0004 DB69     	 ldr r3,[r3,#28]
 664:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 1329              	 .loc 1 664 0
 1330 0006 041C     	 mov r4,r0
 670:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1331              	 .loc 1 670 0
 1332 0008 9B05     	 lsl r3,r3,#22
 1333 000a 01D4     	 bmi .L123
 672:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1334              	 .loc 1 672 0
 1335 000c 0C48     	 ldr r0,.L127+4
 1336              	.LVL88:
 1337 000e 06E0     	 b .L126
 1338              	.LVL89:
 1339              	.L123:
 676:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1340              	 .loc 1 676 0
 1341 0010 FFF7FEFF 	 bl OSCHP_GetFrequency
 1342              	.LVL90:
 1343 0014 FA21     	 mov r1,#250
 1344 0016 8900     	 lsl r1,r1,#2
 1345 0018 FFF7FEFF 	 bl __aeabi_uidiv
 1346              	.LVL91:
 1347 001c 8002     	 lsl r0,r0,#10
 1348              	.L126:
 1349 001e 211C     	 mov r1,r4
 1350 0020 FFF7FEFF 	 bl __aeabi_uidiv
 1351              	.LVL92:
 1352 0024 074B     	 ldr r3,.L127+8
 1353 0026 011E     	 sub r1,r0,#0
 1354 0028 9942     	 cmp r1,r3
 1355 002a 00D9     	 bls .L125
 1356 002c 191C     	 mov r1,r3
 1357              	.L125:
 1358              	.LVL93:
 685:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0x3ffU;
 1359              	 .loc 1 685 0
 1360 002e 880A     	 lsr r0,r1,#10
 1361              	.LVL94:
 686:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 1362              	 .loc 1 686 0
 1363 0030 8905     	 lsl r1,r1,#22
 1364              	.LVL95:
 1365 0032 890D     	 lsr r1,r1,#22
 700:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1366              	 .loc 1 700 0
 1367 0034 FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 1368              	.LVL96:
 701:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1369              	 .loc 1 701 0
 1370              	 
 1371              	.LVL97:
 1372 0038 10BD     	 pop {r4,pc}
 1373              	.L128:
 1374 003a C046     	 .align 2
 1375              	.L127:
 1376 003c 00030140 	 .word 1073808128
 1377 0040 0000EE02 	 .word 49152000
 1378 0044 FFFFFF00 	 .word 16777215
 1379              	 .cfi_endproc
 1380              	.LFE92:
 1382              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 1383              	 .align 1
 1384              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1385              	 .code 16
 1386              	 .thumb_func
 1388              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 1389              	.LFB96:
 792:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 793:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 794:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 795:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 796:../Libraries/XMCLib/src/xmc1_scu.c **** }
 797:../Libraries/XMCLib/src/xmc1_scu.c **** 
 798:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 799:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 800:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 801:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 802:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1390              	 .loc 1 802 0
 1391              	 .cfi_startproc
 803:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock);
 1392              	 .loc 1 803 0
 1393 0000 014B     	 ldr r3,.L130
 804:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1394              	 .loc 1 804 0
 1395              	 
 803:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock);
 1396              	 .loc 1 803 0
 1397 0002 1868     	 ldr r0,[r3]
 1398              	 .loc 1 804 0
 1399 0004 7047     	 bx lr
 1400              	.L131:
 1401 0006 C046     	 .align 2
 1402              	.L130:
 1403 0008 00000000 	 .word SystemCoreClock
 1404              	 .cfi_endproc
 1405              	.LFE96:
 1407              	 .section .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency,"ax",%progbits
 1408              	 .align 1
 1409              	 .global XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
 1410              	 .code 16
 1411              	 .thumb_func
 1413              	XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:
 1414              	.LFB97:
 805:../Libraries/XMCLib/src/xmc1_scu.c **** 
 806:../Libraries/XMCLib/src/xmc1_scu.c **** /* Provides the clock frequency of peripherals on the peripheral bus that are using a shared functi
 807:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetFastPeripheralClockFrequency(void)
 808:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1415              	 .loc 1 808 0
 1416              	 .cfi_startproc
 809:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock << ((SCU_CLK->CLKCR & SCU_CLK_CLKCR_PCLKSEL_Msk) >> SCU_CLK_CLKCR_PCLKSEL
 1417              	 .loc 1 809 0
 1418 0000 044B     	 ldr r3,.L133
 810:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1419              	 .loc 1 810 0
 1420              	 
 809:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock << ((SCU_CLK->CLKCR & SCU_CLK_CLKCR_PCLKSEL_Msk) >> SCU_CLK_CLKCR_PCLKSEL
 1421              	 .loc 1 809 0
 1422 0002 1868     	 ldr r0,[r3]
 1423 0004 044B     	 ldr r3,.L133+4
 1424 0006 C003     	 lsl r0,r0,#15
 1425 0008 1B68     	 ldr r3,[r3]
 1426 000a C00F     	 lsr r0,r0,#31
 1427 000c 8340     	 lsl r3,r3,r0
 1428 000e 181C     	 mov r0,r3
 1429              	 .loc 1 810 0
 1430 0010 7047     	 bx lr
 1431              	.L134:
 1432 0012 C046     	 .align 2
 1433              	.L133:
 1434 0014 00030140 	 .word 1073808128
 1435 0018 00000000 	 .word SystemCoreClock
 1436              	 .cfi_endproc
 1437              	.LFE97:
 1439              	 .global __aeabi_idiv
 1440              	 .section .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature,"ax",%progbits
 1441              	 .align 1
 1442              	 .global XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
 1443              	 .code 16
 1444              	 .thumb_func
 1446              	XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:
 1447              	.LFB98:
 811:../Libraries/XMCLib/src/xmc1_scu.c **** 
 812:../Libraries/XMCLib/src/xmc1_scu.c **** /* DCO1 clock frequency can be calibrated during runtime to achieve a better accuracy */
 813:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature(int32_t temperature)
 814:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1448              	 .loc 1 814 0
 1449              	 .cfi_startproc
 1450              	.LVL98:
 1451 0000 10B5     	 push {r4,lr}
 1452              	.LCFI11:
 1453              	 .cfi_def_cfa_offset 8
 1454              	 .cfi_offset 4,-8
 1455              	 .cfi_offset 14,-4
 815:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t a;
 816:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t b;
 817:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t d;
 818:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t e;
 819:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t offset;
 820:../Libraries/XMCLib/src/xmc1_scu.c **** 
 821:../Libraries/XMCLib/src/xmc1_scu.c ****   a = *((uint8_t*)DCO_ADJLO_T2);
 822:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1456              	 .loc 1 822 0
 1457 0002 0C4B     	 ldr r3,.L136
 823:../Libraries/XMCLib/src/xmc1_scu.c ****   d = *((uint8_t*)ANA_TSE_T1);
 824:../Libraries/XMCLib/src/xmc1_scu.c ****   e = *((uint8_t*)ANA_TSE_T2);
 825:../Libraries/XMCLib/src/xmc1_scu.c **** 
 826:../Libraries/XMCLib/src/xmc1_scu.c ****   offset = b + (((a - b) * (temperature - d)) / (e - d));
 827:../Libraries/XMCLib/src/xmc1_scu.c ****   offset &= SCU_ANALOG_ANAOFFSET_ADJL_OFFSET_Msk;
 828:../Libraries/XMCLib/src/xmc1_scu.c **** 
 829:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 830:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOFFSET = (uint16_t)offset;
 831:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 832:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1458              	 .loc 1 832 0
 1459              	 
 822:../Libraries/XMCLib/src/xmc1_scu.c ****   d = *((uint8_t*)ANA_TSE_T1);
 1460              	 .loc 1 822 0
 1461 0004 1C78     	 ldrb r4,[r3]
 1462              	.LVL99:
 823:../Libraries/XMCLib/src/xmc1_scu.c ****   d = *((uint8_t*)ANA_TSE_T1);
 1463              	 .loc 1 823 0
 1464 0006 0C4B     	 ldr r3,.L136+4
 1465 0008 1978     	 ldrb r1,[r3]
 1466              	.LVL100:
 821:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1467              	 .loc 1 821 0
 1468 000a 0C4B     	 ldr r3,.L136+8
 1469              	.LVL101:
 826:../Libraries/XMCLib/src/xmc1_scu.c ****   offset &= SCU_ANALOG_ANAOFFSET_ADJL_OFFSET_Msk;
 1470              	 .loc 1 826 0
 1471 000c 401A     	 sub r0,r0,r1
 1472              	.LVL102:
 821:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1473              	 .loc 1 821 0
 1474 000e 1B78     	 ldrb r3,[r3]
 1475              	.LVL103:
 826:../Libraries/XMCLib/src/xmc1_scu.c ****   offset &= SCU_ANALOG_ANAOFFSET_ADJL_OFFSET_Msk;
 1476              	 .loc 1 826 0
 1477 0010 1B1B     	 sub r3,r3,r4
 1478 0012 5843     	 mul r0,r3
 824:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1479              	 .loc 1 824 0
 1480 0014 0A4B     	 ldr r3,.L136+12
 1481              	.LVL104:
 1482 0016 1B78     	 ldrb r3,[r3]
 1483              	.LVL105:
 826:../Libraries/XMCLib/src/xmc1_scu.c ****   offset &= SCU_ANALOG_ANAOFFSET_ADJL_OFFSET_Msk;
 1484              	 .loc 1 826 0
 1485 0018 591A     	 sub r1,r3,r1
 1486              	.LVL106:
 1487 001a FFF7FEFF 	 bl __aeabi_idiv
 1488              	.LVL107:
 1489 001e 2418     	 add r4,r4,r0
 1490              	.LVL108:
 829:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOFFSET = (uint16_t)offset;
 1491              	 .loc 1 829 0
 1492 0020 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 1493              	.LVL109:
 830:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1494              	 .loc 1 830 0
 1495 0024 7F20     	 mov r0,#127
 1496              	.LBB70:
 1497              	.LBB71:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1498              	 .loc 1 399 0
 1499 0026 C322     	 mov r2,#195
 1500              	.LBE71:
 1501              	.LBE70:
 830:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1502              	 .loc 1 830 0
 1503 0028 064B     	 ldr r3,.L136+16
 1504 002a 2040     	 and r0,r4
 1505              	.LVL110:
 1506 002c 1880     	 strh r0,[r3]
 1507              	.LBB73:
 1508              	.LBB72:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1509              	 .loc 1 399 0
 1510 002e 064B     	 ldr r3,.L136+20
 1511 0030 5A62     	 str r2,[r3,#36]
 1512              	.LBE72:
 1513              	.LBE73:
 1514              	 .loc 1 832 0
 1515 0032 10BD     	 pop {r4,pc}
 1516              	.L137:
 1517              	 .align 2
 1518              	.L136:
 1519 0034 320F0010 	 .word 268439346
 1520 0038 300F0010 	 .word 268439344
 1521 003c 330F0010 	 .word 268439347
 1522 0040 310F0010 	 .word 268439345
 1523 0044 6C100140 	 .word 1073811564
 1524 0048 00000140 	 .word 1073807360
 1525              	 .cfi_endproc
 1526              	.LFE98:
 1528              	 .global __aeabi_llsr
 1529              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 1530              	 .align 1
 1531              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 1532              	 .code 16
 1533              	 .thumb_func
 1535              	XMC_SCU_INTERRUPT_SetEventHandler:
 1536              	.LFB99:
 833:../Libraries/XMCLib/src/xmc1_scu.c **** 
 834:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 835:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event
 836:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 837:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRU
 838:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1537              	 .loc 1 838 0
 1538              	 .cfi_startproc
 1539              	.LVL111:
 1540 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 1541              	.LCFI12:
 1542              	 .cfi_def_cfa_offset 24
 1543              	 .cfi_offset 3,-24
 1544              	 .cfi_offset 4,-20
 1545              	 .cfi_offset 5,-16
 1546              	 .cfi_offset 6,-12
 1547              	 .cfi_offset 7,-8
 1548              	 .cfi_offset 14,-4
 1549              	 .loc 1 838 0
 1550 0002 061C     	 mov r6,r0
 1551 0004 0F1C     	 mov r7,r1
 1552 0006 151C     	 mov r5,r2
 839:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 840:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status;
 841:../Libraries/XMCLib/src/xmc1_scu.c **** 
 842:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(eve
 843:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);
 844:../Libraries/XMCLib/src/xmc1_scu.c **** 
 845:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 1553              	 .loc 1 845 0
 1554 0008 0024     	 mov r4,#0
 1555              	.LVL112:
 1556              	.L139:
 846:../Libraries/XMCLib/src/xmc1_scu.c **** 
 847:../Libraries/XMCLib/src/xmc1_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 1557              	 .loc 1 847 0
 1558 000a 301C     	 mov r0,r6
 1559 000c 391C     	 mov r1,r7
 1560 000e 221C     	 mov r2,r4
 1561 0010 FFF7FEFF 	 bl __aeabi_llsr
 1562              	.LVL113:
 1563 0014 031C     	 mov r3,r0
 1564 0016 0120     	 mov r0,#1
 1565 0018 0342     	 tst r3,r0
 1566 001a 03D1     	 bne .L140
 1567              	 .loc 1 847 0 is_stmt 0 discriminator 1
 1568 001c 402C     	 cmp r4,#64
 1569 001e 07D0     	 beq .L142
 848:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 849:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 1570              	 .loc 1 849 0 is_stmt 1
 1571 0020 0134     	 add r4,r4,#1
 1572              	.LVL114:
 1573 0022 F2E7     	 b .L139
 1574              	.L140:
 850:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 851:../Libraries/XMCLib/src/xmc1_scu.c **** 
 852:../Libraries/XMCLib/src/xmc1_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 1575              	 .loc 1 852 0
 1576 0024 402C     	 cmp r4,#64
 1577 0026 03D0     	 beq .L142
 853:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 854:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 855:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 856:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 857:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 858:../Libraries/XMCLib/src/xmc1_scu.c ****     event_handler_list[index] = handler;
 859:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_OK;
 1578              	 .loc 1 859 0
 1579 0028 0020     	 mov r0,#0
 858:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_OK;
 1580              	 .loc 1 858 0
 1581 002a 024B     	 ldr r3,.L145
 1582 002c A400     	 lsl r4,r4,#2
 1583              	.LVL115:
 1584 002e E550     	 str r5,[r4,r3]
 1585              	.LVL116:
 1586              	.L142:
 860:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 861:../Libraries/XMCLib/src/xmc1_scu.c **** 
 862:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 863:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1587              	 .loc 1 863 0
 1588              	 
 1589              	.LVL117:
 1590 0030 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1591              	.L146:
 1592 0032 C046     	 .align 2
 1593              	.L145:
 1594 0034 00000000 	 .word .LANCHOR0
 1595              	 .cfi_endproc
 1596              	.LFE99:
 1598              	 .global __aeabi_llsl
 1599              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 1600              	 .align 1
 1601              	 .global XMC_SCU_IRQHandler
 1602              	 .code 16
 1603              	 .thumb_func
 1605              	XMC_SCU_IRQHandler:
 1606              	.LFB100:
 864:../Libraries/XMCLib/src/xmc1_scu.c **** 
 865:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 866:../Libraries/XMCLib/src/xmc1_scu.c ****  * A common function to execute callback functions for multiple events
 867:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 868:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
 869:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1607              	 .loc 1 869 0
 1608              	 .cfi_startproc
 1609              	.LVL118:
 1610 0000 70B5     	 push {r4,r5,r6,lr}
 1611              	.LCFI13:
 1612              	 .cfi_def_cfa_offset 16
 1613              	 .cfi_offset 4,-16
 1614              	 .cfi_offset 5,-12
 1615              	 .cfi_offset 6,-8
 1616              	 .cfi_offset 14,-4
 1617              	 .loc 1 869 0
 1618 0002 061C     	 mov r6,r0
 870:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_IRQHandler: Invalid sr_num", sr_num < SCU_IRQ_NUM);
 871:../Libraries/XMCLib/src/xmc1_scu.c **** 
 872:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 873:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
 874:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
 875:../Libraries/XMCLib/src/xmc1_scu.c **** 
 876:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 877:../Libraries/XMCLib/src/xmc1_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
 1619              	 .loc 1 877 0
 1620 0004 FFF7FEFF 	 bl XMC_SCU_INTERUPT_GetEventStatus
 1621              	.LVL119:
 1622 0008 134B     	 ldr r3,.L163
 1623 000a F600     	 lsl r6,r6,#3
 1624              	.LVL120:
 1625 000c 9B19     	 add r3,r3,r6
 1626 000e 1C68     	 ldr r4,[r3]
 1627 0010 5B68     	 ldr r3,[r3,#4]
 1628 0012 0440     	 and r4,r0
 1629 0014 1940     	 and r1,r3
 878:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(event);
 1630              	 .loc 1 878 0
 1631 0016 201C     	 mov r0,r4
 877:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(event);
 1632              	 .loc 1 877 0
 1633 0018 0D1C     	 mov r5,r1
 1634              	.LVL121:
 876:../Libraries/XMCLib/src/xmc1_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
 1635              	 .loc 1 876 0
 1636 001a 0026     	 mov r6,#0
 1637              	 .loc 1 878 0
 1638 001c FFF7FEFF 	 bl XMC_SCU_INTERRUPT_ClearEventStatus
 1639              	.LVL122:
 1640              	.L148:
 879:../Libraries/XMCLib/src/xmc1_scu.c **** 
 880:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 1641              	 .loc 1 880 0
 1642 0020 231C     	 mov r3,r4
 1643 0022 2B43     	 orr r3,r5
 1644 0024 17D0     	 beq .L147
 1645 0026 402E     	 cmp r6,#64
 1646 0028 15D0     	 beq .L147
 881:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 882:../Libraries/XMCLib/src/xmc1_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 1647              	 .loc 1 882 0
 1648 002a 201C     	 mov r0,r4
 1649 002c 291C     	 mov r1,r5
 1650 002e 321C     	 mov r2,r6
 1651 0030 FFF7FEFF 	 bl __aeabi_llsr
 1652              	.LVL123:
 1653 0034 C307     	 lsl r3,r0,#31
 1654 0036 0CD5     	 bpl .L149
 883:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 884:../Libraries/XMCLib/src/xmc1_scu.c ****       event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
 1655              	 .loc 1 884 0
 1656 0038 321C     	 mov r2,r6
 1657 003a 0120     	 mov r0,#1
 1658 003c 0021     	 mov r1,#0
 1659 003e FFF7FEFF 	 bl __aeabi_llsl
 1660              	.LVL124:
 885:../Libraries/XMCLib/src/xmc1_scu.c ****       event_handler = event_handler_list[index];
 1661              	 .loc 1 885 0
 1662 0042 064B     	 ldr r3,.L163+4
 1663 0044 B200     	 lsl r2,r6,#2
 1664 0046 D358     	 ldr r3,[r2,r3]
 884:../Libraries/XMCLib/src/xmc1_scu.c ****       event_handler = event_handler_list[index];
 1665              	 .loc 1 884 0
 1666 0048 8443     	 bic r4,r0
 1667              	.LVL125:
 1668 004a 8D43     	 bic r5,r1
 1669              	.LVL126:
 886:../Libraries/XMCLib/src/xmc1_scu.c ****       if (event_handler != NULL)
 1670              	 .loc 1 886 0
 1671 004c 002B     	 cmp r3,#0
 1672 004e 00D0     	 beq .L149
 887:../Libraries/XMCLib/src/xmc1_scu.c ****       {
 888:../Libraries/XMCLib/src/xmc1_scu.c ****         event_handler();
 1673              	 .loc 1 888 0
 1674 0050 9847     	 blx r3
 1675              	.LVL127:
 1676              	.L149:
 889:../Libraries/XMCLib/src/xmc1_scu.c ****       }
 890:../Libraries/XMCLib/src/xmc1_scu.c **** 
 891:../Libraries/XMCLib/src/xmc1_scu.c ****       /* break; XMC1: Only PULSE interrupts */
 892:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 893:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 1677              	 .loc 1 893 0
 1678 0052 0136     	 add r6,r6,#1
 1679              	.LVL128:
 1680 0054 E4E7     	 b .L148
 1681              	.L147:
 894:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 895:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1682              	 .loc 1 895 0
 1683              	 
 1684              	.LVL129:
 1685              	.LVL130:
 1686 0056 70BD     	 pop {r4,r5,r6,pc}
 1687              	.L164:
 1688              	 .align 2
 1689              	.L163:
 1690 0058 00000000 	 .word .LANCHOR1
 1691 005c 00000000 	 .word .LANCHOR0
 1692              	 .cfi_endproc
 1693              	.LFE100:
 1695              	 .section .text.XMC_SCU_SetBMI,"ax",%progbits
 1696              	 .align 1
 1697              	 .global XMC_SCU_SetBMI
 1698              	 .code 16
 1699              	 .thumb_func
 1701              	XMC_SCU_SetBMI:
 1702              	.LFB101:
 896:../Libraries/XMCLib/src/xmc1_scu.c **** 
 897:../Libraries/XMCLib/src/xmc1_scu.c **** /* Install BMI */
 898:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_SetBMI(uint32_t flags, uint8_t timeout)
 899:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1703              	 .loc 1 899 0
 1704              	 .cfi_startproc
 1705              	.LVL131:
 1706 0000 08B5     	 push {r3,lr}
 1707              	.LCFI14:
 1708              	 .cfi_def_cfa_offset 8
 1709              	 .cfi_offset 3,-8
 1710              	 .cfi_offset 14,-4
 900:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 901:../Libraries/XMCLib/src/xmc1_scu.c ****   return ROM_BmiInstallationReq((flags & 0x0fffU) | ((timeout << 12) & 0xf000U));
 1711              	 .loc 1 901 0
 1712 0002 8423     	 mov r3,#132
 1713 0004 0907     	 lsl r1,r1,#28
 1714              	.LVL132:
 1715 0006 0005     	 lsl r0,r0,#20
 1716              	.LVL133:
 1717 0008 090C     	 lsr r1,r1,#16
 1718 000a 000D     	 lsr r0,r0,#20
 1719 000c 5B00     	 lsl r3,r3,#1
 1720 000e 0843     	 orr r0,r1
 1721 0010 1B68     	 ldr r3,[r3]
 1722 0012 9847     	 blx r3
 1723              	.LVL134:
 902:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 903:../Libraries/XMCLib/src/xmc1_scu.c ****   return ROM_BmiInstallationReq((flags & 0x07ffU) | ((timeout << 12) & 0xf000U) | 0x08c0U);
 904:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 905:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1724              	 .loc 1 905 0
 1725              	 
 1726 0014 08BD     	 pop {r3,pc}
 1727              	 .cfi_endproc
 1728              	.LFE101:
 1730              	 .section .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration,"ax",%progbits
 1731              	 .align 1
 1732              	 .global XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration
 1733              	 .code 16
 1734              	 .thumb_func
 1736              	XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:
 1737              	.LFB102:
 906:../Libraries/XMCLib/src/xmc1_scu.c **** 
 907:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 908:../Libraries/XMCLib/src/xmc1_scu.c **** /* DCO1 clock frequency can be calibrated during runtime to achieve a better accuracy */
 909:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration(XMC_SCU_CLOCK_SYNC_CLKSRC_t sync_clk, uint32_t presc
 910:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1738              	 .loc 1 910 0
 1739              	 .cfi_startproc
 1740              	.LVL135:
 1741 0000 70B5     	 push {r4,r5,r6,lr}
 1742              	.LCFI15:
 1743              	 .cfi_def_cfa_offset 16
 1744              	 .cfi_offset 4,-16
 1745              	 .cfi_offset 5,-12
 1746              	 .cfi_offset 6,-8
 1747              	 .cfi_offset 14,-4
 1748              	 .loc 1 910 0
 1749 0002 051C     	 mov r5,r0
 1750 0004 0E1C     	 mov r6,r1
 1751 0006 141C     	 mov r4,r2
 911:../Libraries/XMCLib/src/xmc1_scu.c **** 
 912:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1752              	 .loc 1 912 0
 1753 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 1754              	.LVL136:
 913:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC2 = (uint16_t)(prescaler << SCU_ANALOG_ANASYNC2_PRESCALER_Pos);
 1755              	 .loc 1 913 0
 1756 000c 074B     	 ldr r3,.L167
 1757 000e B6B2     	 uxth r6,r6
 1758              	.LVL137:
 1759 0010 1A1C     	 mov r2,r3
 1760 0012 7C32     	 add r2,r2,#124
 1761 0014 1680     	 strh r6,[r2]
 1762 0016 8022     	 mov r2,#128
 1763 0018 D201     	 lsl r2,r2,#7
 1764 001a 1543     	 orr r5,r2
 1765              	.LBB74:
 1766              	.LBB75:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1767              	 .loc 1 399 0
 1768 001c C322     	 mov r2,#195
 1769              	.LBE75:
 1770              	.LBE74:
 914:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC1 = (uint16_t)(syn_preload |
 1771              	 .loc 1 914 0
 1772 001e 2C43     	 orr r4,r5
 1773              	.LVL138:
 1774 0020 A4B2     	 uxth r4,r4
 1775 0022 7833     	 add r3,r3,#120
 1776 0024 1C80     	 strh r4,[r3]
 1777              	.LBB78:
 1778              	.LBB76:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1779              	 .loc 1 399 0
 1780 0026 024B     	 ldr r3,.L167+4
 1781              	.LBE76:
 1782              	.LBE78:
 915:../Libraries/XMCLib/src/xmc1_scu.c ****                          sync_clk |
 916:../Libraries/XMCLib/src/xmc1_scu.c ****                          SCU_ANALOG_ANASYNC1_SYNC_DCO_EN_Msk);
 917:../Libraries/XMCLib/src/xmc1_scu.c **** 
 918:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 919:../Libraries/XMCLib/src/xmc1_scu.c **** 
 920:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1783              	 .loc 1 920 0
 1784              	 
 1785              	.LBB79:
 1786              	.LBB77:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1787              	 .loc 1 399 0
 1788 0028 5A62     	 str r2,[r3,#36]
 1789              	.LBE77:
 1790              	.LBE79:
 1791              	 .loc 1 920 0
 1792 002a 70BD     	 pop {r4,r5,r6,pc}
 1793              	.L168:
 1794              	 .align 2
 1795              	.L167:
 1796 002c 00100140 	 .word 1073811456
 1797 0030 00000140 	 .word 1073807360
 1798              	 .cfi_endproc
 1799              	.LFE102:
 1801              	 .section .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration,"ax",%progbits
 1802              	 .align 1
 1803              	 .global XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration
 1804              	 .code 16
 1805              	 .thumb_func
 1807              	XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:
 1808              	.LFB103:
 921:../Libraries/XMCLib/src/xmc1_scu.c **** 
 922:../Libraries/XMCLib/src/xmc1_scu.c **** /* This function stops the automatic DCO1 calibration based on the selected clock source */
 923:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration(void)
 924:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1809              	 .loc 1 924 0
 1810              	 .cfi_startproc
 1811 0000 08B5     	 push {r3,lr}
 1812              	.LCFI16:
 1813              	 .cfi_def_cfa_offset 8
 1814              	 .cfi_offset 3,-8
 1815              	 .cfi_offset 14,-4
 925:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1816              	 .loc 1 925 0
 1817 0002 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 1818              	.LVL139:
 926:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC2 = 0U;
 1819              	 .loc 1 926 0
 1820 0006 054B     	 ldr r3,.L170
 1821 0008 0022     	 mov r2,#0
 1822 000a 191C     	 mov r1,r3
 927:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC1 = 0U;
 1823              	 .loc 1 927 0
 1824 000c 7833     	 add r3,r3,#120
 926:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC2 = 0U;
 1825              	 .loc 1 926 0
 1826 000e 7C31     	 add r1,r1,#124
 1827 0010 0A80     	 strh r2,[r1]
 1828              	 .loc 1 927 0
 1829 0012 1A80     	 strh r2,[r3]
 1830              	.LBB80:
 1831              	.LBB81:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1832              	 .loc 1 399 0
 1833 0014 024B     	 ldr r3,.L170+4
 1834 0016 C332     	 add r2,r2,#195
 1835 0018 5A62     	 str r2,[r3,#36]
 1836              	.LBE81:
 1837              	.LBE80:
 928:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 929:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1838              	 .loc 1 929 0
 1839              	 
 1840 001a 08BD     	 pop {r3,pc}
 1841              	.L171:
 1842              	 .align 2
 1843              	.L170:
 1844 001c 00100140 	 .word 1073811456
 1845 0020 00000140 	 .word 1073807360
 1846              	 .cfi_endproc
 1847              	.LFE103:
 1849              	 .section .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady,"ax",%progbits
 1850              	 .align 1
 1851              	 .global XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady
 1852              	 .code 16
 1853              	 .thumb_func
 1855              	XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:
 1856              	.LFB104:
 930:../Libraries/XMCLib/src/xmc1_scu.c **** 
 931:../Libraries/XMCLib/src/xmc1_scu.c **** /* This functions checks the status of the synchronisation */
 932:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady(void)
 933:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1857              	 .loc 1 933 0
 1858              	 .cfi_startproc
 934:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
 1859              	 .loc 1 934 0
 1860 0000 024B     	 ldr r3,.L173
 935:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1861              	 .loc 1 935 0
 1862              	 
 934:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
 1863              	 .loc 1 934 0
 1864 0002 1888     	 ldrh r0,[r3]
 1865 0004 C004     	 lsl r0,r0,#19
 1866 0006 C00F     	 lsr r0,r0,#31
 1867              	 .loc 1 935 0
 1868 0008 7047     	 bx lr
 1869              	.L174:
 1870 000a C046     	 .align 2
 1871              	.L173:
 1872 000c 7C100140 	 .word 1073811580
 1873              	 .cfi_endproc
 1874              	.LFE104:
 1876              	 .section .text.XMC_SCU_SetInterruptControl,"ax",%progbits
 1877              	 .align 1
 1878              	 .global XMC_SCU_SetInterruptControl
 1879              	 .code 16
 1880              	 .thumb_func
 1882              	XMC_SCU_SetInterruptControl:
 1883              	.LFB105:
 936:../Libraries/XMCLib/src/xmc1_scu.c **** 
 937:../Libraries/XMCLib/src/xmc1_scu.c **** /* This function selects service request source for a NVIC interrupt node */
 938:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
 939:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1884              	 .loc 1 939 0
 1885              	 .cfi_startproc
 1886              	.LVL140:
 940:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
 941:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);
 942:../Libraries/XMCLib/src/xmc1_scu.c **** 
 943:../Libraries/XMCLib/src/xmc1_scu.c ****   source &= 0x3U;
 1887              	 .loc 1 943 0
 1888 0000 0323     	 mov r3,#3
 939:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
 1889              	 .loc 1 939 0
 1890 0002 30B5     	 push {r4,r5,lr}
 1891              	.LCFI17:
 1892              	 .cfi_def_cfa_offset 12
 1893              	 .cfi_offset 4,-12
 1894              	 .cfi_offset 5,-8
 1895              	 .cfi_offset 14,-4
 1896              	 .loc 1 943 0
 1897 0004 1940     	 and r1,r3
 1898              	.LVL141:
 1899 0006 0B4A     	 ldr r2,.L178
 944:../Libraries/XMCLib/src/xmc1_scu.c ****   if (irq_number < 16U)
 1900              	 .loc 1 944 0
 1901 0008 0F28     	 cmp r0,#15
 1902 000a 08D8     	 bhi .L176
 945:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 946:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SC
 1903              	 .loc 1 946 0
 1904 000c 4000     	 lsl r0,r0,#1
 1905              	.LVL142:
 947:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
 1906              	 .loc 1 947 0
 1907 000e 8140     	 lsl r1,r1,r0
 1908              	.LVL143:
 946:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
 1909              	 .loc 1 946 0
 1910 0010 8340     	 lsl r3,r3,r0
 1911              	 .loc 1 947 0
 1912 0012 081C     	 mov r0,r1
 946:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
 1913              	 .loc 1 946 0
 1914 0014 D46E     	 ldr r4,[r2,#108]
 1915 0016 9C43     	 bic r4,r3
 1916 0018 2043     	 orr r0,r4
 1917 001a D066     	 str r0,[r2,#108]
 1918 001c 09E0     	 b .L175
 1919              	.LVL144:
 1920              	.L176:
 948:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 949:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 950:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 951:../Libraries/XMCLib/src/xmc1_scu.c ****     irq_number &= 0x0fU;
 952:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * S
 1921              	 .loc 1 952 0
 1922 001e 0F24     	 mov r4,#15
 1923 0020 2040     	 and r0,r4
 1924              	.LVL145:
 1925 0022 4400     	 lsl r4,r0,#1
 953:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
 1926              	 .loc 1 953 0
 1927 0024 A140     	 lsl r1,r1,r4
 1928              	.LVL146:
 952:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
 1929              	 .loc 1 952 0
 1930 0026 A340     	 lsl r3,r3,r4
 1931              	 .loc 1 953 0
 1932 0028 081C     	 mov r0,r1
 952:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
 1933              	 .loc 1 952 0
 1934 002a 156F     	 ldr r5,[r2,#112]
 1935 002c 9D43     	 bic r5,r3
 1936 002e 2843     	 orr r0,r5
 1937 0030 1067     	 str r0,[r2,#112]
 1938              	.LVL147:
 1939              	.L175:
 954:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 955:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1940              	 .loc 1 955 0
 1941              	 
 1942 0032 30BD     	 pop {r4,r5,pc}
 1943              	.L179:
 1944              	 .align 2
 1945              	.L178:
 1946 0034 00000140 	 .word 1073807360
 1947              	 .cfi_endproc
 1948              	.LFE105:
 1950              	 .section .text.XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode,"ax",%progbits
 1951              	 .align 1
 1952              	 .global XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode
 1953              	 .code 16
 1954              	 .thumb_func
 1956              	XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode:
 1957              	.LFB106:
 956:../Libraries/XMCLib/src/xmc1_scu.c **** 
 957:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode(XMC_SCU_CLOCK_OSCHP_MODE_t mode)
 958:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1958              	 .loc 1 958 0
 1959              	 .cfi_startproc
 1960              	.LVL148:
 1961 0000 10B5     	 push {r4,lr}
 1962              	.LCFI18:
 1963              	 .cfi_def_cfa_offset 8
 1964              	 .cfi_offset 4,-8
 1965              	 .cfi_offset 14,-4
 1966              	 .loc 1 958 0
 1967 0002 041C     	 mov r4,r0
 959:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1968              	 .loc 1 959 0
 1969 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 1970              	.LVL149:
 960:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCHPCTRL = (SCU_ANALOG->ANAOSCHPCTRL & (uint32_t)~(SCU_ANALOG_ANAOSCHPCTRL_MODE_M
 1971              	 .loc 1 960 0
 1972 0008 3222     	 mov r2,#50
 1973 000a 044B     	 ldr r3,.L181
 961:../Libraries/XMCLib/src/xmc1_scu.c ****                              | mode;
 962:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 963:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1974              	 .loc 1 963 0
 1975              	 
 960:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCHPCTRL = (SCU_ANALOG->ANAOSCHPCTRL & (uint32_t)~(SCU_ANALOG_ANAOSCHPCTRL_MODE_M
 1976              	 .loc 1 960 0
 1977 000c 1888     	 ldrh r0,[r3]
 1978 000e 9043     	 bic r0,r2
 1979 0010 2043     	 orr r0,r4
 1980 0012 1880     	 strh r0,[r3]
 1981              	.LBB82:
 1982              	.LBB83:
 399:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1983              	 .loc 1 399 0
 1984 0014 024B     	 ldr r3,.L181+4
 1985 0016 9132     	 add r2,r2,#145
 1986 0018 5A62     	 str r2,[r3,#36]
 1987              	.LBE83:
 1988              	.LBE82:
 1989              	 .loc 1 963 0
 1990 001a 10BD     	 pop {r4,pc}
 1991              	.L182:
 1992              	 .align 2
 1993              	.L181:
 1994 001c 90100140 	 .word 1073811600
 1995 0020 00000140 	 .word 1073807360
 1996              	 .cfi_endproc
 1997              	.LFE106:
 1999              	 .section .text.XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode,"ax",%progbits
 2000              	 .align 1
 2001              	 .global XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode
 2002              	 .code 16
 2003              	 .thumb_func
 2005              	XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode:
 2006              	.LFB107:
 964:../Libraries/XMCLib/src/xmc1_scu.c **** 
 965:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode(XMC_SCU_CLOCK_OSCLP_MODE_t mode)
 966:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2007              	 .loc 1 966 0
 2008              	 .cfi_startproc
 2009              	.LVL150:
 967:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCLPCTRL = mode;
 2010              	 .loc 1 967 0
 2011 0000 014B     	 ldr r3,.L184
 2012 0002 80B2     	 uxth r0,r0
 2013              	.LVL151:
 2014 0004 1880     	 strh r0,[r3]
 968:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2015              	 .loc 1 968 0
 2016              	 
 2017 0006 7047     	 bx lr
 2018              	.L185:
 2019              	 .align 2
 2020              	.L184:
 2021 0008 8C100140 	 .word 1073811596
 2022              	 .cfi_endproc
 2023              	.LFE107:
 2025              	 .section .bss.event_handler_list,"aw",%nobits
 2026              	 .align 2
 2027              	 .set .LANCHOR0,.+0
 2030              	event_handler_list:
 2031 0000 00000000 	 .space 256
 2031      00000000 
 2031      00000000 
 2031      00000000 
 2031      00000000 
 2032              	 .section .rodata.event_masks,"a",%progbits
 2033              	 .align 3
 2034              	 .set .LANCHOR1,.+0
 2037              	event_masks:
 2038 0000 00001F00 	 .word 2031616
 2039 0004 0E000000 	 .word 14
 2040 0008 8F0060FF 	 .word -10485617
 2041 000c 10000000 	 .word 16
 2042 0010 70FF0000 	 .word 65392
 2043 0014 01000000 	 .word 1
 2044              	 .text
 2045              	.Letext0:
 2046              	 .file 2 "c:\\dave_4-4-2_64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2047              	 .file 3 "c:\\dave_4-4-2_64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2048              	 .file 4 "C:/Workspace/DAVE-4.4.2-64Bit/xmc1400-getstarted-optiga-trust-m/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 2049              	 .file 5 "C:/Workspace/DAVE-4.4.2-64Bit/xmc1400-getstarted-optiga-trust-m/Libraries/XMCLib/inc/xmc_scu.h"
 2050              	 .file 6 "C:/Workspace/DAVE-4.4.2-64Bit/xmc1400-getstarted-optiga-trust-m/Libraries/XMCLib/inc/xmc1_scu.h"
 2051              	 .file 7 "C:/Workspace/DAVE-4.4.2-64Bit/xmc1400-getstarted-optiga-trust-m/Libraries/CMSIS/Include/cmsis_gcc.h"
 2052              	 .file 8 "C:/Workspace/DAVE-4.4.2-64Bit/xmc1400-getstarted-optiga-trust-m/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc1_scu.c
    {standard input}:18     .text.XMC_SCU_CalcTSEVAR:00000000 $t
    {standard input}:22     .text.XMC_SCU_CalcTSEVAR:00000000 XMC_SCU_CalcTSEVAR
    {standard input}:76     .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:81     .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:104    .text.XMC_SCU_INTERRUPT_EnableEvent:00000010 $d
    {standard input}:109    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:114    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:136    .text.XMC_SCU_INTERRUPT_DisableEvent:00000010 $d
    {standard input}:141    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:146    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:169    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000010 $d
    {standard input}:174    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:179    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:198    .text.XMC_SCU_INTERUPT_GetEventStatus:00000008 $d
    {standard input}:203    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:208    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:231    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000010 $d
    {standard input}:236    .text.XMC_SCU_LockProtectedBits:00000000 $t
    {standard input}:241    .text.XMC_SCU_LockProtectedBits:00000000 XMC_SCU_LockProtectedBits
    {standard input}:257    .text.XMC_SCU_LockProtectedBits:00000008 $d
    {standard input}:262    .text.XMC_SCU_UnlockProtectedBits:00000000 $t
    {standard input}:267    .text.XMC_SCU_UnlockProtectedBits:00000000 XMC_SCU_UnlockProtectedBits
    {standard input}:286    .text.XMC_SCU_UnlockProtectedBits:00000010 $d
    {standard input}:291    .text.XMC_SCU_SupplyMonitorInit:00000000 $t
    {standard input}:296    .text.XMC_SCU_SupplyMonitorInit:00000000 XMC_SCU_SupplyMonitorInit
    {standard input}:364    .text.XMC_SCU_SupplyMonitorInit:00000040 $d
    {standard input}:370    .text.XMC_SCU_SetTempLowLimit:00000000 $t
    {standard input}:375    .text.XMC_SCU_SetTempLowLimit:00000000 XMC_SCU_SetTempLowLimit
    {standard input}:409    .text.XMC_SCU_SetTempLowLimit:00000018 $d
    {standard input}:414    .text.XMC_SCU_SetTempHighLimit:00000000 $t
    {standard input}:419    .text.XMC_SCU_SetTempHighLimit:00000000 XMC_SCU_SetTempHighLimit
    {standard input}:453    .text.XMC_SCU_SetTempHighLimit:00000018 $d
    {standard input}:458    .text.XMC_SCU_SetRawTempLimits:00000000 $t
    {standard input}:463    .text.XMC_SCU_SetRawTempLimits:00000000 XMC_SCU_SetRawTempLimits
    {standard input}:486    .text.XMC_SCU_SetRawTempLimits:0000000c $d
    {standard input}:491    .text.XMC_SCU_StartTempMeasurement:00000000 $t
    {standard input}:496    .text.XMC_SCU_StartTempMeasurement:00000000 XMC_SCU_StartTempMeasurement
    {standard input}:514    .text.XMC_SCU_StartTempMeasurement:0000000c $d
    {standard input}:519    .text.XMC_SCU_StopTempMeasurement:00000000 $t
    {standard input}:524    .text.XMC_SCU_StopTempMeasurement:00000000 XMC_SCU_StopTempMeasurement
    {standard input}:542    .text.XMC_SCU_StopTempMeasurement:0000000c $d
    {standard input}:547    .text.XMC_SCU_HighTemperature:00000000 $t
    {standard input}:552    .text.XMC_SCU_HighTemperature:00000000 XMC_SCU_HighTemperature
    {standard input}:569    .text.XMC_SCU_HighTemperature:0000000c $d
    {standard input}:574    .text.XMC_SCU_LowTemperature:00000000 $t
    {standard input}:579    .text.XMC_SCU_LowTemperature:00000000 XMC_SCU_LowTemperature
    {standard input}:595    .text.XMC_SCU_LowTemperature:00000008 $d
    {standard input}:600    .text.XMC_SCU_GetTemperature:00000000 $t
    {standard input}:605    .text.XMC_SCU_GetTemperature:00000000 XMC_SCU_GetTemperature
    {standard input}:622    .text.XMC_SCU_GetTemperature:00000008 $d
    {standard input}:627    .text.XMC_SCU_CalcTemperature:00000000 $t
    {standard input}:632    .text.XMC_SCU_CalcTemperature:00000000 XMC_SCU_CalcTemperature
    {standard input}:654    .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 $t
    {standard input}:659    .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 XMC_SCU_CLOCK_SetRtcClockSource
    {standard input}:698    .text.XMC_SCU_CLOCK_SetRtcClockSource:0000001c $d
    {standard input}:705    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 $t
    {standard input}:710    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 XMC_SCU_CLOCK_SetFastPeripheralClockSource
    {standard input}:749    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:0000001c $d
    {standard input}:756    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 $t
    {standard input}:761    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 XMC_SCU_CLOCK_GatePeripheralClock
    {standard input}:803    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000018 $d
    {standard input}:809    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 $t
    {standard input}:814    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 XMC_SCU_CLOCK_UngatePeripheralClock
    {standard input}:860    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000020 $d
    {standard input}:866    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 $t
    {standard input}:871    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 XMC_SCU_CLOCK_IsPeripheralClockGated
    {standard input}:892    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000010 $d
    {standard input}:897    .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 $t
    {standard input}:902    .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 XMC_SCU_CLOCK_ScaleMCLKFrequency
    {standard input}:1081   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000098 $d
    {standard input}:1090   .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:1095   .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:1292   .text.XMC_SCU_CLOCK_Init:000000bc $d
    {standard input}:1309   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 $t
    {standard input}:1314   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 XMC_SCU_CLOCK_SetMCLKFrequency
    {standard input}:1376   .text.XMC_SCU_CLOCK_SetMCLKFrequency:0000003c $d
    {standard input}:1383   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:1388   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:1403   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000008 $d
    {standard input}:1408   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 $t
    {standard input}:1413   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
    {standard input}:1434   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000014 $d
    {standard input}:1441   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 $t
    {standard input}:1446   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
    {standard input}:1519   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000034 $d
    {standard input}:1530   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:1535   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:1594   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000034 $d
    {standard input}:1600   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:1605   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:1690   .text.XMC_SCU_IRQHandler:00000058 $d
    {standard input}:1696   .text.XMC_SCU_SetBMI:00000000 $t
    {standard input}:1701   .text.XMC_SCU_SetBMI:00000000 XMC_SCU_SetBMI
    {standard input}:1731   .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:00000000 $t
    {standard input}:1736   .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:00000000 XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration
    {standard input}:1796   .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:0000002c $d
    {standard input}:1802   .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:00000000 $t
    {standard input}:1807   .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:00000000 XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration
    {standard input}:1844   .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:0000001c $d
    {standard input}:1850   .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:00000000 $t
    {standard input}:1855   .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:00000000 XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady
    {standard input}:1872   .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:0000000c $d
    {standard input}:1877   .text.XMC_SCU_SetInterruptControl:00000000 $t
    {standard input}:1882   .text.XMC_SCU_SetInterruptControl:00000000 XMC_SCU_SetInterruptControl
    {standard input}:1946   .text.XMC_SCU_SetInterruptControl:00000034 $d
    {standard input}:1951   .text.XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode:00000000 $t
    {standard input}:1956   .text.XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode:00000000 XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode
    {standard input}:1994   .text.XMC_SCU_CLOCK_SetHighPerformanceOscillatorMode:0000001c $d
    {standard input}:2000   .text.XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode:00000000 $t
    {standard input}:2005   .text.XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode:00000000 XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode
    {standard input}:2021   .text.XMC_SCU_CLOCK_SetLowPerformanceOscillatorMode:00000008 $d
    {standard input}:2026   .bss.event_handler_list:00000000 $d
    {standard input}:2030   .bss.event_handler_list:00000000 event_handler_list
    {standard input}:2033   .rodata.event_masks:00000000 $d
    {standard input}:2037   .rodata.event_masks:00000000 event_masks
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClockUpdate
OSCHP_GetFrequency
__aeabi_uidiv
SystemCoreClock
__aeabi_idiv
__aeabi_llsr
__aeabi_llsl
