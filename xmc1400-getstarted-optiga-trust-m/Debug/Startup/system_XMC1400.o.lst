   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,4
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "system_XMC1400.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.SystemCoreSetup,"ax",%progbits
  18              	 .align 1
  19              	 .weak SystemCoreSetup
  20              	 .code 16
  21              	 .thumb_func
  23              	SystemCoreSetup:
  24              	.LFB43:
  25              	 .file 1 "../Startup/system_XMC1400.c"
   1:../Startup/system_XMC1400.c **** /**************************************************************************************************
   2:../Startup/system_XMC1400.c ****  * @file     system_XMC1400.c
   3:../Startup/system_XMC1400.c ****  * @brief    Device specific initialization for the XMC1400-Series according to CMSIS
   4:../Startup/system_XMC1400.c ****  * @version  V1.6
   5:../Startup/system_XMC1400.c ****  * @date     04 June 2019
   6:../Startup/system_XMC1400.c ****  *
   7:../Startup/system_XMC1400.c ****  * @cond
   8:../Startup/system_XMC1400.c ****  **************************************************************************************************
   9:../Startup/system_XMC1400.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Startup/system_XMC1400.c ****  * All rights reserved.
  11:../Startup/system_XMC1400.c ****  *
  12:../Startup/system_XMC1400.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Startup/system_XMC1400.c ****  * following conditions are met:
  14:../Startup/system_XMC1400.c ****  *
  15:../Startup/system_XMC1400.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Startup/system_XMC1400.c ****  * disclaimer.
  17:../Startup/system_XMC1400.c ****  *
  18:../Startup/system_XMC1400.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Startup/system_XMC1400.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:../Startup/system_XMC1400.c ****  *
  21:../Startup/system_XMC1400.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Startup/system_XMC1400.c ****  * products derived from this software without specific prior written permission.
  23:../Startup/system_XMC1400.c ****  *
  24:../Startup/system_XMC1400.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Startup/system_XMC1400.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Startup/system_XMC1400.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Startup/system_XMC1400.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Startup/system_XMC1400.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Startup/system_XMC1400.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Startup/system_XMC1400.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../Startup/system_XMC1400.c ****  *
  32:../Startup/system_XMC1400.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Startup/system_XMC1400.c ****  * Infineon Technologies AG dave@infineon.com).
  34:../Startup/system_XMC1400.c ****  **************************************************************************************************
  35:../Startup/system_XMC1400.c ****  *
  36:../Startup/system_XMC1400.c ****  * *************************** Change history ********************************
  37:../Startup/system_XMC1400.c ****  * V1.0, 03 Sep 2015, JFT : Initial version
  38:../Startup/system_XMC1400.c ****  *                          MCLK = 48MHz, PCLK = 96MHz
  39:../Startup/system_XMC1400.c ****  * V1.1, 09 Dec 2015, JFT : Enable prefetch unit
  40:../Startup/system_XMC1400.c ****  * V1.2, 19 Jun 2017, Rely on cmsis_compiler.h instead of defining __WEAK
  41:../Startup/system_XMC1400.c ****  *                    Added support for ARM Compiler 6 (armclang) 
  42:../Startup/system_XMC1400.c ****  * V1.3, 20 Jun 2018, Fixed OSC_HP oscillator watchdog result detection in startup
  43:../Startup/system_XMC1400.c ****  *                    Added wait time for RTC_XTAL oscillator startup time ~5s
  44:../Startup/system_XMC1400.c ****  * V1.4, 29 Oct 2018, Fix variable location of SystemCoreClock for ARMCC compiler
  45:../Startup/system_XMC1400.c ****  * V1.5, 20 Mar 2019, Fix clock initialization if external XTAL is used (clock watchdog issue, see 
  46:../Startup/system_XMC1400.c ****  *                    Added DISABLE_WAIT_RTC_XTAL_OSC_STARTUP preprocessor guard:
  47:../Startup/system_XMC1400.c ****  *                      The RTC_XTAL can be used as clock source for RTC or as reference for DCO1 c
  48:../Startup/system_XMC1400.c ****  *                      In both cases if no wait is done in the startup after enabling the RTC_XTAL
  49:../Startup/system_XMC1400.c ****  *                      the RTC_Enable() or the calibration will stall the MCU until the oscillator
  50:../Startup/system_XMC1400.c ****  *
  51:../Startup/system_XMC1400.c ****  * V1.6, 04 June 2019, Sync. code of SystemCoreClockSetup() to XMC_SCU_CLOCK_Init() in xmc1_scu.c
  52:../Startup/system_XMC1400.c ****  * 
  53:../Startup/system_XMC1400.c ****  * @endcond
  54:../Startup/system_XMC1400.c ****  */
  55:../Startup/system_XMC1400.c **** 
  56:../Startup/system_XMC1400.c **** /*******************************************************************************
  57:../Startup/system_XMC1400.c ****  * HEADER FILES
  58:../Startup/system_XMC1400.c ****  *******************************************************************************/
  59:../Startup/system_XMC1400.c **** 
  60:../Startup/system_XMC1400.c **** #include <XMC1400.h>
  61:../Startup/system_XMC1400.c **** #include "system_XMC1400.h"
  62:../Startup/system_XMC1400.c **** 
  63:../Startup/system_XMC1400.c **** /*******************************************************************************
  64:../Startup/system_XMC1400.c ****  * MACROS
  65:../Startup/system_XMC1400.c ****  *******************************************************************************/
  66:../Startup/system_XMC1400.c **** #define DCO1_FREQUENCY (48000000U)
  67:../Startup/system_XMC1400.c **** 
  68:../Startup/system_XMC1400.c **** /*
  69:../Startup/system_XMC1400.c **** //-------- <<< Use Configuration Wizard in Context Menu >>> ------------------
  70:../Startup/system_XMC1400.c **** */
  71:../Startup/system_XMC1400.c **** 
  72:../Startup/system_XMC1400.c **** /*
  73:../Startup/system_XMC1400.c **** // <h> Clock configuration
  74:../Startup/system_XMC1400.c **** */
  75:../Startup/system_XMC1400.c **** 
  76:../Startup/system_XMC1400.c **** /*
  77:../Startup/system_XMC1400.c **** //    <o> External crystal frequency [Hz]
  78:../Startup/system_XMC1400.c **** //       <8000000=> 8MHz
  79:../Startup/system_XMC1400.c **** //       <12000000=> 12MHz
  80:../Startup/system_XMC1400.c **** //       <16000000=> 16MHz
  81:../Startup/system_XMC1400.c **** //       <20000000=> 20MHz
  82:../Startup/system_XMC1400.c **** //    <i> Defines external crystal frequency
  83:../Startup/system_XMC1400.c **** //    <i> Default: 20MHz
  84:../Startup/system_XMC1400.c **** */
  85:../Startup/system_XMC1400.c **** #define OSCHP_FREQUENCY (20000000U)
  86:../Startup/system_XMC1400.c **** 
  87:../Startup/system_XMC1400.c **** /*
  88:../Startup/system_XMC1400.c **** //    <o> DCLK clock source selection
  89:../Startup/system_XMC1400.c **** //       <0=> Internal oscillator DCO1 (48MHz)
  90:../Startup/system_XMC1400.c **** //       <1=> External crystal oscillator
  91:../Startup/system_XMC1400.c **** //    <i> Default: Internal oscillator DCO1 (48MHz)
  92:../Startup/system_XMC1400.c **** */
  93:../Startup/system_XMC1400.c **** #define DCLK_CLOCK_SRC 0
  94:../Startup/system_XMC1400.c **** #define DCLK_CLOCK_SRC_DCO1 0
  95:../Startup/system_XMC1400.c **** #define DCLK_CLOCK_SRC_EXT_XTAL 1
  96:../Startup/system_XMC1400.c **** 
  97:../Startup/system_XMC1400.c **** /*
  98:../Startup/system_XMC1400.c **** //    <o> OSCHP external oscillator mode
  99:../Startup/system_XMC1400.c **** //       <0=> Crystal mode
 100:../Startup/system_XMC1400.c **** //       <1=> External clock direct input mode
 101:../Startup/system_XMC1400.c **** //    <i> Default: Crystal mode
 102:../Startup/system_XMC1400.c **** */
 103:../Startup/system_XMC1400.c **** #define OSCHP_MODE 0
 104:../Startup/system_XMC1400.c **** #define OSCHP_MODE_XTAL 0
 105:../Startup/system_XMC1400.c **** #define OSCHP_MODE_DIRECT 1
 106:../Startup/system_XMC1400.c **** 
 107:../Startup/system_XMC1400.c **** /*
 108:../Startup/system_XMC1400.c **** //    <o> RTC clock source selection
 109:../Startup/system_XMC1400.c **** //       <0=> Internal oscillator DCO2 (32768Hz)
 110:../Startup/system_XMC1400.c **** //       <5=> External crystal oscillator
 111:../Startup/system_XMC1400.c **** //    <i> Default: Internal oscillator DCO2 (32768Hz)
 112:../Startup/system_XMC1400.c **** */
 113:../Startup/system_XMC1400.c **** #define RTC_CLOCK_SRC 0
 114:../Startup/system_XMC1400.c **** #define RTC_CLOCK_SRC_DCO2 0
 115:../Startup/system_XMC1400.c **** #define RTC_CLOCK_SRC_EXT_XTAL 5
 116:../Startup/system_XMC1400.c **** /*
 117:../Startup/system_XMC1400.c **** //    <o> PCLK clock source selection
 118:../Startup/system_XMC1400.c **** //       <0=> MCLK
 119:../Startup/system_XMC1400.c **** //       <1=> 2xMCLK
 120:../Startup/system_XMC1400.c **** //    <i> Default: 2xMCLK
 121:../Startup/system_XMC1400.c **** */
 122:../Startup/system_XMC1400.c **** #define PCLK_CLOCK_SRC 1
 123:../Startup/system_XMC1400.c **** #define PCLK_CLOCK_SRC_MCLK 0
 124:../Startup/system_XMC1400.c **** #define PCLK_CLOCK_SRC_2XMCLK 1
 125:../Startup/system_XMC1400.c **** 
 126:../Startup/system_XMC1400.c **** /*
 127:../Startup/system_XMC1400.c **** //-------- <<< end of configuration section >>> ------------------
 128:../Startup/system_XMC1400.c **** */
 129:../Startup/system_XMC1400.c **** 
 130:../Startup/system_XMC1400.c **** /*******************************************************************************
 131:../Startup/system_XMC1400.c ****  * GLOBAL VARIABLES
 132:../Startup/system_XMC1400.c ****  *******************************************************************************/
 133:../Startup/system_XMC1400.c **** 
 134:../Startup/system_XMC1400.c **** #if defined ( __CC_ARM )
 135:../Startup/system_XMC1400.c **** uint32_t SystemCoreClock __attribute__((at(0x20003FFC)));
 136:../Startup/system_XMC1400.c **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:../Startup/system_XMC1400.c **** uint32_t SystemCoreClock __attribute__((section(".bss.ARM.__at_0x20003FFC")));
 138:../Startup/system_XMC1400.c **** #elif defined ( __ICCARM__ )
 139:../Startup/system_XMC1400.c **** __no_init uint32_t SystemCoreClock;
 140:../Startup/system_XMC1400.c **** #elif defined ( __GNUC__ )
 141:../Startup/system_XMC1400.c **** uint32_t SystemCoreClock __attribute__((section(".no_init")));
 142:../Startup/system_XMC1400.c **** #elif defined ( __TASKING__ )
 143:../Startup/system_XMC1400.c **** uint32_t SystemCoreClock __at( 0x20003FFC );
 144:../Startup/system_XMC1400.c **** #endif
 145:../Startup/system_XMC1400.c **** 
 146:../Startup/system_XMC1400.c **** /*******************************************************************************
 147:../Startup/system_XMC1400.c ****  * LOCAL FUNCTIONS
 148:../Startup/system_XMC1400.c ****  *******************************************************************************/
 149:../Startup/system_XMC1400.c **** #if (DCLK_CLOCK_SRC != DCLK_CLOCK_SRC_DCO1) || ((RTC_CLOCK_SRC == RTC_CLOCK_SRC_EXT_XTAL) && (!defi
 150:../Startup/system_XMC1400.c **** __STATIC_FORCEINLINE void delay(uint32_t cycles)
 151:../Startup/system_XMC1400.c **** {
 152:../Startup/system_XMC1400.c ****   while(--cycles > 0)
 153:../Startup/system_XMC1400.c ****   {
 154:../Startup/system_XMC1400.c ****     __NOP();
 155:../Startup/system_XMC1400.c ****   }
 156:../Startup/system_XMC1400.c **** }
 157:../Startup/system_XMC1400.c **** #endif
 158:../Startup/system_XMC1400.c **** 
 159:../Startup/system_XMC1400.c **** /*******************************************************************************
 160:../Startup/system_XMC1400.c ****  * API IMPLEMENTATION
 161:../Startup/system_XMC1400.c ****  *******************************************************************************/
 162:../Startup/system_XMC1400.c **** 
 163:../Startup/system_XMC1400.c **** __WEAK void SystemInit(void)
 164:../Startup/system_XMC1400.c **** {
 165:../Startup/system_XMC1400.c ****   SystemCoreSetup();
 166:../Startup/system_XMC1400.c ****   SystemCoreClockSetup();
 167:../Startup/system_XMC1400.c **** }
 168:../Startup/system_XMC1400.c **** 
 169:../Startup/system_XMC1400.c **** __WEAK void SystemCoreSetup(void)
 170:../Startup/system_XMC1400.c **** {
  26              	 .loc 1 170 0
  27              	 .cfi_startproc
 171:../Startup/system_XMC1400.c ****   /* Enable Prefetch unit */
 172:../Startup/system_XMC1400.c ****   SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
  28              	 .loc 1 172 0
  29 0000 0121     	 mov r1,#1
  30 0002 024A     	 ldr r2,.L2
 173:../Startup/system_XMC1400.c **** }
  31              	 .loc 1 173 0
  32              	 
 172:../Startup/system_XMC1400.c **** }
  33              	 .loc 1 172 0
  34 0004 936E     	 ldr r3,[r2,#104]
  35 0006 8B43     	 bic r3,r1
  36 0008 9366     	 str r3,[r2,#104]
  37              	 .loc 1 173 0
  38 000a 7047     	 bx lr
  39              	.L3:
  40              	 .align 2
  41              	.L2:
  42 000c 00000140 	 .word 1073807360
  43              	 .cfi_endproc
  44              	.LFE43:
  46              	 .section .text.OSCHP_GetFrequency,"ax",%progbits
  47              	 .align 1
  48              	 .weak OSCHP_GetFrequency
  49              	 .code 16
  50              	 .thumb_func
  52              	OSCHP_GetFrequency:
  53              	.LFB46:
 174:../Startup/system_XMC1400.c **** 
 175:../Startup/system_XMC1400.c **** __WEAK void SystemCoreClockSetup(void)
 176:../Startup/system_XMC1400.c **** {
 177:../Startup/system_XMC1400.c ****   /* Clock setup done during SSW using the CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */
 178:../Startup/system_XMC1400.c **** 
 179:../Startup/system_XMC1400.c ****   /* disable bit protection */
 180:../Startup/system_XMC1400.c ****   SCU_GENERAL->PASSWD = 0x000000C0UL;
 181:../Startup/system_XMC1400.c **** 
 182:../Startup/system_XMC1400.c **** #if DCLK_CLOCK_SRC != DCLK_CLOCK_SRC_DCO1
 183:../Startup/system_XMC1400.c **** 
 184:../Startup/system_XMC1400.c ****   if (OSCHP_GetFrequency() > 20000000U)
 185:../Startup/system_XMC1400.c ****   {
 186:../Startup/system_XMC1400.c ****     SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
 187:../Startup/system_XMC1400.c ****   }
 188:../Startup/system_XMC1400.c **** 
 189:../Startup/system_XMC1400.c ****   /* OSCHP source selection - OSC mode */
 190:../Startup/system_XMC1400.c ****   SCU_ANALOG->ANAOSCHPCTRL = (SCU_ANALOG->ANAOSCHPCTRL & ~SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk) |
 191:../Startup/system_XMC1400.c ****                              (OSCHP_MODE << SCU_ANALOG_ANAOSCHPCTRL_MODE_Pos);
 192:../Startup/system_XMC1400.c **** 
 193:../Startup/system_XMC1400.c ****   do 
 194:../Startup/system_XMC1400.c ****   {
 195:../Startup/system_XMC1400.c ****     /* clear the status bit before restarting the detection. */
 196:../Startup/system_XMC1400.c ****     SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
 197:../Startup/system_XMC1400.c **** 
 198:../Startup/system_XMC1400.c ****     /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdo
 199:../Startup/system_XMC1400.c ****        keeping in between at least one DCO2 cycle */
 200:../Startup/system_XMC1400.c ****     
 201:../Startup/system_XMC1400.c ****     /* Disable XOWD */
 202:../Startup/system_XMC1400.c ****     SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
 203:../Startup/system_XMC1400.c ****       
 204:../Startup/system_XMC1400.c ****     /* Clock domains synchronization, at least 1 DCO2 cycle */
 205:../Startup/system_XMC1400.c ****     /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
 206:../Startup/system_XMC1400.c ****     delay(538);
 207:../Startup/system_XMC1400.c ****       
 208:../Startup/system_XMC1400.c ****     /* Enable XOWD */
 209:../Startup/system_XMC1400.c ****     SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
 210:../Startup/system_XMC1400.c **** 
 211:../Startup/system_XMC1400.c ****     /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
 212:../Startup/system_XMC1400.c ****     while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
 213:../Startup/system_XMC1400.c **** 
 214:../Startup/system_XMC1400.c ****     /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
 215:../Startup/system_XMC1400.c ****     /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
 216:../Startup/system_XMC1400.c ****     delay(2685);
 217:../Startup/system_XMC1400.c **** 
 218:../Startup/system_XMC1400.c ****   } while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
 219:../Startup/system_XMC1400.c **** 
 220:../Startup/system_XMC1400.c ****   /* DCLK source using OSC_HP */
 221:../Startup/system_XMC1400.c ****   SCU_CLK->CLKCR1 |= SCU_CLK_CLKCR1_DCLKSEL_Msk;
 222:../Startup/system_XMC1400.c ****   
 223:../Startup/system_XMC1400.c **** #else
 224:../Startup/system_XMC1400.c ****     
 225:../Startup/system_XMC1400.c ****   /* DCLK source using DCO1 */
 226:../Startup/system_XMC1400.c ****   SCU_CLK->CLKCR1 &= ~SCU_CLK_CLKCR1_DCLKSEL_Msk;
 227:../Startup/system_XMC1400.c ****   
 228:../Startup/system_XMC1400.c **** #endif    
 229:../Startup/system_XMC1400.c **** 
 230:../Startup/system_XMC1400.c **** #if RTC_CLOCK_SRC == RTC_CLOCK_SRC_EXT_XTAL
 231:../Startup/system_XMC1400.c ****   /* Enable OSC_LP */
 232:../Startup/system_XMC1400.c ****   SCU_ANALOG->ANAOSCLPCTRL &= ~SCU_ANALOG_ANAOSCLPCTRL_MODE_Msk;
 233:../Startup/system_XMC1400.c **** #ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP  
 234:../Startup/system_XMC1400.c ****   /* Wait oscillator startup time ~5s */
 235:../Startup/system_XMC1400.c ****   delay(6500000);
 236:../Startup/system_XMC1400.c **** #endif  
 237:../Startup/system_XMC1400.c **** #endif  
 238:../Startup/system_XMC1400.c **** 
 239:../Startup/system_XMC1400.c ****   /* Update PCLK selection mux. */
 240:../Startup/system_XMC1400.c ****   /* Fractional divider enabled, MCLK frequency equal DCO1 frequency or external crystal frequency 
 241:../Startup/system_XMC1400.c ****   SCU_CLK->CLKCR = (1023UL <<SCU_CLK_CLKCR_CNTADJ_Pos) |
 242:../Startup/system_XMC1400.c ****                     (RTC_CLOCK_SRC << SCU_CLK_CLKCR_RTCCLKSEL_Pos) |
 243:../Startup/system_XMC1400.c ****                     (PCLK_CLOCK_SRC << SCU_CLK_CLKCR_PCLKSEL_Pos) |
 244:../Startup/system_XMC1400.c ****                     0x100U; /* IDIV = 1 */
 245:../Startup/system_XMC1400.c **** 
 246:../Startup/system_XMC1400.c ****   /* enable bit protection */
 247:../Startup/system_XMC1400.c ****   SCU_GENERAL->PASSWD = 0x000000C3UL;
 248:../Startup/system_XMC1400.c **** 
 249:../Startup/system_XMC1400.c ****   SystemCoreClockUpdate();
 250:../Startup/system_XMC1400.c **** }
 251:../Startup/system_XMC1400.c **** 
 252:../Startup/system_XMC1400.c **** __WEAK void SystemCoreClockUpdate(void)
 253:../Startup/system_XMC1400.c **** {
 254:../Startup/system_XMC1400.c ****   static uint32_t IDIV, FDIV;
 255:../Startup/system_XMC1400.c **** 
 256:../Startup/system_XMC1400.c ****   IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
 257:../Startup/system_XMC1400.c **** 
 258:../Startup/system_XMC1400.c ****   if (IDIV != 0)
 259:../Startup/system_XMC1400.c ****   {
 260:../Startup/system_XMC1400.c ****     FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
 261:../Startup/system_XMC1400.c ****     FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
 262:../Startup/system_XMC1400.c ****     
 263:../Startup/system_XMC1400.c ****     /* Fractional divider is enabled and used */
 264:../Startup/system_XMC1400.c ****     if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
 265:../Startup/system_XMC1400.c ****     {
 266:../Startup/system_XMC1400.c ****        SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
 267:../Startup/system_XMC1400.c ****     }
 268:../Startup/system_XMC1400.c ****     else
 269:../Startup/system_XMC1400.c ****     {
 270:../Startup/system_XMC1400.c ****        SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
 271:../Startup/system_XMC1400.c ****     }
 272:../Startup/system_XMC1400.c ****   }
 273:../Startup/system_XMC1400.c ****   else
 274:../Startup/system_XMC1400.c ****   {
 275:../Startup/system_XMC1400.c ****     /* Fractional divider bypassed. */
 276:../Startup/system_XMC1400.c ****     if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
 277:../Startup/system_XMC1400.c ****     {
 278:../Startup/system_XMC1400.c ****         SystemCoreClock = DCO1_FREQUENCY;
 279:../Startup/system_XMC1400.c ****     }
 280:../Startup/system_XMC1400.c ****     else
 281:../Startup/system_XMC1400.c ****     {
 282:../Startup/system_XMC1400.c ****         SystemCoreClock = OSCHP_GetFrequency();
 283:../Startup/system_XMC1400.c ****     }
 284:../Startup/system_XMC1400.c ****   }
 285:../Startup/system_XMC1400.c **** }
 286:../Startup/system_XMC1400.c **** 
 287:../Startup/system_XMC1400.c **** __WEAK uint32_t OSCHP_GetFrequency(void)
 288:../Startup/system_XMC1400.c **** {
  54              	 .loc 1 288 0
  55              	 .cfi_startproc
 289:../Startup/system_XMC1400.c ****   return OSCHP_FREQUENCY;
 290:../Startup/system_XMC1400.c **** }
  56              	 .loc 1 290 0
  57 0000 0048     	 ldr r0,.L5
  58              	 
  59 0002 7047     	 bx lr
  60              	.L6:
  61              	 .align 2
  62              	.L5:
  63 0004 002D3101 	 .word 20000000
  64              	 .cfi_endproc
  65              	.LFE46:
  67              	 .global __aeabi_uidiv
  68              	 .section .text.SystemCoreClockUpdate,"ax",%progbits
  69              	 .align 1
  70              	 .weak SystemCoreClockUpdate
  71              	 .code 16
  72              	 .thumb_func
  74              	SystemCoreClockUpdate:
  75              	.LFB45:
 253:../Startup/system_XMC1400.c ****   static uint32_t IDIV, FDIV;
  76              	 .loc 1 253 0
  77              	 .cfi_startproc
  78 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
  79              	.LCFI0:
  80              	 .cfi_def_cfa_offset 24
  81              	 .cfi_offset 3,-24
  82              	 .cfi_offset 4,-20
  83              	 .cfi_offset 5,-16
  84              	 .cfi_offset 6,-12
  85              	 .cfi_offset 7,-8
  86              	 .cfi_offset 14,-4
 256:../Startup/system_XMC1400.c **** 
  87              	 .loc 1 256 0
  88 0002 164F     	 ldr r7,.L15
  89 0004 164E     	 ldr r6,.L15+4
  90 0006 3B68     	 ldr r3,[r7]
  91 0008 164C     	 ldr r4,.L15+8
  92 000a 1B04     	 lsl r3,r3,#16
  93 000c 1B0E     	 lsr r3,r3,#24
  94 000e 3360     	 str r3,[r6]
 258:../Startup/system_XMC1400.c ****   {
  95              	 .loc 1 258 0
  96 0010 1AD0     	 beq .L8
 261:../Startup/system_XMC1400.c ****     
  97              	 .loc 1 261 0
  98 0012 0322     	 mov r2,#3
 260:../Startup/system_XMC1400.c ****     FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
  99              	 .loc 1 260 0
 100 0014 3868     	 ldr r0,[r7]
 261:../Startup/system_XMC1400.c ****     
 101              	 .loc 1 261 0
 102 0016 F969     	 ldr r1,[r7,#28]
 260:../Startup/system_XMC1400.c ****     FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
 103              	 .loc 1 260 0
 104 0018 C0B2     	 uxtb r0,r0
 261:../Startup/system_XMC1400.c ****     
 105              	 .loc 1 261 0
 106 001a 0A40     	 and r2,r1
 107 001c 1202     	 lsl r2,r2,#8
 108 001e 124D     	 ldr r5,.L15+12
 109 0020 0243     	 orr r2,r0
 110 0022 2A60     	 str r2,[r5]
 264:../Startup/system_XMC1400.c ****     {
 111              	 .loc 1 264 0
 112 0024 F969     	 ldr r1,[r7,#28]
 113 0026 8905     	 lsl r1,r1,#22
 114 0028 03D4     	 bmi .L9
 266:../Startup/system_XMC1400.c ****     }
 115              	 .loc 1 266 0
 116 002a 9B02     	 lsl r3,r3,#10
 117 002c 9918     	 add r1,r3,r2
 118 002e 0F48     	 ldr r0,.L15+16
 119 0030 06E0     	 b .L13
 120              	.L9:
 121              	.LBB4:
 122              	.LBB5:
 270:../Startup/system_XMC1400.c ****     }
 123              	 .loc 1 270 0
 124 0032 FFF7FEFF 	 bl OSCHP_GetFrequency
 125              	.LVL0:
 126 0036 3168     	 ldr r1,[r6]
 127 0038 2B68     	 ldr r3,[r5]
 128 003a 8902     	 lsl r1,r1,#10
 129 003c 8001     	 lsl r0,r0,#6
 130 003e C918     	 add r1,r1,r3
 131              	.L13:
 132 0040 FFF7FEFF 	 bl __aeabi_uidiv
 133              	.LVL1:
 134 0044 0001     	 lsl r0,r0,#4
 135 0046 07E0     	 b .L12
 136              	.L8:
 137              	.LBE5:
 138              	.LBE4:
 276:../Startup/system_XMC1400.c ****     {
 139              	 .loc 1 276 0
 140 0048 FB69     	 ldr r3,[r7,#28]
 141 004a 9B05     	 lsl r3,r3,#22
 142 004c 02D4     	 bmi .L11
 278:../Startup/system_XMC1400.c ****     }
 143              	 .loc 1 278 0
 144 004e 084B     	 ldr r3,.L15+20
 145 0050 2360     	 str r3,[r4]
 146 0052 02E0     	 b .L7
 147              	.L11:
 282:../Startup/system_XMC1400.c ****     }
 148              	 .loc 1 282 0
 149 0054 FFF7FEFF 	 bl OSCHP_GetFrequency
 150              	.LVL2:
 151              	.L12:
 152 0058 2060     	 str r0,[r4]
 153              	.L7:
 285:../Startup/system_XMC1400.c **** 
 154              	 .loc 1 285 0
 155              	 
 156 005a F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 157              	.L16:
 158              	 .align 2
 159              	.L15:
 160 005c 00030140 	 .word 1073808128
 161 0060 00000000 	 .word .LANCHOR0
 162 0064 00000000 	 .word .LANCHOR2
 163 0068 00000000 	 .word .LANCHOR1
 164 006c 00001BB7 	 .word -1222967296
 165 0070 006CDC02 	 .word 48000000
 166              	 .cfi_endproc
 167              	.LFE45:
 169              	 .section .text.SystemCoreClockSetup,"ax",%progbits
 170              	 .align 1
 171              	 .weak SystemCoreClockSetup
 172              	 .code 16
 173              	 .thumb_func
 175              	SystemCoreClockSetup:
 176              	.LFB44:
 176:../Startup/system_XMC1400.c ****   /* Clock setup done during SSW using the CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */
 177              	 .loc 1 176 0
 178              	 .cfi_startproc
 179 0000 08B5     	 push {r3,lr}
 180              	.LCFI1:
 181              	 .cfi_def_cfa_offset 8
 182              	 .cfi_offset 3,-8
 183              	 .cfi_offset 14,-4
 180:../Startup/system_XMC1400.c **** 
 184              	 .loc 1 180 0
 185 0002 C023     	 mov r3,#192
 186 0004 0649     	 ldr r1,.L18
 226:../Startup/system_XMC1400.c ****   
 187              	 .loc 1 226 0
 188 0006 074A     	 ldr r2,.L18+4
 180:../Startup/system_XMC1400.c **** 
 189              	 .loc 1 180 0
 190 0008 4B62     	 str r3,[r1,#36]
 226:../Startup/system_XMC1400.c ****   
 191              	 .loc 1 226 0
 192 000a 074B     	 ldr r3,.L18+8
 250:../Startup/system_XMC1400.c **** 
 193              	 .loc 1 250 0
 194              	 
 226:../Startup/system_XMC1400.c ****   
 195              	 .loc 1 226 0
 196 000c D869     	 ldr r0,[r3,#28]
 197 000e 0240     	 and r2,r0
 198 0010 DA61     	 str r2,[r3,#28]
 241:../Startup/system_XMC1400.c ****                     (RTC_CLOCK_SRC << SCU_CLK_CLKCR_RTCCLKSEL_Pos) |
 199              	 .loc 1 241 0
 200 0012 064A     	 ldr r2,.L18+12
 201 0014 1A60     	 str r2,[r3]
 247:../Startup/system_XMC1400.c **** 
 202              	 .loc 1 247 0
 203 0016 C323     	 mov r3,#195
 204 0018 4B62     	 str r3,[r1,#36]
 249:../Startup/system_XMC1400.c **** }
 205              	 .loc 1 249 0
 206 001a FFF7FEFF 	 bl SystemCoreClockUpdate
 207              	.LVL3:
 250:../Startup/system_XMC1400.c **** 
 208              	 .loc 1 250 0
 209 001e 08BD     	 pop {r3,pc}
 210              	.L19:
 211              	 .align 2
 212              	.L18:
 213 0020 00000140 	 .word 1073807360
 214 0024 FFFDFFFF 	 .word -513
 215 0028 00030140 	 .word 1073808128
 216 002c 0001F13F 	 .word 1072759040
 217              	 .cfi_endproc
 218              	.LFE44:
 220              	 .section .text.SystemInit,"ax",%progbits
 221              	 .align 1
 222              	 .weak SystemInit
 223              	 .code 16
 224              	 .thumb_func
 226              	SystemInit:
 227              	.LFB42:
 164:../Startup/system_XMC1400.c ****   SystemCoreSetup();
 228              	 .loc 1 164 0
 229              	 .cfi_startproc
 230 0000 08B5     	 push {r3,lr}
 231              	.LCFI2:
 232              	 .cfi_def_cfa_offset 8
 233              	 .cfi_offset 3,-8
 234              	 .cfi_offset 14,-4
 165:../Startup/system_XMC1400.c ****   SystemCoreClockSetup();
 235              	 .loc 1 165 0
 236 0002 FFF7FEFF 	 bl SystemCoreSetup
 237              	.LVL4:
 167:../Startup/system_XMC1400.c **** 
 238              	 .loc 1 167 0
 239              	 
 166:../Startup/system_XMC1400.c **** }
 240              	 .loc 1 166 0
 241 0006 FFF7FEFF 	 bl SystemCoreClockSetup
 242              	.LVL5:
 167:../Startup/system_XMC1400.c **** 
 243              	 .loc 1 167 0
 244 000a 08BD     	 pop {r3,pc}
 245              	 .cfi_endproc
 246              	.LFE42:
 248              	 .global SystemCoreClock
 249              	 .section .no_init,"aw",%progbits
 250              	 .align 2
 251              	 .set .LANCHOR2,.+0
 254              	SystemCoreClock:
 255 0000 00000000 	 .space 4
 256              	 .section .bss.FDIV.5135,"aw",%nobits
 257              	 .align 2
 258              	 .set .LANCHOR1,.+0
 261              	FDIV.5135:
 262 0000 00000000 	 .space 4
 263              	 .section .bss.IDIV.5134,"aw",%nobits
 264              	 .align 2
 265              	 .set .LANCHOR0,.+0
 268              	IDIV.5134:
 269 0000 00000000 	 .space 4
 270              	 .text
 271              	.Letext0:
 272              	 .file 2 "c:\\dave_4-4-2_64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 273              	 .file 3 "c:\\dave_4-4-2_64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 274              	 .file 4 "C:/Workspace/DAVE-4.4.2-64Bit/xmc1400-getstarted-optiga-trust-m/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 275              	 .file 5 "C:/Workspace/DAVE-4.4.2-64Bit/xmc1400-getstarted-optiga-trust-m/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_XMC1400.c
    {standard input}:18     .text.SystemCoreSetup:00000000 $t
    {standard input}:23     .text.SystemCoreSetup:00000000 SystemCoreSetup
    {standard input}:42     .text.SystemCoreSetup:0000000c $d
    {standard input}:47     .text.OSCHP_GetFrequency:00000000 $t
    {standard input}:52     .text.OSCHP_GetFrequency:00000000 OSCHP_GetFrequency
    {standard input}:63     .text.OSCHP_GetFrequency:00000004 $d
    {standard input}:69     .text.SystemCoreClockUpdate:00000000 $t
    {standard input}:74     .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
    {standard input}:160    .text.SystemCoreClockUpdate:0000005c $d
    {standard input}:170    .text.SystemCoreClockSetup:00000000 $t
    {standard input}:175    .text.SystemCoreClockSetup:00000000 SystemCoreClockSetup
    {standard input}:213    .text.SystemCoreClockSetup:00000020 $d
    {standard input}:221    .text.SystemInit:00000000 $t
    {standard input}:226    .text.SystemInit:00000000 SystemInit
    {standard input}:254    .no_init:00000000 SystemCoreClock
    {standard input}:250    .no_init:00000000 $d
    {standard input}:257    .bss.FDIV.5135:00000000 $d
    {standard input}:261    .bss.FDIV.5135:00000000 FDIV.5135
    {standard input}:264    .bss.IDIV.5134:00000000 $d
    {standard input}:268    .bss.IDIV.5134:00000000 IDIV.5134
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
