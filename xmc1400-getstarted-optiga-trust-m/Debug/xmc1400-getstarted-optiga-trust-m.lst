
xmc1400-getstarted-optiga-trust-m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f7d0  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000028  100107d0  100107d0  000107d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  100107f8  100107f8  000107f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000144  2000000c  10010800  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 Stack         00001400  20000150  00000000  00000150  2**0
                  ALLOC
  5 .data         0000134c  20001550  10010944  00019550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007c4  2000289c  0000274c  0001a89c  2**2
                  ALLOC
  7 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  8 .debug_aranges 000018b8  00000000  00000000  0001a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003dee1  00000000  00000000  0001c158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aa25  00000000  00000000  0005a039  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000125e1  00000000  00000000  00064a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000467c  00000000  00000000  00077040  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000efb1  00000000  00000000  0007b6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001845e  00000000  00000000  0008a66d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d08  00000000  00000000  000a2ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00001470  00000000  00000000  000a47d8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 15 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10010800 	.word	0x10010800
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	10009449 	.word	0x10009449
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	10010944 	.word	0x10010944
	ldr	r2, =__data_start
10001078:	20001550 	.word	0x20001550
	ldr	r3, =__data_end
1000107c:	2000289c 	.word	0x2000289c
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	10011c90 	.word	0x10011c90
	ldr	r2, =__ram_code_start
10001084:	2000289c 	.word	0x2000289c
	ldr	r3, =__ram_code_end
10001088:	2000289c 	.word	0x2000289c
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	2000289c 	.word	0x2000289c
	ldr	r2, =__bss_end
10001090:	2000305c 	.word	0x2000305c
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	1000c1b1 	.word	0x1000c1b1
    blx  r0
#endif

    ldr  r0, =main
10001098:	1000b06d 	.word	0x1000b06d

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <pal_init>:


pal_status_t pal_init(void)
{
    return PAL_STATUS_SUCCESS;
}
100010a0:	2000      	movs	r0, #0
100010a2:	4770      	bx	lr

100010a4 <pal_crypt_tls_prf_sha256>:
                                      uint16_t label_length,
                                      const uint8_t * p_seed,
                                      uint16_t seed_length,
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
100010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100010a6:	b0b1      	sub	sp, #196	; 0xc4
100010a8:	1c1d      	adds	r5, r3, #0
100010aa:	ab36      	add	r3, sp, #216	; 0xd8
100010ac:	881c      	ldrh	r4, [r3, #0]
100010ae:	ab38      	add	r3, sp, #224	; 0xe0
100010b0:	881f      	ldrh	r7, [r3, #0]
    uint8_t hmac_checksum_result[PAL_CRYPT_DIGEST_MAX_SIZE];
    const mbedtls_md_info_t *message_digest_info;
    mbedtls_md_context_t message_digest_context;
    uint16_t final_seed_length = 0;
       
    mbedtls_md_init(&message_digest_context);
100010b2:	a805      	add	r0, sp, #20
                                      uint16_t label_length,
                                      const uint8_t * p_seed,
                                      uint16_t seed_length,
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
100010b4:	ab3a      	add	r3, sp, #232	; 0xe8
100010b6:	881e      	ldrh	r6, [r3, #0]
100010b8:	9100      	str	r1, [sp, #0]
100010ba:	9203      	str	r2, [sp, #12]
    uint8_t hmac_checksum_result[PAL_CRYPT_DIGEST_MAX_SIZE];
    const mbedtls_md_info_t *message_digest_info;
    mbedtls_md_context_t message_digest_context;
    uint16_t final_seed_length = 0;
       
    mbedtls_md_init(&message_digest_context);
100010bc:	f005 ffb6 	bl	1000702c <mbedtls_md_init>
    
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_secret) || (NULL == p_label) || (NULL == p_seed) || (NULL == p_derived_key))
100010c0:	9b00      	ldr	r3, [sp, #0]
100010c2:	2b00      	cmp	r3, #0
100010c4:	d101      	bne.n	100010ca <pal_crypt_tls_prf_sha256+0x26>
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
    #define PAL_CRYPT_DIGEST_MAX_SIZE    (32U)

    pal_status_t return_value = PAL_STATUS_FAILURE;
100010c6:	2401      	movs	r4, #1
100010c8:	e081      	b.n	100011ce <pal_crypt_tls_prf_sha256+0x12a>
    mbedtls_md_init(&message_digest_context);
    
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_secret) || (NULL == p_label) || (NULL == p_seed) || (NULL == p_derived_key))
100010ca:	2d00      	cmp	r5, #0
100010cc:	d0fb      	beq.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>
100010ce:	9b37      	ldr	r3, [sp, #220]	; 0xdc
100010d0:	2b00      	cmp	r3, #0
100010d2:	d0f8      	beq.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>
100010d4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
100010d6:	2b00      	cmp	r3, #0
100010d8:	d0f5      	beq.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>
        {
            break;
        }
#endif  //OPTIGA_LIB_DEBUG_NULL_CHECK

        if (sizeof(md_hmac_temp_array ) < (uint32_t)(message_digest_length + label_length + seed_length))
100010da:	1c23      	adds	r3, r4, #0
100010dc:	3320      	adds	r3, #32
100010de:	9301      	str	r3, [sp, #4]
100010e0:	19db      	adds	r3, r3, r7
100010e2:	2b80      	cmp	r3, #128	; 0x80
100010e4:	dd01      	ble.n	100010ea <pal_crypt_tls_prf_sha256+0x46>
        {
            return_value = PAL_STATUS_INVALID_INPUT;
100010e6:	2404      	movs	r4, #4
100010e8:	e071      	b.n	100011ce <pal_crypt_tls_prf_sha256+0x12a>
            break;
        }

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
100010ea:	2006      	movs	r0, #6
100010ec:	f005 ff8e 	bl	1000700c <mbedtls_md_info_from_type>

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
100010f0:	1c29      	adds	r1, r5, #0
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
100010f2:	9002      	str	r0, [sp, #8]

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
100010f4:	1c22      	adds	r2, r4, #0
100010f6:	a818      	add	r0, sp, #96	; 0x60
100010f8:	f00b f899 	bl	1000c22e <memcpy>
        memcpy(md_hmac_temp_array + message_digest_length + label_length, p_seed, seed_length);
100010fc:	aa10      	add	r2, sp, #64	; 0x40
100010fe:	4694      	mov	ip, r2
10001100:	9b01      	ldr	r3, [sp, #4]
10001102:	9937      	ldr	r1, [sp, #220]	; 0xdc
10001104:	4463      	add	r3, ip
10001106:	1c3a      	adds	r2, r7, #0
10001108:	1c18      	adds	r0, r3, #0
1000110a:	f00b f890 	bl	1000c22e <memcpy>
        final_seed_length = label_length + seed_length;

        if (0 != (mbedtls_md_setup(&message_digest_context,message_digest_info,1)))
1000110e:	a805      	add	r0, sp, #20
10001110:	9902      	ldr	r1, [sp, #8]
10001112:	2201      	movs	r2, #1
10001114:	f005 ffac 	bl	10007070 <mbedtls_md_setup>
10001118:	2800      	cmp	r0, #0
1000111a:	d1e4      	bne.n	100010e6 <pal_crypt_tls_prf_sha256+0x42>
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        if (0 != mbedtls_md_hmac_starts(&message_digest_context, p_secret, secret_length))
1000111c:	a805      	add	r0, sp, #20
1000111e:	9900      	ldr	r1, [sp, #0]
10001120:	9a03      	ldr	r2, [sp, #12]
10001122:	f005 ffcb 	bl	100070bc <mbedtls_md_hmac_starts>
10001126:	2800      	cmp	r0, #0
10001128:	d1cd      	bne.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
        memcpy(md_hmac_temp_array + message_digest_length + label_length, p_seed, seed_length);
        final_seed_length = label_length + seed_length;
1000112a:	19e5      	adds	r5, r4, r7
1000112c:	b2ad      	uxth	r5, r5
        if (0 != mbedtls_md_hmac_starts(&message_digest_context, p_secret, secret_length))
        {
            break;
        }
       
        if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array + message_digest_length, final_seed_length))
1000112e:	a805      	add	r0, sp, #20
10001130:	a918      	add	r1, sp, #96	; 0x60
10001132:	1c2a      	adds	r2, r5, #0
10001134:	f006 f820 	bl	10007178 <mbedtls_md_hmac_update>
10001138:	2800      	cmp	r0, #0
1000113a:	d1c4      	bne.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>
        {
            break;
        }
        
        if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
1000113c:	a805      	add	r0, sp, #20
1000113e:	a910      	add	r1, sp, #64	; 0x40
10001140:	f006 f82c 	bl	1000719c <mbedtls_md_hmac_finish>
10001144:	1e04      	subs	r4, r0, #0
10001146:	d1be      	bne.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
10001148:	42b4      	cmp	r4, r6
1000114a:	d23b      	bcs.n	100011c4 <pal_crypt_tls_prf_sha256+0x120>
             derive_key_len_index += message_digest_length)
        {
            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
1000114c:	a805      	add	r0, sp, #20
1000114e:	f006 f859 	bl	10007204 <mbedtls_md_hmac_reset>
10001152:	2800      	cmp	r0, #0
10001154:	d138      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
            {
                break;
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, 
10001156:	1c2a      	adds	r2, r5, #0
10001158:	a805      	add	r0, sp, #20
1000115a:	a910      	add	r1, sp, #64	; 0x40
1000115c:	3220      	adds	r2, #32
1000115e:	f006 f80b 	bl	10007178 <mbedtls_md_hmac_update>
10001162:	2800      	cmp	r0, #0
10001164:	d130      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
                            message_digest_length + final_seed_length))
            {
                break;                
            }
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, hmac_checksum_result))
10001166:	af08      	add	r7, sp, #32
10001168:	a805      	add	r0, sp, #20
1000116a:	1c39      	adds	r1, r7, #0
1000116c:	f006 f816 	bl	1000719c <mbedtls_md_hmac_finish>
10001170:	2800      	cmp	r0, #0
10001172:	d129      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
            {
                break;                                
            }

            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
10001174:	a805      	add	r0, sp, #20
10001176:	f006 f845 	bl	10007204 <mbedtls_md_hmac_reset>
1000117a:	2800      	cmp	r0, #0
1000117c:	d124      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
            {
                break;                
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, message_digest_length))
1000117e:	a805      	add	r0, sp, #20
10001180:	a910      	add	r1, sp, #64	; 0x40
10001182:	2220      	movs	r2, #32
10001184:	f005 fff8 	bl	10007178 <mbedtls_md_hmac_update>
10001188:	2800      	cmp	r0, #0
1000118a:	d11d      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
            {
                break;                                
            }
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
1000118c:	a805      	add	r0, sp, #20
1000118e:	a910      	add	r1, sp, #64	; 0x40
10001190:	f006 f804 	bl	1000719c <mbedtls_md_hmac_finish>
10001194:	2800      	cmp	r0, #0
10001196:	d117      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
            {
                break;                                
            }

            hmac_result_length = ((derive_key_len_index + message_digest_length) > derived_key_length) ? 
10001198:	1c21      	adds	r1, r4, #0
1000119a:	2320      	movs	r3, #32
1000119c:	3120      	adds	r1, #32
1000119e:	9300      	str	r3, [sp, #0]
100011a0:	42b1      	cmp	r1, r6
100011a2:	dd02      	ble.n	100011aa <pal_crypt_tls_prf_sha256+0x106>
                                  (derived_key_length % message_digest_length) : (message_digest_length);
100011a4:	221f      	movs	r2, #31
100011a6:	4032      	ands	r2, r6
100011a8:	9200      	str	r2, [sp, #0]

            for (hmac_checksum_result_index = 0; hmac_checksum_result_index < hmac_result_length; 
100011aa:	2300      	movs	r3, #0
100011ac:	9a00      	ldr	r2, [sp, #0]
100011ae:	b298      	uxth	r0, r3
100011b0:	4290      	cmp	r0, r2
100011b2:	d205      	bcs.n	100011c0 <pal_crypt_tls_prf_sha256+0x11c>
100011b4:	9839      	ldr	r0, [sp, #228]	; 0xe4
100011b6:	1902      	adds	r2, r0, r4
                 hmac_checksum_result_index++)
            {
                p_derived_key[derive_key_len_index + hmac_checksum_result_index] = 
100011b8:	5cf8      	ldrb	r0, [r7, r3]
100011ba:	54d0      	strb	r0, [r2, r3]
100011bc:	3301      	adds	r3, #1
100011be:	e7f5      	b.n	100011ac <pal_crypt_tls_prf_sha256+0x108>
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
             derive_key_len_index += message_digest_length)
100011c0:	b28c      	uxth	r4, r1
100011c2:	e7c1      	b.n	10001148 <pal_crypt_tls_prf_sha256+0xa4>
                                                                    hmac_checksum_result[hmac_checksum_result_index];
            }
        }
        if (derive_key_len_index >= derived_key_length)
        {
            return_value = PAL_STATUS_SUCCESS;
100011c4:	2400      	movs	r4, #0
100011c6:	e002      	b.n	100011ce <pal_crypt_tls_prf_sha256+0x12a>
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
    #define PAL_CRYPT_DIGEST_MAX_SIZE    (32U)

    pal_status_t return_value = PAL_STATUS_FAILURE;
100011c8:	42b4      	cmp	r4, r6
100011ca:	41a4      	sbcs	r4, r4
100011cc:	4264      	negs	r4, r4
        {
            return_value = PAL_STATUS_SUCCESS;
        }
    } while (FALSE);
    
    mbedtls_md_free(&message_digest_context);
100011ce:	a805      	add	r0, sp, #20
100011d0:	f005 ff32 	bl	10007038 <mbedtls_md_free>

    memset(md_hmac_temp_array, 0x00, sizeof(md_hmac_temp_array));
100011d4:	a810      	add	r0, sp, #64	; 0x40
100011d6:	2100      	movs	r1, #0
100011d8:	2280      	movs	r2, #128	; 0x80
100011da:	f00b f831 	bl	1000c240 <memset>
    memset(hmac_checksum_result, 0x00, sizeof(hmac_checksum_result));    
100011de:	a808      	add	r0, sp, #32
100011e0:	2100      	movs	r1, #0
100011e2:	2220      	movs	r2, #32
100011e4:	f00b f82c 	bl	1000c240 <memset>
    #undef PAL_CRYPT_DIGEST_MAX_SIZE
    return return_value;
}
100011e8:	1c20      	adds	r0, r4, #0
100011ea:	b031      	add	sp, #196	; 0xc4
100011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

100011ee <pal_crypt_encrypt_aes128_ccm>:
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_cipher_text)
{
100011ee:	b5f0      	push	{r4, r5, r6, r7, lr}
100011f0:	b09d      	sub	sp, #116	; 0x74
100011f2:	1c1f      	adds	r7, r3, #0
100011f4:	ab22      	add	r3, sp, #136	; 0x88
100011f6:	cb20      	ldmia	r3!, {r5}
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t mac_output[MAC_TAG_BUFFER_SIZE];
    mbedtls_ccm_context sEncrypt;

    mbedtls_ccm_init(&sEncrypt);
100011f8:	a80e      	add	r0, sp, #56	; 0x38
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_cipher_text)
{
100011fa:	881b      	ldrh	r3, [r3, #0]
100011fc:	1c0e      	adds	r6, r1, #0
100011fe:	9308      	str	r3, [sp, #32]
10001200:	ab25      	add	r3, sp, #148	; 0x94
10001202:	881b      	ldrh	r3, [r3, #0]
10001204:	1c14      	adds	r4, r2, #0
10001206:	9309      	str	r3, [sp, #36]	; 0x24
10001208:	ab26      	add	r3, sp, #152	; 0x98
1000120a:	781b      	ldrb	r3, [r3, #0]
1000120c:	9307      	str	r3, [sp, #28]
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t mac_output[MAC_TAG_BUFFER_SIZE];
    mbedtls_ccm_context sEncrypt;

    mbedtls_ccm_init(&sEncrypt);
1000120e:	f005 fd83 	bl	10006d18 <mbedtls_ccm_init>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_cipher_text) || (NULL == p_plain_text) ||
10001212:	9b27      	ldr	r3, [sp, #156]	; 0x9c
10001214:	2b00      	cmp	r3, #0
10001216:	d101      	bne.n	1000121c <pal_crypt_encrypt_aes128_ccm+0x2e>
                                          uint8_t * p_cipher_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    #define MAC_TAG_BUFFER_SIZE     (16U)
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
10001218:	2501      	movs	r5, #1
1000121a:	e029      	b.n	10001270 <pal_crypt_encrypt_aes128_ccm+0x82>
    mbedtls_ccm_init(&sEncrypt);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_cipher_text) || (NULL == p_plain_text) ||
1000121c:	2e00      	cmp	r6, #0
1000121e:	d0fb      	beq.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
10001220:	2d00      	cmp	r5, #0
10001222:	d0f9      	beq.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
            (NULL == p_nonce) || (NULL == p_associated_data) || (NULL == p_encrypt_key))
10001224:	9b24      	ldr	r3, [sp, #144]	; 0x90
10001226:	2b00      	cmp	r3, #0
10001228:	d0f6      	beq.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
1000122a:	2f00      	cmp	r7, #0
1000122c:	d0f4      	beq.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
        {
            break;
        }
#endif

        if (0 != mbedtls_ccm_setkey(&sEncrypt, MBEDTLS_CIPHER_ID_AES, p_encrypt_key, 8 * AES128_KEY_BITS_SIZE))
1000122e:	a80e      	add	r0, sp, #56	; 0x38
10001230:	2102      	movs	r1, #2
10001232:	1c3a      	adds	r2, r7, #0
10001234:	2380      	movs	r3, #128	; 0x80
10001236:	f005 fd75 	bl	10006d24 <mbedtls_ccm_setkey>
1000123a:	2800      	cmp	r0, #0
1000123c:	d1ec      	bne.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
        {
            break;
        }
        
        if (0 != mbedtls_ccm_encrypt_and_tag(&sEncrypt,
1000123e:	9b24      	ldr	r3, [sp, #144]	; 0x90
10001240:	9602      	str	r6, [sp, #8]
10001242:	9300      	str	r3, [sp, #0]
10001244:	9b09      	ldr	r3, [sp, #36]	; 0x24
10001246:	ae0a      	add	r6, sp, #40	; 0x28
10001248:	9301      	str	r3, [sp, #4]
1000124a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1000124c:	1c2a      	adds	r2, r5, #0
1000124e:	9303      	str	r3, [sp, #12]
10001250:	9b07      	ldr	r3, [sp, #28]
10001252:	9604      	str	r6, [sp, #16]
10001254:	9305      	str	r3, [sp, #20]
10001256:	a80e      	add	r0, sp, #56	; 0x38
10001258:	1c21      	adds	r1, r4, #0
1000125a:	9b08      	ldr	r3, [sp, #32]
1000125c:	f005 fda6 	bl	10006dac <mbedtls_ccm_encrypt_and_tag>
10001260:	1e05      	subs	r5, r0, #0
10001262:	d1d9      	bne.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
        
        {
            break;
        }

        memcpy((p_cipher_text + plain_text_length), mac_output, mac_size);
10001264:	9b27      	ldr	r3, [sp, #156]	; 0x9c
10001266:	1c31      	adds	r1, r6, #0
10001268:	1918      	adds	r0, r3, r4
1000126a:	9a07      	ldr	r2, [sp, #28]
1000126c:	f00a ffdf 	bl	1000c22e <memcpy>
        return_status = PAL_STATUS_SUCCESS;
    } while (FALSE);
    mbedtls_ccm_free(&sEncrypt);
10001270:	a80e      	add	r0, sp, #56	; 0x38
10001272:	f005 fd78 	bl	10006d66 <mbedtls_ccm_free>
    #undef AES128_KEY_BITS_SIZE
    #undef MAC_TAG_BUFFER_SIZE    
    return return_status;
}
10001276:	1c28      	adds	r0, r5, #0
10001278:	b01d      	add	sp, #116	; 0x74
1000127a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000127c <pal_crypt_decrypt_aes128_ccm>:
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
1000127c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000127e:	b099      	sub	sp, #100	; 0x64
10001280:	1c1f      	adds	r7, r3, #0
10001282:	ab1e      	add	r3, sp, #120	; 0x78
10001284:	cb20      	ldmia	r3!, {r5}
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
    mbedtls_ccm_context sDecrypt;

    mbedtls_ccm_init(&sDecrypt);
10001286:	a80a      	add	r0, sp, #40	; 0x28
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
10001288:	881b      	ldrh	r3, [r3, #0]
1000128a:	1c0c      	adds	r4, r1, #0
1000128c:	9308      	str	r3, [sp, #32]
1000128e:	ab21      	add	r3, sp, #132	; 0x84
10001290:	881b      	ldrh	r3, [r3, #0]
10001292:	9207      	str	r2, [sp, #28]
10001294:	9309      	str	r3, [sp, #36]	; 0x24
10001296:	ab22      	add	r3, sp, #136	; 0x88
10001298:	781e      	ldrb	r6, [r3, #0]
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
    mbedtls_ccm_context sDecrypt;

    mbedtls_ccm_init(&sDecrypt);
1000129a:	f005 fd3d 	bl	10006d18 <mbedtls_ccm_init>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_plain_text) || (NULL == p_cipher_text) ||
1000129e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
100012a0:	2b00      	cmp	r3, #0
100012a2:	d101      	bne.n	100012a8 <pal_crypt_decrypt_aes128_ccm+0x2c>
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
100012a4:	2401      	movs	r4, #1
100012a6:	e024      	b.n	100012f2 <pal_crypt_decrypt_aes128_ccm+0x76>
    mbedtls_ccm_init(&sDecrypt);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_plain_text) || (NULL == p_cipher_text) ||
100012a8:	2c00      	cmp	r4, #0
100012aa:	d0fb      	beq.n	100012a4 <pal_crypt_decrypt_aes128_ccm+0x28>
100012ac:	2d00      	cmp	r5, #0
100012ae:	d0f9      	beq.n	100012a4 <pal_crypt_decrypt_aes128_ccm+0x28>
            (NULL == p_nonce) || (NULL == p_associated_data) || (NULL == p_decrypt_key))
100012b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
100012b2:	2b00      	cmp	r3, #0
100012b4:	d0f6      	beq.n	100012a4 <pal_crypt_decrypt_aes128_ccm+0x28>
100012b6:	2f00      	cmp	r7, #0
100012b8:	d0f4      	beq.n	100012a4 <pal_crypt_decrypt_aes128_ccm+0x28>
        {
            break;
        }
#endif

        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
100012ba:	a80a      	add	r0, sp, #40	; 0x28
100012bc:	2102      	movs	r1, #2
100012be:	1c3a      	adds	r2, r7, #0
100012c0:	2380      	movs	r3, #128	; 0x80
100012c2:	f005 fd2f 	bl	10006d24 <mbedtls_ccm_setkey>
100012c6:	2800      	cmp	r0, #0
100012c8:	d1ec      	bne.n	100012a4 <pal_crypt_decrypt_aes128_ccm+0x28>
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
                                          (cipher_text_length - mac_size),
100012ca:	9b07      	ldr	r3, [sp, #28]
        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
100012cc:	9402      	str	r4, [sp, #8]
                                          (cipher_text_length - mac_size),
100012ce:	1b99      	subs	r1, r3, r6
        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
100012d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
100012d2:	1864      	adds	r4, r4, r1
100012d4:	9300      	str	r3, [sp, #0]
100012d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100012d8:	9404      	str	r4, [sp, #16]
100012da:	9301      	str	r3, [sp, #4]
100012dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
100012de:	9605      	str	r6, [sp, #20]
100012e0:	9303      	str	r3, [sp, #12]
100012e2:	a80a      	add	r0, sp, #40	; 0x28
100012e4:	1c2a      	adds	r2, r5, #0
100012e6:	9b08      	ldr	r3, [sp, #32]
100012e8:	f005 fda6 	bl	10006e38 <mbedtls_ccm_auth_decrypt>
100012ec:	1e44      	subs	r4, r0, #1
100012ee:	41a0      	sbcs	r0, r4
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
100012f0:	b284      	uxth	r4, r0
        {
            break;
        }
        return_status = PAL_STATUS_SUCCESS;
    } while (FALSE);
    mbedtls_ccm_free(&sDecrypt);
100012f2:	a80a      	add	r0, sp, #40	; 0x28
100012f4:	f005 fd37 	bl	10006d66 <mbedtls_ccm_free>
    #undef AES128_KEY_BITS_SIZE
    return return_status;
}
100012f8:	1c20      	adds	r0, r4, #0
100012fa:	b019      	add	sp, #100	; 0x64
100012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

100012fe <pal_gpio_set_high>:
    return PAL_STATUS_SUCCESS;
}

void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
100012fe:	2800      	cmp	r0, #0
10001300:	d007      	beq.n	10001312 <pal_gpio_set_high+0x14>
10001302:	6803      	ldr	r3, [r0, #0]
10001304:	2b00      	cmp	r3, #0
10001306:	d004      	beq.n	10001312 <pal_gpio_set_high+0x14>

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10001308:	7b19      	ldrb	r1, [r3, #12]
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
1000130a:	681a      	ldr	r2, [r3, #0]
1000130c:	2301      	movs	r3, #1
1000130e:	408b      	lsls	r3, r1
10001310:	6053      	str	r3, [r2, #4]
    {
        DIGITAL_IO_SetOutputHigh(p_gpio_context->p_gpio_hw);
    }
}
10001312:	4770      	bx	lr

10001314 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
10001314:	2800      	cmp	r0, #0
10001316:	d008      	beq.n	1000132a <pal_gpio_set_low+0x16>
10001318:	6803      	ldr	r3, [r0, #0]
1000131a:	2b00      	cmp	r3, #0
1000131c:	d005      	beq.n	1000132a <pal_gpio_set_low+0x16>

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
1000131e:	7b19      	ldrb	r1, [r3, #12]
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10001320:	681a      	ldr	r2, [r3, #0]
10001322:	2380      	movs	r3, #128	; 0x80
10001324:	025b      	lsls	r3, r3, #9
10001326:	408b      	lsls	r3, r1
10001328:	6053      	str	r3, [r2, #4]
    {
        DIGITAL_IO_SetOutputLow(p_gpio_context->p_gpio_hw);
    }
}
1000132a:	4770      	bx	lr

1000132c <pal_i2c_acquire.isra.2>:
_STATIC_H pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
1000132c:	4b06      	ldr	r3, [pc, #24]	; (10001348 <pal_i2c_acquire.isra.2+0x1c>)
        if (1 == g_entry_count)
        {
            return PAL_STATUS_SUCCESS;
        }
    }
    return PAL_STATUS_FAILURE;
1000132e:	2001      	movs	r0, #1
_STATIC_H pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
10001330:	681a      	ldr	r2, [r3, #0]
10001332:	2a00      	cmp	r2, #0
10001334:	d107      	bne.n	10001346 <pal_i2c_acquire.isra.2+0x1a>
    {
        g_entry_count++;
10001336:	681a      	ldr	r2, [r3, #0]
10001338:	1812      	adds	r2, r2, r0
1000133a:	601a      	str	r2, [r3, #0]
        if (1 == g_entry_count)
1000133c:	6818      	ldr	r0, [r3, #0]
1000133e:	3801      	subs	r0, #1
10001340:	1e43      	subs	r3, r0, #1
10001342:	4198      	sbcs	r0, r3
        {
            return PAL_STATUS_SUCCESS;
        }
    }
    return PAL_STATUS_FAILURE;
10001344:	b280      	uxth	r0, r0
}
10001346:	4770      	bx	lr
10001348:	200028a0 	.word	0x200028a0

1000134c <invoke_upper_layer_callback>:
    g_entry_count = 0;
}
/// @endcond

void invoke_upper_layer_callback (const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
1000134c:	b508      	push	{r3, lr}
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
1000134e:	68c3      	ldr	r3, [r0, #12]
10001350:	6880      	ldr	r0, [r0, #8]
10001352:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
10001354:	2200      	movs	r2, #0
10001356:	4b01      	ldr	r3, [pc, #4]	; (1000135c <invoke_upper_layer_callback+0x10>)
10001358:	601a      	str	r2, [r3, #0]

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);

    //Release I2C Bus
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
}
1000135a:	bd08      	pop	{r3, pc}
1000135c:	200028a0 	.word	0x200028a0

10001360 <i2c_master_end_of_transmit_callback>:

/// @cond hidden
void i2c_master_end_of_transmit_callback(void)
{
10001360:	b508      	push	{r3, lr}
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
10001362:	4b03      	ldr	r3, [pc, #12]	; (10001370 <i2c_master_end_of_transmit_callback+0x10>)
10001364:	2100      	movs	r1, #0
10001366:	6818      	ldr	r0, [r3, #0]
10001368:	f7ff fff0 	bl	1000134c <invoke_upper_layer_callback>
}
1000136c:	bd08      	pop	{r3, pc}
1000136e:	46c0      	nop			; (mov r8, r8)
10001370:	2000289c 	.word	0x2000289c

10001374 <i2c_master_end_of_receive_callback>:

void i2c_master_end_of_receive_callback(void)
{
10001374:	b508      	push	{r3, lr}
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
10001376:	4b03      	ldr	r3, [pc, #12]	; (10001384 <i2c_master_end_of_receive_callback+0x10>)
10001378:	2100      	movs	r1, #0
1000137a:	6818      	ldr	r0, [r3, #0]
1000137c:	f7ff ffe6 	bl	1000134c <invoke_upper_layer_callback>
}
10001380:	bd08      	pop	{r3, pc}
10001382:	46c0      	nop			; (mov r8, r8)
10001384:	2000289c 	.word	0x2000289c

10001388 <i2c_master_error_detected_callback>:

void i2c_master_error_detected_callback(void)
{
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
10001388:	4a13      	ldr	r2, [pc, #76]	; (100013d8 <i2c_master_error_detected_callback+0x50>)
{
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
}

void i2c_master_error_detected_callback(void)
{
1000138a:	b538      	push	{r3, r4, r5, lr}
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
1000138c:	6813      	ldr	r3, [r2, #0]
1000138e:	1c15      	adds	r5, r2, #0
10001390:	681c      	ldr	r4, [r3, #0]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
10001392:	68a3      	ldr	r3, [r4, #8]
10001394:	3307      	adds	r3, #7
10001396:	7fdb      	ldrb	r3, [r3, #31]
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
10001398:	2b00      	cmp	r3, #0
1000139a:	d105      	bne.n	100013a8 <i2c_master_error_detected_callback+0x20>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
1000139c:	68a3      	ldr	r3, [r4, #8]
1000139e:	3308      	adds	r3, #8
100013a0:	7fdb      	ldrb	r3, [r3, #31]
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
100013a2:	2b00      	cmp	r3, #0
100013a4:	d012      	beq.n	100013cc <i2c_master_error_detected_callback+0x44>
100013a6:	e008      	b.n	100013ba <i2c_master_error_detected_callback+0x32>

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
100013a8:	1c20      	adds	r0, r4, #0
100013aa:	f009 fcb7 	bl	1000ad1c <I2C_MASTER_AbortTransmit>
100013ae:	68a2      	ldr	r2, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
100013b0:	1dd3      	adds	r3, r2, #7
100013b2:	7fdb      	ldrb	r3, [r3, #31]
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
100013b4:	2b00      	cmp	r3, #0
100013b6:	d1fb      	bne.n	100013b0 <i2c_master_error_detected_callback+0x28>
100013b8:	e7f0      	b.n	1000139c <i2c_master_error_detected_callback+0x14>
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
100013ba:	1c20      	adds	r0, r4, #0
100013bc:	f009 fcdc 	bl	1000ad78 <I2C_MASTER_AbortReceive>
100013c0:	68a2      	ldr	r2, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
100013c2:	1c13      	adds	r3, r2, #0
100013c4:	3308      	adds	r3, #8
100013c6:	7fdb      	ldrb	r3, [r3, #31]
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
100013c8:	2b00      	cmp	r3, #0
100013ca:	d1fa      	bne.n	100013c2 <i2c_master_error_detected_callback+0x3a>
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
100013cc:	6828      	ldr	r0, [r5, #0]
100013ce:	2101      	movs	r1, #1
100013d0:	f7ff ffbc 	bl	1000134c <invoke_upper_layer_callback>
}
100013d4:	bd38      	pop	{r3, r4, r5, pc}
100013d6:	46c0      	nop			; (mov r8, r8)
100013d8:	2000289c 	.word	0x2000289c

100013dc <i2c_master_nack_received_callback>:

void i2c_master_nack_received_callback(void)
{
100013dc:	b508      	push	{r3, lr}
    i2c_master_error_detected_callback();
100013de:	f7ff ffd3 	bl	10001388 <i2c_master_error_detected_callback>
}
100013e2:	bd08      	pop	{r3, pc}

100013e4 <i2c_master_arbitration_lost_callback>:

void i2c_master_arbitration_lost_callback(void)
{
100013e4:	b508      	push	{r3, lr}
    i2c_master_error_detected_callback();
100013e6:	f7ff ffcf 	bl	10001388 <i2c_master_error_detected_callback>
}
100013ea:	bd08      	pop	{r3, pc}

100013ec <pal_i2c_init>:
/// @endcond

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
100013ec:	b508      	push	{r3, lr}
	DAVE_STATUS_t status;

	status = (DAVE_STATUS_t)I2C_MASTER_Init(&i2c_master_0);
100013ee:	4802      	ldr	r0, [pc, #8]	; (100013f8 <pal_i2c_init+0xc>)
100013f0:	f009 f951 	bl	1000a696 <I2C_MASTER_Init>

	return PAL_STATUS_SUCCESS;
}
100013f4:	2000      	movs	r0, #0
100013f6:	bd08      	pop	{r3, pc}
100013f8:	200026fc 	.word	0x200026fc

100013fc <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
    return PAL_STATUS_SUCCESS;
}
100013fc:	2000      	movs	r0, #0
100013fe:	4770      	bx	lr

10001400 <pal_i2c_write>:

pal_status_t pal_i2c_write(pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
10001400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001402:	1c05      	adds	r5, r0, #0
10001404:	1c0f      	adds	r7, r1, #0
10001406:	1c16      	adds	r6, r2, #0
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
10001408:	f7ff ff90 	bl	1000132c <pal_i2c_acquire.isra.2>
1000140c:	1e04      	subs	r4, r0, #0
1000140e:	d115      	bne.n	1000143c <pal_i2c_write+0x3c>
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
10001410:	4b0e      	ldr	r3, [pc, #56]	; (1000144c <pal_i2c_write+0x4c>)

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
10001412:	6828      	ldr	r0, [r5, #0]
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
10001414:	601d      	str	r5, [r3, #0]

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
10001416:	9600      	str	r6, [sp, #0]
10001418:	2601      	movs	r6, #1
                                                             (bool)TRUE,
                                                             (p_i2c_context->slave_address << 1),
1000141a:	792a      	ldrb	r2, [r5, #4]
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
1000141c:	9601      	str	r6, [sp, #4]
                                                             (bool)TRUE,
                                                             (p_i2c_context->slave_address << 1),
1000141e:	0052      	lsls	r2, r2, #1
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
10001420:	1c31      	adds	r1, r6, #0
10001422:	1c3b      	adds	r3, r7, #0
10001424:	f009 f987 	bl	1000a736 <I2C_MASTER_Transmit>
10001428:	2800      	cmp	r0, #0
1000142a:	d00c      	beq.n	10001446 <pal_i2c_write+0x46>
                                                             (bool)TRUE))
        {
            //If I2C Master fails to invoke the write operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
1000142c:	68eb      	ldr	r3, [r5, #12]
1000142e:	68a8      	ldr	r0, [r5, #8]
10001430:	1c31      	adds	r1, r6, #0
10001432:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
10001434:	4b06      	ldr	r3, [pc, #24]	; (10001450 <pal_i2c_write+0x50>)
10001436:	601c      	str	r4, [r3, #0]
    return PAL_STATUS_SUCCESS;
}

pal_status_t pal_i2c_write(pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
    pal_status_t status = PAL_STATUS_FAILURE;
10001438:	1c34      	adds	r4, r6, #0
1000143a:	e004      	b.n	10001446 <pal_i2c_write+0x46>
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
1000143c:	68eb      	ldr	r3, [r5, #12]
1000143e:	68a8      	ldr	r0, [r5, #8]
10001440:	2102      	movs	r1, #2
10001442:	4798      	blx	r3
            status = PAL_STATUS_SUCCESS;
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
10001444:	2402      	movs	r4, #2
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    return status;
}
10001446:	1c20      	adds	r0, r4, #0
10001448:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000144a:	46c0      	nop			; (mov r8, r8)
1000144c:	2000289c 	.word	0x2000289c
10001450:	200028a0 	.word	0x200028a0

10001454 <pal_i2c_read>:

pal_status_t pal_i2c_read(pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
10001454:	b5f0      	push	{r4, r5, r6, r7, lr}
10001456:	b085      	sub	sp, #20
10001458:	1c05      	adds	r5, r0, #0
1000145a:	1c0f      	adds	r7, r1, #0
1000145c:	1c16      	adds	r6, r2, #0
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
1000145e:	f7ff ff65 	bl	1000132c <pal_i2c_acquire.isra.2>
10001462:	1e04      	subs	r4, r0, #0
10001464:	d116      	bne.n	10001494 <pal_i2c_read+0x40>
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
10001466:	4b0f      	ldr	r3, [pc, #60]	; (100014a4 <pal_i2c_read+0x50>)

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
10001468:	6828      	ldr	r0, [r5, #0]
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
1000146a:	601d      	str	r5, [r3, #0]

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
1000146c:	9600      	str	r6, [sp, #0]
1000146e:	2601      	movs	r6, #1
                                                            (bool)TRUE,
                                                            (p_i2c_context->slave_address << 1),
10001470:	792a      	ldrb	r2, [r5, #4]
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
10001472:	9601      	str	r6, [sp, #4]
                                                            (bool)TRUE,
                                                            (p_i2c_context->slave_address << 1),
10001474:	0052      	lsls	r2, r2, #1
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
10001476:	9602      	str	r6, [sp, #8]
10001478:	1c31      	adds	r1, r6, #0
1000147a:	1c3b      	adds	r3, r7, #0
1000147c:	f009 fa8c 	bl	1000a998 <I2C_MASTER_Receive>
10001480:	2800      	cmp	r0, #0
10001482:	d00c      	beq.n	1000149e <pal_i2c_read+0x4a>
                                                            (bool)TRUE))
        {
            //If I2C Master fails to invoke the read operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
10001484:	68eb      	ldr	r3, [r5, #12]
10001486:	68a8      	ldr	r0, [r5, #8]
10001488:	1c31      	adds	r1, r6, #0
1000148a:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
1000148c:	4b06      	ldr	r3, [pc, #24]	; (100014a8 <pal_i2c_read+0x54>)
1000148e:	601c      	str	r4, [r3, #0]
    return status;
}

pal_status_t pal_i2c_read(pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
    pal_status_t status = PAL_STATUS_FAILURE;
10001490:	1c34      	adds	r4, r6, #0
10001492:	e004      	b.n	1000149e <pal_i2c_read+0x4a>
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
10001494:	68eb      	ldr	r3, [r5, #12]
10001496:	68a8      	ldr	r0, [r5, #8]
10001498:	2102      	movs	r1, #2
1000149a:	4798      	blx	r3
            status = PAL_STATUS_SUCCESS;
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
1000149c:	2402      	movs	r4, #2
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    return status;
}
1000149e:	1c20      	adds	r0, r4, #0
100014a0:	b005      	add	sp, #20
100014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100014a4:	2000289c 	.word	0x2000289c
100014a8:	200028a0 	.word	0x200028a0

100014ac <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
100014ac:	b570      	push	{r4, r5, r6, lr}
100014ae:	1c05      	adds	r5, r0, #0
100014b0:	1c0e      	adds	r6, r1, #0
    pal_status_t return_status = PAL_STATUS_FAILURE;
    optiga_lib_status_t event = PAL_I2C_EVENT_ERROR;

    //Acquire the I2C bus before setting the bitrate
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
100014b2:	f7ff ff3b 	bl	1000132c <pal_i2c_acquire.isra.2>
            event = PAL_I2C_EVENT_SUCCESS;
        }
    }
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
100014b6:	2402      	movs	r4, #2
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
    optiga_lib_status_t event = PAL_I2C_EVENT_ERROR;

    //Acquire the I2C bus before setting the bitrate
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
100014b8:	2800      	cmp	r0, #0
100014ba:	d110      	bne.n	100014de <pal_i2c_set_bitrate+0x32>
100014bc:	23c8      	movs	r3, #200	; 0xc8
        // set the I2C master to its maximum supported value.
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
100014be:	682a      	ldr	r2, [r5, #0]
100014c0:	1c31      	adds	r1, r6, #0
100014c2:	005b      	lsls	r3, r3, #1
100014c4:	429e      	cmp	r6, r3
100014c6:	d900      	bls.n	100014ca <pal_i2c_set_bitrate+0x1e>
100014c8:	1c19      	adds	r1, r3, #0
                                                            bitrate * 1000))
100014ca:	23fa      	movs	r3, #250	; 0xfa
100014cc:	b289      	uxth	r1, r1
100014ce:	009b      	lsls	r3, r3, #2
100014d0:	4359      	muls	r1, r3
        // set the I2C master to its maximum supported value.
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
100014d2:	6810      	ldr	r0, [r2, #0]
100014d4:	f008 f9a0 	bl	10009818 <XMC_I2C_CH_SetBaudrate>
100014d8:	1e44      	subs	r4, r0, #1
100014da:	41a0      	sbcs	r0, r4
        {
            return_status = PAL_STATUS_FAILURE;
        }
        else
        {
            return_status = PAL_STATUS_SUCCESS;
100014dc:	b284      	uxth	r4, r0
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
        event = PAL_I2C_EVENT_BUSY;
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
100014de:	68eb      	ldr	r3, [r5, #12]
100014e0:	2b00      	cmp	r3, #0
100014e2:	d002      	beq.n	100014ea <pal_i2c_set_bitrate+0x3e>
    {
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((callback_handler_t)(p_i2c_context->upper_layer_event_handler))(p_i2c_context->p_upper_layer_ctx , event);
100014e4:	68a8      	ldr	r0, [r5, #8]
100014e6:	1c21      	adds	r1, r4, #0
100014e8:	4798      	blx	r3
    }
    //Release I2C Bus if its acquired 
    if (PAL_STATUS_I2C_BUSY != return_status)
100014ea:	2c02      	cmp	r4, #2
100014ec:	d002      	beq.n	100014f4 <pal_i2c_set_bitrate+0x48>
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
100014ee:	2200      	movs	r2, #0
100014f0:	4b01      	ldr	r3, [pc, #4]	; (100014f8 <pal_i2c_set_bitrate+0x4c>)
100014f2:	601a      	str	r2, [r3, #0]
    if (PAL_STATUS_I2C_BUSY != return_status)
    {
        pal_i2c_release((void * )p_i2c_context);
    }
    return return_status;
}
100014f4:	1c20      	adds	r0, r4, #0
100014f6:	bd70      	pop	{r4, r5, r6, pc}
100014f8:	200028a0 	.word	0x200028a0

100014fc <cunit_console_uart_end_of_transmit_callback>:
        .logger_tx_flag = 1
};

void cunit_console_uart_end_of_transmit_callback(void)
{
    cunit_console.logger_tx_flag = 0;
100014fc:	2200      	movs	r2, #0
100014fe:	4b01      	ldr	r3, [pc, #4]	; (10001504 <cunit_console_uart_end_of_transmit_callback+0x8>)
10001500:	715a      	strb	r2, [r3, #5]
}
10001502:	4770      	bx	lr
10001504:	20001564 	.word	0x20001564

10001508 <cunit_console_uart_end_of_receive_callback>:

void cunit_console_uart_end_of_receive_callback(void)
{
    cunit_console.logger_rx_flag = 0;
10001508:	2200      	movs	r2, #0
1000150a:	4b01      	ldr	r3, [pc, #4]	; (10001510 <cunit_console_uart_end_of_receive_callback+0x8>)
1000150c:	711a      	strb	r2, [r3, #4]
}
1000150e:	4770      	bx	lr
10001510:	20001564 	.word	0x20001564

10001514 <pal_logger_init>:

/// @endcond


pal_status_t pal_logger_init(void * p_logger_context)
{
10001514:	b508      	push	{r3, lr}
    pal_logger_t * p_log_context = p_logger_context;
    DAVE_STATUS_t status;

    do
    {
    	status = (DAVE_STATUS_t)UART_Init(&cunit_logger);
10001516:	4802      	ldr	r0, [pc, #8]	; (10001520 <pal_logger_init+0xc>)
10001518:	f008 fcd8 	bl	10009ecc <UART_Init>
		return_status = PAL_STATUS_SUCCESS;
    }while(FALSE);

    return return_status;
}
1000151c:	2000      	movs	r0, #0
1000151e:	bd08      	pop	{r3, pc}
10001520:	20002664 	.word	0x20002664

10001524 <pal_logger_write>:
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
10001524:	6803      	ldr	r3, [r0, #0]
    return return_status;
}


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{
10001526:	b510      	push	{r4, lr}
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
10001528:	2b00      	cmp	r3, #0
1000152a:	d101      	bne.n	10001530 <pal_logger_write+0xc>
        {

            return_status = PAL_STATUS_SUCCESS;
1000152c:	2000      	movs	r0, #0
1000152e:	e00b      	b.n	10001548 <pal_logger_write+0x24>
10001530:	1c04      	adds	r4, r0, #0
        }
        else
        {
            p_log_context->logger_tx_flag = 1U;
10001532:	2001      	movs	r0, #1
10001534:	7160      	strb	r0, [r4, #5]

            return_status = (int32_t)UART_Transmit(p_log_context->logger_config_ptr, (uint8_t *)p_log_data, log_data_length);
10001536:	1c18      	adds	r0, r3, #0
10001538:	f008 fd04 	bl	10009f44 <UART_Transmit>
            if (return_status != PAL_STATUS_SUCCESS)
1000153c:	2800      	cmp	r0, #0
1000153e:	d103      	bne.n	10001548 <pal_logger_write+0x24>
            {
                break;
            }
            while (p_log_context->logger_tx_flag)
10001540:	7963      	ldrb	r3, [r4, #5]
10001542:	2b00      	cmp	r3, #0
10001544:	d1fc      	bne.n	10001540 <pal_logger_write+0x1c>
10001546:	e7f1      	b.n	1000152c <pal_logger_write+0x8>

            }
            return_status = PAL_STATUS_SUCCESS;
        }
    } while(0);
    return ((pal_status_t)return_status);
10001548:	b280      	uxth	r0, r0
}
1000154a:	bd10      	pop	{r4, pc}

1000154c <pal_logger_read>:
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
1000154c:	6803      	ldr	r3, [r0, #0]
    } while(0);
    return ((pal_status_t)return_status);
}

pal_status_t pal_logger_read(void * p_logger_context, uint8_t * p_log_data, uint32_t log_data_length)
{
1000154e:	b510      	push	{r4, lr}
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
10001550:	2b00      	cmp	r3, #0
10001552:	d101      	bne.n	10001558 <pal_logger_read+0xc>
        {

            return_status = PAL_STATUS_SUCCESS;
10001554:	2000      	movs	r0, #0
10001556:	e00b      	b.n	10001570 <pal_logger_read+0x24>
10001558:	1c04      	adds	r4, r0, #0
        }
        else
        {
            p_log_context->logger_rx_flag = 1U;
1000155a:	2001      	movs	r0, #1
1000155c:	7120      	strb	r0, [r4, #4]
            return_status = (int32_t)UART_Receive(p_log_context->logger_config_ptr, p_log_data, log_data_length);
1000155e:	1c18      	adds	r0, r3, #0
10001560:	f008 fd30 	bl	10009fc4 <UART_Receive>
            if (return_status != PAL_STATUS_SUCCESS)
10001564:	2800      	cmp	r0, #0
10001566:	d103      	bne.n	10001570 <pal_logger_read+0x24>
            {
                break;
            }
            while (p_log_context->logger_rx_flag)
10001568:	7923      	ldrb	r3, [r4, #4]
1000156a:	2b00      	cmp	r3, #0
1000156c:	d1fc      	bne.n	10001568 <pal_logger_read+0x1c>
1000156e:	e7f1      	b.n	10001554 <pal_logger_read+0x8>
            {
            }
            return_status = PAL_STATUS_SUCCESS;
        }
    } while(0);
    return ((pal_status_t)return_status);
10001570:	b280      	uxth	r0, r0
}
10001572:	bd10      	pop	{r4, pc}

10001574 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
10001574:	b508      	push	{r3, lr}
    pal_status_t return_status = PAL_STATUS_FAILURE;

    switch(datastore_id)
10001576:	2822      	cmp	r0, #34	; 0x22
10001578:	d008      	beq.n	1000158c <pal_os_datastore_write+0x18>
1000157a:	2833      	cmp	r0, #51	; 0x33
1000157c:	d00b      	beq.n	10001596 <pal_os_datastore_write+0x22>
1000157e:	2811      	cmp	r0, #17
10001580:	d10b      	bne.n	1000159a <pal_os_datastore_write+0x26>

pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
10001582:	3810      	subs	r0, #16
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of updating
            // the platform binding shared secret during the runtime into NVM.
            // In current implementation, platform binding shared secret is
            // stored in RAM.
            if (length <= sizeof(optiga_platform_binding_shared_secret))
10001584:	2a40      	cmp	r2, #64	; 0x40
10001586:	d809      	bhi.n	1000159c <pal_os_datastore_write+0x28>
            {
                memcpy(optiga_platform_binding_shared_secret, p_buffer, length);
10001588:	4805      	ldr	r0, [pc, #20]	; (100015a0 <pal_os_datastore_write+0x2c>)
1000158a:	e000      	b.n	1000158e <pal_os_datastore_write+0x1a>
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the manage context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            memcpy(data_store_buffer,p_buffer,length);
1000158c:	4805      	ldr	r0, [pc, #20]	; (100015a4 <pal_os_datastore_write+0x30>)
1000158e:	f00a fe4e 	bl	1000c22e <memcpy>
            return_status = PAL_STATUS_SUCCESS;
10001592:	2000      	movs	r0, #0
            break;
10001594:	e002      	b.n	1000159c <pal_os_datastore_write+0x28>
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the application context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            memcpy(data_store_app_context_buffer,p_buffer,length);
10001596:	4804      	ldr	r0, [pc, #16]	; (100015a8 <pal_os_datastore_write+0x34>)
10001598:	e7f9      	b.n	1000158e <pal_os_datastore_write+0x1a>

pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
1000159a:	2001      	movs	r0, #1
        {
            break;
        }
    }
    return return_status;
}
1000159c:	bd08      	pop	{r3, pc}
1000159e:	46c0      	nop			; (mov r8, r8)
100015a0:	200028a8 	.word	0x200028a8
100015a4:	2000300c 	.word	0x2000300c
100015a8:	2000304e 	.word	0x2000304e

100015ac <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
100015ac:	b538      	push	{r3, r4, r5, lr}
100015ae:	1c03      	adds	r3, r0, #0
100015b0:	1c14      	adds	r4, r2, #0
100015b2:	1c08      	adds	r0, r1, #0
    pal_status_t return_status = PAL_STATUS_FAILURE;

    switch(datastore_id)
100015b4:	2b22      	cmp	r3, #34	; 0x22
100015b6:	d00e      	beq.n	100015d6 <pal_os_datastore_read+0x2a>
100015b8:	2b33      	cmp	r3, #51	; 0x33
100015ba:	d012      	beq.n	100015e2 <pal_os_datastore_read+0x36>
100015bc:	2b11      	cmp	r3, #17
100015be:	d113      	bne.n	100015e8 <pal_os_datastore_read+0x3c>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a const text segement 
            // else updating the share secret content is good enough.

            if (*p_buffer_length >= sizeof(optiga_platform_binding_shared_secret))
100015c0:	8812      	ldrh	r2, [r2, #0]

pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
100015c2:	3b10      	subs	r3, #16
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a const text segement 
            // else updating the share secret content is good enough.

            if (*p_buffer_length >= sizeof(optiga_platform_binding_shared_secret))
100015c4:	2a3f      	cmp	r2, #63	; 0x3f
100015c6:	d910      	bls.n	100015ea <pal_os_datastore_read+0x3e>
            {
                memcpy(p_buffer,optiga_platform_binding_shared_secret, 
100015c8:	2540      	movs	r5, #64	; 0x40
100015ca:	4909      	ldr	r1, [pc, #36]	; (100015f0 <pal_os_datastore_read+0x44>)
100015cc:	1c2a      	adds	r2, r5, #0
100015ce:	f00a fe2e 	bl	1000c22e <memcpy>
                       sizeof(optiga_platform_binding_shared_secret));
                *p_buffer_length = sizeof(optiga_platform_binding_shared_secret);
100015d2:	8025      	strh	r5, [r4, #0]
100015d4:	e003      	b.n	100015de <pal_os_datastore_read+0x32>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            memcpy(p_buffer,data_store_buffer,*p_buffer_length);
100015d6:	8812      	ldrh	r2, [r2, #0]
100015d8:	4906      	ldr	r1, [pc, #24]	; (100015f4 <pal_os_datastore_read+0x48>)
100015da:	f00a fe28 	bl	1000c22e <memcpy>
            return_status = PAL_STATUS_SUCCESS;
100015de:	2300      	movs	r3, #0
            break;
100015e0:	e003      	b.n	100015ea <pal_os_datastore_read+0x3e>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            memcpy(p_buffer,data_store_app_context_buffer,*p_buffer_length);
100015e2:	8812      	ldrh	r2, [r2, #0]
100015e4:	4904      	ldr	r1, [pc, #16]	; (100015f8 <pal_os_datastore_read+0x4c>)
100015e6:	e7f8      	b.n	100015da <pal_os_datastore_read+0x2e>

pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
100015e8:	2301      	movs	r3, #1
            break;
        }
    }

    return return_status;
}
100015ea:	1c18      	adds	r0, r3, #0
100015ec:	bd38      	pop	{r3, r4, r5, pc}
100015ee:	46c0      	nop			; (mov r8, r8)
100015f0:	200028a8 	.word	0x200028a8
100015f4:	2000300c 	.word	0x2000300c
100015f8:	2000304e 	.word	0x2000304e

100015fc <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
    //lint --e{714} suppress "The API pal_os_event_stop is not exposed in header file but used as extern in 
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
100015fc:	2300      	movs	r3, #0
100015fe:	7003      	strb	r3, [r0, #0]
}
10001600:	4770      	bx	lr
	...

10001604 <IRQ7_Handler>:
    }
    return (&pal_os_event_0);
}

void pal_os_event_trigger_registered_callback(void)
{
10001604:	b510      	push	{r4, lr}
    register_callback callback;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    TIMER_ClearEvent(&scheduler_timer);
10001606:	4c08      	ldr	r4, [pc, #32]	; (10001628 <IRQ7_Handler+0x24>)
10001608:	1c20      	adds	r0, r4, #0
1000160a:	f008 fec4 	bl	1000a396 <TIMER_ClearEvent>
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_Stop(&scheduler_timer);
1000160e:	1c20      	adds	r0, r4, #0
10001610:	f008 feac 	bl	1000a36c <TIMER_Stop>
    TIMER_Clear(&scheduler_timer);
10001614:	1c20      	adds	r0, r4, #0
10001616:	f008 fec7 	bl	1000a3a8 <TIMER_Clear>

    if (pal_os_event_0.callback_registered)
1000161a:	4a04      	ldr	r2, [pc, #16]	; (1000162c <IRQ7_Handler+0x28>)
1000161c:	6853      	ldr	r3, [r2, #4]
1000161e:	2b00      	cmp	r3, #0
10001620:	d001      	beq.n	10001626 <IRQ7_Handler+0x22>
    {
        callback = pal_os_event_0.callback_registered;
        callback((void * )pal_os_event_0.callback_ctx);
10001622:	6890      	ldr	r0, [r2, #8]
10001624:	4798      	blx	r3
    }
}
10001626:	bd10      	pop	{r4, pc}
10001628:	20002698 	.word	0x20002698
1000162c:	200028e8 	.word	0x200028e8

10001630 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
10001630:	b510      	push	{r4, lr}
    p_pal_os_event->callback_registered = callback;
    p_pal_os_event->callback_ctx = callback_args;
10001632:	6082      	str	r2, [r0, #8]

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
10001634:	2264      	movs	r2, #100	; 0x64
10001636:	435a      	muls	r2, r3
10001638:	4c04      	ldr	r4, [pc, #16]	; (1000164c <pal_os_event_register_callback_oneshot+0x1c>)
void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
1000163a:	6041      	str	r1, [r0, #4]
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
1000163c:	1c11      	adds	r1, r2, #0
1000163e:	1c20      	adds	r0, r4, #0
10001640:	f008 fecc 	bl	1000a3dc <TIMER_SetTimeInterval>
    TIMER_Start(&scheduler_timer);
10001644:	1c20      	adds	r0, r4, #0
10001646:	f008 fe77 	bl	1000a338 <TIMER_Start>
}
1000164a:	bd10      	pop	{r4, pc}
1000164c:	20002698 	.word	0x20002698

10001650 <pal_os_event_start>:
/// @cond hidden

static pal_os_event_t pal_os_event_0 = {0};

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
10001650:	b508      	push	{r3, lr}
    if (FALSE == p_pal_os_event->is_event_triggered)
10001652:	7803      	ldrb	r3, [r0, #0]
10001654:	2b00      	cmp	r3, #0
10001656:	d105      	bne.n	10001664 <pal_os_event_start+0x14>
    {
        p_pal_os_event->is_event_triggered = TRUE;
10001658:	3301      	adds	r3, #1
1000165a:	7003      	strb	r3, [r0, #0]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
1000165c:	23fa      	movs	r3, #250	; 0xfa
1000165e:	009b      	lsls	r3, r3, #2
10001660:	f7ff ffe6 	bl	10001630 <pal_os_event_register_callback_oneshot>
    }
}
10001664:	bd08      	pop	{r3, pc}
	...

10001668 <pal_os_event_create>:
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
}

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
10001668:	b510      	push	{r4, lr}
1000166a:	4c06      	ldr	r4, [pc, #24]	; (10001684 <pal_os_event_create+0x1c>)
    if (( NULL != callback )&&( NULL != callback_args ))
1000166c:	2800      	cmp	r0, #0
1000166e:	d006      	beq.n	1000167e <pal_os_event_create+0x16>
10001670:	2900      	cmp	r1, #0
10001672:	d004      	beq.n	1000167e <pal_os_event_create+0x16>
10001674:	1c0a      	adds	r2, r1, #0
10001676:	1c01      	adds	r1, r0, #0
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
10001678:	1c20      	adds	r0, r4, #0
1000167a:	f7ff ffe9 	bl	10001650 <pal_os_event_start>
    }
    return (&pal_os_event_0);
}
1000167e:	1c20      	adds	r0, r4, #0
10001680:	bd10      	pop	{r4, pc}
10001682:	46c0      	nop			; (mov r8, r8)
10001684:	200028e8 	.word	0x200028e8

10001688 <pal_os_lock_enter_critical_section>:
    }
}

void pal_os_lock_enter_critical_section()
{
}
10001688:	4770      	bx	lr

1000168a <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
}
1000168a:	4770      	bx	lr

1000168c <IRQ0_Handler>:

/// @cond hidden
static volatile uint32_t g_tick_count = 0;

void delay_timer_isr(void)
{
1000168c:	b510      	push	{r4, lr}
    TIMER_ClearEvent(&tick_timer);
1000168e:	4c06      	ldr	r4, [pc, #24]	; (100016a8 <IRQ0_Handler+0x1c>)
10001690:	1c20      	adds	r0, r4, #0
10001692:	f008 fe80 	bl	1000a396 <TIMER_ClearEvent>
    (void)TIMER_Clear(&tick_timer);
10001696:	1c20      	adds	r0, r4, #0
10001698:	f008 fe86 	bl	1000a3a8 <TIMER_Clear>
    g_tick_count += 1U;
1000169c:	4a03      	ldr	r2, [pc, #12]	; (100016ac <IRQ0_Handler+0x20>)
1000169e:	6813      	ldr	r3, [r2, #0]
100016a0:	3301      	adds	r3, #1
100016a2:	6013      	str	r3, [r2, #0]
}
100016a4:	bd10      	pop	{r4, pc}
100016a6:	46c0      	nop			; (mov r8, r8)
100016a8:	20002670 	.word	0x20002670
100016ac:	200028f8 	.word	0x200028f8

100016b0 <pal_os_timer_get_time_in_microseconds>:
{
    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // This API is needed to support optiga cmd scheduler. 
    static uint32_t count = 0;
    // The implementation must ensure that every invocation of this API returns a unique value.
    return (count++);
100016b0:	4b02      	ldr	r3, [pc, #8]	; (100016bc <pal_os_timer_get_time_in_microseconds+0xc>)
100016b2:	6818      	ldr	r0, [r3, #0]
100016b4:	1c42      	adds	r2, r0, #1
100016b6:	601a      	str	r2, [r3, #0]
}
100016b8:	4770      	bx	lr
100016ba:	46c0      	nop			; (mov r8, r8)
100016bc:	200028fc 	.word	0x200028fc

100016c0 <pal_os_timer_get_time_in_milliseconds>:

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
100016c0:	4b01      	ldr	r3, [pc, #4]	; (100016c8 <pal_os_timer_get_time_in_milliseconds+0x8>)
100016c2:	6818      	ldr	r0, [r3, #0]
}
100016c4:	4770      	bx	lr
100016c6:	46c0      	nop			; (mov r8, r8)
100016c8:	200028f8 	.word	0x200028f8

100016cc <pal_os_timer_delay_in_milliseconds>:
    uint32_t current_time;
    uint32_t time_stamp_diff;

    start_time = pal_os_timer_get_time_in_milliseconds();
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
100016cc:	2300      	movs	r3, #0
    return (count++);
}

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
100016ce:	4a04      	ldr	r2, [pc, #16]	; (100016e0 <pal_os_timer_delay_in_milliseconds+0x14>)
100016d0:	6811      	ldr	r1, [r2, #0]
    uint32_t time_stamp_diff;

    start_time = pal_os_timer_get_time_in_milliseconds();
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
    while (time_stamp_diff <= (uint32_t)milliseconds)
100016d2:	4283      	cmp	r3, r0
100016d4:	d802      	bhi.n	100016dc <pal_os_timer_delay_in_milliseconds+0x10>
    return (count++);
}

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
100016d6:	6813      	ldr	r3, [r2, #0]
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
    while (time_stamp_diff <= (uint32_t)milliseconds)
    {
        current_time = pal_os_timer_get_time_in_milliseconds();
        time_stamp_diff = current_time - start_time;
100016d8:	1a5b      	subs	r3, r3, r1
100016da:	e7fa      	b.n	100016d2 <pal_os_timer_delay_in_milliseconds+0x6>
        if (start_time > current_time)
        {
            time_stamp_diff = (0xFFFFFFFF + (current_time - start_time)) + 0x01;
        }        
    }
}
100016dc:	4770      	bx	lr
100016de:	46c0      	nop			; (mov r8, r8)
100016e0:	200028f8 	.word	0x200028f8

100016e4 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
100016e4:	b510      	push	{r4, lr}
100016e6:	1c04      	adds	r4, r0, #0
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;

    p_optiga_util->handler(p_optiga_util->caller_context, event);
100016e8:	6980      	ldr	r0, [r0, #24]
100016ea:	69e3      	ldr	r3, [r4, #28]
100016ec:	4798      	blx	r3
    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
100016ee:	2300      	movs	r3, #0
100016f0:	8423      	strh	r3, [r4, #32]
}
100016f2:	bd10      	pop	{r4, pc}

100016f4 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
100016f4:	2800      	cmp	r0, #0
100016f6:	d002      	beq.n	100016fe <optiga_util_reset_protection_level+0xa>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
100016f8:	2300      	movs	r3, #0
100016fa:	3003      	adds	r0, #3
100016fc:	77c3      	strb	r3, [r0, #31]
    if (NULL != me)
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
    }
}
100016fe:	4770      	bx	lr

10001700 <optiga_util_write_data_wrapper>:
                                                             uint16_t optiga_oid,
                                                             uint8_t write_type,
                                                             uint16_t offset,
                                                             const uint8_t * p_buffer,
                                                             uint16_t length)
{
10001700:	b5f0      	push	{r4, r5, r6, r7, lr}
10001702:	b085      	sub	sp, #20
10001704:	9302      	str	r3, [sp, #8]
10001706:	ab0a      	add	r3, sp, #40	; 0x28
10001708:	cb40      	ldmia	r3!, {r6}
1000170a:	1c04      	adds	r4, r0, #0
1000170c:	881b      	ldrh	r3, [r3, #0]
1000170e:	9101      	str	r1, [sp, #4]
10001710:	1c15      	adds	r5, r2, #0
10001712:	9303      	str	r3, [sp, #12]
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
10001714:	2800      	cmp	r0, #0
10001716:	d039      	beq.n	1000178c <optiga_util_write_data_wrapper+0x8c>
10001718:	6947      	ldr	r7, [r0, #20]
1000171a:	2f00      	cmp	r7, #0
1000171c:	d036      	beq.n	1000178c <optiga_util_write_data_wrapper+0x8c>
1000171e:	2e00      	cmp	r6, #0
10001720:	d034      	beq.n	1000178c <optiga_util_write_data_wrapper+0x8c>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001722:	8c03      	ldrh	r3, [r0, #32]
10001724:	2b01      	cmp	r3, #1
10001726:	d033      	beq.n	10001790 <optiga_util_write_data_wrapper+0x90>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001728:	2301      	movs	r3, #1
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
1000172a:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
1000172c:	8403      	strh	r3, [r0, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
1000172e:	2214      	movs	r2, #20
10001730:	f00a fd86 	bl	1000c240 <memset>
10001734:	2300      	movs	r3, #0

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
10001736:	2d02      	cmp	r5, #2
10001738:	d103      	bne.n	10001742 <optiga_util_write_data_wrapper+0x42>
        {
            p_params->count = p_buffer[0];
1000173a:	7832      	ldrb	r2, [r6, #0]
            p_params->buffer = NULL;
1000173c:	60a3      	str	r3, [r4, #8]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
1000173e:	73a2      	strb	r2, [r4, #14]
10001740:	e001      	b.n	10001746 <optiga_util_write_data_wrapper+0x46>
            p_params->buffer = NULL;
        }
        else
        {
            p_params->count = 0;
10001742:	73a3      	strb	r3, [r4, #14]
            p_params->buffer = p_buffer;
10001744:	60a6      	str	r6, [r4, #8]
        }
        p_params->oid = optiga_oid;
10001746:	466b      	mov	r3, sp
10001748:	889b      	ldrh	r3, [r3, #4]
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
1000174a:	2600      	movs	r6, #0
        else
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
1000174c:	8023      	strh	r3, [r4, #0]
        p_params->offset = offset;
1000174e:	466b      	mov	r3, sp
10001750:	891b      	ldrh	r3, [r3, #8]
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;
10001752:	7365      	strb	r5, [r4, #13]
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
10001754:	8063      	strh	r3, [r4, #2]
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
10001756:	466b      	mov	r3, sp
10001758:	899b      	ldrh	r3, [r3, #12]
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
1000175a:	7326      	strb	r6, [r4, #12]
        p_params->size = length;
1000175c:	80a3      	strh	r3, [r4, #4]
        p_params->written_size = 0;
1000175e:	80e6      	strh	r6, [r4, #6]
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001760:	1ce3      	adds	r3, r4, #3
10001762:	7fd9      	ldrb	r1, [r3, #31]
10001764:	1c38      	adds	r0, r7, #0
10001766:	1c32      	adds	r2, r6, #0
10001768:	f004 fa36 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
1000176c:	1d23      	adds	r3, r4, #4
1000176e:	7fd9      	ldrb	r1, [r3, #31]
10001770:	6960      	ldr	r0, [r4, #20]
10001772:	2201      	movs	r2, #1
10001774:	f004 fa30 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, write_type, (optiga_set_data_object_params_t *)p_params);
10001778:	1c29      	adds	r1, r5, #0
1000177a:	6960      	ldr	r0, [r4, #20]
1000177c:	1c22      	adds	r2, r4, #0
1000177e:	f004 fae7 	bl	10005d50 <optiga_cmd_set_data_object>
10001782:	1e05      	subs	r5, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_value)
10001784:	42b5      	cmp	r5, r6
10001786:	d004      	beq.n	10001792 <optiga_util_write_data_wrapper+0x92>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001788:	8426      	strh	r6, [r4, #32]
1000178a:	e002      	b.n	10001792 <optiga_util_write_data_wrapper+0x92>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
1000178c:	4d04      	ldr	r5, [pc, #16]	; (100017a0 <optiga_util_write_data_wrapper+0xa0>)
1000178e:	e000      	b.n	10001792 <optiga_util_write_data_wrapper+0x92>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001790:	4d04      	ldr	r5, [pc, #16]	; (100017a4 <optiga_util_write_data_wrapper+0xa4>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001792:	1c20      	adds	r0, r4, #0
10001794:	f7ff ffae 	bl	100016f4 <optiga_util_reset_protection_level>

    return (return_value);
}
10001798:	1c28      	adds	r0, r5, #0
1000179a:	b005      	add	sp, #20
1000179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000179e:	46c0      	nop			; (mov r8, r8)
100017a0:	00000303 	.word	0x00000303
100017a4:	00000305 	.word	0x00000305

100017a8 <optiga_util_set_comms_params>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
    switch (parameter_type)
100017a8:	2901      	cmp	r1, #1
100017aa:	d003      	beq.n	100017b4 <optiga_util_set_comms_params+0xc>
100017ac:	2902      	cmp	r1, #2
100017ae:	d103      	bne.n	100017b8 <optiga_util_set_comms_params+0x10>
            me->protection_level = value;
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
100017b0:	3004      	adds	r0, #4
100017b2:	e000      	b.n	100017b6 <optiga_util_set_comms_params+0xe>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
100017b4:	3003      	adds	r0, #3
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
100017b6:	77c2      	strb	r2, [r0, #31]
        default:
        {
            break;
        }
    }
}
100017b8:	4770      	bx	lr
	...

100017bc <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
100017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_util_t * me = NULL;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
100017be:	2900      	cmp	r1, #0
100017c0:	d101      	bne.n	100017c6 <optiga_util_create+0xa>

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
    optiga_util_t * me = NULL;
100017c2:	2400      	movs	r4, #0
100017c4:	e01d      	b.n	10001802 <optiga_util_create+0x46>
100017c6:	1c0f      	adds	r7, r1, #0
100017c8:	1c05      	adds	r5, r0, #0
        if (NULL == handler)
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
100017ca:	2124      	movs	r1, #36	; 0x24
100017cc:	2001      	movs	r0, #1
100017ce:	1c16      	adds	r6, r2, #0
100017d0:	f00a fcdc 	bl	1000c18c <calloc>
100017d4:	1e04      	subs	r4, r0, #0
        if (NULL == me)
100017d6:	d0f4      	beq.n	100017c2 <optiga_util_create+0x6>
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
100017d8:	2200      	movs	r2, #0
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
100017da:	2101      	movs	r1, #1
100017dc:	1d03      	adds	r3, r0, #4
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
100017de:	8402      	strh	r2, [r0, #32]
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
100017e0:	61c7      	str	r7, [r0, #28]
        me->caller_context = caller_context;
100017e2:	6186      	str	r6, [r0, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
100017e4:	77d9      	strb	r1, [r3, #31]
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
100017e6:	1cc3      	adds	r3, r0, #3
100017e8:	77da      	strb	r2, [r3, #31]
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
100017ea:	1c28      	adds	r0, r5, #0
100017ec:	4906      	ldr	r1, [pc, #24]	; (10001808 <optiga_util_create+0x4c>)
100017ee:	1c22      	adds	r2, r4, #0
100017f0:	f004 f9fe 	bl	10005bf0 <optiga_cmd_create>
100017f4:	1e05      	subs	r5, r0, #0
100017f6:	6160      	str	r0, [r4, #20]
        if (NULL == me->my_cmd)
100017f8:	d103      	bne.n	10001802 <optiga_util_create+0x46>
        {
            pal_os_free(me);
100017fa:	1c20      	adds	r0, r4, #0
100017fc:	f00a fcfe 	bl	1000c1fc <free>
            me = NULL;
10001800:	1c2c      	adds	r4, r5, #0
        }
    } while (FALSE);

    return (me);
}
10001802:	1c20      	adds	r0, r4, #0
10001804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001806:	46c0      	nop			; (mov r8, r8)
10001808:	100016e5 	.word	0x100016e5

1000180c <optiga_util_destroy>:

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
1000180c:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
1000180e:	2800      	cmp	r0, #0
10001810:	d00b      	beq.n	1000182a <optiga_util_destroy+0x1e>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001812:	8c03      	ldrh	r3, [r0, #32]
10001814:	2b01      	cmp	r3, #1
10001816:	d00a      	beq.n	1000182e <optiga_util_destroy+0x22>
10001818:	1c04      	adds	r4, r0, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
1000181a:	6940      	ldr	r0, [r0, #20]
1000181c:	f004 fa42 	bl	10005ca4 <optiga_cmd_destroy>
10001820:	1c05      	adds	r5, r0, #0
        pal_os_free(me);
10001822:	1c20      	adds	r0, r4, #0
10001824:	f00a fcea 	bl	1000c1fc <free>
10001828:	e002      	b.n	10001830 <optiga_util_destroy+0x24>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
1000182a:	4d02      	ldr	r5, [pc, #8]	; (10001834 <optiga_util_destroy+0x28>)
1000182c:	e000      	b.n	10001830 <optiga_util_destroy+0x24>
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
1000182e:	4d02      	ldr	r5, [pc, #8]	; (10001838 <optiga_util_destroy+0x2c>)
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);
    } while (FALSE);
    return (return_value);
}
10001830:	1c28      	adds	r0, r5, #0
10001832:	bd38      	pop	{r3, r4, r5, pc}
10001834:	00000303 	.word	0x00000303
10001838:	00000305 	.word	0x00000305

1000183c <optiga_util_open_application>:

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
1000183c:	b570      	push	{r4, r5, r6, lr}
1000183e:	1c04      	adds	r4, r0, #0
10001840:	1c0d      	adds	r5, r1, #0

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
10001842:	2800      	cmp	r0, #0
10001844:	d024      	beq.n	10001890 <optiga_util_open_application+0x54>
10001846:	6940      	ldr	r0, [r0, #20]
10001848:	2800      	cmp	r0, #0
1000184a:	d021      	beq.n	10001890 <optiga_util_open_application+0x54>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
1000184c:	8c23      	ldrh	r3, [r4, #32]
1000184e:	2b01      	cmp	r3, #1
10001850:	d020      	beq.n	10001894 <optiga_util_open_application+0x58>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001852:	2601      	movs	r6, #1
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001854:	1ce3      	adds	r3, r4, #3
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001856:	8426      	strh	r6, [r4, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001858:	7fd9      	ldrb	r1, [r3, #31]
1000185a:	2200      	movs	r2, #0
1000185c:	f004 f9bc 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001860:	1d23      	adds	r3, r4, #4
10001862:	7fd9      	ldrb	r1, [r3, #31]
10001864:	6960      	ldr	r0, [r4, #20]
10001866:	1c32      	adds	r2, r6, #0
10001868:	f004 f9b6 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
1000186c:	6960      	ldr	r0, [r4, #20]
1000186e:	2133      	movs	r1, #51	; 0x33

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
10001870:	2d00      	cmp	r5, #0
10001872:	d000      	beq.n	10001876 <optiga_util_open_application+0x3a>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
10001874:	2111      	movs	r1, #17
10001876:	2202      	movs	r2, #2
10001878:	f004 f9ae 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
1000187c:	1c29      	adds	r1, r5, #0
1000187e:	6960      	ldr	r0, [r4, #20]
10001880:	2200      	movs	r2, #0
10001882:	f004 fa35 	bl	10005cf0 <optiga_cmd_open_application>
10001886:	1e05      	subs	r5, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_value)
10001888:	d005      	beq.n	10001896 <optiga_util_open_application+0x5a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
1000188a:	2300      	movs	r3, #0
1000188c:	8423      	strh	r3, [r4, #32]
1000188e:	e002      	b.n	10001896 <optiga_util_open_application+0x5a>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001890:	4d03      	ldr	r5, [pc, #12]	; (100018a0 <optiga_util_open_application+0x64>)
10001892:	e000      	b.n	10001896 <optiga_util_open_application+0x5a>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001894:	4d03      	ldr	r5, [pc, #12]	; (100018a4 <optiga_util_open_application+0x68>)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001896:	1c20      	adds	r0, r4, #0
10001898:	f7ff ff2c 	bl	100016f4 <optiga_util_reset_protection_level>

    return (return_value);
}
1000189c:	1c28      	adds	r0, r5, #0
1000189e:	bd70      	pop	{r4, r5, r6, pc}
100018a0:	00000303 	.word	0x00000303
100018a4:	00000305 	.word	0x00000305

100018a8 <optiga_util_close_application>:

optiga_lib_status_t optiga_util_close_application(optiga_util_t * me,
                                                  bool_t perform_hibernate)
{
100018a8:	b570      	push	{r4, r5, r6, lr}
100018aa:	1c04      	adds	r4, r0, #0
100018ac:	1c0d      	adds	r5, r1, #0
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
100018ae:	2800      	cmp	r0, #0
100018b0:	d024      	beq.n	100018fc <optiga_util_close_application+0x54>
100018b2:	6940      	ldr	r0, [r0, #20]
100018b4:	2800      	cmp	r0, #0
100018b6:	d021      	beq.n	100018fc <optiga_util_close_application+0x54>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
100018b8:	8c23      	ldrh	r3, [r4, #32]
100018ba:	2b01      	cmp	r3, #1
100018bc:	d020      	beq.n	10001900 <optiga_util_close_application+0x58>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100018be:	2601      	movs	r6, #1
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100018c0:	1ce3      	adds	r3, r4, #3
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100018c2:	8426      	strh	r6, [r4, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100018c4:	7fd9      	ldrb	r1, [r3, #31]
100018c6:	2200      	movs	r2, #0
100018c8:	f004 f986 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
100018cc:	1d23      	adds	r3, r4, #4
100018ce:	7fd9      	ldrb	r1, [r3, #31]
100018d0:	6960      	ldr	r0, [r4, #20]
100018d2:	1c32      	adds	r2, r6, #0
100018d4:	f004 f980 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_hibernate)
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
100018d8:	6960      	ldr	r0, [r4, #20]
100018da:	2133      	movs	r1, #51	; 0x33
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_hibernate)
100018dc:	2d00      	cmp	r5, #0
100018de:	d000      	beq.n	100018e2 <optiga_util_close_application+0x3a>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
        }
        else
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_SAVE);
100018e0:	2122      	movs	r1, #34	; 0x22
100018e2:	2202      	movs	r2, #2
100018e4:	f004 f978 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_close_application(me->my_cmd, perform_hibernate, NULL);
100018e8:	1c29      	adds	r1, r5, #0
100018ea:	6960      	ldr	r0, [r4, #20]
100018ec:	2200      	movs	r2, #0
100018ee:	f004 fa0f 	bl	10005d10 <optiga_cmd_close_application>
100018f2:	1e05      	subs	r5, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_value)
100018f4:	d005      	beq.n	10001902 <optiga_util_close_application+0x5a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
100018f6:	2300      	movs	r3, #0
100018f8:	8423      	strh	r3, [r4, #32]
100018fa:	e002      	b.n	10001902 <optiga_util_close_application+0x5a>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
100018fc:	4d03      	ldr	r5, [pc, #12]	; (1000190c <optiga_util_close_application+0x64>)
100018fe:	e000      	b.n	10001902 <optiga_util_close_application+0x5a>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001900:	4d03      	ldr	r5, [pc, #12]	; (10001910 <optiga_util_close_application+0x68>)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001902:	1c20      	adds	r0, r4, #0
10001904:	f7ff fef6 	bl	100016f4 <optiga_util_reset_protection_level>

    return (return_value);
}
10001908:	1c28      	adds	r0, r5, #0
1000190a:	bd70      	pop	{r4, r5, r6, pc}
1000190c:	00000303 	.word	0x00000303
10001910:	00000305 	.word	0x00000305

10001914 <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
10001914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001916:	1c04      	adds	r4, r0, #0
10001918:	1c0d      	adds	r5, r1, #0
1000191a:	9201      	str	r2, [sp, #4]
1000191c:	9300      	str	r3, [sp, #0]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
1000191e:	2800      	cmp	r0, #0
10001920:	d035      	beq.n	1000198e <optiga_util_read_data+0x7a>
10001922:	6947      	ldr	r7, [r0, #20]
10001924:	2f00      	cmp	r7, #0
10001926:	d032      	beq.n	1000198e <optiga_util_read_data+0x7a>
10001928:	2b00      	cmp	r3, #0
1000192a:	d030      	beq.n	1000198e <optiga_util_read_data+0x7a>
            (NULL == buffer) || (NULL == length))
1000192c:	9b08      	ldr	r3, [sp, #32]
1000192e:	2b00      	cmp	r3, #0
10001930:	d02d      	beq.n	1000198e <optiga_util_read_data+0x7a>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001932:	8c03      	ldrh	r3, [r0, #32]
10001934:	2b01      	cmp	r3, #1
10001936:	d02c      	beq.n	10001992 <optiga_util_read_data+0x7e>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001938:	2601      	movs	r6, #1
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
1000193a:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
1000193c:	8406      	strh	r6, [r0, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
1000193e:	2214      	movs	r2, #20
10001940:	f00a fc7e 	bl	1000c240 <memset>

        p_params->oid = optiga_oid;
        p_params->offset = offset;
10001944:	466b      	mov	r3, sp

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
10001946:	8025      	strh	r5, [r4, #0]
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
10001948:	2500      	movs	r5, #0
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = offset;
1000194a:	889b      	ldrh	r3, [r3, #4]
        // set option to read data
        p_params->data_or_metadata = 0;
1000194c:	72a5      	strb	r5, [r4, #10]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = offset;
1000194e:	8063      	strh	r3, [r4, #2]
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
10001950:	9b00      	ldr	r3, [sp, #0]
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001952:	1c38      	adds	r0, r7, #0

        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
10001954:	6123      	str	r3, [r4, #16]
        p_params->bytes_to_read = *length;
10001956:	9b08      	ldr	r3, [sp, #32]
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001958:	1c2a      	adds	r2, r5, #0
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
1000195a:	881b      	ldrh	r3, [r3, #0]
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
1000195c:	80e5      	strh	r5, [r4, #6]
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
1000195e:	80a3      	strh	r3, [r4, #4]
        p_params->ref_bytes_to_read = length;
10001960:	9b08      	ldr	r3, [sp, #32]
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;
10001962:	8125      	strh	r5, [r4, #8]
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
10001964:	60e3      	str	r3, [r4, #12]
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001966:	1ce3      	adds	r3, r4, #3
10001968:	7fd9      	ldrb	r1, [r3, #31]
1000196a:	f004 f935 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
1000196e:	1d23      	adds	r3, r4, #4
10001970:	7fd9      	ldrb	r1, [r3, #31]
10001972:	1c32      	adds	r2, r6, #0
10001974:	6960      	ldr	r0, [r4, #20]
10001976:	f004 f92f 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
1000197a:	7aa1      	ldrb	r1, [r4, #10]
1000197c:	6960      	ldr	r0, [r4, #20]
1000197e:	1c22      	adds	r2, r4, #0
10001980:	f004 f9d6 	bl	10005d30 <optiga_cmd_get_data_object>
10001984:	1e06      	subs	r6, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_value)
10001986:	42ae      	cmp	r6, r5
10001988:	d004      	beq.n	10001994 <optiga_util_read_data+0x80>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
1000198a:	8425      	strh	r5, [r4, #32]
1000198c:	e002      	b.n	10001994 <optiga_util_read_data+0x80>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
1000198e:	4e04      	ldr	r6, [pc, #16]	; (100019a0 <optiga_util_read_data+0x8c>)
10001990:	e000      	b.n	10001994 <optiga_util_read_data+0x80>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001992:	4e04      	ldr	r6, [pc, #16]	; (100019a4 <optiga_util_read_data+0x90>)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001994:	1c20      	adds	r0, r4, #0
10001996:	f7ff fead 	bl	100016f4 <optiga_util_reset_protection_level>

    return (return_value);
}
1000199a:	1c30      	adds	r0, r6, #0
1000199c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000199e:	46c0      	nop			; (mov r8, r8)
100019a0:	00000303 	.word	0x00000303
100019a4:	00000305 	.word	0x00000305

100019a8 <optiga_util_read_metadata>:

optiga_lib_status_t optiga_util_read_metadata(optiga_util_t * me,
                                              uint16_t optiga_oid,
                                              uint8_t * buffer,
                                              uint16_t * length)
{
100019a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100019aa:	1c04      	adds	r4, r0, #0
100019ac:	1c0d      	adds	r5, r1, #0
100019ae:	9201      	str	r2, [sp, #4]
100019b0:	1c1f      	adds	r7, r3, #0
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
100019b2:	2800      	cmp	r0, #0
100019b4:	d031      	beq.n	10001a1a <optiga_util_read_metadata+0x72>
100019b6:	6943      	ldr	r3, [r0, #20]
100019b8:	9300      	str	r3, [sp, #0]
100019ba:	2b00      	cmp	r3, #0
100019bc:	d02d      	beq.n	10001a1a <optiga_util_read_metadata+0x72>
100019be:	2a00      	cmp	r2, #0
100019c0:	d02b      	beq.n	10001a1a <optiga_util_read_metadata+0x72>
            (NULL == buffer) || (NULL == length))
100019c2:	2f00      	cmp	r7, #0
100019c4:	d029      	beq.n	10001a1a <optiga_util_read_metadata+0x72>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
100019c6:	8c03      	ldrh	r3, [r0, #32]
100019c8:	2b01      	cmp	r3, #1
100019ca:	d028      	beq.n	10001a1e <optiga_util_read_metadata+0x76>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100019cc:	2601      	movs	r6, #1
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
100019ce:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100019d0:	8406      	strh	r6, [r0, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
100019d2:	2214      	movs	r2, #20
100019d4:	f00a fc34 	bl	1000c240 <memset>

        p_params->oid = optiga_oid;
100019d8:	8025      	strh	r5, [r4, #0]
        p_params->offset = 0;
100019da:	2500      	movs	r5, #0
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
100019dc:	9b01      	ldr	r3, [sp, #4]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
100019de:	72a6      	strb	r6, [r4, #10]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
100019e0:	8065      	strh	r5, [r4, #2]
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
100019e2:	6123      	str	r3, [r4, #16]
        p_params->bytes_to_read = *length;
100019e4:	883b      	ldrh	r3, [r7, #0]
        p_params->ref_bytes_to_read = length;
100019e6:	60e7      	str	r7, [r4, #12]
        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
100019e8:	80a3      	strh	r3, [r4, #4]
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
100019ea:	80e5      	strh	r5, [r4, #6]
        p_params->last_read_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100019ec:	1ce3      	adds	r3, r4, #3
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;
100019ee:	8125      	strh	r5, [r4, #8]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100019f0:	7fd9      	ldrb	r1, [r3, #31]
100019f2:	9800      	ldr	r0, [sp, #0]
100019f4:	1c2a      	adds	r2, r5, #0
100019f6:	f004 f8ef 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
100019fa:	1d23      	adds	r3, r4, #4
100019fc:	7fd9      	ldrb	r1, [r3, #31]
100019fe:	1c32      	adds	r2, r6, #0
10001a00:	6960      	ldr	r0, [r4, #20]
10001a02:	f004 f8e9 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata,
10001a06:	7aa1      	ldrb	r1, [r4, #10]
10001a08:	6960      	ldr	r0, [r4, #20]
10001a0a:	1c22      	adds	r2, r4, #0
10001a0c:	f004 f990 	bl	10005d30 <optiga_cmd_get_data_object>
10001a10:	1e06      	subs	r6, r0, #0
                                                  (optiga_get_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10001a12:	42ae      	cmp	r6, r5
10001a14:	d004      	beq.n	10001a20 <optiga_util_read_metadata+0x78>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001a16:	8425      	strh	r5, [r4, #32]
10001a18:	e002      	b.n	10001a20 <optiga_util_read_metadata+0x78>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001a1a:	4e04      	ldr	r6, [pc, #16]	; (10001a2c <optiga_util_read_metadata+0x84>)
10001a1c:	e000      	b.n	10001a20 <optiga_util_read_metadata+0x78>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001a1e:	4e04      	ldr	r6, [pc, #16]	; (10001a30 <optiga_util_read_metadata+0x88>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001a20:	1c20      	adds	r0, r4, #0
10001a22:	f7ff fe67 	bl	100016f4 <optiga_util_reset_protection_level>

    return (return_value);
}
10001a26:	1c30      	adds	r0, r6, #0
10001a28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001a2a:	46c0      	nop			; (mov r8, r8)
10001a2c:	00000303 	.word	0x00000303
10001a30:	00000305 	.word	0x00000305

10001a34 <optiga_util_write_data>:
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
10001a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
10001a36:	2640      	movs	r6, #64	; 0x40
10001a38:	1c17      	adds	r7, r2, #0
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
10001a3a:	ac08      	add	r4, sp, #32
10001a3c:	cc20      	ldmia	r4!, {r5}
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
10001a3e:	43b7      	bics	r7, r6
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
10001a40:	8824      	ldrh	r4, [r4, #0]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
10001a42:	2f00      	cmp	r7, #0
10001a44:	d104      	bne.n	10001a50 <optiga_util_write_data+0x1c>
        {
            break;
        }
        return_value =  optiga_util_write_data_wrapper(me,
10001a46:	9500      	str	r5, [sp, #0]
10001a48:	9401      	str	r4, [sp, #4]
10001a4a:	f7ff fe59 	bl	10001700 <optiga_util_write_data_wrapper>
10001a4e:	e000      	b.n	10001a52 <optiga_util_write_data+0x1e>
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001a50:	4800      	ldr	r0, [pc, #0]	; (10001a54 <optiga_util_write_data+0x20>)
                                                       offset,
                                                       buffer,
                                                       length);
    } while (FALSE);
    return (return_value);
}
10001a52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001a54:	00000303 	.word	0x00000303

10001a58 <optiga_util_write_metadata>:

optiga_lib_status_t optiga_util_write_metadata(optiga_util_t * me,
                                               uint16_t optiga_oid,
                                               const uint8_t * buffer,
                                               uint8_t length)
{
10001a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001a5a:	1c04      	adds	r4, r0, #0
10001a5c:	1c0d      	adds	r5, r1, #0
10001a5e:	1c17      	adds	r7, r2, #0
10001a60:	9301      	str	r3, [sp, #4]
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
10001a62:	2800      	cmp	r0, #0
10001a64:	d02e      	beq.n	10001ac4 <optiga_util_write_metadata+0x6c>
10001a66:	6943      	ldr	r3, [r0, #20]
10001a68:	9300      	str	r3, [sp, #0]
10001a6a:	2b00      	cmp	r3, #0
10001a6c:	d02a      	beq.n	10001ac4 <optiga_util_write_metadata+0x6c>
10001a6e:	2a00      	cmp	r2, #0
10001a70:	d028      	beq.n	10001ac4 <optiga_util_write_metadata+0x6c>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001a72:	8c03      	ldrh	r3, [r0, #32]
10001a74:	2b01      	cmp	r3, #1
10001a76:	d027      	beq.n	10001ac8 <optiga_util_write_metadata+0x70>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001a78:	2601      	movs	r6, #1
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001a7a:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001a7c:	8406      	strh	r6, [r0, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001a7e:	2214      	movs	r2, #20
10001a80:	f00a fbde 	bl	1000c240 <memset>
        p_params->oid = optiga_oid;
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
        p_params->size = length;
10001a84:	466b      	mov	r3, sp

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
10001a86:	8025      	strh	r5, [r4, #0]
        p_params->offset = 0;
10001a88:	2500      	movs	r5, #0
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
        p_params->size = length;
10001a8a:	889b      	ldrh	r3, [r3, #4]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
10001a8c:	7326      	strb	r6, [r4, #12]
        p_params->buffer = buffer;
        p_params->size = length;
10001a8e:	80a3      	strh	r3, [r4, #4]
        p_params->write_type = 1;
10001a90:	7366      	strb	r6, [r4, #13]
        p_params->written_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001a92:	1ce3      	adds	r3, r4, #3
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
10001a94:	8065      	strh	r5, [r4, #2]
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
10001a96:	60a7      	str	r7, [r4, #8]
        p_params->size = length;
        p_params->write_type = 1;
        p_params->written_size = 0;
10001a98:	80e5      	strh	r5, [r4, #6]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001a9a:	7fd9      	ldrb	r1, [r3, #31]
10001a9c:	9800      	ldr	r0, [sp, #0]
10001a9e:	1c2a      	adds	r2, r5, #0
10001aa0:	f004 f89a 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001aa4:	1d23      	adds	r3, r4, #4
10001aa6:	7fd9      	ldrb	r1, [r3, #31]
10001aa8:	1c32      	adds	r2, r6, #0
10001aaa:	6960      	ldr	r0, [r4, #20]
10001aac:	f004 f894 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, p_params->write_type,
10001ab0:	7b61      	ldrb	r1, [r4, #13]
10001ab2:	6960      	ldr	r0, [r4, #20]
10001ab4:	1c22      	adds	r2, r4, #0
10001ab6:	f004 f94b 	bl	10005d50 <optiga_cmd_set_data_object>
10001aba:	1e06      	subs	r6, r0, #0
                                                  (optiga_set_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10001abc:	42ae      	cmp	r6, r5
10001abe:	d004      	beq.n	10001aca <optiga_util_write_metadata+0x72>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001ac0:	8425      	strh	r5, [r4, #32]
10001ac2:	e002      	b.n	10001aca <optiga_util_write_metadata+0x72>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001ac4:	4e03      	ldr	r6, [pc, #12]	; (10001ad4 <optiga_util_write_metadata+0x7c>)
10001ac6:	e000      	b.n	10001aca <optiga_util_write_metadata+0x72>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001ac8:	4e03      	ldr	r6, [pc, #12]	; (10001ad8 <optiga_util_write_metadata+0x80>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001aca:	1c20      	adds	r0, r4, #0
10001acc:	f7ff fe12 	bl	100016f4 <optiga_util_reset_protection_level>

    return (return_value);
}
10001ad0:	1c30      	adds	r0, r6, #0
10001ad2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001ad4:	00000303 	.word	0x00000303
10001ad8:	00000305 	.word	0x00000305

10001adc <optiga_util_protected_update_start>:

optiga_lib_status_t optiga_util_protected_update_start(optiga_util_t * me,
                                                       uint8_t manifest_version,
                                                       const uint8_t * manifest,
                                                       uint16_t manifest_length)
{
10001adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001ade:	1c04      	adds	r4, r0, #0
10001ae0:	9100      	str	r1, [sp, #0]
10001ae2:	1c15      	adds	r5, r2, #0
10001ae4:	9301      	str	r3, [sp, #4]
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == manifest))
10001ae6:	2800      	cmp	r0, #0
10001ae8:	d02c      	beq.n	10001b44 <optiga_util_protected_update_start+0x68>
10001aea:	6947      	ldr	r7, [r0, #20]
10001aec:	2f00      	cmp	r7, #0
10001aee:	d029      	beq.n	10001b44 <optiga_util_protected_update_start+0x68>
10001af0:	2a00      	cmp	r2, #0
10001af2:	d027      	beq.n	10001b44 <optiga_util_protected_update_start+0x68>
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_object_protected_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001af4:	8c03      	ldrh	r3, [r0, #32]
10001af6:	2b01      	cmp	r3, #1
10001af8:	d026      	beq.n	10001b48 <optiga_util_protected_update_start+0x6c>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001afa:	2601      	movs	r6, #1
        p_params = (optiga_set_object_protected_params_t *)&(me->params.optiga_set_object_protected_params);

        if(OPTIGA_SET_PROTECTED_UPDATE_START == set_obj_tag)
        {
            pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001afc:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001afe:	8406      	strh	r6, [r0, #32]
        p_params = (optiga_set_object_protected_params_t *)&(me->params.optiga_set_object_protected_params);

        if(OPTIGA_SET_PROTECTED_UPDATE_START == set_obj_tag)
        {
            pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001b00:	2214      	movs	r2, #20
10001b02:	f00a fb9d 	bl	1000c240 <memset>
            p_params->manifest_version = manifest_version;
10001b06:	466b      	mov	r3, sp
10001b08:	781b      	ldrb	r3, [r3, #0]
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001b0a:	1c38      	adds	r0, r7, #0
        p_params = (optiga_set_object_protected_params_t *)&(me->params.optiga_set_object_protected_params);

        if(OPTIGA_SET_PROTECTED_UPDATE_START == set_obj_tag)
        {
            pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
            p_params->manifest_version = manifest_version;
10001b0c:	71e3      	strb	r3, [r4, #7]
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001b0e:	1ce3      	adds	r3, r4, #3
10001b10:	7fd9      	ldrb	r1, [r3, #31]
10001b12:	2200      	movs	r2, #0
10001b14:	f004 f860 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001b18:	1d23      	adds	r3, r4, #4
10001b1a:	7fd9      	ldrb	r1, [r3, #31]
10001b1c:	1c32      	adds	r2, r6, #0
10001b1e:	6960      	ldr	r0, [r4, #20]
10001b20:	f004 f85a 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
10001b24:	466b      	mov	r3, sp
        p_params->set_obj_protected_tag = set_obj_tag;
10001b26:	2600      	movs	r6, #0
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
10001b28:	889b      	ldrh	r3, [r3, #4]
            p_params->manifest_version = manifest_version;
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
10001b2a:	6025      	str	r5, [r4, #0]
        p_params->p_protected_update_buffer_length = buffer_length;
10001b2c:	80a3      	strh	r3, [r4, #4]
        p_params->set_obj_protected_tag = set_obj_tag;
10001b2e:	71a6      	strb	r6, [r4, #6]

        return_value = optiga_cmd_set_object_protected(me->my_cmd, p_params->manifest_version,p_params);
10001b30:	79e1      	ldrb	r1, [r4, #7]
10001b32:	6960      	ldr	r0, [r4, #20]
10001b34:	1c22      	adds	r2, r4, #0
10001b36:	f004 f9ff 	bl	10005f38 <optiga_cmd_set_object_protected>
10001b3a:	1e05      	subs	r5, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_value)
10001b3c:	42b5      	cmp	r5, r6
10001b3e:	d004      	beq.n	10001b4a <optiga_util_protected_update_start+0x6e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001b40:	8426      	strh	r6, [r4, #32]
10001b42:	e002      	b.n	10001b4a <optiga_util_protected_update_start+0x6e>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == manifest))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001b44:	4d03      	ldr	r5, [pc, #12]	; (10001b54 <optiga_util_protected_update_start+0x78>)
10001b46:	e000      	b.n	10001b4a <optiga_util_protected_update_start+0x6e>

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001b48:	4d03      	ldr	r5, [pc, #12]	; (10001b58 <optiga_util_protected_update_start+0x7c>)
                                                    manifest,
                                                    manifest_length,
                                                    OPTIGA_SET_PROTECTED_UPDATE_START
                                                    );
    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001b4a:	1c20      	adds	r0, r4, #0
10001b4c:	f7ff fdd2 	bl	100016f4 <optiga_util_reset_protection_level>
    return (return_value);
}
10001b50:	1c28      	adds	r0, r5, #0
10001b52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001b54:	00000303 	.word	0x00000303
10001b58:	00000305 	.word	0x00000305

10001b5c <optiga_util_protected_update_continue>:

optiga_lib_status_t optiga_util_protected_update_continue(optiga_util_t * me,
                                                          const uint8_t * fragment,
                                                          uint16_t fragment_length)
{
10001b5c:	b510      	push	{r4, lr}
10001b5e:	1e04      	subs	r4, r0, #0
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == fragment))
10001b60:	d016      	beq.n	10001b90 <optiga_util_protected_update_continue+0x34>
10001b62:	6940      	ldr	r0, [r0, #20]
10001b64:	2800      	cmp	r0, #0
10001b66:	d013      	beq.n	10001b90 <optiga_util_protected_update_continue+0x34>
10001b68:	2900      	cmp	r1, #0
10001b6a:	d011      	beq.n	10001b90 <optiga_util_protected_update_continue+0x34>
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_object_protected_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001b6c:	8c23      	ldrh	r3, [r4, #32]
10001b6e:	2b01      	cmp	r3, #1
10001b70:	d010      	beq.n	10001b94 <optiga_util_protected_update_continue+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001b72:	2301      	movs	r3, #1
10001b74:	8423      	strh	r3, [r4, #32]
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
        p_params->set_obj_protected_tag = set_obj_tag;
10001b76:	18db      	adds	r3, r3, r3
            p_params->manifest_version = manifest_version;
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
10001b78:	6021      	str	r1, [r4, #0]
        p_params->p_protected_update_buffer_length = buffer_length;
10001b7a:	80a2      	strh	r2, [r4, #4]
        p_params->set_obj_protected_tag = set_obj_tag;
10001b7c:	71a3      	strb	r3, [r4, #6]

        return_value = optiga_cmd_set_object_protected(me->my_cmd, p_params->manifest_version,p_params);
10001b7e:	79e1      	ldrb	r1, [r4, #7]
10001b80:	1c22      	adds	r2, r4, #0
10001b82:	f004 f9d9 	bl	10005f38 <optiga_cmd_set_object_protected>
        if (OPTIGA_LIB_SUCCESS != return_value)
10001b86:	2800      	cmp	r0, #0
10001b88:	d005      	beq.n	10001b96 <optiga_util_protected_update_continue+0x3a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001b8a:	2300      	movs	r3, #0
10001b8c:	8423      	strh	r3, [r4, #32]
10001b8e:	e002      	b.n	10001b96 <optiga_util_protected_update_continue+0x3a>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == fragment))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001b90:	4801      	ldr	r0, [pc, #4]	; (10001b98 <optiga_util_protected_update_continue+0x3c>)
10001b92:	e000      	b.n	10001b96 <optiga_util_protected_update_continue+0x3a>

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001b94:	4801      	ldr	r0, [pc, #4]	; (10001b9c <optiga_util_protected_update_continue+0x40>)
                                                    fragment,
                                                    fragment_length,
                                                    OPTIGA_SET_PROTECTED_UPDATE_CONTINUE);
    } while (FALSE);
    return (return_value);
}
10001b96:	bd10      	pop	{r4, pc}
10001b98:	00000303 	.word	0x00000303
10001b9c:	00000305 	.word	0x00000305

10001ba0 <optiga_util_protected_update_final>:

optiga_lib_status_t optiga_util_protected_update_final(optiga_util_t * me,
                                                       const uint8_t * fragment,
                                                       uint16_t fragment_length)
{
10001ba0:	b510      	push	{r4, lr}
10001ba2:	1e04      	subs	r4, r0, #0
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
10001ba4:	d013      	beq.n	10001bce <optiga_util_protected_update_final+0x2e>
10001ba6:	6940      	ldr	r0, [r0, #20]
10001ba8:	2800      	cmp	r0, #0
10001baa:	d010      	beq.n	10001bce <optiga_util_protected_update_final+0x2e>
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_object_protected_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001bac:	8c23      	ldrh	r3, [r4, #32]
10001bae:	2b01      	cmp	r3, #1
10001bb0:	d00f      	beq.n	10001bd2 <optiga_util_protected_update_final+0x32>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001bb2:	2301      	movs	r3, #1
            p_params->manifest_version = manifest_version;
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
10001bb4:	6021      	str	r1, [r4, #0]
        p_params->p_protected_update_buffer_length = buffer_length;
10001bb6:	80a2      	strh	r2, [r4, #4]
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001bb8:	8423      	strh	r3, [r4, #32]
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
        p_params->set_obj_protected_tag = set_obj_tag;
10001bba:	71a3      	strb	r3, [r4, #6]

        return_value = optiga_cmd_set_object_protected(me->my_cmd, p_params->manifest_version,p_params);
10001bbc:	79e1      	ldrb	r1, [r4, #7]
10001bbe:	1c22      	adds	r2, r4, #0
10001bc0:	f004 f9ba 	bl	10005f38 <optiga_cmd_set_object_protected>
        if (OPTIGA_LIB_SUCCESS != return_value)
10001bc4:	2800      	cmp	r0, #0
10001bc6:	d005      	beq.n	10001bd4 <optiga_util_protected_update_final+0x34>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001bc8:	2300      	movs	r3, #0
10001bca:	8423      	strh	r3, [r4, #32]
10001bcc:	e002      	b.n	10001bd4 <optiga_util_protected_update_final+0x34>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001bce:	4802      	ldr	r0, [pc, #8]	; (10001bd8 <optiga_util_protected_update_final+0x38>)
10001bd0:	e000      	b.n	10001bd4 <optiga_util_protected_update_final+0x34>

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001bd2:	4802      	ldr	r0, [pc, #8]	; (10001bdc <optiga_util_protected_update_final+0x3c>)
                                                    fragment,
                                                    fragment_length,
                                                    OPTIGA_SET_PROTECTED_UPDATE_FINAL);
    } while (FALSE);
    return (return_value);
}
10001bd4:	bd10      	pop	{r4, pc}
10001bd6:	46c0      	nop			; (mov r8, r8)
10001bd8:	00000303 	.word	0x00000303
10001bdc:	00000305 	.word	0x00000305

10001be0 <optiga_util_update_count>:

optiga_lib_status_t optiga_util_update_count(optiga_util_t * me,
                                             uint16_t optiga_counter_oid,
                                             uint8_t count)
{
10001be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const uint8_t count_value[] = {count};
10001be2:	ab03      	add	r3, sp, #12
10001be4:	701a      	strb	r2, [r3, #0]
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    return (optiga_util_write_data_wrapper(me,
10001be6:	9300      	str	r3, [sp, #0]
10001be8:	2301      	movs	r3, #1
10001bea:	2202      	movs	r2, #2
10001bec:	9301      	str	r3, [sp, #4]
10001bee:	2300      	movs	r3, #0
10001bf0:	f7ff fd86 	bl	10001700 <optiga_util_write_data_wrapper>
                                          optiga_counter_oid,
                                          OPTIGA_UTIL_COUNT_DATA_OBJECT,
                                          0x0000,
                                          count_value,
                                          sizeof(count_value)));
}
10001bf4:	b005      	add	sp, #20
10001bf6:	bd00      	pop	{pc}

10001bf8 <optiga_crypt_generic_event_handler>:
/// Minimum optional data length
#define OPTIGA_CRYTP_MINIMUM_OPTIONAL_DATA_LENGTH                   (0x28)

_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
10001bf8:	b510      	push	{r4, lr}
10001bfa:	1c04      	adds	r4, r0, #0
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;

    me->handler(me->caller_context, event);
10001bfc:	6a40      	ldr	r0, [r0, #36]	; 0x24
10001bfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10001c00:	4798      	blx	r3
    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001c02:	2300      	movs	r3, #0
10001c04:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
10001c06:	bd10      	pop	{r4, pc}

10001c08 <optiga_crypt_reset_protection_level>:

_STATIC_H void optiga_crypt_reset_protection_level(optiga_crypt_t * me)
{
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
10001c08:	2800      	cmp	r0, #0
10001c0a:	d002      	beq.n	10001c12 <optiga_crypt_reset_protection_level+0xa>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
10001c0c:	2300      	movs	r3, #0
10001c0e:	302e      	adds	r0, #46	; 0x2e
10001c10:	7003      	strb	r3, [r0, #0]
    if (NULL != me)
#endif
    {
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
    }
}
10001c12:	4770      	bx	lr

10001c14 <optiga_crypt_get_random>:
                                                      uint8_t cmd_param,
                                                      uint8_t * p_random_data,
                                                      uint16_t random_data_length,
                                                      const uint8_t * p_optional_data,
                                                      uint16_t optional_data_length)
{
10001c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001c16:	9300      	str	r3, [sp, #0]
10001c18:	ab08      	add	r3, sp, #32
10001c1a:	1c17      	adds	r7, r2, #0
10001c1c:	cb04      	ldmia	r3!, {r2}
10001c1e:	1c04      	adds	r4, r0, #0
10001c20:	881b      	ldrh	r3, [r3, #0]
10001c22:	1c0e      	adds	r6, r1, #0
10001c24:	9301      	str	r3, [sp, #4]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_get_random_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001c26:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10001c28:	2b01      	cmp	r3, #1
10001c2a:	d026      	beq.n	10001c7a <optiga_crypt_get_random+0x66>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001c2c:	2501      	movs	r5, #1
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001c2e:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001c30:	8585      	strh	r5, [r0, #44]	; 0x2c
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001c32:	2220      	movs	r2, #32
10001c34:	f00a fb04 	bl	1000c240 <memset>

        p_params->optional_data = p_optional_data;
10001c38:	9b08      	ldr	r3, [sp, #32]
        p_params->optional_data_length = optional_data_length;
        p_params->random_data = p_random_data;
10001c3a:	6067      	str	r7, [r4, #4]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
10001c3c:	60a3      	str	r3, [r4, #8]
        p_params->optional_data_length = optional_data_length;
10001c3e:	466b      	mov	r3, sp
10001c40:	889b      	ldrh	r3, [r3, #4]
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001c42:	6a20      	ldr	r0, [r4, #32]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
        p_params->optional_data_length = optional_data_length;
10001c44:	8063      	strh	r3, [r4, #2]
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
10001c46:	466b      	mov	r3, sp
10001c48:	881b      	ldrh	r3, [r3, #0]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001c4a:	2200      	movs	r2, #0
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
        p_params->optional_data_length = optional_data_length;
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
10001c4c:	8023      	strh	r3, [r4, #0]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001c4e:	1c23      	adds	r3, r4, #0
10001c50:	332e      	adds	r3, #46	; 0x2e
10001c52:	7819      	ldrb	r1, [r3, #0]
10001c54:	f003 ffc0 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001c58:	1c23      	adds	r3, r4, #0
10001c5a:	332f      	adds	r3, #47	; 0x2f
10001c5c:	7819      	ldrb	r1, [r3, #0]
10001c5e:	1c2a      	adds	r2, r5, #0
10001c60:	6a20      	ldr	r0, [r4, #32]
10001c62:	f003 ffb9 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_random(me->my_cmd,
10001c66:	6a20      	ldr	r0, [r4, #32]
10001c68:	1c31      	adds	r1, r6, #0
10001c6a:	1c22      	adds	r2, r4, #0
10001c6c:	f004 f880 	bl	10005d70 <optiga_cmd_get_random>
10001c70:	1e05      	subs	r5, r0, #0
                                             (uint8_t)cmd_param,
                                              (optiga_get_random_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10001c72:	d003      	beq.n	10001c7c <optiga_crypt_get_random+0x68>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001c74:	2300      	movs	r3, #0
10001c76:	85a3      	strh	r3, [r4, #44]	; 0x2c
10001c78:	e000      	b.n	10001c7c <optiga_crypt_get_random+0x68>
    optiga_get_random_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10001c7a:	4d03      	ldr	r5, [pc, #12]	; (10001c88 <optiga_crypt_get_random+0x74>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10001c7c:	1c20      	adds	r0, r4, #0
10001c7e:	f7ff ffc3 	bl	10001c08 <optiga_crypt_reset_protection_level>

    return (return_value);
}
10001c82:	1c28      	adds	r0, r5, #0
10001c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001c86:	46c0      	nop			; (mov r8, r8)
10001c88:	00000405 	.word	0x00000405

10001c8c <optiga_crypt_generate_keypair>:
                                                            uint8_t key_usage,
                                                            bool_t export_private_key,
                                                            void * p_private_key,
                                                            uint8_t * p_public_key,
                                                            uint16_t * p_public_key_length)
{
10001c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001c8e:	1c04      	adds	r4, r0, #0
10001c90:	9100      	str	r1, [sp, #0]
10001c92:	9201      	str	r2, [sp, #4]
10001c94:	1c1d      	adds	r5, r3, #0
    optiga_gen_keypair_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
10001c96:	2800      	cmp	r0, #0
10001c98:	d03a      	beq.n	10001d10 <optiga_crypt_generate_keypair+0x84>
10001c9a:	6a07      	ldr	r7, [r0, #32]
10001c9c:	2f00      	cmp	r7, #0
10001c9e:	d037      	beq.n	10001d10 <optiga_crypt_generate_keypair+0x84>
10001ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
10001ca2:	2b00      	cmp	r3, #0
10001ca4:	d034      	beq.n	10001d10 <optiga_crypt_generate_keypair+0x84>
            (NULL == p_public_key) || (NULL == p_private_key) || (NULL == p_public_key_length))
10001ca6:	9b08      	ldr	r3, [sp, #32]
10001ca8:	2b00      	cmp	r3, #0
10001caa:	d031      	beq.n	10001d10 <optiga_crypt_generate_keypair+0x84>
10001cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001cae:	2b00      	cmp	r3, #0
10001cb0:	d02e      	beq.n	10001d10 <optiga_crypt_generate_keypair+0x84>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001cb2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10001cb4:	2b01      	cmp	r3, #1
10001cb6:	d02d      	beq.n	10001d14 <optiga_crypt_generate_keypair+0x88>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001cb8:	2601      	movs	r6, #1
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001cba:	2100      	movs	r1, #0
10001cbc:	2220      	movs	r2, #32
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001cbe:	8586      	strh	r6, [r0, #44]	; 0x2c
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001cc0:	f00a fabe 	bl	1000c240 <memset>

        p_params->key_usage = key_usage;
10001cc4:	466b      	mov	r3, sp
10001cc6:	791b      	ldrb	r3, [r3, #4]
        p_params->export_private_key = export_private_key;
10001cc8:	7065      	strb	r5, [r4, #1]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->key_usage = key_usage;
10001cca:	7023      	strb	r3, [r4, #0]
        p_params->export_private_key = export_private_key;
        p_params->public_key_length = p_public_key_length;
10001ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001cce:	1c38      	adds	r0, r7, #0
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->key_usage = key_usage;
        p_params->export_private_key = export_private_key;
        p_params->public_key_length = p_public_key_length;
10001cd0:	6123      	str	r3, [r4, #16]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001cd2:	1c23      	adds	r3, r4, #0
10001cd4:	332e      	adds	r3, #46	; 0x2e
10001cd6:	7819      	ldrb	r1, [r3, #0]
10001cd8:	2200      	movs	r2, #0
10001cda:	f003 ff7d 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001cde:	1c23      	adds	r3, r4, #0
10001ce0:	332f      	adds	r3, #47	; 0x2f
10001ce2:	7819      	ldrb	r1, [r3, #0]
10001ce4:	6a20      	ldr	r0, [r4, #32]
10001ce6:	1c32      	adds	r2, r6, #0
10001ce8:	f003 ff76 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>

        if (export_private_key)
        {
            p_params->private_key = (uint8_t *)p_private_key;
10001cec:	9b08      	ldr	r3, [sp, #32]
        p_params->export_private_key = export_private_key;
        p_params->public_key_length = p_public_key_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

        if (export_private_key)
10001cee:	2d00      	cmp	r5, #0
10001cf0:	d001      	beq.n	10001cf6 <optiga_crypt_generate_keypair+0x6a>
        {
            p_params->private_key = (uint8_t *)p_private_key;
10001cf2:	6063      	str	r3, [r4, #4]
10001cf4:	e001      	b.n	10001cfa <optiga_crypt_generate_keypair+0x6e>
        }
        else
        {
            p_params->private_key_oid = (optiga_key_id_t)(* ((uint16_t* )p_private_key));
10001cf6:	881b      	ldrh	r3, [r3, #0]
10001cf8:	8063      	strh	r3, [r4, #2]
        }

        p_params->public_key = p_public_key;
10001cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
        p_params->public_key_length = p_public_key_length;

        return_value = optiga_cmd_gen_keypair(me->my_cmd,
10001cfc:	6a20      	ldr	r0, [r4, #32]
        else
        {
            p_params->private_key_oid = (optiga_key_id_t)(* ((uint16_t* )p_private_key));
        }

        p_params->public_key = p_public_key;
10001cfe:	60e3      	str	r3, [r4, #12]
        p_params->public_key_length = p_public_key_length;
10001d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28

        return_value = optiga_cmd_gen_keypair(me->my_cmd,
10001d02:	9900      	ldr	r1, [sp, #0]
        {
            p_params->private_key_oid = (optiga_key_id_t)(* ((uint16_t* )p_private_key));
        }

        p_params->public_key = p_public_key;
        p_params->public_key_length = p_public_key_length;
10001d04:	6123      	str	r3, [r4, #16]

        return_value = optiga_cmd_gen_keypair(me->my_cmd,
10001d06:	1c22      	adds	r2, r4, #0
10001d08:	f004 f8b4 	bl	10005e74 <optiga_cmd_gen_keypair>
10001d0c:	1c05      	adds	r5, r0, #0
10001d0e:	e002      	b.n	10001d16 <optiga_crypt_generate_keypair+0x8a>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == p_public_key) || (NULL == p_private_key) || (NULL == p_public_key_length))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10001d10:	4d03      	ldr	r5, [pc, #12]	; (10001d20 <optiga_crypt_generate_keypair+0x94>)
10001d12:	e000      	b.n	10001d16 <optiga_crypt_generate_keypair+0x8a>
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10001d14:	4d03      	ldr	r5, [pc, #12]	; (10001d24 <optiga_crypt_generate_keypair+0x98>)

        return_value = optiga_cmd_gen_keypair(me->my_cmd,
                                              (uint8_t )cmd_param,
                                              (optiga_gen_keypair_params_t *)p_params);
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10001d16:	1c20      	adds	r0, r4, #0
10001d18:	f7ff ff76 	bl	10001c08 <optiga_crypt_reset_protection_level>

    return (return_value);
}
10001d1c:	1c28      	adds	r0, r5, #0
10001d1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001d20:	00000403 	.word	0x00000403
10001d24:	00000405 	.word	0x00000405

10001d28 <optiga_crypt_sign.isra.0>:
#endif // (OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED) || (OPTIGA_CRYPT_RSA_GENERATE_KEYPAIR_ENABLED)

#if defined (OPTIGA_CRYPT_ECDSA_SIGN_ENABLED) || defined (OPTIGA_CRYPT_RSA_SIGN_ENABLED)
//lint --e{715} suppress "The salt_length argument is kept for future use"
_STATIC_H optiga_lib_status_t optiga_crypt_sign(optiga_crypt_t * me,
10001d28:	b5f0      	push	{r4, r5, r6, r7, lr}
10001d2a:	b085      	sub	sp, #20
10001d2c:	9302      	str	r3, [sp, #8]
10001d2e:	ab0a      	add	r3, sp, #40	; 0x28
10001d30:	881b      	ldrh	r3, [r3, #0]
10001d32:	1c04      	adds	r4, r0, #0
10001d34:	9101      	str	r1, [sp, #4]
10001d36:	1c17      	adds	r7, r2, #0
10001d38:	9303      	str	r3, [sp, #12]
    optiga_calc_sign_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_digest) ||
10001d3a:	2800      	cmp	r0, #0
10001d3c:	d036      	beq.n	10001dac <optiga_crypt_sign.isra.0+0x84>
10001d3e:	6a05      	ldr	r5, [r0, #32]
10001d40:	2d00      	cmp	r5, #0
10001d42:	d033      	beq.n	10001dac <optiga_crypt_sign.isra.0+0x84>
10001d44:	2a00      	cmp	r2, #0
10001d46:	d031      	beq.n	10001dac <optiga_crypt_sign.isra.0+0x84>
10001d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10001d4a:	2b00      	cmp	r3, #0
10001d4c:	d02e      	beq.n	10001dac <optiga_crypt_sign.isra.0+0x84>
            (NULL == p_signature) || (NULL == p_signature_length))
10001d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10001d50:	2b00      	cmp	r3, #0
10001d52:	d02b      	beq.n	10001dac <optiga_crypt_sign.isra.0+0x84>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001d54:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10001d56:	2b01      	cmp	r3, #1
10001d58:	d02a      	beq.n	10001db0 <optiga_crypt_sign.isra.0+0x88>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001d5a:	2601      	movs	r6, #1

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001d5c:	2100      	movs	r1, #0
10001d5e:	2220      	movs	r2, #32
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001d60:	8586      	strh	r6, [r0, #44]	; 0x2c

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001d62:	f00a fa6d 	bl	1000c240 <memset>

        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
10001d66:	466b      	mov	r3, sp
10001d68:	7a1b      	ldrb	r3, [r3, #8]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->p_digest = p_digest;
10001d6a:	6027      	str	r7, [r4, #0]
        p_params->digest_length = digest_length;
10001d6c:	73a3      	strb	r3, [r4, #14]
        p_params->private_key_oid = private_key;
10001d6e:	466b      	mov	r3, sp
10001d70:	899b      	ldrh	r3, [r3, #12]
        p_params->p_signature = p_signature;
        p_params->p_signature_length = p_signature_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001d72:	1c28      	adds	r0, r5, #0
        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
        p_params->private_key_oid = private_key;
10001d74:	81a3      	strh	r3, [r4, #12]
        p_params->p_signature = p_signature;
10001d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        p_params->p_signature_length = p_signature_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001d78:	2200      	movs	r2, #0
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
        p_params->private_key_oid = private_key;
        p_params->p_signature = p_signature;
10001d7a:	6063      	str	r3, [r4, #4]
        p_params->p_signature_length = p_signature_length;
10001d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10001d7e:	60a3      	str	r3, [r4, #8]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001d80:	1c23      	adds	r3, r4, #0
10001d82:	332e      	adds	r3, #46	; 0x2e
10001d84:	7819      	ldrb	r1, [r3, #0]
10001d86:	f003 ff27 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001d8a:	1c23      	adds	r3, r4, #0
10001d8c:	332f      	adds	r3, #47	; 0x2f
10001d8e:	7819      	ldrb	r1, [r3, #0]
10001d90:	6a20      	ldr	r0, [r4, #32]
10001d92:	1c32      	adds	r2, r6, #0
10001d94:	f003 ff20 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_calc_sign(me->my_cmd,
10001d98:	6a20      	ldr	r0, [r4, #32]
10001d9a:	9901      	ldr	r1, [sp, #4]
10001d9c:	1c22      	adds	r2, r4, #0
10001d9e:	f003 fffb 	bl	10005d98 <optiga_cmd_calc_sign>
10001da2:	1e05      	subs	r5, r0, #0
                                            signature_scheme,
                                            (optiga_calc_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10001da4:	d005      	beq.n	10001db2 <optiga_crypt_sign.isra.0+0x8a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001da6:	2300      	movs	r3, #0
10001da8:	85a3      	strh	r3, [r4, #44]	; 0x2c
10001daa:	e002      	b.n	10001db2 <optiga_crypt_sign.isra.0+0x8a>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_digest) ||
            (NULL == p_signature) || (NULL == p_signature_length))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10001dac:	4d04      	ldr	r5, [pc, #16]	; (10001dc0 <optiga_crypt_sign.isra.0+0x98>)
10001dae:	e000      	b.n	10001db2 <optiga_crypt_sign.isra.0+0x8a>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10001db0:	4d04      	ldr	r5, [pc, #16]	; (10001dc4 <optiga_crypt_sign.isra.0+0x9c>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10001db2:	1c20      	adds	r0, r4, #0
10001db4:	f7ff ff28 	bl	10001c08 <optiga_crypt_reset_protection_level>

    return (return_value);
}
10001db8:	1c28      	adds	r0, r5, #0
10001dba:	b005      	add	sp, #20
10001dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001dbe:	46c0      	nop			; (mov r8, r8)
10001dc0:	00000403 	.word	0x00000403
10001dc4:	00000405 	.word	0x00000405

10001dc8 <optiga_crypt_verify.isra.1>:
#endif // (OPTIGA_CRYPT_ECDSA_SIGN_ENABLED) || (OPTIGA_CRYPT_RSA_SIGN_ENABLED)

#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
//lint --e{715} suppress "The salt_length argument is kept for future use"
_STATIC_H optiga_lib_status_t optiga_crypt_verify(optiga_crypt_t * me,
10001dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10001dca:	b085      	sub	sp, #20
10001dcc:	9302      	str	r3, [sp, #8]
10001dce:	ab0a      	add	r3, sp, #40	; 0x28
10001dd0:	9200      	str	r2, [sp, #0]
10001dd2:	cb04      	ldmia	r3!, {r2}
10001dd4:	1c04      	adds	r4, r0, #0
10001dd6:	881b      	ldrh	r3, [r3, #0]
10001dd8:	9101      	str	r1, [sp, #4]
10001dda:	9303      	str	r3, [sp, #12]
10001ddc:	ab0c      	add	r3, sp, #48	; 0x30
10001dde:	781d      	ldrb	r5, [r3, #0]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
10001de0:	2800      	cmp	r0, #0
10001de2:	d03d      	beq.n	10001e60 <optiga_crypt_verify.isra.1+0x98>
10001de4:	6a07      	ldr	r7, [r0, #32]
10001de6:	2f00      	cmp	r7, #0
10001de8:	d03a      	beq.n	10001e60 <optiga_crypt_verify.isra.1+0x98>
10001dea:	9b00      	ldr	r3, [sp, #0]
10001dec:	2b00      	cmp	r3, #0
10001dee:	d037      	beq.n	10001e60 <optiga_crypt_verify.isra.1+0x98>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
10001df0:	2a00      	cmp	r2, #0
10001df2:	d035      	beq.n	10001e60 <optiga_crypt_verify.isra.1+0x98>
10001df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10001df6:	2b00      	cmp	r3, #0
10001df8:	d032      	beq.n	10001e60 <optiga_crypt_verify.isra.1+0x98>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001dfa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10001dfc:	2b01      	cmp	r3, #1
10001dfe:	d031      	beq.n	10001e64 <optiga_crypt_verify.isra.1+0x9c>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001e00:	2601      	movs	r6, #1
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001e02:	2100      	movs	r1, #0
10001e04:	2220      	movs	r2, #32
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001e06:	8586      	strh	r6, [r0, #44]	; 0x2c
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001e08:	f00a fa1a 	bl	1000c240 <memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001e0c:	1c23      	adds	r3, r4, #0
10001e0e:	332e      	adds	r3, #46	; 0x2e
10001e10:	7819      	ldrb	r1, [r3, #0]
10001e12:	1c38      	adds	r0, r7, #0
10001e14:	2200      	movs	r2, #0
10001e16:	f003 fedf 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001e1a:	1c23      	adds	r3, r4, #0
10001e1c:	332f      	adds	r3, #47	; 0x2f
10001e1e:	7819      	ldrb	r1, [r3, #0]
10001e20:	6a20      	ldr	r0, [r4, #32]
10001e22:	1c32      	adds	r2, r6, #0
10001e24:	f003 fed8 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
10001e28:	9b00      	ldr	r3, [sp, #0]
        p_params->digest_length = digest_length;
        p_params->p_signature = p_signature;
        p_params->signature_length = signature_length;
        p_params->public_key_source_type = public_key_source_type;
10001e2a:	73a5      	strb	r5, [r4, #14]
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_digest = p_digest;
10001e2c:	6023      	str	r3, [r4, #0]
        p_params->digest_length = digest_length;
10001e2e:	466b      	mov	r3, sp
10001e30:	7a1b      	ldrb	r3, [r3, #8]
10001e32:	7123      	strb	r3, [r4, #4]
        p_params->p_signature = p_signature;
10001e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001e36:	60a3      	str	r3, [r4, #8]
        p_params->signature_length = signature_length;
10001e38:	466b      	mov	r3, sp
10001e3a:	899b      	ldrh	r3, [r3, #12]
10001e3c:	81a3      	strh	r3, [r4, #12]
        p_params->public_key_source_type = public_key_source_type;

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
10001e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        p_params->digest_length = digest_length;
        p_params->p_signature = p_signature;
        p_params->signature_length = signature_length;
        p_params->public_key_source_type = public_key_source_type;

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
10001e40:	2d00      	cmp	r5, #0
10001e42:	d102      	bne.n	10001e4a <optiga_crypt_verify.isra.1+0x82>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
10001e44:	881b      	ldrh	r3, [r3, #0]
10001e46:	82a3      	strh	r3, [r4, #20]
10001e48:	e000      	b.n	10001e4c <optiga_crypt_verify.isra.1+0x84>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
10001e4a:	6123      	str	r3, [r4, #16]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
10001e4c:	6a20      	ldr	r0, [r4, #32]
10001e4e:	9901      	ldr	r1, [sp, #4]
10001e50:	1c22      	adds	r2, r4, #0
10001e52:	f003 ffbd 	bl	10005dd0 <optiga_cmd_verify_sign>
10001e56:	1e05      	subs	r5, r0, #0
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10001e58:	d005      	beq.n	10001e66 <optiga_crypt_verify.isra.1+0x9e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001e5a:	2300      	movs	r3, #0
10001e5c:	85a3      	strh	r3, [r4, #44]	; 0x2c
10001e5e:	e002      	b.n	10001e66 <optiga_crypt_verify.isra.1+0x9e>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10001e60:	4d04      	ldr	r5, [pc, #16]	; (10001e74 <optiga_crypt_verify.isra.1+0xac>)
10001e62:	e000      	b.n	10001e66 <optiga_crypt_verify.isra.1+0x9e>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10001e64:	4d04      	ldr	r5, [pc, #16]	; (10001e78 <optiga_crypt_verify.isra.1+0xb0>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10001e66:	1c20      	adds	r0, r4, #0
10001e68:	f7ff fece 	bl	10001c08 <optiga_crypt_reset_protection_level>

    return (return_value);
}
10001e6c:	1c28      	adds	r0, r5, #0
10001e6e:	b005      	add	sp, #20
10001e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001e72:	46c0      	nop			; (mov r8, r8)
10001e74:	00000403 	.word	0x00000403
10001e78:	00000405 	.word	0x00000405

10001e7c <optiga_crypt_rsa_enc_dec.isra.2>:
#endif //(OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)

#if defined (OPTIGA_CRYPT_RSA_DECRYPT_ENABLED) || defined (OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED)
//lint --e{715} suppress "label and label_length is RFU hence not used"
_STATIC_H optiga_lib_status_t optiga_crypt_rsa_enc_dec(optiga_crypt_t * me,
10001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e7e:	b085      	sub	sp, #20
10001e80:	9302      	str	r3, [sp, #8]
10001e82:	ab0a      	add	r3, sp, #40	; 0x28
10001e84:	781b      	ldrb	r3, [r3, #0]
10001e86:	9201      	str	r2, [sp, #4]
10001e88:	9303      	str	r3, [sp, #12]
10001e8a:	ab0e      	add	r3, sp, #56	; 0x38
10001e8c:	781e      	ldrb	r6, [r3, #0]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_encrypt_asym_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001e8e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
}
#endif //(OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)

#if defined (OPTIGA_CRYPT_RSA_DECRYPT_ENABLED) || defined (OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED)
//lint --e{715} suppress "label and label_length is RFU hence not used"
_STATIC_H optiga_lib_status_t optiga_crypt_rsa_enc_dec(optiga_crypt_t * me,
10001e90:	1c04      	adds	r4, r0, #0
10001e92:	1c0d      	adds	r5, r1, #0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_encrypt_asym_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001e94:	2b01      	cmp	r3, #1
10001e96:	d039      	beq.n	10001f0c <optiga_crypt_rsa_enc_dec.isra.2+0x90>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;
10001e98:	2701      	movs	r7, #1

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001e9a:	2100      	movs	r1, #0
10001e9c:	2220      	movs	r2, #32
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;
10001e9e:	8587      	strh	r7, [r0, #44]	; 0x2c

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001ea0:	f00a f9ce 	bl	1000c240 <memset>

        p_params->message = p_message;
10001ea4:	9b01      	ldr	r3, [sp, #4]
        p_params->message_length = message_length;
        p_params->processed_message = p_processed_message;
        p_params->processed_message_length = p_processed_message_length;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001ea6:	6a20      	ldr	r0, [r4, #32]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->message = p_message;
10001ea8:	60a3      	str	r3, [r4, #8]
        p_params->message_length = message_length;
10001eaa:	466b      	mov	r3, sp
10001eac:	891b      	ldrh	r3, [r3, #8]
        p_params->processed_message = p_processed_message;
        p_params->processed_message_length = p_processed_message_length;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001eae:	2200      	movs	r2, #0

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->message = p_message;
        p_params->message_length = message_length;
10001eb0:	8023      	strh	r3, [r4, #0]
        p_params->processed_message = p_processed_message;
10001eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10001eb4:	6163      	str	r3, [r4, #20]
        p_params->processed_message_length = p_processed_message_length;
10001eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10001eb8:	6063      	str	r3, [r4, #4]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001eba:	1c23      	adds	r3, r4, #0
10001ebc:	332e      	adds	r3, #46	; 0x2e
10001ebe:	7819      	ldrb	r1, [r3, #0]
10001ec0:	f003 fe8a 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001ec4:	1c23      	adds	r3, r4, #0
10001ec6:	332f      	adds	r3, #47	; 0x2f
10001ec8:	7819      	ldrb	r1, [r3, #0]
10001eca:	6a20      	ldr	r0, [r4, #32]
10001ecc:	1c3a      	adds	r2, r7, #0
10001ece:	f003 fe83 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>


        if (is_enc)
        {
            p_params->key = p_key;
10001ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);


        if (is_enc)
10001ed4:	2e00      	cmp	r6, #0
10001ed6:	d009      	beq.n	10001eec <optiga_crypt_rsa_enc_dec.isra.2+0x70>
        {
            p_params->key = p_key;
10001ed8:	6123      	str	r3, [r4, #16]
            p_params->public_key_source_type = public_key_source_type;
10001eda:	466b      	mov	r3, sp
10001edc:	7b1b      	ldrb	r3, [r3, #12]
#ifdef OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED
            return_value = optiga_cmd_encrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
10001ede:	6a20      	ldr	r0, [r4, #32]


        if (is_enc)
        {
            p_params->key = p_key;
            p_params->public_key_source_type = public_key_source_type;
10001ee0:	7323      	strb	r3, [r4, #12]
#ifdef OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED
            return_value = optiga_cmd_encrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
10001ee2:	1c29      	adds	r1, r5, #0
10001ee4:	1c22      	adds	r2, r4, #0
10001ee6:	f003 ffdf 	bl	10005ea8 <optiga_cmd_encrypt_asym>
10001eea:	e00a      	b.n	10001f02 <optiga_crypt_rsa_enc_dec.isra.2+0x86>
                                                   (optiga_encrypt_asym_params_t *)p_params);
#endif
        }
        else
        {
            p_params->private_key_id = (optiga_key_id_t)*(optiga_key_id_t *)p_key;
10001eec:	881b      	ldrh	r3, [r3, #0]
            p_params->key = &p_params->private_key_id;
            p_params->public_key_source_type = 0;
#ifdef OPTIGA_CRYPT_RSA_DECRYPT_ENABLED
            return_value = optiga_cmd_decrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
10001eee:	6a20      	ldr	r0, [r4, #32]
                                                   (optiga_encrypt_asym_params_t *)p_params);
#endif
        }
        else
        {
            p_params->private_key_id = (optiga_key_id_t)*(optiga_key_id_t *)p_key;
10001ef0:	8323      	strh	r3, [r4, #24]
            p_params->key = &p_params->private_key_id;
10001ef2:	1c23      	adds	r3, r4, #0
10001ef4:	3318      	adds	r3, #24
10001ef6:	6123      	str	r3, [r4, #16]
            p_params->public_key_source_type = 0;
10001ef8:	7326      	strb	r6, [r4, #12]
#ifdef OPTIGA_CRYPT_RSA_DECRYPT_ENABLED
            return_value = optiga_cmd_decrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
10001efa:	1c29      	adds	r1, r5, #0
10001efc:	1c22      	adds	r2, r4, #0
10001efe:	f003 fff1 	bl	10005ee4 <optiga_cmd_decrypt_asym>
10001f02:	1e05      	subs	r5, r0, #0
                                                   (optiga_encrypt_asym_params_t *)p_params);
#endif
        }
        if (OPTIGA_LIB_SUCCESS != return_value)
10001f04:	d003      	beq.n	10001f0e <optiga_crypt_rsa_enc_dec.isra.2+0x92>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001f06:	2300      	movs	r3, #0
10001f08:	85a3      	strh	r3, [r4, #44]	; 0x2c
10001f0a:	e000      	b.n	10001f0e <optiga_crypt_rsa_enc_dec.isra.2+0x92>

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10001f0c:	4d03      	ldr	r5, [pc, #12]	; (10001f1c <optiga_crypt_rsa_enc_dec.isra.2+0xa0>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10001f0e:	1c20      	adds	r0, r4, #0
10001f10:	f7ff fe7a 	bl	10001c08 <optiga_crypt_reset_protection_level>

    return (return_value);
}
10001f14:	1c28      	adds	r0, r5, #0
10001f16:	b005      	add	sp, #20
10001f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001f1a:	46c0      	nop			; (mov r8, r8)
10001f1c:	00000405 	.word	0x00000405

10001f20 <optiga_crypt_set_comms_params>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
    switch (parameter_type)
10001f20:	2901      	cmp	r1, #1
10001f22:	d003      	beq.n	10001f2c <optiga_crypt_set_comms_params+0xc>
10001f24:	2902      	cmp	r1, #2
10001f26:	d103      	bne.n	10001f30 <optiga_crypt_set_comms_params+0x10>
            me->protection_level = value;
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
10001f28:	302f      	adds	r0, #47	; 0x2f
10001f2a:	e000      	b.n	10001f2e <optiga_crypt_set_comms_params+0xe>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
10001f2c:	302e      	adds	r0, #46	; 0x2e
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
10001f2e:	7002      	strb	r2, [r0, #0]
        default:
        {
            break;
        }
    }
}
10001f30:	4770      	bx	lr
	...

10001f34 <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
10001f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_crypt_t * me = NULL;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
10001f36:	2900      	cmp	r1, #0
10001f38:	d101      	bne.n	10001f3e <optiga_crypt_create+0xa>

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
    optiga_crypt_t * me = NULL;
10001f3a:	2400      	movs	r4, #0
10001f3c:	e01e      	b.n	10001f7c <optiga_crypt_create+0x48>
10001f3e:	1c0f      	adds	r7, r1, #0
10001f40:	1c05      	adds	r5, r0, #0
        if (NULL == handler)
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
10001f42:	2130      	movs	r1, #48	; 0x30
10001f44:	2001      	movs	r0, #1
10001f46:	1c16      	adds	r6, r2, #0
10001f48:	f00a f920 	bl	1000c18c <calloc>
10001f4c:	1e04      	subs	r4, r0, #0
        if (NULL == me)
10001f4e:	d0f4      	beq.n	10001f3a <optiga_crypt_create+0x6>

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
10001f50:	1c03      	adds	r3, r0, #0
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
10001f52:	2200      	movs	r2, #0
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
10001f54:	2101      	movs	r1, #1
10001f56:	332f      	adds	r3, #47	; 0x2f
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
10001f58:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
10001f5a:	6287      	str	r7, [r0, #40]	; 0x28
        me->caller_context = caller_context;
10001f5c:	6246      	str	r6, [r0, #36]	; 0x24
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
10001f5e:	3b01      	subs	r3, #1

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
10001f60:	7059      	strb	r1, [r3, #1]
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
10001f62:	1c28      	adds	r0, r5, #0
        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
10001f64:	701a      	strb	r2, [r3, #0]
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
10001f66:	4906      	ldr	r1, [pc, #24]	; (10001f80 <optiga_crypt_create+0x4c>)
10001f68:	1c22      	adds	r2, r4, #0
10001f6a:	f003 fe41 	bl	10005bf0 <optiga_cmd_create>
10001f6e:	1e05      	subs	r5, r0, #0
10001f70:	6220      	str	r0, [r4, #32]
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
10001f72:	d103      	bne.n	10001f7c <optiga_crypt_create+0x48>
        {
            pal_os_free(me);
10001f74:	1c20      	adds	r0, r4, #0
10001f76:	f00a f941 	bl	1000c1fc <free>
            me = NULL;
10001f7a:	1c2c      	adds	r4, r5, #0
        }

    } while (FALSE);

    return (me);
}
10001f7c:	1c20      	adds	r0, r4, #0
10001f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001f80:	10001bf9 	.word	0x10001bf9

10001f84 <optiga_crypt_destroy>:

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
10001f84:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
10001f86:	2800      	cmp	r0, #0
10001f88:	d00b      	beq.n	10001fa2 <optiga_crypt_destroy+0x1e>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001f8a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10001f8c:	2b01      	cmp	r3, #1
10001f8e:	d00a      	beq.n	10001fa6 <optiga_crypt_destroy+0x22>
10001f90:	1c04      	adds	r4, r0, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
10001f92:	6a00      	ldr	r0, [r0, #32]
10001f94:	f003 fe86 	bl	10005ca4 <optiga_cmd_destroy>
10001f98:	1c05      	adds	r5, r0, #0
        pal_os_free(me);
10001f9a:	1c20      	adds	r0, r4, #0
10001f9c:	f00a f92e 	bl	1000c1fc <free>
10001fa0:	e002      	b.n	10001fa8 <optiga_crypt_destroy+0x24>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10001fa2:	4d02      	ldr	r5, [pc, #8]	; (10001fac <optiga_crypt_destroy+0x28>)
10001fa4:	e000      	b.n	10001fa8 <optiga_crypt_destroy+0x24>
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10001fa6:	4d02      	ldr	r5, [pc, #8]	; (10001fb0 <optiga_crypt_destroy+0x2c>)
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);

    } while (FALSE);
    return (return_value);
}
10001fa8:	1c28      	adds	r0, r5, #0
10001faa:	bd38      	pop	{r3, r4, r5, pc}
10001fac:	00000403 	.word	0x00000403
10001fb0:	00000405 	.word	0x00000405

10001fb4 <optiga_crypt_random>:
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
optiga_lib_status_t optiga_crypt_random(optiga_crypt_t * me,
                                        optiga_rng_type_t rng_type,
                                        uint8_t * random_data,
                                        uint16_t random_data_length)
{
10001fb4:	b513      	push	{r0, r1, r4, lr}
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
10001fb6:	2800      	cmp	r0, #0
10001fb8:	d00a      	beq.n	10001fd0 <optiga_crypt_random+0x1c>
10001fba:	6a04      	ldr	r4, [r0, #32]
10001fbc:	2c00      	cmp	r4, #0
10001fbe:	d007      	beq.n	10001fd0 <optiga_crypt_random+0x1c>
10001fc0:	2a00      	cmp	r2, #0
10001fc2:	d005      	beq.n	10001fd0 <optiga_crypt_random+0x1c>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        return_value = optiga_crypt_get_random(me,
10001fc4:	2400      	movs	r4, #0
10001fc6:	9400      	str	r4, [sp, #0]
10001fc8:	9401      	str	r4, [sp, #4]
10001fca:	f7ff fe23 	bl	10001c14 <optiga_crypt_get_random>
10001fce:	e000      	b.n	10001fd2 <optiga_crypt_random+0x1e>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10001fd0:	4800      	ldr	r0, [pc, #0]	; (10001fd4 <optiga_crypt_random+0x20>)
                                               NULL,
                                               0x00);
    } while (FALSE);

    return (return_value);
}
10001fd2:	bd16      	pop	{r1, r2, r4, pc}
10001fd4:	00000403 	.word	0x00000403

10001fd8 <optiga_crypt_hash_start>:
#endif //OPTIGA_CRYPT_RANDOM_ENABLED

#ifdef OPTIGA_CRYPT_HASH_ENABLED
optiga_lib_status_t optiga_crypt_hash_start(optiga_crypt_t * me,
                                            optiga_hash_context_t * hash_ctx)
{
10001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001fda:	1c04      	adds	r4, r0, #0
10001fdc:	1c0d      	adds	r5, r1, #0
    optiga_calc_hash_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == hash_ctx))
10001fde:	2800      	cmp	r0, #0
10001fe0:	d02b      	beq.n	1000203a <optiga_crypt_hash_start+0x62>
10001fe2:	6a07      	ldr	r7, [r0, #32]
10001fe4:	2f00      	cmp	r7, #0
10001fe6:	d028      	beq.n	1000203a <optiga_crypt_hash_start+0x62>
10001fe8:	2900      	cmp	r1, #0
10001fea:	d026      	beq.n	1000203a <optiga_crypt_hash_start+0x62>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001fec:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10001fee:	2b01      	cmp	r3, #1
10001ff0:	d025      	beq.n	1000203e <optiga_crypt_hash_start+0x66>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001ff2:	2601      	movs	r6, #1
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001ff4:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001ff6:	8586      	strh	r6, [r0, #44]	; 0x2c
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001ff8:	2220      	movs	r2, #32
10001ffa:	f00a f921 	bl	1000c240 <memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001ffe:	1c23      	adds	r3, r4, #0
10002000:	332e      	adds	r3, #46	; 0x2e
10002002:	7819      	ldrb	r1, [r3, #0]
10002004:	1c38      	adds	r0, r7, #0
10002006:	2200      	movs	r2, #0
10002008:	f003 fde6 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
1000200c:	1c23      	adds	r3, r4, #0
1000200e:	1c32      	adds	r2, r6, #0
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_START;
10002010:	2600      	movs	r6, #0
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10002012:	332f      	adds	r3, #47	; 0x2f
10002014:	7819      	ldrb	r1, [r3, #0]
10002016:	6a20      	ldr	r0, [r4, #32]
10002018:	f003 fdde 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_START;
        p_params->p_hash_context = hash_ctx;
1000201c:	60a5      	str	r5, [r4, #8]
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_START;
1000201e:	7326      	strb	r6, [r4, #12]
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = 0;
10002020:	61e6      	str	r6, [r4, #28]
        p_params->p_hash_data = NULL;
10002022:	6066      	str	r6, [r4, #4]
        p_params->p_hash_oid = NULL;
10002024:	6026      	str	r6, [r4, #0]

        return_value = optiga_cmd_calc_hash(me->my_cmd,
10002026:	79a9      	ldrb	r1, [r5, #6]
10002028:	6a20      	ldr	r0, [r4, #32]
1000202a:	1c22      	adds	r2, r4, #0
1000202c:	f003 ff72 	bl	10005f14 <optiga_cmd_calc_hash>
10002030:	1e05      	subs	r5, r0, #0
                                            hash_ctx->hash_algo,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10002032:	42b5      	cmp	r5, r6
10002034:	d004      	beq.n	10002040 <optiga_crypt_hash_start+0x68>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10002036:	85a6      	strh	r6, [r4, #44]	; 0x2c
10002038:	e002      	b.n	10002040 <optiga_crypt_hash_start+0x68>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == hash_ctx))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
1000203a:	4d04      	ldr	r5, [pc, #16]	; (1000204c <optiga_crypt_hash_start+0x74>)
1000203c:	e000      	b.n	10002040 <optiga_crypt_hash_start+0x68>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
1000203e:	4d04      	ldr	r5, [pc, #16]	; (10002050 <optiga_crypt_hash_start+0x78>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10002040:	1c20      	adds	r0, r4, #0
10002042:	f7ff fde1 	bl	10001c08 <optiga_crypt_reset_protection_level>

    return (return_value);
}
10002046:	1c28      	adds	r0, r5, #0
10002048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000204a:	46c0      	nop			; (mov r8, r8)
1000204c:	00000403 	.word	0x00000403
10002050:	00000405 	.word	0x00000405

10002054 <optiga_crypt_hash_update>:

optiga_lib_status_t optiga_crypt_hash_update(optiga_crypt_t * me,
                                             optiga_hash_context_t * hash_ctx,
                                             uint8_t source_of_data_to_hash,
                                             const void * data_to_hash)
{
10002054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10002056:	1c04      	adds	r4, r0, #0
10002058:	1c0d      	adds	r5, r1, #0
1000205a:	9201      	str	r2, [sp, #4]
1000205c:	1c1e      	adds	r6, r3, #0
    optiga_calc_hash_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
1000205e:	2800      	cmp	r0, #0
10002060:	d03a      	beq.n	100020d8 <optiga_crypt_hash_update+0x84>
10002062:	6a07      	ldr	r7, [r0, #32]
10002064:	2f00      	cmp	r7, #0
10002066:	d037      	beq.n	100020d8 <optiga_crypt_hash_update+0x84>
10002068:	2900      	cmp	r1, #0
1000206a:	d035      	beq.n	100020d8 <optiga_crypt_hash_update+0x84>
            (NULL == hash_ctx) || (NULL == data_to_hash))
1000206c:	2b00      	cmp	r3, #0
1000206e:	d033      	beq.n	100020d8 <optiga_crypt_hash_update+0x84>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10002070:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10002072:	2b01      	cmp	r3, #1
10002074:	d032      	beq.n	100020dc <optiga_crypt_hash_update+0x88>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10002076:	2301      	movs	r3, #1
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10002078:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
1000207a:	8583      	strh	r3, [r0, #44]	; 0x2c
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
1000207c:	2220      	movs	r2, #32
1000207e:	f00a f8df 	bl	1000c240 <memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10002082:	1c23      	adds	r3, r4, #0
10002084:	332e      	adds	r3, #46	; 0x2e
10002086:	7819      	ldrb	r1, [r3, #0]
10002088:	1c38      	adds	r0, r7, #0
1000208a:	2200      	movs	r2, #0
1000208c:	f003 fda4 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10002090:	1c23      	adds	r3, r4, #0
10002092:	332f      	adds	r3, #47	; 0x2f
10002094:	7819      	ldrb	r1, [r3, #0]
10002096:	6a20      	ldr	r0, [r4, #32]
10002098:	2201      	movs	r2, #1
1000209a:	f003 fd9d 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        p_params->source_of_data_to_hash = source_of_data_to_hash;
1000209e:	466b      	mov	r3, sp
100020a0:	791b      	ldrb	r3, [r3, #4]
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_CONTINUE;
        p_params->p_hash_context = hash_ctx;
100020a2:	60a5      	str	r5, [r4, #8]
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->source_of_data_to_hash = source_of_data_to_hash;
100020a4:	7363      	strb	r3, [r4, #13]
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_CONTINUE;
100020a6:	2302      	movs	r3, #2
100020a8:	7323      	strb	r3, [r4, #12]
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = p_params->p_hash_context->context_buffer_length;
100020aa:	88ab      	ldrh	r3, [r5, #4]
100020ac:	61e3      	str	r3, [r4, #28]
        p_params->p_hash_data = NULL;
100020ae:	2300      	movs	r3, #0
100020b0:	6063      	str	r3, [r4, #4]
        p_params->p_hash_oid = NULL;
100020b2:	6023      	str	r3, [r4, #0]

        if (source_of_data_to_hash)
100020b4:	9b01      	ldr	r3, [sp, #4]
100020b6:	2b00      	cmp	r3, #0
100020b8:	d001      	beq.n	100020be <optiga_crypt_hash_update+0x6a>
        {
            p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
100020ba:	6066      	str	r6, [r4, #4]
100020bc:	e002      	b.n	100020c4 <optiga_crypt_hash_update+0x70>
        }
        else
        {
            p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
100020be:	2312      	movs	r3, #18
            p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
100020c0:	6026      	str	r6, [r4, #0]
        {
            p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
        }
        else
        {
            p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
100020c2:	7323      	strb	r3, [r4, #12]
            p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
        }

        return_value = optiga_cmd_calc_hash(me->my_cmd,
100020c4:	79a9      	ldrb	r1, [r5, #6]
100020c6:	6a20      	ldr	r0, [r4, #32]
100020c8:	1c22      	adds	r2, r4, #0
100020ca:	f003 ff23 	bl	10005f14 <optiga_cmd_calc_hash>
100020ce:	1e05      	subs	r5, r0, #0
                                            hash_ctx->hash_algo,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
100020d0:	d005      	beq.n	100020de <optiga_crypt_hash_update+0x8a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
100020d2:	2300      	movs	r3, #0
100020d4:	85a3      	strh	r3, [r4, #44]	; 0x2c
100020d6:	e002      	b.n	100020de <optiga_crypt_hash_update+0x8a>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == hash_ctx) || (NULL == data_to_hash))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
100020d8:	4d03      	ldr	r5, [pc, #12]	; (100020e8 <optiga_crypt_hash_update+0x94>)
100020da:	e000      	b.n	100020de <optiga_crypt_hash_update+0x8a>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
100020dc:	4d03      	ldr	r5, [pc, #12]	; (100020ec <optiga_crypt_hash_update+0x98>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
100020de:	1c20      	adds	r0, r4, #0
100020e0:	f7ff fd92 	bl	10001c08 <optiga_crypt_reset_protection_level>

    return (return_value);
}
100020e4:	1c28      	adds	r0, r5, #0
100020e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100020e8:	00000403 	.word	0x00000403
100020ec:	00000405 	.word	0x00000405

100020f0 <optiga_crypt_hash_finalize>:

optiga_lib_status_t optiga_crypt_hash_finalize(optiga_crypt_t * me,
                                               optiga_hash_context_t * hash_ctx,
                                               uint8_t * hash_output)
{
100020f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100020f2:	1c04      	adds	r4, r0, #0
100020f4:	1c0d      	adds	r5, r1, #0
100020f6:	9201      	str	r2, [sp, #4]
    optiga_calc_hash_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
100020f8:	2800      	cmp	r0, #0
100020fa:	d031      	beq.n	10002160 <optiga_crypt_hash_finalize+0x70>
100020fc:	6a07      	ldr	r7, [r0, #32]
100020fe:	2f00      	cmp	r7, #0
10002100:	d02e      	beq.n	10002160 <optiga_crypt_hash_finalize+0x70>
10002102:	2900      	cmp	r1, #0
10002104:	d02c      	beq.n	10002160 <optiga_crypt_hash_finalize+0x70>
            (NULL == hash_ctx) || (NULL == hash_output))
10002106:	2a00      	cmp	r2, #0
10002108:	d02a      	beq.n	10002160 <optiga_crypt_hash_finalize+0x70>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
1000210a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
1000210c:	2b01      	cmp	r3, #1
1000210e:	d029      	beq.n	10002164 <optiga_crypt_hash_finalize+0x74>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10002110:	2601      	movs	r6, #1
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10002112:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10002114:	8586      	strh	r6, [r0, #44]	; 0x2c
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10002116:	2220      	movs	r2, #32
10002118:	f00a f892 	bl	1000c240 <memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
1000211c:	1c23      	adds	r3, r4, #0
1000211e:	332e      	adds	r3, #46	; 0x2e
10002120:	7819      	ldrb	r1, [r3, #0]
10002122:	1c38      	adds	r0, r7, #0
10002124:	2200      	movs	r2, #0
10002126:	f003 fd57 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
1000212a:	1c23      	adds	r3, r4, #0
1000212c:	332f      	adds	r3, #47	; 0x2f
1000212e:	7819      	ldrb	r1, [r3, #0]
10002130:	1c32      	adds	r2, r6, #0
10002132:	6a20      	ldr	r0, [r4, #32]
10002134:	f003 fd50 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        p_params->p_out_digest = hash_output;
10002138:	9b01      	ldr	r3, [sp, #4]
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = p_params->p_hash_context->context_buffer_length;
        p_params->p_hash_data = NULL;
1000213a:	2600      	movs	r6, #0
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_out_digest = hash_output;
1000213c:	6163      	str	r3, [r4, #20]
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
1000213e:	2303      	movs	r3, #3
        p_params->p_hash_context = hash_ctx;
10002140:	60a5      	str	r5, [r4, #8]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_out_digest = hash_output;
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
10002142:	7323      	strb	r3, [r4, #12]
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = p_params->p_hash_context->context_buffer_length;
10002144:	88ab      	ldrh	r3, [r5, #4]
        p_params->p_hash_data = NULL;
10002146:	6066      	str	r6, [r4, #4]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_out_digest = hash_output;
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = p_params->p_hash_context->context_buffer_length;
10002148:	61e3      	str	r3, [r4, #28]
        p_params->p_hash_data = NULL;
        p_params->p_hash_oid = NULL;
1000214a:	6026      	str	r6, [r4, #0]

        return_value = optiga_cmd_calc_hash(me->my_cmd,
1000214c:	79a9      	ldrb	r1, [r5, #6]
1000214e:	6a20      	ldr	r0, [r4, #32]
10002150:	1c22      	adds	r2, r4, #0
10002152:	f003 fedf 	bl	10005f14 <optiga_cmd_calc_hash>
10002156:	1e05      	subs	r5, r0, #0
                                            hash_ctx->hash_algo,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10002158:	42b5      	cmp	r5, r6
1000215a:	d004      	beq.n	10002166 <optiga_crypt_hash_finalize+0x76>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
1000215c:	85a6      	strh	r6, [r4, #44]	; 0x2c
1000215e:	e002      	b.n	10002166 <optiga_crypt_hash_finalize+0x76>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == hash_ctx) || (NULL == hash_output))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10002160:	4d03      	ldr	r5, [pc, #12]	; (10002170 <optiga_crypt_hash_finalize+0x80>)
10002162:	e000      	b.n	10002166 <optiga_crypt_hash_finalize+0x76>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10002164:	4d03      	ldr	r5, [pc, #12]	; (10002174 <optiga_crypt_hash_finalize+0x84>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10002166:	1c20      	adds	r0, r4, #0
10002168:	f7ff fd4e 	bl	10001c08 <optiga_crypt_reset_protection_level>

    return (return_value);
}
1000216c:	1c28      	adds	r0, r5, #0
1000216e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10002170:	00000403 	.word	0x00000403
10002174:	00000405 	.word	0x00000405

10002178 <optiga_crypt_ecc_generate_keypair>:
                                                      uint8_t key_usage,
                                                      bool_t export_private_key,
                                                      void * private_key,
                                                      uint8_t * public_key,
                                                      uint16_t * public_key_length)
{
10002178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_generate_keypair(me,
1000217a:	9c06      	ldr	r4, [sp, #24]
1000217c:	9400      	str	r4, [sp, #0]
1000217e:	9c07      	ldr	r4, [sp, #28]
10002180:	9401      	str	r4, [sp, #4]
10002182:	9c08      	ldr	r4, [sp, #32]
10002184:	9402      	str	r4, [sp, #8]
10002186:	f7ff fd81 	bl	10001c8c <optiga_crypt_generate_keypair>
                                         key_usage,
                                         export_private_key,
                                         private_key,
                                         public_key,
                                         public_key_length));
}
1000218a:	b004      	add	sp, #16
1000218c:	bd10      	pop	{r4, pc}

1000218e <optiga_crypt_ecdsa_sign>:
                                            const uint8_t * digest,
                                            uint8_t digest_length,
                                            optiga_key_id_t private_key,
                                            uint8_t * signature,
                                            uint16_t * signature_length)
{
1000218e:	b530      	push	{r4, r5, lr}
10002190:	1c0d      	adds	r5, r1, #0
10002192:	1c14      	adds	r4, r2, #0
10002194:	b085      	sub	sp, #20
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_sign(me,
10002196:	9300      	str	r3, [sp, #0]
10002198:	9b08      	ldr	r3, [sp, #32]
1000219a:	2111      	movs	r1, #17
1000219c:	9301      	str	r3, [sp, #4]
1000219e:	9b09      	ldr	r3, [sp, #36]	; 0x24
100021a0:	1c2a      	adds	r2, r5, #0
100021a2:	9302      	str	r3, [sp, #8]
100021a4:	1c23      	adds	r3, r4, #0
100021a6:	f7ff fdbf 	bl	10001d28 <optiga_crypt_sign.isra.0>
                              digest_length,
                              private_key,
                              signature,
                              signature_length,
                              0x0000));
}
100021aa:	b005      	add	sp, #20
100021ac:	bd30      	pop	{r4, r5, pc}

100021ae <optiga_crypt_ecdsa_verify>:
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
100021ae:	b530      	push	{r4, r5, lr}
100021b0:	1c0d      	adds	r5, r1, #0
100021b2:	1c14      	adds	r4, r2, #0
100021b4:	b085      	sub	sp, #20
100021b6:	aa08      	add	r2, sp, #32
100021b8:	8811      	ldrh	r1, [r2, #0]
100021ba:	aa09      	add	r2, sp, #36	; 0x24
100021bc:	7812      	ldrb	r2, [r2, #0]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_verify(me,
100021be:	9300      	str	r3, [sp, #0]
100021c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100021c2:	9101      	str	r1, [sp, #4]
100021c4:	9202      	str	r2, [sp, #8]
100021c6:	9303      	str	r3, [sp, #12]
100021c8:	2111      	movs	r1, #17
100021ca:	1c2a      	adds	r2, r5, #0
100021cc:	1c23      	adds	r3, r4, #0
100021ce:	f7ff fdfb 	bl	10001dc8 <optiga_crypt_verify.isra.1>
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                0x0000));
}
100021d2:	b005      	add	sp, #20
100021d4:	bd30      	pop	{r4, r5, pc}
	...

100021d8 <optiga_crypt_ecdh>:
optiga_lib_status_t optiga_crypt_ecdh(optiga_crypt_t * me,
                                      optiga_key_id_t private_key,
                                      public_key_from_host_t * public_key,
                                      bool_t export_to_host,
                                      uint8_t * shared_secret)
{
100021d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100021da:	1c04      	adds	r4, r0, #0
100021dc:	9101      	str	r1, [sp, #4]
100021de:	1c16      	adds	r6, r2, #0
100021e0:	9300      	str	r3, [sp, #0]

    do
    {

#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == public_key) ||
100021e2:	2800      	cmp	r0, #0
100021e4:	d038      	beq.n	10002258 <optiga_crypt_ecdh+0x80>
100021e6:	6a07      	ldr	r7, [r0, #32]
100021e8:	2f00      	cmp	r7, #0
100021ea:	d035      	beq.n	10002258 <optiga_crypt_ecdh+0x80>
100021ec:	2a00      	cmp	r2, #0
100021ee:	d033      	beq.n	10002258 <optiga_crypt_ecdh+0x80>
100021f0:	6813      	ldr	r3, [r2, #0]
100021f2:	2b00      	cmp	r3, #0
100021f4:	d030      	beq.n	10002258 <optiga_crypt_ecdh+0x80>
            (NULL == public_key->public_key) ||
100021f6:	9b00      	ldr	r3, [sp, #0]
100021f8:	2b01      	cmp	r3, #1
100021fa:	d102      	bne.n	10002202 <optiga_crypt_ecdh+0x2a>
            ((TRUE == export_to_host) && (NULL == shared_secret)))
100021fc:	9b08      	ldr	r3, [sp, #32]
100021fe:	2b00      	cmp	r3, #0
10002200:	d02a      	beq.n	10002258 <optiga_crypt_ecdh+0x80>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10002202:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
10002204:	2b01      	cmp	r3, #1
10002206:	d029      	beq.n	1000225c <optiga_crypt_ecdh+0x84>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10002208:	2501      	movs	r5, #1

        p_params = (optiga_calc_ssec_params_t *)&(me->params.optiga_calc_ssec_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
1000220a:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
1000220c:	85a5      	strh	r5, [r4, #44]	; 0x2c

        p_params = (optiga_calc_ssec_params_t *)&(me->params.optiga_calc_ssec_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
1000220e:	2220      	movs	r2, #32
10002210:	1c20      	adds	r0, r4, #0
10002212:	f00a f815 	bl	1000c240 <memset>

        p_params->private_key = private_key;
10002216:	466b      	mov	r3, sp
10002218:	889b      	ldrh	r3, [r3, #4]
        p_params->public_key = public_key;
1000221a:	6026      	str	r6, [r4, #0]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;

        p_params = (optiga_calc_ssec_params_t *)&(me->params.optiga_calc_ssec_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->private_key = private_key;
1000221c:	8123      	strh	r3, [r4, #8]
        p_params->public_key = public_key;
        p_params->export_to_host = export_to_host;
1000221e:	466b      	mov	r3, sp
10002220:	781b      	ldrb	r3, [r3, #0]
        p_params->shared_secret = shared_secret;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10002222:	1c38      	adds	r0, r7, #0
        p_params = (optiga_calc_ssec_params_t *)&(me->params.optiga_calc_ssec_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->private_key = private_key;
        p_params->public_key = public_key;
        p_params->export_to_host = export_to_host;
10002224:	72a3      	strb	r3, [r4, #10]
        p_params->shared_secret = shared_secret;
10002226:	9b08      	ldr	r3, [sp, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10002228:	2200      	movs	r2, #0
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->private_key = private_key;
        p_params->public_key = public_key;
        p_params->export_to_host = export_to_host;
        p_params->shared_secret = shared_secret;
1000222a:	6063      	str	r3, [r4, #4]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
1000222c:	1c23      	adds	r3, r4, #0
1000222e:	332e      	adds	r3, #46	; 0x2e
10002230:	7819      	ldrb	r1, [r3, #0]
10002232:	f003 fcd1 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10002236:	1c23      	adds	r3, r4, #0
10002238:	332f      	adds	r3, #47	; 0x2f
1000223a:	7819      	ldrb	r1, [r3, #0]
1000223c:	1c2a      	adds	r2, r5, #0
1000223e:	6a20      	ldr	r0, [r4, #32]
10002240:	f003 fcca 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_calc_ssec(me->my_cmd, OPTIGA_CRYPT_ECDH_KEY_AGREEMENT_ALGORITHM,
10002244:	1c29      	adds	r1, r5, #0
10002246:	6a20      	ldr	r0, [r4, #32]
10002248:	1c22      	adds	r2, r4, #0
1000224a:	f003 fdd1 	bl	10005df0 <optiga_cmd_calc_ssec>
1000224e:	1e05      	subs	r5, r0, #0
                                            (optiga_calc_ssec_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10002250:	d005      	beq.n	1000225e <optiga_crypt_ecdh+0x86>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10002252:	2300      	movs	r3, #0
10002254:	85a3      	strh	r3, [r4, #44]	; 0x2c
10002256:	e002      	b.n	1000225e <optiga_crypt_ecdh+0x86>
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == public_key) ||
            (NULL == public_key->public_key) ||
            ((TRUE == export_to_host) && (NULL == shared_secret)))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10002258:	4d03      	ldr	r5, [pc, #12]	; (10002268 <optiga_crypt_ecdh+0x90>)
1000225a:	e000      	b.n	1000225e <optiga_crypt_ecdh+0x86>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
1000225c:	4d03      	ldr	r5, [pc, #12]	; (1000226c <optiga_crypt_ecdh+0x94>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
1000225e:	1c20      	adds	r0, r4, #0
10002260:	f7ff fcd2 	bl	10001c08 <optiga_crypt_reset_protection_level>

    return (return_value);
}
10002264:	1c28      	adds	r0, r5, #0
10002266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10002268:	00000403 	.word	0x00000403
1000226c:	00000405 	.word	0x00000405

10002270 <optiga_crypt_tls_prf_sha256>:
                                                const uint8_t * seed,
                                                uint16_t seed_length,
                                                uint16_t derived_key_length,
                                                bool_t export_to_host,
                                                uint8_t * derived_key)
{
10002270:	b5f0      	push	{r4, r5, r6, r7, lr}
10002272:	b087      	sub	sp, #28
10002274:	9303      	str	r3, [sp, #12]
10002276:	ab0c      	add	r3, sp, #48	; 0x30
10002278:	9202      	str	r2, [sp, #8]
1000227a:	cb04      	ldmia	r3!, {r2}
1000227c:	1c04      	adds	r4, r0, #0
1000227e:	881b      	ldrh	r3, [r3, #0]
10002280:	9101      	str	r1, [sp, #4]
10002282:	9304      	str	r3, [sp, #16]
10002284:	ab0e      	add	r3, sp, #56	; 0x38
10002286:	881b      	ldrh	r3, [r3, #0]
10002288:	9305      	str	r3, [sp, #20]
1000228a:	ab0f      	add	r3, sp, #60	; 0x3c
1000228c:	781e      	ldrb	r6, [r3, #0]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == seed) ||
1000228e:	2800      	cmp	r0, #0
10002290:	d041      	beq.n	10002316 <optiga_crypt_tls_prf_sha256+0xa6>
10002292:	6a07      	ldr	r7, [r0, #32]
10002294:	2f00      	cmp	r7, #0
10002296:	d03e      	beq.n	10002316 <optiga_crypt_tls_prf_sha256+0xa6>
10002298:	2a00      	cmp	r2, #0
1000229a:	d03c      	beq.n	10002316 <optiga_crypt_tls_prf_sha256+0xa6>
1000229c:	2e01      	cmp	r6, #1
1000229e:	d102      	bne.n	100022a6 <optiga_crypt_tls_prf_sha256+0x36>
           ((TRUE == export_to_host) && (NULL == derived_key)))
100022a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
100022a2:	2b00      	cmp	r3, #0
100022a4:	d037      	beq.n	10002316 <optiga_crypt_tls_prf_sha256+0xa6>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
100022a6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
100022a8:	2b01      	cmp	r3, #1
100022aa:	d036      	beq.n	1000231a <optiga_crypt_tls_prf_sha256+0xaa>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100022ac:	2501      	movs	r5, #1

        p_params = (optiga_derive_key_params_t *)&(me->params.optiga_derive_key_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
100022ae:	2100      	movs	r1, #0
100022b0:	2220      	movs	r2, #32
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100022b2:	85a5      	strh	r5, [r4, #44]	; 0x2c

        p_params = (optiga_derive_key_params_t *)&(me->params.optiga_derive_key_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
100022b4:	1c20      	adds	r0, r4, #0
100022b6:	f009 ffc3 	bl	1000c240 <memset>

        p_params->input_shared_secret_oid = secret;
100022ba:	466b      	mov	r3, sp
100022bc:	889b      	ldrh	r3, [r3, #4]
        p_params->seed = (const uint8_t *)seed;
        p_params->seed_length = seed_length;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_COMMAND_PROTECTION;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100022be:	1c38      	adds	r0, r7, #0
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;

        p_params = (optiga_derive_key_params_t *)&(me->params.optiga_derive_key_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->input_shared_secret_oid = secret;
100022c0:	8023      	strh	r3, [r4, #0]
        p_params->label = label;
100022c2:	9b02      	ldr	r3, [sp, #8]
        p_params->seed = (const uint8_t *)seed;
        p_params->seed_length = seed_length;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_COMMAND_PROTECTION;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100022c4:	2200      	movs	r2, #0

        p_params = (optiga_derive_key_params_t *)&(me->params.optiga_derive_key_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->input_shared_secret_oid = secret;
        p_params->label = label;
100022c6:	60e3      	str	r3, [r4, #12]
        p_params->label_length = label_length;
100022c8:	466b      	mov	r3, sp
100022ca:	899b      	ldrh	r3, [r3, #12]
100022cc:	8063      	strh	r3, [r4, #2]
        p_params->seed = (const uint8_t *)seed;
100022ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100022d0:	60a3      	str	r3, [r4, #8]
        p_params->seed_length = seed_length;
100022d2:	466b      	mov	r3, sp
100022d4:	8a1b      	ldrh	r3, [r3, #16]
100022d6:	80a3      	strh	r3, [r4, #4]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_COMMAND_PROTECTION;
100022d8:	1c23      	adds	r3, r4, #0
100022da:	332e      	adds	r3, #46	; 0x2e
100022dc:	7819      	ldrb	r1, [r3, #0]
100022de:	4329      	orrs	r1, r5
100022e0:	7019      	strb	r1, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100022e2:	f003 fc79 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
100022e6:	1c23      	adds	r3, r4, #0
100022e8:	332f      	adds	r3, #47	; 0x2f
100022ea:	7819      	ldrb	r1, [r3, #0]
100022ec:	6a20      	ldr	r0, [r4, #32]
100022ee:	1c2a      	adds	r2, r5, #0
100022f0:	f003 fc72 	bl	10005bd8 <optiga_cmd_set_shielded_connection_option>
        p_params->derived_key_length = derived_key_length;
100022f4:	466b      	mov	r3, sp
100022f6:	8a9b      	ldrh	r3, [r3, #20]
100022f8:	80e3      	strh	r3, [r4, #6]
        if (FALSE != export_to_host)
100022fa:	2e00      	cmp	r6, #0
100022fc:	d001      	beq.n	10002302 <optiga_crypt_tls_prf_sha256+0x92>
        {
            p_params->derived_key = (uint8_t *)derived_key;
100022fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
10002300:	6123      	str	r3, [r4, #16]
        }

        return_value = optiga_cmd_derive_key(me->my_cmd,
10002302:	6a20      	ldr	r0, [r4, #32]
10002304:	2101      	movs	r1, #1
10002306:	1c22      	adds	r2, r4, #0
10002308:	f003 fd92 	bl	10005e30 <optiga_cmd_derive_key>
1000230c:	1e05      	subs	r5, r0, #0
                                             0x01,
                                             (optiga_derive_key_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
1000230e:	d005      	beq.n	1000231c <optiga_crypt_tls_prf_sha256+0xac>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10002310:	2300      	movs	r3, #0
10002312:	85a3      	strh	r3, [r4, #44]	; 0x2c
10002314:	e002      	b.n	1000231c <optiga_crypt_tls_prf_sha256+0xac>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == seed) ||
           ((TRUE == export_to_host) && (NULL == derived_key)))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10002316:	4d04      	ldr	r5, [pc, #16]	; (10002328 <optiga_crypt_tls_prf_sha256+0xb8>)
10002318:	e000      	b.n	1000231c <optiga_crypt_tls_prf_sha256+0xac>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
1000231a:	4d04      	ldr	r5, [pc, #16]	; (1000232c <optiga_crypt_tls_prf_sha256+0xbc>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
1000231c:	1c20      	adds	r0, r4, #0
1000231e:	f7ff fc73 	bl	10001c08 <optiga_crypt_reset_protection_level>

    return (return_value);
}
10002322:	1c28      	adds	r0, r5, #0
10002324:	b007      	add	sp, #28
10002326:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002328:	00000403 	.word	0x00000403
1000232c:	00000405 	.word	0x00000405

10002330 <optiga_crypt_rsa_generate_keypair>:
                                                      uint8_t key_usage,
                                                      bool_t export_private_key,
                                                      void * private_key,
                                                      uint8_t * public_key,
                                                      uint16_t * public_key_length)
{
10002330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_generate_keypair(me,
10002332:	9c06      	ldr	r4, [sp, #24]
10002334:	9400      	str	r4, [sp, #0]
10002336:	9c07      	ldr	r4, [sp, #28]
10002338:	9401      	str	r4, [sp, #4]
1000233a:	9c08      	ldr	r4, [sp, #32]
1000233c:	9402      	str	r4, [sp, #8]
1000233e:	f7ff fca5 	bl	10001c8c <optiga_crypt_generate_keypair>
                                         key_usage,
                                         export_private_key,
                                         private_key,
                                         public_key,
                                         public_key_length));
}
10002342:	b004      	add	sp, #16
10002344:	bd10      	pop	{r4, pc}

10002346 <optiga_crypt_rsa_sign>:
                                          uint8_t digest_length,
                                          optiga_key_id_t private_key,
                                          uint8_t * signature,
                                          uint16_t * signature_length,
                                          uint16_t salt_length)
{
10002346:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002348:	ac06      	add	r4, sp, #24
1000234a:	8824      	ldrh	r4, [r4, #0]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_sign(me,
1000234c:	9400      	str	r4, [sp, #0]
1000234e:	9c07      	ldr	r4, [sp, #28]
10002350:	9401      	str	r4, [sp, #4]
10002352:	9c08      	ldr	r4, [sp, #32]
10002354:	9402      	str	r4, [sp, #8]
10002356:	f7ff fce7 	bl	10001d28 <optiga_crypt_sign.isra.0>
                             digest_length,
                             private_key,
                             signature,
                             signature_length,
                             salt_length));
}
1000235a:	b004      	add	sp, #16
1000235c:	bd10      	pop	{r4, pc}

1000235e <optiga_crypt_rsa_verify>:
                                            const uint8_t * signature,
                                            uint16_t signature_length,
                                            uint8_t public_key_source_type,
                                            const void * public_key,
                                            uint16_t salt_length)
{
1000235e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
10002360:	ac08      	add	r4, sp, #32
10002362:	cc40      	ldmia	r4!, {r6}
10002364:	8825      	ldrh	r5, [r4, #0]
10002366:	ac0a      	add	r4, sp, #40	; 0x28
10002368:	7824      	ldrb	r4, [r4, #0]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_verify(me,
1000236a:	9600      	str	r6, [sp, #0]
1000236c:	9402      	str	r4, [sp, #8]
1000236e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10002370:	9501      	str	r5, [sp, #4]
10002372:	9403      	str	r4, [sp, #12]
10002374:	f7ff fd28 	bl	10001dc8 <optiga_crypt_verify.isra.1>
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                salt_length));
}
10002378:	b004      	add	sp, #16
1000237a:	bd70      	pop	{r4, r5, r6, pc}

1000237c <optiga_crypt_rsa_encrypt_message>:
                                                     uint16_t label_length,
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
1000237c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000237e:	b087      	sub	sp, #28
10002380:	ac0e      	add	r4, sp, #56	; 0x38
10002382:	7827      	ldrb	r7, [r4, #0]
10002384:	469c      	mov	ip, r3
10002386:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
10002388:	9d10      	ldr	r5, [sp, #64]	; 0x40
1000238a:	9c11      	ldr	r4, [sp, #68]	; 0x44
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == message)||
1000238c:	2800      	cmp	r0, #0
1000238e:	d014      	beq.n	100023ba <optiga_crypt_rsa_encrypt_message+0x3e>
10002390:	6a03      	ldr	r3, [r0, #32]
10002392:	2b00      	cmp	r3, #0
10002394:	d011      	beq.n	100023ba <optiga_crypt_rsa_encrypt_message+0x3e>
10002396:	2a00      	cmp	r2, #0
10002398:	d00f      	beq.n	100023ba <optiga_crypt_rsa_encrypt_message+0x3e>
1000239a:	2e00      	cmp	r6, #0
1000239c:	d00d      	beq.n	100023ba <optiga_crypt_rsa_encrypt_message+0x3e>
            (NULL == public_key) || (NULL == encrypted_message) || (NULL == encrypted_message_length))
1000239e:	2d00      	cmp	r5, #0
100023a0:	d00b      	beq.n	100023ba <optiga_crypt_rsa_encrypt_message+0x3e>
100023a2:	2c00      	cmp	r4, #0
100023a4:	d009      	beq.n	100023ba <optiga_crypt_rsa_encrypt_message+0x3e>
        {
            break;
        }
#endif
        return_value =  optiga_crypt_rsa_enc_dec(me,
100023a6:	9403      	str	r4, [sp, #12]
100023a8:	2401      	movs	r4, #1
100023aa:	4663      	mov	r3, ip
100023ac:	9700      	str	r7, [sp, #0]
100023ae:	9601      	str	r6, [sp, #4]
100023b0:	9502      	str	r5, [sp, #8]
100023b2:	9404      	str	r4, [sp, #16]
100023b4:	f7ff fd62 	bl	10001e7c <optiga_crypt_rsa_enc_dec.isra.2>
100023b8:	e000      	b.n	100023bc <optiga_crypt_rsa_encrypt_message+0x40>
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{

    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
100023ba:	4801      	ldr	r0, [pc, #4]	; (100023c0 <optiga_crypt_rsa_encrypt_message+0x44>)
                                                 encrypted_message,
                                                 encrypted_message_length,
                                                 TRUE);
    } while (FALSE);
    return (return_value);
}
100023bc:	b007      	add	sp, #28
100023be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100023c0:	00000403 	.word	0x00000403

100023c4 <optiga_crypt_rsa_encrypt_session>:
                                                     uint16_t label_length,
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
100023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100023c6:	b087      	sub	sp, #28
100023c8:	ab0c      	add	r3, sp, #48	; 0x30
100023ca:	781c      	ldrb	r4, [r3, #0]
100023cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
100023ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == encrypted_message)|| (NULL == encrypted_message_length) ||
100023d0:	2800      	cmp	r0, #0
100023d2:	d01a      	beq.n	1000240a <optiga_crypt_rsa_encrypt_session+0x46>
100023d4:	6a03      	ldr	r3, [r0, #32]
100023d6:	2b00      	cmp	r3, #0
100023d8:	d017      	beq.n	1000240a <optiga_crypt_rsa_encrypt_session+0x46>
100023da:	2d00      	cmp	r5, #0
100023dc:	d015      	beq.n	1000240a <optiga_crypt_rsa_encrypt_session+0x46>
100023de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100023e0:	2b00      	cmp	r3, #0
100023e2:	d012      	beq.n	1000240a <optiga_crypt_rsa_encrypt_session+0x46>
100023e4:	2e00      	cmp	r6, #0
100023e6:	d010      	beq.n	1000240a <optiga_crypt_rsa_encrypt_session+0x46>
        {
            break;
        }
#endif
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_COMMAND_PROTECTION;
100023e8:	1c07      	adds	r7, r0, #0
100023ea:	2201      	movs	r2, #1
100023ec:	372e      	adds	r7, #46	; 0x2e
100023ee:	783b      	ldrb	r3, [r7, #0]
100023f0:	4313      	orrs	r3, r2
100023f2:	703b      	strb	r3, [r7, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        return_value =  optiga_crypt_rsa_enc_dec(me,
100023f4:	9204      	str	r2, [sp, #16]
100023f6:	2200      	movs	r2, #0
100023f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100023fa:	9400      	str	r4, [sp, #0]
100023fc:	9303      	str	r3, [sp, #12]
100023fe:	9601      	str	r6, [sp, #4]
10002400:	9502      	str	r5, [sp, #8]
10002402:	1c13      	adds	r3, r2, #0
10002404:	f7ff fd3a 	bl	10001e7c <optiga_crypt_rsa_enc_dec.isra.2>
10002408:	e000      	b.n	1000240c <optiga_crypt_rsa_encrypt_session+0x48>
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
1000240a:	4801      	ldr	r0, [pc, #4]	; (10002410 <optiga_crypt_rsa_encrypt_session+0x4c>)
                                                 encrypted_message,
                                                 encrypted_message_length,
                                                 TRUE);
    } while (FALSE);
    return (return_value);
}
1000240c:	b007      	add	sp, #28
1000240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002410:	00000403 	.word	0x00000403

10002414 <optiga_crypt_rsa_decrypt_and_export>:
                                                        const uint8_t * label,
                                                        uint16_t label_length,
                                                        optiga_key_id_t private_key,
                                                        uint8_t * message,
                                                        uint16_t * message_length)
{
10002414:	b5f0      	push	{r4, r5, r6, r7, lr}
10002416:	b089      	sub	sp, #36	; 0x24
10002418:	ac10      	add	r4, sp, #64	; 0x40
1000241a:	8827      	ldrh	r7, [r4, #0]
    optiga_key_id_t private_key_id;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == message) || (NULL == message_length)||
1000241c:	2800      	cmp	r0, #0
1000241e:	d01e      	beq.n	1000245e <optiga_crypt_rsa_decrypt_and_export+0x4a>
10002420:	6a04      	ldr	r4, [r0, #32]
10002422:	2c00      	cmp	r4, #0
10002424:	d01b      	beq.n	1000245e <optiga_crypt_rsa_decrypt_and_export+0x4a>
10002426:	9c11      	ldr	r4, [sp, #68]	; 0x44
10002428:	2c00      	cmp	r4, #0
1000242a:	d018      	beq.n	1000245e <optiga_crypt_rsa_decrypt_and_export+0x4a>
1000242c:	9c12      	ldr	r4, [sp, #72]	; 0x48
1000242e:	2c00      	cmp	r4, #0
10002430:	d015      	beq.n	1000245e <optiga_crypt_rsa_decrypt_and_export+0x4a>
10002432:	2a00      	cmp	r2, #0
10002434:	d013      	beq.n	1000245e <optiga_crypt_rsa_decrypt_and_export+0x4a>
        {
            break;
        }
#endif
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_RESPONSE_PROTECTION;
10002436:	1c06      	adds	r6, r0, #0
10002438:	2502      	movs	r5, #2
1000243a:	362e      	adds	r6, #46	; 0x2e
1000243c:	7834      	ldrb	r4, [r6, #0]
1000243e:	432c      	orrs	r4, r5
10002440:	7034      	strb	r4, [r6, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        private_key_id = private_key;
10002442:	241e      	movs	r4, #30
        return_value = optiga_crypt_rsa_enc_dec(me,
10002444:	2600      	movs	r6, #0
        }
#endif
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_RESPONSE_PROTECTION;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        private_key_id = private_key;
10002446:	446c      	add	r4, sp
10002448:	8027      	strh	r7, [r4, #0]
        return_value = optiga_crypt_rsa_enc_dec(me,
1000244a:	9401      	str	r4, [sp, #4]
1000244c:	9c11      	ldr	r4, [sp, #68]	; 0x44
1000244e:	9600      	str	r6, [sp, #0]
10002450:	9402      	str	r4, [sp, #8]
10002452:	9c12      	ldr	r4, [sp, #72]	; 0x48
10002454:	9604      	str	r6, [sp, #16]
10002456:	9403      	str	r4, [sp, #12]
10002458:	f7ff fd10 	bl	10001e7c <optiga_crypt_rsa_enc_dec.isra.2>
1000245c:	e000      	b.n	10002460 <optiga_crypt_rsa_decrypt_and_export+0x4c>
                                                        uint16_t label_length,
                                                        optiga_key_id_t private_key,
                                                        uint8_t * message,
                                                        uint16_t * message_length)
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
1000245e:	4801      	ldr	r0, [pc, #4]	; (10002464 <optiga_crypt_rsa_decrypt_and_export+0x50>)
                                                message_length,
                                                FALSE);
    } while (FALSE);

    return (return_value);
}
10002460:	b009      	add	sp, #36	; 0x24
10002462:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002464:	00000403 	.word	0x00000403

10002468 <optiga_crypt_rsa_decrypt_and_store>:
                                                       const uint8_t * encrypted_message,
                                                       uint16_t encrypted_message_length,
                                                       const uint8_t * label,
                                                       uint16_t label_length,
                                                       optiga_key_id_t private_key)
{
10002468:	b530      	push	{r4, r5, lr}
1000246a:	b089      	sub	sp, #36	; 0x24
1000246c:	ac0e      	add	r4, sp, #56	; 0x38
1000246e:	8824      	ldrh	r4, [r4, #0]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == encrypted_message))
10002470:	2800      	cmp	r0, #0
10002472:	d010      	beq.n	10002496 <optiga_crypt_rsa_decrypt_and_store+0x2e>
10002474:	6a05      	ldr	r5, [r0, #32]
10002476:	2d00      	cmp	r5, #0
10002478:	d00d      	beq.n	10002496 <optiga_crypt_rsa_decrypt_and_store+0x2e>
1000247a:	2a00      	cmp	r2, #0
1000247c:	d00b      	beq.n	10002496 <optiga_crypt_rsa_decrypt_and_store+0x2e>
        {
           break;
        }
#endif
        private_key_id = private_key;
1000247e:	251e      	movs	r5, #30
10002480:	446d      	add	r5, sp
10002482:	802c      	strh	r4, [r5, #0]
        return_value = optiga_crypt_rsa_enc_dec(me,
10002484:	2400      	movs	r4, #0
10002486:	9501      	str	r5, [sp, #4]
10002488:	9400      	str	r4, [sp, #0]
1000248a:	9402      	str	r4, [sp, #8]
1000248c:	9403      	str	r4, [sp, #12]
1000248e:	9404      	str	r4, [sp, #16]
10002490:	f7ff fcf4 	bl	10001e7c <optiga_crypt_rsa_enc_dec.isra.2>
10002494:	e000      	b.n	10002498 <optiga_crypt_rsa_decrypt_and_store+0x30>
                                                       uint16_t encrypted_message_length,
                                                       const uint8_t * label,
                                                       uint16_t label_length,
                                                       optiga_key_id_t private_key)
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10002496:	4801      	ldr	r0, [pc, #4]	; (1000249c <optiga_crypt_rsa_decrypt_and_store+0x34>)
                                                NULL,
                                                FALSE);
    } while (FALSE);

    return (return_value);
}
10002498:	b009      	add	sp, #36	; 0x24
1000249a:	bd30      	pop	{r4, r5, pc}
1000249c:	00000403 	.word	0x00000403

100024a0 <optiga_crypt_rsa_generate_pre_master_secret>:
#ifdef OPTIGA_CRYPT_RSA_PRE_MASTER_SECRET_ENABLED
optiga_lib_status_t optiga_crypt_rsa_generate_pre_master_secret(optiga_crypt_t * me,
                                                                const uint8_t * optional_data,
                                                                uint16_t optional_data_length,
                                                                uint16_t pre_master_secret_length)
{
100024a0:	b513      	push	{r0, r1, r4, lr}

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        /// Maximum length of shared secret supported by OPTIGA is 48 bytes, minimum is 8 bytes.
        if ((NULL == me) || (NULL == me->my_cmd))
100024a2:	2800      	cmp	r0, #0
100024a4:	d010      	beq.n	100024c8 <optiga_crypt_rsa_generate_pre_master_secret+0x28>
100024a6:	6a04      	ldr	r4, [r0, #32]
100024a8:	2c00      	cmp	r4, #0
100024aa:	d00d      	beq.n	100024c8 <optiga_crypt_rsa_generate_pre_master_secret+0x28>
        }
#endif

        /// The minimum difference between shared secret length and optional data length should be 8 bytes,
        /// since the minimum random length OPTIGA expects is 8 bytes (optional_data_length <= shared_length � 8 bytes).
        if (((optional_data_length + OPTIGA_CRYPT_MINIMUM_RANDOM_DATA_LENGTH) > pre_master_secret_length) ||
100024ac:	1dd4      	adds	r4, r2, #7
100024ae:	429c      	cmp	r4, r3
100024b0:	da0a      	bge.n	100024c8 <optiga_crypt_rsa_generate_pre_master_secret+0x28>
100024b2:	2a28      	cmp	r2, #40	; 0x28
100024b4:	d808      	bhi.n	100024c8 <optiga_crypt_rsa_generate_pre_master_secret+0x28>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }

        return_value = optiga_crypt_get_random(me,
100024b6:	1a9b      	subs	r3, r3, r2
100024b8:	9100      	str	r1, [sp, #0]
100024ba:	9201      	str	r2, [sp, #4]
100024bc:	b29b      	uxth	r3, r3
100024be:	2104      	movs	r1, #4
100024c0:	2200      	movs	r2, #0
100024c2:	f7ff fba7 	bl	10001c14 <optiga_crypt_get_random>
100024c6:	e000      	b.n	100024ca <optiga_crypt_rsa_generate_pre_master_secret+0x2a>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        /// Maximum length of shared secret supported by OPTIGA is 48 bytes, minimum is 8 bytes.
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
100024c8:	4800      	ldr	r0, [pc, #0]	; (100024cc <optiga_crypt_rsa_generate_pre_master_secret+0x2c>)
                                               optional_data,
                                               optional_data_length);
    } while (FALSE);

    return (return_value);
}
100024ca:	bd16      	pop	{r1, r2, r4, pc}
100024cc:	00000403 	.word	0x00000403

100024d0 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
100024d0:	b538      	push	{r3, r4, r5, lr}
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
100024d2:	6983      	ldr	r3, [r0, #24]
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
100024d4:	1c04      	adds	r4, r0, #0
100024d6:	1c0d      	adds	r5, r1, #0
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
100024d8:	2b00      	cmp	r3, #0
100024da:	d001      	beq.n	100024e0 <ifx_i2c_tl_event_handler+0x10>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
100024dc:	69c0      	ldr	r0, [r0, #28]
100024de:	4798      	blx	r3
    }
    p_ctx->close_state = event;
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
100024e0:	1c23      	adds	r3, r4, #0
100024e2:	2204      	movs	r2, #4
100024e4:	3329      	adds	r3, #41	; 0x29
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
    p_ctx->close_state = event;
100024e6:	85a5      	strh	r5, [r4, #44]	; 0x2c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
100024e8:	701a      	strb	r2, [r3, #0]
    switch (p_ctx->state)
100024ea:	3428      	adds	r4, #40	; 0x28
100024ec:	7823      	ldrb	r3, [r4, #0]
100024ee:	2b01      	cmp	r3, #1
100024f0:	d103      	bne.n	100024fa <ifx_i2c_tl_event_handler+0x2a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
100024f2:	2d00      	cmp	r5, #0
100024f4:	d101      	bne.n	100024fa <ifx_i2c_tl_event_handler+0x2a>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
100024f6:	3301      	adds	r3, #1
100024f8:	7023      	strb	r3, [r4, #0]
            break;
        }
        default:
            break;
    }
}
100024fa:	bd38      	pop	{r3, r4, r5, pc}

100024fc <ifx_i2c_init>:
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}

_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
100024fc:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
100024fe:	1c03      	adds	r3, r0, #0
10002500:	332e      	adds	r3, #46	; 0x2e
10002502:	781b      	ldrb	r3, [r3, #0]
10002504:	2202      	movs	r2, #2
10002506:	1c19      	adds	r1, r3, #0
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}

_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
10002508:	1c04      	adds	r4, r0, #0
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
1000250a:	4391      	bics	r1, r2
1000250c:	d12e      	bne.n	1000256c <ifx_i2c_init+0x70>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
    {
        switch (p_ifx_i2c_context->reset_state)
1000250e:	1c05      	adds	r5, r0, #0
10002510:	352a      	adds	r5, #42	; 0x2a
10002512:	782a      	ldrb	r2, [r5, #0]
10002514:	2ab2      	cmp	r2, #178	; 0xb2
10002516:	d015      	beq.n	10002544 <ifx_i2c_init+0x48>
10002518:	2ab3      	cmp	r2, #179	; 0xb3
1000251a:	d02b      	beq.n	10002574 <ifx_i2c_init+0x78>
1000251c:	2ab1      	cmp	r2, #177	; 0xb1
1000251e:	d12e      	bne.n	1000257e <ifx_i2c_init+0x82>
        {
            case IFX_I2C_STATE_RESET_PIN_LOW:
            {
                // Setting the Vdd & Reset pin to low
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
10002520:	2b00      	cmp	r3, #0
10002522:	d102      	bne.n	1000252a <ifx_i2c_init+0x2e>
                {
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
10002524:	6880      	ldr	r0, [r0, #8]
10002526:	f7fe fef5 	bl	10001314 <pal_gpio_set_low>
                }
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
1000252a:	68e0      	ldr	r0, [r4, #12]
1000252c:	f7fe fef2 	bl	10001314 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
10002530:	23b2      	movs	r3, #178	; 0xb2
10002532:	702b      	strb	r3, [r5, #0]
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
10002534:	239a      	movs	r3, #154	; 0x9a
10002536:	00db      	lsls	r3, r3, #3
10002538:	58e0      	ldr	r0, [r4, r3]
1000253a:	23fa      	movs	r3, #250	; 0xfa
1000253c:	4911      	ldr	r1, [pc, #68]	; (10002584 <ifx_i2c_init+0x88>)
1000253e:	1c22      	adds	r2, r4, #0
10002540:	00db      	lsls	r3, r3, #3
10002542:	e00f      	b.n	10002564 <ifx_i2c_init+0x68>
                break;
            }
            case IFX_I2C_STATE_RESET_PIN_HIGH:
            {
                // Setting the Vdd & Reset pin to high
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
10002544:	2b00      	cmp	r3, #0
10002546:	d102      	bne.n	1000254e <ifx_i2c_init+0x52>
                {
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
10002548:	6880      	ldr	r0, [r0, #8]
1000254a:	f7fe fed8 	bl	100012fe <pal_gpio_set_high>
                }
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
1000254e:	68e0      	ldr	r0, [r4, #12]
10002550:	f7fe fed5 	bl	100012fe <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
10002554:	23b3      	movs	r3, #179	; 0xb3
10002556:	702b      	strb	r3, [r5, #0]
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
10002558:	239a      	movs	r3, #154	; 0x9a
1000255a:	1c22      	adds	r2, r4, #0
1000255c:	00db      	lsls	r3, r3, #3
1000255e:	58e0      	ldr	r0, [r4, r3]
10002560:	4908      	ldr	r1, [pc, #32]	; (10002584 <ifx_i2c_init+0x88>)
10002562:	4b09      	ldr	r3, [pc, #36]	; (10002588 <ifx_i2c_init+0x8c>)
10002564:	f7ff f864 	bl	10001630 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)ifx_i2c_init,
                                                       (void * )p_ifx_i2c_context,
                                                       STARTUP_TIME_MSEC);
                api_status = IFX_I2C_STACK_SUCCESS;
10002568:	2000      	movs	r0, #0
                break;
1000256a:	e00a      	b.n	10002582 <ifx_i2c_init+0x86>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
1000256c:	23ae      	movs	r3, #174	; 0xae
1000256e:	2201      	movs	r2, #1
10002570:	33ff      	adds	r3, #255	; 0xff
10002572:	54c2      	strb	r2, [r0, r3]
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
10002574:	1c20      	adds	r0, r4, #0
10002576:	4905      	ldr	r1, [pc, #20]	; (1000258c <ifx_i2c_init+0x90>)
10002578:	f001 fb84 	bl	10003c84 <ifx_i2c_prl_init>
1000257c:	e001      	b.n	10002582 <ifx_i2c_init+0x86>
    }
}

_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
1000257e:	2081      	movs	r0, #129	; 0x81
10002580:	0040      	lsls	r0, r0, #1
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
    }

    return (api_status);
}
10002582:	bd38      	pop	{r3, r4, r5, pc}
10002584:	100024fd 	.word	0x100024fd
10002588:	00002ee0 	.word	0x00002ee0
1000258c:	100024d1 	.word	0x100024d1

10002590 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                     optiga_lib_status_t event,
                                     const uint8_t * p_data,
                                     uint16_t data_len)
{
10002590:	b538      	push	{r3, r4, r5, lr}
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
10002592:	1c03      	adds	r3, r0, #0
10002594:	2204      	movs	r2, #4
10002596:	3329      	adds	r3, #41	; 0x29
10002598:	701a      	strb	r2, [r3, #0]
    switch (p_ctx->state)
1000259a:	3b01      	subs	r3, #1
1000259c:	781b      	ldrb	r3, [r3, #0]
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                     optiga_lib_status_t event,
                                     const uint8_t * p_data,
                                     uint16_t data_len)
{
1000259e:	1c04      	adds	r4, r0, #0
100025a0:	1c0d      	adds	r5, r1, #0
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
    switch (p_ctx->state)
100025a2:	2b01      	cmp	r3, #1
100025a4:	d108      	bne.n	100025b8 <ifx_i2c_prl_close_event_handler+0x28>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
100025a6:	6900      	ldr	r0, [r0, #16]
100025a8:	f7fe ff28 	bl	100013fc <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
100025ac:	68a0      	ldr	r0, [r4, #8]
100025ae:	f7fe feb1 	bl	10001314 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
100025b2:	68e0      	ldr	r0, [r4, #12]
100025b4:	f7fe feae 	bl	10001314 <pal_gpio_set_low>
        }
        default:
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
100025b8:	69a3      	ldr	r3, [r4, #24]
100025ba:	2b00      	cmp	r3, #0
100025bc:	d002      	beq.n	100025c4 <ifx_i2c_prl_close_event_handler+0x34>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
100025be:	69e0      	ldr	r0, [r4, #28]
100025c0:	1c29      	adds	r1, r5, #0
100025c2:	4798      	blx	r3
    }
}
100025c4:	bd38      	pop	{r3, r4, r5, pc}

100025c6 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
100025c6:	b510      	push	{r4, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
100025c8:	1c04      	adds	r4, r0, #0
100025ca:	3429      	adds	r4, #41	; 0x29
100025cc:	7823      	ldrb	r3, [r4, #0]
100025ce:	2b03      	cmp	r3, #3
100025d0:	d015      	beq.n	100025fe <ifx_i2c_open+0x38>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
100025d2:	6903      	ldr	r3, [r0, #16]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
100025d4:	2200      	movs	r2, #0
    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
100025d6:	6098      	str	r0, [r3, #8]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
100025d8:	1c03      	adds	r3, r0, #0
100025da:	332e      	adds	r3, #46	; 0x2e
100025dc:	701a      	strb	r2, [r3, #0]
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
100025de:	3b04      	subs	r3, #4
100025e0:	32b1      	adds	r2, #177	; 0xb1
100025e2:	701a      	strb	r2, [r3, #0]
            p_ctx->do_pal_init = TRUE;
100025e4:	1c02      	adds	r2, r0, #0
100025e6:	2301      	movs	r3, #1
100025e8:	322f      	adds	r2, #47	; 0x2f
100025ea:	7013      	strb	r3, [r2, #0]
            p_ctx->state = IFX_I2C_STATE_UNINIT;
100025ec:	3a07      	subs	r2, #7
100025ee:	7013      	strb	r3, [r2, #0]

            api_status = ifx_i2c_init(p_ctx);
100025f0:	f7ff ff84 	bl	100024fc <ifx_i2c_init>
            if (IFX_I2C_STACK_SUCCESS == api_status)
100025f4:	2800      	cmp	r0, #0
100025f6:	d104      	bne.n	10002602 <ifx_i2c_open+0x3c>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
100025f8:	2303      	movs	r3, #3
100025fa:	7023      	strb	r3, [r4, #0]
100025fc:	e001      	b.n	10002602 <ifx_i2c_open+0x3c>
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
100025fe:	2081      	movs	r0, #129	; 0x81
10002600:	0040      	lsls	r0, r0, #1
                p_ctx->status = IFX_I2C_STATUS_BUSY;
            }
        }while(FALSE);
    }
    return (api_status);
}
10002602:	bd10      	pop	{r4, pc}

10002604 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
10002604:	b573      	push	{r0, r1, r4, r5, r6, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
10002606:	1c04      	adds	r4, r0, #0
10002608:	3428      	adds	r4, #40	; 0x28
1000260a:	7824      	ldrb	r4, [r4, #0]
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
1000260c:	9e06      	ldr	r6, [sp, #24]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
1000260e:	2c02      	cmp	r4, #2
10002610:	d112      	bne.n	10002638 <ifx_i2c_transceive+0x34>
10002612:	1c05      	adds	r5, r0, #0
10002614:	3529      	adds	r5, #41	; 0x29
10002616:	782c      	ldrb	r4, [r5, #0]
10002618:	2c03      	cmp	r4, #3
1000261a:	d00d      	beq.n	10002638 <ifx_i2c_transceive+0x34>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
1000261c:	6203      	str	r3, [r0, #32]
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
1000261e:	6246      	str	r6, [r0, #36]	; 0x24
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
10002620:	9600      	str	r6, [sp, #0]
10002622:	1c04      	adds	r4, r0, #0
10002624:	f001 fb8c 	bl	10003d40 <ifx_i2c_prl_transceive>
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
10002628:	2800      	cmp	r0, #0
1000262a:	d107      	bne.n	1000263c <ifx_i2c_transceive+0x38>
1000262c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
1000262e:	2b00      	cmp	r3, #0
10002630:	d104      	bne.n	1000263c <ifx_i2c_transceive+0x38>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
10002632:	3303      	adds	r3, #3
10002634:	702b      	strb	r3, [r5, #0]
10002636:	e001      	b.n	1000263c <ifx_i2c_transceive+0x38>
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
10002638:	2081      	movs	r0, #129	; 0x81
1000263a:	0040      	lsls	r0, r0, #1
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
    }
    return (api_status);
}
1000263c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

10002640 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
10002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
10002642:	1c07      	adds	r7, r0, #0
10002644:	2681      	movs	r6, #129	; 0x81
10002646:	3729      	adds	r7, #41	; 0x29
10002648:	783b      	ldrb	r3, [r7, #0]
1000264a:	0076      	lsls	r6, r6, #1
}


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
1000264c:	1c35      	adds	r5, r6, #0
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
1000264e:	2b03      	cmp	r3, #3
10002650:	d016      	beq.n	10002680 <ifx_i2c_close+0x40>
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
        p_ctx->state = IFX_I2C_STATE_UNINIT;
10002652:	1c03      	adds	r3, r0, #0
10002654:	2201      	movs	r2, #1
10002656:	3328      	adds	r3, #40	; 0x28
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
10002658:	8586      	strh	r6, [r0, #44]	; 0x2c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
1000265a:	490a      	ldr	r1, [pc, #40]	; (10002684 <ifx_i2c_close+0x44>)
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
        p_ctx->state = IFX_I2C_STATE_UNINIT;
1000265c:	701a      	strb	r2, [r3, #0]
1000265e:	1c04      	adds	r4, r0, #0
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
10002660:	f001 fb44 	bl	10003cec <ifx_i2c_prl_close>
10002664:	1e05      	subs	r5, r0, #0
        if (IFX_I2C_STACK_ERROR == api_status)
10002666:	42b5      	cmp	r5, r6
10002668:	d10a      	bne.n	10002680 <ifx_i2c_close+0x40>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
1000266a:	6920      	ldr	r0, [r4, #16]
1000266c:	f7fe fec6 	bl	100013fc <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
10002670:	68a0      	ldr	r0, [r4, #8]
10002672:	f7fe fe4f 	bl	10001314 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
10002676:	68e0      	ldr	r0, [r4, #12]
10002678:	f7fe fe4c 	bl	10001314 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
1000267c:	2304      	movs	r3, #4
1000267e:	703b      	strb	r3, [r7, #0]
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
}
10002680:	1c28      	adds	r0, r5, #0
10002682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002684:	10002591 	.word	0x10002591

10002688 <ifx_i2c_dl_calc_crc>:

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
}

_STATIC_H optiga_lib_status_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
10002688:	b570      	push	{r4, r5, r6, lr}
1000268a:	1c05      	adds	r5, r0, #0
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
1000268c:	1c04      	adds	r4, r0, #0
}

_STATIC_H optiga_lib_status_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;
1000268e:	2000      	movs	r0, #0
10002690:	1b63      	subs	r3, r4, r5

    for (i = 0; i < data_len; i++)
10002692:	b29b      	uxth	r3, r3
10002694:	428b      	cmp	r3, r1
10002696:	d213      	bcs.n	100026c0 <ifx_i2c_dl_calc_crc+0x38>
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
10002698:	230f      	movs	r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
1000269a:	7822      	ldrb	r2, [r4, #0]
1000269c:	3401      	adds	r4, #1
1000269e:	4042      	eors	r2, r0
    h2 = h1 & 0x0F;
100026a0:	4013      	ands	r3, r2
100026a2:	1c1e      	adds	r6, r3, #0
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
100026a4:	b2d2      	uxtb	r2, r2
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
100026a6:	011b      	lsls	r3, r3, #4
100026a8:	4053      	eors	r3, r2
    h4 = h3 >> 4;
100026aa:	091a      	lsrs	r2, r3, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
100026ac:	0a00      	lsrs	r0, r0, #8
100026ae:	005b      	lsls	r3, r3, #1
100026b0:	4050      	eors	r0, r2
100026b2:	405a      	eors	r2, r3
100026b4:	1c33      	adds	r3, r6, #0
100026b6:	0112      	lsls	r2, r2, #4
100026b8:	4053      	eors	r3, r2
100026ba:	00db      	lsls	r3, r3, #3
100026bc:	4058      	eors	r0, r3
100026be:	e7e7      	b.n	10002690 <ifx_i2c_dl_calc_crc+0x8>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
    }

    return (crc);
}
100026c0:	bd70      	pop	{r4, r5, r6, pc}

100026c2 <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
100026c2:	b570      	push	{r4, r5, r6, lr}
100026c4:	1c0d      	adds	r5, r1, #0
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
100026c6:	1c01      	adds	r1, r0, #0
100026c8:	3162      	adds	r1, #98	; 0x62

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
100026ca:	1c06      	adds	r6, r0, #0
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
100026cc:	7809      	ldrb	r1, [r1, #0]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
100026ce:	2a01      	cmp	r2, #1
100026d0:	d102      	bne.n	100026d8 <ifx_i2c_dl_send_frame_internal+0x16>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
100026d2:	2003      	movs	r0, #3
100026d4:	3101      	adds	r1, #1
100026d6:	4001      	ands	r1, r0
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
100026d8:	6f34      	ldr	r4, [r6, #112]	; 0x70
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
100026da:	2a02      	cmp	r2, #2
100026dc:	d102      	bne.n	100026e4 <ifx_i2c_dl_send_frame_internal+0x22>
    {
        ack_nr = 0;
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
100026de:	6f74      	ldr	r4, [r6, #116]	; 0x74
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
    {
        ack_nr = 0;
100026e0:	2100      	movs	r1, #0
100026e2:	e007      	b.n	100026f4 <ifx_i2c_dl_send_frame_internal+0x32>
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
100026e4:	2a00      	cmp	r2, #0
100026e6:	d105      	bne.n	100026f4 <ifx_i2c_dl_send_frame_internal+0x32>
100026e8:	1c30      	adds	r0, r6, #0
100026ea:	3060      	adds	r0, #96	; 0x60
100026ec:	7800      	ldrb	r0, [r0, #0]
100026ee:	2809      	cmp	r0, #9
100026f0:	d100      	bne.n	100026f4 <ifx_i2c_dl_send_frame_internal+0x32>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
100026f2:	6f74      	ldr	r4, [r6, #116]	; 0x74
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
100026f4:	0152      	lsls	r2, r2, #5
100026f6:	430a      	orrs	r2, r1
100026f8:	b2d2      	uxtb	r2, r2
100026fa:	7022      	strb	r2, [r4, #0]

    if (0 != frame_len) // Data frame
100026fc:	2d00      	cmp	r5, #0
100026fe:	d015      	beq.n	1000272c <ifx_i2c_dl_send_frame_internal+0x6a>
10002700:	1c31      	adds	r1, r6, #0
10002702:	1c32      	adds	r2, r6, #0
10002704:	3166      	adds	r1, #102	; 0x66
10002706:	3261      	adds	r2, #97	; 0x61
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
10002708:	2b00      	cmp	r3, #0
1000270a:	d002      	beq.n	10002712 <ifx_i2c_dl_send_frame_internal+0x50>
1000270c:	780b      	ldrb	r3, [r1, #0]
1000270e:	2b00      	cmp	r3, #0
10002710:	d004      	beq.n	1000271c <ifx_i2c_dl_send_frame_internal+0x5a>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
10002712:	2003      	movs	r0, #3
10002714:	7813      	ldrb	r3, [r2, #0]
10002716:	3301      	adds	r3, #1
10002718:	4003      	ands	r3, r0
1000271a:	7013      	strb	r3, [r2, #0]
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
1000271c:	7813      	ldrb	r3, [r2, #0]
1000271e:	7822      	ldrb	r2, [r4, #0]
10002720:	009b      	lsls	r3, r3, #2
10002722:	4313      	orrs	r3, r2
10002724:	7023      	strb	r3, [r4, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
10002726:	2300      	movs	r3, #0
10002728:	700b      	strb	r3, [r1, #0]
1000272a:	e003      	b.n	10002734 <ifx_i2c_dl_send_frame_internal+0x72>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
1000272c:	2380      	movs	r3, #128	; 0x80
1000272e:	425b      	negs	r3, r3
10002730:	431a      	orrs	r2, r3
10002732:	7022      	strb	r2, [r4, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
10002734:	0a2b      	lsrs	r3, r5, #8
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
10002736:	1ce9      	adds	r1, r5, #3
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
10002738:	7063      	strb	r3, [r4, #1]
    p_buffer[2] = (uint8_t)frame_len;
1000273a:	70a5      	strb	r5, [r4, #2]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
1000273c:	b289      	uxth	r1, r1
1000273e:	1c20      	adds	r0, r4, #0
10002740:	f7ff ffa2 	bl	10002688 <ifx_i2c_dl_calc_crc>
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
10002744:	1963      	adds	r3, r4, r5
10002746:	0a02      	lsrs	r2, r0, #8
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
10002748:	3505      	adds	r5, #5
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
1000274a:	70da      	strb	r2, [r3, #3]
    p_buffer[4 + frame_len] = (uint8_t)crc;
1000274c:	7118      	strb	r0, [r3, #4]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
1000274e:	b2aa      	uxth	r2, r5
10002750:	1c30      	adds	r0, r6, #0
10002752:	1c21      	adds	r1, r4, #0
10002754:	f000 fc8c 	bl	10003070 <ifx_i2c_pl_send_frame>
}
10002758:	bd70      	pop	{r4, r5, r6, pc}
	...

1000275c <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
1000275c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t current_event;
    uint8_t ftype;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
1000275e:	2500      	movs	r5, #0

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
10002760:	1c04      	adds	r4, r0, #0
    uint8_t seqctr = 0;
    uint8_t current_event;
    uint8_t ftype;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
    uint16_t crc_received = 0;
10002762:	1c2f      	adds	r7, r5, #0

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
10002764:	b089      	sub	sp, #36	; 0x24
10002766:	9104      	str	r1, [sp, #16]
10002768:	9203      	str	r2, [sp, #12]
1000276a:	9301      	str	r3, [sp, #4]
    uint8_t ack_nr = 0;
    uint8_t seqctr = 0;
    uint8_t current_event;
    uint8_t ftype;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
1000276c:	9505      	str	r5, [sp, #20]
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
    uint8_t ack_nr = 0;
    uint8_t seqctr = 0;
1000276e:	9500      	str	r5, [sp, #0]
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
    uint8_t ack_nr = 0;
10002770:	9506      	str	r5, [sp, #24]
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
10002772:	9502      	str	r5, [sp, #8]
10002774:	1c26      	adds	r6, r4, #0
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
10002776:	2383      	movs	r3, #131	; 0x83
10002778:	9a04      	ldr	r2, [sp, #16]
1000277a:	3660      	adds	r6, #96	; 0x60
1000277c:	005b      	lsls	r3, r3, #1
1000277e:	429a      	cmp	r2, r3
10002780:	d104      	bne.n	1000278c <ifx_i2c_pl_event_handler+0x30>
10002782:	7833      	ldrb	r3, [r6, #0]
10002784:	2b01      	cmp	r3, #1
10002786:	d001      	beq.n	1000278c <ifx_i2c_pl_event_handler+0x30>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
10002788:	2308      	movs	r3, #8
1000278a:	7033      	strb	r3, [r6, #0]
        }
        switch (p_ctx->dl.state)
1000278c:	7830      	ldrb	r0, [r6, #0]
1000278e:	3801      	subs	r0, #1
10002790:	280a      	cmp	r0, #10
10002792:	d900      	bls.n	10002796 <ifx_i2c_pl_event_handler+0x3a>
10002794:	e175      	b.n	10002a82 <ifx_i2c_pl_event_handler+0x326>
10002796:	f009 fa93 	bl	1000bcc0 <__gnu_thumb1_case_uhi>
1000279a:	000b      	.short	0x000b
1000279c:	00290012 	.word	0x00290012
100027a0:	011800f2 	.word	0x011800f2
100027a4:	0174010f 	.word	0x0174010f
100027a8:	00ea014e 	.word	0x00ea014e
100027ac:	00aa0062 	.word	0x00aa0062
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
100027b0:	9904      	ldr	r1, [sp, #16]
100027b2:	1e4b      	subs	r3, r1, #1
100027b4:	4199      	sbcs	r1, r3
100027b6:	2302      	movs	r3, #2
100027b8:	1a59      	subs	r1, r3, r1
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
100027ba:	b289      	uxth	r1, r1
100027bc:	e163      	b.n	10002a86 <ifx_i2c_pl_event_handler+0x32a>
100027be:	1c26      	adds	r6, r4, #0
            }
            break;
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
100027c0:	2381      	movs	r3, #129	; 0x81
100027c2:	9a04      	ldr	r2, [sp, #16]
100027c4:	3660      	adds	r6, #96	; 0x60
100027c6:	005b      	lsls	r3, r3, #1
100027c8:	429a      	cmp	r2, r3
100027ca:	d101      	bne.n	100027d0 <ifx_i2c_pl_event_handler+0x74>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
100027cc:	3bfd      	subs	r3, #253	; 0xfd
100027ce:	e00b      	b.n	100027e8 <ifx_i2c_pl_event_handler+0x8c>
                    break;
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
100027d0:	f7fe ff76 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
                p_ctx->dl.state = DL_STATE_RX;
100027d4:	2303      	movs	r3, #3
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
100027d6:	67a0      	str	r0, [r4, #120]	; 0x78
                p_ctx->dl.state = DL_STATE_RX;
100027d8:	7033      	strb	r3, [r6, #0]
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
100027da:	1c20      	adds	r0, r4, #0
100027dc:	f000 fc60 	bl	100030a0 <ifx_i2c_pl_receive_frame>
100027e0:	2800      	cmp	r0, #0
100027e2:	d100      	bne.n	100027e6 <ifx_i2c_pl_event_handler+0x8a>
100027e4:	e154      	b.n	10002a90 <ifx_i2c_pl_event_handler+0x334>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
100027e6:	2306      	movs	r3, #6
100027e8:	7033      	strb	r3, [r6, #0]
100027ea:	e7c3      	b.n	10002774 <ifx_i2c_pl_event_handler+0x18>
100027ec:	1c23      	adds	r3, r4, #0
100027ee:	3360      	adds	r3, #96	; 0x60
100027f0:	9307      	str	r3, [sp, #28]
                }
            }
            break;
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
100027f2:	2381      	movs	r3, #129	; 0x81
100027f4:	9a04      	ldr	r2, [sp, #16]
100027f6:	005b      	lsls	r3, r3, #1
100027f8:	429a      	cmp	r2, r3
100027fa:	d101      	bne.n	10002800 <ifx_i2c_pl_event_handler+0xa4>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
100027fc:	3bfd      	subs	r3, #253	; 0xfd
100027fe:	e003      	b.n	10002808 <ifx_i2c_pl_event_handler+0xac>
                    break;
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
10002800:	9b01      	ldr	r3, [sp, #4]
10002802:	2b04      	cmp	r3, #4
10002804:	d803      	bhi.n	1000280e <ifx_i2c_pl_event_handler+0xb2>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
10002806:	2306      	movs	r3, #6
10002808:	9a07      	ldr	r2, [sp, #28]
1000280a:	7013      	strb	r3, [r2, #0]
                    break;
1000280c:	e7b2      	b.n	10002774 <ifx_i2c_pl_event_handler+0x18>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
1000280e:	9b03      	ldr	r3, [sp, #12]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
10002810:	9a03      	ldr	r2, [sp, #12]
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
10002812:	781e      	ldrb	r6, [r3, #0]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
10002814:	7892      	ldrb	r2, [r2, #2]
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
10002816:	0673      	lsls	r3, r6, #25
10002818:	0f9b      	lsrs	r3, r3, #30
1000281a:	9300      	str	r3, [sp, #0]
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
1000281c:	2303      	movs	r3, #3
1000281e:	4033      	ands	r3, r6
10002820:	9306      	str	r3, [sp, #24]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
10002822:	0733      	lsls	r3, r6, #28
10002824:	0f9b      	lsrs	r3, r3, #30
10002826:	9302      	str	r3, [sp, #8]
                packet_len = (p_data[1] << 8) | p_data[2];
10002828:	9b03      	ldr	r3, [sp, #12]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
1000282a:	9803      	ldr	r0, [sp, #12]
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
1000282c:	785b      	ldrb	r3, [r3, #1]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
1000282e:	09f6      	lsrs	r6, r6, #7
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
10002830:	021b      	lsls	r3, r3, #8
10002832:	431a      	orrs	r2, r3
10002834:	9205      	str	r2, [sp, #20]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
10002836:	9b03      	ldr	r3, [sp, #12]
10002838:	9a01      	ldr	r2, [sp, #4]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
1000283a:	360a      	adds	r6, #10
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
1000283c:	189b      	adds	r3, r3, r2
1000283e:	1e9a      	subs	r2, r3, #2
10002840:	7812      	ldrb	r2, [r2, #0]
10002842:	3b01      	subs	r3, #1
10002844:	781b      	ldrb	r3, [r3, #0]
10002846:	0212      	lsls	r2, r2, #8
10002848:	4313      	orrs	r3, r2
1000284a:	1c1f      	adds	r7, r3, #0
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
1000284c:	9b01      	ldr	r3, [sp, #4]
1000284e:	1e99      	subs	r1, r3, #2
10002850:	b289      	uxth	r1, r1
10002852:	f7ff ff19 	bl	10002688 <ifx_i2c_dl_calc_crc>
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
10002856:	9b07      	ldr	r3, [sp, #28]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
10002858:	1c05      	adds	r5, r0, #0
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
1000285a:	701e      	strb	r6, [r3, #0]
            }
            break;
1000285c:	e78a      	b.n	10002774 <ifx_i2c_pl_event_handler+0x18>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
1000285e:	42af      	cmp	r7, r5
10002860:	d10a      	bne.n	10002878 <ifx_i2c_pl_event_handler+0x11c>
10002862:	9b05      	ldr	r3, [sp, #20]
10002864:	2b00      	cmp	r3, #0
10002866:	d007      	beq.n	10002878 <ifx_i2c_pl_event_handler+0x11c>
10002868:	9a01      	ldr	r2, [sp, #4]
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
1000286a:	3305      	adds	r3, #5
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
1000286c:	429a      	cmp	r2, r3
1000286e:	d103      	bne.n	10002878 <ifx_i2c_pl_event_handler+0x11c>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
10002870:	9b00      	ldr	r3, [sp, #0]
10002872:	3b02      	subs	r3, #2
10002874:	2b01      	cmp	r3, #1
10002876:	d803      	bhi.n	10002880 <ifx_i2c_pl_event_handler+0x124>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
10002878:	1c23      	adds	r3, r4, #0
1000287a:	2206      	movs	r2, #6
1000287c:	3360      	adds	r3, #96	; 0x60
1000287e:	e086      	b.n	1000298e <ifx_i2c_pl_event_handler+0x232>
                    break;
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
10002880:	1c21      	adds	r1, r4, #0
10002882:	2203      	movs	r2, #3
10002884:	1c25      	adds	r5, r4, #0
10002886:	3162      	adds	r1, #98	; 0x62
10002888:	780b      	ldrb	r3, [r1, #0]
1000288a:	3560      	adds	r5, #96	; 0x60
1000288c:	3301      	adds	r3, #1
1000288e:	4013      	ands	r3, r2
10002890:	9a02      	ldr	r2, [sp, #8]
10002892:	429a      	cmp	r2, r3
10002894:	d006      	beq.n	100028a4 <ifx_i2c_pl_event_handler+0x148>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
10002896:	2309      	movs	r3, #9
                    continue_state_machine = FALSE;
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
10002898:	2100      	movs	r1, #0
                    break;
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
1000289a:	702b      	strb	r3, [r5, #0]
                    continue_state_machine = FALSE;
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
1000289c:	1c20      	adds	r0, r4, #0
1000289e:	1c0a      	adds	r2, r1, #0
100028a0:	1c0b      	adds	r3, r1, #0
100028a2:	e08f      	b.n	100029c4 <ifx_i2c_pl_event_handler+0x268>
                    break;
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
100028a4:	1c23      	adds	r3, r4, #0
100028a6:	3361      	adds	r3, #97	; 0x61
100028a8:	781b      	ldrb	r3, [r3, #0]
100028aa:	9a06      	ldr	r2, [sp, #24]
100028ac:	4293      	cmp	r3, r2
100028ae:	d001      	beq.n	100028b4 <ifx_i2c_pl_event_handler+0x158>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
100028b0:	2309      	movs	r3, #9
100028b2:	e003      	b.n	100028bc <ifx_i2c_pl_event_handler+0x160>
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
100028b4:	9b00      	ldr	r3, [sp, #0]
100028b6:	2b01      	cmp	r3, #1
100028b8:	d102      	bne.n	100028c0 <ifx_i2c_pl_event_handler+0x164>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
100028ba:	3304      	adds	r3, #4
100028bc:	702b      	strb	r3, [r5, #0]
100028be:	e04d      	b.n	1000295c <ifx_i2c_pl_event_handler+0x200>
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
100028c0:	466b      	mov	r3, sp
100028c2:	7a1b      	ldrb	r3, [r3, #8]
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
100028c4:	9a01      	ldr	r2, [sp, #4]
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
100028c6:	700b      	strb	r3, [r1, #0]
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
100028c8:	6f60      	ldr	r0, [r4, #116]	; 0x74
100028ca:	9903      	ldr	r1, [sp, #12]
100028cc:	f009 fcaf 	bl	1000c22e <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
100028d0:	466a      	mov	r2, sp
100028d2:	1c23      	adds	r3, r4, #0
100028d4:	8892      	ldrh	r2, [r2, #4]
100028d6:	336e      	adds	r3, #110	; 0x6e
100028d8:	801a      	strh	r2, [r3, #0]

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
100028da:	1c22      	adds	r2, r4, #0
100028dc:	2300      	movs	r3, #0
100028de:	3264      	adds	r2, #100	; 0x64
100028e0:	7013      	strb	r3, [r2, #0]
                p_ctx->dl.state = DL_STATE_ACK;
100028e2:	2204      	movs	r2, #4
                continue_state_machine = FALSE;

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
100028e4:	1c20      	adds	r0, r4, #0
                p_ctx->dl.rx_buffer_size = data_len;

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
                p_ctx->dl.state = DL_STATE_ACK;
100028e6:	702a      	strb	r2, [r5, #0]
                continue_state_machine = FALSE;

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
100028e8:	1c19      	adds	r1, r3, #0
100028ea:	1c1a      	adds	r2, r3, #0
100028ec:	e06a      	b.n	100029c4 <ifx_i2c_pl_event_handler+0x268>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
100028ee:	9b00      	ldr	r3, [sp, #0]
100028f0:	1e9a      	subs	r2, r3, #2
100028f2:	4250      	negs	r0, r2
100028f4:	4150      	adcs	r0, r2
100028f6:	1c23      	adds	r3, r4, #0
100028f8:	3363      	adds	r3, #99	; 0x63
100028fa:	7819      	ldrb	r1, [r3, #0]
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
100028fc:	2209      	movs	r2, #9
100028fe:	3b03      	subs	r3, #3
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
10002900:	4281      	cmp	r1, r0
10002902:	d144      	bne.n	1000298e <ifx_i2c_pl_event_handler+0x232>
                }
                if (crc_received != crc_calculated)
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
10002904:	2205      	movs	r2, #5
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (crc_received != crc_calculated)
10002906:	42af      	cmp	r7, r5
10002908:	d141      	bne.n	1000298e <ifx_i2c_pl_event_handler+0x232>
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
1000290a:	9a01      	ldr	r2, [sp, #4]
1000290c:	2a05      	cmp	r2, #5
1000290e:	d81e      	bhi.n	1000294e <ifx_i2c_pl_event_handler+0x1f2>
10002910:	9a05      	ldr	r2, [sp, #20]
10002912:	2a00      	cmp	r2, #0
10002914:	d11b      	bne.n	1000294e <ifx_i2c_pl_event_handler+0x1f2>
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
10002916:	2900      	cmp	r1, #0
10002918:	d00d      	beq.n	10002936 <ifx_i2c_pl_event_handler+0x1da>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
1000291a:	2209      	movs	r2, #9
1000291c:	701a      	strb	r2, [r3, #0]
                    p_ctx->dl.resynced = 1;
1000291e:	1c23      	adds	r3, r4, #0
10002920:	3a08      	subs	r2, #8
10002922:	3366      	adds	r3, #102	; 0x66
10002924:	701a      	strb	r2, [r3, #0]
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002926:	3b05      	subs	r3, #5
10002928:	3202      	adds	r2, #2
1000292a:	701a      	strb	r2, [r3, #0]
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
1000292c:	705a      	strb	r2, [r3, #1]
                    break;
1000292e:	2302      	movs	r3, #2
10002930:	1c3d      	adds	r5, r7, #0
10002932:	9300      	str	r3, [sp, #0]
10002934:	e71e      	b.n	10002774 <ifx_i2c_pl_event_handler+0x18>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
10002936:	9a02      	ldr	r2, [sp, #8]
10002938:	2a00      	cmp	r2, #0
1000293a:	d108      	bne.n	1000294e <ifx_i2c_pl_event_handler+0x1f2>
1000293c:	9a00      	ldr	r2, [sp, #0]
1000293e:	2a03      	cmp	r2, #3
10002940:	d005      	beq.n	1000294e <ifx_i2c_pl_event_handler+0x1f2>
10002942:	1c22      	adds	r2, r4, #0
10002944:	3261      	adds	r2, #97	; 0x61
10002946:	7812      	ldrb	r2, [r2, #0]
10002948:	9906      	ldr	r1, [sp, #24]
1000294a:	428a      	cmp	r2, r1
1000294c:	d001      	beq.n	10002952 <ifx_i2c_pl_event_handler+0x1f6>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
1000294e:	2209      	movs	r2, #9
10002950:	e003      	b.n	1000295a <ifx_i2c_pl_event_handler+0x1fe>
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
10002952:	9a00      	ldr	r2, [sp, #0]
10002954:	2a01      	cmp	r2, #1
10002956:	d103      	bne.n	10002960 <ifx_i2c_pl_event_handler+0x204>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
10002958:	3204      	adds	r2, #4
1000295a:	701a      	strb	r2, [r3, #0]
                    break;
1000295c:	1c3d      	adds	r5, r7, #0
1000295e:	e709      	b.n	10002774 <ifx_i2c_pl_event_handler+0x18>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
10002960:	2201      	movs	r2, #1
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
10002962:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
                    break;
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
10002964:	701a      	strb	r2, [r3, #0]
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
10002966:	1c20      	adds	r0, r4, #0
10002968:	2102      	movs	r1, #2
1000296a:	9a02      	ldr	r2, [sp, #8]
1000296c:	e08e      	b.n	10002a8c <ifx_i2c_pl_event_handler+0x330>
            }
            break;
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
1000296e:	1c23      	adds	r3, r4, #0
10002970:	2203      	movs	r2, #3
10002972:	3360      	adds	r3, #96	; 0x60
10002974:	701a      	strb	r2, [r3, #0]
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
10002976:	1c20      	adds	r0, r4, #0
10002978:	f000 fb92 	bl	100030a0 <ifx_i2c_pl_receive_frame>
            }
            break;
1000297c:	e088      	b.n	10002a90 <ifx_i2c_pl_event_handler+0x334>
1000297e:	1c23      	adds	r3, r4, #0
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
10002980:	2281      	movs	r2, #129	; 0x81
10002982:	9904      	ldr	r1, [sp, #16]
10002984:	3360      	adds	r3, #96	; 0x60
10002986:	0052      	lsls	r2, r2, #1
10002988:	4291      	cmp	r1, r2
1000298a:	d102      	bne.n	10002992 <ifx_i2c_pl_event_handler+0x236>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
1000298c:	3afd      	subs	r2, #253	; 0xfd
1000298e:	701a      	strb	r2, [r3, #0]
                    break;
10002990:	e6f0      	b.n	10002774 <ifx_i2c_pl_event_handler+0x18>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
10002992:	2201      	movs	r2, #1
10002994:	701a      	strb	r2, [r3, #0]
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
10002996:	1c23      	adds	r3, r4, #0
10002998:	3363      	adds	r3, #99	; 0x63
1000299a:	7819      	ldrb	r1, [r3, #0]
1000299c:	330b      	adds	r3, #11
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
1000299e:	881b      	ldrh	r3, [r3, #0]
100029a0:	6f62      	ldr	r2, [r4, #116]	; 0x74
100029a2:	3b05      	subs	r3, #5
100029a4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
100029a6:	3203      	adds	r2, #3
100029a8:	b29b      	uxth	r3, r3
100029aa:	1c20      	adds	r0, r4, #0
                    break;
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
100029ac:	2900      	cmp	r1, #0
100029ae:	d001      	beq.n	100029b4 <ifx_i2c_pl_event_handler+0x258>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
100029b0:	2104      	movs	r1, #4
100029b2:	e06c      	b.n	10002a8e <ifx_i2c_pl_event_handler+0x332>
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
                else
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
100029b4:	2106      	movs	r1, #6
100029b6:	e06a      	b.n	10002a8e <ifx_i2c_pl_event_handler+0x332>
            break;
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
100029b8:	2302      	movs	r3, #2
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
100029ba:	2100      	movs	r1, #0
            break;
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
100029bc:	7033      	strb	r3, [r6, #0]
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
100029be:	1c20      	adds	r0, r4, #0
100029c0:	2201      	movs	r2, #1
100029c2:	1c0b      	adds	r3, r1, #0
100029c4:	f7ff fe7d 	bl	100026c2 <ifx_i2c_dl_send_frame_internal>
            }
            break;
100029c8:	e062      	b.n	10002a90 <ifx_i2c_pl_event_handler+0x334>

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
100029ca:	f7fe fe79 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
100029ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
100029d0:	1ac0      	subs	r0, r0, r3

    if (p_ctx->tl.api_start_time > current_time_stamp)
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
100029d2:	4b30      	ldr	r3, [pc, #192]	; (10002a94 <ifx_i2c_pl_event_handler+0x338>)
100029d4:	4298      	cmp	r0, r3
100029d6:	d824      	bhi.n	10002a22 <ifx_i2c_pl_event_handler+0x2c6>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
100029d8:	1c21      	adds	r1, r4, #0
100029da:	3164      	adds	r1, #100	; 0x64
100029dc:	780a      	ldrb	r2, [r1, #0]
100029de:	2a03      	cmp	r2, #3
100029e0:	d10f      	bne.n	10002a02 <ifx_i2c_pl_event_handler+0x2a6>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
100029e2:	2300      	movs	r3, #0

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_SUCCESS;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
100029e4:	3903      	subs	r1, #3
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
100029e6:	70cb      	strb	r3, [r1, #3]

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_SUCCESS;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
100029e8:	700a      	strb	r2, [r1, #0]
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
100029ea:	704a      	strb	r2, [r1, #1]
    p_ctx->dl.resynced = 1;
100029ec:	1c22      	adds	r2, r4, #0
100029ee:	2101      	movs	r1, #1
100029f0:	3266      	adds	r2, #102	; 0x66
100029f2:	7011      	strb	r1, [r2, #0]
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
100029f4:	3104      	adds	r1, #4
100029f6:	3a06      	subs	r2, #6
100029f8:	7011      	strb	r1, [r2, #0]
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
100029fa:	1c20      	adds	r0, r4, #0
100029fc:	1c19      	adds	r1, r3, #0
100029fe:	2202      	movs	r2, #2
10002a00:	e009      	b.n	10002a16 <ifx_i2c_pl_event_handler+0x2ba>
            status = ifx_i2c_dl_resync(p_ctx);
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
10002a02:	3201      	adds	r2, #1
            p_ctx->dl.state = DL_STATE_TX;
10002a04:	1c23      	adds	r3, r4, #0
            status = ifx_i2c_dl_resync(p_ctx);
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
10002a06:	700a      	strb	r2, [r1, #0]
            p_ctx->dl.state = DL_STATE_TX;
10002a08:	2202      	movs	r2, #2
10002a0a:	3360      	adds	r3, #96	; 0x60
10002a0c:	701a      	strb	r2, [r3, #0]
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
10002a0e:	8999      	ldrh	r1, [r3, #12]
10002a10:	1c20      	adds	r0, r4, #0
10002a12:	2200      	movs	r2, #0
10002a14:	2301      	movs	r3, #1
10002a16:	f7ff fe54 	bl	100026c2 <ifx_i2c_dl_send_frame_internal>
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
        {
            p_ctx->dl.state  = DL_STATE_NACK;
10002a1a:	2206      	movs	r2, #6
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
10002a1c:	2800      	cmp	r0, #0
10002a1e:	d101      	bne.n	10002a24 <ifx_i2c_pl_event_handler+0x2c8>
10002a20:	e003      	b.n	10002a2a <ifx_i2c_pl_event_handler+0x2ce>
            p_ctx->dl.state  = DL_STATE_NACK;
        }
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
10002a22:	2208      	movs	r2, #8
10002a24:	1c23      	adds	r3, r4, #0
10002a26:	3360      	adds	r3, #96	; 0x60
10002a28:	701a      	strb	r2, [r3, #0]
            break;
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
                if (DL_STATE_ERROR != p_ctx->dl.state)
10002a2a:	1c23      	adds	r3, r4, #0
10002a2c:	3360      	adds	r3, #96	; 0x60
10002a2e:	781b      	ldrb	r3, [r3, #0]
10002a30:	2b08      	cmp	r3, #8
10002a32:	d12d      	bne.n	10002a90 <ifx_i2c_pl_event_handler+0x334>
10002a34:	e69e      	b.n	10002774 <ifx_i2c_pl_event_handler+0x18>
                }
            }
            break;
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
10002a36:	1c22      	adds	r2, r4, #0
10002a38:	1c25      	adds	r5, r4, #0
10002a3a:	3266      	adds	r2, #102	; 0x66
10002a3c:	7813      	ldrb	r3, [r2, #0]
10002a3e:	3565      	adds	r5, #101	; 0x65
10002a40:	2b00      	cmp	r3, #0
10002a42:	d101      	bne.n	10002a48 <ifx_i2c_pl_event_handler+0x2ec>
                {
                    p_ctx->dl.error = 1;
10002a44:	3301      	adds	r3, #1
10002a46:	702b      	strb	r3, [r5, #0]
                }
                if (0 == p_ctx->dl.error)
10002a48:	782b      	ldrb	r3, [r5, #0]
10002a4a:	2b00      	cmp	r3, #0
10002a4c:	d105      	bne.n	10002a5a <ifx_i2c_pl_event_handler+0x2fe>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
10002a4e:	2101      	movs	r1, #1
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
10002a50:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
                }
                if (0 == p_ctx->dl.error)
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
10002a52:	7031      	strb	r1, [r6, #0]
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
10002a54:	1c20      	adds	r0, r4, #0
10002a56:	1c1a      	adds	r2, r3, #0
10002a58:	e019      	b.n	10002a8e <ifx_i2c_pl_event_handler+0x332>

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_SUCCESS;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002a5a:	1c21      	adds	r1, r4, #0
10002a5c:	2303      	movs	r3, #3
10002a5e:	3161      	adds	r1, #97	; 0x61
10002a60:	700b      	strb	r3, [r1, #0]
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
10002a62:	704b      	strb	r3, [r1, #1]
    p_ctx->dl.resynced = 1;
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
10002a64:	2100      	movs	r1, #0
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_SUCCESS;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
10002a66:	3b02      	subs	r3, #2
10002a68:	7013      	strb	r3, [r2, #0]
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
10002a6a:	3304      	adds	r3, #4
10002a6c:	7033      	strb	r3, [r6, #0]
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
10002a6e:	1c20      	adds	r0, r4, #0
10002a70:	1c0b      	adds	r3, r1, #0
10002a72:	2202      	movs	r2, #2
10002a74:	f7ff fe25 	bl	100026c2 <ifx_i2c_dl_send_frame_internal>
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
                    p_ctx->dl.state = DL_STATE_ERROR;
10002a78:	2308      	movs	r3, #8
10002a7a:	7033      	strb	r3, [r6, #0]
                    p_ctx->dl.error = 0;
10002a7c:	2300      	movs	r3, #0
10002a7e:	702b      	strb	r3, [r5, #0]
10002a80:	e006      	b.n	10002a90 <ifx_i2c_pl_event_handler+0x334>
                continue_state_machine = FALSE;
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
10002a82:	2101      	movs	r1, #1
10002a84:	7031      	strb	r1, [r6, #0]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
10002a86:	1c20      	adds	r0, r4, #0
10002a88:	2200      	movs	r2, #0
10002a8a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
10002a8c:	1c13      	adds	r3, r2, #0
10002a8e:	47a8      	blx	r5
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
10002a90:	b009      	add	sp, #36	; 0x24
10002a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002a94:	0002bf1f 	.word	0x0002bf1f

10002a98 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
10002a98:	b570      	push	{r4, r5, r6, lr}
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
10002a9a:	1c05      	adds	r5, r0, #0
10002a9c:	2300      	movs	r3, #0
10002a9e:	3560      	adds	r5, #96	; 0x60
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
10002aa0:	1c0e      	adds	r6, r1, #0
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
10002aa2:	702b      	strb	r3, [r5, #0]
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
10002aa4:	490e      	ldr	r1, [pc, #56]	; (10002ae0 <ifx_i2c_dl_init+0x48>)
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
10002aa6:	1c04      	adds	r4, r0, #0
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
10002aa8:	f000 faac 	bl	10003004 <ifx_i2c_pl_init>
10002aac:	2800      	cmp	r0, #0
10002aae:	d114      	bne.n	10002ada <ifx_i2c_dl_init+0x42>
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
10002ab0:	2301      	movs	r3, #1
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002ab2:	1c22      	adds	r2, r4, #0
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
10002ab4:	67e6      	str	r6, [r4, #124]	; 0x7c
    p_ctx->dl.state = DL_STATE_IDLE;
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002ab6:	3261      	adds	r2, #97	; 0x61
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
10002ab8:	702b      	strb	r3, [r5, #0]
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002aba:	3302      	adds	r3, #2
10002abc:	7013      	strb	r3, [r2, #0]
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
10002abe:	7053      	strb	r3, [r2, #1]
    p_ctx->dl.resynced = 0;
10002ac0:	1c23      	adds	r3, r4, #0
10002ac2:	3366      	adds	r3, #102	; 0x66
10002ac4:	7018      	strb	r0, [r3, #0]
    p_ctx->dl.error = 0;
10002ac6:	3b01      	subs	r3, #1
10002ac8:	7018      	strb	r0, [r3, #0]
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
10002aca:	23a9      	movs	r3, #169	; 0xa9
10002acc:	009b      	lsls	r3, r3, #2
10002ace:	18e3      	adds	r3, r4, r3
10002ad0:	6723      	str	r3, [r4, #112]	; 0x70
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
10002ad2:	4b04      	ldr	r3, [pc, #16]	; (10002ae4 <ifx_i2c_dl_init+0x4c>)
10002ad4:	18e3      	adds	r3, r4, r3
10002ad6:	6763      	str	r3, [r4, #116]	; 0x74

    return IFX_I2C_STACK_SUCCESS;
10002ad8:	e001      	b.n	10002ade <ifx_i2c_dl_init+0x46>

    p_ctx->dl.state = DL_STATE_UNINIT;
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
10002ada:	2081      	movs	r0, #129	; 0x81
10002adc:	0040      	lsls	r0, r0, #1
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;

    return IFX_I2C_STACK_SUCCESS;
}
10002ade:	bd70      	pop	{r4, r5, r6, pc}
10002ae0:	1000275d 	.word	0x1000275d
10002ae4:	000003ba 	.word	0x000003ba

10002ae8 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
10002ae8:	b508      	push	{r3, lr}
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
10002aea:	1c03      	adds	r3, r0, #0
10002aec:	3360      	adds	r3, #96	; 0x60
10002aee:	781a      	ldrb	r2, [r3, #0]
10002af0:	2a01      	cmp	r2, #1
10002af2:	d111      	bne.n	10002b18 <ifx_i2c_dl_send_frame+0x30>
10002af4:	2900      	cmp	r1, #0
10002af6:	d00f      	beq.n	10002b18 <ifx_i2c_dl_send_frame+0x30>
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->dl.state = DL_STATE_TX;
10002af8:	3201      	adds	r2, #1
10002afa:	701a      	strb	r2, [r3, #0]
    p_ctx->dl.retransmit_counter = 0;
10002afc:	1c02      	adds	r2, r0, #0
10002afe:	2300      	movs	r3, #0
10002b00:	3264      	adds	r2, #100	; 0x64
10002b02:	7013      	strb	r3, [r2, #0]
    p_ctx->dl.action_rx_only = 0;
10002b04:	3a01      	subs	r2, #1
10002b06:	7013      	strb	r3, [r2, #0]
    p_ctx->dl.tx_buffer_size = frame_len;
10002b08:	3209      	adds	r2, #9
10002b0a:	8011      	strh	r1, [r2, #0]
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
10002b0c:	220a      	movs	r2, #10
10002b0e:	6682      	str	r2, [r0, #104]	; 0x68

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
10002b10:	1c1a      	adds	r2, r3, #0
10002b12:	f7ff fdd6 	bl	100026c2 <ifx_i2c_dl_send_frame_internal>
10002b16:	e001      	b.n	10002b1c <ifx_i2c_dl_send_frame+0x34>
{
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
    {
        return (IFX_I2C_STACK_ERROR);
10002b18:	2081      	movs	r0, #129	; 0x81
10002b1a:	0040      	lsls	r0, r0, #1
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}
10002b1c:	bd08      	pop	{r3, pc}
	...

10002b20 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
10002b20:	1c02      	adds	r2, r0, #0

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
10002b22:	b510      	push	{r4, lr}
10002b24:	1c04      	adds	r4, r0, #0
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
    {
        return (IFX_I2C_STACK_ERROR);
10002b26:	2081      	movs	r0, #129	; 0x81

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
10002b28:	3260      	adds	r2, #96	; 0x60
10002b2a:	7813      	ldrb	r3, [r2, #0]
    {
        return (IFX_I2C_STACK_ERROR);
10002b2c:	0040      	lsls	r0, r0, #1

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
10002b2e:	2b01      	cmp	r3, #1
10002b30:	d10d      	bne.n	10002b4e <ifx_i2c_dl_receive_frame+0x2e>
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
10002b32:	2103      	movs	r1, #3
10002b34:	7011      	strb	r1, [r2, #0]
    p_ctx->dl.retransmit_counter = 0;
10002b36:	2100      	movs	r1, #0
    p_ctx->dl.action_rx_only = 1;
10002b38:	3203      	adds	r2, #3
        return (IFX_I2C_STACK_ERROR);
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
    p_ctx->dl.retransmit_counter = 0;
10002b3a:	7051      	strb	r1, [r2, #1]
    p_ctx->dl.action_rx_only = 1;
10002b3c:	7013      	strb	r3, [r2, #0]
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
10002b3e:	f7fe fdbf 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
10002b42:	4b03      	ldr	r3, [pc, #12]	; (10002b50 <ifx_i2c_dl_receive_frame+0x30>)

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
10002b44:	67a0      	str	r0, [r4, #120]	; 0x78
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
10002b46:	66a3      	str	r3, [r4, #104]	; 0x68

    return (ifx_i2c_pl_receive_frame(p_ctx));
10002b48:	1c20      	adds	r0, r4, #0
10002b4a:	f000 faa9 	bl	100030a0 <ifx_i2c_pl_receive_frame>
}
10002b4e:	bd10      	pop	{r4, pc}
10002b50:	0002bf20 	.word	0x0002bf20

10002b54 <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
10002b54:	1c0b      	adds	r3, r1, #0
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
10002b56:	1c01      	adds	r1, r0, #0

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
10002b58:	b510      	push	{r4, lr}
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
10002b5a:	3180      	adds	r1, #128	; 0x80
    p_ctx->pl.buffer_tx_len = 1;
10002b5c:	24cb      	movs	r4, #203	; 0xcb
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
10002b5e:	700b      	strb	r3, [r1, #0]
    p_ctx->pl.buffer_tx_len = 1;
10002b60:	2301      	movs	r3, #1
10002b62:	0064      	lsls	r4, r4, #1
10002b64:	5303      	strh	r3, [r0, r4]

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
10002b66:	3402      	adds	r4, #2
10002b68:	5302      	strh	r2, [r0, r4]
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
10002b6a:	22cd      	movs	r2, #205	; 0xcd
10002b6c:	0052      	lsls	r2, r2, #1
10002b6e:	5483      	strb	r3, [r0, r2]
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
10002b70:	3cd0      	subs	r4, #208	; 0xd0
10002b72:	3202      	adds	r2, #2
10002b74:	5284      	strh	r4, [r0, r2]
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
10002b76:	229c      	movs	r2, #156	; 0x9c
10002b78:	32ff      	adds	r2, #255	; 0xff
10002b7a:	5483      	strb	r3, [r0, r2]

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
10002b7c:	1c1a      	adds	r2, r3, #0
10002b7e:	6900      	ldr	r0, [r0, #16]
10002b80:	f7fe fc3e 	bl	10001400 <pal_i2c_write>
}
10002b84:	bd10      	pop	{r4, pc}

10002b86 <ifx_i2c_pl_status_poll_callback>:
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
}


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
10002b86:	b508      	push	{r3, lr}
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
10002b88:	2182      	movs	r1, #130	; 0x82
10002b8a:	2204      	movs	r2, #4
10002b8c:	f7ff ffe2 	bl	10002b54 <ifx_i2c_pl_read_register>
}
10002b90:	bd08      	pop	{r3, pc}

10002b92 <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
10002b92:	b570      	push	{r4, r5, r6, lr}
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
10002b94:	1c06      	adds	r6, r0, #0
10002b96:	3680      	adds	r6, #128	; 0x80

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
10002b98:	1c05      	adds	r5, r0, #0
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
10002b9a:	7031      	strb	r1, [r6, #0]

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
10002b9c:	1c14      	adds	r4, r2, #0
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
10002b9e:	1c19      	adds	r1, r3, #0
10002ba0:	3081      	adds	r0, #129	; 0x81
10002ba2:	f009 fb44 	bl	1000c22e <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
10002ba6:	23cb      	movs	r3, #203	; 0xcb

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
10002ba8:	2102      	movs	r1, #2
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
10002baa:	3401      	adds	r4, #1
10002bac:	b2a2      	uxth	r2, r4
10002bae:	005b      	lsls	r3, r3, #1
10002bb0:	52ea      	strh	r2, [r5, r3]

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
10002bb2:	3304      	adds	r3, #4
10002bb4:	54e9      	strb	r1, [r5, r3]
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
10002bb6:	31c6      	adds	r1, #198	; 0xc6
10002bb8:	3302      	adds	r3, #2
10002bba:	52e9      	strh	r1, [r5, r3]
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
10002bbc:	239c      	movs	r3, #156	; 0x9c
10002bbe:	39c7      	subs	r1, #199	; 0xc7
10002bc0:	33ff      	adds	r3, #255	; 0xff
10002bc2:	54e9      	strb	r1, [r5, r3]
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
10002bc4:	6928      	ldr	r0, [r5, #16]
10002bc6:	1c31      	adds	r1, r6, #0
10002bc8:	f7fe fc1a 	bl	10001400 <pal_i2c_write>
}
10002bcc:	bd70      	pop	{r4, r5, r6, pc}

10002bce <ifx_i2c_pal_poll_callback>:
        }
    }
}

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
10002bce:	b508      	push	{r3, lr}
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
10002bd0:	239c      	movs	r3, #156	; 0x9c
10002bd2:	33ff      	adds	r3, #255	; 0xff
10002bd4:	5cc3      	ldrb	r3, [r0, r3]
10002bd6:	2b01      	cmp	r3, #1
10002bd8:	d108      	bne.n	10002bec <ifx_i2c_pal_poll_callback+0x1e>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
10002bda:	1c01      	adds	r1, r0, #0
10002bdc:	3396      	adds	r3, #150	; 0x96
10002bde:	33ff      	adds	r3, #255	; 0xff
10002be0:	5ac2      	ldrh	r2, [r0, r3]
10002be2:	3180      	adds	r1, #128	; 0x80
10002be4:	6900      	ldr	r0, [r0, #16]
10002be6:	f7fe fc0b 	bl	10001400 <pal_i2c_write>
10002bea:	e009      	b.n	10002c00 <ifx_i2c_pal_poll_callback+0x32>
    }
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
10002bec:	2b02      	cmp	r3, #2
10002bee:	d107      	bne.n	10002c00 <ifx_i2c_pal_poll_callback+0x32>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
10002bf0:	1c01      	adds	r1, r0, #0
10002bf2:	3397      	adds	r3, #151	; 0x97
10002bf4:	33ff      	adds	r3, #255	; 0xff
10002bf6:	5ac2      	ldrh	r2, [r0, r3]
10002bf8:	3180      	adds	r1, #128	; 0x80
10002bfa:	6900      	ldr	r0, [r0, #16]
10002bfc:	f7fe fc2a 	bl	10001454 <pal_i2c_read>
    }
}
10002c00:	bd08      	pop	{r3, pc}
	...

10002c04 <ifx_i2c_pl_set_bit_rate>:
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
}

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
10002c04:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
10002c06:	2300      	movs	r3, #0
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
}

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
10002c08:	1c04      	adds	r4, r0, #0
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
10002c0a:	6900      	ldr	r0, [r0, #16]
10002c0c:	68c5      	ldr	r5, [r0, #12]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
10002c0e:	60c3      	str	r3, [r0, #12]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
10002c10:	f7fe fc4c 	bl	100014ac <pal_i2c_set_bitrate>
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
10002c14:	6923      	ldr	r3, [r4, #16]
10002c16:	60dd      	str	r5, [r3, #12]
    if (PAL_I2C_EVENT_SUCCESS != status)
10002c18:	2800      	cmp	r0, #0
10002c1a:	d012      	beq.n	10002c42 <ifx_i2c_pl_set_bit_rate+0x3e>
    {
        if (0 != (p_ctx->pl.retry_counter--))
10002c1c:	22ce      	movs	r2, #206	; 0xce
10002c1e:	0052      	lsls	r2, r2, #1
10002c20:	5aa3      	ldrh	r3, [r4, r2]
10002c22:	1e59      	subs	r1, r3, #1
10002c24:	52a1      	strh	r1, [r4, r2]
10002c26:	2b00      	cmp	r3, #0
10002c28:	d009      	beq.n	10002c3e <ifx_i2c_pl_set_bit_rate+0x3a>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
10002c2a:	239a      	movs	r3, #154	; 0x9a
10002c2c:	00db      	lsls	r3, r3, #3
10002c2e:	58e0      	ldr	r0, [r4, r3]
10002c30:	4904      	ldr	r1, [pc, #16]	; (10002c44 <ifx_i2c_pl_set_bit_rate+0x40>)
10002c32:	1c22      	adds	r2, r4, #0
10002c34:	3be8      	subs	r3, #232	; 0xe8
10002c36:	f7fe fcfb 	bl	10001630 <pal_os_event_register_callback_oneshot>
10002c3a:	2001      	movs	r0, #1
10002c3c:	e001      	b.n	10002c42 <ifx_i2c_pl_set_bit_rate+0x3e>
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
10002c3e:	2081      	movs	r0, #129	; 0x81
10002c40:	0040      	lsls	r0, r0, #1
        status = IFX_I2C_STACK_SUCCESS;
    }

    return (status);

}
10002c42:	bd38      	pop	{r3, r4, r5, pc}
10002c44:	10002c49 	.word	0x10002c49

10002c48 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
10002c48:	b573      	push	{r0, r1, r4, r5, r6, lr}
10002c4a:	1c04      	adds	r4, r0, #0
    optiga_lib_status_t event = (uint8_t)IFX_I2C_STACK_ERROR;
10002c4c:	2102      	movs	r1, #2
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
10002c4e:	8883      	ldrh	r3, [r0, #4]
10002c50:	ae01      	add	r6, sp, #4
10002c52:	0a1a      	lsrs	r2, r3, #8
10002c54:	7032      	strb	r2, [r6, #0]
10002c56:	7073      	strb	r3, [r6, #1]

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
10002c58:	25d6      	movs	r5, #214	; 0xd6
10002c5a:	006d      	lsls	r5, r5, #1
10002c5c:	5d63      	ldrb	r3, [r4, r5]
10002c5e:	2b55      	cmp	r3, #85	; 0x55
10002c60:	d064      	beq.n	10002d2c <ifx_i2c_pl_negotiation_event_handler+0xe4>
10002c62:	d812      	bhi.n	10002c8a <ifx_i2c_pl_negotiation_event_handler+0x42>
10002c64:	2b22      	cmp	r3, #34	; 0x22
10002c66:	d100      	bne.n	10002c6a <ifx_i2c_pl_negotiation_event_handler+0x22>
10002c68:	e08a      	b.n	10002d80 <ifx_i2c_pl_negotiation_event_handler+0x138>
10002c6a:	d809      	bhi.n	10002c80 <ifx_i2c_pl_negotiation_event_handler+0x38>
10002c6c:	2b11      	cmp	r3, #17
10002c6e:	d000      	beq.n	10002c72 <ifx_i2c_pl_negotiation_event_handler+0x2a>
10002c70:	e0ab      	b.n	10002dca <ifx_i2c_pl_negotiation_event_handler+0x182>
            }
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
10002c72:	2322      	movs	r3, #34	; 0x22
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
10002c74:	1c20      	adds	r0, r4, #0
            }
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
10002c76:	5563      	strb	r3, [r4, r5]
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
10002c78:	2181      	movs	r1, #129	; 0x81
10002c7a:	2202      	movs	r2, #2
10002c7c:	1c33      	adds	r3, r6, #0
10002c7e:	e07c      	b.n	10002d7a <ifx_i2c_pl_negotiation_event_handler+0x132>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
10002c80:	2b33      	cmp	r3, #51	; 0x33
10002c82:	d029      	beq.n	10002cd8 <ifx_i2c_pl_negotiation_event_handler+0x90>
10002c84:	2b44      	cmp	r3, #68	; 0x44
10002c86:	d029      	beq.n	10002cdc <ifx_i2c_pl_negotiation_event_handler+0x94>
10002c88:	e09f      	b.n	10002dca <ifx_i2c_pl_negotiation_event_handler+0x182>
10002c8a:	2b88      	cmp	r3, #136	; 0x88
10002c8c:	d100      	bne.n	10002c90 <ifx_i2c_pl_negotiation_event_handler+0x48>
10002c8e:	e07d      	b.n	10002d8c <ifx_i2c_pl_negotiation_event_handler+0x144>
10002c90:	d804      	bhi.n	10002c9c <ifx_i2c_pl_negotiation_event_handler+0x54>
10002c92:	2b66      	cmp	r3, #102	; 0x66
10002c94:	d052      	beq.n	10002d3c <ifx_i2c_pl_negotiation_event_handler+0xf4>
10002c96:	2b77      	cmp	r3, #119	; 0x77
10002c98:	d05f      	beq.n	10002d5a <ifx_i2c_pl_negotiation_event_handler+0x112>
10002c9a:	e096      	b.n	10002dca <ifx_i2c_pl_negotiation_event_handler+0x182>
10002c9c:	2baa      	cmp	r3, #170	; 0xaa
10002c9e:	d100      	bne.n	10002ca2 <ifx_i2c_pl_negotiation_event_handler+0x5a>
10002ca0:	e085      	b.n	10002dae <ifx_i2c_pl_negotiation_event_handler+0x166>
10002ca2:	2bbb      	cmp	r3, #187	; 0xbb
10002ca4:	d000      	beq.n	10002ca8 <ifx_i2c_pl_negotiation_event_handler+0x60>
10002ca6:	e090      	b.n	10002dca <ifx_i2c_pl_negotiation_event_handler+0x182>
        {
            // Set initial frequency to PL_DEFAULT_FREQUENCY to be able to negotiate with slave
            case PL_INIT_SET_FREQ_DEFAULT:
            {
                // Default frequency set to master
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
10002ca8:	2164      	movs	r1, #100	; 0x64
10002caa:	1c20      	adds	r0, r4, #0
10002cac:	f7ff ffaa 	bl	10002c04 <ifx_i2c_pl_set_bit_rate>
10002cb0:	1e01      	subs	r1, r0, #0
                if (IFX_I2C_STACK_SUCCESS == event)
10002cb2:	d101      	bne.n	10002cb8 <ifx_i2c_pl_negotiation_event_handler+0x70>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
10002cb4:	2333      	movs	r3, #51	; 0x33
10002cb6:	e057      	b.n	10002d68 <ifx_i2c_pl_negotiation_event_handler+0x120>
                    continue_negotiation = TRUE;
                }
                else if (IFX_I2C_STACK_ERROR == event)
10002cb8:	2381      	movs	r3, #129	; 0x81
10002cba:	005b      	lsls	r3, r3, #1
10002cbc:	4298      	cmp	r0, r3
10002cbe:	d000      	beq.n	10002cc2 <ifx_i2c_pl_negotiation_event_handler+0x7a>
10002cc0:	e083      	b.n	10002dca <ifx_i2c_pl_negotiation_event_handler+0x182>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
10002cc2:	3b58      	subs	r3, #88	; 0x58
10002cc4:	5563      	strb	r3, [r4, r5]
                    p_buffer = NULL;
                    buffer_len = 0;
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
10002cc6:	239a      	movs	r3, #154	; 0x9a
10002cc8:	00db      	lsls	r3, r3, #3
10002cca:	58e0      	ldr	r0, [r4, r3]
10002ccc:	493f      	ldr	r1, [pc, #252]	; (10002dcc <ifx_i2c_pl_negotiation_event_handler+0x184>)
10002cce:	1c22      	adds	r2, r4, #0
10002cd0:	4b3f      	ldr	r3, [pc, #252]	; (10002dd0 <ifx_i2c_pl_negotiation_event_handler+0x188>)
10002cd2:	f7fe fcad 	bl	10001630 <pal_os_event_register_callback_oneshot>
10002cd6:	e078      	b.n	10002dca <ifx_i2c_pl_negotiation_event_handler+0x182>
            }
            break;
            // Read the current Max frequency supported by slave
            case PL_INIT_GET_FREQ_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
10002cd8:	2344      	movs	r3, #68	; 0x44
10002cda:	e028      	b.n	10002d2e <ifx_i2c_pl_negotiation_event_handler+0xe6>
            }
            break;
            // Set the I2C mode register
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
10002cdc:	1c23      	adds	r3, r4, #0
10002cde:	1c22      	adds	r2, r4, #0
10002ce0:	3382      	adds	r3, #130	; 0x82
10002ce2:	781b      	ldrb	r3, [r3, #0]
10002ce4:	3283      	adds	r2, #131	; 0x83
10002ce6:	7812      	ldrb	r2, [r2, #0]
10002ce8:	021b      	lsls	r3, r3, #8

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
10002cea:	4668      	mov	r0, sp
            }
            break;
            // Set the I2C mode register
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
10002cec:	4313      	orrs	r3, r2

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
10002cee:	2280      	movs	r2, #128	; 0x80
10002cf0:	7002      	strb	r2, [r0, #0]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
10002cf2:	8860      	ldrh	r0, [r4, #2]
10002cf4:	3211      	adds	r2, #17
10002cf6:	32ff      	adds	r2, #255	; 0xff
10002cf8:	4290      	cmp	r0, r2
10002cfa:	d906      	bls.n	10002d0a <ifx_i2c_pl_negotiation_event_handler+0xc2>
10002cfc:	4293      	cmp	r3, r2
10002cfe:	d810      	bhi.n	10002d22 <ifx_i2c_pl_negotiation_event_handler+0xda>
                {
                    //Change to FM+ mode if slave's current supported frequency is below user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
10002d00:	2304      	movs	r3, #4
10002d02:	466a      	mov	r2, sp
10002d04:	7053      	strb	r3, [r2, #1]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
10002d06:	3351      	adds	r3, #81	; 0x51
10002d08:	e005      	b.n	10002d16 <ifx_i2c_pl_negotiation_event_handler+0xce>
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
                }
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
10002d0a:	4293      	cmp	r3, r2
10002d0c:	d909      	bls.n	10002d22 <ifx_i2c_pl_negotiation_event_handler+0xda>
                {
                    //Change to SM&FM mode if slave's current supported frequency is above user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
10002d0e:	2303      	movs	r3, #3
10002d10:	466a      	mov	r2, sp
10002d12:	7053      	strb	r3, [r2, #1]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
10002d14:	3352      	adds	r3, #82	; 0x52
10002d16:	5563      	strb	r3, [r4, r5]
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
10002d18:	1c20      	adds	r0, r4, #0
10002d1a:	2189      	movs	r1, #137	; 0x89
10002d1c:	2202      	movs	r2, #2
10002d1e:	466b      	mov	r3, sp
10002d20:	e02b      	b.n	10002d7a <ifx_i2c_pl_negotiation_event_handler+0x132>
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
10002d22:	23d6      	movs	r3, #214	; 0xd6
10002d24:	2266      	movs	r2, #102	; 0x66
10002d26:	005b      	lsls	r3, r3, #1
10002d28:	54e2      	strb	r2, [r4, r3]
10002d2a:	e795      	b.n	10002c58 <ifx_i2c_pl_negotiation_event_handler+0x10>
            }
            break;
            // After setting I2C mode register, read the slave's supported frequency
            case PL_INIT_READ_FREQ:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
10002d2c:	2366      	movs	r3, #102	; 0x66
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
10002d2e:	1c20      	adds	r0, r4, #0
10002d30:	2184      	movs	r1, #132	; 0x84
10002d32:	2204      	movs	r2, #4
            }
            break;
            // After setting I2C mode register, read the slave's supported frequency
            case PL_INIT_READ_FREQ:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
10002d34:	5563      	strb	r3, [r4, r5]
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
10002d36:	f7ff ff0d 	bl	10002b54 <ifx_i2c_pl_read_register>
            }
            break;
10002d3a:	e046      	b.n	10002dca <ifx_i2c_pl_negotiation_event_handler+0x182>
            // Verify the requested frequency and slave's supported frequency
            case PL_INIT_VERIFY_FREQ:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
10002d3c:	1c23      	adds	r3, r4, #0
10002d3e:	1c22      	adds	r2, r4, #0
10002d40:	3382      	adds	r3, #130	; 0x82
10002d42:	3283      	adds	r2, #131	; 0x83
10002d44:	781b      	ldrb	r3, [r3, #0]
10002d46:	7810      	ldrb	r0, [r2, #0]
                if (p_ctx->frequency > slave_frequency)
10002d48:	8862      	ldrh	r2, [r4, #2]
            }
            break;
            // Verify the requested frequency and slave's supported frequency
            case PL_INIT_VERIFY_FREQ:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
10002d4a:	021b      	lsls	r3, r3, #8
                if (p_ctx->frequency > slave_frequency)
10002d4c:	4303      	orrs	r3, r0
10002d4e:	429a      	cmp	r2, r3
10002d50:	d901      	bls.n	10002d56 <ifx_i2c_pl_negotiation_event_handler+0x10e>
                {
                    LOG_PL("[IFX-PL]: Unexpected frequency in MAX_SCL_FREQU\n");
                    p_buffer = NULL;
                    buffer_len = 0;
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
10002d52:	23aa      	movs	r3, #170	; 0xaa
10002d54:	e008      	b.n	10002d68 <ifx_i2c_pl_negotiation_event_handler+0x120>
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
10002d56:	2377      	movs	r3, #119	; 0x77
10002d58:	e006      	b.n	10002d68 <ifx_i2c_pl_negotiation_event_handler+0x120>
            break;
            // Frequency negotiated, Set frequency at master
            case PL_INIT_AGREE_FREQ:
            {
                // Frequency negotiation between master and slave is complete
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
10002d5a:	8861      	ldrh	r1, [r4, #2]
10002d5c:	1c20      	adds	r0, r4, #0
10002d5e:	f7ff ff51 	bl	10002c04 <ifx_i2c_pl_set_bit_rate>
10002d62:	1e01      	subs	r1, r0, #0
                if (IFX_I2C_STACK_SUCCESS == event)
10002d64:	d102      	bne.n	10002d6c <ifx_i2c_pl_negotiation_event_handler+0x124>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
10002d66:	2311      	movs	r3, #17
10002d68:	5563      	strb	r3, [r4, r5]
10002d6a:	e775      	b.n	10002c58 <ifx_i2c_pl_negotiation_event_handler+0x10>
                    continue_negotiation = TRUE;
                }
                else if (IFX_I2C_STACK_ERROR == event)
10002d6c:	2381      	movs	r3, #129	; 0x81
10002d6e:	005b      	lsls	r3, r3, #1
10002d70:	4298      	cmp	r0, r3
10002d72:	d12a      	bne.n	10002dca <ifx_i2c_pl_negotiation_event_handler+0x182>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
10002d74:	3b58      	subs	r3, #88	; 0x58
10002d76:	5563      	strb	r3, [r4, r5]
10002d78:	e027      	b.n	10002dca <ifx_i2c_pl_negotiation_event_handler+0x182>
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
10002d7a:	f7ff ff0a 	bl	10002b92 <ifx_i2c_pl_write_register>
            }
            break;
10002d7e:	e024      	b.n	10002dca <ifx_i2c_pl_negotiation_event_handler+0x182>
            // Read the frame length to verify
            case PL_INIT_GET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
10002d80:	2388      	movs	r3, #136	; 0x88
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
10002d82:	1c20      	adds	r0, r4, #0
            }
            break;
            // Read the frame length to verify
            case PL_INIT_GET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
10002d84:	5563      	strb	r3, [r4, r5]
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
10002d86:	2181      	movs	r1, #129	; 0x81
10002d88:	2202      	movs	r2, #2
10002d8a:	e7d4      	b.n	10002d36 <ifx_i2c_pl_negotiation_event_handler+0xee>
            }
            break;
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
10002d8c:	23aa      	movs	r3, #170	; 0xaa
10002d8e:	5563      	strb	r3, [r4, r5]
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
10002d90:	1c23      	adds	r3, r4, #0
10002d92:	1c22      	adds	r2, r4, #0
10002d94:	3380      	adds	r3, #128	; 0x80
10002d96:	781b      	ldrb	r3, [r3, #0]
10002d98:	3281      	adds	r2, #129	; 0x81
10002d9a:	7812      	ldrb	r2, [r2, #0]
10002d9c:	021b      	lsls	r3, r3, #8
10002d9e:	4313      	orrs	r3, r2
                // Error if slave's frame length is more than requested frame length
                if (p_ctx->frame_size >= slave_frame_len)
10002da0:	88a2      	ldrh	r2, [r4, #4]
10002da2:	429a      	cmp	r2, r3
10002da4:	d200      	bcs.n	10002da8 <ifx_i2c_pl_negotiation_event_handler+0x160>
10002da6:	e757      	b.n	10002c58 <ifx_i2c_pl_negotiation_event_handler+0x10>
                {
                    p_ctx->frame_size = slave_frame_len;
10002da8:	80a3      	strh	r3, [r4, #4]
                    event = IFX_I2C_STACK_SUCCESS;
10002daa:	2100      	movs	r1, #0
10002dac:	e754      	b.n	10002c58 <ifx_i2c_pl_negotiation_event_handler+0x10>
10002dae:	23a0      	movs	r3, #160	; 0xa0
            break;
            case PL_INIT_DONE:
            {
                if (IFX_I2C_STACK_SUCCESS == event)
                {
                    p_ctx->pl.frame_state = PL_STATE_READY;
10002db0:	2202      	movs	r2, #2
10002db2:	33ff      	adds	r3, #255	; 0xff
                continue_negotiation = TRUE;
            }
            break;
            case PL_INIT_DONE:
            {
                if (IFX_I2C_STACK_SUCCESS == event)
10002db4:	2900      	cmp	r1, #0
10002db6:	d000      	beq.n	10002dba <ifx_i2c_pl_negotiation_event_handler+0x172>
                {
                    p_ctx->pl.frame_state = PL_STATE_READY;
                }
                else
                {
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
10002db8:	2200      	movs	r2, #0
10002dba:	54e2      	strb	r2, [r4, r3]
                }
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
10002dbc:	23d4      	movs	r3, #212	; 0xd4
10002dbe:	2200      	movs	r2, #0
10002dc0:	005b      	lsls	r3, r3, #1
10002dc2:	58e5      	ldr	r5, [r4, r3]
10002dc4:	1c20      	adds	r0, r4, #0
10002dc6:	1c13      	adds	r3, r2, #0
10002dc8:	47a8      	blx	r5
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
10002dca:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
10002dcc:	10002c49 	.word	0x10002c49
10002dd0:	00002ee0 	.word	0x00002ee0

10002dd4 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
10002dd4:	b538      	push	{r3, r4, r5, lr}
10002dd6:	25a0      	movs	r5, #160	; 0xa0
10002dd8:	1c04      	adds	r4, r0, #0
10002dda:	1c0b      	adds	r3, r1, #0
10002ddc:	35ff      	adds	r5, #255	; 0xff
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
10002dde:	2900      	cmp	r1, #0
10002de0:	d005      	beq.n	10002dee <ifx_i2c_pl_frame_event_handler+0x1a>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
10002de2:	2202      	movs	r2, #2
10002de4:	5542      	strb	r2, [r0, r5]
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
10002de6:	32a7      	adds	r2, #167	; 0xa7
10002de8:	32ff      	adds	r2, #255	; 0xff
10002dea:	5885      	ldr	r5, [r0, r2]
10002dec:	e05d      	b.n	10002eaa <ifx_i2c_pl_frame_event_handler+0xd6>
    }
    else
    {
        switch (p_ctx->pl.frame_state)
10002dee:	5d40      	ldrb	r0, [r0, r5]
10002df0:	3801      	subs	r0, #1
10002df2:	2804      	cmp	r0, #4
10002df4:	d869      	bhi.n	10002eca <ifx_i2c_pl_frame_event_handler+0xf6>
10002df6:	f008 ff59 	bl	1000bcac <__gnu_thumb1_case_uqi>
10002dfa:	0b07      	.short	0x0b07
10002dfc:	5b16      	.short	0x5b16
10002dfe:	03          	.byte	0x03
10002dff:	00          	.byte	0x00
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
10002e00:	1c20      	adds	r0, r4, #0
10002e02:	f000 f871 	bl	10002ee8 <ifx_i2c_pl_soft_reset>
            }
            break;
10002e06:	e06a      	b.n	10002ede <ifx_i2c_pl_frame_event_handler+0x10a>
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
10002e08:	1c20      	adds	r0, r4, #0
10002e0a:	f7ff ff1d 	bl	10002c48 <ifx_i2c_pl_negotiation_event_handler>
            }
            break;
10002e0e:	e066      	b.n	10002ede <ifx_i2c_pl_frame_event_handler+0x10a>
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
10002e10:	2303      	movs	r3, #3
10002e12:	5563      	strb	r3, [r4, r5]
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
10002e14:	339c      	adds	r3, #156	; 0x9c
10002e16:	33ff      	adds	r3, #255	; 0xff
10002e18:	5ce3      	ldrb	r3, [r4, r3]
10002e1a:	2b02      	cmp	r3, #2
10002e1c:	d103      	bne.n	10002e26 <ifx_i2c_pl_frame_event_handler+0x52>
                {
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
10002e1e:	1c20      	adds	r0, r4, #0
10002e20:	2182      	movs	r1, #130	; 0x82
10002e22:	2204      	movs	r2, #4
10002e24:	e018      	b.n	10002e58 <ifx_i2c_pl_frame_event_handler+0x84>
            //lint -fallthrough "For write frame, polling of i2c status register is skipped"
            // Do read/write frame
            case PL_STATE_DATA_AVAILABLE:
            {
                // Read frame, if response is ready. Ignore busy flag
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
10002e26:	23cf      	movs	r3, #207	; 0xcf
10002e28:	005b      	lsls	r3, r3, #1
10002e2a:	5ce3      	ldrb	r3, [r4, r3]
10002e2c:	2b02      	cmp	r3, #2
10002e2e:	d116      	bne.n	10002e5e <ifx_i2c_pl_frame_event_handler+0x8a>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
10002e30:	1c23      	adds	r3, r4, #0
10002e32:	3380      	adds	r3, #128	; 0x80
10002e34:	781b      	ldrb	r3, [r3, #0]
10002e36:	065b      	lsls	r3, r3, #25
10002e38:	d51f      	bpl.n	10002e7a <ifx_i2c_pl_frame_event_handler+0xa6>
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
10002e3a:	1c23      	adds	r3, r4, #0
10002e3c:	3382      	adds	r3, #130	; 0x82
10002e3e:	781a      	ldrb	r2, [r3, #0]
10002e40:	3301      	adds	r3, #1
10002e42:	781b      	ldrb	r3, [r3, #0]
10002e44:	0212      	lsls	r2, r2, #8
10002e46:	431a      	orrs	r2, r3
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
10002e48:	d017      	beq.n	10002e7a <ifx_i2c_pl_frame_event_handler+0xa6>
10002e4a:	88a3      	ldrh	r3, [r4, #4]
10002e4c:	4293      	cmp	r3, r2
10002e4e:	d314      	bcc.n	10002e7a <ifx_i2c_pl_frame_event_handler+0xa6>
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
10002e50:	2304      	movs	r3, #4
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
10002e52:	1c20      	adds	r0, r4, #0
10002e54:	2180      	movs	r1, #128	; 0x80
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
10002e56:	5563      	strb	r3, [r4, r5]
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
10002e58:	f7ff fe7c 	bl	10002b54 <ifx_i2c_pl_read_register>
10002e5c:	e03f      	b.n	10002ede <ifx_i2c_pl_frame_event_handler+0x10a>
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
                        }
                    }
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
10002e5e:	2b01      	cmp	r3, #1
10002e60:	d10b      	bne.n	10002e7a <ifx_i2c_pl_frame_event_handler+0xa6>
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
10002e62:	3303      	adds	r3, #3
10002e64:	5563      	strb	r3, [r4, r5]
                    ifx_i2c_pl_write_register(p_ctx,
10002e66:	33a1      	adds	r3, #161	; 0xa1
10002e68:	33ff      	adds	r3, #255	; 0xff
10002e6a:	5ae2      	ldrh	r2, [r4, r3]
10002e6c:	3b04      	subs	r3, #4
10002e6e:	1c20      	adds	r0, r4, #0
10002e70:	2180      	movs	r1, #128	; 0x80
10002e72:	58e3      	ldr	r3, [r4, r3]
10002e74:	f7ff fe8d 	bl	10002b92 <ifx_i2c_pl_write_register>
10002e78:	e031      	b.n	10002ede <ifx_i2c_pl_frame_event_handler+0x10a>
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
                }
                // Continue checking the slave status register
                else
                {
                    current_time = pal_os_timer_get_time_in_milliseconds();
10002e7a:	f7fe fc21 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
10002e7e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10002e80:	1ac0      	subs	r0, r0, r3
                    {
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
10002e82:	6ea3      	ldr	r3, [r4, #104]	; 0x68
10002e84:	4298      	cmp	r0, r3
10002e86:	d208      	bcs.n	10002e9a <ifx_i2c_pl_frame_event_handler+0xc6>
                    {
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
10002e88:	239a      	movs	r3, #154	; 0x9a
10002e8a:	00db      	lsls	r3, r3, #3
10002e8c:	58e0      	ldr	r0, [r4, r3]
10002e8e:	4914      	ldr	r1, [pc, #80]	; (10002ee0 <ifx_i2c_pl_frame_event_handler+0x10c>)
10002e90:	1c22      	adds	r2, r4, #0
10002e92:	4b14      	ldr	r3, [pc, #80]	; (10002ee4 <ifx_i2c_pl_frame_event_handler+0x110>)
10002e94:	f7fe fbcc 	bl	10001630 <pal_os_event_register_callback_oneshot>
10002e98:	e021      	b.n	10002ede <ifx_i2c_pl_frame_event_handler+0x10a>
                                                               (void * )p_ctx,
                                                               PL_DATA_POLLING_INVERVAL_US);
                    }
                    else
                    {
                        p_ctx->pl.frame_state = PL_STATE_READY;
10002e9a:	2302      	movs	r3, #2
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
10002e9c:	2181      	movs	r1, #129	; 0x81
10002e9e:	1c20      	adds	r0, r4, #0
                                                               (void * )p_ctx,
                                                               PL_DATA_POLLING_INVERVAL_US);
                    }
                    else
                    {
                        p_ctx->pl.frame_state = PL_STATE_READY;
10002ea0:	5563      	strb	r3, [r4, r5]
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
10002ea2:	33a7      	adds	r3, #167	; 0xa7
10002ea4:	33ff      	adds	r3, #255	; 0xff
10002ea6:	58e5      	ldr	r5, [r4, r3]
10002ea8:	0049      	lsls	r1, r1, #1
10002eaa:	2200      	movs	r2, #0
10002eac:	1c13      	adds	r3, r2, #0
10002eae:	e015      	b.n	10002edc <ifx_i2c_pl_frame_event_handler+0x108>
            break;
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
10002eb0:	2302      	movs	r3, #2
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
10002eb2:	21d4      	movs	r1, #212	; 0xd4
                                                    p_ctx->pl.buffer,
10002eb4:	1c22      	adds	r2, r4, #0
            break;
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
10002eb6:	5563      	strb	r3, [r4, r5]
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
10002eb8:	3397      	adds	r3, #151	; 0x97
10002eba:	0049      	lsls	r1, r1, #1
10002ebc:	33ff      	adds	r3, #255	; 0xff
10002ebe:	5865      	ldr	r5, [r4, r1]
                                                    p_ctx->pl.buffer,
10002ec0:	3280      	adds	r2, #128	; 0x80
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
10002ec2:	5ae3      	ldrh	r3, [r4, r3]
10002ec4:	1c20      	adds	r0, r4, #0
10002ec6:	2100      	movs	r1, #0
10002ec8:	e008      	b.n	10002edc <ifx_i2c_pl_frame_event_handler+0x108>
            }
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
10002eca:	2201      	movs	r2, #1
10002ecc:	5562      	strb	r2, [r4, r5]
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
10002ece:	32a8      	adds	r2, #168	; 0xa8
10002ed0:	32ff      	adds	r2, #255	; 0xff
10002ed2:	2181      	movs	r1, #129	; 0x81
10002ed4:	58a5      	ldr	r5, [r4, r2]
10002ed6:	1c20      	adds	r0, r4, #0
10002ed8:	1c1a      	adds	r2, r3, #0
10002eda:	0049      	lsls	r1, r1, #1
10002edc:	47a8      	blx	r5
            }
            break;
        }
    }
}
10002ede:	bd38      	pop	{r3, r4, r5, pc}
10002ee0:	10002b87 	.word	0x10002b87
10002ee4:	00001388 	.word	0x00001388

10002ee8 <ifx_i2c_pl_soft_reset>:
    }
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
10002ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t i2c_mode_value[2] = {0};
10002eea:	2200      	movs	r2, #0
    switch (p_ctx->pl.request_soft_reset)
10002eec:	21ae      	movs	r1, #174	; 0xae
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
    uint8_t i2c_mode_value[2] = {0};
10002eee:	ab01      	add	r3, sp, #4
10002ef0:	801a      	strh	r2, [r3, #0]
    switch (p_ctx->pl.request_soft_reset)
10002ef2:	31ff      	adds	r1, #255	; 0xff
10002ef4:	5c44      	ldrb	r4, [r0, r1]
10002ef6:	3c99      	subs	r4, #153	; 0x99
10002ef8:	2c0a      	cmp	r4, #10
10002efa:	d83b      	bhi.n	10002f74 <ifx_i2c_pl_soft_reset+0x8c>
10002efc:	1c02      	adds	r2, r0, #0
10002efe:	1c20      	adds	r0, r4, #0
10002f00:	f008 fed4 	bl	1000bcac <__gnu_thumb1_case_uqi>
10002f04:	38383806 	.word	0x38383806
10002f08:	38383838 	.word	0x38383838
10002f0c:	0e30      	.short	0x0e30
10002f0e:	26          	.byte	0x26
10002f0f:	00          	.byte	0x00
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
10002f10:	23a2      	movs	r3, #162	; 0xa2
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
10002f12:	1c10      	adds	r0, r2, #0
    uint8_t i2c_mode_value[2] = {0};
    switch (p_ctx->pl.request_soft_reset)
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
10002f14:	5453      	strb	r3, [r2, r1]
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
10002f16:	2182      	movs	r1, #130	; 0x82
10002f18:	2204      	movs	r2, #4
10002f1a:	f7ff fe1b 	bl	10002b54 <ifx_i2c_pl_read_register>
            break;
10002f1e:	e029      	b.n	10002f74 <ifx_i2c_pl_soft_reset+0x8c>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
10002f20:	1c14      	adds	r4, r2, #0
10002f22:	2008      	movs	r0, #8
10002f24:	3480      	adds	r4, #128	; 0x80
10002f26:	7825      	ldrb	r5, [r4, #0]
10002f28:	4028      	ands	r0, r5
10002f2a:	7020      	strb	r0, [r4, #0]
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
10002f2c:	2808      	cmp	r0, #8
10002f2e:	d107      	bne.n	10002f40 <ifx_i2c_pl_soft_reset+0x58>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
10002f30:	309b      	adds	r0, #155	; 0x9b
10002f32:	5450      	strb	r0, [r2, r1]
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
10002f34:	1c10      	adds	r0, r2, #0
10002f36:	2188      	movs	r1, #136	; 0x88
10002f38:	2202      	movs	r2, #2
10002f3a:	f7ff fe2a 	bl	10002b92 <ifx_i2c_pl_write_register>
10002f3e:	e019      	b.n	10002f74 <ifx_i2c_pl_soft_reset+0x8c>
            }
            else
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
10002f40:	23a0      	movs	r3, #160	; 0xa0
10002f42:	2100      	movs	r1, #0
10002f44:	33ff      	adds	r3, #255	; 0xff
10002f46:	54d1      	strb	r1, [r2, r3]
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
10002f48:	3103      	adds	r1, #3
10002f4a:	1c10      	adds	r0, r2, #0
10002f4c:	31ff      	adds	r1, #255	; 0xff
10002f4e:	e00f      	b.n	10002f70 <ifx_i2c_pl_soft_reset+0x88>
            }
            break;
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
10002f50:	23a1      	movs	r3, #161	; 0xa1
10002f52:	5453      	strb	r3, [r2, r1]
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
10002f54:	239a      	movs	r3, #154	; 0x9a
10002f56:	00db      	lsls	r3, r3, #3
10002f58:	58d0      	ldr	r0, [r2, r3]
10002f5a:	4907      	ldr	r1, [pc, #28]	; (10002f78 <ifx_i2c_pl_soft_reset+0x90>)
10002f5c:	4b07      	ldr	r3, [pc, #28]	; (10002f7c <ifx_i2c_pl_soft_reset+0x94>)
10002f5e:	f7fe fb67 	bl	10001630 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
10002f62:	e007      	b.n	10002f74 <ifx_i2c_pl_soft_reset+0x8c>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
10002f64:	23a0      	movs	r3, #160	; 0xa0
10002f66:	2101      	movs	r1, #1
10002f68:	33ff      	adds	r3, #255	; 0xff
10002f6a:	54d1      	strb	r1, [r2, r3]
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
10002f6c:	1c10      	adds	r0, r2, #0
10002f6e:	2100      	movs	r1, #0
10002f70:	f7ff ff30 	bl	10002dd4 <ifx_i2c_pl_frame_event_handler>
            break;
        }
        default:
            break;
    }
}
10002f74:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
10002f76:	46c0      	nop			; (mov r8, r8)
10002f78:	10002ee9 	.word	0x10002ee9
10002f7c:	00002ee0 	.word	0x00002ee0

10002f80 <ifx_i2c_pl_pal_event_handler>:
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
10002f80:	b508      	push	{r3, lr}
10002f82:	1c02      	adds	r2, r0, #0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    switch (event)
10002f84:	2900      	cmp	r1, #0
10002f86:	d014      	beq.n	10002fb2 <ifx_i2c_pl_pal_event_handler+0x32>
10002f88:	2902      	cmp	r1, #2
10002f8a:	d819      	bhi.n	10002fc0 <ifx_i2c_pl_pal_event_handler+0x40>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
10002f8c:	21ce      	movs	r1, #206	; 0xce
10002f8e:	0049      	lsls	r1, r1, #1
10002f90:	5a43      	ldrh	r3, [r0, r1]
10002f92:	1e58      	subs	r0, r3, #1
10002f94:	5250      	strh	r0, [r2, r1]
10002f96:	2b00      	cmp	r3, #0
10002f98:	d005      	beq.n	10002fa6 <ifx_i2c_pl_pal_event_handler+0x26>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
10002f9a:	239a      	movs	r3, #154	; 0x9a
10002f9c:	00db      	lsls	r3, r3, #3
10002f9e:	58d0      	ldr	r0, [r2, r3]
10002fa0:	4908      	ldr	r1, [pc, #32]	; (10002fc4 <ifx_i2c_pl_pal_event_handler+0x44>)
10002fa2:	3be8      	subs	r3, #232	; 0xe8
10002fa4:	e00a      	b.n	10002fbc <ifx_i2c_pl_pal_event_handler+0x3c>
                                                        ifx_i2c_pal_poll_callback, p_local_ctx, PL_POLLING_INVERVAL_US);
            }
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
10002fa6:	2183      	movs	r1, #131	; 0x83
10002fa8:	1c10      	adds	r0, r2, #0
10002faa:	0049      	lsls	r1, r1, #1
10002fac:	f7ff ff12 	bl	10002dd4 <ifx_i2c_pl_frame_event_handler>
10002fb0:	e006      	b.n	10002fc0 <ifx_i2c_pl_pal_event_handler+0x40>
            }
            break;

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
10002fb2:	239a      	movs	r3, #154	; 0x9a
10002fb4:	00db      	lsls	r3, r3, #3
10002fb6:	58c0      	ldr	r0, [r0, r3]
10002fb8:	2332      	movs	r3, #50	; 0x32
10002fba:	4903      	ldr	r1, [pc, #12]	; (10002fc8 <ifx_i2c_pl_pal_event_handler+0x48>)
10002fbc:	f7fe fb38 	bl	10001630 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
        default:
            break;
    }
}
10002fc0:	bd08      	pop	{r3, pc}
10002fc2:	46c0      	nop			; (mov r8, r8)
10002fc4:	10002bcf 	.word	0x10002bcf
10002fc8:	10002fcd 	.word	0x10002fcd

10002fcc <ifx_i2c_pl_guard_time_callback>:
    }
}


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
10002fcc:	b508      	push	{r3, lr}
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
10002fce:	23cd      	movs	r3, #205	; 0xcd
10002fd0:	005b      	lsls	r3, r3, #1
10002fd2:	5cc3      	ldrb	r3, [r0, r3]
10002fd4:	2b01      	cmp	r3, #1
10002fd6:	d10f      	bne.n	10002ff8 <ifx_i2c_pl_guard_time_callback+0x2c>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
10002fd8:	229c      	movs	r2, #156	; 0x9c
10002fda:	32ff      	adds	r2, #255	; 0xff
10002fdc:	5c83      	ldrb	r3, [r0, r2]
10002fde:	2b01      	cmp	r3, #1
10002fe0:	d10a      	bne.n	10002ff8 <ifx_i2c_pl_guard_time_callback+0x2c>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
10002fe2:	1c01      	adds	r1, r0, #0
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
10002fe4:	3301      	adds	r3, #1
10002fe6:	5483      	strb	r3, [r0, r2]
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
10002fe8:	3397      	adds	r3, #151	; 0x97
10002fea:	33ff      	adds	r3, #255	; 0xff
10002fec:	5ac2      	ldrh	r2, [r0, r3]
10002fee:	3180      	adds	r1, #128	; 0x80
10002ff0:	6900      	ldr	r0, [r0, #16]
10002ff2:	f7fe fa2f 	bl	10001454 <pal_i2c_read>
10002ff6:	e004      	b.n	10003002 <ifx_i2c_pl_guard_time_callback+0x36>
        }
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
10002ff8:	2b02      	cmp	r3, #2
10002ffa:	d102      	bne.n	10003002 <ifx_i2c_pl_guard_time_callback+0x36>
        {
            LOG_PL("[IFX-PL]: GT done -> REG is read\n");
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
10002ffc:	2100      	movs	r1, #0
10002ffe:	f7ff fee9 	bl	10002dd4 <ifx_i2c_pl_frame_event_handler>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
10003002:	bd08      	pop	{r3, pc}

10003004 <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
10003004:	b538      	push	{r3, r4, r5, lr}
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
10003006:	23d4      	movs	r3, #212	; 0xd4
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
10003008:	25a0      	movs	r5, #160	; 0xa0

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
1000300a:	005b      	lsls	r3, r3, #1
1000300c:	50c1      	str	r1, [r0, r3]
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
1000300e:	2300      	movs	r3, #0
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
10003010:	22bb      	movs	r2, #187	; 0xbb
optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
10003012:	35ff      	adds	r5, #255	; 0xff
10003014:	5543      	strb	r3, [r0, r5]
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
10003016:	33ad      	adds	r3, #173	; 0xad
10003018:	33ff      	adds	r3, #255	; 0xff
1000301a:	54c2      	strb	r2, [r0, r3]
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
1000301c:	7803      	ldrb	r3, [r0, #0]
1000301e:	6902      	ldr	r2, [r0, #16]
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
10003020:	1c04      	adds	r4, r0, #0
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
10003022:	7113      	strb	r3, [r2, #4]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
10003024:	6900      	ldr	r0, [r0, #16]
10003026:	4b11      	ldr	r3, [pc, #68]	; (1000306c <ifx_i2c_pl_init+0x68>)
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
10003028:	22c8      	movs	r2, #200	; 0xc8

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
1000302a:	60c3      	str	r3, [r0, #12]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
1000302c:	23ce      	movs	r3, #206	; 0xce
1000302e:	005b      	lsls	r3, r3, #1
10003030:	52e2      	strh	r2, [r4, r3]
    if (TRUE == p_ctx->do_pal_init)
10003032:	1c23      	adds	r3, r4, #0
10003034:	332f      	adds	r3, #47	; 0x2f
10003036:	781b      	ldrb	r3, [r3, #0]
10003038:	2b01      	cmp	r3, #1
1000303a:	d008      	beq.n	1000304e <ifx_i2c_pl_init+0x4a>
        {
            return (IFX_I2C_STACK_ERROR);
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
1000303c:	23ae      	movs	r3, #174	; 0xae
1000303e:	33ff      	adds	r3, #255	; 0xff
10003040:	5ce2      	ldrb	r2, [r4, r3]
10003042:	2a01      	cmp	r2, #1
10003044:	d10a      	bne.n	1000305c <ifx_i2c_pl_init+0x58>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
10003046:	2299      	movs	r2, #153	; 0x99
10003048:	54e2      	strb	r2, [r4, r3]
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
1000304a:	2305      	movs	r3, #5
1000304c:	e007      	b.n	1000305e <ifx_i2c_pl_init+0x5a>
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
    if (TRUE == p_ctx->do_pal_init)
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
1000304e:	f7fe f9cd 	bl	100013ec <pal_i2c_init>
10003052:	2800      	cmp	r0, #0
10003054:	d0f2      	beq.n	1000303c <ifx_i2c_pl_init+0x38>
        {
            return (IFX_I2C_STACK_ERROR);
10003056:	2081      	movs	r0, #129	; 0x81
10003058:	0040      	lsls	r0, r0, #1
1000305a:	e006      	b.n	1000306a <ifx_i2c_pl_init+0x66>
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
1000305c:	2301      	movs	r3, #1
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
1000305e:	1c20      	adds	r0, r4, #0
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
10003060:	5563      	strb	r3, [r4, r5]
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
10003062:	2100      	movs	r1, #0
10003064:	f7ff feb6 	bl	10002dd4 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
10003068:	2000      	movs	r0, #0
}
1000306a:	bd38      	pop	{r3, r4, r5, pc}
1000306c:	10002f81 	.word	0x10002f81

10003070 <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
10003070:	23a0      	movs	r3, #160	; 0xa0

    return (IFX_I2C_STACK_SUCCESS);
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
10003072:	b510      	push	{r4, lr}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
10003074:	2481      	movs	r4, #129	; 0x81
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
10003076:	33ff      	adds	r3, #255	; 0xff
10003078:	5cc3      	ldrb	r3, [r0, r3]
    {
        return (IFX_I2C_STACK_ERROR);
1000307a:	0064      	lsls	r4, r4, #1
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
1000307c:	3b01      	subs	r3, #1
1000307e:	2b01      	cmp	r3, #1
10003080:	d80c      	bhi.n	1000309c <ifx_i2c_pl_send_frame+0x2c>
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
10003082:	23cf      	movs	r3, #207	; 0xcf
10003084:	3c02      	subs	r4, #2
10003086:	3cff      	subs	r4, #255	; 0xff
10003088:	005b      	lsls	r3, r3, #1
1000308a:	54c4      	strb	r4, [r0, r3]

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
1000308c:	3302      	adds	r3, #2
1000308e:	50c1      	str	r1, [r0, r3]
    p_ctx->pl.tx_frame_len = frame_len;
10003090:	3304      	adds	r3, #4
10003092:	52c2      	strh	r2, [r0, r3]

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
10003094:	2100      	movs	r1, #0
10003096:	f7ff fe9d 	bl	10002dd4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
1000309a:	2400      	movs	r4, #0
}
1000309c:	1c20      	adds	r0, r4, #0
1000309e:	bd10      	pop	{r4, pc}

100030a0 <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
100030a0:	b508      	push	{r3, lr}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
100030a2:	23a0      	movs	r3, #160	; 0xa0
    {
        return (IFX_I2C_STACK_ERROR);
100030a4:	2281      	movs	r2, #129	; 0x81
}

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
100030a6:	33ff      	adds	r3, #255	; 0xff
100030a8:	5cc3      	ldrb	r3, [r0, r3]
    {
        return (IFX_I2C_STACK_ERROR);
100030aa:	0052      	lsls	r2, r2, #1
}

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
100030ac:	3b01      	subs	r3, #1
100030ae:	2b01      	cmp	r3, #1
100030b0:	d808      	bhi.n	100030c4 <ifx_i2c_pl_receive_frame+0x24>
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
100030b2:	23cf      	movs	r3, #207	; 0xcf
100030b4:	3a01      	subs	r2, #1
100030b6:	3aff      	subs	r2, #255	; 0xff
100030b8:	005b      	lsls	r3, r3, #1
100030ba:	54c2      	strb	r2, [r0, r3]

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
100030bc:	2100      	movs	r1, #0
100030be:	f7ff fe89 	bl	10002dd4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
100030c2:	2200      	movs	r2, #0
}
100030c4:	1c10      	adds	r0, r2, #0
100030c6:	bd08      	pop	{r3, pc}

100030c8 <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
100030c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100030ca:	b08d      	sub	sp, #52	; 0x34
100030cc:	1c1f      	adds	r7, r3, #0
100030ce:	ab12      	add	r3, sp, #72	; 0x48
100030d0:	1c15      	adds	r5, r2, #0
100030d2:	cb04      	ldmia	r3!, {r2}
100030d4:	1c04      	adds	r4, r0, #0
100030d6:	781b      	ldrb	r3, [r3, #0]
100030d8:	9107      	str	r1, [sp, #28]
100030da:	9308      	str	r3, [sp, #32]
100030dc:	ab14      	add	r3, sp, #80	; 0x50
100030de:	781b      	ldrb	r3, [r3, #0]
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
100030e0:	1c39      	adds	r1, r7, #0
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
100030e2:	9309      	str	r3, [sp, #36]	; 0x24
100030e4:	ab15      	add	r3, sp, #84	; 0x54
100030e6:	781a      	ldrb	r2, [r3, #0]
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
100030e8:	2396      	movs	r3, #150	; 0x96
100030ea:	009b      	lsls	r3, r3, #2
100030ec:	54c2      	strb	r2, [r0, r3]
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
100030ee:	4b1b      	ldr	r3, [pc, #108]	; (1000315c <ifx_i2c_prl_decrypt_msg+0x94>)
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
100030f0:	ae0a      	add	r6, sp, #40	; 0x28
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
100030f2:	18c0      	adds	r0, r0, r3
100030f4:	f001 f8c6 	bl	10004284 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
100030f8:	1c23      	adds	r3, r4, #0
100030fa:	3331      	adds	r3, #49	; 0x31
100030fc:	781a      	ldrb	r2, [r3, #0]
100030fe:	4b18      	ldr	r3, [pc, #96]	; (10003160 <ifx_i2c_prl_decrypt_msg+0x98>)
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
10003100:	1c29      	adds	r1, r5, #0
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
10003102:	54e2      	strb	r2, [r4, r3]
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
10003104:	4b17      	ldr	r3, [pc, #92]	; (10003164 <ifx_i2c_prl_decrypt_msg+0x9c>)
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
10003106:	3508      	adds	r5, #8
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
10003108:	18e0      	adds	r0, r4, r3
1000310a:	f001 f8b7 	bl	1000427c <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
1000310e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003110:	2204      	movs	r2, #4
10003112:	18e1      	adds	r1, r4, r3
10003114:	31d5      	adds	r1, #213	; 0xd5
10003116:	31ff      	adds	r1, #255	; 0xff
10003118:	1c30      	adds	r0, r6, #0
1000311a:	f009 f888 	bl	1000c22e <memcpy>
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
1000311e:	a80b      	add	r0, sp, #44	; 0x2c
10003120:	1c39      	adds	r1, r7, #0
10003122:	f001 f8af 	bl	10004284 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
10003126:	2108      	movs	r1, #8
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
10003128:	2096      	movs	r0, #150	; 0x96
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
1000312a:	9b08      	ldr	r3, [sp, #32]
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
1000312c:	0080      	lsls	r0, r0, #2
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
1000312e:	18e3      	adds	r3, r4, r3
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
10003130:	9101      	str	r1, [sp, #4]
10003132:	9103      	str	r1, [sp, #12]
10003134:	9104      	str	r1, [sp, #16]
10003136:	9912      	ldr	r1, [sp, #72]	; 0x48
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
10003138:	1824      	adds	r4, r4, r0
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
1000313a:	33d5      	adds	r3, #213	; 0xd5
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
1000313c:	9105      	str	r1, [sp, #20]
1000313e:	b2aa      	uxth	r2, r5
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
10003140:	33ff      	adds	r3, #255	; 0xff
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
10003142:	9600      	str	r6, [sp, #0]
10003144:	9402      	str	r4, [sp, #8]
10003146:	2000      	movs	r0, #0
10003148:	9907      	ldr	r1, [sp, #28]
1000314a:	f7fe f897 	bl	1000127c <pal_crypt_decrypt_aes128_ccm>
1000314e:	2800      	cmp	r0, #0
10003150:	d001      	beq.n	10003156 <ifx_i2c_prl_decrypt_msg+0x8e>
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
10003152:	2081      	movs	r0, #129	; 0x81
10003154:	0040      	lsls	r0, r0, #1
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    return (return_status);
}
10003156:	b00d      	add	sp, #52	; 0x34
10003158:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000315a:	46c0      	nop			; (mov r8, r8)
1000315c:	00000259 	.word	0x00000259
10003160:	0000025d 	.word	0x0000025d
10003164:	0000025e 	.word	0x0000025e

10003168 <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
10003168:	b5f0      	push	{r4, r5, r6, r7, lr}
1000316a:	b089      	sub	sp, #36	; 0x24
1000316c:	1c1f      	adds	r7, r3, #0
1000316e:	ab0e      	add	r3, sp, #56	; 0x38
10003170:	1c15      	adds	r5, r2, #0
10003172:	781a      	ldrb	r2, [r3, #0]
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
10003174:	2396      	movs	r3, #150	; 0x96
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
10003176:	1c04      	adds	r4, r0, #0
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
10003178:	009b      	lsls	r3, r3, #2
1000317a:	54c2      	strb	r2, [r0, r3]
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
1000317c:	4b19      	ldr	r3, [pc, #100]	; (100031e4 <ifx_i2c_prl_encrypt_msg+0x7c>)
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
1000317e:	1c0e      	adds	r6, r1, #0
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
10003180:	18c0      	adds	r0, r0, r3
10003182:	1c39      	adds	r1, r7, #0
10003184:	f001 f87e 	bl	10004284 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
10003188:	1c23      	adds	r3, r4, #0
1000318a:	3331      	adds	r3, #49	; 0x31
1000318c:	781a      	ldrb	r2, [r3, #0]
1000318e:	4b16      	ldr	r3, [pc, #88]	; (100031e8 <ifx_i2c_prl_encrypt_msg+0x80>)
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
10003190:	1c29      	adds	r1, r5, #0
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
10003192:	54e2      	strb	r2, [r4, r3]
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
10003194:	4b15      	ldr	r3, [pc, #84]	; (100031ec <ifx_i2c_prl_encrypt_msg+0x84>)
10003196:	18e0      	adds	r0, r4, r3
10003198:	f001 f870 	bl	1000427c <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
1000319c:	1c21      	adds	r1, r4, #0
1000319e:	31f5      	adds	r1, #245	; 0xf5
100031a0:	2204      	movs	r2, #4
100031a2:	31ff      	adds	r1, #255	; 0xff
100031a4:	a806      	add	r0, sp, #24
100031a6:	f009 f842 	bl	1000c22e <memcpy>
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
100031aa:	a807      	add	r0, sp, #28
100031ac:	1c39      	adds	r1, r7, #0
100031ae:	f001 f869 	bl	10004284 <optiga_common_set_uint32>
                                                                data_len,
                                                                &p_ctx->prl.
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
100031b2:	2196      	movs	r1, #150	; 0x96
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
100031b4:	1c23      	adds	r3, r4, #0
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
100031b6:	aa06      	add	r2, sp, #24
100031b8:	9200      	str	r2, [sp, #0]
100031ba:	2208      	movs	r2, #8
                                                                data_len,
                                                                &p_ctx->prl.
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
100031bc:	0089      	lsls	r1, r1, #2
100031be:	1864      	adds	r4, r4, r1
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
100031c0:	33d5      	adds	r3, #213	; 0xd5
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
100031c2:	9201      	str	r2, [sp, #4]
100031c4:	9203      	str	r2, [sp, #12]
100031c6:	9204      	str	r2, [sp, #16]
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
100031c8:	33ff      	adds	r3, #255	; 0xff
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
100031ca:	9402      	str	r4, [sp, #8]
100031cc:	9605      	str	r6, [sp, #20]
100031ce:	2000      	movs	r0, #0
100031d0:	1c31      	adds	r1, r6, #0
100031d2:	1c2a      	adds	r2, r5, #0
100031d4:	f7fe f80b 	bl	100011ee <pal_crypt_encrypt_aes128_ccm>
100031d8:	2800      	cmp	r0, #0
100031da:	d001      	beq.n	100031e0 <ifx_i2c_prl_encrypt_msg+0x78>
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
100031dc:	2081      	movs	r0, #129	; 0x81
100031de:	0040      	lsls	r0, r0, #1
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    return (return_status);
}
100031e0:	b009      	add	sp, #36	; 0x24
100031e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100031e4:	00000259 	.word	0x00000259
100031e8:	0000025d 	.word	0x0000025d
100031ec:	0000025e 	.word	0x0000025e

100031f0 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
100031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100031f2:	b0af      	sub	sp, #188	; 0xbc
100031f4:	9308      	str	r3, [sp, #32]
    uint8_t exit_machine = TRUE;
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
100031f6:	2383      	movs	r3, #131	; 0x83
100031f8:	005b      	lsls	r3, r3, #1

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
100031fa:	1c04      	adds	r4, r0, #0
100031fc:	9207      	str	r2, [sp, #28]
    uint8_t exit_machine = TRUE;
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
100031fe:	4219      	tst	r1, r3
10003200:	d01f      	beq.n	10003242 <ifx_i2c_prl_event_handler+0x52>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
10003202:	22ff      	movs	r2, #255	; 0xff
10003204:	33cc      	adds	r3, #204	; 0xcc
10003206:	54c2      	strb	r2, [r0, r3]
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
10003208:	3b22      	subs	r3, #34	; 0x22
1000320a:	5cc2      	ldrb	r2, [r0, r3]
1000320c:	33b4      	adds	r3, #180	; 0xb4
1000320e:	2a05      	cmp	r2, #5
10003210:	d103      	bne.n	1000321a <ifx_i2c_prl_event_handler+0x2a>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
10003212:	2208      	movs	r2, #8
10003214:	32ff      	adds	r2, #255	; 0xff
10003216:	52c2      	strh	r2, [r0, r3]
10003218:	e00f      	b.n	1000323a <ifx_i2c_prl_event_handler+0x4a>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
1000321a:	22d9      	movs	r2, #217	; 0xd9
1000321c:	0052      	lsls	r2, r2, #1
1000321e:	5c80      	ldrb	r0, [r0, r2]
10003220:	2801      	cmp	r0, #1
10003222:	d109      	bne.n	10003238 <ifx_i2c_prl_event_handler+0x48>
10003224:	3004      	adds	r0, #4
10003226:	30ff      	adds	r0, #255	; 0xff
10003228:	4281      	cmp	r1, r0
1000322a:	d005      	beq.n	10003238 <ifx_i2c_prl_event_handler+0x48>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
1000322c:	2184      	movs	r1, #132	; 0x84
1000322e:	0049      	lsls	r1, r1, #1
10003230:	52e1      	strh	r1, [r4, r3]
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003232:	2300      	movs	r3, #0
10003234:	f000 fcd6 	bl	10003be4 <ifx_i2c_prl_event_handler+0x9f4>
        }
        else
        {
            p_ctx->prl.return_status = event;
10003238:	52e1      	strh	r1, [r4, r3]
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
1000323a:	2207      	movs	r2, #7
1000323c:	23d8      	movs	r3, #216	; 0xd8
1000323e:	005b      	lsls	r3, r3, #1
10003240:	54e2      	strb	r2, [r4, r3]
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
10003242:	23d8      	movs	r3, #216	; 0xd8
10003244:	005b      	lsls	r3, r3, #1
10003246:	5ce0      	ldrb	r0, [r4, r3]
10003248:	3801      	subs	r0, #1
1000324a:	2807      	cmp	r0, #7
1000324c:	d901      	bls.n	10003252 <ifx_i2c_prl_event_handler+0x62>
1000324e:	f000 fd06 	bl	10003c5e <ifx_i2c_prl_event_handler+0xa6e>
10003252:	f008 fd35 	bl	1000bcc0 <__gnu_thumb1_case_uhi>
10003256:	0008      	.short	0x0008
10003258:	03e50171 	.word	0x03e50171
1000325c:	01910314 	.word	0x01910314
10003260:	04ca048e 	.word	0x04ca048e
10003264:	0010      	.short	0x0010
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
10003266:	2399      	movs	r3, #153	; 0x99
10003268:	009b      	lsls	r3, r3, #2
1000326a:	5ae1      	ldrh	r1, [r4, r3]
1000326c:	3338      	adds	r3, #56	; 0x38
1000326e:	58e5      	ldr	r5, [r4, r3]
10003270:	1c20      	adds	r0, r4, #0
10003272:	f000 fcfc 	bl	10003c6e <ifx_i2c_prl_event_handler+0xa7e>
{
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
10003276:	25b4      	movs	r5, #180	; 0xb4
10003278:	35ff      	adds	r5, #255	; 0xff
1000327a:	5d63      	ldrb	r3, [r4, r5]
1000327c:	2b01      	cmp	r3, #1
1000327e:	d003      	beq.n	10003288 <ifx_i2c_prl_event_handler+0x98>
10003280:	2b02      	cmp	r3, #2
10003282:	d100      	bne.n	10003286 <ifx_i2c_prl_event_handler+0x96>
10003284:	e088      	b.n	10003398 <ifx_i2c_prl_event_handler+0x1a8>
10003286:	e131      	b.n	100034ec <ifx_i2c_prl_event_handler+0x2fc>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
10003288:	1c22      	adds	r2, r4, #0
1000328a:	3230      	adds	r2, #48	; 0x30
1000328c:	7812      	ldrb	r2, [r2, #0]
1000328e:	2a7f      	cmp	r2, #127	; 0x7f
10003290:	d901      	bls.n	10003296 <ifx_i2c_prl_event_handler+0xa6>
            {
                p_ctx->prl.state = PRL_STATE_START;
10003292:	2202      	movs	r2, #2
10003294:	e7d2      	b.n	1000323c <ifx_i2c_prl_event_handler+0x4c>
                return_status = IFX_I2C_STACK_SUCCESS;
                break;
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
10003296:	1c22      	adds	r2, r4, #0
10003298:	3232      	adds	r2, #50	; 0x32
1000329a:	7812      	ldrb	r2, [r2, #0]
1000329c:	2a22      	cmp	r2, #34	; 0x22
1000329e:	d108      	bne.n	100032b2 <ifx_i2c_prl_event_handler+0xc2>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
100032a0:	2160      	movs	r1, #96	; 0x60
100032a2:	32fb      	adds	r2, #251	; 0xfb
100032a4:	32ff      	adds	r2, #255	; 0xff
100032a6:	54a1      	strb	r1, [r4, r2]
                p_ctx->prl.prl_receive_length = 1;
100032a8:	3244      	adds	r2, #68	; 0x44
100032aa:	52a3      	strh	r3, [r4, r2]
                p_ctx->prl.prl_txrx_receive_length = 1;
100032ac:	4ad8      	ldr	r2, [pc, #864]	; (10003610 <ifx_i2c_prl_event_handler+0x420>)
100032ae:	52a3      	strh	r3, [r4, r2]
100032b0:	e05f      	b.n	10003372 <ifx_i2c_prl_event_handler+0x182>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
100032b2:	2a11      	cmp	r2, #17
100032b4:	d152      	bne.n	1000335c <ifx_i2c_prl_event_handler+0x16c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
100032b6:	6963      	ldr	r3, [r4, #20]
100032b8:	8898      	ldrh	r0, [r3, #4]
100032ba:	2800      	cmp	r0, #0
100032bc:	d01e      	beq.n	100032fc <ifx_i2c_prl_event_handler+0x10c>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
100032be:	2398      	movs	r3, #152	; 0x98
100032c0:	3223      	adds	r2, #35	; 0x23
100032c2:	009b      	lsls	r3, r3, #2
100032c4:	52e2      	strh	r2, [r4, r3]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
100032c6:	3308      	adds	r3, #8
100032c8:	18e1      	adds	r1, r4, r3
100032ca:	3b08      	subs	r3, #8
100032cc:	18e2      	adds	r2, r4, r3
100032ce:	f7fe f96d 	bl	100015ac <pal_os_datastore_read>
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
100032d2:	2801      	cmp	r0, #1
100032d4:	d100      	bne.n	100032d8 <ifx_i2c_prl_event_handler+0xe8>
100032d6:	e11e      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
100032d8:	4bce      	ldr	r3, [pc, #824]	; (10003614 <ifx_i2c_prl_event_handler+0x424>)
100032da:	5ce2      	ldrb	r2, [r4, r3]
100032dc:	3be0      	subs	r3, #224	; 0xe0
100032de:	54e2      	strb	r2, [r4, r3]
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
100032e0:	4bcd      	ldr	r3, [pc, #820]	; (10003618 <ifx_i2c_prl_event_handler+0x428>)
100032e2:	5ce3      	ldrb	r3, [r4, r3]
100032e4:	2b00      	cmp	r3, #0
100032e6:	d111      	bne.n	1000330c <ifx_i2c_prl_event_handler+0x11c>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
100032e8:	23d8      	movs	r3, #216	; 0xd8
100032ea:	2202      	movs	r2, #2
100032ec:	005b      	lsls	r3, r3, #1
100032ee:	54e2      	strb	r2, [r4, r3]
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
100032f0:	2200      	movs	r2, #0
100032f2:	3302      	adds	r3, #2
100032f4:	54e2      	strb	r2, [r4, r3]
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
100032f6:	3201      	adds	r2, #1
100032f8:	4bc8      	ldr	r3, [pc, #800]	; (1000361c <ifx_i2c_prl_event_handler+0x42c>)
100032fa:	e7a1      	b.n	10003240 <ifx_i2c_prl_event_handler+0x50>
                        break;
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
100032fc:	4bc6      	ldr	r3, [pc, #792]	; (10003618 <ifx_i2c_prl_event_handler+0x428>)
100032fe:	5ce3      	ldrb	r3, [r4, r3]
10003300:	2b00      	cmp	r3, #0
10003302:	d0f1      	beq.n	100032e8 <ifx_i2c_prl_event_handler+0xf8>
                        return_status = IFX_I2C_STACK_SUCCESS;
                        break;
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
10003304:	4bc3      	ldr	r3, [pc, #780]	; (10003614 <ifx_i2c_prl_event_handler+0x424>)
10003306:	5ce2      	ldrb	r2, [r4, r3]
10003308:	3be0      	subs	r3, #224	; 0xe0
1000330a:	54e2      	strb	r2, [r4, r3]
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
1000330c:	2387      	movs	r3, #135	; 0x87
1000330e:	2268      	movs	r2, #104	; 0x68
10003310:	009b      	lsls	r3, r3, #2
10003312:	54e2      	strb	r2, [r4, r3]
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
10003314:	4bc2      	ldr	r3, [pc, #776]	; (10003620 <ifx_i2c_prl_event_handler+0x430>)
10003316:	18e0      	adds	r0, r4, r3
10003318:	337b      	adds	r3, #123	; 0x7b
1000331a:	58e1      	ldr	r1, [r4, r3]
1000331c:	f000 ffb2 	bl	10004284 <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
10003320:	2305      	movs	r3, #5
                prl_saved_ctx.stored_context_flag = FALSE;
10003322:	2100      	movs	r1, #0
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
10003324:	4aba      	ldr	r2, [pc, #744]	; (10003610 <ifx_i2c_prl_event_handler+0x420>)
                prl_saved_ctx.stored_context_flag = FALSE;
10003326:	a804      	add	r0, sp, #16
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
10003328:	52a3      	strh	r3, [r4, r2]
                prl_saved_ctx.stored_context_flag = FALSE;
1000332a:	3ac4      	subs	r2, #196	; 0xc4
1000332c:	3aff      	subs	r2, #255	; 0xff
1000332e:	1812      	adds	r2, r2, r0
10003330:	7011      	strb	r1, [r2, #0]
                p_ctx->prl.prl_receive_length = 5;
10003332:	2298      	movs	r2, #152	; 0x98
10003334:	0092      	lsls	r2, r2, #2
10003336:	52a3      	strh	r3, [r4, r2]
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
10003338:	4bb7      	ldr	r3, [pc, #732]	; (10003618 <ifx_i2c_prl_event_handler+0x428>)
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
1000333a:	6966      	ldr	r6, [r4, #20]
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
                prl_saved_ctx.stored_context_flag = FALSE;
                p_ctx->prl.prl_receive_length = 5;
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
1000333c:	54e1      	strb	r1, [r4, r3]
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
1000333e:	88b3      	ldrh	r3, [r6, #4]
10003340:	428b      	cmp	r3, r1
10003342:	d016      	beq.n	10003372 <ifx_i2c_prl_event_handler+0x182>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
10003344:	2234      	movs	r2, #52	; 0x34
10003346:	a81e      	add	r0, sp, #120	; 0x78
10003348:	f008 ff7a 	bl	1000c240 <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
1000334c:	88b0      	ldrh	r0, [r6, #4]
1000334e:	a91e      	add	r1, sp, #120	; 0x78
10003350:	2234      	movs	r2, #52	; 0x34
10003352:	f7fe f90f 	bl	10001574 <pal_os_datastore_write>
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
10003356:	2801      	cmp	r0, #1
10003358:	d10b      	bne.n	10003372 <ifx_i2c_prl_event_handler+0x182>
1000335a:	e0dc      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
1000335c:	23e9      	movs	r3, #233	; 0xe9
1000335e:	22ff      	movs	r2, #255	; 0xff
10003360:	005b      	lsls	r3, r3, #1
10003362:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.state = PRL_STATE_ERROR;
10003364:	3af8      	subs	r2, #248	; 0xf8
10003366:	3b22      	subs	r3, #34	; 0x22
10003368:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
1000336a:	32fb      	adds	r2, #251	; 0xfb
1000336c:	33b4      	adds	r3, #180	; 0xb4
1000336e:	52e2      	strh	r2, [r4, r3]
10003370:	e0d1      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                break;
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
10003372:	4ba7      	ldr	r3, [pc, #668]	; (10003610 <ifx_i2c_prl_event_handler+0x420>)
10003374:	1c20      	adds	r0, r4, #0
10003376:	5ae2      	ldrh	r2, [r4, r3]
10003378:	330a      	adds	r3, #10
1000337a:	18e3      	adds	r3, r4, r3
1000337c:	9300      	str	r3, [sp, #0]
1000337e:	2387      	movs	r3, #135	; 0x87
10003380:	009b      	lsls	r3, r3, #2
10003382:	18e3      	adds	r3, r4, r3
10003384:	1c19      	adds	r1, r3, #0
10003386:	f000 feb9 	bl	100040fc <ifx_i2c_tl_transceive>
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
1000338a:	2800      	cmp	r0, #0
1000338c:	d000      	beq.n	10003390 <ifx_i2c_prl_event_handler+0x1a0>
1000338e:	e0bf      	b.n	10003510 <ifx_i2c_prl_event_handler+0x320>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
10003390:	2302      	movs	r3, #2
10003392:	5563      	strb	r3, [r4, r5]
10003394:	f000 fc6e 	bl	10003c74 <ifx_i2c_prl_event_handler+0xa84>
        }
        break;
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
10003398:	2203      	movs	r2, #3
1000339a:	9b07      	ldr	r3, [sp, #28]
1000339c:	781b      	ldrb	r3, [r3, #0]
1000339e:	4393      	bics	r3, r2
100033a0:	229a      	movs	r2, #154	; 0x9a
100033a2:	0092      	lsls	r2, r2, #2
100033a4:	18a5      	adds	r5, r4, r2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
100033a6:	2b6c      	cmp	r3, #108	; 0x6c
100033a8:	d12b      	bne.n	10003402 <ifx_i2c_prl_event_handler+0x212>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
100033aa:	1c23      	adds	r3, r4, #0
100033ac:	3332      	adds	r3, #50	; 0x32
        break;
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
100033ae:	781b      	ldrb	r3, [r3, #0]
100033b0:	2b11      	cmp	r3, #17
100033b2:	d000      	beq.n	100033b6 <ifx_i2c_prl_event_handler+0x1c6>
100033b4:	e08c      	b.n	100034d0 <ifx_i2c_prl_event_handler+0x2e0>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
100033b6:	9b08      	ldr	r3, [sp, #32]
100033b8:	2b05      	cmp	r3, #5
100033ba:	d000      	beq.n	100033be <ifx_i2c_prl_event_handler+0x1ce>
100033bc:	e088      	b.n	100034d0 <ifx_i2c_prl_event_handler+0x2e0>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
100033be:	1c20      	adds	r0, r4, #0
100033c0:	30d5      	adds	r0, #213	; 0xd5
100033c2:	2228      	movs	r2, #40	; 0x28
100033c4:	30ff      	adds	r0, #255	; 0xff
100033c6:	1c29      	adds	r1, r5, #0
100033c8:	f008 ff31 	bl	1000c22e <memcpy>
100033cc:	23a5      	movs	r3, #165	; 0xa5
100033ce:	009b      	lsls	r3, r3, #2
100033d0:	58e2      	ldr	r2, [r4, r3]
100033d2:	3be0      	subs	r3, #224	; 0xe0
100033d4:	50e2      	str	r2, [r4, r3]
100033d6:	33e4      	adds	r3, #228	; 0xe4
100033d8:	58e2      	ldr	r2, [r4, r3]
100033da:	3bdc      	subs	r3, #220	; 0xdc
100033dc:	50e2      	str	r2, [r4, r3]
100033de:	33d4      	adds	r3, #212	; 0xd4
100033e0:	5ce2      	ldrb	r2, [r4, r3]
100033e2:	4b90      	ldr	r3, [pc, #576]	; (10003624 <ifx_i2c_prl_event_handler+0x434>)
100033e4:	54e2      	strb	r2, [r4, r3]
100033e6:	4b90      	ldr	r3, [pc, #576]	; (10003628 <ifx_i2c_prl_event_handler+0x438>)
100033e8:	5ce2      	ldrb	r2, [r4, r3]
100033ea:	4b90      	ldr	r3, [pc, #576]	; (1000362c <ifx_i2c_prl_event_handler+0x43c>)
100033ec:	54e2      	strb	r2, [r4, r3]
100033ee:	4b89      	ldr	r3, [pc, #548]	; (10003614 <ifx_i2c_prl_event_handler+0x424>)
100033f0:	5ce2      	ldrb	r2, [r4, r3]
100033f2:	3be0      	subs	r3, #224	; 0xe0
100033f4:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
100033f6:	2201      	movs	r2, #1
100033f8:	4b88      	ldr	r3, [pc, #544]	; (1000361c <ifx_i2c_prl_event_handler+0x42c>)
100033fa:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.state = PRL_STATE_TXRX;
100033fc:	3203      	adds	r2, #3
100033fe:	3bb6      	subs	r3, #182	; 0xb6
10003400:	e061      	b.n	100034c6 <ifx_i2c_prl_event_handler+0x2d6>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
10003402:	2b64      	cmp	r3, #100	; 0x64
10003404:	d164      	bne.n	100034d0 <ifx_i2c_prl_event_handler+0x2e0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
10003406:	1c23      	adds	r3, r4, #0
10003408:	3332      	adds	r3, #50	; 0x32
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
1000340a:	781b      	ldrb	r3, [r3, #0]
1000340c:	2b22      	cmp	r3, #34	; 0x22
1000340e:	d15f      	bne.n	100034d0 <ifx_i2c_prl_event_handler+0x2e0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
10003410:	9b08      	ldr	r3, [sp, #32]
10003412:	2b01      	cmp	r3, #1
10003414:	d15c      	bne.n	100034d0 <ifx_i2c_prl_event_handler+0x2e0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
10003416:	2120      	movs	r1, #32
10003418:	466a      	mov	r2, sp
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
1000341a:	1c26      	adds	r6, r4, #0
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
1000341c:	1852      	adds	r2, r2, r1
1000341e:	4b7e      	ldr	r3, [pc, #504]	; (10003618 <ifx_i2c_prl_event_handler+0x428>)
10003420:	7812      	ldrb	r2, [r2, #0]
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
10003422:	36d5      	adds	r6, #213	; 0xd5
10003424:	36ff      	adds	r6, #255	; 0xff
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
10003426:	54e2      	strb	r2, [r4, r3]
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
10003428:	1c28      	adds	r0, r5, #0
1000342a:	2228      	movs	r2, #40	; 0x28
1000342c:	1c31      	adds	r1, r6, #0
1000342e:	f008 fefe 	bl	1000c22e <memcpy>
10003432:	23da      	movs	r3, #218	; 0xda
10003434:	27d9      	movs	r7, #217	; 0xd9
10003436:	005b      	lsls	r3, r3, #1
10003438:	58e2      	ldr	r2, [r4, r3]
1000343a:	33e0      	adds	r3, #224	; 0xe0
1000343c:	50e2      	str	r2, [r4, r3]
1000343e:	3bd8      	subs	r3, #216	; 0xd8
10003440:	58e2      	ldr	r2, [r4, r3]
10003442:	33dc      	adds	r3, #220	; 0xdc
10003444:	50e2      	str	r2, [r4, r3]
10003446:	4b77      	ldr	r3, [pc, #476]	; (10003624 <ifx_i2c_prl_event_handler+0x434>)
10003448:	007f      	lsls	r7, r7, #1
1000344a:	5ce2      	ldrb	r2, [r4, r3]
1000344c:	332e      	adds	r3, #46	; 0x2e
1000344e:	54e2      	strb	r2, [r4, r3]
10003450:	4b76      	ldr	r3, [pc, #472]	; (1000362c <ifx_i2c_prl_event_handler+0x43c>)
10003452:	5ce2      	ldrb	r2, [r4, r3]
10003454:	4b74      	ldr	r3, [pc, #464]	; (10003628 <ifx_i2c_prl_event_handler+0x438>)
10003456:	54e2      	strb	r2, [r4, r3]
10003458:	5de2      	ldrb	r2, [r4, r7]
1000345a:	4b6e      	ldr	r3, [pc, #440]	; (10003614 <ifx_i2c_prl_event_handler+0x424>)
1000345c:	54e2      	strb	r2, [r4, r3]
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
1000345e:	6963      	ldr	r3, [r4, #20]
10003460:	8898      	ldrh	r0, [r3, #4]
10003462:	2800      	cmp	r0, #0
10003464:	d019      	beq.n	1000349a <ifx_i2c_prl_event_handler+0x2aa>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
10003466:	2398      	movs	r3, #152	; 0x98
10003468:	2234      	movs	r2, #52	; 0x34
1000346a:	009b      	lsls	r3, r3, #2
1000346c:	52e2      	strh	r2, [r4, r3]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
1000346e:	1c29      	adds	r1, r5, #0
10003470:	f7fe f880 	bl	10001574 <pal_os_datastore_write>
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
10003474:	2800      	cmp	r0, #0
10003476:	d010      	beq.n	1000349a <ifx_i2c_prl_event_handler+0x2aa>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
10003478:	23e9      	movs	r3, #233	; 0xe9
1000347a:	22ff      	movs	r2, #255	; 0xff
1000347c:	005b      	lsls	r3, r3, #1
1000347e:	54e2      	strb	r2, [r4, r3]
10003480:	3af8      	subs	r2, #248	; 0xf8
10003482:	3b22      	subs	r3, #34	; 0x22
10003484:	54e2      	strb	r2, [r4, r3]
10003486:	2184      	movs	r1, #132	; 0x84
10003488:	2299      	movs	r2, #153	; 0x99
1000348a:	2300      	movs	r3, #0
1000348c:	0092      	lsls	r2, r2, #2
1000348e:	0049      	lsls	r1, r1, #1
10003490:	55e3      	strb	r3, [r4, r7]
10003492:	52a1      	strh	r1, [r4, r2]
10003494:	323c      	adds	r2, #60	; 0x3c
10003496:	54a3      	strb	r3, [r4, r2]
10003498:	e03a      	b.n	10003510 <ifx_i2c_prl_event_handler+0x320>
                        break;
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
1000349a:	2228      	movs	r2, #40	; 0x28
1000349c:	1c30      	adds	r0, r6, #0
1000349e:	2100      	movs	r1, #0
100034a0:	f008 fece 	bl	1000c240 <memset>
100034a4:	22da      	movs	r2, #218	; 0xda
100034a6:	2300      	movs	r3, #0
100034a8:	0052      	lsls	r2, r2, #1
100034aa:	50a3      	str	r3, [r4, r2]
100034ac:	3204      	adds	r2, #4
100034ae:	50a3      	str	r3, [r4, r2]
100034b0:	3204      	adds	r2, #4
100034b2:	50a3      	str	r3, [r4, r2]
100034b4:	4a5b      	ldr	r2, [pc, #364]	; (10003624 <ifx_i2c_prl_event_handler+0x434>)
100034b6:	54a3      	strb	r3, [r4, r2]
100034b8:	4a5c      	ldr	r2, [pc, #368]	; (1000362c <ifx_i2c_prl_event_handler+0x43c>)
100034ba:	54a3      	strb	r3, [r4, r2]
100034bc:	323d      	adds	r2, #61	; 0x3d
100034be:	54a3      	strb	r3, [r4, r2]
100034c0:	2201      	movs	r2, #1
100034c2:	33b1      	adds	r3, #177	; 0xb1
100034c4:	33ff      	adds	r3, #255	; 0xff
100034c6:	54e2      	strb	r2, [r4, r3]
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                return_status = IFX_I2C_STACK_ERROR;
                break;
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
100034c8:	2399      	movs	r3, #153	; 0x99
100034ca:	2200      	movs	r2, #0
100034cc:	009b      	lsls	r3, r3, #2
100034ce:	e085      	b.n	100035dc <ifx_i2c_prl_event_handler+0x3ec>
                CLEAR_SESSION_CONTEXT(p_ctx);
                p_ctx->prl.state = PRL_STATE_IDLE;
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
100034d0:	1c28      	adds	r0, r5, #0
100034d2:	2100      	movs	r1, #0
100034d4:	2234      	movs	r2, #52	; 0x34
100034d6:	f008 feb3 	bl	1000c240 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
100034da:	6963      	ldr	r3, [r4, #20]
100034dc:	8898      	ldrh	r0, [r3, #4]
100034de:	2800      	cmp	r0, #0
100034e0:	d019      	beq.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
100034e2:	1c29      	adds	r1, r5, #0
100034e4:	2234      	movs	r2, #52	; 0x34
100034e6:	f7fe f845 	bl	10001574 <pal_os_datastore_write>
100034ea:	e014      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
            return_status = IFX_I2C_STACK_SUCCESS;
        }
        break;
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
100034ec:	23e9      	movs	r3, #233	; 0xe9
100034ee:	22ff      	movs	r2, #255	; 0xff
100034f0:	005b      	lsls	r3, r3, #1
100034f2:	54e2      	strb	r2, [r4, r3]
100034f4:	3af8      	subs	r2, #248	; 0xf8
100034f6:	3b22      	subs	r3, #34	; 0x22
100034f8:	54e2      	strb	r2, [r4, r3]
100034fa:	2184      	movs	r1, #132	; 0x84
100034fc:	2300      	movs	r3, #0
100034fe:	32ac      	adds	r2, #172	; 0xac
10003500:	32ff      	adds	r2, #255	; 0xff
10003502:	54a3      	strb	r3, [r4, r2]
10003504:	0049      	lsls	r1, r1, #1
10003506:	32b2      	adds	r2, #178	; 0xb2
10003508:	52a1      	strh	r1, [r4, r2]
1000350a:	323c      	adds	r2, #60	; 0x3c
1000350c:	54a3      	strb	r3, [r4, r2]
1000350e:	e002      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
            break;
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
                if (IFX_I2C_STACK_SUCCESS != return_status)
10003510:	2800      	cmp	r0, #0
10003512:	d100      	bne.n	10003516 <ifx_i2c_prl_event_handler+0x326>
10003514:	e695      	b.n	10003242 <ifx_i2c_prl_event_handler+0x52>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
10003516:	23e9      	movs	r3, #233	; 0xe9
10003518:	22ff      	movs	r2, #255	; 0xff
1000351a:	005b      	lsls	r3, r3, #1
1000351c:	54e2      	strb	r2, [r4, r3]
1000351e:	3af8      	subs	r2, #248	; 0xf8
10003520:	3b22      	subs	r3, #34	; 0x22
10003522:	54e2      	strb	r2, [r4, r3]
10003524:	2184      	movs	r1, #132	; 0x84
10003526:	2300      	movs	r3, #0
10003528:	32ac      	adds	r2, #172	; 0xac
1000352a:	32ff      	adds	r2, #255	; 0xff
1000352c:	54a3      	strb	r3, [r4, r2]
1000352e:	0049      	lsls	r1, r1, #1
10003530:	32b2      	adds	r2, #178	; 0xb2
10003532:	52a1      	strh	r1, [r4, r2]
10003534:	323c      	adds	r2, #60	; 0x3c
10003536:	e340      	b.n	10003bba <ifx_i2c_prl_event_handler+0x9ca>
                }
            }
            break;
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
10003538:	1c23      	adds	r3, r4, #0
1000353a:	3330      	adds	r3, #48	; 0x30
1000353c:	781b      	ldrb	r3, [r3, #0]
1000353e:	b25a      	sxtb	r2, r3
10003540:	2a00      	cmp	r2, #0
10003542:	db06      	blt.n	10003552 <ifx_i2c_prl_event_handler+0x362>
10003544:	2b00      	cmp	r3, #0
10003546:	d015      	beq.n	10003574 <ifx_i2c_prl_event_handler+0x384>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
10003548:	23d9      	movs	r3, #217	; 0xd9
1000354a:	005b      	lsls	r3, r3, #1
            }
            break;
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
1000354c:	5ce3      	ldrb	r3, [r4, r3]
1000354e:	2b00      	cmp	r3, #0
10003550:	d110      	bne.n	10003574 <ifx_i2c_prl_event_handler+0x384>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
10003552:	23d8      	movs	r3, #216	; 0xd8
10003554:	2205      	movs	r2, #5
10003556:	005b      	lsls	r3, r3, #1
10003558:	54e2      	strb	r2, [r4, r3]
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
1000355a:	23b2      	movs	r3, #178	; 0xb2
1000355c:	320c      	adds	r2, #12
1000355e:	33ff      	adds	r3, #255	; 0xff
10003560:	54e2      	strb	r2, [r4, r3]
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003562:	2200      	movs	r2, #0
10003564:	3301      	adds	r3, #1
10003566:	e66b      	b.n	10003240 <ifx_i2c_prl_event_handler+0x50>
                    p_ctx->prl.return_status = return_status;
                    p_ctx->prl.state = PRL_STATE_ERROR;
                    break;
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
10003568:	23d9      	movs	r3, #217	; 0xd9
1000356a:	005b      	lsls	r3, r3, #1
1000356c:	5ce3      	ldrb	r3, [r4, r3]
1000356e:	2b01      	cmp	r3, #1
10003570:	d000      	beq.n	10003574 <ifx_i2c_prl_event_handler+0x384>
10003572:	e37f      	b.n	10003c74 <ifx_i2c_prl_event_handler+0xa84>
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                }
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
10003574:	2204      	movs	r2, #4
10003576:	e661      	b.n	1000323c <ifx_i2c_prl_event_handler+0x4c>
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
10003578:	239a      	movs	r3, #154	; 0x9a
1000357a:	009b      	lsls	r3, r3, #2
1000357c:	18e0      	adds	r0, r4, r3
1000357e:	2100      	movs	r1, #0
10003580:	2228      	movs	r2, #40	; 0x28
10003582:	f008 fe5d 	bl	1000c240 <memset>
10003586:	23a5      	movs	r3, #165	; 0xa5
10003588:	2500      	movs	r5, #0
1000358a:	009b      	lsls	r3, r3, #2
1000358c:	50e5      	str	r5, [r4, r3]
1000358e:	4b21      	ldr	r3, [pc, #132]	; (10003614 <ifx_i2c_prl_event_handler+0x424>)
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
10003590:	a811      	add	r0, sp, #68	; 0x44
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
10003592:	54e5      	strb	r5, [r4, r3]
10003594:	3306      	adds	r3, #6
10003596:	50e5      	str	r5, [r4, r3]
10003598:	3b08      	subs	r3, #8
1000359a:	54e5      	strb	r5, [r4, r3]
1000359c:	4b22      	ldr	r3, [pc, #136]	; (10003628 <ifx_i2c_prl_event_handler+0x438>)
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
1000359e:	1c29      	adds	r1, r5, #0
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
100035a0:	54e5      	strb	r5, [r4, r3]
100035a2:	4b1d      	ldr	r3, [pc, #116]	; (10003618 <ifx_i2c_prl_event_handler+0x428>)
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
100035a4:	2234      	movs	r2, #52	; 0x34
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
100035a6:	54e5      	strb	r5, [r4, r3]
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
100035a8:	f008 fe4a 	bl	1000c240 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
100035ac:	6963      	ldr	r3, [r4, #20]
100035ae:	8898      	ldrh	r0, [r3, #4]
100035b0:	42a8      	cmp	r0, r5
100035b2:	d015      	beq.n	100035e0 <ifx_i2c_prl_event_handler+0x3f0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
100035b4:	a911      	add	r1, sp, #68	; 0x44
100035b6:	2234      	movs	r2, #52	; 0x34
100035b8:	f7fd ffdc 	bl	10001574 <pal_os_datastore_write>
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
100035bc:	42a8      	cmp	r0, r5
100035be:	d00f      	beq.n	100035e0 <ifx_i2c_prl_event_handler+0x3f0>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
100035c0:	23e9      	movs	r3, #233	; 0xe9
100035c2:	22ff      	movs	r2, #255	; 0xff
100035c4:	005b      	lsls	r3, r3, #1
100035c6:	54e2      	strb	r2, [r4, r3]
100035c8:	3af8      	subs	r2, #248	; 0xf8
100035ca:	3b22      	subs	r3, #34	; 0x22
100035cc:	54e2      	strb	r2, [r4, r3]
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
100035ce:	2208      	movs	r2, #8
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
100035d0:	3302      	adds	r3, #2
100035d2:	54e5      	strb	r5, [r4, r3]
100035d4:	33ee      	adds	r3, #238	; 0xee
100035d6:	54e5      	strb	r5, [r4, r3]
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
100035d8:	32ff      	adds	r2, #255	; 0xff
100035da:	3b3c      	subs	r3, #60	; 0x3c
100035dc:	52e2      	strh	r2, [r4, r3]
                        break;
100035de:	e630      	b.n	10003242 <ifx_i2c_prl_event_handler+0x52>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                return_status = IFX_I2C_STACK_ERROR;
100035e0:	2300      	movs	r3, #0
100035e2:	2581      	movs	r5, #129	; 0x81
100035e4:	9309      	str	r3, [sp, #36]	; 0x24
100035e6:	006d      	lsls	r5, r5, #1
    uint32_t exit_machine = FALSE;
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
100035e8:	23b2      	movs	r3, #178	; 0xb2
100035ea:	33ff      	adds	r3, #255	; 0xff
100035ec:	5ce3      	ldrb	r3, [r4, r3]
100035ee:	2b33      	cmp	r3, #51	; 0x33
100035f0:	d100      	bne.n	100035f4 <ifx_i2c_prl_event_handler+0x404>
100035f2:	e0a6      	b.n	10003742 <ifx_i2c_prl_event_handler+0x552>
100035f4:	d804      	bhi.n	10003600 <ifx_i2c_prl_event_handler+0x410>
100035f6:	2b11      	cmp	r3, #17
100035f8:	d01a      	beq.n	10003630 <ifx_i2c_prl_event_handler+0x440>
100035fa:	2b22      	cmp	r3, #34	; 0x22
100035fc:	d043      	beq.n	10003686 <ifx_i2c_prl_event_handler+0x496>
100035fe:	e12f      	b.n	10003860 <ifx_i2c_prl_event_handler+0x670>
10003600:	2b44      	cmp	r3, #68	; 0x44
10003602:	d100      	bne.n	10003606 <ifx_i2c_prl_event_handler+0x416>
10003604:	e0db      	b.n	100037be <ifx_i2c_prl_event_handler+0x5ce>
10003606:	2b55      	cmp	r3, #85	; 0x55
10003608:	d100      	bne.n	1000360c <ifx_i2c_prl_event_handler+0x41c>
1000360a:	e122      	b.n	10003852 <ifx_i2c_prl_event_handler+0x662>
1000360c:	e128      	b.n	10003860 <ifx_i2c_prl_event_handler+0x670>
1000360e:	46c0      	nop			; (mov r8, r8)
10003610:	00000256 	.word	0x00000256
10003614:	00000292 	.word	0x00000292
10003618:	00000293 	.word	0x00000293
1000361c:	00000266 	.word	0x00000266
10003620:	0000021d 	.word	0x0000021d
10003624:	00000262 	.word	0x00000262
10003628:	00000291 	.word	0x00000291
1000362c:	00000263 	.word	0x00000263
        {
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
10003630:	22e8      	movs	r2, #232	; 0xe8
10003632:	2300      	movs	r3, #0
10003634:	0052      	lsls	r2, r2, #1
10003636:	54a3      	strb	r3, [r4, r2]
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
10003638:	324c      	adds	r2, #76	; 0x4c
1000363a:	54a3      	strb	r3, [r4, r2]
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
1000363c:	1c23      	adds	r3, r4, #0
1000363e:	3331      	adds	r3, #49	; 0x31
10003640:	781a      	ldrb	r2, [r3, #0]
10003642:	4bd7      	ldr	r3, [pc, #860]	; (100039a0 <ifx_i2c_prl_event_handler+0x7b0>)
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
10003644:	1c20      	adds	r0, r4, #0
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
10003646:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
10003648:	2226      	movs	r2, #38	; 0x26
1000364a:	3343      	adds	r3, #67	; 0x43
1000364c:	52e2      	strh	r2, [r4, r3]
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
1000364e:	18e3      	adds	r3, r4, r3
10003650:	9300      	str	r3, [sp, #0]
10003652:	2387      	movs	r3, #135	; 0x87
10003654:	009b      	lsls	r3, r3, #2
10003656:	18e3      	adds	r3, r4, r3
10003658:	1c19      	adds	r1, r3, #0
1000365a:	3a24      	subs	r2, #36	; 0x24
1000365c:	f000 fd4e 	bl	100040fc <ifx_i2c_tl_transceive>
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_ERROR == return_status)
10003660:	2381      	movs	r3, #129	; 0x81
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
10003662:	1c05      	adds	r5, r0, #0
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_ERROR == return_status)
10003664:	005b      	lsls	r3, r3, #1
10003666:	4298      	cmp	r0, r3
10003668:	d108      	bne.n	1000367c <ifx_i2c_prl_event_handler+0x48c>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
1000366a:	22b2      	movs	r2, #178	; 0xb2
1000366c:	2355      	movs	r3, #85	; 0x55
1000366e:	2581      	movs	r5, #129	; 0x81
10003670:	32ff      	adds	r2, #255	; 0xff
10003672:	54a3      	strb	r3, [r4, r2]
10003674:	006d      	lsls	r5, r5, #1
10003676:	2301      	movs	r3, #1
10003678:	9309      	str	r3, [sp, #36]	; 0x24
1000367a:	e7b5      	b.n	100035e8 <ifx_i2c_prl_event_handler+0x3f8>
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
1000367c:	22b2      	movs	r2, #178	; 0xb2
1000367e:	2322      	movs	r3, #34	; 0x22
10003680:	32ff      	adds	r2, #255	; 0xff
10003682:	54a3      	strb	r3, [r4, r2]
10003684:	e0ec      	b.n	10003860 <ifx_i2c_prl_event_handler+0x670>
10003686:	2298      	movs	r2, #152	; 0x98
            }
            break;
            case PRL_HS_VERIFY_HELLO:
            {
                exit_machine = TRUE;
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
10003688:	2144      	movs	r1, #68	; 0x44
1000368a:	9b07      	ldr	r3, [sp, #28]
1000368c:	0092      	lsls	r2, r2, #2
1000368e:	781b      	ldrb	r3, [r3, #0]
10003690:	420b      	tst	r3, r1
10003692:	d003      	beq.n	1000369c <ifx_i2c_prl_event_handler+0x4ac>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
10003694:	5aa1      	ldrh	r1, [r4, r2]
10003696:	2901      	cmp	r1, #1
10003698:	d100      	bne.n	1000369c <ifx_i2c_prl_event_handler+0x4ac>
1000369a:	e0da      	b.n	10003852 <ifx_i2c_prl_event_handler+0x662>
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                    exit_machine = FALSE;
                    break;
                }
                //Check valid message type and protocol version
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
1000369c:	5aa2      	ldrh	r2, [r4, r2]
1000369e:	2a26      	cmp	r2, #38	; 0x26
100036a0:	d000      	beq.n	100036a4 <ifx_i2c_prl_event_handler+0x4b4>
100036a2:	e095      	b.n	100037d0 <ifx_i2c_prl_event_handler+0x5e0>
100036a4:	2b00      	cmp	r3, #0
100036a6:	d000      	beq.n	100036aa <ifx_i2c_prl_event_handler+0x4ba>
100036a8:	e092      	b.n	100037d0 <ifx_i2c_prl_event_handler+0x5e0>
100036aa:	9b07      	ldr	r3, [sp, #28]
100036ac:	785b      	ldrb	r3, [r3, #1]
100036ae:	2b01      	cmp	r3, #1
100036b0:	d000      	beq.n	100036b4 <ifx_i2c_prl_event_handler+0x4c4>
100036b2:	e08d      	b.n	100037d0 <ifx_i2c_prl_event_handler+0x5e0>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
100036b4:	9807      	ldr	r0, [sp, #28]
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
100036b6:	1c27      	adds	r7, r4, #0
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
100036b8:	3022      	adds	r0, #34	; 0x22
100036ba:	f000 fdd3 	bl	10004264 <optiga_common_get_uint32>
100036be:	23dc      	movs	r3, #220	; 0xdc
100036c0:	005b      	lsls	r3, r3, #1
100036c2:	50e0      	str	r0, [r4, r3]
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
100036c4:	3304      	adds	r3, #4
100036c6:	50e0      	str	r0, [r4, r3]
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
100036c8:	37fd      	adds	r7, #253	; 0xfd
100036ca:	9b07      	ldr	r3, [sp, #28]
100036cc:	37ff      	adds	r7, #255	; 0xff
100036ce:	1c99      	adds	r1, r3, #2
100036d0:	2220      	movs	r2, #32
100036d2:	1c38      	adds	r0, r7, #0
100036d4:	f008 fdab 	bl	1000c22e <memcpy>
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABLE;
100036d8:	49b2      	ldr	r1, [pc, #712]	; (100039a4 <ifx_i2c_prl_event_handler+0x7b4>)
100036da:	2211      	movs	r2, #17
100036dc:	a80c      	add	r0, sp, #48	; 0x30
100036de:	f008 fda6 	bl	1000c22e <memcpy>
    uint8_t secret_input[SHARED_SECRET_LENGTH];
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
100036e2:	6962      	ldr	r2, [r4, #20]
100036e4:	a91e      	add	r1, sp, #120	; 0x78
100036e6:	8850      	ldrh	r0, [r2, #2]
100036e8:	3206      	adds	r2, #6
100036ea:	f7fd ff5f 	bl	100015ac <pal_os_datastore_read>
100036ee:	2608      	movs	r6, #8
100036f0:	1c05      	adds	r5, r0, #0
100036f2:	36ff      	adds	r6, #255	; 0xff
                                              secret_input,
                                              &p_ctx->ifx_i2c_datastore_config->shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
100036f4:	2800      	cmp	r0, #0
100036f6:	d119      	bne.n	1000372c <ifx_i2c_prl_event_handler+0x53c>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
            break;
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
100036f8:	2310      	movs	r3, #16
100036fa:	9300      	str	r3, [sp, #0]
100036fc:	18db      	adds	r3, r3, r3
100036fe:	9302      	str	r3, [sp, #8]
                                          sizeof(secret_input),
                                          label_input,
                                          sizeof(label_input) - 1,
                                          p_ctx->prl.random,
                                          sizeof(p_ctx->prl.random),
                                          p_ctx->prl.session_key,
10003700:	1c23      	adds	r3, r4, #0
10003702:	33d5      	adds	r3, #213	; 0xd5
10003704:	33ff      	adds	r3, #255	; 0xff
        if (PAL_STATUS_SUCCESS != return_status)
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
            break;
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
10003706:	9303      	str	r3, [sp, #12]
10003708:	2328      	movs	r3, #40	; 0x28
1000370a:	9701      	str	r7, [sp, #4]
1000370c:	9304      	str	r3, [sp, #16]
1000370e:	a91e      	add	r1, sp, #120	; 0x78
10003710:	2240      	movs	r2, #64	; 0x40
10003712:	ab0c      	add	r3, sp, #48	; 0x30
10003714:	f7fd fcc6 	bl	100010a4 <pal_crypt_tls_prf_sha256>
10003718:	2800      	cmp	r0, #0
1000371a:	d000      	beq.n	1000371e <ifx_i2c_prl_event_handler+0x52e>
                                          p_ctx->prl.random,
                                          sizeof(p_ctx->prl.random),
                                          p_ctx->prl.session_key,
                                          sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
1000371c:	1c35      	adds	r5, r6, #0
        }
        memset(secret_input, 0, p_ctx->ifx_i2c_datastore_config->shared_secret_length);
1000371e:	6963      	ldr	r3, [r4, #20]
10003720:	a81e      	add	r0, sp, #120	; 0x78
10003722:	88da      	ldrh	r2, [r3, #6]
10003724:	2100      	movs	r1, #0
10003726:	f008 fd8b 	bl	1000c240 <memset>
1000372a:	e000      	b.n	1000372e <ifx_i2c_prl_event_handler+0x53e>
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
                                              secret_input,
                                              &p_ctx->ifx_i2c_datastore_config->shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
1000372c:	1c35      	adds	r5, r6, #0
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
1000372e:	2333      	movs	r3, #51	; 0x33
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);

                //Generating session key
                return_status = ifx_i2c_prl_prf(p_ctx);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
10003730:	42b5      	cmp	r5, r6
10003732:	d14e      	bne.n	100037d2 <ifx_i2c_prl_event_handler+0x5e2>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
10003734:	22b2      	movs	r2, #178	; 0xb2
10003736:	2355      	movs	r3, #85	; 0x55
10003738:	2508      	movs	r5, #8
1000373a:	32ff      	adds	r2, #255	; 0xff
1000373c:	54a3      	strb	r3, [r4, r2]
1000373e:	35ff      	adds	r5, #255	; 0xff
10003740:	e799      	b.n	10003676 <ifx_i2c_prl_event_handler+0x486>

            }
            break;
            case PRL_HS_SEND_FINISHED:
            {
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
10003742:	27e8      	movs	r7, #232	; 0xe8
10003744:	2308      	movs	r3, #8
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
10003746:	1c21      	adds	r1, r4, #0
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
10003748:	26dc      	movs	r6, #220	; 0xdc

            }
            break;
            case PRL_HS_SEND_FINISHED:
            {
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
1000374a:	007f      	lsls	r7, r7, #1
1000374c:	55e3      	strb	r3, [r4, r7]
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
1000374e:	4b96      	ldr	r3, [pc, #600]	; (100039a8 <ifx_i2c_prl_event_handler+0x7b8>)
10003750:	31fd      	adds	r1, #253	; 0xfd
10003752:	18e5      	adds	r5, r4, r3
10003754:	2220      	movs	r2, #32
10003756:	31ff      	adds	r1, #255	; 0xff
10003758:	1c28      	adds	r0, r5, #0
1000375a:	f008 fd68 	bl	1000c22e <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
1000375e:	4b93      	ldr	r3, [pc, #588]	; (100039ac <ifx_i2c_prl_event_handler+0x7bc>)
10003760:	0076      	lsls	r6, r6, #1
10003762:	18e0      	adds	r0, r4, r3
10003764:	59a1      	ldr	r1, [r4, r6]
10003766:	f000 fd8d 	bl	10004284 <optiga_common_set_uint32>
                                         p_ctx->prl.slave_sequence_number);

                //Preparing encryption data
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
1000376a:	5de3      	ldrb	r3, [r4, r7]
1000376c:	1c20      	adds	r0, r4, #0
1000376e:	9300      	str	r3, [sp, #0]
10003770:	1c29      	adds	r1, r5, #0
10003772:	59a3      	ldr	r3, [r4, r6]
10003774:	2224      	movs	r2, #36	; 0x24
10003776:	f7ff fcf7 	bl	10003168 <ifx_i2c_prl_encrypt_msg>
                                                        &p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.slave_sequence_number,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
1000377a:	2381      	movs	r3, #129	; 0x81
1000377c:	005b      	lsls	r3, r3, #1
1000377e:	4298      	cmp	r0, r3
10003780:	d100      	bne.n	10003784 <ifx_i2c_prl_event_handler+0x594>
10003782:	e772      	b.n	1000366a <ifx_i2c_prl_event_handler+0x47a>
                    exit_machine = TRUE;
                    break;
                }

                //Append presentation layer header
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
10003784:	5de2      	ldrb	r2, [r4, r7]
10003786:	331b      	adds	r3, #27
10003788:	33ff      	adds	r3, #255	; 0xff
1000378a:	54e2      	strb	r2, [r4, r3]
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
1000378c:	4b84      	ldr	r3, [pc, #528]	; (100039a0 <ifx_i2c_prl_event_handler+0x7b0>)
1000378e:	59a1      	ldr	r1, [r4, r6]
10003790:	18e0      	adds	r0, r4, r3
10003792:	f000 fd77 	bl	10004284 <optiga_common_set_uint32>

                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
10003796:	2398      	movs	r3, #152	; 0x98
10003798:	2231      	movs	r2, #49	; 0x31
1000379a:	009b      	lsls	r3, r3, #2
1000379c:	52e2      	strh	r2, [r4, r3]
                return_status = ifx_i2c_tl_transceive(p_ctx,
1000379e:	18e3      	adds	r3, r4, r3
100037a0:	9300      	str	r3, [sp, #0]
100037a2:	2387      	movs	r3, #135	; 0x87
100037a4:	009b      	lsls	r3, r3, #2
100037a6:	18e3      	adds	r3, r4, r3
100037a8:	1c20      	adds	r0, r4, #0
100037aa:	1c19      	adds	r1, r3, #0
100037ac:	f000 fca6 	bl	100040fc <ifx_i2c_tl_transceive>
100037b0:	1e05      	subs	r5, r0, #0
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      PRL_FINISHED_DATA_LENGTH + 1,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_SUCCESS != return_status)
100037b2:	d10d      	bne.n	100037d0 <ifx_i2c_prl_event_handler+0x5e0>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
100037b4:	22b2      	movs	r2, #178	; 0xb2
100037b6:	2344      	movs	r3, #68	; 0x44
100037b8:	32ff      	adds	r2, #255	; 0xff
100037ba:	54a3      	strb	r3, [r4, r2]
100037bc:	e054      	b.n	10003868 <ifx_i2c_prl_event_handler+0x678>
            }
            break;
            case PRL_HS_VERIFY_FINISHED:
            {
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
100037be:	9b07      	ldr	r3, [sp, #28]
100037c0:	781b      	ldrb	r3, [r3, #0]
100037c2:	2b08      	cmp	r3, #8
100037c4:	d104      	bne.n	100037d0 <ifx_i2c_prl_event_handler+0x5e0>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
100037c6:	2398      	movs	r3, #152	; 0x98
100037c8:	009b      	lsls	r3, r3, #2
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
            }
            break;
            case PRL_HS_VERIFY_FINISHED:
            {
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
100037ca:	5ae3      	ldrh	r3, [r4, r3]
100037cc:	2b31      	cmp	r3, #49	; 0x31
100037ce:	d004      	beq.n	100037da <ifx_i2c_prl_event_handler+0x5ea>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
100037d0:	2355      	movs	r3, #85	; 0x55
100037d2:	22b2      	movs	r2, #178	; 0xb2
100037d4:	32ff      	adds	r2, #255	; 0xff
100037d6:	54a3      	strb	r3, [r4, r2]
100037d8:	e74d      	b.n	10003676 <ifx_i2c_prl_event_handler+0x486>
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
100037da:	9b07      	ldr	r3, [sp, #28]
100037dc:	27da      	movs	r7, #218	; 0xda
100037de:	1c58      	adds	r0, r3, #1
100037e0:	f000 fd40 	bl	10004264 <optiga_common_get_uint32>
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                        &p_data[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
100037e4:	2287      	movs	r2, #135	; 0x87
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
100037e6:	007f      	lsls	r7, r7, #1
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                        &p_data[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
100037e8:	0092      	lsls	r2, r2, #2
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
100037ea:	1c03      	adds	r3, r0, #0
100037ec:	51e0      	str	r0, [r4, r7]
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                        &p_data[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
100037ee:	18a6      	adds	r6, r4, r2
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
100037f0:	20e8      	movs	r0, #232	; 0xe8
100037f2:	9a07      	ldr	r2, [sp, #28]
100037f4:	0040      	lsls	r0, r0, #1
100037f6:	1d51      	adds	r1, r2, #5
100037f8:	2210      	movs	r2, #16
100037fa:	5c20      	ldrb	r0, [r4, r0]
100037fc:	9201      	str	r2, [sp, #4]
100037fe:	3214      	adds	r2, #20
10003800:	9003      	str	r0, [sp, #12]
10003802:	9600      	str	r6, [sp, #0]
10003804:	9202      	str	r2, [sp, #8]
10003806:	1c20      	adds	r0, r4, #0
10003808:	f7ff fc5e 	bl	100030c8 <ifx_i2c_prl_decrypt_msg>
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
                                                        PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                        PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
1000380c:	2381      	movs	r3, #129	; 0x81
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
1000380e:	1c05      	adds	r5, r0, #0
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
                                                        PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                        PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
10003810:	005b      	lsls	r3, r3, #1
10003812:	4298      	cmp	r0, r3
10003814:	d100      	bne.n	10003818 <ifx_i2c_prl_event_handler+0x628>
10003816:	e728      	b.n	1000366a <ifx_i2c_prl_event_handler+0x47a>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
10003818:	a80b      	add	r0, sp, #44	; 0x2c
1000381a:	59e1      	ldr	r1, [r4, r7]
1000381c:	f000 fd32 	bl	10004284 <optiga_common_set_uint32>
                ///Validating decrpt data
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
10003820:	1c20      	adds	r0, r4, #0
10003822:	30fd      	adds	r0, #253	; 0xfd
10003824:	30ff      	adds	r0, #255	; 0xff
10003826:	1c31      	adds	r1, r6, #0
10003828:	2220      	movs	r2, #32
1000382a:	f008 fcf1 	bl	1000c210 <memcmp>
1000382e:	2800      	cmp	r0, #0
10003830:	d000      	beq.n	10003834 <ifx_i2c_prl_event_handler+0x644>
10003832:	e77f      	b.n	10003734 <ifx_i2c_prl_event_handler+0x544>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                ///Validating sequence number
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
10003834:	238f      	movs	r3, #143	; 0x8f
10003836:	009b      	lsls	r3, r3, #2
10003838:	a80b      	add	r0, sp, #44	; 0x2c
1000383a:	18e1      	adds	r1, r4, r3
1000383c:	2204      	movs	r2, #4
1000383e:	f008 fce7 	bl	1000c210 <memcmp>
10003842:	2800      	cmp	r0, #0
10003844:	d000      	beq.n	10003848 <ifx_i2c_prl_event_handler+0x658>
10003846:	e775      	b.n	10003734 <ifx_i2c_prl_event_handler+0x544>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
10003848:	23d9      	movs	r3, #217	; 0xd9
1000384a:	2201      	movs	r2, #1
1000384c:	005b      	lsls	r3, r3, #1
1000384e:	54e2      	strb	r2, [r4, r3]
10003850:	e006      	b.n	10003860 <ifx_i2c_prl_event_handler+0x670>
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
10003852:	23e9      	movs	r3, #233	; 0xe9
10003854:	22ff      	movs	r2, #255	; 0xff
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
10003856:	2508      	movs	r5, #8
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
10003858:	005b      	lsls	r3, r3, #1
1000385a:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
1000385c:	35ff      	adds	r5, #255	; 0xff
1000385e:	e003      	b.n	10003868 <ifx_i2c_prl_event_handler+0x678>
            break;
            default:
            break;
        }

    } while (TRUE == exit_machine);
10003860:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003862:	2b01      	cmp	r3, #1
10003864:	d100      	bne.n	10003868 <ifx_i2c_prl_event_handler+0x678>
10003866:	e706      	b.n	10003676 <ifx_i2c_prl_event_handler+0x486>
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
                        break;
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
10003868:	2308      	movs	r3, #8
1000386a:	33ff      	adds	r3, #255	; 0xff
1000386c:	429d      	cmp	r5, r3
1000386e:	d000      	beq.n	10003872 <ifx_i2c_prl_event_handler+0x682>
10003870:	e67a      	b.n	10003568 <ifx_i2c_prl_event_handler+0x378>
                {
                    p_ctx->prl.return_status = return_status;
10003872:	335e      	adds	r3, #94	; 0x5e
10003874:	33ff      	adds	r3, #255	; 0xff
10003876:	52e5      	strh	r5, [r4, r3]
                    p_ctx->prl.state = PRL_STATE_ERROR;
10003878:	2207      	movs	r2, #7
1000387a:	3bb4      	subs	r3, #180	; 0xb4
1000387c:	e4e0      	b.n	10003240 <ifx_i2c_prl_event_handler+0x50>
                }
            }
            break;
            case PRL_STATE_TXRX:
            {
                FORM_SCTR_HEADER(p_ctx,
1000387e:	1c22      	adds	r2, r4, #0
10003880:	2303      	movs	r3, #3
10003882:	3230      	adds	r2, #48	; 0x30
10003884:	7811      	ldrb	r1, [r2, #0]
10003886:	20e8      	movs	r0, #232	; 0xe8
10003888:	400b      	ands	r3, r1
1000388a:	2120      	movs	r1, #32
1000388c:	0040      	lsls	r0, r0, #1
1000388e:	4319      	orrs	r1, r3
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
10003890:	3b02      	subs	r3, #2
                }
            }
            break;
            case PRL_STATE_TXRX:
            {
                FORM_SCTR_HEADER(p_ctx,
10003892:	5421      	strb	r1, [r4, r0]
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
10003894:	2b01      	cmp	r3, #1
10003896:	d81b      	bhi.n	100038d0 <ifx_i2c_prl_event_handler+0x6e0>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
10003898:	23de      	movs	r3, #222	; 0xde
1000389a:	005b      	lsls	r3, r3, #1
1000389c:	58e3      	ldr	r3, [r4, r3]
1000389e:	3301      	adds	r3, #1
100038a0:	3310      	adds	r3, #16
100038a2:	d90f      	bls.n	100038c4 <ifx_i2c_prl_event_handler+0x6d4>
                        (FALSE == p_ctx->prl.trans_repeat_status))
100038a4:	23a8      	movs	r3, #168	; 0xa8
100038a6:	009b      	lsls	r3, r3, #2
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
100038a8:	5ce3      	ldrb	r3, [r4, r3]
100038aa:	2b00      	cmp	r3, #0
100038ac:	d10a      	bne.n	100038c4 <ifx_i2c_prl_event_handler+0x6d4>
                        (FALSE == p_ctx->prl.trans_repeat_status))
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
100038ae:	23d9      	movs	r3, #217	; 0xd9
100038b0:	2200      	movs	r2, #0
100038b2:	005b      	lsls	r3, r3, #1
100038b4:	54e2      	strb	r2, [r4, r3]
100038b6:	3205      	adds	r2, #5
100038b8:	3b02      	subs	r3, #2
100038ba:	54e2      	strb	r2, [r4, r3]
100038bc:	23b2      	movs	r3, #178	; 0xb2
100038be:	320c      	adds	r2, #12
100038c0:	33ff      	adds	r3, #255	; 0xff
100038c2:	e4bd      	b.n	10003240 <ifx_i2c_prl_event_handler+0x50>
                        break;
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
100038c4:	23e6      	movs	r3, #230	; 0xe6
100038c6:	005b      	lsls	r3, r3, #1
100038c8:	58e1      	ldr	r1, [r4, r3]
100038ca:	880b      	ldrh	r3, [r1, #0]
100038cc:	330d      	adds	r3, #13
100038ce:	800b      	strh	r3, [r1, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
100038d0:	23e8      	movs	r3, #232	; 0xe8
100038d2:	27d2      	movs	r7, #210	; 0xd2
100038d4:	005b      	lsls	r3, r3, #1
100038d6:	5ce0      	ldrb	r0, [r4, r3]
100038d8:	37ff      	adds	r7, #255	; 0xff
100038da:	55e0      	strb	r0, [r4, r7]

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
100038dc:	7813      	ldrb	r3, [r2, #0]
100038de:	2201      	movs	r2, #1
100038e0:	4213      	tst	r3, r2
100038e2:	d065      	beq.n	100039b0 <ifx_i2c_prl_event_handler+0x7c0>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
100038e4:	23da      	movs	r3, #218	; 0xda
100038e6:	005b      	lsls	r3, r3, #1
100038e8:	58e3      	ldr	r3, [r4, r3]
100038ea:	189a      	adds	r2, r3, r2
100038ec:	3210      	adds	r2, #16
100038ee:	d904      	bls.n	100038fa <ifx_i2c_prl_event_handler+0x70a>
                        (FALSE == p_ctx->prl.trans_repeat_status))
100038f0:	22a8      	movs	r2, #168	; 0xa8
100038f2:	0092      	lsls	r2, r2, #2
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
100038f4:	5ca2      	ldrb	r2, [r4, r2]
100038f6:	2a00      	cmp	r2, #0
100038f8:	d0d9      	beq.n	100038ae <ifx_i2c_prl_event_handler+0x6be>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
100038fa:	22e9      	movs	r2, #233	; 0xe9
100038fc:	0052      	lsls	r2, r2, #1
100038fe:	5ca2      	ldrb	r2, [r4, r2]
10003900:	2a04      	cmp	r2, #4
10003902:	d119      	bne.n	10003938 <ifx_i2c_prl_event_handler+0x748>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
10003904:	2500      	movs	r5, #0
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
10003906:	32bd      	adds	r2, #189	; 0xbd
10003908:	32ff      	adds	r2, #255	; 0xff
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
1000390a:	58a1      	ldr	r1, [r4, r2]
1000390c:	9501      	str	r5, [sp, #4]
1000390e:	3105      	adds	r1, #5
10003910:	3204      	adds	r2, #4
10003912:	3520      	adds	r5, #32
10003914:	9003      	str	r0, [sp, #12]
10003916:	5aa2      	ldrh	r2, [r4, r2]
10003918:	9100      	str	r1, [sp, #0]
1000391a:	9502      	str	r5, [sp, #8]
1000391c:	1c20      	adds	r0, r4, #0
1000391e:	f7ff fbd3 	bl	100030c8 <ifx_i2c_prl_decrypt_msg>
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
10003922:	2381      	movs	r3, #129	; 0x81
10003924:	005b      	lsls	r3, r3, #1
10003926:	4298      	cmp	r0, r3
10003928:	d100      	bne.n	1000392c <ifx_i2c_prl_event_handler+0x73c>
1000392a:	e5f4      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
1000392c:	335f      	adds	r3, #95	; 0x5f
1000392e:	33ff      	adds	r3, #255	; 0xff
10003930:	5ae2      	ldrh	r2, [r4, r3]
10003932:	3b94      	subs	r3, #148	; 0x94
10003934:	58e3      	ldr	r3, [r4, r3]
10003936:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
10003938:	26da      	movs	r6, #218	; 0xda
1000393a:	0076      	lsls	r6, r6, #1
1000393c:	59a3      	ldr	r3, [r4, r6]
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
1000393e:	22d4      	movs	r2, #212	; 0xd4
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
10003940:	25e0      	movs	r5, #224	; 0xe0
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
10003942:	1c59      	adds	r1, r3, #1
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
10003944:	2305      	movs	r3, #5
10003946:	32ff      	adds	r2, #255	; 0xff
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
10003948:	006d      	lsls	r5, r5, #1
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
1000394a:	51a1      	str	r1, [r4, r6]
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
1000394c:	54a3      	strb	r3, [r4, r2]
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
1000394e:	5963      	ldr	r3, [r4, r5]
10003950:	1c58      	adds	r0, r3, #1
10003952:	f000 fc97 	bl	10004284 <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
10003956:	5963      	ldr	r3, [r4, r5]
10003958:	1c20      	adds	r0, r4, #0
1000395a:	1d59      	adds	r1, r3, #5
1000395c:	23e2      	movs	r3, #226	; 0xe2
1000395e:	005b      	lsls	r3, r3, #1
10003960:	5ae2      	ldrh	r2, [r4, r3]
10003962:	5de3      	ldrb	r3, [r4, r7]
10003964:	9300      	str	r3, [sp, #0]
10003966:	59a3      	ldr	r3, [r4, r6]
10003968:	f7ff fbfe 	bl	10003168 <ifx_i2c_prl_encrypt_msg>
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
1000396c:	2381      	movs	r3, #129	; 0x81
1000396e:	005b      	lsls	r3, r3, #1
10003970:	4298      	cmp	r0, r3
10003972:	d100      	bne.n	10003976 <ifx_i2c_prl_event_handler+0x786>
10003974:	e5cf      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
10003976:	33ce      	adds	r3, #206	; 0xce
10003978:	5ce3      	ldrb	r3, [r4, r3]
1000397a:	5962      	ldr	r2, [r4, r5]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
1000397c:	1c20      	adds	r0, r4, #0
                    if (IFX_I2C_STACK_ERROR == return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
1000397e:	7013      	strb	r3, [r2, #0]
10003980:	23e2      	movs	r3, #226	; 0xe2
10003982:	005b      	lsls	r3, r3, #1
10003984:	5ae2      	ldrh	r2, [r4, r3]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
10003986:	23d4      	movs	r3, #212	; 0xd4
10003988:	33ff      	adds	r3, #255	; 0xff
1000398a:	5ce3      	ldrb	r3, [r4, r3]
1000398c:	3208      	adds	r2, #8
1000398e:	189a      	adds	r2, r3, r2
10003990:	23e6      	movs	r3, #230	; 0xe6
10003992:	005b      	lsls	r3, r3, #1
10003994:	58e3      	ldr	r3, [r4, r3]
10003996:	b292      	uxth	r2, r2
10003998:	9300      	str	r3, [sp, #0]
1000399a:	5961      	ldr	r1, [r4, r5]
1000399c:	e01b      	b.n	100039d6 <ifx_i2c_prl_event_handler+0x7e6>
1000399e:	46c0      	nop			; (mov r8, r8)
100039a0:	0000021d 	.word	0x0000021d
100039a4:	1000cab4 	.word	0x1000cab4
100039a8:	00000221 	.word	0x00000221
100039ac:	00000241 	.word	0x00000241
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
100039b0:	23d4      	movs	r3, #212	; 0xd4
100039b2:	33ff      	adds	r3, #255	; 0xff
100039b4:	54e2      	strb	r2, [r4, r3]
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
100039b6:	22e0      	movs	r2, #224	; 0xe0
100039b8:	0052      	lsls	r2, r2, #1
100039ba:	58a1      	ldr	r1, [r4, r2]
100039bc:	7108      	strb	r0, [r1, #4]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
100039be:	58a1      	ldr	r1, [r4, r2]
100039c0:	5ce2      	ldrb	r2, [r4, r3]
                                                          &p_ctx->prl.p_actual_payload[4],
                                                          p_ctx->prl.actual_payload_length + 
100039c2:	3b0f      	subs	r3, #15
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
                    return_status = ifx_i2c_tl_transceive(p_ctx,
100039c4:	5ae3      	ldrh	r3, [r4, r3]
100039c6:	1c20      	adds	r0, r4, #0
100039c8:	18d2      	adds	r2, r2, r3
100039ca:	23e6      	movs	r3, #230	; 0xe6
100039cc:	005b      	lsls	r3, r3, #1
100039ce:	58e3      	ldr	r3, [r4, r3]
100039d0:	3104      	adds	r1, #4
100039d2:	b292      	uxth	r2, r2
100039d4:	9300      	str	r3, [sp, #0]
100039d6:	23e4      	movs	r3, #228	; 0xe4
100039d8:	005b      	lsls	r3, r3, #1
100039da:	58e3      	ldr	r3, [r4, r3]
100039dc:	f000 fb8e 	bl	100040fc <ifx_i2c_tl_transceive>
100039e0:	23d8      	movs	r3, #216	; 0xd8
                                                          p_ctx->prl.actual_payload_length + 
                                                          p_ctx->prl.prl_header_offset,
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
100039e2:	2281      	movs	r2, #129	; 0x81
100039e4:	005b      	lsls	r3, r3, #1
100039e6:	0052      	lsls	r2, r2, #1
100039e8:	4290      	cmp	r0, r2
100039ea:	d110      	bne.n	10003a0e <ifx_i2c_prl_event_handler+0x81e>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
100039ec:	21ff      	movs	r1, #255	; 0xff
100039ee:	32d0      	adds	r2, #208	; 0xd0
100039f0:	54a1      	strb	r1, [r4, r2]
100039f2:	3acc      	subs	r2, #204	; 0xcc
100039f4:	3aff      	subs	r2, #255	; 0xff
100039f6:	54e2      	strb	r2, [r4, r3]
100039f8:	2300      	movs	r3, #0
100039fa:	32ac      	adds	r2, #172	; 0xac
100039fc:	32ff      	adds	r2, #255	; 0xff
100039fe:	54a3      	strb	r3, [r4, r2]
10003a00:	32ee      	adds	r2, #238	; 0xee
10003a02:	54a3      	strb	r3, [r4, r2]
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
10003a04:	2399      	movs	r3, #153	; 0x99
10003a06:	009b      	lsls	r3, r3, #2
10003a08:	52e0      	strh	r0, [r4, r3]
                    break;
10003a0a:	f7ff fc1a 	bl	10003242 <ifx_i2c_prl_event_handler+0x52>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
10003a0e:	22e6      	movs	r2, #230	; 0xe6
10003a10:	0052      	lsls	r2, r2, #1
10003a12:	58a2      	ldr	r2, [r4, r2]
10003a14:	8811      	ldrh	r1, [r2, #0]
10003a16:	2298      	movs	r2, #152	; 0x98
10003a18:	0092      	lsls	r2, r2, #2
10003a1a:	52a1      	strh	r1, [r4, r2]
                p_ctx->prl.state = PRL_STATE_VERIFY;
10003a1c:	2203      	movs	r2, #3
10003a1e:	e11c      	b.n	10003c5a <ifx_i2c_prl_event_handler+0xa6a>
                exit_machine = FALSE;
            }
            break;
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
10003a20:	26e4      	movs	r6, #228	; 0xe4
10003a22:	0076      	lsls	r6, r6, #1
10003a24:	59a3      	ldr	r3, [r4, r6]
10003a26:	1c58      	adds	r0, r3, #1
10003a28:	f000 fc1c 	bl	10004264 <optiga_common_get_uint32>
10003a2c:	22dc      	movs	r2, #220	; 0xdc
10003a2e:	0052      	lsls	r2, r2, #1
10003a30:	50a0      	str	r0, [r4, r2]
                if (0 == data_len)
10003a32:	9a08      	ldr	r2, [sp, #32]
                exit_machine = FALSE;
            }
            break;
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
10003a34:	1c03      	adds	r3, r0, #0
                if (0 == data_len)
10003a36:	2a00      	cmp	r2, #0
10003a38:	d100      	bne.n	10003a3c <ifx_i2c_prl_event_handler+0x84c>
10003a3a:	e56c      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                    break;
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
10003a3c:	2540      	movs	r5, #64	; 0x40
10003a3e:	9a07      	ldr	r2, [sp, #28]
10003a40:	7811      	ldrb	r1, [r2, #0]
10003a42:	400d      	ands	r5, r1
10003a44:	d031      	beq.n	10003aaa <ifx_i2c_prl_event_handler+0x8ba>
                {
                    //Check invalid message
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
10003a46:	2304      	movs	r3, #4
10003a48:	4399      	bics	r1, r3
10003a4a:	2940      	cmp	r1, #64	; 0x40
10003a4c:	d10b      	bne.n	10003a66 <ifx_i2c_prl_event_handler+0x876>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
10003a4e:	9b08      	ldr	r3, [sp, #32]
10003a50:	2b01      	cmp	r3, #1
10003a52:	d004      	beq.n	10003a5e <ifx_i2c_prl_event_handler+0x86e>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
10003a54:	23d9      	movs	r3, #217	; 0xd9
10003a56:	005b      	lsls	r3, r3, #1
10003a58:	5ce3      	ldrb	r3, [r4, r3]
10003a5a:	2b01      	cmp	r3, #1
10003a5c:	d003      	beq.n	10003a66 <ifx_i2c_prl_event_handler+0x876>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
10003a5e:	4b86      	ldr	r3, [pc, #536]	; (10003c78 <ifx_i2c_prl_event_handler+0xa88>)
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
                {
                    //Check invalid message
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
10003a60:	5ce3      	ldrb	r3, [r4, r3]
10003a62:	2b03      	cmp	r3, #3
10003a64:	d108      	bne.n	10003a78 <ifx_i2c_prl_event_handler+0x888>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10003a66:	2284      	movs	r2, #132	; 0x84
10003a68:	2399      	movs	r3, #153	; 0x99
10003a6a:	0052      	lsls	r2, r2, #1
10003a6c:	009b      	lsls	r3, r3, #2
10003a6e:	52e2      	strh	r2, [r4, r3]
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003a70:	2200      	movs	r2, #0
10003a72:	3bb2      	subs	r3, #178	; 0xb2
10003a74:	54e2      	strb	r2, [r4, r3]
10003a76:	e012      	b.n	10003a9e <ifx_i2c_prl_event_handler+0x8ae>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
10003a78:	4b80      	ldr	r3, [pc, #512]	; (10003c7c <ifx_i2c_prl_event_handler+0xa8c>)
10003a7a:	5ce2      	ldrb	r2, [r4, r3]
10003a7c:	3b02      	subs	r3, #2
10003a7e:	2a01      	cmp	r2, #1
10003a80:	d10a      	bne.n	10003a98 <ifx_i2c_prl_event_handler+0x8a8>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
10003a82:	1c22      	adds	r2, r4, #0
10003a84:	3232      	adds	r2, #50	; 0x32
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
10003a86:	7812      	ldrb	r2, [r2, #0]
10003a88:	2a11      	cmp	r2, #17
10003a8a:	d105      	bne.n	10003a98 <ifx_i2c_prl_event_handler+0x8a8>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003a8c:	2100      	movs	r1, #0
10003a8e:	32a2      	adds	r2, #162	; 0xa2
10003a90:	32ff      	adds	r2, #255	; 0xff
10003a92:	54a1      	strb	r1, [r4, r2]
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10003a94:	3aaa      	subs	r2, #170	; 0xaa
10003a96:	e001      	b.n	10003a9c <ifx_i2c_prl_event_handler+0x8ac>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
10003a98:	2281      	movs	r2, #129	; 0x81
10003a9a:	0052      	lsls	r2, r2, #1
10003a9c:	52e2      	strh	r2, [r4, r3]
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
10003a9e:	23d8      	movs	r3, #216	; 0xd8
10003aa0:	2206      	movs	r2, #6
10003aa2:	005b      	lsls	r3, r3, #1
10003aa4:	54e2      	strb	r2, [r4, r3]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
10003aa6:	32f9      	adds	r2, #249	; 0xf9
10003aa8:	e034      	b.n	10003b14 <ifx_i2c_prl_event_handler+0x924>
                }
                ///Sctr value mismatch
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
10003aaa:	20d2      	movs	r0, #210	; 0xd2
10003aac:	30ff      	adds	r0, #255	; 0xff
10003aae:	5c27      	ldrb	r7, [r4, r0]
10003ab0:	428f      	cmp	r7, r1
10003ab2:	d000      	beq.n	10003ab6 <ifx_i2c_prl_event_handler+0x8c6>
10003ab4:	e52f      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                {
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    break;
                }
                ///For slave encrypted message
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
10003ab6:	2203      	movs	r2, #3
10003ab8:	403a      	ands	r2, r7
10003aba:	3a02      	subs	r2, #2
10003abc:	2a01      	cmp	r2, #1
10003abe:	d832      	bhi.n	10003b26 <ifx_i2c_prl_event_handler+0x936>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
                {
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
10003ac0:	9a08      	ldr	r2, [sp, #32]
10003ac2:	2a0d      	cmp	r2, #13
10003ac4:	d800      	bhi.n	10003ac8 <ifx_i2c_prl_event_handler+0x8d8>
10003ac6:	e526      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                    {
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                        break;
                    }
                    //Check invalid sequence number
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
10003ac8:	22de      	movs	r2, #222	; 0xde
10003aca:	0052      	lsls	r2, r2, #1
10003acc:	58a1      	ldr	r1, [r4, r2]
10003ace:	1ccf      	adds	r7, r1, #3
10003ad0:	42bb      	cmp	r3, r7
10003ad2:	d900      	bls.n	10003ad6 <ifx_i2c_prl_event_handler+0x8e6>
10003ad4:	e51f      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
10003ad6:	428b      	cmp	r3, r1
10003ad8:	d800      	bhi.n	10003adc <ifx_i2c_prl_event_handler+0x8ec>
10003ada:	e51c      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
10003adc:	50a3      	str	r3, [r4, r2]
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
10003ade:	3210      	adds	r2, #16
10003ae0:	58a1      	ldr	r1, [r4, r2]
10003ae2:	880a      	ldrh	r2, [r1, #0]
10003ae4:	3a0d      	subs	r2, #13
10003ae6:	b292      	uxth	r2, r2
10003ae8:	800a      	strh	r2, [r1, #0]
                                                               (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
10003aea:	59a1      	ldr	r1, [r4, r6]
10003aec:	2610      	movs	r6, #16
10003aee:	5c20      	ldrb	r0, [r4, r0]
10003af0:	3105      	adds	r1, #5
10003af2:	9601      	str	r6, [sp, #4]
10003af4:	3614      	adds	r6, #20
10003af6:	9003      	str	r0, [sp, #12]
10003af8:	9100      	str	r1, [sp, #0]
10003afa:	9602      	str	r6, [sp, #8]
10003afc:	1c20      	adds	r0, r4, #0
10003afe:	f7ff fae3 	bl	100030c8 <ifx_i2c_prl_decrypt_msg>
10003b02:	23d8      	movs	r3, #216	; 0xd8
                                                            p_ctx->prl.slave_sequence_number,
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
                                                            PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                            PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
10003b04:	2281      	movs	r2, #129	; 0x81
10003b06:	005b      	lsls	r3, r3, #1
10003b08:	0052      	lsls	r2, r2, #1
10003b0a:	4290      	cmp	r0, r2
10003b0c:	d105      	bne.n	10003b1a <ifx_i2c_prl_event_handler+0x92a>
                    {
                        p_ctx->prl.state = PRL_STATE_ALERT;
10003b0e:	3afc      	subs	r2, #252	; 0xfc
10003b10:	54e2      	strb	r2, [r4, r3]
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
10003b12:	3a02      	subs	r2, #2
10003b14:	3322      	adds	r3, #34	; 0x22
10003b16:	f7ff fb93 	bl	10003240 <ifx_i2c_prl_event_handler+0x50>
                        break;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
10003b1a:	2299      	movs	r2, #153	; 0x99
10003b1c:	0092      	lsls	r2, r2, #2
10003b1e:	52a5      	strh	r5, [r4, r2]
                        p_ctx->prl.state = PRL_STATE_IDLE;
10003b20:	2201      	movs	r2, #1
10003b22:	f7ff fb8d 	bl	10003240 <ifx_i2c_prl_event_handler+0x50>
10003b26:	22d8      	movs	r2, #216	; 0xd8
                    }
                }
                else if (data_len <= 1)
10003b28:	9b08      	ldr	r3, [sp, #32]
10003b2a:	0052      	lsls	r2, r2, #1
10003b2c:	2b01      	cmp	r3, #1
10003b2e:	d815      	bhi.n	10003b5c <ifx_i2c_prl_event_handler+0x96c>
                {
                    p_ctx->prl.state = PRL_STATE_ERROR;
10003b30:	2307      	movs	r3, #7
10003b32:	54a3      	strb	r3, [r4, r2]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
10003b34:	33cc      	adds	r3, #204	; 0xcc
10003b36:	3ab1      	subs	r2, #177	; 0xb1
10003b38:	33ff      	adds	r3, #255	; 0xff
10003b3a:	54e2      	strb	r2, [r4, r3]
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
10003b3c:	3b20      	subs	r3, #32
10003b3e:	5ce1      	ldrb	r1, [r4, r3]
10003b40:	3266      	adds	r2, #102	; 0x66
10003b42:	32ff      	adds	r2, #255	; 0xff
10003b44:	2900      	cmp	r1, #0
10003b46:	d103      	bne.n	10003b50 <ifx_i2c_prl_event_handler+0x960>
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
10003b48:	3bb0      	subs	r3, #176	; 0xb0
10003b4a:	52a3      	strh	r3, [r4, r2]
10003b4c:	f7ff fb79 	bl	10003242 <ifx_i2c_prl_event_handler+0x52>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10003b50:	2184      	movs	r1, #132	; 0x84
10003b52:	0049      	lsls	r1, r1, #1
10003b54:	52a1      	strh	r1, [r4, r2]
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003b56:	54e5      	strb	r5, [r4, r3]
10003b58:	f7ff fb73 	bl	10003242 <ifx_i2c_prl_event_handler+0x52>
                    }
                }
                else
                {
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
10003b5c:	23e6      	movs	r3, #230	; 0xe6
10003b5e:	005b      	lsls	r3, r3, #1
10003b60:	58e1      	ldr	r1, [r4, r3]
10003b62:	880b      	ldrh	r3, [r1, #0]
10003b64:	3b01      	subs	r3, #1
10003b66:	800b      	strh	r3, [r1, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
10003b68:	2399      	movs	r3, #153	; 0x99
10003b6a:	009b      	lsls	r3, r3, #2
10003b6c:	52e5      	strh	r5, [r4, r3]
                    p_ctx->prl.state = PRL_STATE_IDLE;
10003b6e:	2301      	movs	r3, #1
10003b70:	e023      	b.n	10003bba <ifx_i2c_prl_event_handler+0x9ca>
                }
            }
            break;
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
10003b72:	9b07      	ldr	r3, [sp, #28]
10003b74:	781b      	ldrb	r3, [r3, #0]
10003b76:	2b44      	cmp	r3, #68	; 0x44
10003b78:	d122      	bne.n	10003bc0 <ifx_i2c_prl_event_handler+0x9d0>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
10003b7a:	9b08      	ldr	r3, [sp, #32]
10003b7c:	2b01      	cmp	r3, #1
10003b7e:	d000      	beq.n	10003b82 <ifx_i2c_prl_event_handler+0x992>
10003b80:	e4c9      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
10003b82:	493d      	ldr	r1, [pc, #244]	; (10003c78 <ifx_i2c_prl_event_handler+0xa88>)
10003b84:	5c63      	ldrb	r3, [r4, r1]
10003b86:	2b02      	cmp	r3, #2
10003b88:	d900      	bls.n	10003b8c <ifx_i2c_prl_event_handler+0x99c>
10003b8a:	e4c4      	b.n	10003516 <ifx_i2c_prl_event_handler+0x326>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
10003b8c:	1c22      	adds	r2, r4, #0
10003b8e:	2002      	movs	r0, #2
10003b90:	3230      	adds	r2, #48	; 0x30
10003b92:	7812      	ldrb	r2, [r2, #0]
10003b94:	4382      	bics	r2, r0
10003b96:	2a01      	cmp	r2, #1
10003b98:	d001      	beq.n	10003b9e <ifx_i2c_prl_event_handler+0x9ae>
10003b9a:	f7ff fb4e 	bl	1000323a <ifx_i2c_prl_event_handler+0x4a>
                             (FULL_PROTECTION == p_ctx->protection_level))
                    {
                        p_ctx->prl.data_retransmit_counter++;
10003b9e:	3301      	adds	r3, #1
10003ba0:	5463      	strb	r3, [r4, r1]
                        p_ctx->prl.trans_repeat_status = TRUE;
10003ba2:	466a      	mov	r2, sp
10003ba4:	2120      	movs	r1, #32
10003ba6:	23a8      	movs	r3, #168	; 0xa8
10003ba8:	1852      	adds	r2, r2, r1
10003baa:	7812      	ldrb	r2, [r2, #0]
10003bac:	009b      	lsls	r3, r3, #2
10003bae:	54e2      	strb	r2, [r4, r3]
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                            p_ctx->prl.state = PRL_STATE_IDLE;
                            break;
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
10003bb0:	22e9      	movs	r2, #233	; 0xe9
10003bb2:	2304      	movs	r3, #4
10003bb4:	0052      	lsls	r2, r2, #1
10003bb6:	54a3      	strb	r3, [r4, r2]
                        p_ctx->prl.state = PRL_STATE_TXRX;
10003bb8:	3a22      	subs	r2, #34	; 0x22
10003bba:	54a3      	strb	r3, [r4, r2]
10003bbc:	f7ff fb41 	bl	10003242 <ifx_i2c_prl_event_handler+0x52>
                      p_ctx->prl.state = PRL_STATE_ERROR;
                    }
                }
                else
                {
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
10003bc0:	4b2f      	ldr	r3, [pc, #188]	; (10003c80 <ifx_i2c_prl_event_handler+0xa90>)
10003bc2:	5ce3      	ldrb	r3, [r4, r3]
10003bc4:	2b03      	cmp	r3, #3
10003bc6:	d001      	beq.n	10003bcc <ifx_i2c_prl_event_handler+0x9dc>
10003bc8:	f7ff fb37 	bl	1000323a <ifx_i2c_prl_event_handler+0x4a>
                    {
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
10003bcc:	22ff      	movs	r2, #255	; 0xff
10003bce:	33d0      	adds	r3, #208	; 0xd0
10003bd0:	33ff      	adds	r3, #255	; 0xff
10003bd2:	54e2      	strb	r2, [r4, r3]
10003bd4:	2184      	movs	r1, #132	; 0x84
10003bd6:	2300      	movs	r3, #0
10003bd8:	32b3      	adds	r2, #179	; 0xb3
10003bda:	54a3      	strb	r3, [r4, r2]
10003bdc:	0049      	lsls	r1, r1, #1
10003bde:	32b2      	adds	r2, #178	; 0xb2
10003be0:	52a1      	strh	r1, [r4, r2]
10003be2:	323c      	adds	r2, #60	; 0x3c
10003be4:	54a3      	strb	r3, [r4, r2]
10003be6:	f7ff fb28 	bl	1000323a <ifx_i2c_prl_event_handler+0x4a>
                }
            }
            break;
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
10003bea:	22e9      	movs	r2, #233	; 0xe9
10003bec:	0052      	lsls	r2, r2, #1
10003bee:	5ca0      	ldrb	r0, [r4, r2]
10003bf0:	3ad2      	subs	r2, #210	; 0xd2
10003bf2:	3aff      	subs	r2, #255	; 0xff
10003bf4:	28ff      	cmp	r0, #255	; 0xff
10003bf6:	d101      	bne.n	10003bfc <ifx_i2c_prl_event_handler+0xa0c>
10003bf8:	f7ff fb22 	bl	10003240 <ifx_i2c_prl_event_handler+0x50>
10003bfc:	2199      	movs	r1, #153	; 0x99
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
10003bfe:	54e2      	strb	r2, [r4, r3]
10003c00:	0089      	lsls	r1, r1, #2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
10003c02:	2804      	cmp	r0, #4
10003c04:	d120      	bne.n	10003c48 <ifx_i2c_prl_event_handler+0xa58>
        {
            p_ctx->prl.decryption_failure_counter++;
10003c06:	481e      	ldr	r0, [pc, #120]	; (10003c80 <ifx_i2c_prl_event_handler+0xa90>)
10003c08:	5c23      	ldrb	r3, [r4, r0]
10003c0a:	189b      	adds	r3, r3, r2
10003c0c:	5423      	strb	r3, [r4, r0]
            p_ctx->prl.state = PRL_STATE_VERIFY;
10003c0e:	23d8      	movs	r3, #216	; 0xd8
10003c10:	2003      	movs	r0, #3
10003c12:	005b      	lsls	r3, r3, #1
10003c14:	54e0      	strb	r0, [r4, r3]
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
10003c16:	2300      	movs	r3, #0
10003c18:	5263      	strh	r3, [r4, r1]
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
10003c1a:	3344      	adds	r3, #68	; 0x44
10003c1c:	3994      	subs	r1, #148	; 0x94
10003c1e:	5463      	strb	r3, [r4, r1]
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
10003c20:	314c      	adds	r1, #76	; 0x4c
10003c22:	5463      	strb	r3, [r4, r1]
            return_status = ifx_i2c_tl_transceive(p_ctx,
10003c24:	2398      	movs	r3, #152	; 0x98
10003c26:	009b      	lsls	r3, r3, #2
10003c28:	18e3      	adds	r3, r4, r3
10003c2a:	9300      	str	r3, [sp, #0]
10003c2c:	1c0b      	adds	r3, r1, #0
10003c2e:	3b54      	subs	r3, #84	; 0x54
10003c30:	58e3      	ldr	r3, [r4, r3]
10003c32:	1c20      	adds	r0, r4, #0
10003c34:	1861      	adds	r1, r4, r1
10003c36:	f000 fa61 	bl	100040fc <ifx_i2c_tl_transceive>
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
10003c3a:	2398      	movs	r3, #152	; 0x98
10003c3c:	009b      	lsls	r3, r3, #2
10003c3e:	5ae2      	ldrh	r2, [r4, r3]
10003c40:	3b94      	subs	r3, #148	; 0x94
10003c42:	58e3      	ldr	r3, [r4, r3]
10003c44:	801a      	strh	r2, [r3, #0]
10003c46:	e005      	b.n	10003c54 <ifx_i2c_prl_event_handler+0xa64>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10003c48:	2384      	movs	r3, #132	; 0x84
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003c4a:	2200      	movs	r2, #0
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10003c4c:	005b      	lsls	r3, r3, #1
10003c4e:	5263      	strh	r3, [r4, r1]
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003c50:	33aa      	adds	r3, #170	; 0xaa
10003c52:	54e2      	strb	r2, [r4, r3]
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
10003c54:	23e9      	movs	r3, #233	; 0xe9
10003c56:	22ff      	movs	r2, #255	; 0xff
10003c58:	005b      	lsls	r3, r3, #1
10003c5a:	54e2      	strb	r2, [r4, r3]
10003c5c:	e00a      	b.n	10003c74 <ifx_i2c_prl_event_handler+0xa84>
                }
            }
            break;
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
10003c5e:	2201      	movs	r2, #1
10003c60:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
10003c62:	23a7      	movs	r3, #167	; 0xa7
10003c64:	2181      	movs	r1, #129	; 0x81
10003c66:	1c20      	adds	r0, r4, #0
10003c68:	009b      	lsls	r3, r3, #2
10003c6a:	58e5      	ldr	r5, [r4, r3]
10003c6c:	0049      	lsls	r1, r1, #1
10003c6e:	2200      	movs	r2, #0
10003c70:	1c13      	adds	r3, r2, #0
10003c72:	47a8      	blx	r5
                exit_machine = FALSE;
            }
            break;
        }
    } while (TRUE == exit_machine);
}
10003c74:	b02f      	add	sp, #188	; 0xbc
10003c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003c78:	00000263 	.word	0x00000263
10003c7c:	00000266 	.word	0x00000266
10003c80:	00000262 	.word	0x00000262

10003c84 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
10003c84:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
10003c86:	1c03      	adds	r3, r0, #0
10003c88:	2200      	movs	r2, #0
10003c8a:	3334      	adds	r3, #52	; 0x34
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
10003c8c:	1c0d      	adds	r5, r1, #0
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
10003c8e:	701a      	strb	r2, [r3, #0]

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
10003c90:	4914      	ldr	r1, [pc, #80]	; (10003ce4 <ifx_i2c_prl_init+0x60>)
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
10003c92:	1c04      	adds	r4, r0, #0
    p_ctx->tl.state = PRL_STATE_UNINIT;

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
10003c94:	f000 fa16 	bl	100040c4 <ifx_i2c_tl_init>
10003c98:	2800      	cmp	r0, #0
10003c9a:	d120      	bne.n	10003cde <ifx_i2c_prl_init+0x5a>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
10003c9c:	23a7      	movs	r3, #167	; 0xa7
10003c9e:	009b      	lsls	r3, r3, #2
10003ca0:	50e5      	str	r5, [r4, r3]
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
10003ca2:	1c23      	adds	r3, r4, #0
10003ca4:	3332      	adds	r3, #50	; 0x32
10003ca6:	781a      	ldrb	r2, [r3, #0]
10003ca8:	4b0f      	ldr	r3, [pc, #60]	; (10003ce8 <ifx_i2c_prl_init+0x64>)
10003caa:	2a11      	cmp	r2, #17
10003cac:	d101      	bne.n	10003cb2 <ifx_i2c_prl_init+0x2e>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
10003cae:	54e0      	strb	r0, [r4, r3]
10003cb0:	e001      	b.n	10003cb6 <ifx_i2c_prl_init+0x32>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
10003cb2:	2201      	movs	r2, #1
10003cb4:	54e2      	strb	r2, [r4, r3]
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
10003cb6:	22d8      	movs	r2, #216	; 0xd8
10003cb8:	2301      	movs	r3, #1
10003cba:	0052      	lsls	r2, r2, #1
10003cbc:	54a3      	strb	r3, [r4, r2]

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
10003cbe:	1c22      	adds	r2, r4, #0
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003cc0:	2000      	movs	r0, #0
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
        }
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
10003cc2:	3231      	adds	r2, #49	; 0x31
10003cc4:	7013      	strb	r3, [r2, #0]
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003cc6:	33b2      	adds	r3, #178	; 0xb2
10003cc8:	33ff      	adds	r3, #255	; 0xff
10003cca:	54e0      	strb	r0, [r4, r3]
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
10003ccc:	22b2      	movs	r2, #178	; 0xb2
        }
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
10003cce:	33b2      	adds	r3, #178	; 0xb2
10003cd0:	52e0      	strh	r0, [r4, r3]
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
10003cd2:	2311      	movs	r3, #17
10003cd4:	32ff      	adds	r2, #255	; 0xff
10003cd6:	54a3      	strb	r3, [r4, r2]
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
10003cd8:	3221      	adds	r2, #33	; 0x21
10003cda:	54a3      	strb	r3, [r4, r2]
10003cdc:	e001      	b.n	10003ce2 <ifx_i2c_prl_init+0x5e>
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
10003cde:	2081      	movs	r0, #129	; 0x81
10003ce0:	0040      	lsls	r0, r0, #1
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    
    return (return_status);
}
10003ce2:	bd38      	pop	{r3, r4, r5, pc}
10003ce4:	100031f1 	.word	0x100031f1
10003ce8:	00000266 	.word	0x00000266

10003cec <ifx_i2c_prl_close>:
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
10003cec:	22d8      	movs	r2, #216	; 0xd8
    
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
10003cee:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
10003cf0:	0052      	lsls	r2, r2, #1
10003cf2:	5c83      	ldrb	r3, [r0, r2]
10003cf4:	2b01      	cmp	r3, #1
10003cf6:	d002      	beq.n	10003cfe <ifx_i2c_prl_close+0x12>
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
10003cf8:	2081      	movs	r0, #129	; 0x81
10003cfa:	0040      	lsls	r0, r0, #1
10003cfc:	e01f      	b.n	10003d3e <ifx_i2c_prl_close+0x52>
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
10003cfe:	23a7      	movs	r3, #167	; 0xa7
10003d00:	009b      	lsls	r3, r3, #2
10003d02:	50c1      	str	r1, [r0, r3]
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
10003d04:	1c03      	adds	r3, r0, #0
10003d06:	3332      	adds	r3, #50	; 0x32
10003d08:	781c      	ldrb	r4, [r3, #0]
10003d0a:	1c0d      	adds	r5, r1, #0
10003d0c:	2c33      	cmp	r4, #51	; 0x33
10003d0e:	d104      	bne.n	10003d1a <ifx_i2c_prl_close+0x2e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
10003d10:	2100      	movs	r1, #0
10003d12:	1c0a      	adds	r2, r1, #0
10003d14:	1c0b      	adds	r3, r1, #0
10003d16:	47a8      	blx	r5
10003d18:	e010      	b.n	10003d3c <ifx_i2c_prl_close+0x50>
            return_status = IFX_I2C_STACK_SUCCESS;
            break;
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
10003d1a:	23d9      	movs	r3, #217	; 0xd9
10003d1c:	005b      	lsls	r3, r3, #1
10003d1e:	5cc3      	ldrb	r3, [r0, r3]
10003d20:	2b01      	cmp	r3, #1
10003d22:	d1e9      	bne.n	10003cf8 <ifx_i2c_prl_close+0xc>
10003d24:	2c22      	cmp	r4, #34	; 0x22
10003d26:	d1e7      	bne.n	10003cf8 <ifx_i2c_prl_close+0xc>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
10003d28:	2108      	movs	r1, #8
10003d2a:	5481      	strb	r1, [r0, r2]
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
10003d2c:	22b4      	movs	r2, #180	; 0xb4
10003d2e:	32ff      	adds	r2, #255	; 0xff
10003d30:	5483      	strb	r3, [r0, r2]
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
10003d32:	3269      	adds	r2, #105	; 0x69
10003d34:	1882      	adds	r2, r0, r2
10003d36:	2100      	movs	r1, #0
10003d38:	f7ff fa5a 	bl	100031f0 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
10003d3c:	2000      	movs	r0, #0
            break;
        }
    } while (FALSE);
    return (return_status);
}
10003d3e:	bd38      	pop	{r3, r4, r5, pc}

10003d40 <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
10003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003d42:	1c0e      	adds	r6, r1, #0
10003d44:	1c15      	adds	r5, r2, #0
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
10003d46:	2900      	cmp	r1, #0
10003d48:	d041      	beq.n	10003dce <ifx_i2c_prl_transceive+0x8e>
10003d4a:	2a00      	cmp	r2, #0
10003d4c:	d03f      	beq.n	10003dce <ifx_i2c_prl_transceive+0x8e>
10003d4e:	22d8      	movs	r2, #216	; 0xd8
10003d50:	0052      	lsls	r2, r2, #1
10003d52:	5c81      	ldrb	r1, [r0, r2]
10003d54:	1c14      	adds	r4, r2, #0
10003d56:	2901      	cmp	r1, #1
10003d58:	d139      	bne.n	10003dce <ifx_i2c_prl_transceive+0x8e>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
10003d5a:	1c07      	adds	r7, r0, #0
10003d5c:	3732      	adds	r7, #50	; 0x32
10003d5e:	783f      	ldrb	r7, [r7, #0]
10003d60:	2f11      	cmp	r7, #17
10003d62:	d10a      	bne.n	10003d7a <ifx_i2c_prl_transceive+0x3a>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
10003d64:	4f1b      	ldr	r7, [pc, #108]	; (10003dd4 <ifx_i2c_prl_transceive+0x94>)
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
10003d66:	5dc7      	ldrb	r7, [r0, r7]
10003d68:	2f00      	cmp	r7, #0
10003d6a:	d106      	bne.n	10003d7a <ifx_i2c_prl_transceive+0x3a>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
10003d6c:	3ca9      	subs	r4, #169	; 0xa9
10003d6e:	3cff      	subs	r4, #255	; 0xff
10003d70:	5484      	strb	r4, [r0, r2]
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
10003d72:	22b4      	movs	r2, #180	; 0xb4
10003d74:	32ff      	adds	r2, #255	; 0xff
10003d76:	5481      	strb	r1, [r0, r2]
10003d78:	e001      	b.n	10003d7e <ifx_i2c_prl_transceive+0x3e>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
10003d7a:	2202      	movs	r2, #2
10003d7c:	5502      	strb	r2, [r0, r4]
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
10003d7e:	22e0      	movs	r2, #224	; 0xe0
10003d80:	0052      	lsls	r2, r2, #1
10003d82:	5086      	str	r6, [r0, r2]
        p_ctx->prl.actual_payload_length = tx_data_len;
10003d84:	3204      	adds	r2, #4
10003d86:	5285      	strh	r5, [r0, r2]

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
10003d88:	1c02      	adds	r2, r0, #0
10003d8a:	3230      	adds	r2, #48	; 0x30
10003d8c:	7811      	ldrb	r1, [r2, #0]
10003d8e:	2203      	movs	r2, #3
10003d90:	400a      	ands	r2, r1
10003d92:	21e4      	movs	r1, #228	; 0xe4
10003d94:	3a02      	subs	r2, #2
10003d96:	0049      	lsls	r1, r1, #1
10003d98:	2a01      	cmp	r2, #1
10003d9a:	d900      	bls.n	10003d9e <ifx_i2c_prl_transceive+0x5e>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
10003d9c:	3304      	adds	r3, #4
10003d9e:	5043      	str	r3, [r0, r1]
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
10003da0:	23e6      	movs	r3, #230	; 0xe6
        p_ctx->prl.data_retransmit_counter = 0;
10003da2:	2400      	movs	r4, #0
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
10003da4:	9a06      	ldr	r2, [sp, #24]
10003da6:	005b      	lsls	r3, r3, #1
10003da8:	50c2      	str	r2, [r0, r3]
        p_ctx->prl.data_retransmit_counter = 0;
        p_ctx->prl.trans_repeat_status = FALSE;
        p_ctx->prl.decryption_failure_counter = 0;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
10003daa:	2211      	movs	r2, #17
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
        p_ctx->prl.data_retransmit_counter = 0;
10003dac:	4b0a      	ldr	r3, [pc, #40]	; (10003dd8 <ifx_i2c_prl_transceive+0x98>)
        p_ctx->prl.trans_repeat_status = FALSE;
        p_ctx->prl.decryption_failure_counter = 0;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;

        ifx_i2c_prl_event_handler(p_ctx,
10003dae:	1c21      	adds	r1, r4, #0
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
        p_ctx->prl.data_retransmit_counter = 0;
10003db0:	54c4      	strb	r4, [r0, r3]
        p_ctx->prl.trans_repeat_status = FALSE;
10003db2:	333d      	adds	r3, #61	; 0x3d
10003db4:	54c4      	strb	r4, [r0, r3]
        p_ctx->prl.decryption_failure_counter = 0;
10003db6:	4b09      	ldr	r3, [pc, #36]	; (10003ddc <ifx_i2c_prl_transceive+0x9c>)
10003db8:	54c4      	strb	r4, [r0, r3]
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
10003dba:	3302      	adds	r3, #2
10003dbc:	52c4      	strh	r4, [r0, r3]
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
10003dbe:	3b92      	subs	r3, #146	; 0x92
10003dc0:	54c2      	strb	r2, [r0, r3]

        ifx_i2c_prl_event_handler(p_ctx,
10003dc2:	1c32      	adds	r2, r6, #0
10003dc4:	1c2b      	adds	r3, r5, #0
10003dc6:	f7ff fa13 	bl	100031f0 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
10003dca:	1c20      	adds	r0, r4, #0
10003dcc:	e001      	b.n	10003dd2 <ifx_i2c_prl_transceive+0x92>
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
10003dce:	2081      	movs	r0, #129	; 0x81
10003dd0:	0040      	lsls	r0, r0, #1
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;

    } while (FALSE);
    return (return_status);
}
10003dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003dd4:	00000266 	.word	0x00000266
10003dd8:	00000263 	.word	0x00000263
10003ddc:	00000262 	.word	0x00000262

10003de0 <ifx_i2c_tl_send_next_fragment>:
    }

    return (pctr);
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
10003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
10003de2:	1c87      	adds	r7, r0, #2
10003de4:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
10003de6:	8ffe      	ldrh	r6, [r7, #62]	; 0x3e
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr = 0;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
10003de8:	1d03      	adds	r3, r0, #4

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
10003dea:	1b92      	subs	r2, r2, r6
    }

    return (pctr);
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
10003dec:	1c05      	adds	r5, r0, #0
    uint8_t pctr = 0;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
10003dee:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
10003df0:	b291      	uxth	r1, r2
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
10003df2:	2e00      	cmp	r6, #0
10003df4:	d103      	bne.n	10003dfe <ifx_i2c_tl_send_next_fragment+0x1e>
    {
        pctr = TL_CHAINING_NO;
10003df6:	428c      	cmp	r4, r1
10003df8:	419b      	sbcs	r3, r3
10003dfa:	425b      	negs	r3, r3
10003dfc:	e003      	b.n	10003e06 <ifx_i2c_tl_send_next_fragment+0x26>
        pctr = TL_CHAINING_INTERMEDIATE;
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
10003dfe:	2304      	movs	r3, #4
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
    {
        pctr = TL_CHAINING_FIRST;
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
10003e00:	42a1      	cmp	r1, r4
10003e02:	d900      	bls.n	10003e06 <ifx_i2c_tl_send_next_fragment+0x26>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
10003e04:	3b02      	subs	r3, #2
{
    uint8_t pctr = 0;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
10003e06:	42a2      	cmp	r2, r4
10003e08:	da00      	bge.n	10003e0c <ifx_i2c_tl_send_next_fragment+0x2c>

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
10003e0a:	1c0c      	adds	r4, r1, #0
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
10003e0c:	2208      	movs	r2, #8
10003e0e:	4313      	orrs	r3, r2
10003e10:	4a08      	ldr	r2, [pc, #32]	; (10003e34 <ifx_i2c_tl_send_next_fragment+0x54>)
10003e12:	54ab      	strb	r3, [r5, r2]
    //copy the data
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
10003e14:	23aa      	movs	r3, #170	; 0xaa
10003e16:	009b      	lsls	r3, r3, #2
10003e18:	18e8      	adds	r0, r5, r3
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
10003e1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
10003e1c:	1c22      	adds	r2, r4, #0
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
10003e1e:	1999      	adds	r1, r3, r6
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
10003e20:	19a6      	adds	r6, r4, r6
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
10003e22:	3401      	adds	r4, #1
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
10003e24:	f008 fa03 	bl	1000c22e <memcpy>
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
10003e28:	87fe      	strh	r6, [r7, #62]	; 0x3e
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
10003e2a:	1c28      	adds	r0, r5, #0
10003e2c:	b2a1      	uxth	r1, r4
10003e2e:	f7fe fe5b 	bl	10002ae8 <ifx_i2c_dl_send_frame>
}
10003e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003e34:	000002a7 	.word	0x000002a7

10003e38 <ifx_i2c_dl_event_handler>:
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
10003e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t pctr = 0;
    uint8_t chaining = 0;
10003e3a:	2700      	movs	r7, #0
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
10003e3c:	1c04      	adds	r4, r0, #0
10003e3e:	1c1d      	adds	r5, r3, #0
10003e40:	b085      	sub	sp, #20
10003e42:	9102      	str	r1, [sp, #8]
10003e44:	9200      	str	r2, [sp, #0]
    uint8_t pctr = 0;
10003e46:	9701      	str	r7, [sp, #4]
    uint8_t chaining = 0;
    uint8_t exit_machine = TRUE;
    do
    {
        if (NULL != p_data)
10003e48:	9b00      	ldr	r3, [sp, #0]
10003e4a:	2b00      	cmp	r3, #0
10003e4c:	d004      	beq.n	10003e58 <ifx_i2c_dl_event_handler+0x20>
        {
            pctr = p_data[0];
10003e4e:	781b      	ldrb	r3, [r3, #0]
10003e50:	9301      	str	r3, [sp, #4]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
10003e52:	2307      	movs	r3, #7
10003e54:	9f01      	ldr	r7, [sp, #4]
10003e56:	401f      	ands	r7, r3
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
10003e58:	2301      	movs	r3, #1
10003e5a:	9a02      	ldr	r2, [sp, #8]
10003e5c:	4013      	ands	r3, r2
10003e5e:	d005      	beq.n	10003e6c <ifx_i2c_dl_event_handler+0x34>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
10003e60:	1c22      	adds	r2, r4, #0
10003e62:	2106      	movs	r1, #6
10003e64:	3234      	adds	r2, #52	; 0x34
10003e66:	7011      	strb	r1, [r2, #0]
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
10003e68:	31fc      	adds	r1, #252	; 0xfc
10003e6a:	8411      	strh	r1, [r2, #32]
        }
        if (0 != data_len)
10003e6c:	2d00      	cmp	r5, #0
10003e6e:	d00e      	beq.n	10003e8e <ifx_i2c_dl_event_handler+0x56>
10003e70:	1c22      	adds	r2, r4, #0
10003e72:	3258      	adds	r2, #88	; 0x58

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
10003e74:	7812      	ldrb	r2, [r2, #0]
10003e76:	2a00      	cmp	r2, #0
10003e78:	d109      	bne.n	10003e8e <ifx_i2c_dl_event_handler+0x56>
10003e7a:	9901      	ldr	r1, [sp, #4]
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
10003e7c:	3207      	adds	r2, #7

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
10003e7e:	4011      	ands	r1, r2
10003e80:	2901      	cmp	r1, #1
10003e82:	d804      	bhi.n	10003e8e <ifx_i2c_dl_event_handler+0x56>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
10003e84:	9901      	ldr	r1, [sp, #4]
10003e86:	4391      	bics	r1, r2
10003e88:	2908      	cmp	r1, #8
10003e8a:	d000      	beq.n	10003e8e <ifx_i2c_dl_event_handler+0x56>
10003e8c:	e0d4      	b.n	10004038 <ifx_i2c_dl_event_handler+0x200>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
            }
        }
        p_ctx->tl.initialization_state = FALSE;
10003e8e:	1c22      	adds	r2, r4, #0
10003e90:	2100      	movs	r1, #0
        switch (p_ctx->tl.state)
10003e92:	1c26      	adds	r6, r4, #0
            {
                p_ctx->tl.state = TL_STATE_ERROR;
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
            }
        }
        p_ctx->tl.initialization_state = FALSE;
10003e94:	3258      	adds	r2, #88	; 0x58
10003e96:	7011      	strb	r1, [r2, #0]
        switch (p_ctx->tl.state)
10003e98:	3634      	adds	r6, #52	; 0x34
10003e9a:	7830      	ldrb	r0, [r6, #0]
10003e9c:	3801      	subs	r0, #1
10003e9e:	2807      	cmp	r0, #7
10003ea0:	d900      	bls.n	10003ea4 <ifx_i2c_dl_event_handler+0x6c>
10003ea2:	e0be      	b.n	10004022 <ifx_i2c_dl_event_handler+0x1ea>
10003ea4:	f007 ff02 	bl	1000bcac <__gnu_thumb1_case_uqi>
10003ea8:	34bd0904 	.word	0x34bd0904
10003eac:	8ba3b95e 	.word	0x8ba3b95e
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
10003eb0:	2100      	movs	r1, #0
10003eb2:	6de5      	ldr	r5, [r4, #92]	; 0x5c
10003eb4:	1c20      	adds	r0, r4, #0
10003eb6:	1c0a      	adds	r2, r1, #0
10003eb8:	e0bb      	b.n	10004032 <ifx_i2c_dl_event_handler+0x1fa>
            }
            break;
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
10003eba:	9b02      	ldr	r3, [sp, #8]
10003ebc:	079b      	lsls	r3, r3, #30
10003ebe:	d509      	bpl.n	10003ed4 <ifx_i2c_dl_event_handler+0x9c>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
10003ec0:	1ca3      	adds	r3, r4, #2
10003ec2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
10003ec4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
10003ec6:	429a      	cmp	r2, r3
10003ec8:	d20a      	bcs.n	10003ee0 <ifx_i2c_dl_event_handler+0xa8>
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
10003eca:	2308      	movs	r3, #8
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
10003ecc:	2f07      	cmp	r7, #7
10003ece:	d05d      	beq.n	10003f8c <ifx_i2c_dl_event_handler+0x154>
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
                            break;
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
10003ed0:	2d00      	cmp	r5, #0
10003ed2:	d001      	beq.n	10003ed8 <ifx_i2c_dl_event_handler+0xa0>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
10003ed4:	2206      	movs	r2, #6
10003ed6:	e0b7      	b.n	10004048 <ifx_i2c_dl_event_handler+0x210>
                            break;
                        }
                        exit_machine = FALSE;
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
10003ed8:	1c20      	adds	r0, r4, #0
10003eda:	f7ff ff81 	bl	10003de0 <ifx_i2c_tl_send_next_fragment>
10003ede:	e0eb      	b.n	100040b8 <ifx_i2c_dl_event_handler+0x280>
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
                        p_ctx->tl.total_recv_length = 0;
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
10003ee0:	1c21      	adds	r1, r4, #0
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
                        p_ctx->tl.total_recv_length = 0;
10003ee2:	2300      	movs	r3, #0
                    }
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
10003ee4:	2204      	movs	r2, #4
                        p_ctx->tl.total_recv_length = 0;
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
10003ee6:	3152      	adds	r1, #82	; 0x52
                    }
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
10003ee8:	7032      	strb	r2, [r6, #0]
                        p_ctx->tl.total_recv_length = 0;
10003eea:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
10003eec:	700b      	strb	r3, [r1, #0]
                        p_ctx->tl.transmission_completed = 1;
10003eee:	1c23      	adds	r3, r4, #0
10003ef0:	2101      	movs	r1, #1
10003ef2:	3353      	adds	r3, #83	; 0x53
10003ef4:	7019      	strb	r1, [r3, #0]
                        // if data is received after sending last frame
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
10003ef6:	9b02      	ldr	r3, [sp, #8]
10003ef8:	4213      	tst	r3, r2
10003efa:	d1a5      	bne.n	10003e48 <ifx_i2c_dl_event_handler+0x10>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data already received after Tx\n");
                            // Received CTRL frame, trigger reception in Data Link layer
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
10003efc:	1c20      	adds	r0, r4, #0
10003efe:	f7fe fe0f 	bl	10002b20 <ifx_i2c_dl_receive_frame>
10003f02:	2800      	cmp	r0, #0
10003f04:	d100      	bne.n	10003f08 <ifx_i2c_dl_event_handler+0xd0>
10003f06:	e0d7      	b.n	100040b8 <ifx_i2c_dl_event_handler+0x280>
                            {
                                LOG_TL("[IFX-TL]: Tx:RX Received CTRL frame fail -> Inform UL\n");
                                p_ctx->tl.state = TL_STATE_ERROR;
10003f08:	2306      	movs	r3, #6
10003f0a:	3434      	adds	r4, #52	; 0x34
10003f0c:	7023      	strb	r3, [r4, #0]
10003f0e:	e0d3      	b.n	100040b8 <ifx_i2c_dl_event_handler+0x280>
            }
            break;
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
10003f10:	2204      	movs	r2, #4
10003f12:	9b02      	ldr	r3, [sp, #8]
10003f14:	4213      	tst	r3, r2
10003f16:	d0dd      	beq.n	10003ed4 <ifx_i2c_dl_event_handler+0x9c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
10003f18:	2d00      	cmp	r5, #0
10003f1a:	d0db      	beq.n	10003ed4 <ifx_i2c_dl_event_handler+0x9c>
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
                        break;
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
10003f1c:	1c23      	adds	r3, r4, #0
10003f1e:	3354      	adds	r3, #84	; 0x54
10003f20:	881a      	ldrh	r2, [r3, #0]
10003f22:	2382      	movs	r3, #130	; 0x82
10003f24:	005b      	lsls	r3, r3, #1
10003f26:	429a      	cmp	r2, r3
10003f28:	d109      	bne.n	10003f3e <ifx_i2c_dl_event_handler+0x106>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
10003f2a:	2f04      	cmp	r7, #4
10003f2c:	d0d2      	beq.n	10003ed4 <ifx_i2c_dl_event_handler+0x9c>
10003f2e:	1c20      	adds	r0, r4, #0
10003f30:	f7fe fdf6 	bl	10002b20 <ifx_i2c_dl_receive_frame>
10003f34:	2800      	cmp	r0, #0
10003f36:	d1cd      	bne.n	10003ed4 <ifx_i2c_dl_event_handler+0x9c>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
                            break;
                        }
                        p_ctx->tl.state = TL_STATE_RX;
10003f38:	2304      	movs	r3, #4
10003f3a:	7033      	strb	r3, [r6, #0]
                        exit_machine = FALSE;
                        break;
10003f3c:	e0bc      	b.n	100040b8 <ifx_i2c_dl_event_handler+0x280>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
10003f3e:	1c23      	adds	r3, r4, #0
10003f40:	3352      	adds	r3, #82	; 0x52
10003f42:	781a      	ldrb	r2, [r3, #0]

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
10003f44:	2f07      	cmp	r7, #7
10003f46:	d003      	beq.n	10003f50 <ifx_i2c_dl_event_handler+0x118>
10003f48:	2f02      	cmp	r7, #2
10003f4a:	d901      	bls.n	10003f50 <ifx_i2c_dl_event_handler+0x118>
10003f4c:	2f04      	cmp	r7, #4
10003f4e:	d17a      	bne.n	10004046 <ifx_i2c_dl_event_handler+0x20e>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
10003f50:	495a      	ldr	r1, [pc, #360]	; (100040bc <ifx_i2c_dl_event_handler+0x284>)
10003f52:	007b      	lsls	r3, r7, #1
10003f54:	5c58      	ldrb	r0, [r3, r1]
10003f56:	4290      	cmp	r0, r2
10003f58:	d07a      	beq.n	10004050 <ifx_i2c_dl_event_handler+0x218>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
10003f5a:	18cb      	adds	r3, r1, r3
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
10003f5c:	785b      	ldrb	r3, [r3, #1]
10003f5e:	4293      	cmp	r3, r2
10003f60:	d171      	bne.n	10004046 <ifx_i2c_dl_event_handler+0x20e>
10003f62:	e075      	b.n	10004050 <ifx_i2c_dl_event_handler+0x218>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
10003f64:	1d23      	adds	r3, r4, #4
10003f66:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
10003f68:	1c53      	adds	r3, r2, #1
10003f6a:	429d      	cmp	r5, r3
10003f6c:	d001      	beq.n	10003f72 <ifx_i2c_dl_event_handler+0x13a>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
10003f6e:	2307      	movs	r3, #7
10003f70:	e00c      	b.n	10003f8c <ifx_i2c_dl_event_handler+0x154>
                    break;
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
10003f72:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
10003f74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
10003f76:	1943      	adds	r3, r0, r5
10003f78:	8809      	ldrh	r1, [r1, #0]
10003f7a:	3b01      	subs	r3, #1
10003f7c:	428b      	cmp	r3, r1
10003f7e:	dd07      	ble.n	10003f90 <ifx_i2c_dl_event_handler+0x158>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
10003f80:	2282      	movs	r2, #130	; 0x82
10003f82:	1c23      	adds	r3, r4, #0
10003f84:	0052      	lsls	r2, r2, #1
10003f86:	3354      	adds	r3, #84	; 0x54
10003f88:	801a      	strh	r2, [r3, #0]
                    p_ctx->tl.state = TL_STATE_RX;
10003f8a:	2304      	movs	r3, #4
10003f8c:	7033      	strb	r3, [r6, #0]
                    break;
10003f8e:	e75b      	b.n	10003e48 <ifx_i2c_dl_event_handler+0x10>
                }
                if (NULL == p_data)
10003f90:	9b00      	ldr	r3, [sp, #0]
10003f92:	2b00      	cmp	r3, #0
10003f94:	d09e      	beq.n	10003ed4 <ifx_i2c_dl_event_handler+0x9c>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
10003f96:	6c63      	ldr	r3, [r4, #68]	; 0x44
10003f98:	9900      	ldr	r1, [sp, #0]
10003f9a:	1818      	adds	r0, r3, r0
10003f9c:	3101      	adds	r1, #1
10003f9e:	f008 f946 	bl	1000c22e <memcpy>
10003fa2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
                p_ctx->tl.total_recv_length += (data_len - 1);

                p_ctx->tl.previous_chaining = pctr & 0x07;
10003fa4:	9a01      	ldr	r2, [sp, #4]
10003fa6:	3b01      	subs	r3, #1
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                p_ctx->tl.total_recv_length += (data_len - 1);
10003fa8:	18ed      	adds	r5, r5, r3

                p_ctx->tl.previous_chaining = pctr & 0x07;
10003faa:	2307      	movs	r3, #7
10003fac:	401a      	ands	r2, r3
10003fae:	1c13      	adds	r3, r2, #0
10003fb0:	1c22      	adds	r2, r4, #0
10003fb2:	3252      	adds	r2, #82	; 0x52
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                p_ctx->tl.total_recv_length += (data_len - 1);
10003fb4:	87a5      	strh	r5, [r4, #60]	; 0x3c

                p_ctx->tl.previous_chaining = pctr & 0x07;
10003fb6:	7013      	strb	r3, [r2, #0]
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
10003fb8:	2304      	movs	r3, #4
10003fba:	7033      	strb	r3, [r6, #0]
10003fbc:	e79e      	b.n	10003efc <ifx_i2c_dl_event_handler+0xc4>
            break;
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
10003fbe:	2d01      	cmp	r5, #1
10003fc0:	d904      	bls.n	10003fcc <ifx_i2c_dl_event_handler+0x194>
10003fc2:	1c23      	adds	r3, r4, #0
10003fc4:	3353      	adds	r3, #83	; 0x53
10003fc6:	781b      	ldrb	r3, [r3, #0]
10003fc8:	2b01      	cmp	r3, #1
10003fca:	d0d0      	beq.n	10003f6e <ifx_i2c_dl_event_handler+0x136>
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
                    break;
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
10003fcc:	1c22      	adds	r2, r4, #0
10003fce:	3250      	adds	r2, #80	; 0x50
10003fd0:	7813      	ldrb	r3, [r2, #0]
10003fd2:	1c59      	adds	r1, r3, #1
10003fd4:	7011      	strb	r1, [r2, #0]
10003fd6:	2b00      	cmp	r3, #0
10003fd8:	d000      	beq.n	10003fdc <ifx_i2c_dl_event_handler+0x1a4>
10003fda:	e77b      	b.n	10003ed4 <ifx_i2c_dl_event_handler+0x9c>
    if (TL_STATE_IDLE != p_ctx->tl.state)
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
10003fdc:	1ca2      	adds	r2, r4, #2
10003fde:	87d3      	strh	r3, [r2, #62]	; 0x3e
    p_ctx->tl.total_recv_length = 0;
10003fe0:	87a3      	strh	r3, [r4, #60]	; 0x3c
    p_ctx->tl.state = TL_STATE_TX;
10003fe2:	3302      	adds	r3, #2
10003fe4:	7033      	strb	r3, [r6, #0]
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
10003fe6:	1c20      	adds	r0, r4, #0
10003fe8:	f7ff fefa 	bl	10003de0 <ifx_i2c_tl_send_next_fragment>
10003fec:	e011      	b.n	10004012 <ifx_i2c_dl_event_handler+0x1da>
            }
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
10003fee:	2302      	movs	r3, #2
                if (0 == (p_ctx->tl.master_chaining_error_count++))
10003ff0:	1c22      	adds	r2, r4, #0
            }
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
10003ff2:	7033      	strb	r3, [r6, #0]
                if (0 == (p_ctx->tl.master_chaining_error_count++))
10003ff4:	3251      	adds	r2, #81	; 0x51
10003ff6:	7813      	ldrb	r3, [r2, #0]
10003ff8:	1c59      	adds	r1, r3, #1
10003ffa:	7011      	strb	r1, [r2, #0]
10003ffc:	2b00      	cmp	r3, #0
10003ffe:	d000      	beq.n	10004002 <ifx_i2c_dl_event_handler+0x1ca>
10004000:	e768      	b.n	10003ed4 <ifx_i2c_dl_event_handler+0x9c>
}

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
    uint16_t tl_fragment_size = 1;
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
10004002:	2107      	movs	r1, #7
10004004:	4a2e      	ldr	r2, [pc, #184]	; (100040c0 <ifx_i2c_dl_event_handler+0x288>)
    p_ctx->tl.total_recv_length = 0;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
10004006:	1c20      	adds	r0, r4, #0
}

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
    uint16_t tl_fragment_size = 1;
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
10004008:	54a1      	strb	r1, [r4, r2]
    p_ctx->tl.total_recv_length = 0;
1000400a:	87a3      	strh	r3, [r4, #60]	; 0x3c
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
1000400c:	3906      	subs	r1, #6
1000400e:	f7fe fd6b 	bl	10002ae8 <ifx_i2c_dl_send_frame>
                p_ctx->tl.state = TL_STATE_TX;
                if (0 == (p_ctx->tl.master_chaining_error_count++))
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
10004012:	2800      	cmp	r0, #0
10004014:	d000      	beq.n	10004018 <ifx_i2c_dl_event_handler+0x1e0>
10004016:	e75d      	b.n	10003ed4 <ifx_i2c_dl_event_handler+0x9c>
10004018:	e04e      	b.n	100040b8 <ifx_i2c_dl_event_handler+0x280>
            break;
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
1000401a:	2b00      	cmp	r3, #0
1000401c:	d101      	bne.n	10004022 <ifx_i2c_dl_event_handler+0x1ea>
1000401e:	2d00      	cmp	r5, #0
10004020:	d001      	beq.n	10004026 <ifx_i2c_dl_event_handler+0x1ee>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
10004022:	2301      	movs	r3, #1
10004024:	7033      	strb	r3, [r6, #0]
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
10004026:	1c23      	adds	r3, r4, #0
10004028:	1c20      	adds	r0, r4, #0
1000402a:	2200      	movs	r2, #0
1000402c:	3354      	adds	r3, #84	; 0x54
1000402e:	8819      	ldrh	r1, [r3, #0]
10004030:	6de5      	ldr	r5, [r4, #92]	; 0x5c
10004032:	1c13      	adds	r3, r2, #0
10004034:	47a8      	blx	r5
            }
            break;
10004036:	e03f      	b.n	100040b8 <ifx_i2c_dl_event_handler+0x280>
        }
        if (0 != data_len)
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
            {
                p_ctx->tl.state = TL_STATE_ERROR;
10004038:	1c22      	adds	r2, r4, #0
1000403a:	2106      	movs	r1, #6
1000403c:	3234      	adds	r2, #52	; 0x34
1000403e:	7011      	strb	r1, [r2, #0]
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
10004040:	31fc      	adds	r1, #252	; 0xfc
10004042:	8411      	strh	r1, [r2, #32]
10004044:	e723      	b.n	10003e8e <ifx_i2c_dl_event_handler+0x56>

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
10004046:	2208      	movs	r2, #8
10004048:	1c23      	adds	r3, r4, #0
1000404a:	3334      	adds	r3, #52	; 0x34
1000404c:	701a      	strb	r2, [r3, #0]
                        break;
1000404e:	e6fb      	b.n	10003e48 <ifx_i2c_dl_event_handler+0x10>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
10004050:	1c23      	adds	r3, r4, #0
10004052:	3352      	adds	r3, #82	; 0x52
10004054:	701f      	strb	r7, [r3, #0]
                    if (NULL == p_data)
10004056:	9b00      	ldr	r3, [sp, #0]
10004058:	2b00      	cmp	r3, #0
1000405a:	d100      	bne.n	1000405e <ifx_i2c_dl_event_handler+0x226>
1000405c:	e73a      	b.n	10003ed4 <ifx_i2c_dl_event_handler+0x9c>
                        p_ctx->tl.state = TL_STATE_ERROR;
                        break;
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
1000405e:	2304      	movs	r3, #4
10004060:	1c3a      	adds	r2, r7, #0
10004062:	1c26      	adds	r6, r4, #0
10004064:	439a      	bics	r2, r3
10004066:	9203      	str	r2, [sp, #12]
10004068:	3634      	adds	r6, #52	; 0x34
1000406a:	2a00      	cmp	r2, #0
1000406c:	d122      	bne.n	100040b4 <ifx_i2c_dl_event_handler+0x27c>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
1000406e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
10004070:	6ca2      	ldr	r2, [r4, #72]	; 0x48
10004072:	1943      	adds	r3, r0, r5
10004074:	8812      	ldrh	r2, [r2, #0]
10004076:	3b01      	subs	r3, #1
10004078:	4293      	cmp	r3, r2
1000407a:	dd06      	ble.n	1000408a <ifx_i2c_dl_event_handler+0x252>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
1000407c:	2282      	movs	r2, #130	; 0x82
1000407e:	1c23      	adds	r3, r4, #0
10004080:	0052      	lsls	r2, r2, #1
10004082:	3354      	adds	r3, #84	; 0x54
10004084:	801a      	strh	r2, [r3, #0]
                            p_ctx->tl.state = TL_STATE_ERROR;
10004086:	2306      	movs	r3, #6
10004088:	e780      	b.n	10003f8c <ifx_i2c_dl_event_handler+0x154>
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
1000408a:	6c63      	ldr	r3, [r4, #68]	; 0x44
1000408c:	9900      	ldr	r1, [sp, #0]
1000408e:	1e6a      	subs	r2, r5, #1
10004090:	1818      	adds	r0, r3, r0
10004092:	3101      	adds	r1, #1
10004094:	f008 f8cb 	bl	1000c22e <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
10004098:	2201      	movs	r2, #1
1000409a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
1000409c:	1c20      	adds	r0, r4, #0
1000409e:	3b01      	subs	r3, #1
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
100040a0:	18eb      	adds	r3, r5, r3
100040a2:	b29b      	uxth	r3, r3
100040a4:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
100040a6:	7032      	strb	r2, [r6, #0]
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
100040a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
100040aa:	6de5      	ldr	r5, [r4, #92]	; 0x5c
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
100040ac:	8013      	strh	r3, [r2, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
100040ae:	9903      	ldr	r1, [sp, #12]
100040b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
100040b2:	e7bf      	b.n	10004034 <ifx_i2c_dl_event_handler+0x1fc>
                                                            p_ctx->tl.p_recv_packet_buffer,
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
                    }
                    else
                    {
                        p_ctx->tl.state = TL_STATE_CHAINING;
100040b4:	2305      	movs	r3, #5
100040b6:	e769      	b.n	10003f8c <ifx_i2c_dl_event_handler+0x154>
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
            }
            break;
        }
    } while (TRUE == exit_machine);
}
100040b8:	b005      	add	sp, #20
100040ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100040bc:	1000cac5 	.word	0x1000cac5
100040c0:	000002a7 	.word	0x000002a7

100040c4 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
100040c4:	b570      	push	{r4, r5, r6, lr}
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
100040c6:	1c05      	adds	r5, r0, #0
100040c8:	2300      	movs	r3, #0
100040ca:	3534      	adds	r5, #52	; 0x34
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
100040cc:	1c0e      	adds	r6, r1, #0
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
100040ce:	702b      	strb	r3, [r5, #0]

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
100040d0:	4909      	ldr	r1, [pc, #36]	; (100040f8 <ifx_i2c_tl_init+0x34>)
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
100040d2:	1c04      	adds	r4, r0, #0
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
100040d4:	f7fe fce0 	bl	10002a98 <ifx_i2c_dl_init>
100040d8:	2800      	cmp	r0, #0
100040da:	d10a      	bne.n	100040f2 <ifx_i2c_tl_init+0x2e>
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
100040dc:	1c22      	adds	r2, r4, #0
100040de:	2301      	movs	r3, #1
100040e0:	3258      	adds	r2, #88	; 0x58
100040e2:	7013      	strb	r3, [r2, #0]
    p_ctx->tl.upper_layer_event_handler = handler;
100040e4:	65e6      	str	r6, [r4, #92]	; 0x5c
    p_ctx->tl.state = TL_STATE_IDLE;
100040e6:	702b      	strb	r3, [r5, #0]
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
100040e8:	88a3      	ldrh	r3, [r4, #4]
100040ea:	3404      	adds	r4, #4
100040ec:	3b06      	subs	r3, #6
100040ee:	87e3      	strh	r3, [r4, #62]	; 0x3e

    return (IFX_I2C_STACK_SUCCESS);
100040f0:	e001      	b.n	100040f6 <ifx_i2c_tl_init+0x32>
    p_ctx->tl.state = TL_STATE_UNINIT;

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
100040f2:	2081      	movs	r0, #129	; 0x81
100040f4:	0040      	lsls	r0, r0, #1
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);

    return (IFX_I2C_STACK_SUCCESS);
}
100040f6:	bd70      	pop	{r4, r5, r6, pc}
100040f8:	10003e39 	.word	0x10003e39

100040fc <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
100040fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100040fe:	1c04      	adds	r4, r0, #0
10004100:	1c0f      	adds	r7, r1, #0
10004102:	1c16      	adds	r6, r2, #0
10004104:	9301      	str	r3, [sp, #4]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
10004106:	2900      	cmp	r1, #0
10004108:	d024      	beq.n	10004154 <ifx_i2c_tl_transceive+0x58>
1000410a:	2a00      	cmp	r2, #0
1000410c:	d022      	beq.n	10004154 <ifx_i2c_tl_transceive+0x58>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
1000410e:	1c03      	adds	r3, r0, #0
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
10004110:	2581      	movs	r5, #129	; 0x81
        if ((NULL == p_packet) || (0 == packet_len))
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
10004112:	3334      	adds	r3, #52	; 0x34
10004114:	781a      	ldrb	r2, [r3, #0]
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
10004116:	006d      	lsls	r5, r5, #1
        if ((NULL == p_packet) || (0 == packet_len))
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
10004118:	2a01      	cmp	r2, #1
1000411a:	d11d      	bne.n	10004158 <ifx_i2c_tl_transceive+0x5c>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
1000411c:	3201      	adds	r2, #1
1000411e:	701a      	strb	r2, [r3, #0]
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
10004120:	f7fd face 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
10004124:	2300      	movs	r3, #0
10004126:	1ca2      	adds	r2, r4, #2
        if (TL_STATE_IDLE != p_ctx->tl.state)
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
10004128:	64e0      	str	r0, [r4, #76]	; 0x4c
        p_ctx->tl.p_actual_packet = p_packet;
1000412a:	63a7      	str	r7, [r4, #56]	; 0x38
        p_ctx->tl.actual_packet_length = packet_len;
1000412c:	87e6      	strh	r6, [r4, #62]	; 0x3e
        p_ctx->tl.packet_offset = 0;
1000412e:	87d3      	strh	r3, [r2, #62]	; 0x3e
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
10004130:	9a01      	ldr	r2, [sp, #4]
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
        p_ctx->tl.total_recv_length = 0;
10004132:	87a3      	strh	r3, [r4, #60]	; 0x3c
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
10004134:	6462      	str	r2, [r4, #68]	; 0x44
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
10004136:	9a08      	ldr	r2, [sp, #32]
        p_ctx->tl.total_recv_length = 0;
        p_ctx->tl.chaining_error_count = 0;
        p_ctx->tl.master_chaining_error_count = 0;
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
10004138:	1c20      	adds	r0, r4, #0
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
1000413a:	64a2      	str	r2, [r4, #72]	; 0x48
        p_ctx->tl.total_recv_length = 0;
        p_ctx->tl.chaining_error_count = 0;
1000413c:	1c22      	adds	r2, r4, #0
1000413e:	3250      	adds	r2, #80	; 0x50
10004140:	7013      	strb	r3, [r2, #0]
        p_ctx->tl.master_chaining_error_count = 0;
10004142:	7053      	strb	r3, [r2, #1]
        p_ctx->tl.transmission_completed = 0;
10004144:	70d3      	strb	r3, [r2, #3]
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
10004146:	1c23      	adds	r3, r4, #0
10004148:	3354      	adds	r3, #84	; 0x54
1000414a:	801d      	strh	r5, [r3, #0]
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
1000414c:	f7ff fe48 	bl	10003de0 <ifx_i2c_tl_send_next_fragment>
10004150:	1c05      	adds	r5, r0, #0
10004152:	e001      	b.n	10004158 <ifx_i2c_tl_transceive+0x5c>
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
10004154:	2581      	movs	r5, #129	; 0x81
10004156:	006d      	lsls	r5, r5, #1
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
    } while (FALSE);
    return (status);
}
10004158:	1c28      	adds	r0, r5, #0
1000415a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000415c <ifx_i2c_event_handler>:
    return (status);
}

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
1000415c:	b510      	push	{r4, lr}
1000415e:	1c04      	adds	r4, r0, #0
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
10004160:	6840      	ldr	r0, [r0, #4]
10004162:	68a3      	ldr	r3, [r4, #8]
10004164:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
10004166:	2300      	movs	r3, #0
10004168:	7363      	strb	r3, [r4, #13]
}
1000416a:	bd10      	pop	{r4, pc}

1000416c <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
1000416c:	b510      	push	{r4, lr}

    do
    {
        p_optiga_comms = &optiga_comms;

        if (FALSE == p_optiga_comms->instance_init_state)
1000416e:	4b05      	ldr	r3, [pc, #20]	; (10004184 <optiga_comms_create+0x18>)

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
10004170:	1c02      	adds	r2, r0, #0

    do
    {
        p_optiga_comms = &optiga_comms;

        if (FALSE == p_optiga_comms->instance_init_state)
10004172:	7b1c      	ldrb	r4, [r3, #12]
10004174:	1c18      	adds	r0, r3, #0
10004176:	2c00      	cmp	r4, #0
10004178:	d103      	bne.n	10004182 <optiga_comms_create+0x16>
        {
            p_optiga_comms->upper_layer_handler = callback;
1000417a:	609a      	str	r2, [r3, #8]
            p_optiga_comms->p_upper_layer_ctx = context;
1000417c:	6059      	str	r1, [r3, #4]
            p_optiga_comms->instance_init_state = TRUE;
1000417e:	2301      	movs	r3, #1
10004180:	7303      	strb	r3, [r0, #12]
        }
    } while (FALSE);
    return (p_optiga_comms);
}
10004182:	bd10      	pop	{r4, pc}
10004184:	20001a48 	.word	0x20001a48

10004188 <optiga_comms_set_callback_context>:
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
    p_optiga_comms->p_upper_layer_ctx = context;
10004188:	6041      	str	r1, [r0, #4]
    return (0);
}
1000418a:	2000      	movs	r0, #0
1000418c:	4770      	bx	lr
	...

10004190 <optiga_comms_open>:
 * API IMPLEMENTATION
 *********************************************************************************************************************/


optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
10004190:	b538      	push	{r3, r4, r5, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
10004192:	2800      	cmp	r0, #0
10004194:	d102      	bne.n	1000419c <optiga_comms_open+0xc>
 *********************************************************************************************************************/


optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
10004196:	2081      	movs	r0, #129	; 0x81
10004198:	0040      	lsls	r0, r0, #1
1000419a:	e01a      	b.n	100041d2 <optiga_comms_open+0x42>

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
1000419c:	7b43      	ldrb	r3, [r0, #13]
1000419e:	2b01      	cmp	r3, #1
100041a0:	d0f9      	beq.n	10004196 <optiga_comms_open+0x6>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
100041a2:	2301      	movs	r3, #1
100041a4:	7343      	strb	r3, [r0, #13]
100041a6:	1c04      	adds	r4, r0, #0
optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        if (PAL_STATUS_SUCCESS == pal_init())
100041a8:	f7fc ff7a 	bl	100010a0 <pal_init>
100041ac:	1e05      	subs	r5, r0, #0
100041ae:	d1f2      	bne.n	10004196 <optiga_comms_open+0x6>
        {
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
100041b0:	6823      	ldr	r3, [r4, #0]
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
100041b2:	4a08      	ldr	r2, [pc, #32]	; (100041d4 <optiga_comms_open+0x44>)
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        if (PAL_STATUS_SUCCESS == pal_init())
        {
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
100041b4:	61dc      	str	r4, [r3, #28]
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
100041b6:	619a      	str	r2, [r3, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
100041b8:	7c22      	ldrb	r2, [r4, #16]
100041ba:	3332      	adds	r3, #50	; 0x32
100041bc:	701a      	strb	r2, [r3, #0]
#endif
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
100041be:	239a      	movs	r3, #154	; 0x9a
100041c0:	6820      	ldr	r0, [r4, #0]
100041c2:	6962      	ldr	r2, [r4, #20]
100041c4:	00db      	lsls	r3, r3, #3
100041c6:	50c2      	str	r2, [r0, r3]

            status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
100041c8:	f7fe f9fd 	bl	100025c6 <ifx_i2c_open>
            if (IFX_I2C_STACK_SUCCESS != status)
100041cc:	2800      	cmp	r0, #0
100041ce:	d000      	beq.n	100041d2 <optiga_comms_open+0x42>
            {
                p_ctx->state = OPTIGA_COMMS_FREE;
100041d0:	7365      	strb	r5, [r4, #13]
            }
        }
    }
    return (status);
}
100041d2:	bd38      	pop	{r3, r4, r5, pc}
100041d4:	1000415d 	.word	0x1000415d

100041d8 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
100041d8:	b537      	push	{r0, r1, r2, r4, r5, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
100041da:	2800      	cmp	r0, #0
100041dc:	d01e      	beq.n	1000421c <optiga_comms_transceive+0x44>
100041de:	7b44      	ldrb	r4, [r0, #13]
100041e0:	2c01      	cmp	r4, #1
100041e2:	d01b      	beq.n	1000421c <optiga_comms_transceive+0x44>
100041e4:	1c04      	adds	r4, r0, #0
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
100041e6:	2001      	movs	r0, #1
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
100041e8:	4d0e      	ldr	r5, [pc, #56]	; (10004224 <optiga_comms_transceive+0x4c>)
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
100041ea:	7360      	strb	r0, [r4, #13]
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
100041ec:	6820      	ldr	r0, [r4, #0]
100041ee:	61c4      	str	r4, [r0, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
100041f0:	6185      	str	r5, [r0, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
100041f2:	7ba5      	ldrb	r5, [r4, #14]
100041f4:	3030      	adds	r0, #48	; 0x30
100041f6:	7005      	strb	r5, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
100041f8:	6820      	ldr	r0, [r4, #0]
100041fa:	7be5      	ldrb	r5, [r4, #15]
100041fc:	3031      	adds	r0, #49	; 0x31
100041fe:	7005      	strb	r5, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
10004200:	6820      	ldr	r0, [r4, #0]
10004202:	7c25      	ldrb	r5, [r4, #16]
10004204:	3032      	adds	r0, #50	; 0x32
10004206:	7005      	strb	r5, [r0, #0]
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
10004208:	9806      	ldr	r0, [sp, #24]
1000420a:	9000      	str	r0, [sp, #0]
1000420c:	6820      	ldr	r0, [r4, #0]
1000420e:	f7fe f9f9 	bl	10002604 <ifx_i2c_transceive>
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
10004212:	2800      	cmp	r0, #0
10004214:	d004      	beq.n	10004220 <optiga_comms_transceive+0x48>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
10004216:	2300      	movs	r3, #0
10004218:	7363      	strb	r3, [r4, #13]
1000421a:	e001      	b.n	10004220 <optiga_comms_transceive+0x48>
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
1000421c:	2081      	movs	r0, #129	; 0x81
1000421e:	0040      	lsls	r0, r0, #1
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
10004220:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10004222:	46c0      	nop			; (mov r8, r8)
10004224:	1000415d 	.word	0x1000415d

10004228 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
10004228:	b510      	push	{r4, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
1000422a:	2800      	cmp	r0, #0
1000422c:	d014      	beq.n	10004258 <optiga_comms_close+0x30>
1000422e:	7b43      	ldrb	r3, [r0, #13]
10004230:	2b01      	cmp	r3, #1
10004232:	d011      	beq.n	10004258 <optiga_comms_close+0x30>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
10004234:	2301      	movs	r3, #1
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
10004236:	4a0a      	ldr	r2, [pc, #40]	; (10004260 <optiga_comms_close+0x38>)
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
10004238:	7343      	strb	r3, [r0, #13]
optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
1000423a:	6803      	ldr	r3, [r0, #0]
1000423c:	1c04      	adds	r4, r0, #0
1000423e:	61d8      	str	r0, [r3, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
10004240:	619a      	str	r2, [r3, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
10004242:	7c02      	ldrb	r2, [r0, #16]
10004244:	3332      	adds	r3, #50	; 0x32
10004246:	701a      	strb	r2, [r3, #0]
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
10004248:	6800      	ldr	r0, [r0, #0]
1000424a:	f7fe f9f9 	bl	10002640 <ifx_i2c_close>
        if (IFX_I2C_STACK_SUCCESS != status)
1000424e:	2800      	cmp	r0, #0
10004250:	d004      	beq.n	1000425c <optiga_comms_close+0x34>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
10004252:	2300      	movs	r3, #0
10004254:	7363      	strb	r3, [r4, #13]
10004256:	e001      	b.n	1000425c <optiga_comms_close+0x34>
}


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
10004258:	2081      	movs	r0, #129	; 0x81
1000425a:	0040      	lsls	r0, r0, #1
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
1000425c:	bd10      	pop	{r4, pc}
1000425e:	46c0      	nop			; (mov r8, r8)
10004260:	1000415d 	.word	0x1000415d

10004264 <optiga_common_get_uint32>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
10004264:	1c02      	adds	r2, r0, #0
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 | 
10004266:	7803      	ldrb	r3, [r0, #0]
10004268:	0618      	lsls	r0, r3, #24
1000426a:	7853      	ldrb	r3, [r2, #1]
1000426c:	041b      	lsls	r3, r3, #16
1000426e:	4303      	orrs	r3, r0
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
10004270:	78d0      	ldrb	r0, [r2, #3]
10004272:	4318      	orrs	r0, r3
10004274:	7893      	ldrb	r3, [r2, #2]
10004276:	021b      	lsls	r3, r3, #8
#include "optiga/common/optiga_lib_common.h"

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 | 
10004278:	4318      	orrs	r0, r3
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));

    return (four_byte_value);
}
1000427a:	4770      	bx	lr

1000427c <optiga_common_set_uint16>:

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
1000427c:	0a0b      	lsrs	r3, r1, #8
1000427e:	7003      	strb	r3, [r0, #0]
    *(p_output_buffer+1) = (uint8_t)(two_byte_value);
10004280:	7041      	strb	r1, [r0, #1]
}
10004282:	4770      	bx	lr

10004284 <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
10004284:	0e0b      	lsrs	r3, r1, #24
10004286:	7003      	strb	r3, [r0, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
10004288:	0c0b      	lsrs	r3, r1, #16
1000428a:	7043      	strb	r3, [r0, #1]
    *(p_output_buffer+2) = (uint8_t)(four_byte_value>>8);
1000428c:	0a0b      	lsrs	r3, r1, #8
1000428e:	7083      	strb	r3, [r0, #2]
    *(p_output_buffer+3) = (uint8_t)(four_byte_value);
10004290:	70c1      	strb	r1, [r0, #3]
}
10004292:	4770      	bx	lr

10004294 <optiga_common_get_uint16>:

void optiga_common_get_uint16 (const uint8_t * p_input_buffer,uint16_t* p_two_byte_value)
{
    *p_two_byte_value = (uint16_t)(*p_input_buffer << 8);
10004294:	7803      	ldrb	r3, [r0, #0]
10004296:	021b      	lsls	r3, r3, #8
10004298:	800b      	strh	r3, [r1, #0]
    *p_two_byte_value |= (uint16_t)(*(p_input_buffer+1));
1000429a:	7842      	ldrb	r2, [r0, #1]
1000429c:	4313      	orrs	r3, r2
1000429e:	800b      	strh	r3, [r1, #0]
}
100042a0:	4770      	bx	lr

100042a2 <optiga_lib_word_to_hex_string>:
    } while(0);
}
/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_word_to_hex_string(uint16_t value,
                                                    uint8_t * p_buffer)
{
100042a2:	b082      	sub	sp, #8
    uint8_t array_buffer [5] = {0};   
    uint8_t loop = 0, hex_byte = 0, index = 0;
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
    array_buffer [1] = (uint8_t)((value & 0x00FF));
100042a4:	466b      	mov	r3, sp
100042a6:	7058      	strb	r0, [r3, #1]

    p_buffer [index++] = '0';
100042a8:	2330      	movs	r3, #48	; 0x30
    p_buffer [index++] = 'x';
    
    for (loop = 0; loop < 2; loop++)
    {
        hex_byte = array_buffer[loop];
100042aa:	0a00      	lsrs	r0, r0, #8
    uint8_t loop = 0, hex_byte = 0, index = 0;
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
    array_buffer [1] = (uint8_t)((value & 0x00FF));

    p_buffer [index++] = '0';
100042ac:	700b      	strb	r3, [r1, #0]
    p_buffer [index++] = 'x';
100042ae:	3348      	adds	r3, #72	; 0x48
100042b0:	704b      	strb	r3, [r1, #1]
    for (loop = 0; loop < 2; loop++)
    {
        hex_byte = array_buffer[loop];

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
100042b2:	0903      	lsrs	r3, r0, #4
100042b4:	1c1a      	adds	r2, r3, #0
100042b6:	3237      	adds	r2, #55	; 0x37
100042b8:	2b09      	cmp	r3, #9
100042ba:	d801      	bhi.n	100042c0 <optiga_lib_word_to_hex_string+0x1e>
100042bc:	3330      	adds	r3, #48	; 0x30
100042be:	1c1a      	adds	r2, r3, #0
100042c0:	230f      	movs	r3, #15
100042c2:	4018      	ands	r0, r3
100042c4:	1c03      	adds	r3, r0, #0
100042c6:	708a      	strb	r2, [r1, #2]
100042c8:	3337      	adds	r3, #55	; 0x37
100042ca:	2809      	cmp	r0, #9
100042cc:	d800      	bhi.n	100042d0 <optiga_lib_word_to_hex_string+0x2e>
100042ce:	3b07      	subs	r3, #7
100042d0:	70cb      	strb	r3, [r1, #3]
    p_buffer [index++] = '0';
    p_buffer [index++] = 'x';
    
    for (loop = 0; loop < 2; loop++)
    {
        hex_byte = array_buffer[loop];
100042d2:	466b      	mov	r3, sp
100042d4:	7858      	ldrb	r0, [r3, #1]

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
100042d6:	0902      	lsrs	r2, r0, #4
100042d8:	1c13      	adds	r3, r2, #0
100042da:	3330      	adds	r3, #48	; 0x30
100042dc:	2a09      	cmp	r2, #9
100042de:	d900      	bls.n	100042e2 <optiga_lib_word_to_hex_string+0x40>
100042e0:	3307      	adds	r3, #7
100042e2:	710b      	strb	r3, [r1, #4]
100042e4:	230f      	movs	r3, #15
100042e6:	4003      	ands	r3, r0
100042e8:	1c1a      	adds	r2, r3, #0
100042ea:	3230      	adds	r2, #48	; 0x30
100042ec:	2b09      	cmp	r3, #9
100042ee:	d901      	bls.n	100042f4 <optiga_lib_word_to_hex_string+0x52>
100042f0:	3337      	adds	r3, #55	; 0x37
100042f2:	1c1a      	adds	r2, r3, #0
100042f4:	714a      	strb	r2, [r1, #5]
    }    

}
100042f6:	b002      	add	sp, #8
100042f8:	4770      	bx	lr
	...

100042fc <optiga_lib_print_string>:


}

void optiga_lib_print_string(const char_t * p_log_string)
{
100042fc:	b510      	push	{r4, lr}
    if (NULL == p_log_string)
100042fe:	2800      	cmp	r0, #0
10004300:	d007      	beq.n	10004312 <optiga_lib_print_string+0x16>
10004302:	1c04      	adds	r4, r0, #0
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&cunit_console, (const uint8_t *)p_log_string, strlen(p_log_string));
10004304:	f008 f8a3 	bl	1000c44e <strlen>
10004308:	1c21      	adds	r1, r4, #0
1000430a:	1c02      	adds	r2, r0, #0
1000430c:	4801      	ldr	r0, [pc, #4]	; (10004314 <optiga_lib_print_string+0x18>)
1000430e:	f7fd f909 	bl	10001524 <pal_logger_write>
}
10004312:	bd10      	pop	{r4, pc}
10004314:	20001564 	.word	0x20001564

10004318 <optiga_lib_print_string_with_newline>:

void optiga_lib_print_string_with_newline(const char_t * p_log_string)
{
10004318:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000431a:	1c04      	adds	r4, r0, #0
    uint8_t new_line_characters [2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
1000431c:	490a      	ldr	r1, [pc, #40]	; (10004348 <optiga_lib_print_string_with_newline+0x30>)
1000431e:	a801      	add	r0, sp, #4
10004320:	2202      	movs	r2, #2
10004322:	f007 ff84 	bl	1000c22e <memcpy>

    if (NULL == p_log_string)
10004326:	2c00      	cmp	r4, #0
10004328:	d00d      	beq.n	10004346 <optiga_lib_print_string_with_newline+0x2e>
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&cunit_console, (const uint8_t *)p_log_string, strlen(p_log_string));
1000432a:	1c20      	adds	r0, r4, #0
1000432c:	f008 f88f 	bl	1000c44e <strlen>
10004330:	4d06      	ldr	r5, [pc, #24]	; (1000434c <optiga_lib_print_string_with_newline+0x34>)
10004332:	1c02      	adds	r2, r0, #0
10004334:	1c21      	adds	r1, r4, #0
10004336:	1c28      	adds	r0, r5, #0
10004338:	f7fd f8f4 	bl	10001524 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&cunit_console, new_line_characters, 2);
1000433c:	1c28      	adds	r0, r5, #0
1000433e:	a901      	add	r1, sp, #4
10004340:	2202      	movs	r2, #2
10004342:	f7fd f8ef 	bl	10001524 <pal_logger_write>

}
10004346:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
10004348:	1000cad5 	.word	0x1000cad5
1000434c:	20001564 	.word	0x20001564

10004350 <optiga_lib_print_message>:

void optiga_lib_print_message(const char_t * p_log_string,
                              const char_t * p_log_layer,
                              const char_t * p_log_color)                                  
{
10004350:	b570      	push	{r4, r5, r6, lr}
10004352:	b0e8      	sub	sp, #416	; 0x1a0
10004354:	1c06      	adds	r6, r0, #0
10004356:	1c0c      	adds	r4, r1, #0
10004358:	1c15      	adds	r5, r2, #0
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
1000435a:	a803      	add	r0, sp, #12
1000435c:	4911      	ldr	r1, [pc, #68]	; (100043a4 <optiga_lib_print_message+0x54>)
1000435e:	2202      	movs	r2, #2
10004360:	f007 ff65 	bl	1000c22e <memcpy>
    char_t color_buffer[400];

    if ((NULL == p_log_string) || (NULL == p_log_layer) || (NULL == p_log_color))
10004364:	2e00      	cmp	r6, #0
10004366:	d01a      	beq.n	1000439e <optiga_lib_print_message+0x4e>
10004368:	2c00      	cmp	r4, #0
1000436a:	d018      	beq.n	1000439e <optiga_lib_print_message+0x4e>
1000436c:	2d00      	cmp	r5, #0
1000436e:	d016      	beq.n	1000439e <optiga_lib_print_message+0x4e>
    {
        return;
    }

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, p_log_string, p_log_layer, p_log_color);
10004370:	4b0d      	ldr	r3, [pc, #52]	; (100043a8 <optiga_lib_print_message+0x58>)
10004372:	490e      	ldr	r1, [pc, #56]	; (100043ac <optiga_lib_print_message+0x5c>)
10004374:	1c2a      	adds	r2, r5, #0
10004376:	9301      	str	r3, [sp, #4]
10004378:	9600      	str	r6, [sp, #0]
1000437a:	1c23      	adds	r3, r4, #0
1000437c:	a804      	add	r0, sp, #16
1000437e:	f008 f825 	bl	1000c3cc <siprintf>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&cunit_console, (const uint8_t *)color_buffer, strlen(color_buffer));
10004382:	a804      	add	r0, sp, #16
10004384:	f008 f863 	bl	1000c44e <strlen>
10004388:	4c09      	ldr	r4, [pc, #36]	; (100043b0 <optiga_lib_print_message+0x60>)
1000438a:	1c02      	adds	r2, r0, #0
1000438c:	a904      	add	r1, sp, #16
1000438e:	1c20      	adds	r0, r4, #0
10004390:	f7fd f8c8 	bl	10001524 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&cunit_console, new_line_characters, 2);
10004394:	1c20      	adds	r0, r4, #0
10004396:	a903      	add	r1, sp, #12
10004398:	2202      	movs	r2, #2
1000439a:	f7fd f8c3 	bl	10001524 <pal_logger_write>
}
1000439e:	b068      	add	sp, #416	; 0x1a0
100043a0:	bd70      	pop	{r4, r5, r6, pc}
100043a2:	46c0      	nop			; (mov r8, r8)
100043a4:	1000cad5 	.word	0x1000cad5
100043a8:	1000cae0 	.word	0x1000cae0
100043ac:	1000cad7 	.word	0x1000cad7
100043b0:	20001564 	.word	0x20001564

100043b4 <optiga_lib_print_status>:

void optiga_lib_print_status(const char_t * p_log_layer,
                             const char_t * p_log_color,
                             uint16_t return_value)
{
100043b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100043b6:	4c28      	ldr	r4, [pc, #160]	; (10004458 <optiga_lib_print_status+0xa4>)
100043b8:	1c05      	adds	r5, r0, #0
100043ba:	44a5      	add	sp, r4
100043bc:	1c0e      	adds	r6, r1, #0
100043be:	1c17      	adds	r7, r2, #0
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
100043c0:	4926      	ldr	r1, [pc, #152]	; (1000445c <optiga_lib_print_status+0xa8>)
100043c2:	2202      	movs	r2, #2
100043c4:	a802      	add	r0, sp, #8
100043c6:	f007 ff32 	bl	1000c22e <memcpy>
    uint8_t uint16t_conv_buffer[10] = {0};
    char_t return_value_buffer[20] = {0};
100043ca:	ac06      	add	r4, sp, #24
void optiga_lib_print_status(const char_t * p_log_layer,
                             const char_t * p_log_color,
                             uint16_t return_value)
{
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
    uint8_t uint16t_conv_buffer[10] = {0};
100043cc:	2100      	movs	r1, #0
100043ce:	220a      	movs	r2, #10
100043d0:	a803      	add	r0, sp, #12
100043d2:	f007 ff35 	bl	1000c240 <memset>
    char_t return_value_buffer[20] = {0};
100043d6:	2100      	movs	r1, #0
100043d8:	2214      	movs	r2, #20
100043da:	1c20      	adds	r0, r4, #0
100043dc:	f007 ff30 	bl	1000c240 <memset>
    char_t string_buffer[100] = {0};
100043e0:	a80b      	add	r0, sp, #44	; 0x2c
100043e2:	2100      	movs	r1, #0
100043e4:	2264      	movs	r2, #100	; 0x64
100043e6:	f007 ff2b 	bl	1000c240 <memset>
    char_t color_buffer[400];

    if ((NULL == p_log_layer) || (NULL == p_log_color))
100043ea:	2d00      	cmp	r5, #0
100043ec:	d02f      	beq.n	1000444e <optiga_lib_print_status+0x9a>
100043ee:	2e00      	cmp	r6, #0
100043f0:	d02d      	beq.n	1000444e <optiga_lib_print_status+0x9a>
    }

    // if return value is successful, log SUCCESS
    if (OPTIGA_LIB_SUCCESS == return_value)
    {
        strcat(string_buffer,p_log_layer);
100043f2:	a80b      	add	r0, sp, #44	; 0x2c
100043f4:	1c29      	adds	r1, r5, #0
    {
        return;
    }

    // if return value is successful, log SUCCESS
    if (OPTIGA_LIB_SUCCESS == return_value)
100043f6:	2f00      	cmp	r7, #0
100043f8:	d104      	bne.n	10004404 <optiga_lib_print_status+0x50>
    {
        strcat(string_buffer,p_log_layer);
100043fa:	f008 f809 	bl	1000c410 <strcat>
        strcat(string_buffer,"Passed");
100043fe:	a80b      	add	r0, sp, #44	; 0x2c
10004400:	4917      	ldr	r1, [pc, #92]	; (10004460 <optiga_lib_print_status+0xac>)
10004402:	e00b      	b.n	1000441c <optiga_lib_print_status+0x68>
        strcat(return_value_buffer,"");
    }
    else
    {
        strcat(string_buffer,p_log_layer);
10004404:	f008 f804 	bl	1000c410 <strcat>
        strcat(string_buffer,"Failed with return value - ");
10004408:	4916      	ldr	r1, [pc, #88]	; (10004464 <optiga_lib_print_status+0xb0>)
1000440a:	a80b      	add	r0, sp, #44	; 0x2c
1000440c:	f008 f800 	bl	1000c410 <strcat>
        strcat(return_value_buffer,OPTIGA_HEX_BYTE_SEPERATOR);
        optiga_lib_word_to_hex_string(return_value,uint16t_conv_buffer);
10004410:	1c38      	adds	r0, r7, #0
10004412:	a903      	add	r1, sp, #12
10004414:	f7ff ff45 	bl	100042a2 <optiga_lib_word_to_hex_string>
        strcat(return_value_buffer,(char_t *)uint16t_conv_buffer);
10004418:	1c20      	adds	r0, r4, #0
1000441a:	a903      	add	r1, sp, #12
1000441c:	f007 fff8 	bl	1000c410 <strcat>
    }

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, (char_t *)return_value_buffer, string_buffer, p_log_color);
10004420:	4b11      	ldr	r3, [pc, #68]	; (10004468 <optiga_lib_print_status+0xb4>)
10004422:	4912      	ldr	r1, [pc, #72]	; (1000446c <optiga_lib_print_status+0xb8>)
10004424:	1c32      	adds	r2, r6, #0
10004426:	9400      	str	r4, [sp, #0]
10004428:	9301      	str	r3, [sp, #4]
1000442a:	a824      	add	r0, sp, #144	; 0x90
1000442c:	ab0b      	add	r3, sp, #44	; 0x2c
1000442e:	f007 ffcd 	bl	1000c3cc <siprintf>

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&cunit_console, (const uint8_t *)color_buffer, strlen(color_buffer));
10004432:	a824      	add	r0, sp, #144	; 0x90
10004434:	f008 f80b 	bl	1000c44e <strlen>
10004438:	4c0d      	ldr	r4, [pc, #52]	; (10004470 <optiga_lib_print_status+0xbc>)
1000443a:	1c02      	adds	r2, r0, #0
1000443c:	a924      	add	r1, sp, #144	; 0x90
1000443e:	1c20      	adds	r0, r4, #0
10004440:	f7fd f870 	bl	10001524 <pal_logger_write>
    //Print new line
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&cunit_console, new_line_characters, 2);
10004444:	1c20      	adds	r0, r4, #0
10004446:	a902      	add	r1, sp, #8
10004448:	2202      	movs	r2, #2
1000444a:	f7fd f86b 	bl	10001524 <pal_logger_write>
}
1000444e:	2389      	movs	r3, #137	; 0x89
10004450:	009b      	lsls	r3, r3, #2
10004452:	449d      	add	sp, r3
10004454:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004456:	46c0      	nop			; (mov r8, r8)
10004458:	fffffddc 	.word	0xfffffddc
1000445c:	1000cad5 	.word	0x1000cad5
10004460:	1000cae5 	.word	0x1000cae5
10004464:	1000caec 	.word	0x1000caec
10004468:	1000cae0 	.word	0x1000cae0
1000446c:	1000cad7 	.word	0x1000cad7
10004470:	20001564 	.word	0x20001564

10004474 <optiga_lib_print_array_hex_format>:

void optiga_lib_print_array_hex_format(const uint8_t * p_log_string,
                                       uint16_t length,
                                       const char_t * p_log_color)
{
10004474:	b5f0      	push	{r4, r5, r6, r7, lr}
10004476:	4c41      	ldr	r4, [pc, #260]	; (1000457c <optiga_lib_print_array_hex_format+0x108>)
10004478:	44a5      	add	sp, r4
    uint16_t index = 0;
    uint16_t temp_length;
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
    uint8_t buffer_window = 32; // Alignment of 16 bytes per line

    if ((NULL == p_log_string) || (NULL == p_log_color))
1000447a:	2800      	cmp	r0, #0
1000447c:	d079      	beq.n	10004572 <optiga_lib_print_array_hex_format+0xfe>
1000447e:	2a00      	cmp	r2, #0
10004480:	d077      	beq.n	10004572 <optiga_lib_print_array_hex_format+0xfe>
10004482:	1c0d      	adds	r5, r1, #0
10004484:	9205      	str	r2, [sp, #20]
10004486:	9004      	str	r0, [sp, #16]
}

/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_print_length_of_data(uint16_t value)
{
    uint8_t uint16t_conv_buffer [10] = {0};
10004488:	2100      	movs	r1, #0
1000448a:	220a      	movs	r2, #10
1000448c:	a806      	add	r0, sp, #24
1000448e:	f007 fed7 	bl	1000c240 <memset>
    char_t print_buffer[50];      

    sprintf((char_t *)print_buffer, "%37s", "Length of data - ");
10004492:	4a3b      	ldr	r2, [pc, #236]	; (10004580 <optiga_lib_print_array_hex_format+0x10c>)
10004494:	493b      	ldr	r1, [pc, #236]	; (10004584 <optiga_lib_print_array_hex_format+0x110>)
10004496:	a85e      	add	r0, sp, #376	; 0x178
10004498:	f007 ff98 	bl	1000c3cc <siprintf>
    strcat(print_buffer,OPTIGA_HEX_BYTE_SEPERATOR);
    optiga_lib_word_to_hex_string(value,uint16t_conv_buffer);
1000449c:	1c28      	adds	r0, r5, #0
1000449e:	a906      	add	r1, sp, #24
100044a0:	f7ff feff 	bl	100042a2 <optiga_lib_word_to_hex_string>
    strcat(print_buffer,(char_t *)uint16t_conv_buffer); 
100044a4:	a906      	add	r1, sp, #24
100044a6:	a85e      	add	r0, sp, #376	; 0x178
100044a8:	f007 ffb2 	bl	1000c410 <strcat>
    
    optiga_lib_print_string_with_newline(print_buffer);
100044ac:	a85e      	add	r0, sp, #376	; 0x178
100044ae:	f7ff ff33 	bl	10004318 <optiga_lib_print_string_with_newline>
    }
    
    optiga_lib_print_length_of_data(length);
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
100044b2:	2400      	movs	r4, #0
100044b4:	42ac      	cmp	r4, r5
100044b6:	d25c      	bcs.n	10004572 <optiga_lib_print_array_hex_format+0xfe>
    {
        temp_length = buffer_window;
        if ((length - index) < buffer_window)
100044b8:	1b2b      	subs	r3, r5, r4
    optiga_lib_print_length_of_data(length);
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
    {
        temp_length = buffer_window;
100044ba:	2620      	movs	r6, #32
        if ((length - index) < buffer_window)
100044bc:	2b1f      	cmp	r3, #31
100044be:	dc00      	bgt.n	100044c2 <optiga_lib_print_array_hex_format+0x4e>
        {
            temp_length =  length - index;
100044c0:	b29e      	uxth	r6, r3
        }

        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
100044c2:	22af      	movs	r2, #175	; 0xaf
100044c4:	2100      	movs	r1, #0
100044c6:	0052      	lsls	r2, r2, #1
100044c8:	a806      	add	r0, sp, #24
100044ca:	f007 feb9 	bl	1000c240 <memset>
        pal_os_memset(output_buffer, 0x00, sizeof(output_buffer));
100044ce:	22af      	movs	r2, #175	; 0xaf
100044d0:	a85e      	add	r0, sp, #376	; 0x178
100044d2:	2100      	movs	r1, #0
100044d4:	0052      	lsls	r2, r2, #1
100044d6:	f007 feb3 	bl	1000c240 <memset>

        optiga_lib_byte_to_hex_string((uint8_t*)(p_log_string + index), temp_buffer, temp_length, FALSE);
100044da:	9b04      	ldr	r3, [sp, #16]
100044dc:	191b      	adds	r3, r3, r4
100044de:	9303      	str	r3, [sp, #12]
    uint32_t loop = 0;
    uint8_t hex_byte = 0, index = 0;

    do
    {
        if ((NULL == p_array_buffer) || (NULL == p_hex_string))
100044e0:	2b00      	cmp	r3, #0
100044e2:	d027      	beq.n	10004534 <optiga_lib_print_array_hex_format+0xc0>
100044e4:	2309      	movs	r3, #9
100044e6:	aa04      	add	r2, sp, #16
100044e8:	189b      	adds	r3, r3, r2
100044ea:	2200      	movs	r2, #0
        {
            return;
        }

        for (loop = 0; loop < length; loop++)
100044ec:	42b2      	cmp	r2, r6
100044ee:	d219      	bcs.n	10004524 <optiga_lib_print_array_hex_format+0xb0>
                p_hex_string [index++] = '0';
                p_hex_string [index++] = 'x';
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
100044f0:	2030      	movs	r0, #48	; 0x30
100044f2:	4684      	mov	ip, r0
        }

        for (loop = 0; loop < length; loop++)
        {
            index = 0;
            hex_byte = p_array_buffer[loop];
100044f4:	9903      	ldr	r1, [sp, #12]
100044f6:	5c8f      	ldrb	r7, [r1, r2]
                p_hex_string [index++] = '0';
                p_hex_string [index++] = 'x';
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
100044f8:	0939      	lsrs	r1, r7, #4
100044fa:	448c      	add	ip, r1
100044fc:	2909      	cmp	r1, #9
100044fe:	d901      	bls.n	10004504 <optiga_lib_print_array_hex_format+0x90>
10004500:	3137      	adds	r1, #55	; 0x37
10004502:	468c      	mov	ip, r1
10004504:	4660      	mov	r0, ip
10004506:	1e59      	subs	r1, r3, #1
10004508:	7008      	strb	r0, [r1, #0]
1000450a:	210f      	movs	r1, #15
1000450c:	400f      	ands	r7, r1
1000450e:	1c39      	adds	r1, r7, #0
10004510:	3130      	adds	r1, #48	; 0x30
10004512:	2f09      	cmp	r7, #9
10004514:	d900      	bls.n	10004518 <optiga_lib_print_array_hex_format+0xa4>
10004516:	3107      	adds	r1, #7
10004518:	7019      	strb	r1, [r3, #0]
            
            p_hex_string [index++] = ' ';
1000451a:	2120      	movs	r1, #32
        if ((NULL == p_array_buffer) || (NULL == p_hex_string))
        {
            return;
        }

        for (loop = 0; loop < length; loop++)
1000451c:	3201      	adds	r2, #1
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
            
            p_hex_string [index++] = ' ';
1000451e:	7059      	strb	r1, [r3, #1]
10004520:	3303      	adds	r3, #3
10004522:	e7e3      	b.n	100044ec <optiga_lib_print_array_hex_format+0x78>
            p_hex_string += index;
        }
        *p_hex_string = 0x00;
10004524:	2303      	movs	r3, #3
10004526:	435e      	muls	r6, r3
10004528:	abb6      	add	r3, sp, #728	; 0x2d8
1000452a:	199e      	adds	r6, r3, r6
1000452c:	4b16      	ldr	r3, [pc, #88]	; (10004588 <optiga_lib_print_array_hex_format+0x114>)
1000452e:	18f6      	adds	r6, r6, r3
10004530:	2300      	movs	r3, #0
10004532:	7033      	strb	r3, [r6, #0]
        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
        pal_os_memset(output_buffer, 0x00, sizeof(output_buffer));

        optiga_lib_byte_to_hex_string((uint8_t*)(p_log_string + index), temp_buffer, temp_length, FALSE);

        OPTIGA_LIB_LOGGER_PRINT_ARRAY(output_buffer,temp_buffer, p_log_color);
10004534:	4b15      	ldr	r3, [pc, #84]	; (1000458c <optiga_lib_print_array_hex_format+0x118>)
10004536:	ae5e      	add	r6, sp, #376	; 0x178
10004538:	4915      	ldr	r1, [pc, #84]	; (10004590 <optiga_lib_print_array_hex_format+0x11c>)
1000453a:	9a05      	ldr	r2, [sp, #20]
1000453c:	9300      	str	r3, [sp, #0]
1000453e:	1c30      	adds	r0, r6, #0
10004540:	ab06      	add	r3, sp, #24
10004542:	f007 ff43 	bl	1000c3cc <siprintf>

        // New line characted entered at the end of each segment
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
10004546:	1c30      	adds	r0, r6, #0
10004548:	f007 ff81 	bl	1000c44e <strlen>
1000454c:	230d      	movs	r3, #13
1000454e:	5433      	strb	r3, [r6, r0]
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
10004550:	1c30      	adds	r0, r6, #0
10004552:	f007 ff7c 	bl	1000c44e <strlen>
10004556:	230a      	movs	r3, #10
10004558:	1830      	adds	r0, r6, r0
1000455a:	7043      	strb	r3, [r0, #1]
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&cunit_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
1000455c:	1c30      	adds	r0, r6, #0
1000455e:	f007 ff76 	bl	1000c44e <strlen>
    }
    
    optiga_lib_print_length_of_data(length);
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
10004562:	3420      	adds	r4, #32

        // New line characted entered at the end of each segment
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&cunit_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
10004564:	1c82      	adds	r2, r0, #2
10004566:	1c31      	adds	r1, r6, #0
10004568:	480a      	ldr	r0, [pc, #40]	; (10004594 <optiga_lib_print_array_hex_format+0x120>)
1000456a:	f7fc ffdb 	bl	10001524 <pal_logger_write>
    }
    
    optiga_lib_print_length_of_data(length);
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
1000456e:	b2a4      	uxth	r4, r4
10004570:	e7a0      	b.n	100044b4 <optiga_lib_print_array_hex_format+0x40>
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&cunit_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
    }
}
10004572:	23b7      	movs	r3, #183	; 0xb7
10004574:	009b      	lsls	r3, r3, #2
10004576:	449d      	add	sp, r3
10004578:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000457a:	46c0      	nop			; (mov r8, r8)
1000457c:	fffffd24 	.word	0xfffffd24
10004580:	1000cb0d 	.word	0x1000cb0d
10004584:	1000cb08 	.word	0x1000cb08
10004588:	fffffd40 	.word	0xfffffd40
1000458c:	1000cae0 	.word	0x1000cae0
10004590:	1000cb1f 	.word	0x1000cb1f
10004594:	20001564 	.word	0x20001564

10004598 <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
10004598:	b530      	push	{r4, r5, lr}
    uint16_t start_position = *position;
1000459a:	881c      	ldrh	r4, [r3, #0]

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
1000459c:	0a0d      	lsrs	r5, r1, #8
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
1000459e:	5510      	strb	r0, [r2, r4]
100045a0:	1c60      	adds	r0, r4, #1
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
100045a2:	b280      	uxth	r0, r0
100045a4:	5415      	strb	r5, [r2, r0]
100045a6:	1ca0      	adds	r0, r4, #2
    buffer[start_position++] = (uint8_t )(tag_length);
100045a8:	b280      	uxth	r0, r0
100045aa:	3403      	adds	r4, #3
100045ac:	5411      	strb	r1, [r2, r0]

    *position = start_position;
100045ae:	801c      	strh	r4, [r3, #0]
}
100045b0:	bd30      	pop	{r4, r5, pc}

100045b2 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
100045b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
100045b4:	220c      	movs	r2, #12
100045b6:	1c13      	adds	r3, r2, #0

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
100045b8:	1c0d      	adds	r5, r1, #0
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
100045ba:	21c7      	movs	r1, #199	; 0xc7
100045bc:	7f47      	ldrb	r7, [r0, #29]
100045be:	6806      	ldr	r6, [r0, #0]
100045c0:	437b      	muls	r3, r7
100045c2:	00c9      	lsls	r1, r1, #3
100045c4:	18f3      	adds	r3, r6, r3
100045c6:	185b      	adds	r3, r3, r1
100045c8:	781b      	ldrb	r3, [r3, #0]

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
100045ca:	1c04      	adds	r4, r0, #0
100045cc:	9201      	str	r2, [sp, #4]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
100045ce:	2b23      	cmp	r3, #35	; 0x23
100045d0:	d101      	bne.n	100045d6 <optiga_cmd_queue_update_slot+0x24>
100045d2:	2d23      	cmp	r5, #35	; 0x23
100045d4:	d008      	beq.n	100045e8 <optiga_cmd_queue_update_slot+0x36>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
100045d6:	f7fd f86b 	bl	100016b0 <pal_os_timer_get_time_in_microseconds>
100045da:	9b01      	ldr	r3, [sp, #4]
100045dc:	437b      	muls	r3, r7
100045de:	18f6      	adds	r6, r6, r3
100045e0:	23c6      	movs	r3, #198	; 0xc6
100045e2:	00db      	lsls	r3, r3, #3
100045e4:	18f6      	adds	r6, r6, r3
100045e6:	6070      	str	r0, [r6, #4]
    }
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
100045e8:	230c      	movs	r3, #12
100045ea:	20c6      	movs	r0, #198	; 0xc6
100045ec:	7f62      	ldrb	r2, [r4, #29]
100045ee:	6821      	ldr	r1, [r4, #0]
100045f0:	435a      	muls	r2, r3
100045f2:	00c0      	lsls	r0, r0, #3
100045f4:	188a      	adds	r2, r1, r2
100045f6:	1812      	adds	r2, r2, r0
100045f8:	6014      	str	r4, [r2, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
100045fa:	1c1a      	adds	r2, r3, #0
100045fc:	26c7      	movs	r6, #199	; 0xc7
100045fe:	7f60      	ldrb	r0, [r4, #29]
10004600:	00f6      	lsls	r6, r6, #3
10004602:	4342      	muls	r2, r0
10004604:	188a      	adds	r2, r1, r2
10004606:	1992      	adds	r2, r2, r6
10004608:	7816      	ldrb	r6, [r2, #0]
1000460a:	2e23      	cmp	r6, #35	; 0x23
1000460c:	d104      	bne.n	10004618 <optiga_cmd_queue_update_slot+0x66>
1000460e:	2d23      	cmp	r5, #35	; 0x23
10004610:	d102      	bne.n	10004618 <optiga_cmd_queue_update_slot+0x66>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
10004612:	3b04      	subs	r3, #4
10004614:	7053      	strb	r3, [r2, #1]
10004616:	e006      	b.n	10004626 <optiga_cmd_queue_update_slot+0x74>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
10004618:	22c7      	movs	r2, #199	; 0xc7
1000461a:	4343      	muls	r3, r0
1000461c:	00d2      	lsls	r2, r2, #3
1000461e:	18cb      	adds	r3, r1, r3
10004620:	189b      	adds	r3, r3, r2
10004622:	2202      	movs	r2, #2
10004624:	705a      	strb	r2, [r3, #1]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
10004626:	220c      	movs	r2, #12
10004628:	7f63      	ldrb	r3, [r4, #29]
1000462a:	6821      	ldr	r1, [r4, #0]
1000462c:	4353      	muls	r3, r2
1000462e:	22c7      	movs	r2, #199	; 0xc7
10004630:	18cb      	adds	r3, r1, r3
10004632:	00d2      	lsls	r2, r2, #3
10004634:	189b      	adds	r3, r3, r2
10004636:	701d      	strb	r5, [r3, #0]
}
10004638:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

1000463c <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
1000463c:	b538      	push	{r3, r4, r5, lr}
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
1000463e:	230c      	movs	r3, #12
10004640:	21c6      	movs	r1, #198	; 0xc6
10004642:	7f42      	ldrb	r2, [r0, #29]
10004644:	6804      	ldr	r4, [r0, #0]
10004646:	435a      	muls	r2, r3
10004648:	00c9      	lsls	r1, r1, #3
1000464a:	18a2      	adds	r2, r4, r2
1000464c:	1852      	adds	r2, r2, r1
1000464e:	2101      	movs	r1, #1
10004650:	4249      	negs	r1, r1
10004652:	6051      	str	r1, [r2, #4]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
10004654:	22c6      	movs	r2, #198	; 0xc6
10004656:	2500      	movs	r5, #0
10004658:	7f41      	ldrb	r1, [r0, #29]
1000465a:	00d2      	lsls	r2, r2, #3
1000465c:	4359      	muls	r1, r3
1000465e:	1861      	adds	r1, r4, r1
10004660:	1889      	adds	r1, r1, r2
10004662:	600d      	str	r5, [r1, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
10004664:	21c7      	movs	r1, #199	; 0xc7
10004666:	7f42      	ldrb	r2, [r0, #29]
10004668:	00c9      	lsls	r1, r1, #3
1000466a:	435a      	muls	r2, r3
1000466c:	18a2      	adds	r2, r4, r2
1000466e:	1852      	adds	r2, r2, r1
10004670:	7015      	strb	r5, [r2, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
10004672:	7f42      	ldrb	r2, [r0, #29]
10004674:	4353      	muls	r3, r2
10004676:	6802      	ldr	r2, [r0, #0]
10004678:	18d3      	adds	r3, r2, r3
1000467a:	2201      	movs	r2, #1
1000467c:	185b      	adds	r3, r3, r1
1000467e:	705a      	strb	r2, [r3, #1]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
10004680:	23cf      	movs	r3, #207	; 0xcf
10004682:	6802      	ldr	r2, [r0, #0]
10004684:	00db      	lsls	r3, r3, #3
10004686:	58d0      	ldr	r0, [r2, r3]
10004688:	4901      	ldr	r1, [pc, #4]	; (10004690 <optiga_cmd_queue_reset_slot+0x54>)
1000468a:	f7fc ffe1 	bl	10001650 <pal_os_event_start>
}
1000468e:	bd38      	pop	{r3, r4, r5, pc}
10004690:	100059d9 	.word	0x100059d9

10004694 <optiga_cmd_execute_handler>:
    } while (FALSE);
    return (return_status);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
10004694:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_context_t * p_optiga;
    uint8_t exit_loop = TRUE;
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
10004696:	6843      	ldr	r3, [r0, #4]
    } while (FALSE);
    return (return_status);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
10004698:	b085      	sub	sp, #20
1000469a:	1c04      	adds	r4, r0, #0
1000469c:	9102      	str	r1, [sp, #8]
    optiga_context_t * p_optiga;
    uint8_t exit_loop = TRUE;
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
1000469e:	9303      	str	r3, [sp, #12]
    p_optiga = me->p_optiga;
100046a0:	6807      	ldr	r7, [r0, #0]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
100046a2:	2900      	cmp	r1, #0
100046a4:	d01b      	beq.n	100046de <optiga_cmd_execute_handler+0x4a>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        /*In the case of hibernate if any low level error occurs while performing
          close application this section clears the saved application context.*/
        if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
100046a6:	7e03      	ldrb	r3, [r0, #24]
100046a8:	2b00      	cmp	r3, #0
100046aa:	d013      	beq.n	100046d4 <optiga_cmd_execute_handler+0x40>
100046ac:	7ec3      	ldrb	r3, [r0, #27]
100046ae:	2b22      	cmp	r3, #34	; 0x22
100046b0:	d110      	bne.n	100046d4 <optiga_cmd_execute_handler+0x40>
            (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
        {
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
100046b2:	23d0      	movs	r3, #208	; 0xd0
100046b4:	00db      	lsls	r3, r3, #3
100046b6:	18f8      	adds	r0, r7, r3
100046b8:	2100      	movs	r1, #0
100046ba:	2208      	movs	r2, #8
100046bc:	f007 fdc0 	bl	1000c240 <memset>
                            sizeof(me->p_optiga->optiga_context_handle_buffer));
            if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
100046c0:	8c20      	ldrh	r0, [r4, #32]
100046c2:	2833      	cmp	r0, #51	; 0x33
100046c4:	d106      	bne.n	100046d4 <optiga_cmd_execute_handler+0x40>
                (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
            {
                //Clearing context handle secret from datastore
                me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                         me->p_optiga->optiga_context_handle_buffer,
100046c6:	22d0      	movs	r2, #208	; 0xd0
100046c8:	6823      	ldr	r3, [r4, #0]
100046ca:	00d2      	lsls	r2, r2, #3
100046cc:	1899      	adds	r1, r3, r2
                            sizeof(me->p_optiga->optiga_context_handle_buffer));
            if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
                (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
            {
                //Clearing context handle secret from datastore
                me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
100046ce:	2208      	movs	r2, #8
100046d0:	f7fc ff50 	bl	10001574 <pal_os_datastore_write>
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                }
            }
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
100046d4:	230b      	movs	r3, #11
100046d6:	75a3      	strb	r3, [r4, #22]
        me->exit_status = event;
100046d8:	466b      	mov	r3, sp
100046da:	891b      	ldrh	r3, [r3, #8]
100046dc:	83e3      	strh	r3, [r4, #30]
    } while (FALSE);
    return (return_status);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
100046de:	2601      	movs	r6, #1
        me->exit_status = event;
    }

    do
    {
        switch (me->cmd_next_execution_state)
100046e0:	7da3      	ldrb	r3, [r4, #22]
100046e2:	2b0c      	cmp	r3, #12
100046e4:	d900      	bls.n	100046e8 <optiga_cmd_execute_handler+0x54>
100046e6:	e186      	b.n	100049f6 <optiga_cmd_execute_handler+0x362>
100046e8:	1c18      	adds	r0, r3, #0
100046ea:	f007 fae9 	bl	1000bcc0 <__gnu_thumb1_case_uhi>
100046ee:	000d      	.short	0x000d
100046f0:	003a0015 	.word	0x003a0015
100046f4:	00770044 	.word	0x00770044
100046f8:	00850085 	.word	0x00850085
100046fc:	00980091 	.word	0x00980091
10004700:	010100c8 	.word	0x010100c8
10004704:	017f0179 	.word	0x017f0179
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
    optiga_cmd_queue_update_slot(me , lock_type);
10004708:	1c20      	adds	r0, r4, #0
1000470a:	2121      	movs	r1, #33	; 0x21
1000470c:	f7ff ff51 	bl	100045b2 <optiga_cmd_queue_update_slot>
        switch (me->cmd_next_execution_state)
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
10004710:	2300      	movs	r3, #0
10004712:	83e3      	strh	r3, [r4, #30]
                {
                    EXIT_STATE_WITH_ERROR(me,exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
10004714:	3301      	adds	r3, #1
10004716:	e079      	b.n	1000480c <optiga_cmd_execute_handler+0x178>
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004718:	21cf      	movs	r1, #207	; 0xcf
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
1000471a:	6823      	ldr	r3, [r4, #0]
1000471c:	7e62      	ldrb	r2, [r4, #25]
1000471e:	681b      	ldr	r3, [r3, #0]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004720:	00c9      	lsls	r1, r1, #3
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
10004722:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
10004724:	6823      	ldr	r3, [r4, #0]
10004726:	7ea2      	ldrb	r2, [r4, #26]
10004728:	681b      	ldr	r3, [r3, #0]
1000472a:	73da      	strb	r2, [r3, #15]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
1000472c:	6823      	ldr	r3, [r4, #0]
1000472e:	7ee2      	ldrb	r2, [r4, #27]
10004730:	681b      	ldr	r3, [r3, #0]
10004732:	741a      	strb	r2, [r3, #16]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004734:	6823      	ldr	r3, [r4, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
10004736:	6838      	ldr	r0, [r7, #0]
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004738:	681a      	ldr	r2, [r3, #0]
1000473a:	585b      	ldr	r3, [r3, r1]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
1000473c:	1c21      	adds	r1, r4, #0
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
1000473e:	6153      	str	r3, [r2, #20]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
10004740:	f7ff fd22 	bl	10004188 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
10004744:	6823      	ldr	r3, [r4, #0]
10004746:	6818      	ldr	r0, [r3, #0]
10004748:	f7ff fd22 	bl	10004190 <optiga_comms_open>
1000474c:	83e0      	strh	r0, [r4, #30]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
1000474e:	2800      	cmp	r0, #0
10004750:	d005      	beq.n	1000475e <optiga_cmd_execute_handler+0xca>
                {
                    EXIT_STATE_WITH_ERROR(me,exit_loop);
10004752:	230b      	movs	r3, #11
10004754:	75a3      	strb	r3, [r4, #22]
10004756:	4baa      	ldr	r3, [pc, #680]	; (10004a00 <optiga_cmd_execute_handler+0x36c>)
10004758:	83e3      	strh	r3, [r4, #30]
1000475a:	2600      	movs	r6, #0
1000475c:	e7c0      	b.n	100046e0 <optiga_cmd_execute_handler+0x4c>
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
1000475e:	2302      	movs	r3, #2
10004760:	e054      	b.n	1000480c <optiga_cmd_execute_handler+0x178>
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
10004762:	23cf      	movs	r3, #207	; 0xcf
10004764:	6822      	ldr	r2, [r4, #0]
10004766:	00db      	lsls	r3, r3, #3
10004768:	58d0      	ldr	r0, [r2, r3]
1000476a:	49a6      	ldr	r1, [pc, #664]	; (10004a04 <optiga_cmd_execute_handler+0x370>)
1000476c:	1c22      	adds	r2, r4, #0
1000476e:	2332      	movs	r3, #50	; 0x32
10004770:	f7fc ff5e 	bl	10001630 <pal_os_event_register_callback_oneshot>
10004774:	e049      	b.n	1000480a <optiga_cmd_execute_handler+0x176>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
10004776:	7ee3      	ldrb	r3, [r4, #27]
10004778:	2b22      	cmp	r3, #34	; 0x22
1000477a:	d001      	beq.n	10004780 <optiga_cmd_execute_handler+0xec>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
1000477c:	2304      	movs	r3, #4
1000477e:	75a3      	strb	r3, [r4, #22]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
10004780:	6823      	ldr	r3, [r4, #0]
10004782:	7e62      	ldrb	r2, [r4, #25]
10004784:	681b      	ldr	r3, [r3, #0]
10004786:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
10004788:	6823      	ldr	r3, [r4, #0]
1000478a:	7ea2      	ldrb	r2, [r4, #26]
1000478c:	681b      	ldr	r3, [r3, #0]
1000478e:	73da      	strb	r2, [r3, #15]
                if (0 != me->p_optiga->protection_level_state)
10004790:	23d1      	movs	r3, #209	; 0xd1
10004792:	6822      	ldr	r2, [r4, #0]
10004794:	00db      	lsls	r3, r3, #3
10004796:	5cd1      	ldrb	r1, [r2, r3]
10004798:	6812      	ldr	r2, [r2, #0]
1000479a:	2900      	cmp	r1, #0
1000479c:	d001      	beq.n	100047a2 <optiga_cmd_execute_handler+0x10e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
1000479e:	7ee1      	ldrb	r1, [r4, #27]
100047a0:	e000      	b.n	100047a4 <optiga_cmd_execute_handler+0x110>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
100047a2:	2133      	movs	r1, #51	; 0x33
100047a4:	7411      	strb	r1, [r2, #16]
                }
                me->p_optiga->protection_level_state = 0;
100047a6:	2200      	movs	r2, #0
100047a8:	6821      	ldr	r1, [r4, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
100047aa:	2504      	movs	r5, #4
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
100047ac:	54ca      	strb	r2, [r1, r3]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
100047ae:	21cf      	movs	r1, #207	; 0xcf
100047b0:	6823      	ldr	r3, [r4, #0]
100047b2:	00c9      	lsls	r1, r1, #3
100047b4:	681a      	ldr	r2, [r3, #0]
100047b6:	585b      	ldr	r3, [r3, r1]
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
100047b8:	75a5      	strb	r5, [r4, #22]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;

                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
100047ba:	1c21      	adds	r1, r4, #0
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
100047bc:	6153      	str	r3, [r2, #20]

                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
100047be:	6838      	ldr	r0, [r7, #0]
100047c0:	f7ff fce2 	bl	10004188 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
100047c4:	6823      	ldr	r3, [r4, #0]
100047c6:	6818      	ldr	r0, [r3, #0]
100047c8:	f7ff fd2e 	bl	10004228 <optiga_comms_close>
100047cc:	83e0      	strh	r0, [r4, #30]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
100047ce:	2800      	cmp	r0, #0
100047d0:	d1bf      	bne.n	10004752 <optiga_cmd_execute_handler+0xbe>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
100047d2:	7ee3      	ldrb	r3, [r4, #27]
100047d4:	2b22      	cmp	r3, #34	; 0x22
100047d6:	d109      	bne.n	100047ec <optiga_cmd_execute_handler+0x158>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
100047d8:	75a5      	strb	r5, [r4, #22]
100047da:	e10f      	b.n	100049fc <optiga_cmd_execute_handler+0x368>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, event);
100047dc:	6923      	ldr	r3, [r4, #16]
100047de:	68e0      	ldr	r0, [r4, #12]
100047e0:	9902      	ldr	r1, [sp, #8]
100047e2:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
100047e4:	7ee3      	ldrb	r3, [r4, #27]
100047e6:	2b22      	cmp	r3, #34	; 0x22
100047e8:	d000      	beq.n	100047ec <optiga_cmd_execute_handler+0x158>
100047ea:	e104      	b.n	100049f6 <optiga_cmd_execute_handler+0x362>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
    optiga_cmd_queue_reset_slot(me);
100047ec:	1c20      	adds	r0, r4, #0
100047ee:	f7ff ff25 	bl	1000463c <optiga_cmd_queue_reset_slot>
                    exit_loop = TRUE;
                }
                // For synchronous behavior: After exit from optiga_comms_close, release lock
                else
                {
                    me->exit_status = optiga_cmd_release_lock(me);
100047f2:	2300      	movs	r3, #0
100047f4:	83e3      	strh	r3, [r4, #30]
100047f6:	e0fe      	b.n	100049f6 <optiga_cmd_execute_handler+0x362>
100047f8:	2500      	movs	r5, #0
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
}

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
100047fa:	1c20      	adds	r0, r4, #0
100047fc:	2122      	movs	r1, #34	; 0x22
                break;
            }
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            {
                if (me->cmd_next_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
100047fe:	2b05      	cmp	r3, #5
10004800:	d000      	beq.n	10004804 <optiga_cmd_execute_handler+0x170>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
    optiga_cmd_queue_update_slot(me , lock_type);
10004802:	2121      	movs	r1, #33	; 0x21
10004804:	f7ff fed5 	bl	100045b2 <optiga_cmd_queue_update_slot>
                {
                    me->exit_status = optiga_cmd_request_session(me);
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
10004808:	83e5      	strh	r5, [r4, #30]
                {
                    EXIT_STATE_WITH_ERROR(me,exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
1000480a:	2308      	movs	r3, #8
1000480c:	75a3      	strb	r3, [r4, #22]
                break;
1000480e:	e0f2      	b.n	100049f6 <optiga_cmd_execute_handler+0x362>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
    optiga_cmd_queue_update_slot(me , lock_type);
10004810:	1c20      	adds	r0, r4, #0
10004812:	2123      	movs	r1, #35	; 0x23
10004814:	f7ff fecd 	bl	100045b2 <optiga_cmd_queue_update_slot>
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                break;
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
10004818:	2300      	movs	r3, #0
1000481a:	83e3      	strh	r3, [r4, #30]
1000481c:	e7f5      	b.n	1000480a <optiga_cmd_execute_handler+0x176>
            }

            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                exit_loop = TRUE;
                me->exit_status = optiga_cmd_handler(me);
1000481e:	1c20      	adds	r0, r4, #0
10004820:	9b03      	ldr	r3, [sp, #12]
10004822:	4798      	blx	r3
10004824:	83e0      	strh	r0, [r4, #30]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
10004826:	2800      	cmp	r0, #0
10004828:	d001      	beq.n	1000482e <optiga_cmd_execute_handler+0x19a>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
1000482a:	230b      	movs	r3, #11
1000482c:	e0dc      	b.n	100049e8 <optiga_cmd_execute_handler+0x354>
                    exit_loop = FALSE;
                    break;
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
1000482e:	6823      	ldr	r3, [r4, #0]
10004830:	4a75      	ldr	r2, [pc, #468]	; (10004a08 <optiga_cmd_execute_handler+0x374>)
10004832:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
10004834:	7e62      	ldrb	r2, [r4, #25]
10004836:	681b      	ldr	r3, [r3, #0]
10004838:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
1000483a:	6823      	ldr	r3, [r4, #0]
1000483c:	7ea2      	ldrb	r2, [r4, #26]
1000483e:	681b      	ldr	r3, [r3, #0]
10004840:	73da      	strb	r2, [r3, #15]
                me->p_optiga->protection_level_state |= me->protection_level;
10004842:	22d1      	movs	r2, #209	; 0xd1
10004844:	6821      	ldr	r1, [r4, #0]
10004846:	00d2      	lsls	r2, r2, #3
10004848:	5c8b      	ldrb	r3, [r1, r2]
1000484a:	7e60      	ldrb	r0, [r4, #25]
1000484c:	4303      	orrs	r3, r0
1000484e:	548b      	strb	r3, [r1, r2]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
10004850:	6838      	ldr	r0, [r7, #0]
10004852:	1c21      	adds	r1, r4, #0
10004854:	f7ff fc98 	bl	10004188 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
10004858:	1dbb      	adds	r3, r7, #6
1000485a:	88ba      	ldrh	r2, [r7, #4]
1000485c:	9300      	str	r3, [sp, #0]
1000485e:	3307      	adds	r3, #7
10004860:	6838      	ldr	r0, [r7, #0]
10004862:	1c19      	adds	r1, r3, #0
10004864:	f7ff fcb8 	bl	100041d8 <optiga_comms_transceive>
10004868:	83e0      	strh	r0, [r4, #30]
                                                          p_optiga->optiga_comms_buffer,
                                                          p_optiga->comms_tx_size,
                                                          p_optiga->optiga_comms_buffer,
                                                          &p_optiga->comms_rx_size);

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
1000486a:	2800      	cmp	r0, #0
1000486c:	d000      	beq.n	10004870 <optiga_cmd_execute_handler+0x1dc>
1000486e:	e770      	b.n	10004752 <optiga_cmd_execute_handler+0xbe>
                {
                    EXIT_STATE_WITH_ERROR(me,exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10004870:	2309      	movs	r3, #9
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
10004872:	7f22      	ldrb	r2, [r4, #28]
                {
                    EXIT_STATE_WITH_ERROR(me,exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10004874:	75a3      	strb	r3, [r4, #22]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
10004876:	3b89      	subs	r3, #137	; 0x89
10004878:	4313      	orrs	r3, r2
1000487a:	7723      	strb	r3, [r4, #28]
                break;
1000487c:	e0be      	b.n	100049fc <optiga_cmd_execute_handler+0x368>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
1000487e:	7f23      	ldrb	r3, [r4, #28]
10004880:	2b7f      	cmp	r3, #127	; 0x7f
10004882:	d9d2      	bls.n	1000482a <optiga_cmd_execute_handler+0x196>
                {
                    me->exit_status = optiga_cmd_handler(me);
10004884:	1c20      	adds	r0, r4, #0
10004886:	9b03      	ldr	r3, [sp, #12]
10004888:	4798      	blx	r3
1000488a:	83e0      	strh	r0, [r4, #30]
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                    exit_loop = FALSE;
                    break;
                }
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
1000488c:	2800      	cmp	r0, #0
1000488e:	d121      	bne.n	100048d4 <optiga_cmd_execute_handler+0x240>
                {
                    if (FALSE == me->chaining_ongoing)
10004890:	7de0      	ldrb	r0, [r4, #23]
10004892:	2800      	cmp	r0, #0
10004894:	d103      	bne.n	1000489e <optiga_cmd_execute_handler+0x20a>
                    {
                        if (OPTIGA_CMD_STATE_EXIT != me->cmd_next_execution_state)
10004896:	7da3      	ldrb	r3, [r4, #22]
10004898:	2b0c      	cmp	r3, #12
1000489a:	d1c6      	bne.n	1000482a <optiga_cmd_execute_handler+0x196>
1000489c:	e75d      	b.n	1000475a <optiga_cmd_execute_handler+0xc6>
1000489e:	23cf      	movs	r3, #207	; 0xcf
100048a0:	6822      	ldr	r2, [r4, #0]
100048a2:	00db      	lsls	r3, r3, #3
100048a4:	4957      	ldr	r1, [pc, #348]	; (10004a04 <optiga_cmd_execute_handler+0x370>)
                        }
                        exit_loop = FALSE;
                        break;
                    }
                    // for chaining, trigger preparing of next command
                    else if (TRUE == me->chaining_ongoing)
100048a6:	2801      	cmp	r0, #1
100048a8:	d10b      	bne.n	100048c2 <optiga_cmd_execute_handler+0x22e>
                    {
                        pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
100048aa:	58d0      	ldr	r0, [r2, r3]
100048ac:	23fa      	movs	r3, #250	; 0xfa
100048ae:	1c22      	adds	r2, r4, #0
100048b0:	009b      	lsls	r3, r3, #2
100048b2:	f7fc febd 	bl	10001630 <pal_os_event_register_callback_oneshot>
                                                               (void*)me,
                                                               OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                        exit_loop = TRUE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                        me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
100048b6:	2303      	movs	r3, #3
100048b8:	7e62      	ldrb	r2, [r4, #25]
100048ba:	4013      	ands	r3, r2
100048bc:	7663      	strb	r3, [r4, #25]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
100048be:	2308      	movs	r3, #8
100048c0:	e006      	b.n	100048d0 <optiga_cmd_execute_handler+0x23c>
                    }
                    // After successful Close Application, change state to invoke optiga_comms_close
                    else
                    {
                        pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
100048c2:	58d0      	ldr	r0, [r2, r3]
100048c4:	23fa      	movs	r3, #250	; 0xfa
100048c6:	1c22      	adds	r2, r4, #0
100048c8:	009b      	lsls	r3, r3, #2
100048ca:	f7fc feb1 	bl	10001630 <pal_os_event_register_callback_oneshot>
                                                               (register_callback)optiga_cmd_event_trigger_execute,
                                                               me,
                                                               OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                        exit_loop=TRUE;
                        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
100048ce:	2303      	movs	r3, #3
100048d0:	75a3      	strb	r3, [r4, #22]
100048d2:	e093      	b.n	100049fc <optiga_cmd_execute_handler+0x368>
                    }
                }
                else
                {
                    // After OPTIGA error is analyzed, invoke upper layer handler and release lock
                    if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
100048d4:	2381      	movs	r3, #129	; 0x81
100048d6:	009b      	lsls	r3, r3, #2
100048d8:	4298      	cmp	r0, r3
100048da:	d0a6      	beq.n	1000482a <optiga_cmd_execute_handler+0x196>
                    }
                    // After OPTIGA responds with failure, invoke the next state to check which error occurred
                    else
                    {
                        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
                        SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
100048dc:	2203      	movs	r2, #3
                        break;
                    }
                    // After OPTIGA responds with failure, invoke the next state to check which error occurred
                    else
                    {
                        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
100048de:	3bfb      	subs	r3, #251	; 0xfb
100048e0:	3bff      	subs	r3, #255	; 0xff
100048e2:	75a3      	strb	r3, [r4, #22]
                        SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
100048e4:	7f23      	ldrb	r3, [r4, #28]
100048e6:	4393      	bics	r3, r2
100048e8:	3a02      	subs	r2, #2
100048ea:	4313      	orrs	r3, r2
100048ec:	7723      	strb	r3, [r4, #28]
100048ee:	e734      	b.n	1000475a <optiga_cmd_execute_handler+0xc6>
#define GET_DATA_OBJECT_CMD        (0x01)
#define PARAM                      (0x00)

    p_optiga = me->p_optiga;

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
100048f0:	2303      	movs	r3, #3
100048f2:	7f26      	ldrb	r6, [r4, #28]
#define OFFSET                     (0x0000)
#define BYTES_TO_READ              (0x0001)
#define GET_DATA_OBJECT_CMD        (0x01)
#define PARAM                      (0x00)

    p_optiga = me->p_optiga;
100048f4:	6825      	ldr	r5, [r4, #0]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
100048f6:	401e      	ands	r6, r3
100048f8:	2e02      	cmp	r6, #2
100048fa:	d02c      	beq.n	10004956 <optiga_cmd_execute_handler+0x2c2>
100048fc:	429e      	cmp	r6, r3
100048fe:	d048      	beq.n	10004992 <optiga_cmd_execute_handler+0x2fe>
10004900:	2e01      	cmp	r6, #1
10004902:	d15b      	bne.n	100049bc <optiga_cmd_execute_handler+0x328>
    {
        case OPTIGA_CMD_ERROR_CODE_PREPARE:
        {
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
10004904:	1c28      	adds	r0, r5, #0
10004906:	4941      	ldr	r1, [pc, #260]	; (10004a0c <optiga_cmd_execute_handler+0x378>)
10004908:	3016      	adds	r0, #22
1000490a:	f7ff fcb7 	bl	1000427c <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OFFSET);
1000490e:	6820      	ldr	r0, [r4, #0]
10004910:	2100      	movs	r1, #0
10004912:	3018      	adds	r0, #24
10004914:	f7ff fcb2 	bl	1000427c <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), BYTES_TO_READ);
10004918:	6820      	ldr	r0, [r4, #0]
1000491a:	1c31      	adds	r1, r6, #0
1000491c:	301a      	adds	r0, #26
1000491e:	f7ff fcad 	bl	1000427c <optiga_common_set_uint16>
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004922:	2200      	movs	r2, #0
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            optiga_cmd_prepare_apdu_header(GET_DATA_OBJECT_CMD,
                                           PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10004924:	6823      	ldr	r3, [r4, #0]

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
10004926:	2103      	movs	r1, #3
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004928:	74da      	strb	r2, [r3, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
1000492a:	751a      	strb	r2, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
1000492c:	3206      	adds	r2, #6
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000492e:	749e      	strb	r6, [r3, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004930:	755a      	strb	r2, [r3, #21]
            optiga_cmd_prepare_apdu_header(GET_DATA_OBJECT_CMD,
                                           PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10004932:	230a      	movs	r3, #10
10004934:	6822      	ldr	r2, [r4, #0]
10004936:	8093      	strh	r3, [r2, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
10004938:	7f23      	ldrb	r3, [r4, #28]
1000493a:	438b      	bics	r3, r1
1000493c:	3901      	subs	r1, #1
1000493e:	430b      	orrs	r3, r1
10004940:	7723      	strb	r3, [r4, #28]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
10004942:	23cf      	movs	r3, #207	; 0xcf
10004944:	00db      	lsls	r3, r3, #3
10004946:	58d0      	ldr	r0, [r2, r3]
10004948:	23fa      	movs	r3, #250	; 0xfa
1000494a:	492e      	ldr	r1, [pc, #184]	; (10004a04 <optiga_cmd_execute_handler+0x370>)
1000494c:	1c22      	adds	r2, r4, #0
1000494e:	009b      	lsls	r3, r3, #2
10004950:	f7fc fe6e 	bl	10001630 <pal_os_event_register_callback_oneshot>
10004954:	e032      	b.n	100049bc <optiga_cmd_execute_handler+0x328>
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_TX:
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
10004956:	4b2c      	ldr	r3, [pc, #176]	; (10004a08 <optiga_cmd_execute_handler+0x374>)

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
10004958:	682a      	ldr	r2, [r5, #0]
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_TX:
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
1000495a:	80eb      	strh	r3, [r5, #6]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
1000495c:	7e63      	ldrb	r3, [r4, #25]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
1000495e:	1c21      	adds	r1, r4, #0
        case OPTIGA_CMD_ERROR_CODE_TX:
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
10004960:	7393      	strb	r3, [r2, #14]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
10004962:	6823      	ldr	r3, [r4, #0]
10004964:	7ea2      	ldrb	r2, [r4, #26]
10004966:	681b      	ldr	r3, [r3, #0]
10004968:	73da      	strb	r2, [r3, #15]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
1000496a:	6828      	ldr	r0, [r5, #0]
1000496c:	f7ff fc0c 	bl	10004188 <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
10004970:	1c2b      	adds	r3, r5, #0
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
10004972:	1da9      	adds	r1, r5, #6
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
10004974:	330d      	adds	r3, #13
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
10004976:	88aa      	ldrh	r2, [r5, #4]
10004978:	9100      	str	r1, [sp, #0]
1000497a:	6828      	ldr	r0, [r5, #0]
1000497c:	1c19      	adds	r1, r3, #0
1000497e:	f7ff fc2b 	bl	100041d8 <optiga_comms_transceive>
10004982:	1e06      	subs	r6, r0, #0
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
                                                    &p_optiga->comms_rx_size);
            if (OPTIGA_COMMS_SUCCESS != return_status)
10004984:	d118      	bne.n	100049b8 <optiga_cmd_execute_handler+0x324>
            {
                return_status = OPTIGA_CMD_ERROR;
                break;
            }
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
10004986:	2203      	movs	r2, #3
10004988:	7f23      	ldrb	r3, [r4, #28]
1000498a:	4393      	bics	r3, r2
1000498c:	4313      	orrs	r3, r2
1000498e:	7723      	strb	r3, [r4, #28]
10004990:	e016      	b.n	100049c0 <optiga_cmd_execute_handler+0x32c>
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_RX:
        {
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004992:	7cab      	ldrb	r3, [r5, #18]
10004994:	2bff      	cmp	r3, #255	; 0xff
10004996:	d011      	beq.n	100049bc <optiga_cmd_execute_handler+0x328>
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
            return_status = return_status | OPTIGA_DEVICE_ERROR;
10004998:	2380      	movs	r3, #128	; 0x80
        {
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
1000499a:	7dae      	ldrb	r6, [r5, #22]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
1000499c:	021b      	lsls	r3, r3, #8
1000499e:	431e      	orrs	r6, r3
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
100049a0:	2309      	movs	r3, #9
100049a2:	75a3      	strb	r3, [r4, #22]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
100049a4:	23cf      	movs	r3, #207	; 0xcf
100049a6:	00db      	lsls	r3, r3, #3
100049a8:	58e8      	ldr	r0, [r5, r3]
100049aa:	23fa      	movs	r3, #250	; 0xfa
100049ac:	4915      	ldr	r1, [pc, #84]	; (10004a04 <optiga_cmd_execute_handler+0x370>)
100049ae:	1c22      	adds	r2, r4, #0
100049b0:	009b      	lsls	r3, r3, #2
100049b2:	f7fc fe3d 	bl	10001630 <pal_os_event_register_callback_oneshot>
100049b6:	e003      	b.n	100049c0 <optiga_cmd_execute_handler+0x32c>
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
                                                    &p_optiga->comms_rx_size);
            if (OPTIGA_COMMS_SUCCESS != return_status)
            {
                return_status = OPTIGA_CMD_ERROR;
100049b8:	4e11      	ldr	r6, [pc, #68]	; (10004a00 <optiga_cmd_execute_handler+0x36c>)
100049ba:	e001      	b.n	100049c0 <optiga_cmd_execute_handler+0x32c>
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
100049bc:	2680      	movs	r6, #128	; 0x80
100049be:	0236      	lsls	r6, r6, #8
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                exit_loop=TRUE;
                me->exit_status = optiga_cmd_get_error_code_handler(me);
                if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
100049c0:	b233      	sxth	r3, r6
                break;
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                exit_loop=TRUE;
                me->exit_status = optiga_cmd_get_error_code_handler(me);
100049c2:	83e6      	strh	r6, [r4, #30]
                if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
100049c4:	2b00      	cmp	r3, #0
100049c6:	dd00      	ble.n	100049ca <optiga_cmd_execute_handler+0x336>
100049c8:	e72f      	b.n	1000482a <optiga_cmd_execute_handler+0x196>
100049ca:	2380      	movs	r3, #128	; 0x80
100049cc:	021b      	lsls	r3, r3, #8
100049ce:	429e      	cmp	r6, r3
100049d0:	d114      	bne.n	100049fc <optiga_cmd_execute_handler+0x368>
                    ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
100049d2:	2303      	movs	r3, #3
                    ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
100049d4:	7f22      	ldrb	r2, [r4, #28]
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                exit_loop=TRUE;
                me->exit_status = optiga_cmd_get_error_code_handler(me);
                if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
                    ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
100049d6:	4013      	ands	r3, r2
100049d8:	2b03      	cmp	r3, #3
100049da:	d100      	bne.n	100049de <optiga_cmd_execute_handler+0x34a>
100049dc:	e725      	b.n	1000482a <optiga_cmd_execute_handler+0x196>
100049de:	e00d      	b.n	100049fc <optiga_cmd_execute_handler+0x368>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
    optiga_cmd_queue_reset_slot(me);
100049e0:	1c20      	adds	r0, r4, #0
100049e2:	f7ff fe2b 	bl	1000463c <optiga_cmd_queue_reset_slot>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
                me->cmd_next_execution_state = OPTIGA_CMD_STATE_EXIT;
100049e6:	230c      	movs	r3, #12
100049e8:	75a3      	strb	r3, [r4, #22]
                exit_loop=FALSE;
                break;
100049ea:	e6b6      	b.n	1000475a <optiga_cmd_execute_handler+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
100049ec:	8be1      	ldrh	r1, [r4, #30]
100049ee:	6923      	ldr	r3, [r4, #16]
100049f0:	68e0      	ldr	r0, [r4, #12]
100049f2:	4798      	blx	r3
                exit_loop=TRUE;
                break;
100049f4:	e002      	b.n	100049fc <optiga_cmd_execute_handler+0x368>
            }
        }
    } while (FALSE == exit_loop);
100049f6:	2e00      	cmp	r6, #0
100049f8:	d100      	bne.n	100049fc <optiga_cmd_execute_handler+0x368>
100049fa:	e6ae      	b.n	1000475a <optiga_cmd_execute_handler+0xc6>
}
100049fc:	b005      	add	sp, #20
100049fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004a00:	00000202 	.word	0x00000202
10004a04:	10004a11 	.word	0x10004a11
10004a08:	00000622 	.word	0x00000622
10004a0c:	0000f1c2 	.word	0x0000f1c2

10004a10 <optiga_cmd_event_trigger_execute>:
    *position = start_position;
}


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
10004a10:	b508      	push	{r3, lr}
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
10004a12:	2100      	movs	r1, #0
10004a14:	f7ff fe3e 	bl	10004694 <optiga_cmd_execute_handler>
}
10004a18:	bd08      	pop	{r3, pc}
	...

10004a1c <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
10004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
10004a1e:	7d83      	ldrb	r3, [r0, #22]

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
10004a20:	1c06      	adds	r6, r0, #0
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
10004a22:	6884      	ldr	r4, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
10004a24:	2b08      	cmp	r3, #8
10004a26:	d002      	beq.n	10004a2e <optiga_cmd_get_data_object_handler+0x12>
10004a28:	2b09      	cmp	r3, #9
10004a2a:	d032      	beq.n	10004a92 <optiga_cmd_get_data_object_handler+0x76>
10004a2c:	e074      	b.n	10004b18 <optiga_cmd_get_data_object_handler+0xfc>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                break;
            }
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004a2e:	6800      	ldr	r0, [r0, #0]
10004a30:	8821      	ldrh	r1, [r4, #0]
10004a32:	3016      	adds	r0, #22
10004a34:	f7ff fc22 	bl	1000427c <optiga_common_set_uint16>
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
10004a38:	88e1      	ldrh	r1, [r4, #6]
10004a3a:	88a5      	ldrh	r5, [r4, #4]
10004a3c:	4b37      	ldr	r3, [pc, #220]	; (10004b1c <optiga_cmd_get_data_object_handler+0x100>)
10004a3e:	1a6d      	subs	r5, r5, r1
10004a40:	429d      	cmp	r5, r3
10004a42:	dd00      	ble.n	10004a46 <optiga_cmd_get_data_object_handler+0x2a>
10004a44:	1c1d      	adds	r5, r3, #0
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
10004a46:	7aa2      	ldrb	r2, [r4, #10]
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
10004a48:	b2ad      	uxth	r5, r5
                break;
            }
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004a4a:	230b      	movs	r3, #11

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
10004a4c:	2a00      	cmp	r2, #0
10004a4e:	d10c      	bne.n	10004a6a <optiga_cmd_get_data_object_handler+0x4e>
            {
                //offset
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004a50:	8863      	ldrh	r3, [r4, #2]
10004a52:	6830      	ldr	r0, [r6, #0]
10004a54:	18c9      	adds	r1, r1, r3
10004a56:	3018      	adds	r0, #24
10004a58:	b289      	uxth	r1, r1
10004a5a:	f7ff fc0f 	bl	1000427c <optiga_common_set_uint16>
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                //length
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004a5e:	6830      	ldr	r0, [r6, #0]
10004a60:	1c29      	adds	r1, r5, #0
10004a62:	301a      	adds	r0, #26
10004a64:	f7ff fc0a 	bl	1000427c <optiga_common_set_uint16>
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004a68:	230f      	movs	r3, #15
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
10004a6a:	8820      	ldrh	r0, [r4, #0]
10004a6c:	4a2c      	ldr	r2, [pc, #176]	; (10004b20 <optiga_cmd_get_data_object_handler+0x104>)
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
10004a6e:	2181      	movs	r1, #129	; 0x81
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
10004a70:	4290      	cmp	r0, r2
10004a72:	d100      	bne.n	10004a76 <optiga_cmd_get_data_object_handler+0x5a>
            {
                cmd = CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
10004a74:	3980      	subs	r1, #128	; 0x80
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
10004a76:	6832      	ldr	r2, [r6, #0]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
10004a78:	7e30      	ldrb	r0, [r6, #24]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004a7a:	7491      	strb	r1, [r2, #18]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
10004a7c:	1c19      	adds	r1, r3, #0
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004a7e:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004a80:	2000      	movs	r0, #0
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
10004a82:	3909      	subs	r1, #9
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004a84:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004a86:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(cmd,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
10004a88:	6832      	ldr	r2, [r6, #0]
10004a8a:	3b05      	subs	r3, #5
10004a8c:	8093      	strh	r3, [r2, #4]
            p_optiga_read_data->last_read_size = size_to_read;
10004a8e:	8125      	strh	r5, [r4, #8]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
10004a90:	e043      	b.n	10004b1a <optiga_cmd_get_data_object_handler+0xfe>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
            me->chaining_ongoing = FALSE;
10004a92:	2300      	movs	r3, #0
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004a94:	6801      	ldr	r1, [r0, #0]
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
            me->chaining_ongoing = FALSE;
10004a96:	75c3      	strb	r3, [r0, #23]
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004a98:	7c8d      	ldrb	r5, [r1, #18]
10004a9a:	429d      	cmp	r5, r3
10004a9c:	d00e      	beq.n	10004abc <optiga_cmd_get_data_object_handler+0xa0>
10004a9e:	7f01      	ldrb	r1, [r0, #28]
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                //check if it is out of boundary issue
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
10004aa0:	88e2      	ldrh	r2, [r4, #6]
10004aa2:	337f      	adds	r3, #127	; 0x7f
                {
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
10004aa4:	400b      	ands	r3, r1
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                //check if it is out of boundary issue
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
10004aa6:	2a00      	cmp	r2, #0
10004aa8:	d004      	beq.n	10004ab4 <optiga_cmd_get_data_object_handler+0x98>
                {
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
10004aaa:	2280      	movs	r2, #128	; 0x80
10004aac:	4252      	negs	r2, r2
10004aae:	4313      	orrs	r3, r2
10004ab0:	7703      	strb	r3, [r0, #28]
10004ab2:	e031      	b.n	10004b18 <optiga_cmd_get_data_object_handler+0xfc>
                }
                //flag used to setting the received buffer length to 0, in case unexpected error
                else
                {
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10004ab4:	7703      	strb	r3, [r0, #28]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
10004ab6:	68e3      	ldr	r3, [r4, #12]
10004ab8:	801a      	strh	r2, [r3, #0]
10004aba:	e02d      	b.n	10004b18 <optiga_cmd_get_data_object_handler+0xfc>
                }
                return_status = OPTIGA_CMD_ERROR;
            }
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
10004abc:	8bc2      	ldrh	r2, [r0, #30]
10004abe:	4b19      	ldr	r3, [pc, #100]	; (10004b24 <optiga_cmd_get_data_object_handler+0x108>)
10004ac0:	429a      	cmp	r2, r3
10004ac2:	d103      	bne.n	10004acc <optiga_cmd_get_data_object_handler+0xb0>
            {
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
10004ac4:	88e2      	ldrh	r2, [r4, #6]
10004ac6:	68e3      	ldr	r3, [r4, #12]
10004ac8:	801a      	strh	r2, [r3, #0]
10004aca:	e023      	b.n	10004b14 <optiga_cmd_get_data_object_handler+0xf8>
                return_status = OPTIGA_LIB_SUCCESS;
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
10004acc:	88cf      	ldrh	r7, [r1, #6]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
10004ace:	88a3      	ldrh	r3, [r4, #4]
                return_status = OPTIGA_LIB_SUCCESS;
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
10004ad0:	3f04      	subs	r7, #4
10004ad2:	b2bf      	uxth	r7, r7

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
10004ad4:	42bb      	cmp	r3, r7
10004ad6:	d204      	bcs.n	10004ae2 <optiga_cmd_get_data_object_handler+0xc6>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10004ad8:	2081      	movs	r0, #129	; 0x81
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
10004ada:	68e3      	ldr	r3, [r4, #12]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10004adc:	0080      	lsls	r0, r0, #2
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
10004ade:	801d      	strh	r5, [r3, #0]
                    break;
10004ae0:	e01b      	b.n	10004b1a <optiga_cmd_get_data_object_handler+0xfe>
                }

                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
10004ae2:	6923      	ldr	r3, [r4, #16]
10004ae4:	88e0      	ldrh	r0, [r4, #6]
10004ae6:	1c3a      	adds	r2, r7, #0
10004ae8:	1818      	adds	r0, r3, r0
10004aea:	3116      	adds	r1, #22
10004aec:	f007 fb9f 	bl	1000c22e <memcpy>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
10004af0:	88e3      	ldrh	r3, [r4, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
10004af2:	8922      	ldrh	r2, [r4, #8]
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
10004af4:	18fb      	adds	r3, r7, r3
10004af6:	b29b      	uxth	r3, r3
10004af8:	80e3      	strh	r3, [r4, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
10004afa:	42ba      	cmp	r2, r7
10004afc:	d802      	bhi.n	10004b04 <optiga_cmd_get_data_object_handler+0xe8>
10004afe:	88a2      	ldrh	r2, [r4, #4]
10004b00:	429a      	cmp	r2, r3
10004b02:	d105      	bne.n	10004b10 <optiga_cmd_get_data_object_handler+0xf4>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
                    p_optiga_read_data->accumulated_size = 0;
10004b04:	2000      	movs	r0, #0
                p_optiga_read_data->accumulated_size += data_read;

                if ((p_optiga_read_data->last_read_size > data_read) ||
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
10004b06:	68e2      	ldr	r2, [r4, #12]
10004b08:	8013      	strh	r3, [r2, #0]
                    p_optiga_read_data->accumulated_size = 0;
10004b0a:	80e0      	strh	r0, [r4, #6]
                    p_optiga_read_data->last_read_size = 0;
10004b0c:	8120      	strh	r0, [r4, #8]
10004b0e:	e004      	b.n	10004b1a <optiga_cmd_get_data_object_handler+0xfe>
                }
                else
                {
                    me->chaining_ongoing = TRUE;
10004b10:	2301      	movs	r3, #1
10004b12:	75f3      	strb	r3, [r6, #23]
                }
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
                return_status = OPTIGA_LIB_SUCCESS;
10004b14:	1c28      	adds	r0, r5, #0
10004b16:	e000      	b.n	10004b1a <optiga_cmd_get_data_object_handler+0xfe>
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10004b18:	4803      	ldr	r0, [pc, #12]	; (10004b28 <optiga_cmd_get_data_object_handler+0x10c>)
        default:
            break;
    }

    return (return_status);
}
10004b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10004b1c:	00000611 	.word	0x00000611
10004b20:	0000f1c2 	.word	0x0000f1c2
10004b24:	00008008 	.word	0x00008008
10004b28:	00000202 	.word	0x00000202

10004b2c <optiga_cmd_set_data_object_handler>:

/*
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
10004b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
10004b2e:	7d83      	ldrb	r3, [r0, #22]
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
10004b30:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
10004b32:	2b08      	cmp	r3, #8
10004b34:	d002      	beq.n	10004b3c <optiga_cmd_set_data_object_handler+0x10>
10004b36:	2b09      	cmp	r3, #9
10004b38:	d049      	beq.n	10004bce <optiga_cmd_set_data_object_handler+0xa2>
10004b3a:	e050      	b.n	10004bde <optiga_cmd_set_data_object_handler+0xb2>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending set data command...");
            me->chaining_ongoing = FALSE;
10004b3c:	2300      	movs	r3, #0
10004b3e:	1c04      	adds	r4, r0, #0
10004b40:	75c3      	strb	r3, [r0, #23]
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004b42:	6800      	ldr	r0, [r0, #0]
10004b44:	8829      	ldrh	r1, [r5, #0]
10004b46:	3016      	adds	r0, #22
10004b48:	f7ff fb98 	bl	1000427c <optiga_common_set_uint16>
                                     p_optiga_write_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            //offset
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004b4c:	886b      	ldrh	r3, [r5, #2]
10004b4e:	88e9      	ldrh	r1, [r5, #6]
10004b50:	6820      	ldr	r0, [r4, #0]
10004b52:	18c9      	adds	r1, r1, r3
10004b54:	3018      	adds	r0, #24
10004b56:	b289      	uxth	r1, r1
10004b58:	f7ff fb90 	bl	1000427c <optiga_common_set_uint16>
                                     (p_optiga_write_data->offset + p_optiga_write_data->written_size));
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // Check maximum size that can be written, based on optiga comms buffer size
            size_to_send = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE + OPTIGA_COMMS_DATA_OFFSET - index_for_data),
10004b5c:	88eb      	ldrh	r3, [r5, #6]
10004b5e:	88aa      	ldrh	r2, [r5, #4]
10004b60:	1ad2      	subs	r2, r2, r3
10004b62:	4b21      	ldr	r3, [pc, #132]	; (10004be8 <optiga_cmd_set_data_object_handler+0xbc>)
10004b64:	429a      	cmp	r2, r3
10004b66:	dd00      	ble.n	10004b6a <optiga_cmd_set_data_object_handler+0x3e>
10004b68:	1c1a      	adds	r2, r3, #0
10004b6a:	b297      	uxth	r7, r2
                               ((p_optiga_write_data->size) - p_optiga_write_data->written_size));

            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
10004b6c:	1c3e      	adds	r6, r7, #0
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10004b6e:	4b1f      	ldr	r3, [pc, #124]	; (10004bec <optiga_cmd_set_data_object_handler+0xc0>)
            // Check maximum size that can be written, based on optiga comms buffer size
            size_to_send = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE + OPTIGA_COMMS_DATA_OFFSET - index_for_data),
                               ((p_optiga_write_data->size) - p_optiga_write_data->written_size));

            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
10004b70:	3608      	adds	r6, #8
10004b72:	b2b6      	uxth	r6, r6
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10004b74:	429e      	cmp	r6, r3
10004b76:	d834      	bhi.n	10004be2 <optiga_cmd_set_data_object_handler+0xb6>
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004b78:	2082      	movs	r0, #130	; 0x82
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
10004b7a:	7e23      	ldrb	r3, [r4, #24]
10004b7c:	1d39      	adds	r1, r7, #4
10004b7e:	9301      	str	r3, [sp, #4]
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10004b80:	6823      	ldr	r3, [r4, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
10004b82:	b289      	uxth	r1, r1
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004b84:	7498      	strb	r0, [r3, #18]
    p_apdu_buffer [1] = param;
10004b86:	4668      	mov	r0, sp
10004b88:	7900      	ldrb	r0, [r0, #4]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004b8a:	7559      	strb	r1, [r3, #21]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004b8c:	74d8      	strb	r0, [r3, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004b8e:	0a08      	lsrs	r0, r1, #8
10004b90:	7518      	strb	r0, [r3, #20]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
            //data to be written
            if (OPTIGA_UTIL_COUNT_DATA_OBJECT == me->cmd_param)
10004b92:	7e23      	ldrb	r3, [r4, #24]
10004b94:	6820      	ldr	r0, [r4, #0]
10004b96:	2b02      	cmp	r3, #2
10004b98:	d102      	bne.n	10004ba0 <optiga_cmd_set_data_object_handler+0x74>
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
10004b9a:	7bab      	ldrb	r3, [r5, #14]
10004b9c:	7683      	strb	r3, [r0, #26]
10004b9e:	e006      	b.n	10004bae <optiga_cmd_set_data_object_handler+0x82>
            }
            else
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10004ba0:	88e9      	ldrh	r1, [r5, #6]
10004ba2:	68ab      	ldr	r3, [r5, #8]
10004ba4:	301a      	adds	r0, #26
10004ba6:	b292      	uxth	r2, r2
10004ba8:	1859      	adds	r1, r3, r1
10004baa:	f007 fb40 	bl	1000c22e <memcpy>
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
10004bae:	88eb      	ldrh	r3, [r5, #6]

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
10004bb0:	6822      	ldr	r2, [r4, #0]
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
10004bb2:	18fb      	adds	r3, r7, r3
10004bb4:	b29b      	uxth	r3, r3
10004bb6:	80eb      	strh	r3, [r5, #6]

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
10004bb8:	8096      	strh	r6, [r2, #4]

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
10004bba:	88aa      	ldrh	r2, [r5, #4]
10004bbc:	429a      	cmp	r2, r3
10004bbe:	d101      	bne.n	10004bc4 <optiga_cmd_set_data_object_handler+0x98>
            {
                me->chaining_ongoing = TRUE;
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = CMD_WRITE_ONLY;
            }
            return_status = OPTIGA_LIB_SUCCESS;
10004bc0:	2000      	movs	r0, #0
10004bc2:	e010      	b.n	10004be6 <optiga_cmd_set_data_object_handler+0xba>
            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
            {
                me->chaining_ongoing = TRUE;
10004bc4:	2301      	movs	r3, #1
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = CMD_WRITE_ONLY;
10004bc6:	2000      	movs	r0, #0
            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
            {
                me->chaining_ongoing = TRUE;
10004bc8:	75e3      	strb	r3, [r4, #23]
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = CMD_WRITE_ONLY;
10004bca:	7620      	strb	r0, [r4, #24]
10004bcc:	e00b      	b.n	10004be6 <optiga_cmd_set_data_object_handler+0xba>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for set data command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004bce:	6803      	ldr	r3, [r0, #0]
10004bd0:	7c9b      	ldrb	r3, [r3, #18]
10004bd2:	2b00      	cmp	r3, #0
10004bd4:	d0f4      	beq.n	10004bc0 <optiga_cmd_set_data_object_handler+0x94>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10004bd6:	237f      	movs	r3, #127	; 0x7f
10004bd8:	7f02      	ldrb	r2, [r0, #28]
10004bda:	4013      	ands	r3, r2
10004bdc:	7703      	strb	r3, [r0, #28]
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10004bde:	4804      	ldr	r0, [pc, #16]	; (10004bf0 <optiga_cmd_set_data_object_handler+0xc4>)
10004be0:	e001      	b.n	10004be6 <optiga_cmd_set_data_object_handler+0xba>
            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10004be2:	2081      	movs	r0, #129	; 0x81
10004be4:	0080      	lsls	r0, r0, #2
        break;
        default:
            break;
    }
    return (return_status);
}
10004be6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10004be8:	0000060d 	.word	0x0000060d
10004bec:	00000615 	.word	0x00000615
10004bf0:	00000202 	.word	0x00000202

10004bf4 <optiga_cmd_get_random_handler>:
#if defined (OPTIGA_CRYPT_RANDOM_ENABLED) || defined (OPTIGA_CRYPT_RSA_PRE_MASTER_SECRET_ENABLED)
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
10004bf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10004bf6:	466b      	mov	r3, sp
10004bf8:	1d9d      	adds	r5, r3, #6
10004bfa:	2309      	movs	r3, #9
10004bfc:	802b      	strh	r3, [r5, #0]

    switch ((uint8_t)me->cmd_next_execution_state)
10004bfe:	7d83      	ldrb	r3, [r0, #22]
#if defined (OPTIGA_CRYPT_RANDOM_ENABLED) || defined (OPTIGA_CRYPT_RSA_PRE_MASTER_SECRET_ENABLED)
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
10004c00:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
10004c02:	6886      	ldr	r6, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
10004c04:	2b08      	cmp	r3, #8
10004c06:	d002      	beq.n	10004c0e <optiga_cmd_get_random_handler+0x1a>
10004c08:	2b09      	cmp	r3, #9
10004c0a:	d04a      	beq.n	10004ca2 <optiga_cmd_get_random_handler+0xae>
10004c0c:	e05c      	b.n	10004cc8 <optiga_cmd_get_random_handler+0xd4>
            OPTIGA_CMD_LOG_MESSAGE("Sending get random command...");
            /// APDU header size + length of random
            /// OID size in case of param 0x04
            /// 0x41, Length and prepending optional data
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            total_apdu_length += ((CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == (uint8_t)me->cmd_param) ?
10004c0e:	7e02      	ldrb	r2, [r0, #24]
10004c10:	2300      	movs	r3, #0
10004c12:	2a04      	cmp	r2, #4
10004c14:	d102      	bne.n	10004c1c <optiga_cmd_get_random_handler+0x28>
10004c16:	8873      	ldrh	r3, [r6, #2]
10004c18:	3305      	adds	r3, #5
10004c1a:	b29b      	uxth	r3, r3
10004c1c:	3306      	adds	r3, #6
                                (OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_APDU_TL_LENGTH + p_random_params->optional_data_length) : 0x00);

            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10004c1e:	4a2d      	ldr	r2, [pc, #180]	; (10004cd4 <optiga_cmd_get_random_handler+0xe0>)
10004c20:	b29b      	uxth	r3, r3
10004c22:	4293      	cmp	r3, r2
10004c24:	d852      	bhi.n	10004ccc <optiga_cmd_get_random_handler+0xd8>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            /// Copy the random data length
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004c26:	6820      	ldr	r0, [r4, #0]
10004c28:	8831      	ldrh	r1, [r6, #0]
10004c2a:	3016      	adds	r0, #22
10004c2c:	f7ff fb26 	bl	1000427c <optiga_common_set_uint16>
                                     p_random_params->random_data_length);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004c30:	8828      	ldrh	r0, [r5, #0]
10004c32:	3002      	adds	r0, #2
10004c34:	b280      	uxth	r0, r0
10004c36:	8028      	strh	r0, [r5, #0]

            if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == (uint8_t)me->cmd_param)
10004c38:	7e23      	ldrb	r3, [r4, #24]
10004c3a:	2b04      	cmp	r3, #4
10004c3c:	d120      	bne.n	10004c80 <optiga_cmd_get_random_handler+0x8c>
            {
                /// Copy the data to buffer
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
10004c3e:	6823      	ldr	r3, [r4, #0]
10004c40:	8aa1      	ldrh	r1, [r4, #20]
10004c42:	1818      	adds	r0, r3, r0
10004c44:	300d      	adds	r0, #13
10004c46:	f7ff fb19 	bl	1000427c <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004c4a:	882b      	ldrh	r3, [r5, #0]

                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header(CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
10004c4c:	68b1      	ldr	r1, [r6, #8]

            if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == (uint8_t)me->cmd_param)
            {
                /// Copy the data to buffer
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004c4e:	3302      	adds	r3, #2
10004c50:	802b      	strh	r3, [r5, #0]

                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header(CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
10004c52:	2900      	cmp	r1, #0
10004c54:	d000      	beq.n	10004c58 <optiga_cmd_get_random_handler+0x64>
10004c56:	8871      	ldrh	r1, [r6, #2]
                                              ((NULL != p_random_params->optional_data) ?
                                                p_random_params->optional_data_length : 0x0000),
                                              me->p_optiga->optiga_comms_buffer,
10004c58:	6822      	ldr	r2, [r4, #0]
                /// Copy the data to buffer
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header(CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
10004c5a:	2041      	movs	r0, #65	; 0x41
                                              ((NULL != p_random_params->optional_data) ?
                                                p_random_params->optional_data_length : 0x0000),
                                              me->p_optiga->optiga_comms_buffer,
10004c5c:	320d      	adds	r2, #13
                /// Copy the data to buffer
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header(CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
10004c5e:	1c2b      	adds	r3, r5, #0
10004c60:	f7ff fc9a 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              ((NULL != p_random_params->optional_data) ?
                                                p_random_params->optional_data_length : 0x0000),
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                if ((NULL != p_random_params->optional_data))
10004c64:	68b1      	ldr	r1, [r6, #8]
10004c66:	2900      	cmp	r1, #0
10004c68:	d00a      	beq.n	10004c80 <optiga_cmd_get_random_handler+0x8c>
                {
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
10004c6a:	6823      	ldr	r3, [r4, #0]
10004c6c:	8828      	ldrh	r0, [r5, #0]
10004c6e:	8872      	ldrh	r2, [r6, #2]
10004c70:	1818      	adds	r0, r3, r0
10004c72:	300d      	adds	r0, #13
10004c74:	f007 fadb 	bl	1000c22e <memcpy>
                                  p_random_params->optional_data_length);
                    index_for_data += p_random_params->optional_data_length;
10004c78:	8872      	ldrh	r2, [r6, #2]
10004c7a:	882b      	ldrh	r3, [r5, #0]
10004c7c:	18d3      	adds	r3, r2, r3
10004c7e:	802b      	strh	r3, [r5, #0]
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
10004c80:	882b      	ldrh	r3, [r5, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004c82:	258c      	movs	r5, #140	; 0x8c
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
                                  p_random_params->optional_data_length);
                    index_for_data += p_random_params->optional_data_length;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
10004c84:	1c19      	adds	r1, r3, #0
10004c86:	7e20      	ldrb	r0, [r4, #24]
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10004c88:	6822      	ldr	r2, [r4, #0]
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
                                  p_random_params->optional_data_length);
                    index_for_data += p_random_params->optional_data_length;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
10004c8a:	3909      	subs	r1, #9
10004c8c:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004c8e:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004c90:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004c92:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004c94:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004c96:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
10004c98:	6822      	ldr	r2, [r4, #0]
10004c9a:	3b05      	subs	r3, #5
10004c9c:	8093      	strh	r3, [r2, #4]

            return_status = OPTIGA_LIB_SUCCESS;
10004c9e:	2400      	movs	r4, #0
        }
        break;
10004ca0:	e016      	b.n	10004cd0 <optiga_cmd_get_random_handler+0xdc>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for get random command...");
            // check if the random data retrieval app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004ca2:	6801      	ldr	r1, [r0, #0]
10004ca4:	7c8b      	ldrb	r3, [r1, #18]
10004ca6:	2b00      	cmp	r3, #0
10004ca8:	d004      	beq.n	10004cb4 <optiga_cmd_get_random_handler+0xc0>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing get random response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10004caa:	237f      	movs	r3, #127	; 0x7f
10004cac:	7f02      	ldrb	r2, [r0, #28]
10004cae:	4013      	ands	r3, r2
10004cb0:	7703      	strb	r3, [r0, #28]
10004cb2:	e009      	b.n	10004cc8 <optiga_cmd_get_random_handler+0xd4>
                break;
            }
            if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET != (uint8_t)me->cmd_param)
10004cb4:	7e02      	ldrb	r2, [r0, #24]
                pal_os_memcpy(p_random_params->random_data,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              p_random_params->random_data_length);
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of get random command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
10004cb6:	1c1c      	adds	r4, r3, #0
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing get random response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET != (uint8_t)me->cmd_param)
10004cb8:	2a04      	cmp	r2, #4
10004cba:	d009      	beq.n	10004cd0 <optiga_cmd_get_random_handler+0xdc>
            {
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_random_params->random_data,
10004cbc:	6870      	ldr	r0, [r6, #4]
10004cbe:	8832      	ldrh	r2, [r6, #0]
10004cc0:	3116      	adds	r1, #22
10004cc2:	f007 fab4 	bl	1000c22e <memcpy>
10004cc6:	e003      	b.n	10004cd0 <optiga_cmd_get_random_handler+0xdc>
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10004cc8:	4c03      	ldr	r4, [pc, #12]	; (10004cd8 <optiga_cmd_get_random_handler+0xe4>)
10004cca:	e001      	b.n	10004cd0 <optiga_cmd_get_random_handler+0xdc>
            total_apdu_length += ((CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == (uint8_t)me->cmd_param) ?
                                (OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_APDU_TL_LENGTH + p_random_params->optional_data_length) : 0x00);

            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10004ccc:	2481      	movs	r4, #129	; 0x81
10004cce:	00a4      	lsls	r4, r4, #2
        default:
            break;
    }

    return (return_status);
}
10004cd0:	1c20      	adds	r0, r4, #0
10004cd2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10004cd4:	00000615 	.word	0x00000615
10004cd8:	00000202 	.word	0x00000202

10004cdc <optiga_cmd_calc_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_SIGN_ENABLED) || defined (OPTIGA_CRYPT_RSA_SIGN_ENABLED)
/*
* CalcSign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
10004cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t private_key_oid;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10004cde:	466b      	mov	r3, sp
10004ce0:	1d9d      	adds	r5, r3, #6
10004ce2:	2309      	movs	r3, #9
10004ce4:	802b      	strh	r3, [r5, #0]

    switch ((uint8_t)me->cmd_next_execution_state)
10004ce6:	7d83      	ldrb	r3, [r0, #22]
#if defined (OPTIGA_CRYPT_ECDSA_SIGN_ENABLED) || defined (OPTIGA_CRYPT_RSA_SIGN_ENABLED)
/*
* CalcSign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
10004ce8:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
10004cea:	6886      	ldr	r6, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t private_key_oid;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
10004cec:	2b08      	cmp	r3, #8
10004cee:	d002      	beq.n	10004cf6 <optiga_cmd_calc_sign_handler+0x1a>
10004cf0:	2b09      	cmp	r3, #9
10004cf2:	d035      	beq.n	10004d60 <optiga_cmd_calc_sign_handler+0x84>
10004cf4:	e050      	b.n	10004d98 <optiga_cmd_calc_sign_handler+0xbc>
                break;
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(CMD_SIGN_DIGEST_TAG,
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
10004cf6:	6802      	ldr	r2, [r0, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
                break;
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(CMD_SIGN_DIGEST_TAG,
10004cf8:	7bb1      	ldrb	r1, [r6, #14]
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
10004cfa:	320d      	adds	r2, #13
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
                break;
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(CMD_SIGN_DIGEST_TAG,
10004cfc:	2001      	movs	r0, #1
10004cfe:	1c2b      	adds	r3, r5, #0
10004d00:	f7ff fc4a 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //Digest data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10004d04:	6823      	ldr	r3, [r4, #0]
10004d06:	8828      	ldrh	r0, [r5, #0]
10004d08:	7bb2      	ldrb	r2, [r6, #14]
10004d0a:	1818      	adds	r0, r3, r0
10004d0c:	6831      	ldr	r1, [r6, #0]
10004d0e:	300d      	adds	r0, #13
10004d10:	f007 fa8d 	bl	1000c22e <memcpy>
                          p_optiga_ecdsa_sign->p_digest,
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;
10004d14:	7bb2      	ldrb	r2, [r6, #14]
10004d16:	882b      	ldrh	r3, [r5, #0]

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(CMD_SIGN_OID_TAG,
10004d18:	2102      	movs	r1, #2
            //Digest data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_ecdsa_sign->p_digest,
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;
10004d1a:	18d3      	adds	r3, r2, r3

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(CMD_SIGN_OID_TAG,
                                          CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
10004d1c:	6822      	ldr	r2, [r4, #0]
            //Digest data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_ecdsa_sign->p_digest,
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;
10004d1e:	802b      	strh	r3, [r5, #0]

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(CMD_SIGN_OID_TAG,
                                          CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
10004d20:	320d      	adds	r2, #13
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(CMD_SIGN_OID_TAG,
10004d22:	1c2b      	adds	r3, r5, #0
10004d24:	2003      	movs	r0, #3
10004d26:	f7ff fc37 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //oid
            private_key_oid = me->session_oid;
            if (OPTIGA_KEY_ID_SESSION_BASED != p_optiga_ecdsa_sign->private_key_oid)
10004d2a:	89b3      	ldrh	r3, [r6, #12]
            optiga_cmd_prepare_tag_header(CMD_SIGN_OID_TAG,
                                          CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //oid
            private_key_oid = me->session_oid;
10004d2c:	8aa1      	ldrh	r1, [r4, #20]
            if (OPTIGA_KEY_ID_SESSION_BASED != p_optiga_ecdsa_sign->private_key_oid)
10004d2e:	2b00      	cmp	r3, #0
10004d30:	d000      	beq.n	10004d34 <optiga_cmd_calc_sign_handler+0x58>
10004d32:	1c19      	adds	r1, r3, #0
            {
                private_key_oid = (uint16_t)p_optiga_ecdsa_sign->private_key_oid;
            }
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004d34:	8828      	ldrh	r0, [r5, #0]
10004d36:	6823      	ldr	r3, [r4, #0]
10004d38:	1818      	adds	r0, r3, r0
10004d3a:	300d      	adds	r0, #13
10004d3c:	f7ff fa9e 	bl	1000427c <optiga_common_set_uint16>
                                     private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004d40:	882b      	ldrh	r3, [r5, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004d42:	25b1      	movs	r5, #177	; 0xb1
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
10004d44:	7e20      	ldrb	r0, [r4, #24]
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10004d46:	6822      	ldr	r2, [r4, #0]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
10004d48:	1fd9      	subs	r1, r3, #7
10004d4a:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004d4c:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004d4e:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004d50:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004d52:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004d54:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10004d56:	6822      	ldr	r2, [r4, #0]
10004d58:	3b03      	subs	r3, #3
10004d5a:	8093      	strh	r3, [r2, #4]
            return_status = OPTIGA_LIB_SUCCESS;
10004d5c:	2000      	movs	r0, #0
        }
        break;
10004d5e:	e01c      	b.n	10004d9a <optiga_cmd_calc_sign_handler+0xbe>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004d60:	6801      	ldr	r1, [r0, #0]
10004d62:	7c8d      	ldrb	r5, [r1, #18]
10004d64:	2d00      	cmp	r5, #0
10004d66:	d110      	bne.n	10004d8a <optiga_cmd_calc_sign_handler+0xae>
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
10004d68:	68b3      	ldr	r3, [r6, #8]
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
10004d6a:	88ca      	ldrh	r2, [r1, #6]
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
10004d6c:	8818      	ldrh	r0, [r3, #0]
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
10004d6e:	3a04      	subs	r2, #4
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
10004d70:	4290      	cmp	r0, r2
10004d72:	da03      	bge.n	10004d7c <optiga_cmd_calc_sign_handler+0xa0>
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                    *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10004d74:	2081      	movs	r0, #129	; 0x81
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                    *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
10004d76:	801d      	strh	r5, [r3, #0]
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10004d78:	0080      	lsls	r0, r0, #2
10004d7a:	e00e      	b.n	10004d9a <optiga_cmd_calc_sign_handler+0xbe>
                }
                else
                {
                    *(p_optiga_ecdsa_sign->p_signature_length) = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
10004d7c:	b292      	uxth	r2, r2
10004d7e:	801a      	strh	r2, [r3, #0]
                    //copy signed data from optiga comms buffer to user provided buffer

                    pal_os_memcpy(p_optiga_ecdsa_sign->p_signature,
10004d80:	6870      	ldr	r0, [r6, #4]
10004d82:	3116      	adds	r1, #22
10004d84:	f007 fa53 	bl	1000c22e <memcpy>
10004d88:	e7e8      	b.n	10004d5c <optiga_cmd_calc_sign_handler+0x80>
                }
            }
            else
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10004d8a:	237f      	movs	r3, #127	; 0x7f
10004d8c:	7f02      	ldrb	r2, [r0, #28]
10004d8e:	4013      	ands	r3, r2
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
10004d90:	2200      	movs	r2, #0
                }
            }
            else
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10004d92:	7703      	strb	r3, [r0, #28]
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
10004d94:	68b3      	ldr	r3, [r6, #8]
10004d96:	801a      	strh	r2, [r3, #0]
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10004d98:	4800      	ldr	r0, [pc, #0]	; (10004d9c <optiga_cmd_calc_sign_handler+0xc0>)
        default:
            break;
    }

    return (return_status);
}
10004d9a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10004d9c:	00000202 	.word	0x00000202

10004da0 <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
10004da0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10004da2:	466b      	mov	r3, sp
10004da4:	1d9c      	adds	r4, r3, #6
10004da6:	2309      	movs	r3, #9
10004da8:	8023      	strh	r3, [r4, #0]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
10004daa:	7d83      	ldrb	r3, [r0, #22]
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
10004dac:	1c05      	adds	r5, r0, #0
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
10004dae:	6886      	ldr	r6, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
10004db0:	2b08      	cmp	r3, #8
10004db2:	d003      	beq.n	10004dbc <optiga_cmd_verify_sign_handler+0x1c>
10004db4:	2b09      	cmp	r3, #9
10004db6:	d100      	bne.n	10004dba <optiga_cmd_verify_sign_handler+0x1a>
10004db8:	e082      	b.n	10004ec0 <optiga_cmd_verify_sign_handler+0x120>
10004dba:	e08a      	b.n	10004ed2 <optiga_cmd_verify_sign_handler+0x132>
10004dbc:	89b2      	ldrh	r2, [r6, #12]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + p_optiga_verify_sign->digest_length +
10004dbe:	7bb0      	ldrb	r0, [r6, #14]
10004dc0:	320a      	adds	r2, #10
10004dc2:	7931      	ldrb	r1, [r6, #4]
10004dc4:	b292      	uxth	r2, r2
10004dc6:	2305      	movs	r3, #5
10004dc8:	2800      	cmp	r0, #0
10004dca:	d003      	beq.n	10004dd4 <optiga_cmd_verify_sign_handler+0x34>
10004dcc:	6933      	ldr	r3, [r6, #16]
10004dce:	889b      	ldrh	r3, [r3, #4]
10004dd0:	3309      	adds	r3, #9
10004dd2:	b29b      	uxth	r3, r3
10004dd4:	1852      	adds	r2, r2, r1
10004dd6:	189b      	adds	r3, r3, r2
                                    OPTIGA_CMD_APDU_TL_LENGTH + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
                                     (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_APDU_TL_LENGTH +
                                     p_optiga_verify_sign->public_key->length));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10004dd8:	4a40      	ldr	r2, [pc, #256]	; (10004edc <optiga_cmd_verify_sign_handler+0x13c>)
10004dda:	b29b      	uxth	r3, r3
10004ddc:	4293      	cmp	r3, r2
10004dde:	d900      	bls.n	10004de2 <optiga_cmd_verify_sign_handler+0x42>
10004de0:	e079      	b.n	10004ed6 <optiga_cmd_verify_sign_handler+0x136>
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_DIGEST_TAG,
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
10004de2:	682a      	ldr	r2, [r5, #0]
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_DIGEST_TAG,
10004de4:	2001      	movs	r0, #1
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
10004de6:	320d      	adds	r2, #13
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_DIGEST_TAG,
10004de8:	1c23      	adds	r3, r4, #0
10004dea:	f7ff fbd5 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10004dee:	682b      	ldr	r3, [r5, #0]
10004df0:	8820      	ldrh	r0, [r4, #0]
10004df2:	7932      	ldrb	r2, [r6, #4]
10004df4:	1818      	adds	r0, r3, r0
10004df6:	6831      	ldr	r1, [r6, #0]
10004df8:	300d      	adds	r0, #13
10004dfa:	f007 fa18 	bl	1000c22e <memcpy>
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
10004dfe:	7932      	ldrb	r2, [r6, #4]
10004e00:	8823      	ldrh	r3, [r4, #0]

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_SIGNATURE_TAG,
10004e02:	2002      	movs	r0, #2
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
10004e04:	18d3      	adds	r3, r2, r3

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_SIGNATURE_TAG,
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
10004e06:	682a      	ldr	r2, [r5, #0]
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
10004e08:	8023      	strh	r3, [r4, #0]

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_SIGNATURE_TAG,
10004e0a:	89b1      	ldrh	r1, [r6, #12]
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
10004e0c:	320d      	adds	r2, #13
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_SIGNATURE_TAG,
10004e0e:	1c23      	adds	r3, r4, #0
10004e10:	f7ff fbc2 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10004e14:	682b      	ldr	r3, [r5, #0]
10004e16:	8820      	ldrh	r0, [r4, #0]
10004e18:	89b2      	ldrh	r2, [r6, #12]
10004e1a:	1818      	adds	r0, r3, r0
10004e1c:	300d      	adds	r0, #13
10004e1e:	68b1      	ldr	r1, [r6, #8]
10004e20:	f007 fa05 	bl	1000c22e <memcpy>
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;
10004e24:	89b2      	ldrh	r2, [r6, #12]
10004e26:	8823      	ldrh	r3, [r4, #0]
10004e28:	18d3      	adds	r3, r2, r3
10004e2a:	8023      	strh	r3, [r4, #0]
10004e2c:	682a      	ldr	r2, [r5, #0]

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
10004e2e:	7bb3      	ldrb	r3, [r6, #14]
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
10004e30:	320d      	adds	r2, #13
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
10004e32:	2b00      	cmp	r3, #0
10004e34:	d10e      	bne.n	10004e54 <optiga_cmd_verify_sign_handler+0xb4>
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
10004e36:	2004      	movs	r0, #4
10004e38:	2102      	movs	r1, #2
10004e3a:	1c23      	adds	r3, r4, #0
10004e3c:	f7ff fbac 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10004e40:	682b      	ldr	r3, [r5, #0]
10004e42:	8820      	ldrh	r0, [r4, #0]
10004e44:	8ab1      	ldrh	r1, [r6, #20]
10004e46:	1818      	adds	r0, r3, r0
10004e48:	300d      	adds	r0, #13
10004e4a:	f7ff fa17 	bl	1000427c <optiga_common_set_uint16>
                                         p_optiga_verify_sign->certificate_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004e4e:	8823      	ldrh	r3, [r4, #0]
10004e50:	3302      	adds	r3, #2
10004e52:	e021      	b.n	10004e98 <optiga_cmd_verify_sign_handler+0xf8>
            }
            else
            {
                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(CMD_VERIFY_ALGO_ID_TAG,
10004e54:	2005      	movs	r0, #5
10004e56:	2101      	movs	r1, #1
10004e58:	1c23      	adds	r3, r4, #0
10004e5a:	f7ff fb9d 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
10004e5e:	8823      	ldrh	r3, [r4, #0]
10004e60:	6829      	ldr	r1, [r5, #0]
10004e62:	1c5a      	adds	r2, r3, #1
10004e64:	8022      	strh	r2, [r4, #0]
10004e66:	6932      	ldr	r2, [r6, #16]
10004e68:	18cb      	adds	r3, r1, r3
10004e6a:	7992      	ldrb	r2, [r2, #6]

                optiga_cmd_prepare_tag_header(CMD_VERIFY_PUBLIC_KEY_TAG,
10004e6c:	2006      	movs	r0, #6
                optiga_cmd_prepare_tag_header(CMD_VERIFY_ALGO_ID_TAG,
                                              CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
10004e6e:	735a      	strb	r2, [r3, #13]

                optiga_cmd_prepare_tag_header(CMD_VERIFY_PUBLIC_KEY_TAG,
10004e70:	6933      	ldr	r3, [r6, #16]
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
10004e72:	682a      	ldr	r2, [r5, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(CMD_VERIFY_PUBLIC_KEY_TAG,
10004e74:	8899      	ldrh	r1, [r3, #4]
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
10004e76:	320d      	adds	r2, #13
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(CMD_VERIFY_PUBLIC_KEY_TAG,
10004e78:	1c23      	adds	r3, r4, #0
10004e7a:	f7ff fb8d 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10004e7e:	682a      	ldr	r2, [r5, #0]
10004e80:	8820      	ldrh	r0, [r4, #0]
10004e82:	6933      	ldr	r3, [r6, #16]
10004e84:	1810      	adds	r0, r2, r0
10004e86:	6819      	ldr	r1, [r3, #0]
10004e88:	889a      	ldrh	r2, [r3, #4]
10004e8a:	300d      	adds	r0, #13
10004e8c:	f007 f9cf 	bl	1000c22e <memcpy>
                              p_optiga_verify_sign->public_key->public_key,
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
10004e90:	6933      	ldr	r3, [r6, #16]
10004e92:	889a      	ldrh	r2, [r3, #4]
10004e94:	8823      	ldrh	r3, [r4, #0]
10004e96:	18d3      	adds	r3, r2, r3
10004e98:	8023      	strh	r3, [r4, #0]
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
10004e9a:	8823      	ldrh	r3, [r4, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004e9c:	24b2      	movs	r4, #178	; 0xb2
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
10004e9e:	1c19      	adds	r1, r3, #0
10004ea0:	7e28      	ldrb	r0, [r5, #24]
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10004ea2:	682a      	ldr	r2, [r5, #0]
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
10004ea4:	3909      	subs	r1, #9
10004ea6:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004ea8:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004eaa:	0a08      	lsrs	r0, r1, #8
10004eac:	7510      	strb	r0, [r2, #20]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004eae:	7494      	strb	r4, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004eb0:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10004eb2:	682a      	ldr	r2, [r5, #0]
10004eb4:	3b05      	subs	r3, #5
10004eb6:	8093      	strh	r3, [r2, #4]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10004eb8:	2309      	movs	r3, #9
            return_status = OPTIGA_LIB_SUCCESS;
10004eba:	2000      	movs	r0, #0
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10004ebc:	75ab      	strb	r3, [r5, #22]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
10004ebe:	e00c      	b.n	10004eda <optiga_cmd_verify_sign_handler+0x13a>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for verify sign command...");
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004ec0:	6803      	ldr	r3, [r0, #0]
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
10004ec2:	2000      	movs	r0, #0
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for verify sign command...");
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004ec4:	7c9b      	ldrb	r3, [r3, #18]
10004ec6:	2bff      	cmp	r3, #255	; 0xff
10004ec8:	d107      	bne.n	10004eda <optiga_cmd_verify_sign_handler+0x13a>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10004eca:	7f2a      	ldrb	r2, [r5, #28]
10004ecc:	3b80      	subs	r3, #128	; 0x80
10004ece:	4013      	ands	r3, r2
10004ed0:	772b      	strb	r3, [r5, #28]
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10004ed2:	4803      	ldr	r0, [pc, #12]	; (10004ee0 <optiga_cmd_verify_sign_handler+0x140>)
10004ed4:	e001      	b.n	10004eda <optiga_cmd_verify_sign_handler+0x13a>
                                     (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_APDU_TL_LENGTH +
                                     p_optiga_verify_sign->public_key->length));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10004ed6:	2081      	movs	r0, #129	; 0x81
10004ed8:	0080      	lsls	r0, r0, #2
        default:
            break;
    }

    return (return_status);
}
10004eda:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10004edc:	00000615 	.word	0x00000615
10004ee0:	00000202 	.word	0x00000202

10004ee4 <optiga_cmd_calc_ssec_handler>:
#ifdef OPTIGA_CRYPT_ECDH_ENABLED
/*
* CalcSSec handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_ssec_handler(optiga_cmd_t * me)
{
10004ee4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    optiga_calc_ssec_params_t * p_optiga_ecdh = (optiga_calc_ssec_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10004ee6:	466b      	mov	r3, sp
10004ee8:	1d9d      	adds	r5, r3, #6
10004eea:	2309      	movs	r3, #9
10004eec:	802b      	strh	r3, [r5, #0]
    uint16_t private_key_oid;
    
    switch ((uint8_t)me->cmd_next_execution_state)
10004eee:	7d83      	ldrb	r3, [r0, #22]
#ifdef OPTIGA_CRYPT_ECDH_ENABLED
/*
* CalcSSec handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_ssec_handler(optiga_cmd_t * me)
{
10004ef0:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    optiga_calc_ssec_params_t * p_optiga_ecdh = (optiga_calc_ssec_params_t *)me->p_input;
10004ef2:	6886      	ldr	r6, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t private_key_oid;
    
    switch ((uint8_t)me->cmd_next_execution_state)
10004ef4:	2b08      	cmp	r3, #8
10004ef6:	d003      	beq.n	10004f00 <optiga_cmd_calc_ssec_handler+0x1c>
10004ef8:	2b09      	cmp	r3, #9
10004efa:	d100      	bne.n	10004efe <optiga_cmd_calc_ssec_handler+0x1a>
10004efc:	e072      	b.n	10004fe4 <optiga_cmd_calc_ssec_handler+0x100>
10004efe:	e085      	b.n	1000500c <optiga_cmd_calc_ssec_handler+0x128>
            // APDU header length + TLV of private key + TLV of algo id + TLV of public key
            // If shared secret option to export (TLV of export shared secret)
            // If shared secret store in OID (TLV of shared secret OID)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                    OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_APDU_TL_LENGTH +
                                    p_optiga_ecdh->public_key->length +
10004f00:	6833      	ldr	r3, [r6, #0]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate shared secret command..");
            // APDU header length + TLV of private key + TLV of algo id + TLV of public key
            // If shared secret option to export (TLV of export shared secret)
            // If shared secret store in OID (TLV of shared secret OID)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
10004f02:	7ab1      	ldrb	r1, [r6, #10]
                                    OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_APDU_TL_LENGTH +
                                    p_optiga_ecdh->public_key->length +
10004f04:	889b      	ldrh	r3, [r3, #4]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate shared secret command..");
            // APDU header length + TLV of private key + TLV of algo id + TLV of public key
            // If shared secret option to export (TLV of export shared secret)
            // If shared secret store in OID (TLV of shared secret OID)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
10004f06:	2203      	movs	r2, #3
10004f08:	2901      	cmp	r1, #1
10004f0a:	d000      	beq.n	10004f0e <optiga_cmd_calc_ssec_handler+0x2a>
10004f0c:	3202      	adds	r2, #2
10004f0e:	3310      	adds	r3, #16
10004f10:	18d3      	adds	r3, r2, r3
                                    OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_APDU_TL_LENGTH +
                                    p_optiga_ecdh->public_key->length +
                                    (TRUE == p_optiga_ecdh->export_to_host?(OPTIGA_CMD_APDU_TL_LENGTH):
                                    (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10004f12:	4a41      	ldr	r2, [pc, #260]	; (10005018 <optiga_cmd_calc_ssec_handler+0x134>)
10004f14:	b29b      	uxth	r3, r3
10004f16:	4293      	cmp	r3, r2
10004f18:	d900      	bls.n	10004f1c <optiga_cmd_calc_ssec_handler+0x38>
10004f1a:	e079      	b.n	10005010 <optiga_cmd_calc_ssec_handler+0x12c>
                break;
            }
            // Tag and length for private key OID
            optiga_cmd_prepare_tag_header(CMD_SSEC_PRIVATE_KEY_TAG,
                                          CMD_SSEC_PRIVATE_KEY_LEN,
                                          me->p_optiga->optiga_comms_buffer,
10004f1c:	6822      	ldr	r2, [r4, #0]
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            // Tag and length for private key OID
            optiga_cmd_prepare_tag_header(CMD_SSEC_PRIVATE_KEY_TAG,
10004f1e:	2102      	movs	r1, #2
                                          CMD_SSEC_PRIVATE_KEY_LEN,
                                          me->p_optiga->optiga_comms_buffer,
10004f20:	320d      	adds	r2, #13
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            // Tag and length for private key OID
            optiga_cmd_prepare_tag_header(CMD_SSEC_PRIVATE_KEY_TAG,
10004f22:	2001      	movs	r0, #1
10004f24:	1c2b      	adds	r3, r5, #0
10004f26:	f7ff fb37 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          CMD_SSEC_PRIVATE_KEY_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            private_key_oid = (uint16_t)p_optiga_ecdh->private_key;
10004f2a:	8931      	ldrh	r1, [r6, #8]
            if (OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdh->private_key)
10004f2c:	2900      	cmp	r1, #0
10004f2e:	d100      	bne.n	10004f32 <optiga_cmd_calc_ssec_handler+0x4e>
            {
                private_key_oid = me->session_oid;
10004f30:	8aa1      	ldrh	r1, [r4, #20]
            }

            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data], private_key_oid);
10004f32:	6823      	ldr	r3, [r4, #0]
10004f34:	8828      	ldrh	r0, [r5, #0]
10004f36:	1818      	adds	r0, r3, r0
10004f38:	300d      	adds	r0, #13
10004f3a:	f7ff f99f 	bl	1000427c <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004f3e:	882b      	ldrh	r3, [r5, #0]

            // Tag and length for algorithm ID
            optiga_cmd_prepare_tag_header(CMD_SSEC_ALG_ID_TAG,
                                          CMD_SSEC_ALG_ID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
10004f40:	6822      	ldr	r2, [r4, #0]
            {
                private_key_oid = me->session_oid;
            }

            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data], private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004f42:	3302      	adds	r3, #2
10004f44:	802b      	strh	r3, [r5, #0]

            // Tag and length for algorithm ID
            optiga_cmd_prepare_tag_header(CMD_SSEC_ALG_ID_TAG,
                                          CMD_SSEC_ALG_ID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
10004f46:	320d      	adds	r2, #13

            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data], private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // Tag and length for algorithm ID
            optiga_cmd_prepare_tag_header(CMD_SSEC_ALG_ID_TAG,
10004f48:	2005      	movs	r0, #5
10004f4a:	2101      	movs	r1, #1
10004f4c:	1c2b      	adds	r3, r5, #0
10004f4e:	f7ff fb23 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          CMD_SSEC_ALG_ID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            me->p_optiga->optiga_comms_buffer[index_for_data++] = (uint8_t)p_optiga_ecdh->public_key->key_type;
10004f52:	882b      	ldrh	r3, [r5, #0]
10004f54:	6821      	ldr	r1, [r4, #0]
10004f56:	1c5a      	adds	r2, r3, #1
10004f58:	802a      	strh	r2, [r5, #0]
10004f5a:	6832      	ldr	r2, [r6, #0]
10004f5c:	18cb      	adds	r3, r1, r3
10004f5e:	7992      	ldrb	r2, [r2, #6]

            // Tag and length for public key
            optiga_cmd_prepare_tag_header(CMD_SSEC_PUB_KEY_TAG,
10004f60:	2006      	movs	r0, #6
            optiga_cmd_prepare_tag_header(CMD_SSEC_ALG_ID_TAG,
                                          CMD_SSEC_ALG_ID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            me->p_optiga->optiga_comms_buffer[index_for_data++] = (uint8_t)p_optiga_ecdh->public_key->key_type;
10004f62:	735a      	strb	r2, [r3, #13]

            // Tag and length for public key
            optiga_cmd_prepare_tag_header(CMD_SSEC_PUB_KEY_TAG,
10004f64:	6833      	ldr	r3, [r6, #0]
                                          p_optiga_ecdh->public_key->length,
                                          me->p_optiga->optiga_comms_buffer,
10004f66:	6822      	ldr	r2, [r4, #0]
                                          &index_for_data);

            me->p_optiga->optiga_comms_buffer[index_for_data++] = (uint8_t)p_optiga_ecdh->public_key->key_type;

            // Tag and length for public key
            optiga_cmd_prepare_tag_header(CMD_SSEC_PUB_KEY_TAG,
10004f68:	8899      	ldrh	r1, [r3, #4]
                                          p_optiga_ecdh->public_key->length,
                                          me->p_optiga->optiga_comms_buffer,
10004f6a:	320d      	adds	r2, #13
                                          &index_for_data);

            me->p_optiga->optiga_comms_buffer[index_for_data++] = (uint8_t)p_optiga_ecdh->public_key->key_type;

            // Tag and length for public key
            optiga_cmd_prepare_tag_header(CMD_SSEC_PUB_KEY_TAG,
10004f6c:	1c2b      	adds	r3, r5, #0
10004f6e:	f7ff fb13 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          p_optiga_ecdh->public_key->length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            //Copy the public key to APDU
            pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004f72:	6822      	ldr	r2, [r4, #0]
10004f74:	8828      	ldrh	r0, [r5, #0]
10004f76:	6833      	ldr	r3, [r6, #0]
10004f78:	1810      	adds	r0, r2, r0
10004f7a:	6819      	ldr	r1, [r3, #0]
10004f7c:	889a      	ldrh	r2, [r3, #4]
10004f7e:	300d      	adds	r0, #13
10004f80:	f007 f955 	bl	1000c22e <memcpy>
                          p_optiga_ecdh->public_key->public_key,
                          p_optiga_ecdh->public_key->length);

            index_for_data += p_optiga_ecdh->public_key->length;
10004f84:	6833      	ldr	r3, [r6, #0]
10004f86:	889a      	ldrh	r2, [r3, #4]
10004f88:	882b      	ldrh	r3, [r5, #0]
10004f8a:	18d3      	adds	r3, r2, r3
10004f8c:	802b      	strh	r3, [r5, #0]
10004f8e:	6822      	ldr	r2, [r4, #0]

            // check if shared secret needs to be exported or stored
            if (FALSE == p_optiga_ecdh->export_to_host)
10004f90:	7ab3      	ldrb	r3, [r6, #10]
            {
                // Tag and length for storing shared secret in session OID
                optiga_cmd_prepare_tag_header(CMD_SSEC_STORE_SESSION_TAG,
                                              CMD_SSEC_STORE_SESSION_LEN,
                                              me->p_optiga->optiga_comms_buffer,
10004f92:	320d      	adds	r2, #13
                          p_optiga_ecdh->public_key->length);

            index_for_data += p_optiga_ecdh->public_key->length;

            // check if shared secret needs to be exported or stored
            if (FALSE == p_optiga_ecdh->export_to_host)
10004f94:	2b00      	cmp	r3, #0
10004f96:	d10f      	bne.n	10004fb8 <optiga_cmd_calc_ssec_handler+0xd4>
            {
                // Tag and length for storing shared secret in session OID
                optiga_cmd_prepare_tag_header(CMD_SSEC_STORE_SESSION_TAG,
10004f98:	2008      	movs	r0, #8
10004f9a:	2102      	movs	r1, #2
10004f9c:	1c2b      	adds	r3, r5, #0
10004f9e:	f7ff fafb 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              CMD_SSEC_STORE_SESSION_LEN,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
                // store session secret oid
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data], me->session_oid);
10004fa2:	6823      	ldr	r3, [r4, #0]
10004fa4:	8828      	ldrh	r0, [r5, #0]
10004fa6:	8aa1      	ldrh	r1, [r4, #20]
10004fa8:	1818      	adds	r0, r3, r0
10004faa:	300d      	adds	r0, #13
10004fac:	f7ff f966 	bl	1000427c <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004fb0:	882b      	ldrh	r3, [r5, #0]
10004fb2:	3302      	adds	r3, #2
10004fb4:	802b      	strh	r3, [r5, #0]
10004fb6:	e004      	b.n	10004fc2 <optiga_cmd_calc_ssec_handler+0xde>
            }
            else
            {
                // Tag and length for exporting shared secret
                optiga_cmd_prepare_tag_header(CMD_SSEC_EXPORT_TAG,
10004fb8:	2007      	movs	r0, #7
10004fba:	2100      	movs	r1, #0
10004fbc:	1c2b      	adds	r3, r5, #0
10004fbe:	f7ff faeb 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SSEC,
10004fc2:	882b      	ldrh	r3, [r5, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004fc4:	25b3      	movs	r5, #179	; 0xb3
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SSEC,
10004fc6:	1c19      	adds	r1, r3, #0
10004fc8:	7e20      	ldrb	r0, [r4, #24]
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10004fca:	6822      	ldr	r2, [r4, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SSEC,
10004fcc:	3909      	subs	r1, #9
10004fce:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004fd0:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004fd2:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004fd4:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004fd6:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004fd8:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SSEC,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10004fda:	6822      	ldr	r2, [r4, #0]
10004fdc:	3b05      	subs	r3, #5
10004fde:	8093      	strh	r3, [r2, #4]
            return_status = OPTIGA_LIB_SUCCESS;
10004fe0:	2400      	movs	r4, #0
        }
        break;
10004fe2:	e017      	b.n	10005014 <optiga_cmd_calc_ssec_handler+0x130>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate shared secret command...");
            // check if the shared secret transceive was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004fe4:	6801      	ldr	r1, [r0, #0]
10004fe6:	7c8b      	ldrb	r3, [r1, #18]
10004fe8:	2b00      	cmp	r3, #0
10004fea:	d004      	beq.n	10004ff6 <optiga_cmd_calc_ssec_handler+0x112>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate shared secret response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10004fec:	237f      	movs	r3, #127	; 0x7f
10004fee:	7f02      	ldrb	r2, [r0, #28]
10004ff0:	4013      	ands	r3, r2
10004ff2:	7703      	strb	r3, [r0, #28]
10004ff4:	e00a      	b.n	1000500c <optiga_cmd_calc_ssec_handler+0x128>
                break;
            }
            if (FALSE != p_optiga_ecdh->export_to_host)
10004ff6:	7ab2      	ldrb	r2, [r6, #10]
                pal_os_memcpy(p_optiga_ecdh->shared_secret,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE));
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate shared secret command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
10004ff8:	1c1c      	adds	r4, r3, #0
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate shared secret response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            if (FALSE != p_optiga_ecdh->export_to_host)
10004ffa:	2a00      	cmp	r2, #0
10004ffc:	d00a      	beq.n	10005014 <optiga_cmd_calc_ssec_handler+0x130>
            {
                //copy shared secret from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_ecdh->shared_secret,
10004ffe:	88ca      	ldrh	r2, [r1, #6]
10005000:	6870      	ldr	r0, [r6, #4]
10005002:	3a04      	subs	r2, #4
10005004:	3116      	adds	r1, #22
10005006:	f007 f912 	bl	1000c22e <memcpy>
1000500a:	e003      	b.n	10005014 <optiga_cmd_calc_ssec_handler+0x130>
* CalcSSec handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_ssec_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
1000500c:	4c03      	ldr	r4, [pc, #12]	; (1000501c <optiga_cmd_calc_ssec_handler+0x138>)
1000500e:	e001      	b.n	10005014 <optiga_cmd_calc_ssec_handler+0x130>
                                    p_optiga_ecdh->public_key->length +
                                    (TRUE == p_optiga_ecdh->export_to_host?(OPTIGA_CMD_APDU_TL_LENGTH):
                                    (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10005010:	2481      	movs	r4, #129	; 0x81
10005012:	00a4      	lsls	r4, r4, #2
        default:
            break;
    }

    return (return_status);
}
10005014:	1c20      	adds	r0, r4, #0
10005016:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10005018:	00000615 	.word	0x00000615
1000501c:	00000202 	.word	0x00000202

10005020 <optiga_cmd_derive_key_handler>:
#ifdef OPTIGA_CRYPT_TLS_PRF_SHA256_ENABLED
/*
* DeriveKey
*/
_STATIC_H optiga_lib_status_t optiga_cmd_derive_key_handler(optiga_cmd_t * me)
{
10005020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005022:	466b      	mov	r3, sp
10005024:	1d9d      	adds	r5, r3, #6
10005026:	2309      	movs	r3, #9
10005028:	802b      	strh	r3, [r5, #0]
    optiga_derive_key_params_t * p_optiga_tls_prf_sha256 = (optiga_derive_key_params_t *)me->p_input;
    uint16_t actual_secret_length = 0;
    uint16_t derive_key_length_sent;
    uint16_t secret_oid;

    switch ((uint8_t)me->cmd_next_execution_state)
1000502a:	7d83      	ldrb	r3, [r0, #22]
#ifdef OPTIGA_CRYPT_TLS_PRF_SHA256_ENABLED
/*
* DeriveKey
*/
_STATIC_H optiga_lib_status_t optiga_cmd_derive_key_handler(optiga_cmd_t * me)
{
1000502c:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_derive_key_params_t * p_optiga_tls_prf_sha256 = (optiga_derive_key_params_t *)me->p_input;
1000502e:	6886      	ldr	r6, [r0, #8]
    uint16_t actual_secret_length = 0;
    uint16_t derive_key_length_sent;
    uint16_t secret_oid;

    switch ((uint8_t)me->cmd_next_execution_state)
10005030:	2b08      	cmp	r3, #8
10005032:	d003      	beq.n	1000503c <optiga_cmd_derive_key_handler+0x1c>
10005034:	2b09      	cmp	r3, #9
10005036:	d100      	bne.n	1000503a <optiga_cmd_derive_key_handler+0x1a>
10005038:	e09d      	b.n	10005176 <optiga_cmd_derive_key_handler+0x156>
1000503a:	e0ad      	b.n	10005198 <optiga_cmd_derive_key_handler+0x178>
            OPTIGA_CMD_LOG_MESSAGE("Sending derive key command..");
            // APDU header length + TLV of OID shared secret + TLV of secret derivation data +
            // TLV of length of the key to be derived
            // If derive key option to export (TLV of export derive key)
            // If derive key store in OID (TLV of derive key OID)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
1000503c:	6932      	ldr	r2, [r6, #16]
1000503e:	2314      	movs	r3, #20
10005040:	2a00      	cmp	r2, #0
10005042:	d100      	bne.n	10005046 <optiga_cmd_derive_key_handler+0x26>
10005044:	3302      	adds	r3, #2
                                    OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                    (NULL != p_optiga_tls_prf_sha256->derived_key?(OPTIGA_CMD_APDU_TL_LENGTH):
                                    (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES));
            if ((NULL != p_optiga_tls_prf_sha256->label) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->label_length))
10005046:	68f2      	ldr	r2, [r6, #12]
10005048:	2a00      	cmp	r2, #0
1000504a:	d004      	beq.n	10005056 <optiga_cmd_derive_key_handler+0x36>
1000504c:	8872      	ldrh	r2, [r6, #2]
1000504e:	2a00      	cmp	r2, #0
10005050:	d001      	beq.n	10005056 <optiga_cmd_derive_key_handler+0x36>
            {
                total_apdu_length += p_optiga_tls_prf_sha256->label_length;
10005052:	189b      	adds	r3, r3, r2
10005054:	b29b      	uxth	r3, r3
            }
            //copy seed(secret) if not NULL
            if ((NULL != p_optiga_tls_prf_sha256->seed) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->seed_length))
10005056:	68b2      	ldr	r2, [r6, #8]
10005058:	2a00      	cmp	r2, #0
1000505a:	d004      	beq.n	10005066 <optiga_cmd_derive_key_handler+0x46>
1000505c:	88b2      	ldrh	r2, [r6, #4]
1000505e:	2a00      	cmp	r2, #0
10005060:	d001      	beq.n	10005066 <optiga_cmd_derive_key_handler+0x46>
            {
                total_apdu_length += p_optiga_tls_prf_sha256->seed_length;
10005062:	189b      	adds	r3, r3, r2
10005064:	b29b      	uxth	r3, r3
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10005066:	4a4f      	ldr	r2, [pc, #316]	; (100051a4 <optiga_cmd_derive_key_handler+0x184>)
10005068:	4293      	cmp	r3, r2
1000506a:	d900      	bls.n	1000506e <optiga_cmd_derive_key_handler+0x4e>
1000506c:	e096      	b.n	1000519c <optiga_cmd_derive_key_handler+0x17c>
            }

            // OID of shared secret to derive new secret from
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_SEC_OID_TAG,
                                          CMD_DERIVE_KEY_SEC_OID_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
1000506e:	6822      	ldr	r2, [r4, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // OID of shared secret to derive new secret from
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_SEC_OID_TAG,
10005070:	2102      	movs	r1, #2
                                          CMD_DERIVE_KEY_SEC_OID_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
10005072:	320d      	adds	r2, #13
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // OID of shared secret to derive new secret from
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_SEC_OID_TAG,
10005074:	2001      	movs	r0, #1
10005076:	1c2b      	adds	r3, r5, #0
10005078:	f7ff fa8e 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          CMD_DERIVE_KEY_SEC_OID_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            secret_oid = (p_optiga_tls_prf_sha256->input_shared_secret_oid == 0x00) ?
1000507c:	8831      	ldrh	r1, [r6, #0]
1000507e:	2900      	cmp	r1, #0
10005080:	d100      	bne.n	10005084 <optiga_cmd_derive_key_handler+0x64>
10005082:	8aa1      	ldrh	r1, [r4, #20]
                          me->session_oid : p_optiga_tls_prf_sha256->input_shared_secret_oid;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), secret_oid);
10005084:	6823      	ldr	r3, [r4, #0]
10005086:	8828      	ldrh	r0, [r5, #0]
10005088:	1818      	adds	r0, r3, r0
1000508a:	300d      	adds	r0, #13
1000508c:	f7ff f8f6 	bl	1000427c <optiga_common_set_uint16>
            index_for_data += 2;
10005090:	882b      	ldrh	r3, [r5, #0]

            // Length of key to be derived
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_KEY_LEN_TAG,
                                          CMD_DERIVE_KEY_KEY_LEN_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
10005092:	6822      	ldr	r2, [r4, #0]
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            secret_oid = (p_optiga_tls_prf_sha256->input_shared_secret_oid == 0x00) ?
                          me->session_oid : p_optiga_tls_prf_sha256->input_shared_secret_oid;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), secret_oid);
            index_for_data += 2;
10005094:	3302      	adds	r3, #2
10005096:	802b      	strh	r3, [r5, #0]

            // Length of key to be derived
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_KEY_LEN_TAG,
10005098:	2102      	movs	r1, #2
1000509a:	1c2b      	adds	r3, r5, #0
                                          CMD_DERIVE_KEY_KEY_LEN_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
1000509c:	320d      	adds	r2, #13
                          me->session_oid : p_optiga_tls_prf_sha256->input_shared_secret_oid;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), secret_oid);
            index_for_data += 2;

            // Length of key to be derived
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_KEY_LEN_TAG,
1000509e:	2003      	movs	r0, #3
100050a0:	f7ff fa7a 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          CMD_DERIVE_KEY_KEY_LEN_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            derive_key_length_sent = p_optiga_tls_prf_sha256->derived_key_length;
100050a4:	88f1      	ldrh	r1, [r6, #6]
            if ((derive_key_length_sent > OPTIGA_CMD_ZERO_LENGTH_OR_VALUE) &&
100050a6:	1e4b      	subs	r3, r1, #1
100050a8:	2b0e      	cmp	r3, #14
100050aa:	d800      	bhi.n	100050ae <optiga_cmd_derive_key_handler+0x8e>
                (derive_key_length_sent < CMD_DERIVE_KEY_DERIVE_KEY_LEN_MIN))
            {
                derive_key_length_sent = CMD_DERIVE_KEY_DERIVE_KEY_LEN_MIN;
100050ac:	2110      	movs	r1, #16
            }
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), derive_key_length_sent);
100050ae:	6823      	ldr	r3, [r4, #0]
100050b0:	8828      	ldrh	r0, [r5, #0]
100050b2:	1818      	adds	r0, r3, r0
100050b4:	300d      	adds	r0, #13
100050b6:	f7ff f8e1 	bl	1000427c <optiga_common_set_uint16>
            index_for_data += 2;
100050ba:	8828      	ldrh	r0, [r5, #0]

            //copy label(secret) if present
            *(me->p_optiga->optiga_comms_buffer + index_for_data++) = CMD_DERIVE_KEY_DERIVATION_DATA_TAG;
100050bc:	6822      	ldr	r2, [r4, #0]
                (derive_key_length_sent < CMD_DERIVE_KEY_DERIVE_KEY_LEN_MIN))
            {
                derive_key_length_sent = CMD_DERIVE_KEY_DERIVE_KEY_LEN_MIN;
            }
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), derive_key_length_sent);
            index_for_data += 2;
100050be:	1c83      	adds	r3, r0, #2

            //copy label(secret) if present
            *(me->p_optiga->optiga_comms_buffer + index_for_data++) = CMD_DERIVE_KEY_DERIVATION_DATA_TAG;
100050c0:	b29b      	uxth	r3, r3
100050c2:	18d3      	adds	r3, r2, r3
100050c4:	2202      	movs	r2, #2
100050c6:	735a      	strb	r2, [r3, #13]
            index_for_data += 2;
100050c8:	3005      	adds	r0, #5

            if ((NULL != p_optiga_tls_prf_sha256->label) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->label_length))
100050ca:	68f1      	ldr	r1, [r6, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), derive_key_length_sent);
            index_for_data += 2;

            //copy label(secret) if present
            *(me->p_optiga->optiga_comms_buffer + index_for_data++) = CMD_DERIVE_KEY_DERIVATION_DATA_TAG;
            index_for_data += 2;
100050cc:	b280      	uxth	r0, r0
100050ce:	8028      	strh	r0, [r5, #0]
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_derive_key_params_t * p_optiga_tls_prf_sha256 = (optiga_derive_key_params_t *)me->p_input;
    uint16_t actual_secret_length = 0;
100050d0:	1e0f      	subs	r7, r1, #0

            //copy label(secret) if present
            *(me->p_optiga->optiga_comms_buffer + index_for_data++) = CMD_DERIVE_KEY_DERIVATION_DATA_TAG;
            index_for_data += 2;

            if ((NULL != p_optiga_tls_prf_sha256->label) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->label_length))
100050d2:	d009      	beq.n	100050e8 <optiga_cmd_derive_key_handler+0xc8>
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_derive_key_params_t * p_optiga_tls_prf_sha256 = (optiga_derive_key_params_t *)me->p_input;
    uint16_t actual_secret_length = 0;
100050d4:	2700      	movs	r7, #0

            //copy label(secret) if present
            *(me->p_optiga->optiga_comms_buffer + index_for_data++) = CMD_DERIVE_KEY_DERIVATION_DATA_TAG;
            index_for_data += 2;

            if ((NULL != p_optiga_tls_prf_sha256->label) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->label_length))
100050d6:	8872      	ldrh	r2, [r6, #2]
100050d8:	42ba      	cmp	r2, r7
100050da:	d005      	beq.n	100050e8 <optiga_cmd_derive_key_handler+0xc8>
            {
                // pre increase index
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
100050dc:	6823      	ldr	r3, [r4, #0]
100050de:	1818      	adds	r0, r3, r0
100050e0:	300d      	adds	r0, #13
100050e2:	f007 f8a4 	bl	1000c22e <memcpy>
                              p_optiga_tls_prf_sha256->label,
                              p_optiga_tls_prf_sha256->label_length);

                actual_secret_length = p_optiga_tls_prf_sha256->label_length;
100050e6:	8877      	ldrh	r7, [r6, #2]
            }
            //copy seed(secret) if not NULL
            if ((NULL != p_optiga_tls_prf_sha256->seed) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->seed_length))
100050e8:	68b1      	ldr	r1, [r6, #8]
100050ea:	2900      	cmp	r1, #0
100050ec:	d00c      	beq.n	10005108 <optiga_cmd_derive_key_handler+0xe8>
100050ee:	88b2      	ldrh	r2, [r6, #4]
100050f0:	2a00      	cmp	r2, #0
100050f2:	d009      	beq.n	10005108 <optiga_cmd_derive_key_handler+0xe8>
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data+actual_secret_length,
100050f4:	8828      	ldrh	r0, [r5, #0]
100050f6:	6823      	ldr	r3, [r4, #0]
100050f8:	1838      	adds	r0, r7, r0
100050fa:	1818      	adds	r0, r3, r0
100050fc:	300d      	adds	r0, #13
100050fe:	f007 f896 	bl	1000c22e <memcpy>
                              p_optiga_tls_prf_sha256->seed,
                              p_optiga_tls_prf_sha256->seed_length);

                actual_secret_length += p_optiga_tls_prf_sha256->seed_length;
10005102:	88b3      	ldrh	r3, [r6, #4]
10005104:	18ff      	adds	r7, r7, r3
10005106:	b2bf      	uxth	r7, r7
            }

            //Add secret length
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data - 2), (actual_secret_length));
10005108:	6823      	ldr	r3, [r4, #0]
1000510a:	8828      	ldrh	r0, [r5, #0]
1000510c:	1c39      	adds	r1, r7, #0
1000510e:	1818      	adds	r0, r3, r0
10005110:	300b      	adds	r0, #11
10005112:	f7ff f8b3 	bl	1000427c <optiga_common_set_uint16>
            index_for_data += actual_secret_length;
10005116:	882b      	ldrh	r3, [r5, #0]
10005118:	6822      	ldr	r2, [r4, #0]
1000511a:	18ff      	adds	r7, r7, r3

            // Alternate output options
            if (NULL == p_optiga_tls_prf_sha256->derived_key)
1000511c:	6933      	ldr	r3, [r6, #16]
                actual_secret_length += p_optiga_tls_prf_sha256->seed_length;
            }

            //Add secret length
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data - 2), (actual_secret_length));
            index_for_data += actual_secret_length;
1000511e:	802f      	strh	r7, [r5, #0]
            if (NULL == p_optiga_tls_prf_sha256->derived_key)
            {
                //store internal
                optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_STORE_TAG,
                                              CMD_DERIVE_KEY_STORE_TAG_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
10005120:	320d      	adds	r2, #13
            //Add secret length
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data - 2), (actual_secret_length));
            index_for_data += actual_secret_length;

            // Alternate output options
            if (NULL == p_optiga_tls_prf_sha256->derived_key)
10005122:	2b00      	cmp	r3, #0
10005124:	d10f      	bne.n	10005146 <optiga_cmd_derive_key_handler+0x126>
            {
                //store internal
                optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_STORE_TAG,
10005126:	2008      	movs	r0, #8
10005128:	2102      	movs	r1, #2
1000512a:	1c2b      	adds	r3, r5, #0
1000512c:	f7ff fa34 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              CMD_DERIVE_KEY_STORE_TAG_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), (me->session_oid));
10005130:	6823      	ldr	r3, [r4, #0]
10005132:	8828      	ldrh	r0, [r5, #0]
10005134:	8aa1      	ldrh	r1, [r4, #20]
10005136:	1818      	adds	r0, r3, r0
10005138:	300d      	adds	r0, #13
1000513a:	f7ff f89f 	bl	1000427c <optiga_common_set_uint16>
                index_for_data += 2;
1000513e:	882b      	ldrh	r3, [r5, #0]
10005140:	3302      	adds	r3, #2
10005142:	802b      	strh	r3, [r5, #0]
10005144:	e004      	b.n	10005150 <optiga_cmd_derive_key_handler+0x130>
            }
            else
            {
                //export
                optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_EXPORT_TAG,
10005146:	2007      	movs	r0, #7
10005148:	2100      	movs	r1, #0
1000514a:	1c2b      	adds	r3, r5, #0
1000514c:	f7ff fa24 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DERIVE_KEY,
10005150:	882b      	ldrh	r3, [r5, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005152:	25b4      	movs	r5, #180	; 0xb4
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DERIVE_KEY,
10005154:	1c19      	adds	r1, r3, #0
10005156:	7e20      	ldrb	r0, [r4, #24]
                                           me->cmd_param,
                                          (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005158:	6822      	ldr	r2, [r4, #0]
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DERIVE_KEY,
1000515a:	3909      	subs	r1, #9
1000515c:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
1000515e:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005160:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005162:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005164:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10005166:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DERIVE_KEY,
                                           me->cmd_param,
                                          (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10005168:	6822      	ldr	r2, [r4, #0]
1000516a:	3b05      	subs	r3, #5
1000516c:	8093      	strh	r3, [r2, #4]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
1000516e:	2309      	movs	r3, #9
10005170:	75a3      	strb	r3, [r4, #22]
            return_status = OPTIGA_LIB_SUCCESS;
10005172:	2300      	movs	r3, #0
        }
        break;
10005174:	e014      	b.n	100051a0 <optiga_cmd_derive_key_handler+0x180>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for derive key command...");
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10005176:	6801      	ldr	r1, [r0, #0]
10005178:	7c8d      	ldrb	r5, [r1, #18]
1000517a:	2d00      	cmp	r5, #0
1000517c:	d004      	beq.n	10005188 <optiga_cmd_derive_key_handler+0x168>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing derive key response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
1000517e:	237f      	movs	r3, #127	; 0x7f
10005180:	7f02      	ldrb	r2, [r0, #28]
10005182:	4013      	ands	r3, r2
10005184:	7703      	strb	r3, [r0, #28]
10005186:	e007      	b.n	10005198 <optiga_cmd_derive_key_handler+0x178>
                break;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of derive key command is processed...");
            // session release
            return_status = OPTIGA_LIB_SUCCESS;
            if (NULL != p_optiga_tls_prf_sha256->derived_key)
10005188:	6930      	ldr	r0, [r6, #16]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of derive key command is processed...");
            // session release
            return_status = OPTIGA_LIB_SUCCESS;
1000518a:	1e03      	subs	r3, r0, #0
            if (NULL != p_optiga_tls_prf_sha256->derived_key)
1000518c:	d008      	beq.n	100051a0 <optiga_cmd_derive_key_handler+0x180>
            {
                pal_os_memcpy(p_optiga_tls_prf_sha256->derived_key,
1000518e:	88f2      	ldrh	r2, [r6, #6]
10005190:	3116      	adds	r1, #22
10005192:	f007 f84c 	bl	1000c22e <memcpy>
10005196:	e7ec      	b.n	10005172 <optiga_cmd_derive_key_handler+0x152>
* DeriveKey
*/
_STATIC_H optiga_lib_status_t optiga_cmd_derive_key_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005198:	4b03      	ldr	r3, [pc, #12]	; (100051a8 <optiga_cmd_derive_key_handler+0x188>)
1000519a:	e001      	b.n	100051a0 <optiga_cmd_derive_key_handler+0x180>
            {
                total_apdu_length += p_optiga_tls_prf_sha256->seed_length;
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
1000519c:	2381      	movs	r3, #129	; 0x81
1000519e:	009b      	lsls	r3, r3, #2
        default:
            break;
    }

    return (return_status);
}
100051a0:	1c18      	adds	r0, r3, #0
100051a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100051a4:	00000615 	.word	0x00000615
100051a8:	00000202 	.word	0x00000202

100051ac <optiga_cmd_set_object_protected_handler>:

/*
* Set Data Object handler for protected update
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_object_protected_handler(optiga_cmd_t * me)
{
100051ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_set_object_protected_params_t * p_optiga_write_protected_data = (optiga_set_object_protected_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
100051ae:	466b      	mov	r3, sp
100051b0:	1d9f      	adds	r7, r3, #6
100051b2:	2309      	movs	r3, #9
100051b4:	803b      	strh	r3, [r7, #0]

    switch ((uint8_t)me->cmd_next_execution_state)
100051b6:	7d83      	ldrb	r3, [r0, #22]

/*
* Set Data Object handler for protected update
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_object_protected_handler(optiga_cmd_t * me)
{
100051b8:	1c05      	adds	r5, r0, #0
    uint16_t total_apdu_length;
    optiga_set_object_protected_params_t * p_optiga_write_protected_data = (optiga_set_object_protected_params_t *)me->p_input;
100051ba:	6886      	ldr	r6, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
100051bc:	2b08      	cmp	r3, #8
100051be:	d002      	beq.n	100051c6 <optiga_cmd_set_object_protected_handler+0x1a>
100051c0:	2b09      	cmp	r3, #9
100051c2:	d02b      	beq.n	1000521c <optiga_cmd_set_object_protected_handler+0x70>
100051c4:	e043      	b.n	1000524e <optiga_cmd_set_object_protected_handler+0xa2>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending set data object command..");
            me->chaining_ongoing = FALSE;
100051c6:	2400      	movs	r4, #0
100051c8:	75c4      	strb	r4, [r0, #23]

            // APDU header size + Set Object protected tag 1 bytes + length of buffer 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                p_optiga_write_protected_data->p_protected_update_buffer_length;
100051ca:	88b1      	ldrh	r1, [r6, #4]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
100051cc:	4a22      	ldr	r2, [pc, #136]	; (10005258 <optiga_cmd_set_object_protected_handler+0xac>)
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending set data object command..");
            me->chaining_ongoing = FALSE;

            // APDU header size + Set Object protected tag 1 bytes + length of buffer 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
100051ce:	1dcb      	adds	r3, r1, #7
                                p_optiga_write_protected_data->p_protected_update_buffer_length;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
100051d0:	b29b      	uxth	r3, r3
100051d2:	4293      	cmp	r3, r2
100051d4:	d83d      	bhi.n	10005252 <optiga_cmd_set_object_protected_handler+0xa6>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // Copy the tag and protected length
            optiga_cmd_prepare_tag_header((CMD_SET_OBJECT_PROTECTED_TAG |
100051d6:	2030      	movs	r0, #48	; 0x30
100051d8:	79b3      	ldrb	r3, [r6, #6]
                                           (uint8_t)p_optiga_write_protected_data->set_obj_protected_tag),
                                          p_optiga_write_protected_data->p_protected_update_buffer_length,
                                          me->p_optiga->optiga_comms_buffer,
100051da:	682a      	ldr	r2, [r5, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // Copy the tag and protected length
            optiga_cmd_prepare_tag_header((CMD_SET_OBJECT_PROTECTED_TAG |
100051dc:	4318      	orrs	r0, r3
                                           (uint8_t)p_optiga_write_protected_data->set_obj_protected_tag),
                                          p_optiga_write_protected_data->p_protected_update_buffer_length,
                                          me->p_optiga->optiga_comms_buffer,
100051de:	320d      	adds	r2, #13
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // Copy the tag and protected length
            optiga_cmd_prepare_tag_header((CMD_SET_OBJECT_PROTECTED_TAG |
100051e0:	1c3b      	adds	r3, r7, #0
100051e2:	f7ff f9d9 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                           (uint8_t)p_optiga_write_protected_data->set_obj_protected_tag),
                                          p_optiga_write_protected_data->p_protected_update_buffer_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            // data to be written
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
100051e6:	682b      	ldr	r3, [r5, #0]
100051e8:	8838      	ldrh	r0, [r7, #0]
100051ea:	88b2      	ldrh	r2, [r6, #4]
100051ec:	1818      	adds	r0, r3, r0
100051ee:	6831      	ldr	r1, [r6, #0]
100051f0:	300d      	adds	r0, #13
100051f2:	f007 f81c 	bl	1000c22e <memcpy>
                          p_optiga_write_protected_data->p_protected_update_buffer,
                          p_optiga_write_protected_data->p_protected_update_buffer_length);

            index_for_data += p_optiga_write_protected_data->p_protected_update_buffer_length;
100051f6:	88b2      	ldrh	r2, [r6, #4]
100051f8:	883b      	ldrh	r3, [r7, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100051fa:	2683      	movs	r6, #131	; 0x83
            // data to be written
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_write_protected_data->p_protected_update_buffer,
                          p_optiga_write_protected_data->p_protected_update_buffer_length);

            index_for_data += p_optiga_write_protected_data->p_protected_update_buffer_length;
100051fc:	18d3      	adds	r3, r2, r3
100051fe:	b29b      	uxth	r3, r3
            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_OBJECT_PROTECTED,
10005200:	1c19      	adds	r1, r3, #0
10005202:	7e28      	ldrb	r0, [r5, #24]
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005204:	682a      	ldr	r2, [r5, #0]
                          p_optiga_write_protected_data->p_protected_update_buffer,
                          p_optiga_write_protected_data->p_protected_update_buffer_length);

            index_for_data += p_optiga_write_protected_data->p_protected_update_buffer_length;
            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_OBJECT_PROTECTED,
10005206:	3909      	subs	r1, #9
10005208:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
1000520a:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
1000520c:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000520e:	7496      	strb	r6, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005210:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10005212:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_OBJECT_PROTECTED,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10005214:	682a      	ldr	r2, [r5, #0]
10005216:	3b05      	subs	r3, #5
10005218:	8093      	strh	r3, [r2, #4]
1000521a:	e016      	b.n	1000524a <optiga_cmd_set_object_protected_handler+0x9e>

        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for set data object data command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
1000521c:	6802      	ldr	r2, [r0, #0]
1000521e:	7c94      	ldrb	r4, [r2, #18]
10005220:	2c00      	cmp	r4, #0
10005222:	d004      	beq.n	1000522e <optiga_cmd_set_object_protected_handler+0x82>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data object response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005224:	237f      	movs	r3, #127	; 0x7f
10005226:	7f02      	ldrb	r2, [r0, #28]
10005228:	4013      	ands	r3, r2
1000522a:	7703      	strb	r3, [r0, #28]
1000522c:	e00f      	b.n	1000524e <optiga_cmd_set_object_protected_handler+0xa2>
                break;
            }
            if (OPTIGA_SET_PROTECTED_UPDATE_FINAL == p_optiga_write_protected_data->set_obj_protected_tag)
1000522e:	79b3      	ldrb	r3, [r6, #6]
10005230:	2b01      	cmp	r3, #1
10005232:	d102      	bne.n	1000523a <optiga_cmd_set_object_protected_handler+0x8e>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
10005234:	330a      	adds	r3, #10
10005236:	7583      	strb	r3, [r0, #22]
10005238:	e007      	b.n	1000524a <optiga_cmd_set_object_protected_handler+0x9e>
            }
            else
            {
                me->cmd_next_execution_state = OPTIGA_CMD_STATE_EXIT;
1000523a:	230c      	movs	r3, #12
1000523c:	7583      	strb	r3, [r0, #22]
                pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
1000523e:	23cf      	movs	r3, #207	; 0xcf
10005240:	00db      	lsls	r3, r3, #3
10005242:	58d0      	ldr	r0, [r2, r3]
10005244:	4905      	ldr	r1, [pc, #20]	; (1000525c <optiga_cmd_set_object_protected_handler+0xb0>)
10005246:	f7fc fa03 	bl	10001650 <pal_os_event_start>
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of set data object command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
1000524a:	1c20      	adds	r0, r4, #0
1000524c:	e003      	b.n	10005256 <optiga_cmd_set_object_protected_handler+0xaa>
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_object_protected_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_object_protected_params_t * p_optiga_write_protected_data = (optiga_set_object_protected_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
1000524e:	4804      	ldr	r0, [pc, #16]	; (10005260 <optiga_cmd_set_object_protected_handler+0xb4>)
10005250:	e001      	b.n	10005256 <optiga_cmd_set_object_protected_handler+0xaa>
            // APDU header size + Set Object protected tag 1 bytes + length of buffer 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                p_optiga_write_protected_data->p_protected_update_buffer_length;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10005252:	2081      	movs	r0, #129	; 0x81
10005254:	0080      	lsls	r0, r0, #2
        break;
        default:
            break;
    }
    return (return_status);
}
10005256:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10005258:	00000615 	.word	0x00000615
1000525c:	100059d9 	.word	0x100059d9
10005260:	00000202 	.word	0x00000202

10005264 <optiga_cmd_gen_keypair_handler>:
#if defined (OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED) || defined (OPTIGA_CRYPT_RSA_GENERATE_KEYPAIR_ENABLED)
/*
* GenKeyPair handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_gen_keypair_handler(optiga_cmd_t * me)
{
10005264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t *)me->p_input;
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005266:	466b      	mov	r3, sp
10005268:	1c9d      	adds	r5, r3, #2
1000526a:	2309      	movs	r3, #9
1000526c:	802b      	strh	r3, [r5, #0]
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
1000526e:	7d83      	ldrb	r3, [r0, #22]
#if defined (OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED) || defined (OPTIGA_CRYPT_RSA_GENERATE_KEYPAIR_ENABLED)
/*
* GenKeyPair handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_gen_keypair_handler(optiga_cmd_t * me)
{
10005270:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t *)me->p_input;
10005272:	6886      	ldr	r6, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
10005274:	2b08      	cmp	r3, #8
10005276:	d002      	beq.n	1000527e <optiga_cmd_gen_keypair_handler+0x1a>
10005278:	2b09      	cmp	r3, #9
1000527a:	d03e      	beq.n	100052fa <optiga_cmd_gen_keypair_handler+0x96>
1000527c:	e088      	b.n	10005390 <optiga_cmd_gen_keypair_handler+0x12c>
1000527e:	6802      	ldr	r2, [r0, #0]
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *p_optiga_ecc_gen_keypair->public_key_length = 0;
                break;
            }
            if (FALSE == p_optiga_ecc_gen_keypair->export_private_key)
10005280:	7873      	ldrb	r3, [r6, #1]
            {
                ///TLV formation for private key OID
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_TAG,
                                               CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
10005282:	320d      	adds	r2, #13
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *p_optiga_ecc_gen_keypair->public_key_length = 0;
                break;
            }
            if (FALSE == p_optiga_ecc_gen_keypair->export_private_key)
10005284:	2b00      	cmp	r3, #0
10005286:	d120      	bne.n	100052ca <optiga_cmd_gen_keypair_handler+0x66>
            {
                ///TLV formation for private key OID
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_TAG,
10005288:	2001      	movs	r0, #1
1000528a:	2102      	movs	r1, #2
1000528c:	1c2b      	adds	r3, r5, #0
1000528e:	f7ff f983 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                               CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
                ///Update OID based on input param
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005292:	8828      	ldrh	r0, [r5, #0]
10005294:	6823      	ldr	r3, [r4, #0]
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
10005296:	8871      	ldrh	r1, [r6, #2]
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_TAG,
                                               CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
                ///Update OID based on input param
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005298:	1818      	adds	r0, r3, r0
1000529a:	300d      	adds	r0, #13
1000529c:	2900      	cmp	r1, #0
1000529e:	d100      	bne.n	100052a2 <optiga_cmd_gen_keypair_handler+0x3e>
100052a0:	8aa1      	ldrh	r1, [r4, #20]
100052a2:	f7fe ffeb 	bl	1000427c <optiga_common_set_uint16>
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
                                         me->session_oid:(uint16_t)p_optiga_ecc_gen_keypair->private_key_oid));

                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100052a6:	882b      	ldrh	r3, [r5, #0]
                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_KEY_USAGE_TAG,
                                               CMD_GEN_KEY_PAIR_KEY_USAGE_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
100052a8:	6822      	ldr	r2, [r4, #0]
                ///Update OID based on input param
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
                                         me->session_oid:(uint16_t)p_optiga_ecc_gen_keypair->private_key_oid));

                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100052aa:	3302      	adds	r3, #2
100052ac:	802b      	strh	r3, [r5, #0]
                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_KEY_USAGE_TAG,
                                               CMD_GEN_KEY_PAIR_KEY_USAGE_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
100052ae:	320d      	adds	r2, #13
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
                                         me->session_oid:(uint16_t)p_optiga_ecc_gen_keypair->private_key_oid));

                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_KEY_USAGE_TAG,
100052b0:	2101      	movs	r1, #1
100052b2:	1c2b      	adds	r3, r5, #0
100052b4:	2002      	movs	r0, #2
100052b6:	f7ff f96f 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                               CMD_GEN_KEY_PAIR_KEY_USAGE_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_ecc_gen_keypair->key_usage;
100052ba:	882b      	ldrh	r3, [r5, #0]
100052bc:	6821      	ldr	r1, [r4, #0]
100052be:	1c5a      	adds	r2, r3, #1
100052c0:	802a      	strh	r2, [r5, #0]
100052c2:	7832      	ldrb	r2, [r6, #0]
100052c4:	18cb      	adds	r3, r1, r3
100052c6:	735a      	strb	r2, [r3, #13]
100052c8:	e004      	b.n	100052d4 <optiga_cmd_gen_keypair_handler+0x70>
            }
            else
            {
                ///TLV formation for export key
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_EXPORT_KEY_TAG,
100052ca:	2007      	movs	r0, #7
100052cc:	2100      	movs	r1, #0
100052ce:	1c2b      	adds	r3, r5, #0
100052d0:	f7ff f962 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
100052d4:	882b      	ldrh	r3, [r5, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100052d6:	25b8      	movs	r5, #184	; 0xb8
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
100052d8:	1c19      	adds	r1, r3, #0
100052da:	7e20      	ldrb	r0, [r4, #24]
                                            (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
            me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
100052dc:	6822      	ldr	r2, [r4, #0]
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
100052de:	3909      	subs	r1, #9
100052e0:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
100052e2:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
100052e4:	0a08      	lsrs	r0, r1, #8
100052e6:	7510      	strb	r0, [r2, #20]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100052e8:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
100052ea:	7551      	strb	r1, [r2, #21]
            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
                                            (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
            me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
100052ec:	6822      	ldr	r2, [r4, #0]
100052ee:	3b05      	subs	r3, #5
100052f0:	8093      	strh	r3, [r2, #4]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
100052f2:	2309      	movs	r3, #9
            return_status = OPTIGA_LIB_SUCCESS;
100052f4:	2000      	movs	r0, #0
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
                                            (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
            me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
100052f6:	75a3      	strb	r3, [r4, #22]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
100052f8:	e04b      	b.n	10005392 <optiga_cmd_gen_keypair_handler+0x12e>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for generate keypair command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
100052fa:	6800      	ldr	r0, [r0, #0]
100052fc:	7c83      	ldrb	r3, [r0, #18]
100052fe:	2bff      	cmp	r3, #255	; 0xff
10005300:	d107      	bne.n	10005312 <optiga_cmd_gen_keypair_handler+0xae>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
                *p_optiga_ecc_gen_keypair->public_key_length = 0;
10005302:	2200      	movs	r2, #0
10005304:	6933      	ldr	r3, [r6, #16]
10005306:	801a      	strh	r2, [r3, #0]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005308:	237f      	movs	r3, #127	; 0x7f
1000530a:	7f22      	ldrb	r2, [r4, #28]
1000530c:	4013      	ands	r3, r2
1000530e:	7723      	strb	r3, [r4, #28]
10005310:	e03e      	b.n	10005390 <optiga_cmd_gen_keypair_handler+0x12c>
                break;
            }
            header_offset = 0;
10005312:	2500      	movs	r5, #0
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET - OPTIGA_CMD_UINT16_SIZE_IN_BYTES],
10005314:	3014      	adds	r0, #20
10005316:	a901      	add	r1, sp, #4
10005318:	f7fe ffbc 	bl	10004294 <optiga_common_get_uint16>
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
1000531c:	481d      	ldr	r0, [pc, #116]	; (10005394 <optiga_cmd_gen_keypair_handler+0x130>)
            }
            header_offset = 0;
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET - OPTIGA_CMD_UINT16_SIZE_IN_BYTES],
                                     &out_data_size);

            while (out_data_size > header_offset)
1000531e:	466b      	mov	r3, sp
10005320:	889b      	ldrh	r3, [r3, #4]
10005322:	42ab      	cmp	r3, r5
10005324:	d935      	bls.n	10005392 <optiga_cmd_gen_keypair_handler+0x12e>
            {
                if (CMD_GEN_KEY_PAIR_PUBLIC_KEY_TAG ==
                    me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset])
10005326:	6823      	ldr	r3, [r4, #0]
10005328:	195a      	adds	r2, r3, r5
1000532a:	7d92      	ldrb	r2, [r2, #22]
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET - OPTIGA_CMD_UINT16_SIZE_IN_BYTES],
                                     &out_data_size);

            while (out_data_size > header_offset)
            {
                if (CMD_GEN_KEY_PAIR_PUBLIC_KEY_TAG ==
1000532c:	2a02      	cmp	r2, #2
1000532e:	d119      	bne.n	10005364 <optiga_cmd_gen_keypair_handler+0x100>
                    me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset])
                {
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
10005330:	1958      	adds	r0, r3, r5
10005332:	466b      	mov	r3, sp
10005334:	1d9f      	adds	r7, r3, #6
10005336:	1c39      	adds	r1, r7, #0
10005338:	3017      	adds	r0, #23
1000533a:	f7fe ffab 	bl	10004294 <optiga_common_get_uint16>
                                                header_offset + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &public_key_length);
                    if (public_key_length > *p_optiga_ecc_gen_keypair->public_key_length)
1000533e:	6933      	ldr	r3, [r6, #16]
10005340:	883a      	ldrh	r2, [r7, #0]
10005342:	8819      	ldrh	r1, [r3, #0]
10005344:	4291      	cmp	r1, r2
10005346:	d204      	bcs.n	10005352 <optiga_cmd_gen_keypair_handler+0xee>
                    {
                        OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                        *p_optiga_ecc_gen_keypair->public_key_length = 0;
10005348:	2200      	movs	r2, #0
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                                header_offset + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &public_key_length);
                    if (public_key_length > *p_optiga_ecc_gen_keypair->public_key_length)
                    {
                        OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
1000534a:	2081      	movs	r0, #129	; 0x81
                        *p_optiga_ecc_gen_keypair->public_key_length = 0;
1000534c:	801a      	strh	r2, [r3, #0]
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                                header_offset + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &public_key_length);
                    if (public_key_length > *p_optiga_ecc_gen_keypair->public_key_length)
                    {
                        OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
1000534e:	0080      	lsls	r0, r0, #2
                        *p_optiga_ecc_gen_keypair->public_key_length = 0;
                        break;
10005350:	e01f      	b.n	10005392 <optiga_cmd_gen_keypair_handler+0x12e>
                    }
                    *p_optiga_ecc_gen_keypair->public_key_length = public_key_length;
10005352:	801a      	strh	r2, [r3, #0]
                    pal_os_memcpy(p_optiga_ecc_gen_keypair->public_key,
10005354:	6823      	ldr	r3, [r4, #0]
10005356:	68f0      	ldr	r0, [r6, #12]
10005358:	1959      	adds	r1, r3, r5
1000535a:	3119      	adds	r1, #25
1000535c:	f006 ff67 	bl	1000c22e <memcpy>
10005360:	6933      	ldr	r3, [r6, #16]
10005362:	e00f      	b.n	10005384 <optiga_cmd_gen_keypair_handler+0x120>
                                   *p_optiga_ecc_gen_keypair->public_key_length);
                    header_offset +=  (uint16_t)OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG +
                                        *p_optiga_ecc_gen_keypair->public_key_length;
                    return_status = OPTIGA_LIB_SUCCESS;
                }
                else if (CMD_GEN_KEY_PAIR_PRIVATE_KEY_TAG == me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
10005364:	2a01      	cmp	r2, #1
10005366:	d114      	bne.n	10005392 <optiga_cmd_gen_keypair_handler+0x12e>
                                                             header_offset])
                {
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset
10005368:	1958      	adds	r0, r3, r5
1000536a:	3017      	adds	r0, #23
1000536c:	4669      	mov	r1, sp
1000536e:	f7fe ff91 	bl	10004294 <optiga_common_get_uint16>
                                             + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &private_key_length);

                    pal_os_memcpy(p_optiga_ecc_gen_keypair->private_key,
10005372:	466b      	mov	r3, sp
10005374:	881a      	ldrh	r2, [r3, #0]
10005376:	6823      	ldr	r3, [r4, #0]
10005378:	6870      	ldr	r0, [r6, #4]
1000537a:	1959      	adds	r1, r3, r5
1000537c:	3119      	adds	r1, #25
1000537e:	f006 ff56 	bl	1000c22e <memcpy>
10005382:	466b      	mov	r3, sp
10005384:	881b      	ldrh	r3, [r3, #0]
10005386:	2000      	movs	r0, #0
10005388:	3303      	adds	r3, #3
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
                                  OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG], private_key_length);
                    header_offset +=  OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG + private_key_length;
1000538a:	18ed      	adds	r5, r5, r3
1000538c:	b2ad      	uxth	r5, r5
1000538e:	e7c6      	b.n	1000531e <optiga_cmd_gen_keypair_handler+0xba>
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005390:	4800      	ldr	r0, [pc, #0]	; (10005394 <optiga_cmd_gen_keypair_handler+0x130>)
        default:
            break;
    }

    return (return_status);
}
10005392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10005394:	00000202 	.word	0x00000202

10005398 <optiga_cmd_encrypt_asym_handler>:
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005398:	2309      	movs	r3, #9

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
1000539a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
1000539c:	ac01      	add	r4, sp, #4
1000539e:	8023      	strh	r3, [r4, #0]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
100053a0:	7d83      	ldrb	r3, [r0, #22]

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
100053a2:	1c06      	adds	r6, r0, #0
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
100053a4:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
100053a6:	2b08      	cmp	r3, #8
100053a8:	d003      	beq.n	100053b2 <optiga_cmd_encrypt_asym_handler+0x1a>
100053aa:	2b09      	cmp	r3, #9
100053ac:	d100      	bne.n	100053b0 <optiga_cmd_encrypt_asym_handler+0x18>
100053ae:	e087      	b.n	100054c0 <optiga_cmd_encrypt_asym_handler+0x128>
100053b0:	e0aa      	b.n	10005508 <optiga_cmd_encrypt_asym_handler+0x170>
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending asymmetric encryption command..");
            // APDU header length + default TLV of OID of session + default TLV of OID of public key
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES) + (OPTIGA_CMD_APDU_TL_LENGTH +
                                OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            if (NULL != p_optiga_encrypt_asym->message)
100053b2:	68a8      	ldr	r0, [r5, #8]
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending asymmetric encryption command..");
            // APDU header length + default TLV of OID of session + default TLV of OID of public key
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES) + (OPTIGA_CMD_APDU_TL_LENGTH +
100053b4:	230e      	movs	r3, #14
                                OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            if (NULL != p_optiga_encrypt_asym->message)
100053b6:	2800      	cmp	r0, #0
100053b8:	d002      	beq.n	100053c0 <optiga_cmd_encrypt_asym_handler+0x28>
            {
                // Add TLV of message and reduce 2 it is already added by default
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
100053ba:	882b      	ldrh	r3, [r5, #0]
100053bc:	330c      	adds	r3, #12
100053be:	b29b      	uxth	r3, r3
            }
            if (p_optiga_encrypt_asym->public_key_source_type)
100053c0:	7b2a      	ldrb	r2, [r5, #12]
100053c2:	2a00      	cmp	r2, #0
100053c4:	d004      	beq.n	100053d0 <optiga_cmd_encrypt_asym_handler+0x38>
100053c6:	692a      	ldr	r2, [r5, #16]
100053c8:	8892      	ldrh	r2, [r2, #4]
100053ca:	3202      	adds	r2, #2
            {
                // Add TLV of public key and reduce 1 because alg id is only 1 byte
                total_apdu_length += (OPTIGA_CMD_APDU_TL_LENGTH +(PUBLIC_KEY_HOST->length));
                total_apdu_length--;
100053cc:	189b      	adds	r3, r3, r2
100053ce:	b29b      	uxth	r3, r3
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
100053d0:	4a4e      	ldr	r2, [pc, #312]	; (1000550c <optiga_cmd_encrypt_asym_handler+0x174>)
100053d2:	4293      	cmp	r3, r2
100053d4:	d903      	bls.n	100053de <optiga_cmd_encrypt_asym_handler+0x46>
            {
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
100053d6:	2200      	movs	r2, #0
100053d8:	686b      	ldr	r3, [r5, #4]
100053da:	801a      	strh	r2, [r3, #0]
100053dc:	e088      	b.n	100054f0 <optiga_cmd_encrypt_asym_handler+0x158>
100053de:	6832      	ldr	r2, [r6, #0]
100053e0:	8829      	ldrh	r1, [r5, #0]
            if ((NULL == p_optiga_encrypt_asym->message) && (0 == p_optiga_encrypt_asym->message_length))
            {
                //TLV formation for session
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_SESSION_OID_TAG,
                                              CMD_ENCRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
100053e2:	320d      	adds	r2, #13
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // message for encryption
            if ((NULL == p_optiga_encrypt_asym->message) && (0 == p_optiga_encrypt_asym->message_length))
100053e4:	2800      	cmp	r0, #0
100053e6:	d110      	bne.n	1000540a <optiga_cmd_encrypt_asym_handler+0x72>
100053e8:	2900      	cmp	r1, #0
100053ea:	d10e      	bne.n	1000540a <optiga_cmd_encrypt_asym_handler+0x72>
            {
                //TLV formation for session
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_SESSION_OID_TAG,
100053ec:	3002      	adds	r0, #2
100053ee:	1c01      	adds	r1, r0, #0
100053f0:	1c23      	adds	r3, r4, #0
100053f2:	f7ff f8d1 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              CMD_ENCRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                //Add session OID
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data ), (me->session_oid));
100053f6:	6833      	ldr	r3, [r6, #0]
100053f8:	8820      	ldrh	r0, [r4, #0]
100053fa:	8ab1      	ldrh	r1, [r6, #20]
100053fc:	1818      	adds	r0, r3, r0
100053fe:	300d      	adds	r0, #13
10005400:	f7fe ff3c 	bl	1000427c <optiga_common_set_uint16>
                index_for_data += 2;
10005404:	8823      	ldrh	r3, [r4, #0]
10005406:	3302      	adds	r3, #2
10005408:	e00e      	b.n	10005428 <optiga_cmd_encrypt_asym_handler+0x90>
            }
            else
            {
                //TLV formation for message
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_MESSAGE_TAG,
1000540a:	2061      	movs	r0, #97	; 0x61
1000540c:	1c23      	adds	r3, r4, #0
1000540e:	f7ff f8c3 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              p_optiga_encrypt_asym->message_length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005412:	6833      	ldr	r3, [r6, #0]
10005414:	8820      	ldrh	r0, [r4, #0]
10005416:	882a      	ldrh	r2, [r5, #0]
10005418:	1818      	adds	r0, r3, r0
1000541a:	300d      	adds	r0, #13
1000541c:	68a9      	ldr	r1, [r5, #8]
1000541e:	f006 ff06 	bl	1000c22e <memcpy>
                                p_optiga_encrypt_asym->message,
                                p_optiga_encrypt_asym->message_length);
                index_for_data += p_optiga_encrypt_asym->message_length;
10005422:	882a      	ldrh	r2, [r5, #0]
10005424:	8823      	ldrh	r3, [r4, #0]
10005426:	18d3      	adds	r3, r2, r3
10005428:	8023      	strh	r3, [r4, #0]
1000542a:	6832      	ldr	r2, [r6, #0]

            }

            // key for encryption

            if (p_optiga_encrypt_asym->public_key_source_type)
1000542c:	7b2b      	ldrb	r3, [r5, #12]
            {

                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
                                              CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
1000542e:	320d      	adds	r2, #13

            }

            // key for encryption

            if (p_optiga_encrypt_asym->public_key_source_type)
10005430:	2b00      	cmp	r3, #0
10005432:	d022      	beq.n	1000547a <optiga_cmd_encrypt_asym_handler+0xe2>
            {

                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
10005434:	2005      	movs	r0, #5
10005436:	2101      	movs	r1, #1
10005438:	1c23      	adds	r3, r4, #0
1000543a:	f7ff f8ad 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;
1000543e:	8823      	ldrh	r3, [r4, #0]
10005440:	6831      	ldr	r1, [r6, #0]
10005442:	1c5a      	adds	r2, r3, #1
10005444:	8022      	strh	r2, [r4, #0]
10005446:	692a      	ldr	r2, [r5, #16]
10005448:	18cb      	adds	r3, r1, r3
1000544a:	7992      	ldrb	r2, [r2, #6]

                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
1000544c:	2006      	movs	r0, #6
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
                                              CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;
1000544e:	735a      	strb	r2, [r3, #13]

                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
10005450:	692b      	ldr	r3, [r5, #16]
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
10005452:	6832      	ldr	r2, [r6, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;

                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
10005454:	8899      	ldrh	r1, [r3, #4]
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
10005456:	320d      	adds	r2, #13
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;

                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
10005458:	1c23      	adds	r3, r4, #0
1000545a:	f7ff f89d 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
1000545e:	6832      	ldr	r2, [r6, #0]
10005460:	8820      	ldrh	r0, [r4, #0]
10005462:	692b      	ldr	r3, [r5, #16]
10005464:	1810      	adds	r0, r2, r0
10005466:	6819      	ldr	r1, [r3, #0]
10005468:	889a      	ldrh	r2, [r3, #4]
1000546a:	300d      	adds	r0, #13
1000546c:	f006 fedf 	bl	1000c22e <memcpy>
                              PUBLIC_KEY_HOST->public_key,
                              PUBLIC_KEY_HOST->length);

                index_for_data += PUBLIC_KEY_HOST->length;
10005470:	692b      	ldr	r3, [r5, #16]
10005472:	889a      	ldrh	r2, [r3, #4]
10005474:	8823      	ldrh	r3, [r4, #0]
10005476:	18d3      	adds	r3, r2, r3
10005478:	e00e      	b.n	10005498 <optiga_cmd_encrypt_asym_handler+0x100>
#undef PUBLIC_KEY_HOST
            }
            else
            {
                //TLV for public key from OID
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_TAG,
1000547a:	2004      	movs	r0, #4
1000547c:	2102      	movs	r1, #2
1000547e:	1c23      	adds	r3, r4, #0
10005480:	f7ff f88a 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                //Add session OID
                optiga_common_set_uint16(me->p_optiga->optiga_comms_buffer + index_for_data,
10005484:	6833      	ldr	r3, [r6, #0]
10005486:	8820      	ldrh	r0, [r4, #0]
10005488:	1818      	adds	r0, r3, r0
1000548a:	692b      	ldr	r3, [r5, #16]
1000548c:	300d      	adds	r0, #13
1000548e:	8819      	ldrh	r1, [r3, #0]
10005490:	f7fe fef4 	bl	1000427c <optiga_common_set_uint16>
                                        *((uint16_t * )(p_optiga_encrypt_asym->key)));
                index_for_data += CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
10005494:	8823      	ldrh	r3, [r4, #0]
10005496:	3302      	adds	r3, #2
10005498:	8023      	strh	r3, [r4, #0]
            }


            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
1000549a:	8823      	ldrh	r3, [r4, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000549c:	249e      	movs	r4, #158	; 0x9e
                index_for_data += CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
            }


            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
1000549e:	1c19      	adds	r1, r3, #0
100054a0:	7e30      	ldrb	r0, [r6, #24]
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
100054a2:	6832      	ldr	r2, [r6, #0]
                index_for_data += CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
            }


            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
100054a4:	3909      	subs	r1, #9
100054a6:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
100054a8:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
100054aa:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100054ac:	7494      	strb	r4, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
100054ae:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
100054b0:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
100054b2:	6832      	ldr	r2, [r6, #0]
100054b4:	3b05      	subs	r3, #5
100054b6:	8093      	strh	r3, [r2, #4]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
100054b8:	2309      	movs	r3, #9
100054ba:	75b3      	strb	r3, [r6, #22]
            return_status = OPTIGA_LIB_SUCCESS;
100054bc:	2000      	movs	r0, #0
        }
        break;
100054be:	e024      	b.n	1000550a <optiga_cmd_encrypt_asym_handler+0x172>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for asymmetric encryption command...");
            // check if the random data retrieval app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
100054c0:	6800      	ldr	r0, [r0, #0]
100054c2:	7c84      	ldrb	r4, [r0, #18]
100054c4:	2c00      	cmp	r4, #0
100054c6:	d007      	beq.n	100054d8 <optiga_cmd_encrypt_asym_handler+0x140>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
100054c8:	2200      	movs	r2, #0
100054ca:	686b      	ldr	r3, [r5, #4]
100054cc:	801a      	strh	r2, [r3, #0]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
100054ce:	237f      	movs	r3, #127	; 0x7f
100054d0:	7f32      	ldrb	r2, [r6, #28]
100054d2:	4013      	ands	r3, r2
100054d4:	7733      	strb	r3, [r6, #28]
100054d6:	e017      	b.n	10005508 <optiga_cmd_encrypt_asym_handler+0x170>
                break;
            }
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_NO_OF_BYTES_IN_TAG],
100054d8:	466b      	mov	r3, sp
100054da:	1d9f      	adds	r7, r3, #6
100054dc:	1c39      	adds	r1, r7, #0
100054de:	3017      	adds	r0, #23
100054e0:	f7fe fed8 	bl	10004294 <optiga_common_get_uint16>
                                     &out_data_size);
            if ((*(p_optiga_encrypt_asym->processed_message_length )) < out_data_size)
100054e4:	686b      	ldr	r3, [r5, #4]
100054e6:	883a      	ldrh	r2, [r7, #0]
100054e8:	8819      	ldrh	r1, [r3, #0]
100054ea:	4291      	cmp	r1, r2
100054ec:	d203      	bcs.n	100054f6 <optiga_cmd_encrypt_asym_handler+0x15e>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
100054ee:	801c      	strh	r4, [r3, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
100054f0:	2081      	movs	r0, #129	; 0x81
100054f2:	0080      	lsls	r0, r0, #2
                break;
100054f4:	e009      	b.n	1000550a <optiga_cmd_encrypt_asym_handler+0x172>
            }
            //copy data from optiga comms buffer to user provided buffer
            pal_os_memcpy(p_optiga_encrypt_asym->processed_message,
100054f6:	6831      	ldr	r1, [r6, #0]
100054f8:	6968      	ldr	r0, [r5, #20]
100054fa:	3119      	adds	r1, #25
100054fc:	f006 fe97 	bl	1000c22e <memcpy>
                          &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                          OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            *(p_optiga_encrypt_asym->processed_message_length) = out_data_size ;
10005500:	883a      	ldrh	r2, [r7, #0]
10005502:	686b      	ldr	r3, [r5, #4]
10005504:	801a      	strh	r2, [r3, #0]
10005506:	e7d9      	b.n	100054bc <optiga_cmd_encrypt_asym_handler+0x124>
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005508:	4801      	ldr	r0, [pc, #4]	; (10005510 <optiga_cmd_encrypt_asym_handler+0x178>)
        default:
            break;
    }

    return (return_status);
}
1000550a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000550c:	00000615 	.word	0x00000615
10005510:	00000202 	.word	0x00000202

10005514 <optiga_cmd_decrypt_asym_handler>:
_STATIC_H optiga_lib_status_t optiga_cmd_decrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005514:	2309      	movs	r3, #9

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_decrypt_asym_handler(optiga_cmd_t * me)
{
10005516:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t total_apdu_length;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005518:	ae01      	add	r6, sp, #4
1000551a:	8033      	strh	r3, [r6, #0]
    uint16_t out_data_size;

    switch ((uint8_t)me->cmd_next_execution_state)
1000551c:	7d83      	ldrb	r3, [r0, #22]

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_decrypt_asym_handler(optiga_cmd_t * me)
{
1000551e:	1c05      	adds	r5, r0, #0
    uint16_t total_apdu_length;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t *)me->p_input;
10005520:	6884      	ldr	r4, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;

    switch ((uint8_t)me->cmd_next_execution_state)
10005522:	2b08      	cmp	r3, #8
10005524:	d002      	beq.n	1000552c <optiga_cmd_decrypt_asym_handler+0x18>
10005526:	2b09      	cmp	r3, #9
10005528:	d060      	beq.n	100055ec <optiga_cmd_decrypt_asym_handler+0xd8>
1000552a:	e08c      	b.n	10005646 <optiga_cmd_decrypt_asym_handler+0x132>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending asymmetric decryption command..");
            // APDU headed length + TLV of encrypt message + TLV of decrypt key OID + (optional)TLV of session key OID
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + p_optiga_decrypt_asym->message_length +
1000552c:	6963      	ldr	r3, [r4, #20]
1000552e:	8821      	ldrh	r1, [r4, #0]
10005530:	2005      	movs	r0, #5
10005532:	2b00      	cmp	r3, #0
10005534:	d004      	beq.n	10005540 <optiga_cmd_decrypt_asym_handler+0x2c>
10005536:	6862      	ldr	r2, [r4, #4]
10005538:	4253      	negs	r3, r2
1000553a:	415a      	adcs	r2, r3
1000553c:	4252      	negs	r2, r2
1000553e:	4010      	ands	r0, r2
10005540:	1c0b      	adds	r3, r1, #0
10005542:	330c      	adds	r3, #12
10005544:	18c3      	adds	r3, r0, r3
                                OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                ((NULL != p_optiga_decrypt_asym->processed_message) &&
                                (NULL != p_optiga_decrypt_asym->processed_message_length)
                                ? 0 : OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10005546:	4a42      	ldr	r2, [pc, #264]	; (10005650 <optiga_cmd_decrypt_asym_handler+0x13c>)
10005548:	b29b      	uxth	r3, r3
1000554a:	4293      	cmp	r3, r2
1000554c:	d903      	bls.n	10005556 <optiga_cmd_decrypt_asym_handler+0x42>
            {
                if (NULL != p_optiga_decrypt_asym->processed_message_length)
1000554e:	6863      	ldr	r3, [r4, #4]
10005550:	2b00      	cmp	r3, #0
10005552:	d16b      	bne.n	1000562c <optiga_cmd_decrypt_asym_handler+0x118>
10005554:	e079      	b.n	1000564a <optiga_cmd_decrypt_asym_handler+0x136>
                break;
            }
            // Tag and length for encrypt message
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_ENCRYPT_MESSAGE_TAG,
                                          p_optiga_decrypt_asym->message_length,
                                          me->p_optiga->optiga_comms_buffer,
10005556:	682a      	ldr	r2, [r5, #0]
                }
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            // Tag and length for encrypt message
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_ENCRYPT_MESSAGE_TAG,
10005558:	2061      	movs	r0, #97	; 0x61
                                          p_optiga_decrypt_asym->message_length,
                                          me->p_optiga->optiga_comms_buffer,
1000555a:	320d      	adds	r2, #13
                }
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            // Tag and length for encrypt message
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_ENCRYPT_MESSAGE_TAG,
1000555c:	1c33      	adds	r3, r6, #0
1000555e:	f7ff f81b 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          p_optiga_decrypt_asym->message_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //Encrypt data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005562:	682b      	ldr	r3, [r5, #0]
10005564:	8830      	ldrh	r0, [r6, #0]
10005566:	8822      	ldrh	r2, [r4, #0]
10005568:	1818      	adds	r0, r3, r0
1000556a:	68a1      	ldr	r1, [r4, #8]
1000556c:	300d      	adds	r0, #13
1000556e:	f006 fe5e 	bl	1000c22e <memcpy>
                          p_optiga_decrypt_asym->message,
                          p_optiga_decrypt_asym->message_length);

            index_for_data += p_optiga_decrypt_asym->message_length;
10005572:	8822      	ldrh	r2, [r4, #0]
10005574:	8833      	ldrh	r3, [r6, #0]

            // Tag and length for OID of decrypt key
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_DECRYPT_KEY_TAG,
10005576:	2003      	movs	r0, #3
            //Encrypt data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_decrypt_asym->message,
                          p_optiga_decrypt_asym->message_length);

            index_for_data += p_optiga_decrypt_asym->message_length;
10005578:	18d3      	adds	r3, r2, r3

            // Tag and length for OID of decrypt key
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_DECRYPT_KEY_TAG,
                                          CMD_DECRYPT_ASYM_DECRYPT_KEY_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
1000557a:	682a      	ldr	r2, [r5, #0]
            //Encrypt data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_decrypt_asym->message,
                          p_optiga_decrypt_asym->message_length);

            index_for_data += p_optiga_decrypt_asym->message_length;
1000557c:	8033      	strh	r3, [r6, #0]

            // Tag and length for OID of decrypt key
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_DECRYPT_KEY_TAG,
                                          CMD_DECRYPT_ASYM_DECRYPT_KEY_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
1000557e:	320d      	adds	r2, #13
                          p_optiga_decrypt_asym->message_length);

            index_for_data += p_optiga_decrypt_asym->message_length;

            // Tag and length for OID of decrypt key
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_DECRYPT_KEY_TAG,
10005580:	2102      	movs	r1, #2
10005582:	1c33      	adds	r3, r6, #0
10005584:	f7ff f808 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                          CMD_DECRYPT_ASYM_DECRYPT_KEY_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //OID of decrypt key
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10005588:	682b      	ldr	r3, [r5, #0]
1000558a:	8830      	ldrh	r0, [r6, #0]
1000558c:	1818      	adds	r0, r3, r0
1000558e:	6923      	ldr	r3, [r4, #16]
10005590:	300d      	adds	r0, #13
10005592:	8819      	ldrh	r1, [r3, #0]
10005594:	f7fe fe72 	bl	1000427c <optiga_common_set_uint16>
                                     (uint16_t)*((optiga_key_id_t*)p_optiga_decrypt_asym->key));
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005598:	8833      	ldrh	r3, [r6, #0]
1000559a:	3302      	adds	r3, #2
1000559c:	8033      	strh	r3, [r6, #0]

            if ((NULL == p_optiga_decrypt_asym->processed_message) &&
1000559e:	6963      	ldr	r3, [r4, #20]
100055a0:	2b00      	cmp	r3, #0
100055a2:	d113      	bne.n	100055cc <optiga_cmd_decrypt_asym_handler+0xb8>
100055a4:	6863      	ldr	r3, [r4, #4]
100055a6:	2b00      	cmp	r3, #0
100055a8:	d110      	bne.n	100055cc <optiga_cmd_decrypt_asym_handler+0xb8>
                (NULL == p_optiga_decrypt_asym->processed_message_length))
            {
                // Tag and length for session OID
                optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_SESSION_OID_TAG,
100055aa:	2002      	movs	r0, #2
                                              CMD_DECRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
100055ac:	682a      	ldr	r2, [r5, #0]

            if ((NULL == p_optiga_decrypt_asym->processed_message) &&
                (NULL == p_optiga_decrypt_asym->processed_message_length))
            {
                // Tag and length for session OID
                optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_SESSION_OID_TAG,
100055ae:	1c01      	adds	r1, r0, #0
                                              CMD_DECRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
100055b0:	320d      	adds	r2, #13

            if ((NULL == p_optiga_decrypt_asym->processed_message) &&
                (NULL == p_optiga_decrypt_asym->processed_message_length))
            {
                // Tag and length for session OID
                optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_SESSION_OID_TAG,
100055b2:	1c33      	adds	r3, r6, #0
100055b4:	f7fe fff0 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              CMD_DECRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
                //OID of decrypt key
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
100055b8:	682b      	ldr	r3, [r5, #0]
100055ba:	8830      	ldrh	r0, [r6, #0]
100055bc:	8aa9      	ldrh	r1, [r5, #20]
100055be:	1818      	adds	r0, r3, r0
100055c0:	300d      	adds	r0, #13
100055c2:	f7fe fe5b 	bl	1000427c <optiga_common_set_uint16>
                                         me->session_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100055c6:	8833      	ldrh	r3, [r6, #0]
100055c8:	3302      	adds	r3, #2
100055ca:	8033      	strh	r3, [r6, #0]
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DECRYPT_ASYM,
100055cc:	8833      	ldrh	r3, [r6, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100055ce:	249f      	movs	r4, #159	; 0x9f
                                         me->session_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DECRYPT_ASYM,
100055d0:	1c19      	adds	r1, r3, #0
100055d2:	7e28      	ldrb	r0, [r5, #24]
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
100055d4:	682a      	ldr	r2, [r5, #0]
                                         me->session_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DECRYPT_ASYM,
100055d6:	3909      	subs	r1, #9
100055d8:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
100055da:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
100055dc:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100055de:	7494      	strb	r4, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
100055e0:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
100055e2:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DECRYPT_ASYM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
100055e4:	682a      	ldr	r2, [r5, #0]
100055e6:	3b05      	subs	r3, #5
100055e8:	8093      	strh	r3, [r2, #4]
100055ea:	e02a      	b.n	10005642 <optiga_cmd_decrypt_asym_handler+0x12e>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for asymmetric decryption command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
100055ec:	6803      	ldr	r3, [r0, #0]
100055ee:	7c9a      	ldrb	r2, [r3, #18]
100055f0:	2aff      	cmp	r2, #255	; 0xff
100055f2:	d109      	bne.n	10005608 <optiga_cmd_decrypt_asym_handler+0xf4>
            {
                if (NULL != p_optiga_decrypt_asym->processed_message_length)
100055f4:	6863      	ldr	r3, [r4, #4]
100055f6:	2b00      	cmp	r3, #0
100055f8:	d001      	beq.n	100055fe <optiga_cmd_decrypt_asym_handler+0xea>
                {
                    *p_optiga_decrypt_asym->processed_message_length = 0;
100055fa:	2200      	movs	r2, #0
100055fc:	801a      	strh	r2, [r3, #0]
                }
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric decryption response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
100055fe:	237f      	movs	r3, #127	; 0x7f
10005600:	7f2a      	ldrb	r2, [r5, #28]
10005602:	4013      	ands	r3, r2
10005604:	772b      	strb	r3, [r5, #28]
10005606:	e01e      	b.n	10005646 <optiga_cmd_decrypt_asym_handler+0x132>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_APDU_TL_LENGTH],
                              out_data_size);
                *p_optiga_decrypt_asym->processed_message_length = out_data_size;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of asymmetric decryption command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
10005608:	6960      	ldr	r0, [r4, #20]
                }
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric decryption response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            if ((NULL != p_optiga_decrypt_asym->processed_message) &&
1000560a:	2800      	cmp	r0, #0
1000560c:	d01f      	beq.n	1000564e <optiga_cmd_decrypt_asym_handler+0x13a>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_APDU_TL_LENGTH],
                              out_data_size);
                *p_optiga_decrypt_asym->processed_message_length = out_data_size;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of asymmetric decryption command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
1000560e:	6860      	ldr	r0, [r4, #4]
                }
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric decryption response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            if ((NULL != p_optiga_decrypt_asym->processed_message) &&
10005610:	2800      	cmp	r0, #0
10005612:	d01c      	beq.n	1000564e <optiga_cmd_decrypt_asym_handler+0x13a>
                (NULL != p_optiga_decrypt_asym->processed_message_length))
            {
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
10005614:	3317      	adds	r3, #23
10005616:	1c18      	adds	r0, r3, #0
10005618:	466b      	mov	r3, sp
1000561a:	1d9e      	adds	r6, r3, #6
1000561c:	1c31      	adds	r1, r6, #0
1000561e:	f7fe fe39 	bl	10004294 <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);
                // if the received decrypted length is greater than the user provided decrypt buffer length
                if ((*(p_optiga_decrypt_asym->processed_message_length )) < out_data_size)
10005622:	6863      	ldr	r3, [r4, #4]
10005624:	8832      	ldrh	r2, [r6, #0]
10005626:	8819      	ldrh	r1, [r3, #0]
10005628:	4291      	cmp	r1, r2
1000562a:	d202      	bcs.n	10005632 <optiga_cmd_decrypt_asym_handler+0x11e>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric decryption response...");
                    *(p_optiga_decrypt_asym->processed_message_length) = 0;
1000562c:	2200      	movs	r2, #0
1000562e:	801a      	strh	r2, [r3, #0]
10005630:	e00b      	b.n	1000564a <optiga_cmd_decrypt_asym_handler+0x136>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    break;
                }

                pal_os_memcpy(p_optiga_decrypt_asym->processed_message,
10005632:	6829      	ldr	r1, [r5, #0]
10005634:	6960      	ldr	r0, [r4, #20]
10005636:	3119      	adds	r1, #25
10005638:	f006 fdf9 	bl	1000c22e <memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_APDU_TL_LENGTH],
                              out_data_size);
                *p_optiga_decrypt_asym->processed_message_length = out_data_size;
1000563c:	8832      	ldrh	r2, [r6, #0]
1000563e:	6863      	ldr	r3, [r4, #4]
10005640:	801a      	strh	r2, [r3, #0]
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of asymmetric decryption command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
10005642:	2000      	movs	r0, #0
10005644:	e003      	b.n	1000564e <optiga_cmd_decrypt_asym_handler+0x13a>
*/
_STATIC_H optiga_lib_status_t optiga_cmd_decrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005646:	4803      	ldr	r0, [pc, #12]	; (10005654 <optiga_cmd_decrypt_asym_handler+0x140>)
10005648:	e001      	b.n	1000564e <optiga_cmd_decrypt_asym_handler+0x13a>
            {
                if (NULL != p_optiga_decrypt_asym->processed_message_length)
                {
                    *(p_optiga_decrypt_asym->processed_message_length) = 0;
                }
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
1000564a:	2081      	movs	r0, #129	; 0x81
1000564c:	0080      	lsls	r0, r0, #2
        default:
            break;
    }

    return (return_status);
}
1000564e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10005650:	00000615 	.word	0x00000615
10005654:	00000202 	.word	0x00000202

10005658 <optiga_cmd_calc_hash_handler>:
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005658:	2309      	movs	r3, #9
#ifdef OPTIGA_CRYPT_HASH_ENABLED
/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
1000565a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000565c:	b085      	sub	sp, #20
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
1000565e:	ae03      	add	r6, sp, #12
10005660:	8033      	strh	r3, [r6, #0]
    uint16_t out_data_size;
    uint16_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
10005662:	7d83      	ldrb	r3, [r0, #22]
#ifdef OPTIGA_CRYPT_HASH_ENABLED
/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
10005664:	1c05      	adds	r5, r0, #0
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
10005666:	6884      	ldr	r4, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
10005668:	2b08      	cmp	r3, #8
1000566a:	d003      	beq.n	10005674 <optiga_cmd_calc_hash_handler+0x1c>
1000566c:	2b09      	cmp	r3, #9
1000566e:	d100      	bne.n	10005672 <optiga_cmd_calc_hash_handler+0x1a>
10005670:	e0ae      	b.n	100057d0 <optiga_cmd_calc_hash_handler+0x178>
10005672:	e0e5      	b.n	10005840 <optiga_cmd_calc_hash_handler+0x1e8>
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate hash command..");
            //Hash Input
            // tag setting
            me->chaining_ongoing = FALSE;
10005674:	2300      	movs	r3, #0
10005676:	75c3      	strb	r3, [r0, #23]
            p_optiga_calc_hash->chaining_status = FALSE;
10005678:	7623      	strb	r3, [r4, #24]


            // add data if available
            if (NULL != p_optiga_calc_hash->p_hash_data)
1000567a:	6863      	ldr	r3, [r4, #4]
1000567c:	6802      	ldr	r2, [r0, #0]
1000567e:	2b00      	cmp	r3, #0
10005680:	d032      	beq.n	100056e8 <optiga_cmd_calc_hash_handler+0x90>
            {
                //continue
                 *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->hash_sequence;
10005682:	230a      	movs	r3, #10
10005684:	8033      	strh	r3, [r6, #0]
10005686:	7b23      	ldrb	r3, [r4, #12]
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEX_HEADER)) - 
10005688:	4f71      	ldr	r7, [pc, #452]	; (10005850 <optiga_cmd_calc_hash_handler+0x1f8>)

            // add data if available
            if (NULL != p_optiga_calc_hash->p_hash_data)
            {
                //continue
                 *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->hash_sequence;
1000568a:	7593      	strb	r3, [r2, #22]
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEX_HEADER)) - 
1000568c:	6863      	ldr	r3, [r4, #4]
1000568e:	6922      	ldr	r2, [r4, #16]
10005690:	685b      	ldr	r3, [r3, #4]
10005692:	1a9b      	subs	r3, r3, r2
10005694:	69e2      	ldr	r2, [r4, #28]
10005696:	1abf      	subs	r7, r7, r2
10005698:	429f      	cmp	r7, r3
1000569a:	d900      	bls.n	1000569e <optiga_cmd_calc_hash_handler+0x46>
1000569c:	1c1f      	adds	r7, r3, #0
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
1000569e:	6828      	ldr	r0, [r5, #0]
                //continue
                 *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->hash_sequence;
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEX_HEADER)) - 
100056a0:	b2bb      	uxth	r3, r7
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
100056a2:	1c19      	adds	r1, r3, #0
100056a4:	3017      	adds	r0, #23
                //continue
                 *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->hash_sequence;
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEX_HEADER)) - 
100056a6:	9301      	str	r3, [sp, #4]
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
100056a8:	f7fe fde8 	bl	1000427c <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100056ac:	8830      	ldrh	r0, [r6, #0]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
100056ae:	682b      	ldr	r3, [r5, #0]
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEX_HEADER)) - 
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100056b0:	3002      	adds	r0, #2
100056b2:	b280      	uxth	r0, r0
100056b4:	8030      	strh	r0, [r6, #0]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
100056b6:	1818      	adds	r0, r3, r0
100056b8:	6863      	ldr	r3, [r4, #4]
100056ba:	b2bf      	uxth	r7, r7
100056bc:	6819      	ldr	r1, [r3, #0]
100056be:	6923      	ldr	r3, [r4, #16]
100056c0:	1c3a      	adds	r2, r7, #0
100056c2:	18c9      	adds	r1, r1, r3
100056c4:	300d      	adds	r0, #13
100056c6:	f006 fdb2 	bl	1000c22e <memcpy>
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;
100056ca:	8833      	ldrh	r3, [r6, #0]
100056cc:	9a01      	ldr	r2, [sp, #4]
100056ce:	18d3      	adds	r3, r2, r3
100056d0:	8033      	strh	r3, [r6, #0]

                p_optiga_calc_hash->data_sent += length_to_hash;
100056d2:	6923      	ldr	r3, [r4, #16]
100056d4:	18ff      	adds	r7, r7, r3
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
100056d6:	6863      	ldr	r3, [r4, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;

                p_optiga_calc_hash->data_sent += length_to_hash;
100056d8:	6127      	str	r7, [r4, #16]
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
100056da:	685b      	ldr	r3, [r3, #4]
100056dc:	429f      	cmp	r7, r3
100056de:	d031      	beq.n	10005744 <optiga_cmd_calc_hash_handler+0xec>
                {
                    me->chaining_ongoing = TRUE;
100056e0:	2301      	movs	r3, #1
100056e2:	75eb      	strb	r3, [r5, #23]
                    p_optiga_calc_hash->chaining_status = TRUE;
100056e4:	7623      	strb	r3, [r4, #24]
100056e6:	e02d      	b.n	10005744 <optiga_cmd_calc_hash_handler+0xec>
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
100056e8:	6821      	ldr	r1, [r4, #0]
100056ea:	7b20      	ldrb	r0, [r4, #12]
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->hash_sequence,
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
100056ec:	320d      	adds	r2, #13
                {
                    me->chaining_ongoing = TRUE;
                    p_optiga_calc_hash->chaining_status = TRUE;
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
100056ee:	2900      	cmp	r1, #0
100056f0:	d025      	beq.n	1000573e <optiga_cmd_calc_hash_handler+0xe6>
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->hash_sequence,
100056f2:	2106      	movs	r1, #6
100056f4:	1c33      	adds	r3, r6, #0
100056f6:	f7fe ff4f 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
100056fa:	682b      	ldr	r3, [r5, #0]
100056fc:	8830      	ldrh	r0, [r6, #0]
100056fe:	1818      	adds	r0, r3, r0
10005700:	6823      	ldr	r3, [r4, #0]
10005702:	300d      	adds	r0, #13
10005704:	8819      	ldrh	r1, [r3, #0]
10005706:	f7fe fdb9 	bl	1000427c <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
1000570a:	8830      	ldrh	r0, [r6, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
1000570c:	682b      	ldr	r3, [r5, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
1000570e:	3002      	adds	r0, #2
10005710:	b280      	uxth	r0, r0
10005712:	8030      	strh	r0, [r6, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005714:	1818      	adds	r0, r3, r0
10005716:	6823      	ldr	r3, [r4, #0]
10005718:	300d      	adds	r0, #13
1000571a:	8859      	ldrh	r1, [r3, #2]
1000571c:	f7fe fdae 	bl	1000427c <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->offset);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005720:	8830      	ldrh	r0, [r6, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005722:	682b      	ldr	r3, [r5, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->offset);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005724:	3002      	adds	r0, #2
10005726:	b280      	uxth	r0, r0
10005728:	8030      	strh	r0, [r6, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
1000572a:	1818      	adds	r0, r3, r0
1000572c:	6823      	ldr	r3, [r4, #0]
1000572e:	300d      	adds	r0, #13
10005730:	8899      	ldrh	r1, [r3, #4]
10005732:	f7fe fda3 	bl	1000427c <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005736:	8833      	ldrh	r3, [r6, #0]
10005738:	3302      	adds	r3, #2
1000573a:	8033      	strh	r3, [r6, #0]
1000573c:	e002      	b.n	10005744 <optiga_cmd_calc_hash_handler+0xec>
            }
            else
            {
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->hash_sequence,
1000573e:	1c33      	adds	r3, r6, #0
10005740:	f7fe ff2a 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                               OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                               me->p_optiga->optiga_comms_buffer,
                                               (uint16_t*)&index_for_data);
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
10005744:	68a3      	ldr	r3, [r4, #8]
10005746:	2b00      	cmp	r3, #0
10005748:	d024      	beq.n	10005794 <optiga_cmd_calc_hash_handler+0x13c>
1000574a:	69e3      	ldr	r3, [r4, #28]
1000574c:	2b00      	cmp	r3, #0
1000574e:	d021      	beq.n	10005794 <optiga_cmd_calc_hash_handler+0x13c>
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
10005750:	8833      	ldrh	r3, [r6, #0]
10005752:	682a      	ldr	r2, [r5, #0]
10005754:	1c58      	adds	r0, r3, #1
10005756:	18d3      	adds	r3, r2, r3
10005758:	2206      	movs	r2, #6
1000575a:	b280      	uxth	r0, r0
1000575c:	8030      	strh	r0, [r6, #0]
1000575e:	735a      	strb	r2, [r3, #13]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005760:	682b      	ldr	r3, [r5, #0]
10005762:	1818      	adds	r0, r3, r0
10005764:	68a3      	ldr	r3, [r4, #8]
10005766:	300d      	adds	r0, #13
10005768:	8899      	ldrh	r1, [r3, #4]
1000576a:	f7fe fd87 	bl	1000427c <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
1000576e:	8830      	ldrh	r0, [r6, #0]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005770:	682a      	ldr	r2, [r5, #0]
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005772:	3002      	adds	r0, #2

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005774:	68a3      	ldr	r3, [r4, #8]
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005776:	b280      	uxth	r0, r0
10005778:	8030      	strh	r0, [r6, #0]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
1000577a:	1810      	adds	r0, r2, r0
1000577c:	6819      	ldr	r1, [r3, #0]
1000577e:	889a      	ldrh	r2, [r3, #4]
10005780:	300d      	adds	r0, #13
10005782:	f006 fd54 	bl	1000c22e <memcpy>
                              p_optiga_calc_hash->p_hash_context->context_buffer,
                              p_optiga_calc_hash->p_hash_context->context_buffer_length);

                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
10005786:	68a3      	ldr	r3, [r4, #8]
10005788:	889a      	ldrh	r2, [r3, #4]
1000578a:	8833      	ldrh	r3, [r6, #0]
1000578c:	18d3      	adds	r3, r2, r3
1000578e:	8033      	strh	r3, [r6, #0]
                p_optiga_calc_hash->apparent_context_size = 0;
10005790:	2300      	movs	r3, #0
10005792:	61e3      	str	r3, [r4, #28]
            }

            //Export Option
            if ((OPTIGA_CRYPT_HASH_FINAL != p_optiga_calc_hash->hash_sequence)&&
10005794:	7b23      	ldrb	r3, [r4, #12]
10005796:	2b03      	cmp	r3, #3
10005798:	d008      	beq.n	100057ac <optiga_cmd_calc_hash_handler+0x154>
1000579a:	7de9      	ldrb	r1, [r5, #23]
1000579c:	2900      	cmp	r1, #0
1000579e:	d105      	bne.n	100057ac <optiga_cmd_calc_hash_handler+0x154>
                (FALSE == me->chaining_ongoing))
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
100057a0:	682a      	ldr	r2, [r5, #0]

            //Export Option
            if ((OPTIGA_CRYPT_HASH_FINAL != p_optiga_calc_hash->hash_sequence)&&
                (FALSE == me->chaining_ongoing))
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
100057a2:	2007      	movs	r0, #7
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
100057a4:	320d      	adds	r2, #13

            //Export Option
            if ((OPTIGA_CRYPT_HASH_FINAL != p_optiga_calc_hash->hash_sequence)&&
                (FALSE == me->chaining_ongoing))
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
100057a6:	1c33      	adds	r3, r6, #0
100057a8:	f7fe fef6 	bl	10004598 <optiga_cmd_prepare_tag_header>
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
100057ac:	8833      	ldrh	r3, [r6, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100057ae:	24b0      	movs	r4, #176	; 0xb0
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
100057b0:	1c19      	adds	r1, r3, #0
100057b2:	7e28      	ldrb	r0, [r5, #24]
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
100057b4:	682a      	ldr	r2, [r5, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
100057b6:	3909      	subs	r1, #9
100057b8:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
100057ba:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
100057bc:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100057be:	7494      	strb	r4, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
100057c0:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
100057c2:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
100057c4:	682a      	ldr	r2, [r5, #0]
100057c6:	3b05      	subs	r3, #5
100057c8:	8093      	strh	r3, [r2, #4]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
100057ca:	2309      	movs	r3, #9
100057cc:	75ab      	strb	r3, [r5, #22]
100057ce:	e01a      	b.n	10005806 <optiga_cmd_calc_hash_handler+0x1ae>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate hash command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
100057d0:	6800      	ldr	r0, [r0, #0]
100057d2:	7c83      	ldrb	r3, [r0, #18]
100057d4:	2bff      	cmp	r3, #255	; 0xff
100057d6:	d104      	bne.n	100057e2 <optiga_cmd_calc_hash_handler+0x18a>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
100057d8:	7f2a      	ldrb	r2, [r5, #28]
100057da:	3b80      	subs	r3, #128	; 0x80
100057dc:	4013      	ands	r3, r2
100057de:	772b      	strb	r3, [r5, #28]
100057e0:	e02e      	b.n	10005840 <optiga_cmd_calc_hash_handler+0x1e8>
                break;
            }
            if (OPTIGA_CRYPT_HASH_FINAL == p_optiga_calc_hash->hash_sequence)
100057e2:	7b23      	ldrb	r3, [r4, #12]
100057e4:	2b03      	cmp	r3, #3
100057e6:	d110      	bne.n	1000580a <optiga_cmd_calc_hash_handler+0x1b2>
            {
                if (OPTIGA_CRYPT_HASH_DIGEST_OUT != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
100057e8:	7d83      	ldrb	r3, [r0, #22]
100057ea:	2b01      	cmp	r3, #1
100057ec:	d128      	bne.n	10005840 <optiga_cmd_calc_hash_handler+0x1e8>
                {
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
100057ee:	ab02      	add	r3, sp, #8
100057f0:	1d9e      	adds	r6, r3, #6
100057f2:	3017      	adds	r0, #23
100057f4:	1c31      	adds	r1, r6, #0
100057f6:	f7fe fd4d 	bl	10004294 <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);

                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
100057fa:	6829      	ldr	r1, [r5, #0]
100057fc:	6960      	ldr	r0, [r4, #20]
100057fe:	8832      	ldrh	r2, [r6, #0]
10005800:	3119      	adds	r1, #25
10005802:	f006 fd14 	bl	1000c22e <memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
10005806:	2600      	movs	r6, #0
10005808:	e01e      	b.n	10005848 <optiga_cmd_calc_hash_handler+0x1f0>
1000580a:	2600      	movs	r6, #0

                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            }
            else if ((OPTIGA_CRYPT_HASH_FINAL != p_optiga_calc_hash->hash_sequence) &&
1000580c:	7e23      	ldrb	r3, [r4, #24]
1000580e:	42b3      	cmp	r3, r6
10005810:	d11a      	bne.n	10005848 <optiga_cmd_calc_hash_handler+0x1f0>
                    (FALSE == p_optiga_calc_hash->chaining_status))
            {
                if (OPTIGA_CRYPT_INTERMEDIATE != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
10005812:	7d83      	ldrb	r3, [r0, #22]
10005814:	2b06      	cmp	r3, #6
10005816:	d113      	bne.n	10005840 <optiga_cmd_calc_hash_handler+0x1e8>
                {
                    break;
                }

                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
10005818:	ab02      	add	r3, sp, #8
1000581a:	1d9f      	adds	r7, r3, #6
1000581c:	1c39      	adds	r1, r7, #0
1000581e:	3017      	adds	r0, #23
10005820:	f7fe fd38 	bl	10004294 <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);
                if (p_optiga_calc_hash->p_hash_context->context_buffer_length < out_data_size)
10005824:	68a3      	ldr	r3, [r4, #8]
10005826:	883a      	ldrh	r2, [r7, #0]
10005828:	8899      	ldrh	r1, [r3, #4]
1000582a:	4291      	cmp	r1, r2
1000582c:	d30a      	bcc.n	10005844 <optiga_cmd_calc_hash_handler+0x1ec>
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    break;
                }

                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
1000582e:	6829      	ldr	r1, [r5, #0]
10005830:	6818      	ldr	r0, [r3, #0]
10005832:	3119      	adds	r1, #25
10005834:	f006 fcfb 	bl	1000c22e <memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
10005838:	68a3      	ldr	r3, [r4, #8]
1000583a:	883a      	ldrh	r2, [r7, #0]
1000583c:	809a      	strh	r2, [r3, #4]
1000583e:	e003      	b.n	10005848 <optiga_cmd_calc_hash_handler+0x1f0>
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005840:	4e04      	ldr	r6, [pc, #16]	; (10005854 <optiga_cmd_calc_hash_handler+0x1fc>)
10005842:	e001      	b.n	10005848 <optiga_cmd_calc_hash_handler+0x1f0>
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);
                if (p_optiga_calc_hash->p_hash_context->context_buffer_length < out_data_size)
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10005844:	2681      	movs	r6, #129	; 0x81
10005846:	00b6      	lsls	r6, r6, #2
        default:
            break;
    }

    return (return_status);
}
10005848:	1c30      	adds	r0, r6, #0
1000584a:	b005      	add	sp, #20
1000584c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000584e:	46c0      	nop			; (mov r8, r8)
10005850:	00000602 	.word	0x00000602
10005854:	00000202 	.word	0x00000202

10005858 <optiga_cmd_close_application_handler>:

/*
* Close Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_close_application_handler(optiga_cmd_t * me)
{
10005858:	b538      	push	{r3, r4, r5, lr}
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
1000585a:	7d83      	ldrb	r3, [r0, #22]
1000585c:	2b08      	cmp	r3, #8
1000585e:	d002      	beq.n	10005866 <optiga_cmd_close_application_handler+0xe>
10005860:	2b09      	cmp	r3, #9
10005862:	d00c      	beq.n	1000587e <optiga_cmd_close_application_handler+0x26>
10005864:	e037      	b.n	100058d6 <optiga_cmd_close_application_handler+0x7e>
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
10005866:	7e03      	ldrb	r3, [r0, #24]
                                           me->cmd_param,
                                           OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005868:	6802      	ldr	r2, [r0, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000586a:	21f1      	movs	r1, #241	; 0xf1
    p_apdu_buffer [1] = param;
1000586c:	74d3      	strb	r3, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
1000586e:	2300      	movs	r3, #0
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005870:	7491      	strb	r1, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005872:	7513      	strb	r3, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10005874:	7553      	strb	r3, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
                                           me->cmd_param,
                                           OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = OPTIGA_CMD_APDU_HEADER_SIZE;
10005876:	6802      	ldr	r2, [r0, #0]
10005878:	39ed      	subs	r1, #237	; 0xed
1000587a:	8091      	strh	r1, [r2, #4]
1000587c:	e021      	b.n	100058c2 <optiga_cmd_close_application_handler+0x6a>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for close app command...");
            // check if the close app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
1000587e:	6801      	ldr	r1, [r0, #0]
10005880:	7c8d      	ldrb	r5, [r1, #18]
10005882:	2d00      	cmp	r5, #0
10005884:	d004      	beq.n	10005890 <optiga_cmd_close_application_handler+0x38>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing close app response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005886:	237f      	movs	r3, #127	; 0x7f
10005888:	7f02      	ldrb	r2, [r0, #28]
1000588a:	4013      	ands	r3, r2
1000588c:	7703      	strb	r3, [r0, #28]
1000588e:	e022      	b.n	100058d6 <optiga_cmd_close_application_handler+0x7e>
                break;
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
10005890:	7e03      	ldrb	r3, [r0, #24]
10005892:	1c04      	adds	r4, r0, #0
10005894:	2b00      	cmp	r3, #0
10005896:	d012      	beq.n	100058be <optiga_cmd_close_application_handler+0x66>
            {
                pal_os_memcpy(me->p_optiga->optiga_context_handle_buffer,
10005898:	23d0      	movs	r3, #208	; 0xd0
1000589a:	00db      	lsls	r3, r3, #3
1000589c:	18c8      	adds	r0, r1, r3
1000589e:	2208      	movs	r2, #8
100058a0:	3116      	adds	r1, #22
100058a2:	f006 fcc4 	bl	1000c22e <memcpy>
_STATIC_H optiga_lib_status_t optiga_cmd_store_context(const optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
100058a6:	8c20      	ldrh	r0, [r4, #32]
100058a8:	2800      	cmp	r0, #0
100058aa:	d008      	beq.n	100058be <optiga_cmd_close_application_handler+0x66>
        {
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                   me->p_optiga->optiga_context_handle_buffer,
100058ac:	22d0      	movs	r2, #208	; 0xd0
100058ae:	6823      	ldr	r3, [r4, #0]
100058b0:	00d2      	lsls	r2, r2, #3
100058b2:	1899      	adds	r1, r3, r2
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
100058b4:	2208      	movs	r2, #8
100058b6:	f7fb fe5d 	bl	10001574 <pal_os_datastore_write>
                                                   me->p_optiga->optiga_context_handle_buffer,
                                                   sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != return_status)
100058ba:	2800      	cmp	r0, #0
100058bc:	d103      	bne.n	100058c6 <optiga_cmd_close_application_handler+0x6e>
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of close app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;

            // Close Application is successful, invoke optiga_comms_close next
            me->chaining_ongoing = START_OPTIGA_COMMS_CLOSE;
100058be:	2302      	movs	r3, #2
100058c0:	75e3      	strb	r3, [r4, #23]
                                    sizeof(me->p_optiga->optiga_context_handle_buffer));
                    break;
                }
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of close app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
100058c2:	2000      	movs	r0, #0

            // Close Application is successful, invoke optiga_comms_close next
            me->chaining_ongoing = START_OPTIGA_COMMS_CLOSE;
        }
        break;
100058c4:	e008      	b.n	100058d8 <optiga_cmd_close_application_handler+0x80>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
                ///Optiga context store operation
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_store_context(me))
                {
                    pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
100058c6:	23d0      	movs	r3, #208	; 0xd0
100058c8:	6820      	ldr	r0, [r4, #0]
100058ca:	00db      	lsls	r3, r3, #3
100058cc:	18c0      	adds	r0, r0, r3
100058ce:	1c29      	adds	r1, r5, #0
100058d0:	2208      	movs	r2, #8
100058d2:	f006 fcb5 	bl	1000c240 <memset>
100058d6:	4801      	ldr	r0, [pc, #4]	; (100058dc <optiga_cmd_close_application_handler+0x84>)
        default:
            break;
    }

    return (return_status);
}
100058d8:	bd38      	pop	{r3, r4, r5, pc}
100058da:	46c0      	nop			; (mov r8, r8)
100058dc:	00000202 	.word	0x00000202

100058e0 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
100058e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
100058e2:	7d83      	ldrb	r3, [r0, #22]
100058e4:	2b08      	cmp	r3, #8
100058e6:	d002      	beq.n	100058ee <optiga_cmd_open_application_handler+0xe>
100058e8:	2b09      	cmp	r3, #9
100058ea:	d05f      	beq.n	100059ac <optiga_cmd_open_application_handler+0xcc>
100058ec:	e06b      	b.n	100059c6 <optiga_cmd_open_application_handler+0xe6>
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
100058ee:	7e02      	ldrb	r2, [r0, #24]
100058f0:	1c04      	adds	r4, r0, #0
100058f2:	2a00      	cmp	r2, #0
100058f4:	d105      	bne.n	10005902 <optiga_cmd_open_application_handler+0x22>
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
100058f6:	7e21      	ldrb	r1, [r4, #24]
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
                {
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
100058f8:	2210      	movs	r2, #16
100058fa:	2900      	cmp	r1, #0
100058fc:	d021      	beq.n	10005942 <optiga_cmd_open_application_handler+0x62>
100058fe:	2218      	movs	r2, #24
10005900:	e01f      	b.n	10005942 <optiga_cmd_open_application_handler+0x62>
{
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
10005902:	8c00      	ldrh	r0, [r0, #32]
10005904:	2800      	cmp	r0, #0
10005906:	d108      	bne.n	1000591a <optiga_cmd_open_application_handler+0x3a>
            if (PAL_STATUS_SUCCESS != return_status)
            {
                break;
            }
        }
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
10005908:	22d0      	movs	r2, #208	; 0xd0
1000590a:	6823      	ldr	r3, [r4, #0]
1000590c:	00d2      	lsls	r2, r2, #3
1000590e:	1898      	adds	r0, r3, r2
10005910:	f7fe fca8 	bl	10004264 <optiga_common_get_uint32>
10005914:	2800      	cmp	r0, #0
10005916:	d1ee      	bne.n	100058f6 <optiga_cmd_open_application_handler+0x16>
10005918:	e00b      	b.n	10005932 <optiga_cmd_open_application_handler+0x52>
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
1000591a:	466a      	mov	r2, sp
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
                                                  me->p_optiga->optiga_context_handle_buffer,
1000591c:	21d0      	movs	r1, #208	; 0xd0
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
1000591e:	3206      	adds	r2, #6
10005920:	8013      	strh	r3, [r2, #0]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
                                                  me->p_optiga->optiga_context_handle_buffer,
10005922:	6823      	ldr	r3, [r4, #0]
10005924:	00c9      	lsls	r1, r1, #3
10005926:	1859      	adds	r1, r3, r1
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
10005928:	f7fb fe40 	bl	100015ac <pal_os_datastore_read>
                                                  me->p_optiga->optiga_context_handle_buffer,
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
1000592c:	2800      	cmp	r0, #0
1000592e:	d0eb      	beq.n	10005908 <optiga_cmd_open_application_handler+0x28>
10005930:	e049      	b.n	100059c6 <optiga_cmd_open_application_handler+0xe6>
            {
                break;
            }
        }
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[4]))
10005932:	6823      	ldr	r3, [r4, #0]
10005934:	4a25      	ldr	r2, [pc, #148]	; (100059cc <optiga_cmd_open_application_handler+0xec>)
10005936:	1898      	adds	r0, r3, r2
10005938:	f7fe fc94 	bl	10004264 <optiga_common_get_uint32>
            if (PAL_STATUS_SUCCESS != return_status)
            {
                break;
            }
        }
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
1000593c:	2800      	cmp	r0, #0
1000593e:	d042      	beq.n	100059c6 <optiga_cmd_open_application_handler+0xe6>
10005940:	e7d9      	b.n	100058f6 <optiga_cmd_open_application_handler+0x16>
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005942:	6823      	ldr	r3, [r4, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005944:	20f0      	movs	r0, #240	; 0xf0
    p_apdu_buffer [1] = param;
10005946:	74d9      	strb	r1, [r3, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005948:	2100      	movs	r1, #0
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
1000594a:	755a      	strb	r2, [r3, #21]
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
1000594c:	7519      	strb	r1, [r3, #20]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000594e:	7498      	strb	r0, [r3, #18]
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
10005950:	6820      	ldr	r0, [r4, #0]
10005952:	491f      	ldr	r1, [pc, #124]	; (100059d0 <optiga_cmd_open_application_handler+0xf0>)
10005954:	3016      	adds	r0, #22
10005956:	2210      	movs	r2, #16
10005958:	f006 fc69 	bl	1000c22e <memcpy>
                          g_optiga_unique_application_identifier,
                          sizeof(g_optiga_unique_application_identifier));
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
1000595c:	7e23      	ldrb	r3, [r4, #24]
1000595e:	2b00      	cmp	r3, #0
10005960:	d008      	beq.n	10005974 <optiga_cmd_open_application_handler+0x94>
            {
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
10005962:	6821      	ldr	r1, [r4, #0]
10005964:	23d0      	movs	r3, #208	; 0xd0
10005966:	1c08      	adds	r0, r1, #0
10005968:	00db      	lsls	r3, r3, #3
1000596a:	3026      	adds	r0, #38	; 0x26
1000596c:	18c9      	adds	r1, r1, r3
1000596e:	2208      	movs	r2, #8
10005970:	f006 fc5d 	bl	1000c22e <memcpy>
                              sizeof(g_optiga_unique_application_identifier)],
                              me->p_optiga->optiga_context_handle_buffer,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
            }

            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
10005974:	7e22      	ldrb	r2, [r4, #24]
10005976:	6820      	ldr	r0, [r4, #0]
10005978:	2314      	movs	r3, #20
1000597a:	2a00      	cmp	r2, #0
1000597c:	d000      	beq.n	10005980 <optiga_cmd_open_application_handler+0xa0>
1000597e:	3308      	adds	r3, #8
10005980:	8083      	strh	r3, [r0, #4]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           sizeof(g_optiga_unique_application_identifier):
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))));

            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
10005982:	23d0      	movs	r3, #208	; 0xd0
                {
                    return_status = OPTIGA_CMD_ERROR;
                    break;
                }
            }
            return_status = OPTIGA_LIB_SUCCESS;
10005984:	2500      	movs	r5, #0
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           sizeof(g_optiga_unique_application_identifier):
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))));

            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
10005986:	00db      	lsls	r3, r3, #3
10005988:	18c0      	adds	r0, r0, r3
1000598a:	2100      	movs	r1, #0
1000598c:	2208      	movs	r2, #8
1000598e:	f006 fc57 	bl	1000c240 <memset>
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
10005992:	8c20      	ldrh	r0, [r4, #32]
10005994:	42a8      	cmp	r0, r5
10005996:	d017      	beq.n	100059c8 <optiga_cmd_open_application_handler+0xe8>
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                       me->p_optiga->optiga_context_handle_buffer,
10005998:	23d0      	movs	r3, #208	; 0xd0
1000599a:	6821      	ldr	r1, [r4, #0]
1000599c:	00db      	lsls	r3, r3, #3
1000599e:	18c9      	adds	r1, r1, r3
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
100059a0:	2208      	movs	r2, #8
100059a2:	f7fb fde7 	bl	10001574 <pal_os_datastore_write>
                                                       me->p_optiga->optiga_context_handle_buffer,
                                                       sizeof(me->p_optiga->optiga_context_handle_buffer));
                if (PAL_STATUS_SUCCESS != return_status)
100059a6:	42a8      	cmp	r0, r5
100059a8:	d10d      	bne.n	100059c6 <optiga_cmd_open_application_handler+0xe6>
100059aa:	e00d      	b.n	100059c8 <optiga_cmd_open_application_handler+0xe8>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for open app command...");

            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
100059ac:	6803      	ldr	r3, [r0, #0]
100059ae:	7c9d      	ldrb	r5, [r3, #18]
100059b0:	2d00      	cmp	r5, #0
100059b2:	d004      	beq.n	100059be <optiga_cmd_open_application_handler+0xde>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
100059b4:	237f      	movs	r3, #127	; 0x7f
100059b6:	7f02      	ldrb	r2, [r0, #28]
100059b8:	4013      	ands	r3, r2
100059ba:	7703      	strb	r3, [r0, #28]
100059bc:	e003      	b.n	100059c6 <optiga_cmd_open_application_handler+0xe6>
                break;
            }
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
100059be:	2233      	movs	r2, #51	; 0x33
100059c0:	681b      	ldr	r3, [r3, #0]
100059c2:	741a      	strb	r2, [r3, #16]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
100059c4:	e000      	b.n	100059c8 <optiga_cmd_open_application_handler+0xe8>
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
100059c6:	4d03      	ldr	r5, [pc, #12]	; (100059d4 <optiga_cmd_open_application_handler+0xf4>)
        default:
            break;
    }

    return (return_status);
}
100059c8:	1c28      	adds	r0, r5, #0
100059ca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100059cc:	00000684 	.word	0x00000684
100059d0:	1000cb28 	.word	0x1000cb28
100059d4:	00000202 	.word	0x00000202

100059d8 <optiga_cmd_queue_scheduler>:
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
100059d8:	23cf      	movs	r3, #207	; 0xcf
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
100059da:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
100059dc:	00db      	lsls	r3, r3, #3
100059de:	58c3      	ldr	r3, [r0, r3]
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
100059e0:	b08b      	sub	sp, #44	; 0x2c
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
100059e2:	9304      	str	r3, [sp, #16]
100059e4:	4b74      	ldr	r3, [pc, #464]	; (10005bb8 <optiga_cmd_queue_scheduler+0x1e0>)
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
100059e6:	1c04      	adds	r4, r0, #0
100059e8:	18c7      	adds	r7, r0, r3
100059ea:	4b74      	ldr	r3, [pc, #464]	; (10005bbc <optiga_cmd_queue_scheduler+0x1e4>)
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
100059ec:	1c3a      	adds	r2, r7, #0
100059ee:	18c3      	adds	r3, r0, r3
100059f0:	9303      	str	r3, [sp, #12]
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
100059f2:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
100059f4:	7811      	ldrb	r1, [r2, #0]
100059f6:	2902      	cmp	r1, #2
100059f8:	d101      	bne.n	100059fe <optiga_cmd_queue_scheduler+0x26>
        {
            count++;
100059fa:	3301      	adds	r3, #1
100059fc:	b2db      	uxtb	r3, r3
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
100059fe:	9903      	ldr	r1, [sp, #12]
10005a00:	320c      	adds	r2, #12
10005a02:	428a      	cmp	r2, r1
10005a04:	d1f6      	bne.n	100059f4 <optiga_cmd_queue_scheduler+0x1c>
10005a06:	1c3a      	adds	r2, r7, #0
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
10005a08:	2b00      	cmp	r3, #0
10005a0a:	d10c      	bne.n	10005a26 <optiga_cmd_queue_scheduler+0x4e>
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
10005a0c:	7811      	ldrb	r1, [r2, #0]
10005a0e:	2908      	cmp	r1, #8
10005a10:	d101      	bne.n	10005a16 <optiga_cmd_queue_scheduler+0x3e>
        {
            count++;
10005a12:	3301      	adds	r3, #1
10005a14:	b2db      	uxtb	r3, r3
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
10005a16:	9903      	ldr	r1, [sp, #12]
10005a18:	320c      	adds	r2, #12
10005a1a:	428a      	cmp	r2, r1
10005a1c:	d1f6      	bne.n	10005a0c <optiga_cmd_queue_scheduler+0x34>
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
10005a1e:	2b00      	cmp	r3, #0
10005a20:	d100      	bne.n	10005a24 <optiga_cmd_queue_scheduler+0x4c>
10005a22:	e0a0      	b.n	10005b66 <optiga_cmd_queue_scheduler+0x18e>
10005a24:	1c3a      	adds	r2, r7, #0
10005a26:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
10005a28:	7811      	ldrb	r1, [r2, #0]
10005a2a:	2904      	cmp	r1, #4
10005a2c:	d101      	bne.n	10005a32 <optiga_cmd_queue_scheduler+0x5a>
        {
            count++;
10005a2e:	3301      	adds	r3, #1
10005a30:	b2db      	uxtb	r3, r3
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
10005a32:	9903      	ldr	r1, [sp, #12]
10005a34:	320c      	adds	r2, #12
10005a36:	428a      	cmp	r2, r1
10005a38:	d1f6      	bne.n	10005a28 <optiga_cmd_queue_scheduler+0x50>

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
10005a3a:	2b01      	cmp	r3, #1
10005a3c:	d110      	bne.n	10005a60 <optiga_cmd_queue_scheduler+0x88>
10005a3e:	23c7      	movs	r3, #199	; 0xc7
10005a40:	00db      	lsls	r3, r3, #3
10005a42:	18e2      	adds	r2, r4, r3
10005a44:	3348      	adds	r3, #72	; 0x48
10005a46:	18e1      	adds	r1, r4, r3
10005a48:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
10005a4a:	7810      	ldrb	r0, [r2, #0]
10005a4c:	2823      	cmp	r0, #35	; 0x23
10005a4e:	d101      	bne.n	10005a54 <optiga_cmd_queue_scheduler+0x7c>
        {
            count++;
10005a50:	3301      	adds	r3, #1
10005a52:	b2db      	uxtb	r3, r3
10005a54:	320c      	adds	r2, #12
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
10005a56:	428a      	cmp	r2, r1
10005a58:	d1f7      	bne.n	10005a4a <optiga_cmd_queue_scheduler+0x72>
    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
10005a5a:	2b00      	cmp	r3, #0
10005a5c:	d000      	beq.n	10005a60 <optiga_cmd_queue_scheduler+0x88>
10005a5e:	e082      	b.n	10005b66 <optiga_cmd_queue_scheduler+0x18e>
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
                                               p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
    }
    else
    {
        pal_os_event_stop(my_os_event);
10005a60:	9804      	ldr	r0, [sp, #16]
10005a62:	f7fb fdcb 	bl	100015fc <pal_os_event_stop>
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
    uint32_t reference_time_stamp = 0xFFFFFFFF;
10005a66:	2301      	movs	r3, #1
10005a68:	425b      	negs	r3, r3
10005a6a:	9302      	str	r3, [sp, #8]
10005a6c:	23c6      	movs	r3, #198	; 0xc6
10005a6e:	00db      	lsls	r3, r3, #3
10005a70:	18e5      	adds	r5, r4, r3
10005a72:	2600      	movs	r6, #0
10005a74:	23ff      	movs	r3, #255	; 0xff
10005a76:	9606      	str	r6, [sp, #24]
10005a78:	9301      	str	r3, [sp, #4]
10005a7a:	b2f3      	uxtb	r3, r6
10005a7c:	9307      	str	r3, [sp, #28]
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
            {
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
10005a7e:	1c3a      	adds	r2, r7, #0
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
10005a80:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
10005a82:	7811      	ldrb	r1, [r2, #0]
10005a84:	2908      	cmp	r1, #8
10005a86:	d101      	bne.n	10005a8c <optiga_cmd_queue_scheduler+0xb4>
        {
            count++;
10005a88:	3301      	adds	r3, #1
10005a8a:	b2db      	uxtb	r3, r3
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
10005a8c:	9903      	ldr	r1, [sp, #12]
10005a8e:	320c      	adds	r2, #12
10005a90:	428a      	cmp	r2, r1
10005a92:	d1f6      	bne.n	10005a82 <optiga_cmd_queue_scheduler+0xaa>
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
            {
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);

                // if any slot has acquired strict lock, highest priority is given to it
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
10005a94:	2b01      	cmp	r3, #1
10005a96:	d10e      	bne.n	10005ab6 <optiga_cmd_queue_scheduler+0xde>
                {
                    // Select the slot which has acquired strict lock
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
10005a98:	22c6      	movs	r2, #198	; 0xc6
10005a9a:	330b      	adds	r3, #11
10005a9c:	4373      	muls	r3, r6
10005a9e:	00d2      	lsls	r2, r2, #3
10005aa0:	18e3      	adds	r3, r4, r3
10005aa2:	189b      	adds	r3, r3, r2
10005aa4:	891a      	ldrh	r2, [r3, #8]
10005aa6:	4b46      	ldr	r3, [pc, #280]	; (10005bc0 <optiga_cmd_queue_scheduler+0x1e8>)
10005aa8:	429a      	cmp	r2, r3
10005aaa:	d110      	bne.n	10005ace <optiga_cmd_queue_scheduler+0xf6>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
                    {
                        reference_time_stamp = p_queue_entry->arrival_time;
10005aac:	686b      	ldr	r3, [r5, #4]
10005aae:	9302      	str	r3, [sp, #8]
10005ab0:	9b07      	ldr	r3, [sp, #28]
10005ab2:	9301      	str	r3, [sp, #4]
10005ab4:	e00b      	b.n	10005ace <optiga_cmd_queue_scheduler+0xf6>

                }
                else
                {
                    // pick only requested queue slot and earliest arrival time
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
10005ab6:	7a6a      	ldrb	r2, [r5, #9]
10005ab8:	2a02      	cmp	r2, #2
10005aba:	d108      	bne.n	10005ace <optiga_cmd_queue_scheduler+0xf6>
                    {
                        // remember that overflow has occurred in one of the entry
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
10005abc:	686b      	ldr	r3, [r5, #4]
10005abe:	9305      	str	r3, [sp, #20]
10005ac0:	4b40      	ldr	r3, [pc, #256]	; (10005bc4 <optiga_cmd_queue_scheduler+0x1ec>)
10005ac2:	9905      	ldr	r1, [sp, #20]
10005ac4:	58e3      	ldr	r3, [r4, r3]
10005ac6:	4299      	cmp	r1, r3
10005ac8:	d255      	bcs.n	10005b76 <optiga_cmd_queue_scheduler+0x19e>
                        {
                            overflow_detected = TRUE;
10005aca:	2301      	movs	r3, #1
10005acc:	9306      	str	r3, [sp, #24]
10005ace:	3601      	adds	r6, #1
10005ad0:	350c      	adds	r5, #12
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
10005ad2:	2e06      	cmp	r6, #6
10005ad4:	d1d1      	bne.n	10005a7a <optiga_cmd_queue_scheduler+0xa2>
                    }


                }
            }
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
10005ad6:	9b01      	ldr	r3, [sp, #4]
10005ad8:	2bff      	cmp	r3, #255	; 0xff
10005ada:	d106      	bne.n	10005aea <optiga_cmd_queue_scheduler+0x112>
10005adc:	9b06      	ldr	r3, [sp, #24]
10005ade:	2b01      	cmp	r3, #1
10005ae0:	d141      	bne.n	10005b66 <optiga_cmd_queue_scheduler+0x18e>
        do
        {
            //reset overflow detected flag and the last_time stamp
            if(overflow_detected == TRUE)
            {
                p_optiga_ctx->last_time_stamp = 0;
10005ae2:	2200      	movs	r2, #0
10005ae4:	4b37      	ldr	r3, [pc, #220]	; (10005bc4 <optiga_cmd_queue_scheduler+0x1ec>)
10005ae6:	50e2      	str	r2, [r4, r3]
10005ae8:	e7c0      	b.n	10005a6c <optiga_cmd_queue_scheduler+0x94>
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
10005aea:	230c      	movs	r3, #12
10005aec:	9a01      	ldr	r2, [sp, #4]
10005aee:	4353      	muls	r3, r2
10005af0:	22c7      	movs	r2, #199	; 0xc7
10005af2:	18e3      	adds	r3, r4, r3
10005af4:	00d2      	lsls	r2, r2, #3
10005af6:	189a      	adds	r2, r3, r2
10005af8:	7812      	ldrb	r2, [r2, #0]
10005afa:	2a22      	cmp	r2, #34	; 0x22
10005afc:	d11a      	bne.n	10005b34 <optiga_cmd_queue_scheduler+0x15c>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
10005afe:	22c6      	movs	r2, #198	; 0xc6
10005b00:	00d2      	lsls	r2, r2, #3
10005b02:	189b      	adds	r3, r3, r2
10005b04:	6818      	ldr	r0, [r3, #0]
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
10005b06:	8a83      	ldrh	r3, [r0, #20]
10005b08:	2b00      	cmp	r3, #0
10005b0a:	d113      	bne.n	10005b34 <optiga_cmd_queue_scheduler+0x15c>
/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
10005b0c:	6803      	ldr	r3, [r0, #0]
10005b0e:	1c1d      	adds	r5, r3, #0
10005b10:	330c      	adds	r3, #12
10005b12:	3508      	adds	r5, #8
10005b14:	1c19      	adds	r1, r3, #0
10005b16:	1c2b      	adds	r3, r5, #0
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
10005b18:	781e      	ldrb	r6, [r3, #0]
10005b1a:	1b5a      	subs	r2, r3, r5
10005b1c:	b2d2      	uxtb	r2, r2
10005b1e:	2e10      	cmp	r6, #16
10005b20:	d005      	beq.n	10005b2e <optiga_cmd_queue_scheduler+0x156>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
10005b22:	4929      	ldr	r1, [pc, #164]	; (10005bc8 <optiga_cmd_queue_scheduler+0x1f0>)
10005b24:	430a      	orrs	r2, r1
10005b26:	8282      	strh	r2, [r0, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
10005b28:	2210      	movs	r2, #16
10005b2a:	701a      	strb	r2, [r3, #0]
10005b2c:	e002      	b.n	10005b34 <optiga_cmd_queue_scheduler+0x15c>
10005b2e:	3301      	adds	r3, #1
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
10005b30:	428b      	cmp	r3, r1
10005b32:	d1f1      	bne.n	10005b18 <optiga_cmd_queue_scheduler+0x140>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
                // Improve : Change the state of the type here. This will reduce 0x0000 check
            }

            // schedule with selected context
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
10005b34:	250c      	movs	r5, #12
10005b36:	9b01      	ldr	r3, [sp, #4]
10005b38:	435d      	muls	r5, r3
10005b3a:	23c6      	movs	r3, #198	; 0xc6
10005b3c:	1965      	adds	r5, r4, r5
10005b3e:	00db      	lsls	r3, r3, #3
10005b40:	18eb      	adds	r3, r5, r3
10005b42:	681a      	ldr	r2, [r3, #0]
10005b44:	23cf      	movs	r3, #207	; 0xcf
            pal_os_event_register_callback_oneshot(my_os_event,
10005b46:	6811      	ldr	r1, [r2, #0]
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
                // Improve : Change the state of the type here. This will reduce 0x0000 check
            }

            // schedule with selected context
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
10005b48:	00db      	lsls	r3, r3, #3
            pal_os_event_register_callback_oneshot(my_os_event,
10005b4a:	58c8      	ldr	r0, [r1, r3]
10005b4c:	2332      	movs	r3, #50	; 0x32
10005b4e:	491f      	ldr	r1, [pc, #124]	; (10005bcc <optiga_cmd_queue_scheduler+0x1f4>)
10005b50:	f7fb fd6e 	bl	10001630 <pal_os_event_register_callback_oneshot>
                                                   optiga_cmd_event_trigger_execute,
                                                   ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx)),
                                                   OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
10005b54:	23c7      	movs	r3, #199	; 0xc7
10005b56:	00db      	lsls	r3, r3, #3
10005b58:	18ed      	adds	r5, r5, r3
10005b5a:	2304      	movs	r3, #4
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
10005b5c:	9a02      	ldr	r2, [sp, #8]
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
            pal_os_event_register_callback_oneshot(my_os_event,
                                                   optiga_cmd_event_trigger_execute,
                                                   ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx)),
                                                   OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
10005b5e:	706b      	strb	r3, [r5, #1]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
10005b60:	4b18      	ldr	r3, [pc, #96]	; (10005bc4 <optiga_cmd_queue_scheduler+0x1ec>)
10005b62:	50e2      	str	r2, [r4, r3]
10005b64:	e026      	b.n	10005bb4 <optiga_cmd_queue_scheduler+0x1dc>
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
10005b66:	23fa      	movs	r3, #250	; 0xfa
10005b68:	9804      	ldr	r0, [sp, #16]
10005b6a:	4919      	ldr	r1, [pc, #100]	; (10005bd0 <optiga_cmd_queue_scheduler+0x1f8>)
10005b6c:	1c22      	adds	r2, r4, #0
10005b6e:	009b      	lsls	r3, r3, #2
10005b70:	f7fb fd5e 	bl	10001630 <pal_os_event_register_callback_oneshot>
10005b74:	e01e      	b.n	10005bb4 <optiga_cmd_queue_scheduler+0x1dc>
                        {
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
10005b76:	9b05      	ldr	r3, [sp, #20]
10005b78:	9902      	ldr	r1, [sp, #8]
10005b7a:	428b      	cmp	r3, r1
10005b7c:	d8a7      	bhi.n	10005ace <optiga_cmd_queue_scheduler+0xf6>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
10005b7e:	7a2b      	ldrb	r3, [r5, #8]
                        {
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
10005b80:	2b22      	cmp	r3, #34	; 0x22
10005b82:	d113      	bne.n	10005bac <optiga_cmd_queue_scheduler+0x1d4>
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    memcpy(&status_check, p_optiga->sessions, OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS);
10005b84:	1c21      	adds	r1, r4, #0
10005b86:	2204      	movs	r2, #4
10005b88:	a809      	add	r0, sp, #36	; 0x24
10005b8a:	3108      	adds	r1, #8
10005b8c:	f006 fb4f 	bl	1000c22e <memcpy>
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
10005b90:	4b10      	ldr	r3, [pc, #64]	; (10005bd4 <optiga_cmd_queue_scheduler+0x1fc>)
10005b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
10005b94:	429a      	cmp	r2, r3
10005b96:	d804      	bhi.n	10005ba2 <optiga_cmd_queue_scheduler+0x1ca>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
                    {
                        // remember that overflow has occurred in one of the entry
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
                        {
                            overflow_detected = TRUE;
10005b98:	9b07      	ldr	r3, [sp, #28]
10005b9a:	9301      	str	r3, [sp, #4]
10005b9c:	9b05      	ldr	r3, [sp, #20]
10005b9e:	9302      	str	r3, [sp, #8]
10005ba0:	e795      	b.n	10005ace <optiga_cmd_queue_scheduler+0xf6>
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
10005ba2:	682b      	ldr	r3, [r5, #0]
10005ba4:	8a9b      	ldrh	r3, [r3, #20]
10005ba6:	2b00      	cmp	r3, #0
10005ba8:	d1f6      	bne.n	10005b98 <optiga_cmd_queue_scheduler+0x1c0>
10005baa:	e790      	b.n	10005ace <optiga_cmd_queue_scheduler+0xf6>
10005bac:	4393      	bics	r3, r2
10005bae:	2b21      	cmp	r3, #33	; 0x21
10005bb0:	d18d      	bne.n	10005ace <optiga_cmd_queue_scheduler+0xf6>
10005bb2:	e7f1      	b.n	10005b98 <optiga_cmd_queue_scheduler+0x1c0>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
10005bb4:	b00b      	add	sp, #44	; 0x2c
10005bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005bb8:	00000639 	.word	0x00000639
10005bbc:	00000681 	.word	0x00000681
10005bc0:	00000823 	.word	0x00000823
10005bc4:	0000067c 	.word	0x0000067c
10005bc8:	ffffe100 	.word	0xffffe100
10005bcc:	10004a11 	.word	0x10004a11
10005bd0:	100059d9 	.word	0x100059d9
10005bd4:	1010100f 	.word	0x1010100f

10005bd8 <optiga_cmd_set_shielded_connection_option>:
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
    switch (shielded_connection_option)
10005bd8:	2a01      	cmp	r2, #1
10005bda:	d007      	beq.n	10005bec <optiga_cmd_set_shielded_connection_option+0x14>
10005bdc:	2a00      	cmp	r2, #0
10005bde:	d003      	beq.n	10005be8 <optiga_cmd_set_shielded_connection_option+0x10>
10005be0:	2a02      	cmp	r2, #2
10005be2:	d104      	bne.n	10005bee <optiga_cmd_set_shielded_connection_option+0x16>
        }
        break;
        // Manage Context
        case OPTIGA_SET_MANAGE_CONTEXT:
        {
            me->manage_context_operation = value;
10005be4:	76c1      	strb	r1, [r0, #27]
        }
        break;
10005be6:	e002      	b.n	10005bee <optiga_cmd_set_shielded_connection_option+0x16>
    switch (shielded_connection_option)
    {
        // Protection Level
        case OPTIGA_SET_PROTECTION_LEVEL:
        {
            me->protection_level = value;
10005be8:	7641      	strb	r1, [r0, #25]
        }
        break;
10005bea:	e000      	b.n	10005bee <optiga_cmd_set_shielded_connection_option+0x16>
        // Protocol Version
        case OPTIGA_SET_PROTECTION_VERSION:
        {
            me->protocol_version = value;
10005bec:	7681      	strb	r1, [r0, #26]
        }
        break;
        default:
        break;
    }
}
10005bee:	4770      	bx	lr

10005bf0 <optiga_cmd_create>:
        }
    } while (FALSE == exit_loop);
}

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
10005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005bf2:	1c16      	adds	r6, r2, #0
10005bf4:	1c0f      	adds	r7, r1, #0
    optiga_cmd_t * me = NULL;

    pal_os_lock_enter_critical_section();
10005bf6:	f7fb fd47 	bl	10001688 <pal_os_lock_enter_critical_section>
10005bfa:	2200      	movs	r2, #0
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
10005bfc:	1c13      	adds	r3, r2, #0
10005bfe:	4925      	ldr	r1, [pc, #148]	; (10005c94 <optiga_cmd_create+0xa4>)
10005c00:	4d25      	ldr	r5, [pc, #148]	; (10005c98 <optiga_cmd_create+0xa8>)
10005c02:	1851      	adds	r1, r2, r1
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
10005c04:	5c69      	ldrb	r1, [r5, r1]
10005c06:	2900      	cmp	r1, #0
10005c08:	d101      	bne.n	10005c0e <optiga_cmd_create+0x1e>
        {
            count++;
10005c0a:	3301      	adds	r3, #1
10005c0c:	b2db      	uxtb	r3, r3
10005c0e:	320c      	adds	r2, #12
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
10005c10:	2a48      	cmp	r2, #72	; 0x48
10005c12:	d1f4      	bne.n	10005bfe <optiga_cmd_create+0xe>

    pal_os_lock_enter_critical_section();
    do
    {
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
10005c14:	2b00      	cmp	r3, #0
10005c16:	d101      	bne.n	10005c1c <optiga_cmd_create+0x2c>
    } while (FALSE == exit_loop);
}

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
    optiga_cmd_t * me = NULL;
10005c18:	2400      	movs	r4, #0
10005c1a:	e036      	b.n	10005c8a <optiga_cmd_create+0x9a>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
10005c1c:	2001      	movs	r0, #1
10005c1e:	2124      	movs	r1, #36	; 0x24
10005c20:	f006 fab4 	bl	1000c18c <calloc>
10005c24:	1e04      	subs	r4, r0, #0
        if (NULL == me)
10005c26:	d0f7      	beq.n	10005c18 <optiga_cmd_create+0x28>

        me->handler = handler;
        me->caller_context = caller_context;

        me->p_optiga = g_optiga_list[optiga_instance_id];
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
10005c28:	2333      	movs	r3, #51	; 0x33
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
10005c2a:	6107      	str	r7, [r0, #16]
        me->caller_context = caller_context;
10005c2c:	60c6      	str	r6, [r0, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
10005c2e:	6005      	str	r5, [r0, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
10005c30:	8403      	strh	r3, [r0, #32]

        if (FALSE == me->p_optiga->instance_init_state)
10005c32:	7b2b      	ldrb	r3, [r5, #12]
10005c34:	2b00      	cmp	r3, #0
10005c36:	d112      	bne.n	10005c5e <optiga_cmd_create+0x6e>
        {
            me->p_optiga->instance_init_state = TRUE;
10005c38:	3301      	adds	r3, #1
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
10005c3a:	1c29      	adds	r1, r5, #0
10005c3c:	4817      	ldr	r0, [pc, #92]	; (10005c9c <optiga_cmd_create+0xac>)
10005c3e:	26cf      	movs	r6, #207	; 0xcf
        me->p_optiga = g_optiga_list[optiga_instance_id];
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];

        if (FALSE == me->p_optiga->instance_init_state)
        {
            me->p_optiga->instance_init_state = TRUE;
10005c40:	732b      	strb	r3, [r5, #12]
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
10005c42:	f7fb fd11 	bl	10001668 <pal_os_event_create>
10005c46:	00f6      	lsls	r6, r6, #3
10005c48:	51a8      	str	r0, [r5, r6]
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
10005c4a:	1c21      	adds	r1, r4, #0
10005c4c:	4814      	ldr	r0, [pc, #80]	; (10005ca0 <optiga_cmd_create+0xb0>)
10005c4e:	6825      	ldr	r5, [r4, #0]
10005c50:	f7fe fa8c 	bl	1000416c <optiga_comms_create>
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10005c54:	6823      	ldr	r3, [r4, #0]
        if (FALSE == me->p_optiga->instance_init_state)
        {
            me->p_optiga->instance_init_state = TRUE;
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
10005c56:	6028      	str	r0, [r5, #0]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10005c58:	681a      	ldr	r2, [r3, #0]
10005c5a:	599b      	ldr	r3, [r3, r6]
10005c5c:	6153      	str	r3, [r2, #20]
10005c5e:	4b0d      	ldr	r3, [pc, #52]	; (10005c94 <optiga_cmd_create+0xa4>)
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
10005c60:	6821      	ldr	r1, [r4, #0]
10005c62:	18ca      	adds	r2, r1, r3
10005c64:	2300      	movs	r3, #0
10005c66:	7815      	ldrb	r5, [r2, #0]
10005c68:	b2d8      	uxtb	r0, r3
10005c6a:	2d00      	cmp	r5, #0
10005c6c:	d109      	bne.n	10005c82 <optiga_cmd_create+0x92>
        {
            * queue_index_store =  index;
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
10005c6e:	220c      	movs	r2, #12
10005c70:	4353      	muls	r3, r2
10005c72:	22c7      	movs	r2, #199	; 0xc7
10005c74:	18cb      	adds	r3, r1, r3
10005c76:	00d2      	lsls	r2, r2, #3
10005c78:	189b      	adds	r3, r3, r2
10005c7a:	2201      	movs	r2, #1
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
        {
            * queue_index_store =  index;
10005c7c:	7760      	strb	r0, [r4, #29]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
10005c7e:	705a      	strb	r2, [r3, #1]
10005c80:	e003      	b.n	10005c8a <optiga_cmd_create+0x9a>
10005c82:	3301      	adds	r3, #1
10005c84:	320c      	adds	r2, #12
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
10005c86:	2b06      	cmp	r3, #6
10005c88:	d1ed      	bne.n	10005c66 <optiga_cmd_create+0x76>
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
    } while (FALSE);

    pal_os_lock_exit_critical_section();
10005c8a:	f7fb fcfe 	bl	1000168a <pal_os_lock_exit_critical_section>
    return (me);
}
10005c8e:	1c20      	adds	r0, r4, #0
10005c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10005c92:	46c0      	nop			; (mov r8, r8)
10005c94:	00000639 	.word	0x00000639
10005c98:	20002900 	.word	0x20002900
10005c9c:	100059d9 	.word	0x100059d9
10005ca0:	10004695 	.word	0x10004695

10005ca4 <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
10005ca4:	b510      	push	{r4, lr}
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (NULL != me)
10005ca6:	2800      	cmp	r0, #0
10005ca8:	d01d      	beq.n	10005ce6 <optiga_cmd_destroy+0x42>
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
10005caa:	8a83      	ldrh	r3, [r0, #20]
/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
10005cac:	6804      	ldr	r4, [r0, #0]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
10005cae:	2b00      	cmp	r3, #0
10005cb0:	d005      	beq.n	10005cbe <optiga_cmd_destroy+0x1a>
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
10005cb2:	220f      	movs	r2, #15
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
10005cb4:	2100      	movs	r1, #0
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
10005cb6:	4013      	ands	r3, r2
10005cb8:	18e3      	adds	r3, r4, r3
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
10005cba:	8281      	strh	r1, [r0, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
10005cbc:	7219      	strb	r1, [r3, #8]
/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
10005cbe:	230c      	movs	r3, #12
10005cc0:	7f42      	ldrb	r2, [r0, #29]
10005cc2:	6801      	ldr	r1, [r0, #0]
10005cc4:	435a      	muls	r2, r3
10005cc6:	188a      	adds	r2, r1, r2
10005cc8:	21c7      	movs	r1, #199	; 0xc7
10005cca:	2400      	movs	r4, #0
10005ccc:	00c9      	lsls	r1, r1, #3
10005cce:	1852      	adds	r2, r2, r1
10005cd0:	7054      	strb	r4, [r2, #1]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
10005cd2:	7f42      	ldrb	r2, [r0, #29]
10005cd4:	4353      	muls	r3, r2
10005cd6:	6802      	ldr	r2, [r0, #0]
10005cd8:	18d3      	adds	r3, r2, r3
10005cda:	185b      	adds	r3, r3, r1
10005cdc:	701c      	strb	r4, [r3, #0]
        if (NULL != me)
        {
            return_status = optiga_cmd_release_session(me);
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
            pal_os_free(me);
10005cde:	f006 fa8d 	bl	1000c1fc <free>
            return_status = OPTIGA_LIB_SUCCESS;
10005ce2:	1c20      	adds	r0, r4, #0
10005ce4:	e000      	b.n	10005ce8 <optiga_cmd_destroy+0x44>
    return (me);
}

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005ce6:	4801      	ldr	r0, [pc, #4]	; (10005cec <optiga_cmd_destroy+0x48>)
            pal_os_free(me);
            return_status = OPTIGA_LIB_SUCCESS;
        }
    } while (FALSE);
    return (return_status);
}
10005ce8:	bd10      	pop	{r4, pc}
10005cea:	46c0      	nop			; (mov r8, r8)
10005cec:	00000202 	.word	0x00000202

10005cf0 <optiga_cmd_open_application>:
    return (return_status);
}


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
10005cf0:	b510      	push	{r4, lr}
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005cf2:	2400      	movs	r4, #0
    me->cmd_hdlrs = cmd_hdlrs;
10005cf4:	4b05      	ldr	r3, [pc, #20]	; (10005d0c <optiga_cmd_open_application+0x1c>)
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005cf6:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
10005cf8:	7584      	strb	r4, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005cfa:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005cfc:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
10005cfe:	7601      	strb	r1, [r0, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005d00:	1c21      	adds	r1, r4, #0
10005d02:	f7fe fcc7 	bl	10004694 <optiga_cmd_execute_handler>
                       optiga_cmd_open_application_handler,
                       OPTIGA_CMD_EXEC_COMMS_OPEN,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
10005d06:	1c20      	adds	r0, r4, #0
10005d08:	bd10      	pop	{r4, pc}
10005d0a:	46c0      	nop			; (mov r8, r8)
10005d0c:	100058e1 	.word	0x100058e1

10005d10 <optiga_cmd_close_application>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005d10:	2306      	movs	r3, #6

    return (return_status);
}

optiga_lib_status_t optiga_cmd_close_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
10005d12:	b510      	push	{r4, lr}
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005d14:	2400      	movs	r4, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005d16:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005d18:	4b04      	ldr	r3, [pc, #16]	; (10005d2c <optiga_cmd_close_application+0x1c>)
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005d1a:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005d1c:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005d1e:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
10005d20:	7601      	strb	r1, [r0, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005d22:	1c21      	adds	r1, r4, #0
10005d24:	f7fe fcb6 	bl	10004694 <optiga_cmd_execute_handler>
                       optiga_cmd_close_application_handler,
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
10005d28:	1c20      	adds	r0, r4, #0
10005d2a:	bd10      	pop	{r4, pc}
10005d2c:	10005859 	.word	0x10005859

10005d30 <optiga_cmd_get_data_object>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005d30:	2306      	movs	r3, #6
    return (return_status);
}

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
10005d32:	b510      	push	{r4, lr}
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005d34:	2400      	movs	r4, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005d36:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005d38:	4b04      	ldr	r3, [pc, #16]	; (10005d4c <optiga_cmd_get_data_object+0x1c>)
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005d3a:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005d3c:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005d3e:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
10005d40:	7601      	strb	r1, [r0, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005d42:	1c21      	adds	r1, r4, #0
10005d44:	f7fe fca6 	bl	10004694 <optiga_cmd_execute_handler>
                       optiga_cmd_get_data_object_handler,
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
10005d48:	1c20      	adds	r0, r4, #0
10005d4a:	bd10      	pop	{r4, pc}
10005d4c:	10004a1d 	.word	0x10004a1d

10005d50 <optiga_cmd_set_data_object>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005d50:	2306      	movs	r3, #6
}


optiga_lib_status_t optiga_cmd_set_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_set_data_object_params_t * params)
{
10005d52:	b510      	push	{r4, lr}
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005d54:	2400      	movs	r4, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005d56:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005d58:	4b04      	ldr	r3, [pc, #16]	; (10005d6c <optiga_cmd_set_data_object+0x1c>)
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005d5a:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005d5c:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005d5e:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
10005d60:	7601      	strb	r1, [r0, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005d62:	1c21      	adds	r1, r4, #0
10005d64:	f7fe fc96 	bl	10004694 <optiga_cmd_execute_handler>
                       optiga_cmd_set_data_object_handler,
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
10005d68:	1c20      	adds	r0, r4, #0
10005d6a:	bd10      	pop	{r4, pc}
10005d6c:	10004b2d 	.word	0x10004b2d

10005d70 <optiga_cmd_get_random>:
{
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == cmd_param)
    {
        cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10005d70:	1f0b      	subs	r3, r1, #4
    return (return_status);
}


optiga_lib_status_t optiga_cmd_get_random(optiga_cmd_t * me, uint8_t cmd_param, optiga_get_random_params_t * params)
{
10005d72:	b510      	push	{r4, lr}
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == cmd_param)
    {
        cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10005d74:	1e5c      	subs	r4, r3, #1
10005d76:	41a3      	sbcs	r3, r4
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005d78:	2400      	movs	r4, #0
{
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == cmd_param)
    {
        cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10005d7a:	3305      	adds	r3, #5
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005d7c:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005d7e:	4b05      	ldr	r3, [pc, #20]	; (10005d94 <optiga_cmd_get_random+0x24>)
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005d80:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005d82:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005d84:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
10005d86:	7601      	strb	r1, [r0, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005d88:	1c21      	adds	r1, r4, #0
10005d8a:	f7fe fc83 	bl	10004694 <optiga_cmd_execute_handler>
                       optiga_cmd_get_random_handler,
                       cmd_handler_state,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
10005d8e:	1c20      	adds	r0, r4, #0
10005d90:	bd10      	pop	{r4, pc}
10005d92:	46c0      	nop			; (mov r8, r8)
10005d94:	10004bf5 	.word	0x10004bf5

10005d98 <optiga_cmd_calc_sign>:
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t*)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if (OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdsa_sign->private_key_oid)
10005d98:	8993      	ldrh	r3, [r2, #12]
    return (return_status);
}


optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
10005d9a:	b510      	push	{r4, lr}
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t*)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if (OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdsa_sign->private_key_oid)
10005d9c:	2b00      	cmp	r3, #0
10005d9e:	d104      	bne.n	10005daa <optiga_cmd_calc_sign+0x12>
        {
            if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid)
10005da0:	8a83      	ldrh	r3, [r0, #20]
10005da2:	2b00      	cmp	r3, #0
10005da4:	d00e      	beq.n	10005dc4 <optiga_cmd_calc_sign+0x2c>
            {
                break;
            }
            cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10005da6:	2305      	movs	r3, #5
10005da8:	e000      	b.n	10005dac <optiga_cmd_calc_sign+0x14>

optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t*)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
10005daa:	2306      	movs	r3, #6
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005dac:	2400      	movs	r4, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005dae:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005db0:	4b05      	ldr	r3, [pc, #20]	; (10005dc8 <optiga_cmd_calc_sign+0x30>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
10005db2:	7601      	strb	r1, [r0, #24]
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005db4:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005db6:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005db8:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005dba:	1c21      	adds	r1, r4, #0
10005dbc:	f7fe fc6a 	bl	10004694 <optiga_cmd_execute_handler>
                           cmd_param,
                           optiga_cmd_calc_sign_handler,
                           cmd_handler_state,
                           params);

        return_status = OPTIGA_LIB_SUCCESS;
10005dc0:	1c20      	adds	r0, r4, #0
10005dc2:	e000      	b.n	10005dc6 <optiga_cmd_calc_sign+0x2e>
}


optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
10005dc4:	4801      	ldr	r0, [pc, #4]	; (10005dcc <optiga_cmd_calc_sign+0x34>)
                           params);

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    return (return_status);
}
10005dc6:	bd10      	pop	{r4, pc}
10005dc8:	10004cdd 	.word	0x10004cdd
10005dcc:	00000203 	.word	0x00000203

10005dd0 <optiga_cmd_verify_sign>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005dd0:	2306      	movs	r3, #6
}

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
10005dd2:	b510      	push	{r4, lr}
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005dd4:	2400      	movs	r4, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005dd6:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005dd8:	4b04      	ldr	r3, [pc, #16]	; (10005dec <optiga_cmd_verify_sign+0x1c>)
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005dda:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005ddc:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005dde:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
10005de0:	7601      	strb	r1, [r0, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005de2:	1c21      	adds	r1, r4, #0
10005de4:	f7fe fc56 	bl	10004694 <optiga_cmd_execute_handler>
                       optiga_cmd_verify_sign_handler,
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
10005de8:	1c20      	adds	r0, r4, #0
10005dea:	bd10      	pop	{r4, pc}
10005dec:	10004da1 	.word	0x10004da1

10005df0 <optiga_cmd_calc_ssec>:
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    do
    {
        if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdh->private_key) &&
10005df0:	8913      	ldrh	r3, [r2, #8]

    return (return_status);
}

optiga_lib_status_t optiga_cmd_calc_ssec(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_ssec_params_t * params)
{
10005df2:	b510      	push	{r4, lr}
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    do
    {
        if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdh->private_key) &&
10005df4:	2b00      	cmp	r3, #0
10005df6:	d104      	bne.n	10005e02 <optiga_cmd_calc_ssec+0x12>
10005df8:	8a83      	ldrh	r3, [r0, #20]
10005dfa:	2b00      	cmp	r3, #0
10005dfc:	d012      	beq.n	10005e24 <optiga_cmd_calc_ssec+0x34>

optiga_lib_status_t optiga_cmd_calc_ssec(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_ssec_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    optiga_calc_ssec_params_t * p_optiga_ecdh = (optiga_calc_ssec_params_t *)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10005dfe:	2305      	movs	r3, #5
10005e00:	e004      	b.n	10005e0c <optiga_cmd_calc_ssec+0x1c>
        if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdh->private_key) &&
            (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid))
        {
            break;
        }
        if ((OPTIGA_KEY_ID_SESSION_BASED != p_optiga_ecdh->private_key) &&
10005e02:	7a93      	ldrb	r3, [r2, #10]
            (FALSE != p_optiga_ecdh->export_to_host))
        {
            cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
10005e04:	425c      	negs	r4, r3
10005e06:	4163      	adcs	r3, r4
10005e08:	2406      	movs	r4, #6
10005e0a:	1ae3      	subs	r3, r4, r3
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005e0c:	2400      	movs	r4, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005e0e:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005e10:	4b05      	ldr	r3, [pc, #20]	; (10005e28 <optiga_cmd_calc_ssec+0x38>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
10005e12:	7601      	strb	r1, [r0, #24]
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005e14:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005e16:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005e18:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005e1a:	1c21      	adds	r1, r4, #0
10005e1c:	f7fe fc3a 	bl	10004694 <optiga_cmd_execute_handler>
        optiga_cmd_execute(me,
                           cmd_param,
                           optiga_cmd_calc_ssec_handler,
                           cmd_handler_state,
                           params);
        return_status = OPTIGA_LIB_SUCCESS;
10005e20:	1c20      	adds	r0, r4, #0
10005e22:	e000      	b.n	10005e26 <optiga_cmd_calc_ssec+0x36>
    return (return_status);
}

optiga_lib_status_t optiga_cmd_calc_ssec(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_ssec_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
10005e24:	4801      	ldr	r0, [pc, #4]	; (10005e2c <optiga_cmd_calc_ssec+0x3c>)
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);

    return (return_status);
}
10005e26:	bd10      	pop	{r4, pc}
10005e28:	10004ee5 	.word	0x10004ee5
10005e2c:	00000203 	.word	0x00000203

10005e30 <optiga_cmd_derive_key>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_derive_key(optiga_cmd_t * me, uint8_t cmd_param, optiga_derive_key_params_t * params)
{
10005e30:	b508      	push	{r3, lr}
    optiga_cmd_state_t initial_state;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    do
    {
        if ((OPTIGA_KEY_ID_SESSION_BASED == (optiga_key_id_t)p_optiga_tls_prf_sha256->input_shared_secret_oid) &&
10005e32:	8813      	ldrh	r3, [r2, #0]
10005e34:	2b00      	cmp	r3, #0
10005e36:	d102      	bne.n	10005e3e <optiga_cmd_derive_key+0xe>
10005e38:	8a83      	ldrh	r3, [r0, #20]
10005e3a:	2b00      	cmp	r3, #0
10005e3c:	d014      	beq.n	10005e68 <optiga_cmd_derive_key+0x38>
            (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid))
        {
            break;
        }

        me->chaining_ongoing = FALSE;
10005e3e:	2300      	movs	r3, #0
        me->cmd_param = cmd_param;
10005e40:	7601      	strb	r1, [r0, #24]
            (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid))
        {
            break;
        }

        me->chaining_ongoing = FALSE;
10005e42:	75c3      	strb	r3, [r0, #23]
        me->cmd_param = cmd_param;
        initial_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;

        if ((NULL == p_optiga_tls_prf_sha256->derived_key) ||
10005e44:	6911      	ldr	r1, [r2, #16]
            (0x00 == p_optiga_tls_prf_sha256->input_shared_secret_oid))
        {
            initial_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10005e46:	3305      	adds	r3, #5

        me->chaining_ongoing = FALSE;
        me->cmd_param = cmd_param;
        initial_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;

        if ((NULL == p_optiga_tls_prf_sha256->derived_key) ||
10005e48:	2900      	cmp	r1, #0
10005e4a:	d004      	beq.n	10005e56 <optiga_cmd_derive_key+0x26>
10005e4c:	8811      	ldrh	r1, [r2, #0]
            break;
        }

        me->chaining_ongoing = FALSE;
        me->cmd_param = cmd_param;
        initial_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
10005e4e:	424b      	negs	r3, r1
10005e50:	414b      	adcs	r3, r1
10005e52:	2106      	movs	r1, #6
10005e54:	1acb      	subs	r3, r1, r3
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005e56:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005e58:	4b04      	ldr	r3, [pc, #16]	; (10005e6c <optiga_cmd_derive_key+0x3c>)
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005e5a:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005e5c:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005e5e:	2100      	movs	r1, #0
10005e60:	f7fe fc18 	bl	10004694 <optiga_cmd_execute_handler>
                           me->cmd_param,
                           optiga_cmd_derive_key_handler,
                           initial_state,
                           params);

        return_status = OPTIGA_LIB_SUCCESS;
10005e64:	2000      	movs	r0, #0
10005e66:	e000      	b.n	10005e6a <optiga_cmd_derive_key+0x3a>
    return (return_status);
}

optiga_lib_status_t optiga_cmd_derive_key(optiga_cmd_t * me, uint8_t cmd_param, optiga_derive_key_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
10005e68:	4801      	ldr	r0, [pc, #4]	; (10005e70 <optiga_cmd_derive_key+0x40>)

        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    return (return_status);
}
10005e6a:	bd08      	pop	{r3, pc}
10005e6c:	10005021 	.word	0x10005021
10005e70:	00000203 	.word	0x00000203

10005e74 <optiga_cmd_gen_keypair>:
{
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)
        && (FALSE == p_optiga_ecc_gen_keypair->export_private_key))
10005e74:	23ff      	movs	r3, #255	; 0xff

    return (return_status);
}

optiga_lib_status_t optiga_cmd_gen_keypair(optiga_cmd_t * me, uint8_t cmd_param, optiga_gen_keypair_params_t * params)
{
10005e76:	b510      	push	{r4, lr}
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)
        && (FALSE == p_optiga_ecc_gen_keypair->export_private_key))
10005e78:	6814      	ldr	r4, [r2, #0]
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005e7a:	6082      	str	r2, [r0, #8]
{
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)
        && (FALSE == p_optiga_ecc_gen_keypair->export_private_key))
10005e7c:	439c      	bics	r4, r3
10005e7e:	1e23      	subs	r3, r4, #0
10005e80:	4c08      	ldr	r4, [pc, #32]	; (10005ea4 <optiga_cmd_gen_keypair+0x30>)
optiga_lib_status_t optiga_cmd_gen_keypair(optiga_cmd_t * me, uint8_t cmd_param, optiga_gen_keypair_params_t * params)
{
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)
10005e82:	d103      	bne.n	10005e8c <optiga_cmd_gen_keypair+0x18>
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005e84:	2205      	movs	r2, #5
    me->cmd_hdlrs = cmd_hdlrs;
10005e86:	6044      	str	r4, [r0, #4]
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005e88:	7582      	strb	r2, [r0, #22]
10005e8a:	e003      	b.n	10005e94 <optiga_cmd_gen_keypair+0x20>
10005e8c:	2306      	movs	r3, #6
10005e8e:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005e90:	2300      	movs	r3, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005e92:	6044      	str	r4, [r0, #4]
    me->chaining_ongoing = FALSE;
10005e94:	75c3      	strb	r3, [r0, #23]
    me->cmd_param = cmd_param;
10005e96:	7601      	strb	r1, [r0, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005e98:	1c19      	adds	r1, r3, #0
10005e9a:	f7fe fbfb 	bl	10004694 <optiga_cmd_execute_handler>
    {
        optiga_cmd_execute(me, cmd_param, optiga_cmd_gen_keypair_handler, OPTIGA_CMD_EXEC_REQUEST_LOCK, params);
    }

    return (OPTIGA_LIB_SUCCESS);
}
10005e9e:	2000      	movs	r0, #0
10005ea0:	bd10      	pop	{r4, pc}
10005ea2:	46c0      	nop			; (mov r8, r8)
10005ea4:	10005265 	.word	0x10005265

10005ea8 <optiga_cmd_encrypt_asym>:
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    // for encrypting session data, instance must have session.
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
10005ea8:	6893      	ldr	r3, [r2, #8]

    return (return_status);
}

optiga_lib_status_t optiga_cmd_encrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_encrypt_asym_params_t * params)
{
10005eaa:	b510      	push	{r4, lr}
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    // for encrypting session data, instance must have session.
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
10005eac:	2b00      	cmp	r3, #0
10005eae:	d105      	bne.n	10005ebc <optiga_cmd_encrypt_asym+0x14>
10005eb0:	8813      	ldrh	r3, [r2, #0]
10005eb2:	2b00      	cmp	r3, #0
10005eb4:	d10f      	bne.n	10005ed6 <optiga_cmd_encrypt_asym+0x2e>
10005eb6:	8a83      	ldrh	r3, [r0, #20]
10005eb8:	2b00      	cmp	r3, #0
10005eba:	d00c      	beq.n	10005ed6 <optiga_cmd_encrypt_asym+0x2e>
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005ebc:	2306      	movs	r3, #6
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005ebe:	2400      	movs	r4, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005ec0:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005ec2:	4b06      	ldr	r3, [pc, #24]	; (10005edc <optiga_cmd_encrypt_asym+0x34>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
10005ec4:	7601      	strb	r1, [r0, #24]
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005ec6:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005ec8:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005eca:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005ecc:	1c21      	adds	r1, r4, #0
10005ece:	f7fe fbe1 	bl	10004694 <optiga_cmd_execute_handler>
    // for encrypting session data, instance must have session.
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
        (NULL != params->message))
    {
        optiga_cmd_execute(me, cmd_param, optiga_cmd_encrypt_asym_handler, OPTIGA_CMD_EXEC_REQUEST_LOCK, params);
        return_status = OPTIGA_LIB_SUCCESS;
10005ed2:	1c20      	adds	r0, r4, #0
10005ed4:	e000      	b.n	10005ed8 <optiga_cmd_encrypt_asym+0x30>
    return (return_status);
}

optiga_lib_status_t optiga_cmd_encrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_encrypt_asym_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
10005ed6:	4802      	ldr	r0, [pc, #8]	; (10005ee0 <optiga_cmd_encrypt_asym+0x38>)
    {
        optiga_cmd_execute(me, cmd_param, optiga_cmd_encrypt_asym_handler, OPTIGA_CMD_EXEC_REQUEST_LOCK, params);
        return_status = OPTIGA_LIB_SUCCESS;
    }
    return (return_status);
}
10005ed8:	bd10      	pop	{r4, pc}
10005eda:	46c0      	nop			; (mov r8, r8)
10005edc:	10005399 	.word	0x10005399
10005ee0:	00000203 	.word	0x00000203

10005ee4 <optiga_cmd_decrypt_asym>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_decrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_decrypt_asym_params_t * params)
{
10005ee4:	b510      	push	{r4, lr}
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t*)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((NULL == p_optiga_decrypt_asym->processed_message) &&
10005ee6:	6954      	ldr	r4, [r2, #20]

optiga_lib_status_t optiga_cmd_decrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_decrypt_asym_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t*)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
10005ee8:	2306      	movs	r3, #6
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((NULL == p_optiga_decrypt_asym->processed_message) &&
10005eea:	2c00      	cmp	r4, #0
10005eec:	d103      	bne.n	10005ef6 <optiga_cmd_decrypt_asym+0x12>
            (NULL == p_optiga_decrypt_asym->processed_message_length))
        {
            cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10005eee:	6853      	ldr	r3, [r2, #4]
10005ef0:	1e5c      	subs	r4, r3, #1
10005ef2:	41a3      	sbcs	r3, r4
10005ef4:	3305      	adds	r3, #5
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005ef6:	2400      	movs	r4, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005ef8:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005efa:	4b05      	ldr	r3, [pc, #20]	; (10005f10 <optiga_cmd_decrypt_asym+0x2c>)
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005efc:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005efe:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005f00:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
10005f02:	7601      	strb	r1, [r0, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005f04:	1c21      	adds	r1, r4, #0
10005f06:	f7fe fbc5 	bl	10004694 <optiga_cmd_execute_handler>
                           params);

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    return (return_status);
}
10005f0a:	1c20      	adds	r0, r4, #0
10005f0c:	bd10      	pop	{r4, pc}
10005f0e:	46c0      	nop			; (mov r8, r8)
10005f10:	10005515 	.word	0x10005515

10005f14 <optiga_cmd_calc_hash>:
}

optiga_lib_status_t optiga_cmd_calc_hash(optiga_cmd_t * me,
                                         uint8_t cmd_param,
                                         optiga_calc_hash_params_t * params)
{
10005f14:	b510      	push	{r4, lr}
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005f16:	2306      	movs	r3, #6
                                         optiga_calc_hash_params_t * params)
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    p_optiga_calc_hash->data_sent = 0;
10005f18:	2400      	movs	r4, #0
10005f1a:	6114      	str	r4, [r2, #16]
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005f1c:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005f1e:	4b05      	ldr	r3, [pc, #20]	; (10005f34 <optiga_cmd_calc_hash+0x20>)
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005f20:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005f22:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005f24:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
10005f26:	7601      	strb	r1, [r0, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005f28:	1c21      	adds	r1, r4, #0
10005f2a:	f7fe fbb3 	bl	10004694 <optiga_cmd_execute_handler>
                       optiga_cmd_calc_hash_handler,
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
10005f2e:	1c20      	adds	r0, r4, #0
10005f30:	bd10      	pop	{r4, pc}
10005f32:	46c0      	nop			; (mov r8, r8)
10005f34:	10005659 	.word	0x10005659

10005f38 <optiga_cmd_set_object_protected>:
    return (return_status);
}

optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
10005f38:	b538      	push	{r3, r4, r5, lr}
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    if (((OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag) ||
10005f3a:	7994      	ldrb	r4, [r2, #6]
10005f3c:	1e63      	subs	r3, r4, #1
10005f3e:	2b01      	cmp	r3, #1
10005f40:	d80d      	bhi.n	10005f5e <optiga_cmd_set_object_protected+0x26>
    uint8_t state = 0;
    switch (slot_member)
    {
        case OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE:
        {
            state = me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type;
10005f42:	230c      	movs	r3, #12
10005f44:	7f45      	ldrb	r5, [r0, #29]
10005f46:	436b      	muls	r3, r5
10005f48:	6805      	ldr	r5, [r0, #0]
10005f4a:	18eb      	adds	r3, r5, r3
10005f4c:	25c7      	movs	r5, #199	; 0xc7
10005f4e:	00ed      	lsls	r5, r5, #3
10005f50:	195b      	adds	r3, r3, r5
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    if (((OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag) ||
       (OPTIGA_SET_PROTECTED_UPDATE_CONTINUE == params->set_obj_protected_tag)) &&
10005f52:	781d      	ldrb	r5, [r3, #0]
10005f54:	2d23      	cmp	r5, #35	; 0x23
10005f56:	d115      	bne.n	10005f84 <optiga_cmd_set_object_protected+0x4c>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != optiga_cmd_queue_get_state_of(me, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE)) ||
10005f58:	785b      	ldrb	r3, [r3, #1]
10005f5a:	2b04      	cmp	r3, #4
10005f5c:	d112      	bne.n	10005f84 <optiga_cmd_set_object_protected+0x4c>
    {
        return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    }
    else
    {
        if (( NULL == params->p_protected_update_buffer ) &&
10005f5e:	6815      	ldr	r5, [r2, #0]
}

optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
10005f60:	2307      	movs	r3, #7
    {
        return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    }
    else
    {
        if (( NULL == params->p_protected_update_buffer ) &&
10005f62:	2d00      	cmp	r5, #0
10005f64:	d102      	bne.n	10005f6c <optiga_cmd_set_object_protected+0x34>
10005f66:	2c01      	cmp	r4, #1
10005f68:	d100      	bne.n	10005f6c <optiga_cmd_set_object_protected+0x34>
            (OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag))
        {
            /// Release the strict sequence
            next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
10005f6a:	3304      	adds	r3, #4
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10005f6c:	2400      	movs	r4, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10005f6e:	7583      	strb	r3, [r0, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10005f70:	4b05      	ldr	r3, [pc, #20]	; (10005f88 <optiga_cmd_set_object_protected+0x50>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
10005f72:	7601      	strb	r1, [r0, #24]
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10005f74:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10005f76:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
10005f78:	75c4      	strb	r4, [r0, #23]
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10005f7a:	1c21      	adds	r1, r4, #0
10005f7c:	f7fe fb8a 	bl	10004694 <optiga_cmd_execute_handler>

optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
10005f80:	1c20      	adds	r0, r4, #0
10005f82:	e000      	b.n	10005f86 <optiga_cmd_set_object_protected+0x4e>
    if (((OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag) ||
       (OPTIGA_SET_PROTECTED_UPDATE_CONTINUE == params->set_obj_protected_tag)) &&
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != optiga_cmd_queue_get_state_of(me, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE)) ||
       (OPTIGA_CMD_QUEUE_PROCESSING != optiga_cmd_queue_get_state_of(me, OPTIGA_CMD_QUEUE_SLOT_STATE))))
    {
        return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
10005f84:	4801      	ldr	r0, [pc, #4]	; (10005f8c <optiga_cmd_set_object_protected+0x54>)
                           next_execution_state,
                           params);
    }

    return (return_status);
}
10005f86:	bd38      	pop	{r3, r4, r5, pc}
10005f88:	100051ad 	.word	0x100051ad
10005f8c:	00000203 	.word	0x00000203

10005f90 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
10005f90:	228c      	movs	r2, #140	; 0x8c
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
10005f92:	b508      	push	{r3, lr}
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
10005f94:	2100      	movs	r1, #0
10005f96:	0052      	lsls	r2, r2, #1
10005f98:	f006 f952 	bl	1000c240 <memset>
}
10005f9c:	bd08      	pop	{r3, pc}

10005f9e <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
10005f9e:	b508      	push	{r3, lr}
    if( ctx == NULL )
10005fa0:	2800      	cmp	r0, #0
10005fa2:	d003      	beq.n	10005fac <mbedtls_aes_free+0xe>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
10005fa4:	218c      	movs	r1, #140	; 0x8c
10005fa6:	0049      	lsls	r1, r1, #1
10005fa8:	f001 f97e 	bl	100072a8 <mbedtls_platform_zeroize>
}
10005fac:	bd08      	pop	{r3, pc}
	...

10005fb0 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
10005fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
10005fb2:	2ac0      	cmp	r2, #192	; 0xc0
10005fb4:	d008      	beq.n	10005fc8 <mbedtls_aes_setkey_enc+0x18>
10005fb6:	2380      	movs	r3, #128	; 0x80
10005fb8:	005b      	lsls	r3, r3, #1
10005fba:	429a      	cmp	r2, r3
10005fbc:	d006      	beq.n	10005fcc <mbedtls_aes_setkey_enc+0x1c>
    {
        case 128: ctx->nr = 10; break;
10005fbe:	3bf6      	subs	r3, #246	; 0xf6
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
10005fc0:	2a80      	cmp	r2, #128	; 0x80
10005fc2:	d000      	beq.n	10005fc6 <mbedtls_aes_setkey_enc+0x16>
10005fc4:	e0c5      	b.n	10006152 <mbedtls_aes_setkey_enc+0x1a2>
10005fc6:	e002      	b.n	10005fce <mbedtls_aes_setkey_enc+0x1e>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
10005fc8:	230c      	movs	r3, #12
10005fca:	e000      	b.n	10005fce <mbedtls_aes_setkey_enc+0x1e>
        case 256: ctx->nr = 14; break;
10005fcc:	230e      	movs	r3, #14
10005fce:	6003      	str	r3, [r0, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
10005fd0:	1c03      	adds	r3, r0, #0
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
10005fd2:	2600      	movs	r6, #0

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
10005fd4:	3308      	adds	r3, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
10005fd6:	0952      	lsrs	r2, r2, #5

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
10005fd8:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
10005fda:	9201      	str	r2, [sp, #4]
10005fdc:	9a01      	ldr	r2, [sp, #4]
10005fde:	4296      	cmp	r6, r2
10005fe0:	d010      	beq.n	10006004 <mbedtls_aes_setkey_enc+0x54>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
10005fe2:	00b7      	lsls	r7, r6, #2
10005fe4:	19cd      	adds	r5, r1, r7
10005fe6:	786c      	ldrb	r4, [r5, #1]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
10005fe8:	3601      	adds	r6, #1
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
10005fea:	0224      	lsls	r4, r4, #8
10005fec:	46a4      	mov	ip, r4
10005fee:	4662      	mov	r2, ip
10005ff0:	78ac      	ldrb	r4, [r5, #2]
10005ff2:	78ed      	ldrb	r5, [r5, #3]
10005ff4:	0424      	lsls	r4, r4, #16
10005ff6:	4314      	orrs	r4, r2
10005ff8:	5dca      	ldrb	r2, [r1, r7]
10005ffa:	062d      	lsls	r5, r5, #24
10005ffc:	4314      	orrs	r4, r2
10005ffe:	432c      	orrs	r4, r5
10006000:	51dc      	str	r4, [r3, r7]
10006002:	e7eb      	b.n	10005fdc <mbedtls_aes_setkey_enc+0x2c>
    }

    switch( ctx->nr )
10006004:	6802      	ldr	r2, [r0, #0]
10006006:	2a0c      	cmp	r2, #12
10006008:	d02d      	beq.n	10006066 <mbedtls_aes_setkey_enc+0xb6>
1000600a:	2a0e      	cmp	r2, #14
1000600c:	d05a      	beq.n	100060c4 <mbedtls_aes_setkey_enc+0x114>
1000600e:	2a0a      	cmp	r2, #10
10006010:	d000      	beq.n	10006014 <mbedtls_aes_setkey_enc+0x64>
10006012:	e0a1      	b.n	10006158 <mbedtls_aes_setkey_enc+0x1a8>
10006014:	2400      	movs	r4, #0
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
10006016:	4951      	ldr	r1, [pc, #324]	; (1000615c <mbedtls_aes_setkey_enc+0x1ac>)
10006018:	6818      	ldr	r0, [r3, #0]
1000601a:	5861      	ldr	r1, [r4, r1]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
1000601c:	68da      	ldr	r2, [r3, #12]
1000601e:	4041      	eors	r1, r0
10006020:	20ff      	movs	r0, #255	; 0xff
10006022:	4f4f      	ldr	r7, [pc, #316]	; (10006160 <mbedtls_aes_setkey_enc+0x1b0>)
10006024:	0a15      	lsrs	r5, r2, #8
10006026:	4005      	ands	r5, r0
10006028:	5d7e      	ldrb	r6, [r7, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
1000602a:	0e15      	lsrs	r5, r2, #24
1000602c:	4071      	eors	r1, r6
1000602e:	5d7e      	ldrb	r6, [r7, r5]
10006030:	3404      	adds	r4, #4
10006032:	0436      	lsls	r6, r6, #16
10006034:	4071      	eors	r1, r6
10006036:	1c0d      	adds	r5, r1, #0
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
10006038:	1c11      	adds	r1, r2, #0
1000603a:	4001      	ands	r1, r0
1000603c:	5c79      	ldrb	r1, [r7, r1]
1000603e:	0609      	lsls	r1, r1, #24
10006040:	4069      	eors	r1, r5

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
10006042:	0c15      	lsrs	r5, r2, #16
10006044:	4028      	ands	r0, r5
10006046:	5c38      	ldrb	r0, [r7, r0]
10006048:	0200      	lsls	r0, r0, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
1000604a:	4041      	eors	r1, r0
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
1000604c:	6858      	ldr	r0, [r3, #4]
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
1000604e:	6119      	str	r1, [r3, #16]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
10006050:	4041      	eors	r1, r0
                RK[6]  = RK[2] ^ RK[5];
10006052:	6898      	ldr	r0, [r3, #8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
10006054:	6159      	str	r1, [r3, #20]
                RK[6]  = RK[2] ^ RK[5];
10006056:	4041      	eors	r1, r0
                RK[7]  = RK[3] ^ RK[6];
10006058:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
                RK[6]  = RK[2] ^ RK[5];
1000605a:	6199      	str	r1, [r3, #24]
                RK[7]  = RK[3] ^ RK[6];
1000605c:	61da      	str	r2, [r3, #28]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
1000605e:	3310      	adds	r3, #16
10006060:	2c28      	cmp	r4, #40	; 0x28
10006062:	d1d8      	bne.n	10006016 <mbedtls_aes_setkey_enc+0x66>
10006064:	e078      	b.n	10006158 <mbedtls_aes_setkey_enc+0x1a8>
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
10006066:	2400      	movs	r4, #0

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
10006068:	493c      	ldr	r1, [pc, #240]	; (1000615c <mbedtls_aes_setkey_enc+0x1ac>)
1000606a:	6818      	ldr	r0, [r3, #0]
1000606c:	5861      	ldr	r1, [r4, r1]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
1000606e:	695a      	ldr	r2, [r3, #20]
10006070:	4041      	eors	r1, r0
10006072:	20ff      	movs	r0, #255	; 0xff
10006074:	4f3a      	ldr	r7, [pc, #232]	; (10006160 <mbedtls_aes_setkey_enc+0x1b0>)
10006076:	0a15      	lsrs	r5, r2, #8
10006078:	4005      	ands	r5, r0
1000607a:	5d7e      	ldrb	r6, [r7, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
1000607c:	0e15      	lsrs	r5, r2, #24
1000607e:	4071      	eors	r1, r6
10006080:	5d7e      	ldrb	r6, [r7, r5]
10006082:	3404      	adds	r4, #4
10006084:	0436      	lsls	r6, r6, #16
10006086:	4071      	eors	r1, r6
10006088:	1c0d      	adds	r5, r1, #0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
1000608a:	1c11      	adds	r1, r2, #0
1000608c:	4001      	ands	r1, r0
1000608e:	5c79      	ldrb	r1, [r7, r1]
10006090:	0609      	lsls	r1, r1, #24
10006092:	4069      	eors	r1, r5

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
10006094:	0c15      	lsrs	r5, r2, #16
10006096:	4028      	ands	r0, r5
10006098:	5c38      	ldrb	r0, [r7, r0]
1000609a:	0200      	lsls	r0, r0, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
1000609c:	4041      	eors	r1, r0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
1000609e:	6858      	ldr	r0, [r3, #4]

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
100060a0:	6199      	str	r1, [r3, #24]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
100060a2:	4041      	eors	r1, r0
                RK[8]  = RK[2] ^ RK[7];
100060a4:	6898      	ldr	r0, [r3, #8]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
100060a6:	61d9      	str	r1, [r3, #28]
                RK[8]  = RK[2] ^ RK[7];
100060a8:	4041      	eors	r1, r0
                RK[9]  = RK[3] ^ RK[8];
100060aa:	68d8      	ldr	r0, [r3, #12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
100060ac:	6219      	str	r1, [r3, #32]
                RK[9]  = RK[3] ^ RK[8];
100060ae:	4041      	eors	r1, r0
                RK[10] = RK[4] ^ RK[9];
100060b0:	6918      	ldr	r0, [r3, #16]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
100060b2:	6259      	str	r1, [r3, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
100060b4:	4041      	eors	r1, r0
                RK[11] = RK[5] ^ RK[10];
100060b6:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
                RK[10] = RK[4] ^ RK[9];
100060b8:	6299      	str	r1, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
100060ba:	62da      	str	r2, [r3, #44]	; 0x2c
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
100060bc:	3318      	adds	r3, #24
100060be:	2c20      	cmp	r4, #32
100060c0:	d1d2      	bne.n	10006068 <mbedtls_aes_setkey_enc+0xb8>
100060c2:	e049      	b.n	10006158 <mbedtls_aes_setkey_enc+0x1a8>
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
100060c4:	2600      	movs	r6, #0
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
100060c6:	20ff      	movs	r0, #255	; 0xff

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
100060c8:	4a24      	ldr	r2, [pc, #144]	; (1000615c <mbedtls_aes_setkey_enc+0x1ac>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
100060ca:	69dd      	ldr	r5, [r3, #28]
100060cc:	6819      	ldr	r1, [r3, #0]
100060ce:	58b2      	ldr	r2, [r6, r2]
100060d0:	4c23      	ldr	r4, [pc, #140]	; (10006160 <mbedtls_aes_setkey_enc+0x1b0>)
100060d2:	404a      	eors	r2, r1
100060d4:	0a29      	lsrs	r1, r5, #8
100060d6:	4001      	ands	r1, r0
100060d8:	5c67      	ldrb	r7, [r4, r1]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
100060da:	0e29      	lsrs	r1, r5, #24
100060dc:	407a      	eors	r2, r7
100060de:	5c67      	ldrb	r7, [r4, r1]
100060e0:	3604      	adds	r6, #4
100060e2:	043f      	lsls	r7, r7, #16
100060e4:	407a      	eors	r2, r7
100060e6:	1c11      	adds	r1, r2, #0
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
100060e8:	1c2a      	adds	r2, r5, #0
100060ea:	4002      	ands	r2, r0
100060ec:	5ca2      	ldrb	r2, [r4, r2]
100060ee:	0612      	lsls	r2, r2, #24
100060f0:	404a      	eors	r2, r1

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
100060f2:	0c29      	lsrs	r1, r5, #16
100060f4:	4001      	ands	r1, r0
100060f6:	5c61      	ldrb	r1, [r4, r1]
100060f8:	0209      	lsls	r1, r1, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
100060fa:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
100060fc:	6859      	ldr	r1, [r3, #4]

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
100060fe:	621a      	str	r2, [r3, #32]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
10006100:	404a      	eors	r2, r1
                RK[10] = RK[2] ^ RK[9];
10006102:	6899      	ldr	r1, [r3, #8]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
10006104:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
10006106:	404a      	eors	r2, r1
                RK[11] = RK[3] ^ RK[10];
10006108:	68d9      	ldr	r1, [r3, #12]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
1000610a:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
1000610c:	404a      	eors	r2, r1

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
1000610e:	1c11      	adds	r1, r2, #0
10006110:	4001      	ands	r1, r0
10006112:	5c67      	ldrb	r7, [r4, r1]
10006114:	6919      	ldr	r1, [r3, #16]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
10006116:	62da      	str	r2, [r3, #44]	; 0x2c
10006118:	404f      	eors	r7, r1

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
1000611a:	0e11      	lsrs	r1, r2, #24
1000611c:	5c61      	ldrb	r1, [r4, r1]
1000611e:	0609      	lsls	r1, r1, #24
10006120:	4079      	eors	r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
10006122:	0a17      	lsrs	r7, r2, #8
10006124:	4007      	ands	r7, r0
10006126:	5de7      	ldrb	r7, [r4, r7]
10006128:	023f      	lsls	r7, r7, #8
1000612a:	404f      	eors	r7, r1
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
1000612c:	0c11      	lsrs	r1, r2, #16
1000612e:	1c0a      	adds	r2, r1, #0
10006130:	4002      	ands	r2, r0
10006132:	5ca2      	ldrb	r2, [r4, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
10006134:	6959      	ldr	r1, [r3, #20]
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
10006136:	0412      	lsls	r2, r2, #16
10006138:	407a      	eors	r2, r7

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
1000613a:	631a      	str	r2, [r3, #48]	; 0x30
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
1000613c:	404a      	eors	r2, r1
                RK[14] = RK[6] ^ RK[13];
1000613e:	6999      	ldr	r1, [r3, #24]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
10006140:	635a      	str	r2, [r3, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
10006142:	404a      	eors	r2, r1
10006144:	639a      	str	r2, [r3, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
10006146:	406a      	eors	r2, r5
10006148:	63da      	str	r2, [r3, #60]	; 0x3c
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
1000614a:	3320      	adds	r3, #32
1000614c:	2e1c      	cmp	r6, #28
1000614e:	d1ba      	bne.n	100060c6 <mbedtls_aes_setkey_enc+0x116>
10006150:	e002      	b.n	10006158 <mbedtls_aes_setkey_enc+0x1a8>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
10006152:	2020      	movs	r0, #32
10006154:	4240      	negs	r0, r0
10006156:	e000      	b.n	1000615a <mbedtls_aes_setkey_enc+0x1aa>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
10006158:	2000      	movs	r0, #0
}
1000615a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000615c:	1000dc38 	.word	0x1000dc38
10006160:	1000cb38 	.word	0x1000cb38

10006164 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
10006164:	b5f0      	push	{r4, r5, r6, r7, lr}
10006166:	1c05      	adds	r5, r0, #0
10006168:	b0c9      	sub	sp, #292	; 0x124
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
1000616a:	a802      	add	r0, sp, #8
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
1000616c:	1c0e      	adds	r6, r1, #0
1000616e:	1c14      	adds	r4, r2, #0
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
10006170:	f7ff ff0e 	bl	10005f90 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
10006174:	1c2b      	adds	r3, r5, #0
10006176:	3308      	adds	r3, #8
10006178:	606b      	str	r3, [r5, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
1000617a:	a802      	add	r0, sp, #8
1000617c:	1c31      	adds	r1, r6, #0
1000617e:	1c22      	adds	r2, r4, #0
10006180:	f7ff ff16 	bl	10005fb0 <mbedtls_aes_setkey_enc>
10006184:	9001      	str	r0, [sp, #4]
10006186:	2800      	cmp	r0, #0
10006188:	d142      	bne.n	10006210 <mbedtls_aes_setkey_dec+0xac>
        goto exit;

    ctx->nr = cty.nr;
1000618a:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
1000618c:	9a03      	ldr	r2, [sp, #12]
1000618e:	010b      	lsls	r3, r1, #4
10006190:	18d3      	adds	r3, r2, r3

    *RK++ = *SK++;
10006192:	681a      	ldr	r2, [r3, #0]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
10006194:	6029      	str	r1, [r5, #0]
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
10006196:	60aa      	str	r2, [r5, #8]
    *RK++ = *SK++;
10006198:	685a      	ldr	r2, [r3, #4]
1000619a:	60ea      	str	r2, [r5, #12]
    *RK++ = *SK++;
1000619c:	689a      	ldr	r2, [r3, #8]
1000619e:	612a      	str	r2, [r5, #16]
    *RK++ = *SK++;
100061a0:	1c2a      	adds	r2, r5, #0
100061a2:	68d8      	ldr	r0, [r3, #12]
100061a4:	3218      	adds	r2, #24
100061a6:	6168      	str	r0, [r5, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
100061a8:	3901      	subs	r1, #1
100061aa:	9100      	str	r1, [sp, #0]
100061ac:	9900      	ldr	r1, [sp, #0]
100061ae:	3b10      	subs	r3, #16
100061b0:	2900      	cmp	r1, #0
100061b2:	dd25      	ble.n	10006200 <mbedtls_aes_setkey_dec+0x9c>
100061b4:	2000      	movs	r0, #0
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
100061b6:	27ff      	movs	r7, #255	; 0xff
100061b8:	5819      	ldr	r1, [r3, r0]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
100061ba:	4d18      	ldr	r5, [pc, #96]	; (1000621c <mbedtls_aes_setkey_dec+0xb8>)
100061bc:	0e0e      	lsrs	r6, r1, #24
100061be:	5dae      	ldrb	r6, [r5, r6]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
100061c0:	400f      	ands	r7, r1
100061c2:	4c17      	ldr	r4, [pc, #92]	; (10006220 <mbedtls_aes_setkey_dec+0xbc>)
100061c4:	5def      	ldrb	r7, [r5, r7]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
100061c6:	00b6      	lsls	r6, r6, #2
100061c8:	5936      	ldr	r6, [r6, r4]
100061ca:	4c16      	ldr	r4, [pc, #88]	; (10006224 <mbedtls_aes_setkey_dec+0xc0>)

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
100061cc:	00bf      	lsls	r7, r7, #2
100061ce:	593f      	ldr	r7, [r7, r4]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
100061d0:	24ff      	movs	r4, #255	; 0xff
100061d2:	407e      	eors	r6, r7
100061d4:	0a0f      	lsrs	r7, r1, #8
100061d6:	4027      	ands	r7, r4
100061d8:	5def      	ldrb	r7, [r5, r7]
100061da:	4c13      	ldr	r4, [pc, #76]	; (10006228 <mbedtls_aes_setkey_dec+0xc4>)
100061dc:	00bf      	lsls	r7, r7, #2
100061de:	593f      	ldr	r7, [r7, r4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
100061e0:	24ff      	movs	r4, #255	; 0xff
100061e2:	0c09      	lsrs	r1, r1, #16
100061e4:	4021      	ands	r1, r4
100061e6:	5c69      	ldrb	r1, [r5, r1]
100061e8:	4d10      	ldr	r5, [pc, #64]	; (1000622c <mbedtls_aes_setkey_dec+0xc8>)
100061ea:	0089      	lsls	r1, r1, #2
100061ec:	407e      	eors	r6, r7
100061ee:	594f      	ldr	r7, [r1, r5]
100061f0:	407e      	eors	r6, r7

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
100061f2:	5016      	str	r6, [r2, r0]
100061f4:	3004      	adds	r0, #4
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
100061f6:	2810      	cmp	r0, #16
100061f8:	d1dd      	bne.n	100061b6 <mbedtls_aes_setkey_dec+0x52>
100061fa:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
100061fc:	9900      	ldr	r1, [sp, #0]
100061fe:	e7d3      	b.n	100061a8 <mbedtls_aes_setkey_dec+0x44>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
        }
    }

    *RK++ = *SK++;
10006200:	6819      	ldr	r1, [r3, #0]
10006202:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
10006204:	6859      	ldr	r1, [r3, #4]
10006206:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
10006208:	6899      	ldr	r1, [r3, #8]
1000620a:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
1000620c:	68db      	ldr	r3, [r3, #12]
1000620e:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
10006210:	a802      	add	r0, sp, #8
10006212:	f7ff fec4 	bl	10005f9e <mbedtls_aes_free>

    return( ret );
}
10006216:	9801      	ldr	r0, [sp, #4]
10006218:	b049      	add	sp, #292	; 0x124
1000621a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000621c:	1000cb38 	.word	0x1000cb38
10006220:	1000d838 	.word	0x1000d838
10006224:	1000cc38 	.word	0x1000cc38
10006228:	1000d038 	.word	0x1000d038
1000622c:	1000d438 	.word	0x1000d438

10006230 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
10006230:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006232:	784c      	ldrb	r4, [r1, #1]
10006234:	788b      	ldrb	r3, [r1, #2]
10006236:	0224      	lsls	r4, r4, #8
10006238:	041b      	lsls	r3, r3, #16
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
1000623a:	b087      	sub	sp, #28
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
1000623c:	780e      	ldrb	r6, [r1, #0]
1000623e:	431c      	orrs	r4, r3
10006240:	78cb      	ldrb	r3, [r1, #3]
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
10006242:	9200      	str	r2, [sp, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
10006244:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006246:	4334      	orrs	r4, r6
10006248:	061b      	lsls	r3, r3, #24
1000624a:	431c      	orrs	r4, r3
1000624c:	6813      	ldr	r3, [r2, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
1000624e:	794e      	ldrb	r6, [r1, #5]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006250:	4063      	eors	r3, r4
10006252:	9301      	str	r3, [sp, #4]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
10006254:	798b      	ldrb	r3, [r1, #6]
10006256:	0236      	lsls	r6, r6, #8
10006258:	041b      	lsls	r3, r3, #16
1000625a:	790c      	ldrb	r4, [r1, #4]
1000625c:	431e      	orrs	r6, r3
1000625e:	79cb      	ldrb	r3, [r1, #7]
10006260:	4326      	orrs	r6, r4
10006262:	061b      	lsls	r3, r3, #24
10006264:	431e      	orrs	r6, r3
10006266:	6853      	ldr	r3, [r2, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
10006268:	7a4c      	ldrb	r4, [r1, #9]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
1000626a:	4073      	eors	r3, r6
1000626c:	9302      	str	r3, [sp, #8]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
1000626e:	7a8b      	ldrb	r3, [r1, #10]
10006270:	0224      	lsls	r4, r4, #8
10006272:	041b      	lsls	r3, r3, #16
10006274:	431c      	orrs	r4, r3
10006276:	7a0b      	ldrb	r3, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
10006278:	7b4d      	ldrb	r5, [r1, #13]

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
1000627a:	431c      	orrs	r4, r3
1000627c:	7acb      	ldrb	r3, [r1, #11]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
1000627e:	022d      	lsls	r5, r5, #8

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
10006280:	061b      	lsls	r3, r3, #24
10006282:	431c      	orrs	r4, r3
10006284:	6893      	ldr	r3, [r2, #8]
10006286:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
10006288:	7b8b      	ldrb	r3, [r1, #14]
1000628a:	041b      	lsls	r3, r3, #16
1000628c:	431d      	orrs	r5, r3
1000628e:	7b0b      	ldrb	r3, [r1, #12]
10006290:	7bc9      	ldrb	r1, [r1, #15]
10006292:	431d      	orrs	r5, r3
10006294:	060b      	lsls	r3, r1, #24
10006296:	1c29      	adds	r1, r5, #0
10006298:	4319      	orrs	r1, r3
1000629a:	68d3      	ldr	r3, [r2, #12]
1000629c:	3210      	adds	r2, #16
1000629e:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
100062a0:	6803      	ldr	r3, [r0, #0]
100062a2:	105b      	asrs	r3, r3, #1
100062a4:	3b01      	subs	r3, #1
100062a6:	9305      	str	r3, [sp, #20]
100062a8:	9805      	ldr	r0, [sp, #20]
100062aa:	23ff      	movs	r3, #255	; 0xff
100062ac:	2800      	cmp	r0, #0
100062ae:	dc00      	bgt.n	100062b2 <mbedtls_internal_aes_encrypt+0x82>
100062b0:	e0cd      	b.n	1000644e <mbedtls_internal_aes_encrypt+0x21e>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
100062b2:	9801      	ldr	r0, [sp, #4]
100062b4:	4dd7      	ldr	r5, [pc, #860]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
100062b6:	4018      	ands	r0, r3
100062b8:	0080      	lsls	r0, r0, #2
100062ba:	582f      	ldr	r7, [r5, r0]
100062bc:	6810      	ldr	r0, [r2, #0]
100062be:	4dd6      	ldr	r5, [pc, #856]	; (10006618 <mbedtls_internal_aes_encrypt+0x3e8>)
100062c0:	4047      	eors	r7, r0
100062c2:	0e08      	lsrs	r0, r1, #24
100062c4:	0080      	lsls	r0, r0, #2
100062c6:	5940      	ldr	r0, [r0, r5]
100062c8:	4047      	eors	r7, r0
100062ca:	48d4      	ldr	r0, [pc, #848]	; (1000661c <mbedtls_internal_aes_encrypt+0x3ec>)
100062cc:	4684      	mov	ip, r0
100062ce:	4666      	mov	r6, ip
100062d0:	9802      	ldr	r0, [sp, #8]
100062d2:	0a00      	lsrs	r0, r0, #8
100062d4:	4018      	ands	r0, r3
100062d6:	0080      	lsls	r0, r0, #2
100062d8:	5980      	ldr	r0, [r0, r6]
100062da:	0c26      	lsrs	r6, r4, #16
100062dc:	4047      	eors	r7, r0
100062de:	401e      	ands	r6, r3
100062e0:	48cf      	ldr	r0, [pc, #828]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
100062e2:	00b6      	lsls	r6, r6, #2
100062e4:	5836      	ldr	r6, [r6, r0]
100062e6:	4660      	mov	r0, ip
100062e8:	4077      	eors	r7, r6
100062ea:	9e02      	ldr	r6, [sp, #8]
100062ec:	9703      	str	r7, [sp, #12]
100062ee:	401e      	ands	r6, r3
100062f0:	4fc8      	ldr	r7, [pc, #800]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
100062f2:	00b6      	lsls	r6, r6, #2
100062f4:	59bf      	ldr	r7, [r7, r6]
100062f6:	6856      	ldr	r6, [r2, #4]
100062f8:	4077      	eors	r7, r6
100062fa:	9e01      	ldr	r6, [sp, #4]
100062fc:	0e36      	lsrs	r6, r6, #24
100062fe:	00b6      	lsls	r6, r6, #2
10006300:	5976      	ldr	r6, [r6, r5]
10006302:	4077      	eors	r7, r6
10006304:	0a26      	lsrs	r6, r4, #8
10006306:	401e      	ands	r6, r3
10006308:	00b6      	lsls	r6, r6, #2
1000630a:	5836      	ldr	r6, [r6, r0]
1000630c:	48c4      	ldr	r0, [pc, #784]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
1000630e:	4077      	eors	r7, r6
10006310:	0c0e      	lsrs	r6, r1, #16
10006312:	401e      	ands	r6, r3
10006314:	00b6      	lsls	r6, r6, #2
10006316:	5836      	ldr	r6, [r6, r0]
10006318:	48be      	ldr	r0, [pc, #760]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
1000631a:	4077      	eors	r7, r6
1000631c:	1c26      	adds	r6, r4, #0
1000631e:	401e      	ands	r6, r3
10006320:	00b6      	lsls	r6, r6, #2
10006322:	9704      	str	r7, [sp, #16]
10006324:	5987      	ldr	r7, [r0, r6]
10006326:	6890      	ldr	r0, [r2, #8]
10006328:	0e24      	lsrs	r4, r4, #24
1000632a:	4047      	eors	r7, r0
1000632c:	9802      	ldr	r0, [sp, #8]
1000632e:	00a4      	lsls	r4, r4, #2
10006330:	0e06      	lsrs	r6, r0, #24
10006332:	4660      	mov	r0, ip
10006334:	00b6      	lsls	r6, r6, #2
10006336:	5976      	ldr	r6, [r6, r5]
10006338:	4077      	eors	r7, r6
1000633a:	0a0e      	lsrs	r6, r1, #8
1000633c:	401e      	ands	r6, r3
1000633e:	00b6      	lsls	r6, r6, #2
10006340:	5836      	ldr	r6, [r6, r0]
10006342:	9801      	ldr	r0, [sp, #4]
10006344:	4077      	eors	r7, r6
10006346:	0c06      	lsrs	r6, r0, #16
10006348:	401e      	ands	r6, r3
1000634a:	48b5      	ldr	r0, [pc, #724]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
1000634c:	00b6      	lsls	r6, r6, #2
1000634e:	5836      	ldr	r6, [r6, r0]
10006350:	4019      	ands	r1, r3
10006352:	48b0      	ldr	r0, [pc, #704]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
10006354:	0089      	lsls	r1, r1, #2
10006356:	5841      	ldr	r1, [r0, r1]
10006358:	68d0      	ldr	r0, [r2, #12]
1000635a:	4077      	eors	r7, r6
1000635c:	4041      	eors	r1, r0
1000635e:	9801      	ldr	r0, [sp, #4]
10006360:	5964      	ldr	r4, [r4, r5]
10006362:	0a06      	lsrs	r6, r0, #8
10006364:	4660      	mov	r0, ip
10006366:	401e      	ands	r6, r3
10006368:	00b6      	lsls	r6, r6, #2
1000636a:	4061      	eors	r1, r4
1000636c:	5834      	ldr	r4, [r6, r0]
1000636e:	9802      	ldr	r0, [sp, #8]
10006370:	4061      	eors	r1, r4
10006372:	0c06      	lsrs	r6, r0, #16
10006374:	401e      	ands	r6, r3
10006376:	48aa      	ldr	r0, [pc, #680]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
10006378:	00b6      	lsls	r6, r6, #2
1000637a:	5834      	ldr	r4, [r6, r0]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
1000637c:	9e03      	ldr	r6, [sp, #12]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
1000637e:	4061      	eors	r1, r4
10006380:	48a4      	ldr	r0, [pc, #656]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
10006382:	401e      	ands	r6, r3
10006384:	0e0c      	lsrs	r4, r1, #24
10006386:	00b6      	lsls	r6, r6, #2
10006388:	00a4      	lsls	r4, r4, #2
1000638a:	5964      	ldr	r4, [r4, r5]
1000638c:	5986      	ldr	r6, [r0, r6]
1000638e:	6910      	ldr	r0, [r2, #16]
10006390:	4066      	eors	r6, r4
10006392:	4046      	eors	r6, r0
10006394:	9804      	ldr	r0, [sp, #16]
10006396:	0a04      	lsrs	r4, r0, #8
10006398:	4660      	mov	r0, ip
1000639a:	401c      	ands	r4, r3
1000639c:	00a4      	lsls	r4, r4, #2
1000639e:	5824      	ldr	r4, [r4, r0]
100063a0:	489f      	ldr	r0, [pc, #636]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
100063a2:	4066      	eors	r6, r4
100063a4:	0c3c      	lsrs	r4, r7, #16
100063a6:	401c      	ands	r4, r3
100063a8:	00a4      	lsls	r4, r4, #2
100063aa:	5824      	ldr	r4, [r4, r0]
100063ac:	9803      	ldr	r0, [sp, #12]
100063ae:	4066      	eors	r6, r4
100063b0:	9601      	str	r6, [sp, #4]
100063b2:	9e04      	ldr	r6, [sp, #16]
100063b4:	0e04      	lsrs	r4, r0, #24
100063b6:	401e      	ands	r6, r3
100063b8:	4896      	ldr	r0, [pc, #600]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
100063ba:	00b6      	lsls	r6, r6, #2
100063bc:	00a4      	lsls	r4, r4, #2
100063be:	5964      	ldr	r4, [r4, r5]
100063c0:	5986      	ldr	r6, [r0, r6]
100063c2:	6950      	ldr	r0, [r2, #20]
100063c4:	4066      	eors	r6, r4
100063c6:	4046      	eors	r6, r0
100063c8:	4660      	mov	r0, ip
100063ca:	0a3c      	lsrs	r4, r7, #8
100063cc:	401c      	ands	r4, r3
100063ce:	00a4      	lsls	r4, r4, #2
100063d0:	5824      	ldr	r4, [r4, r0]
100063d2:	4893      	ldr	r0, [pc, #588]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
100063d4:	4066      	eors	r6, r4
100063d6:	0c0c      	lsrs	r4, r1, #16
100063d8:	401c      	ands	r4, r3
100063da:	00a4      	lsls	r4, r4, #2
100063dc:	5824      	ldr	r4, [r4, r0]
100063de:	9804      	ldr	r0, [sp, #16]
100063e0:	4066      	eors	r6, r4
100063e2:	9602      	str	r6, [sp, #8]
100063e4:	1c3e      	adds	r6, r7, #0
100063e6:	0e04      	lsrs	r4, r0, #24
100063e8:	401e      	ands	r6, r3
100063ea:	488a      	ldr	r0, [pc, #552]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
100063ec:	00b6      	lsls	r6, r6, #2
100063ee:	00a4      	lsls	r4, r4, #2
100063f0:	5986      	ldr	r6, [r0, r6]
100063f2:	5964      	ldr	r4, [r4, r5]
100063f4:	6990      	ldr	r0, [r2, #24]
100063f6:	4074      	eors	r4, r6
100063f8:	4044      	eors	r4, r0
100063fa:	4660      	mov	r0, ip
100063fc:	0a0e      	lsrs	r6, r1, #8
100063fe:	401e      	ands	r6, r3
10006400:	00b6      	lsls	r6, r6, #2
10006402:	5836      	ldr	r6, [r6, r0]
10006404:	9803      	ldr	r0, [sp, #12]
10006406:	4074      	eors	r4, r6
10006408:	0c06      	lsrs	r6, r0, #16
1000640a:	401e      	ands	r6, r3
1000640c:	4884      	ldr	r0, [pc, #528]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
1000640e:	00b6      	lsls	r6, r6, #2
10006410:	5836      	ldr	r6, [r6, r0]
10006412:	4019      	ands	r1, r3
10006414:	487f      	ldr	r0, [pc, #508]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
10006416:	0e3f      	lsrs	r7, r7, #24
10006418:	00bf      	lsls	r7, r7, #2
1000641a:	0089      	lsls	r1, r1, #2
1000641c:	597d      	ldr	r5, [r7, r5]
1000641e:	5841      	ldr	r1, [r0, r1]
10006420:	69d0      	ldr	r0, [r2, #28]
10006422:	4069      	eors	r1, r5
10006424:	4041      	eors	r1, r0
10006426:	9803      	ldr	r0, [sp, #12]
10006428:	4074      	eors	r4, r6
1000642a:	0a07      	lsrs	r7, r0, #8
1000642c:	4660      	mov	r0, ip
1000642e:	401f      	ands	r7, r3
10006430:	00bf      	lsls	r7, r7, #2
10006432:	583d      	ldr	r5, [r7, r0]
10006434:	9804      	ldr	r0, [sp, #16]
10006436:	4069      	eors	r1, r5
10006438:	0c07      	lsrs	r7, r0, #16
1000643a:	401f      	ands	r7, r3
1000643c:	4b78      	ldr	r3, [pc, #480]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
1000643e:	00bf      	lsls	r7, r7, #2
10006440:	58fb      	ldr	r3, [r7, r3]
10006442:	3220      	adds	r2, #32
10006444:	4059      	eors	r1, r3
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
10006446:	9b05      	ldr	r3, [sp, #20]
10006448:	3b01      	subs	r3, #1
1000644a:	9305      	str	r3, [sp, #20]
1000644c:	e72c      	b.n	100062a8 <mbedtls_internal_aes_encrypt+0x78>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
1000644e:	4872      	ldr	r0, [pc, #456]	; (10006618 <mbedtls_internal_aes_encrypt+0x3e8>)
10006450:	9d01      	ldr	r5, [sp, #4]
10006452:	4684      	mov	ip, r0
10006454:	401d      	ands	r5, r3
10006456:	4e6f      	ldr	r6, [pc, #444]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
10006458:	00ad      	lsls	r5, r5, #2
1000645a:	5976      	ldr	r6, [r6, r5]
1000645c:	4665      	mov	r5, ip
1000645e:	0e08      	lsrs	r0, r1, #24
10006460:	0080      	lsls	r0, r0, #2
10006462:	5940      	ldr	r0, [r0, r5]
10006464:	4f6d      	ldr	r7, [pc, #436]	; (1000661c <mbedtls_internal_aes_encrypt+0x3ec>)
10006466:	4046      	eors	r6, r0
10006468:	6810      	ldr	r0, [r2, #0]
1000646a:	4d6d      	ldr	r5, [pc, #436]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
1000646c:	4046      	eors	r6, r0
1000646e:	9802      	ldr	r0, [sp, #8]
10006470:	0a00      	lsrs	r0, r0, #8
10006472:	4018      	ands	r0, r3
10006474:	0080      	lsls	r0, r0, #2
10006476:	59c0      	ldr	r0, [r0, r7]
10006478:	4046      	eors	r6, r0
1000647a:	0c20      	lsrs	r0, r4, #16
1000647c:	4018      	ands	r0, r3
1000647e:	0080      	lsls	r0, r0, #2
10006480:	5940      	ldr	r0, [r0, r5]
10006482:	4d64      	ldr	r5, [pc, #400]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
10006484:	4046      	eors	r6, r0
10006486:	9603      	str	r6, [sp, #12]
10006488:	9e02      	ldr	r6, [sp, #8]
1000648a:	9801      	ldr	r0, [sp, #4]
1000648c:	401e      	ands	r6, r3
1000648e:	00b6      	lsls	r6, r6, #2
10006490:	59ae      	ldr	r6, [r5, r6]
10006492:	4665      	mov	r5, ip
10006494:	0e00      	lsrs	r0, r0, #24
10006496:	0080      	lsls	r0, r0, #2
10006498:	5940      	ldr	r0, [r0, r5]
1000649a:	4d61      	ldr	r5, [pc, #388]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
1000649c:	4046      	eors	r6, r0
1000649e:	6850      	ldr	r0, [r2, #4]
100064a0:	4046      	eors	r6, r0
100064a2:	0a20      	lsrs	r0, r4, #8
100064a4:	4018      	ands	r0, r3
100064a6:	0080      	lsls	r0, r0, #2
100064a8:	59c0      	ldr	r0, [r0, r7]
100064aa:	4046      	eors	r6, r0
100064ac:	0c08      	lsrs	r0, r1, #16
100064ae:	4018      	ands	r0, r3
100064b0:	0080      	lsls	r0, r0, #2
100064b2:	5940      	ldr	r0, [r0, r5]
100064b4:	4d57      	ldr	r5, [pc, #348]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
100064b6:	4046      	eors	r6, r0
100064b8:	9604      	str	r6, [sp, #16]
100064ba:	1c26      	adds	r6, r4, #0
100064bc:	401e      	ands	r6, r3
100064be:	00b6      	lsls	r6, r6, #2
100064c0:	59ae      	ldr	r6, [r5, r6]
100064c2:	4665      	mov	r5, ip
100064c4:	9802      	ldr	r0, [sp, #8]
100064c6:	0e24      	lsrs	r4, r4, #24
100064c8:	0e00      	lsrs	r0, r0, #24
100064ca:	0080      	lsls	r0, r0, #2
100064cc:	5940      	ldr	r0, [r0, r5]
100064ce:	4d54      	ldr	r5, [pc, #336]	; (10006620 <mbedtls_internal_aes_encrypt+0x3f0>)
100064d0:	4046      	eors	r6, r0
100064d2:	6890      	ldr	r0, [r2, #8]
100064d4:	00a4      	lsls	r4, r4, #2
100064d6:	4046      	eors	r6, r0
100064d8:	0a08      	lsrs	r0, r1, #8
100064da:	4018      	ands	r0, r3
100064dc:	0080      	lsls	r0, r0, #2
100064de:	59c0      	ldr	r0, [r0, r7]
100064e0:	4019      	ands	r1, r3
100064e2:	4046      	eors	r6, r0
100064e4:	9801      	ldr	r0, [sp, #4]
100064e6:	0089      	lsls	r1, r1, #2
100064e8:	0c00      	lsrs	r0, r0, #16
100064ea:	4018      	ands	r0, r3
100064ec:	0080      	lsls	r0, r0, #2
100064ee:	5940      	ldr	r0, [r0, r5]
100064f0:	4046      	eors	r6, r0
100064f2:	4848      	ldr	r0, [pc, #288]	; (10006614 <mbedtls_internal_aes_encrypt+0x3e4>)
100064f4:	5841      	ldr	r1, [r0, r1]
100064f6:	4660      	mov	r0, ip
100064f8:	5820      	ldr	r0, [r4, r0]
100064fa:	4041      	eors	r1, r0
100064fc:	68d0      	ldr	r0, [r2, #12]
100064fe:	4041      	eors	r1, r0
10006500:	9801      	ldr	r0, [sp, #4]
10006502:	0a04      	lsrs	r4, r0, #8
10006504:	401c      	ands	r4, r3
10006506:	9802      	ldr	r0, [sp, #8]
10006508:	00a4      	lsls	r4, r4, #2
1000650a:	59e7      	ldr	r7, [r4, r7]
1000650c:	0c04      	lsrs	r4, r0, #16
1000650e:	401c      	ands	r4, r3
10006510:	00a4      	lsls	r4, r4, #2
10006512:	4079      	eors	r1, r7
10006514:	5967      	ldr	r7, [r4, r5]

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
10006516:	9803      	ldr	r0, [sp, #12]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10006518:	404f      	eors	r7, r1

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
1000651a:	4942      	ldr	r1, [pc, #264]	; (10006624 <mbedtls_internal_aes_encrypt+0x3f4>)
1000651c:	4018      	ands	r0, r3
1000651e:	5c0c      	ldrb	r4, [r1, r0]
10006520:	6915      	ldr	r5, [r2, #16]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
10006522:	0e38      	lsrs	r0, r7, #24
10006524:	4065      	eors	r5, r4
10006526:	1c2c      	adds	r4, r5, #0
10006528:	5c08      	ldrb	r0, [r1, r0]
1000652a:	0600      	lsls	r0, r0, #24
1000652c:	4044      	eors	r4, r0

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
1000652e:	9804      	ldr	r0, [sp, #16]
10006530:	0a00      	lsrs	r0, r0, #8
10006532:	4018      	ands	r0, r3
10006534:	5c0d      	ldrb	r5, [r1, r0]
10006536:	1c20      	adds	r0, r4, #0
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
10006538:	0c34      	lsrs	r4, r6, #16
1000653a:	401c      	ands	r4, r3

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
1000653c:	022d      	lsls	r5, r5, #8
1000653e:	4068      	eors	r0, r5
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
10006540:	5d0d      	ldrb	r5, [r1, r4]
10006542:	6954      	ldr	r4, [r2, #20]
10006544:	042d      	lsls	r5, r5, #16
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
10006546:	4045      	eors	r5, r0
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
10006548:	9804      	ldr	r0, [sp, #16]
1000654a:	4018      	ands	r0, r3
1000654c:	5c08      	ldrb	r0, [r1, r0]
1000654e:	4044      	eors	r4, r0
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
10006550:	9803      	ldr	r0, [sp, #12]
10006552:	0e00      	lsrs	r0, r0, #24
10006554:	5c08      	ldrb	r0, [r1, r0]
10006556:	0600      	lsls	r0, r0, #24
10006558:	4060      	eors	r0, r4
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
1000655a:	0a34      	lsrs	r4, r6, #8
1000655c:	401c      	ands	r4, r3
1000655e:	5d0c      	ldrb	r4, [r1, r4]
10006560:	0224      	lsls	r4, r4, #8
10006562:	4060      	eors	r0, r4
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
10006564:	0c3c      	lsrs	r4, r7, #16
10006566:	401c      	ands	r4, r3
10006568:	5d0c      	ldrb	r4, [r1, r4]
1000656a:	0424      	lsls	r4, r4, #16
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
1000656c:	4044      	eors	r4, r0
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
1000656e:	1c30      	adds	r0, r6, #0
10006570:	4018      	ands	r0, r3
10006572:	5c08      	ldrb	r0, [r1, r0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
10006574:	9401      	str	r4, [sp, #4]
10006576:	6994      	ldr	r4, [r2, #24]
10006578:	69d2      	ldr	r2, [r2, #28]
1000657a:	4044      	eors	r4, r0

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
1000657c:	9804      	ldr	r0, [sp, #16]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
1000657e:	0e36      	lsrs	r6, r6, #24

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
10006580:	0e00      	lsrs	r0, r0, #24
10006582:	5c08      	ldrb	r0, [r1, r0]
10006584:	0600      	lsls	r0, r0, #24
10006586:	4060      	eors	r0, r4
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
10006588:	0a3c      	lsrs	r4, r7, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
1000658a:	401f      	ands	r7, r3
1000658c:	5dcf      	ldrb	r7, [r1, r7]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
1000658e:	401c      	ands	r4, r3
10006590:	5d0c      	ldrb	r4, [r1, r4]
10006592:	4057      	eors	r7, r2

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
10006594:	5d8a      	ldrb	r2, [r1, r6]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
10006596:	0224      	lsls	r4, r4, #8

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
10006598:	0612      	lsls	r2, r2, #24
1000659a:	4044      	eors	r4, r0
1000659c:	4057      	eors	r7, r2
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
1000659e:	9803      	ldr	r0, [sp, #12]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
100065a0:	9a03      	ldr	r2, [sp, #12]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
100065a2:	0c00      	lsrs	r0, r0, #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
100065a4:	0a16      	lsrs	r6, r2, #8
100065a6:	401e      	ands	r6, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
100065a8:	4018      	ands	r0, r3
100065aa:	5c08      	ldrb	r0, [r1, r0]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
100065ac:	5d8a      	ldrb	r2, [r1, r6]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
100065ae:	0400      	lsls	r0, r0, #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
100065b0:	0212      	lsls	r2, r2, #8
100065b2:	4057      	eors	r7, r2
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
100065b4:	9a04      	ldr	r2, [sp, #16]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
100065b6:	4060      	eors	r0, r4
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
100065b8:	0c16      	lsrs	r6, r2, #16
100065ba:	4033      	ands	r3, r6
100065bc:	5cca      	ldrb	r2, [r1, r3]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
100065be:	9b00      	ldr	r3, [sp, #0]
100065c0:	9900      	ldr	r1, [sp, #0]
100065c2:	701d      	strb	r5, [r3, #0]
100065c4:	0a2b      	lsrs	r3, r5, #8
100065c6:	704b      	strb	r3, [r1, #1]
100065c8:	0c2b      	lsrs	r3, r5, #16
100065ca:	0e2d      	lsrs	r5, r5, #24
100065cc:	708b      	strb	r3, [r1, #2]
100065ce:	70cd      	strb	r5, [r1, #3]
100065d0:	1c0b      	adds	r3, r1, #0
    PUT_UINT32_LE( X1, output,  4 );
100065d2:	4669      	mov	r1, sp
100065d4:	7909      	ldrb	r1, [r1, #4]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
100065d6:	0412      	lsls	r2, r2, #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
100065d8:	7119      	strb	r1, [r3, #4]
100065da:	9b01      	ldr	r3, [sp, #4]
100065dc:	9900      	ldr	r1, [sp, #0]
100065de:	0a1b      	lsrs	r3, r3, #8
100065e0:	714b      	strb	r3, [r1, #5]
100065e2:	9b01      	ldr	r3, [sp, #4]
    PUT_UINT32_LE( X2, output,  8 );
100065e4:	7208      	strb	r0, [r1, #8]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
100065e6:	0c1b      	lsrs	r3, r3, #16
100065e8:	718b      	strb	r3, [r1, #6]
100065ea:	9b01      	ldr	r3, [sp, #4]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
100065ec:	407a      	eors	r2, r7
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
100065ee:	0e1c      	lsrs	r4, r3, #24
    PUT_UINT32_LE( X2, output,  8 );
100065f0:	0a03      	lsrs	r3, r0, #8
100065f2:	724b      	strb	r3, [r1, #9]
100065f4:	0c03      	lsrs	r3, r0, #16
100065f6:	0e00      	lsrs	r0, r0, #24
100065f8:	72c8      	strb	r0, [r1, #11]
    PUT_UINT32_LE( X3, output, 12 );

    return( 0 );
}
100065fa:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
100065fc:	728b      	strb	r3, [r1, #10]
    PUT_UINT32_LE( X3, output, 12 );
100065fe:	0a13      	lsrs	r3, r2, #8
10006600:	730a      	strb	r2, [r1, #12]
10006602:	734b      	strb	r3, [r1, #13]
10006604:	0c13      	lsrs	r3, r2, #16
10006606:	0e12      	lsrs	r2, r2, #24
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
10006608:	71cc      	strb	r4, [r1, #7]
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
1000660a:	738b      	strb	r3, [r1, #14]
1000660c:	73ca      	strb	r2, [r1, #15]

    return( 0 );
}
1000660e:	b007      	add	sp, #28
10006610:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006612:	46c0      	nop			; (mov r8, r8)
10006614:	1000dc60 	.word	0x1000dc60
10006618:	1000e860 	.word	0x1000e860
1000661c:	1000e060 	.word	0x1000e060
10006620:	1000e460 	.word	0x1000e460
10006624:	1000cb38 	.word	0x1000cb38

10006628 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
10006628:	b5f0      	push	{r4, r5, r6, r7, lr}
1000662a:	b089      	sub	sp, #36	; 0x24
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
1000662c:	784e      	ldrb	r6, [r1, #1]
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
1000662e:	9202      	str	r2, [sp, #8]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006630:	788a      	ldrb	r2, [r1, #2]
10006632:	0236      	lsls	r6, r6, #8
10006634:	0412      	lsls	r2, r2, #16
                                  unsigned char output[16] )
{
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
10006636:	6843      	ldr	r3, [r0, #4]
10006638:	4316      	orrs	r6, r2

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
1000663a:	78cc      	ldrb	r4, [r1, #3]
1000663c:	780a      	ldrb	r2, [r1, #0]
1000663e:	0624      	lsls	r4, r4, #24
10006640:	4316      	orrs	r6, r2
10006642:	681a      	ldr	r2, [r3, #0]
10006644:	4326      	orrs	r6, r4
10006646:	4072      	eors	r2, r6
10006648:	9203      	str	r2, [sp, #12]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
1000664a:	794a      	ldrb	r2, [r1, #5]
1000664c:	79cc      	ldrb	r4, [r1, #7]
1000664e:	0216      	lsls	r6, r2, #8
10006650:	798a      	ldrb	r2, [r1, #6]
10006652:	0624      	lsls	r4, r4, #24
10006654:	0412      	lsls	r2, r2, #16
10006656:	4332      	orrs	r2, r6
10006658:	790e      	ldrb	r6, [r1, #4]
1000665a:	4332      	orrs	r2, r6
1000665c:	4322      	orrs	r2, r4
1000665e:	685c      	ldr	r4, [r3, #4]
10006660:	4054      	eors	r4, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
10006662:	7a4a      	ldrb	r2, [r1, #9]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
10006664:	9404      	str	r4, [sp, #16]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
10006666:	0214      	lsls	r4, r2, #8
10006668:	7a8a      	ldrb	r2, [r1, #10]
1000666a:	0412      	lsls	r2, r2, #16
1000666c:	4322      	orrs	r2, r4
1000666e:	7a0c      	ldrb	r4, [r1, #8]
10006670:	4322      	orrs	r2, r4
10006672:	7acc      	ldrb	r4, [r1, #11]
10006674:	0624      	lsls	r4, r4, #24
10006676:	4322      	orrs	r2, r4
10006678:	689c      	ldr	r4, [r3, #8]
1000667a:	4062      	eors	r2, r4
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
1000667c:	7b4c      	ldrb	r4, [r1, #13]
1000667e:	0225      	lsls	r5, r4, #8
10006680:	7b8c      	ldrb	r4, [r1, #14]
10006682:	0424      	lsls	r4, r4, #16
10006684:	432c      	orrs	r4, r5
10006686:	7b0d      	ldrb	r5, [r1, #12]
10006688:	7bc9      	ldrb	r1, [r1, #15]
1000668a:	432c      	orrs	r4, r5
1000668c:	0609      	lsls	r1, r1, #24
1000668e:	430c      	orrs	r4, r1
10006690:	68d9      	ldr	r1, [r3, #12]
10006692:	3310      	adds	r3, #16
10006694:	404c      	eors	r4, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
10006696:	6801      	ldr	r1, [r0, #0]
10006698:	1049      	asrs	r1, r1, #1
1000669a:	3901      	subs	r1, #1
1000669c:	9107      	str	r1, [sp, #28]
1000669e:	9907      	ldr	r1, [sp, #28]
100066a0:	9301      	str	r3, [sp, #4]
100066a2:	23ff      	movs	r3, #255	; 0xff
100066a4:	2900      	cmp	r1, #0
100066a6:	dc00      	bgt.n	100066aa <mbedtls_internal_aes_decrypt+0x82>
100066a8:	e0cd      	b.n	10006846 <mbedtls_internal_aes_decrypt+0x21e>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
100066aa:	9803      	ldr	r0, [sp, #12]
100066ac:	49df      	ldr	r1, [pc, #892]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
100066ae:	4018      	ands	r0, r3
100066b0:	0080      	lsls	r0, r0, #2
100066b2:	580f      	ldr	r7, [r1, r0]
100066b4:	9901      	ldr	r1, [sp, #4]
100066b6:	4dde      	ldr	r5, [pc, #888]	; (10006a30 <mbedtls_internal_aes_decrypt+0x408>)
100066b8:	6809      	ldr	r1, [r1, #0]
100066ba:	0c16      	lsrs	r6, r2, #16
100066bc:	404f      	eors	r7, r1
100066be:	9904      	ldr	r1, [sp, #16]
100066c0:	401e      	ands	r6, r3
100066c2:	0e08      	lsrs	r0, r1, #24
100066c4:	49db      	ldr	r1, [pc, #876]	; (10006a34 <mbedtls_internal_aes_decrypt+0x40c>)
100066c6:	0080      	lsls	r0, r0, #2
100066c8:	468c      	mov	ip, r1
100066ca:	5940      	ldr	r0, [r0, r5]
100066cc:	00b6      	lsls	r6, r6, #2
100066ce:	4047      	eors	r7, r0
100066d0:	0a20      	lsrs	r0, r4, #8
100066d2:	4018      	ands	r0, r3
100066d4:	0080      	lsls	r0, r0, #2
100066d6:	5840      	ldr	r0, [r0, r1]
100066d8:	49d4      	ldr	r1, [pc, #848]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
100066da:	4047      	eors	r7, r0
100066dc:	48d6      	ldr	r0, [pc, #856]	; (10006a38 <mbedtls_internal_aes_decrypt+0x410>)
100066de:	5836      	ldr	r6, [r6, r0]
100066e0:	4077      	eors	r7, r6
100066e2:	9e04      	ldr	r6, [sp, #16]
100066e4:	9705      	str	r7, [sp, #20]
100066e6:	401e      	ands	r6, r3
100066e8:	00b6      	lsls	r6, r6, #2
100066ea:	598f      	ldr	r7, [r1, r6]
100066ec:	9901      	ldr	r1, [sp, #4]
100066ee:	0e16      	lsrs	r6, r2, #24
100066f0:	6849      	ldr	r1, [r1, #4]
100066f2:	00b6      	lsls	r6, r6, #2
100066f4:	5976      	ldr	r6, [r6, r5]
100066f6:	404f      	eors	r7, r1
100066f8:	9903      	ldr	r1, [sp, #12]
100066fa:	4077      	eors	r7, r6
100066fc:	0a0e      	lsrs	r6, r1, #8
100066fe:	4661      	mov	r1, ip
10006700:	401e      	ands	r6, r3
10006702:	00b6      	lsls	r6, r6, #2
10006704:	5876      	ldr	r6, [r6, r1]
10006706:	49c9      	ldr	r1, [pc, #804]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
10006708:	4077      	eors	r7, r6
1000670a:	0c26      	lsrs	r6, r4, #16
1000670c:	401e      	ands	r6, r3
1000670e:	00b6      	lsls	r6, r6, #2
10006710:	5836      	ldr	r6, [r6, r0]
10006712:	4077      	eors	r7, r6
10006714:	1c16      	adds	r6, r2, #0
10006716:	401e      	ands	r6, r3
10006718:	00b6      	lsls	r6, r6, #2
1000671a:	9706      	str	r7, [sp, #24]
1000671c:	598f      	ldr	r7, [r1, r6]
1000671e:	9901      	ldr	r1, [sp, #4]
10006720:	0e26      	lsrs	r6, r4, #24
10006722:	6889      	ldr	r1, [r1, #8]
10006724:	00b6      	lsls	r6, r6, #2
10006726:	5976      	ldr	r6, [r6, r5]
10006728:	404f      	eors	r7, r1
1000672a:	9904      	ldr	r1, [sp, #16]
1000672c:	4077      	eors	r7, r6
1000672e:	0a0e      	lsrs	r6, r1, #8
10006730:	4661      	mov	r1, ip
10006732:	401e      	ands	r6, r3
10006734:	00b6      	lsls	r6, r6, #2
10006736:	5876      	ldr	r6, [r6, r1]
10006738:	9903      	ldr	r1, [sp, #12]
1000673a:	4077      	eors	r7, r6
1000673c:	0c0e      	lsrs	r6, r1, #16
1000673e:	401e      	ands	r6, r3
10006740:	401c      	ands	r4, r3
10006742:	49ba      	ldr	r1, [pc, #744]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
10006744:	00b6      	lsls	r6, r6, #2
10006746:	00a4      	lsls	r4, r4, #2
10006748:	5836      	ldr	r6, [r6, r0]
1000674a:	590c      	ldr	r4, [r1, r4]
1000674c:	9901      	ldr	r1, [sp, #4]
1000674e:	4077      	eors	r7, r6
10006750:	68c9      	ldr	r1, [r1, #12]
10006752:	0a12      	lsrs	r2, r2, #8
10006754:	404c      	eors	r4, r1
10006756:	9903      	ldr	r1, [sp, #12]
10006758:	401a      	ands	r2, r3
1000675a:	0e0e      	lsrs	r6, r1, #24
1000675c:	4661      	mov	r1, ip
1000675e:	00b6      	lsls	r6, r6, #2
10006760:	5976      	ldr	r6, [r6, r5]
10006762:	0092      	lsls	r2, r2, #2
10006764:	4066      	eors	r6, r4
10006766:	5854      	ldr	r4, [r2, r1]
10006768:	49b0      	ldr	r1, [pc, #704]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
1000676a:	4074      	eors	r4, r6
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
1000676c:	9e05      	ldr	r6, [sp, #20]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
1000676e:	9a04      	ldr	r2, [sp, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
10006770:	401e      	ands	r6, r3
10006772:	00b6      	lsls	r6, r6, #2
10006774:	598e      	ldr	r6, [r1, r6]
10006776:	4661      	mov	r1, ip
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10006778:	0c12      	lsrs	r2, r2, #16
1000677a:	401a      	ands	r2, r3
1000677c:	0092      	lsls	r2, r2, #2
1000677e:	5812      	ldr	r2, [r2, r0]
10006780:	4054      	eors	r4, r2
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
10006782:	9a06      	ldr	r2, [sp, #24]
10006784:	0e12      	lsrs	r2, r2, #24
10006786:	0092      	lsls	r2, r2, #2
10006788:	5952      	ldr	r2, [r2, r5]
1000678a:	4056      	eors	r6, r2
1000678c:	9a01      	ldr	r2, [sp, #4]
1000678e:	6912      	ldr	r2, [r2, #16]
10006790:	4056      	eors	r6, r2
10006792:	0a22      	lsrs	r2, r4, #8
10006794:	401a      	ands	r2, r3
10006796:	0092      	lsls	r2, r2, #2
10006798:	5852      	ldr	r2, [r2, r1]
1000679a:	49a4      	ldr	r1, [pc, #656]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
1000679c:	4056      	eors	r6, r2
1000679e:	0c3a      	lsrs	r2, r7, #16
100067a0:	401a      	ands	r2, r3
100067a2:	0092      	lsls	r2, r2, #2
100067a4:	5812      	ldr	r2, [r2, r0]
100067a6:	4056      	eors	r6, r2
100067a8:	9603      	str	r6, [sp, #12]
100067aa:	9e06      	ldr	r6, [sp, #24]
100067ac:	0e3a      	lsrs	r2, r7, #24
100067ae:	401e      	ands	r6, r3
100067b0:	00b6      	lsls	r6, r6, #2
100067b2:	598e      	ldr	r6, [r1, r6]
100067b4:	4661      	mov	r1, ip
100067b6:	0092      	lsls	r2, r2, #2
100067b8:	5952      	ldr	r2, [r2, r5]
100067ba:	4056      	eors	r6, r2
100067bc:	9a01      	ldr	r2, [sp, #4]
100067be:	6952      	ldr	r2, [r2, #20]
100067c0:	4056      	eors	r6, r2
100067c2:	9a05      	ldr	r2, [sp, #20]
100067c4:	0a12      	lsrs	r2, r2, #8
100067c6:	401a      	ands	r2, r3
100067c8:	0092      	lsls	r2, r2, #2
100067ca:	5852      	ldr	r2, [r2, r1]
100067cc:	4997      	ldr	r1, [pc, #604]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
100067ce:	4056      	eors	r6, r2
100067d0:	0c22      	lsrs	r2, r4, #16
100067d2:	401a      	ands	r2, r3
100067d4:	0092      	lsls	r2, r2, #2
100067d6:	5812      	ldr	r2, [r2, r0]
100067d8:	4056      	eors	r6, r2
100067da:	9604      	str	r6, [sp, #16]
100067dc:	1c3e      	adds	r6, r7, #0
100067de:	401e      	ands	r6, r3
100067e0:	0e22      	lsrs	r2, r4, #24
100067e2:	00b6      	lsls	r6, r6, #2
100067e4:	598e      	ldr	r6, [r1, r6]
100067e6:	0092      	lsls	r2, r2, #2
100067e8:	9901      	ldr	r1, [sp, #4]
100067ea:	5952      	ldr	r2, [r2, r5]
100067ec:	6989      	ldr	r1, [r1, #24]
100067ee:	4072      	eors	r2, r6
100067f0:	404a      	eors	r2, r1
100067f2:	9906      	ldr	r1, [sp, #24]
100067f4:	401c      	ands	r4, r3
100067f6:	0a0e      	lsrs	r6, r1, #8
100067f8:	4661      	mov	r1, ip
100067fa:	401e      	ands	r6, r3
100067fc:	00b6      	lsls	r6, r6, #2
100067fe:	5876      	ldr	r6, [r6, r1]
10006800:	9905      	ldr	r1, [sp, #20]
10006802:	4072      	eors	r2, r6
10006804:	0c0e      	lsrs	r6, r1, #16
10006806:	401e      	ands	r6, r3
10006808:	00b6      	lsls	r6, r6, #2
1000680a:	5836      	ldr	r6, [r6, r0]
1000680c:	00a4      	lsls	r4, r4, #2
1000680e:	4072      	eors	r2, r6
10006810:	0e0e      	lsrs	r6, r1, #24
10006812:	4986      	ldr	r1, [pc, #536]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
10006814:	00b6      	lsls	r6, r6, #2
10006816:	590c      	ldr	r4, [r1, r4]
10006818:	9901      	ldr	r1, [sp, #4]
1000681a:	5975      	ldr	r5, [r6, r5]
1000681c:	69c9      	ldr	r1, [r1, #28]
1000681e:	406c      	eors	r4, r5
10006820:	404c      	eors	r4, r1
10006822:	4661      	mov	r1, ip
10006824:	0a3e      	lsrs	r6, r7, #8
10006826:	401e      	ands	r6, r3
10006828:	00b6      	lsls	r6, r6, #2
1000682a:	5875      	ldr	r5, [r6, r1]
1000682c:	9906      	ldr	r1, [sp, #24]
1000682e:	406c      	eors	r4, r5
10006830:	0c0f      	lsrs	r7, r1, #16
10006832:	401f      	ands	r7, r3
10006834:	00bf      	lsls	r7, r7, #2
10006836:	583b      	ldr	r3, [r7, r0]
10006838:	405c      	eors	r4, r3
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
1000683a:	9b07      	ldr	r3, [sp, #28]
1000683c:	3b01      	subs	r3, #1
1000683e:	9307      	str	r3, [sp, #28]
10006840:	9b01      	ldr	r3, [sp, #4]
10006842:	3320      	adds	r3, #32
10006844:	e72b      	b.n	1000669e <mbedtls_internal_aes_decrypt+0x76>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10006846:	9904      	ldr	r1, [sp, #16]
10006848:	9d03      	ldr	r5, [sp, #12]
1000684a:	4f79      	ldr	r7, [pc, #484]	; (10006a30 <mbedtls_internal_aes_decrypt+0x408>)
1000684c:	401d      	ands	r5, r3
1000684e:	0e08      	lsrs	r0, r1, #24
10006850:	4976      	ldr	r1, [pc, #472]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
10006852:	00ad      	lsls	r5, r5, #2
10006854:	0080      	lsls	r0, r0, #2
10006856:	59c0      	ldr	r0, [r0, r7]
10006858:	594d      	ldr	r5, [r1, r5]
1000685a:	9901      	ldr	r1, [sp, #4]
1000685c:	4045      	eors	r5, r0
1000685e:	0a20      	lsrs	r0, r4, #8
10006860:	4e74      	ldr	r6, [pc, #464]	; (10006a34 <mbedtls_internal_aes_decrypt+0x40c>)
10006862:	4018      	ands	r0, r3
10006864:	6809      	ldr	r1, [r1, #0]
10006866:	0080      	lsls	r0, r0, #2
10006868:	5980      	ldr	r0, [r0, r6]
1000686a:	404d      	eors	r5, r1
1000686c:	4045      	eors	r5, r0
1000686e:	46ac      	mov	ip, r5
10006870:	4661      	mov	r1, ip
10006872:	0c10      	lsrs	r0, r2, #16
10006874:	4d70      	ldr	r5, [pc, #448]	; (10006a38 <mbedtls_internal_aes_decrypt+0x410>)
10006876:	4018      	ands	r0, r3
10006878:	0080      	lsls	r0, r0, #2
1000687a:	5940      	ldr	r0, [r0, r5]
1000687c:	4041      	eors	r1, r0
1000687e:	9804      	ldr	r0, [sp, #16]
10006880:	9105      	str	r1, [sp, #20]
10006882:	4018      	ands	r0, r3
10006884:	0081      	lsls	r1, r0, #2
10006886:	468c      	mov	ip, r1
10006888:	0e10      	lsrs	r0, r2, #24
1000688a:	0081      	lsls	r1, r0, #2
1000688c:	4660      	mov	r0, ip
1000688e:	9106      	str	r1, [sp, #24]
10006890:	4966      	ldr	r1, [pc, #408]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
10006892:	5809      	ldr	r1, [r1, r0]
10006894:	468c      	mov	ip, r1
10006896:	9906      	ldr	r1, [sp, #24]
10006898:	59c8      	ldr	r0, [r1, r7]
1000689a:	4661      	mov	r1, ip
1000689c:	4048      	eors	r0, r1
1000689e:	9901      	ldr	r1, [sp, #4]
100068a0:	6849      	ldr	r1, [r1, #4]
100068a2:	4041      	eors	r1, r0
100068a4:	468c      	mov	ip, r1
100068a6:	9903      	ldr	r1, [sp, #12]
100068a8:	0a08      	lsrs	r0, r1, #8
100068aa:	4661      	mov	r1, ip
100068ac:	4018      	ands	r0, r3
100068ae:	0080      	lsls	r0, r0, #2
100068b0:	5980      	ldr	r0, [r0, r6]
100068b2:	4041      	eors	r1, r0
100068b4:	0c20      	lsrs	r0, r4, #16
100068b6:	4018      	ands	r0, r3
100068b8:	0080      	lsls	r0, r0, #2
100068ba:	5940      	ldr	r0, [r0, r5]
100068bc:	4041      	eors	r1, r0
100068be:	1c10      	adds	r0, r2, #0
100068c0:	4018      	ands	r0, r3
100068c2:	9106      	str	r1, [sp, #24]
100068c4:	0081      	lsls	r1, r0, #2
100068c6:	468c      	mov	ip, r1
100068c8:	0e20      	lsrs	r0, r4, #24
100068ca:	0081      	lsls	r1, r0, #2
100068cc:	4660      	mov	r0, ip
100068ce:	9107      	str	r1, [sp, #28]
100068d0:	4956      	ldr	r1, [pc, #344]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
100068d2:	401c      	ands	r4, r3
100068d4:	5809      	ldr	r1, [r1, r0]
100068d6:	00a4      	lsls	r4, r4, #2
100068d8:	468c      	mov	ip, r1
100068da:	9907      	ldr	r1, [sp, #28]
100068dc:	0a12      	lsrs	r2, r2, #8
100068de:	59c8      	ldr	r0, [r1, r7]
100068e0:	4661      	mov	r1, ip
100068e2:	4048      	eors	r0, r1
100068e4:	9901      	ldr	r1, [sp, #4]
100068e6:	401a      	ands	r2, r3
100068e8:	6889      	ldr	r1, [r1, #8]
100068ea:	0092      	lsls	r2, r2, #2
100068ec:	4041      	eors	r1, r0
100068ee:	468c      	mov	ip, r1
100068f0:	9904      	ldr	r1, [sp, #16]
100068f2:	0a08      	lsrs	r0, r1, #8
100068f4:	4661      	mov	r1, ip
100068f6:	4018      	ands	r0, r3
100068f8:	0080      	lsls	r0, r0, #2
100068fa:	5980      	ldr	r0, [r0, r6]
100068fc:	4041      	eors	r1, r0
100068fe:	468c      	mov	ip, r1
10006900:	9903      	ldr	r1, [sp, #12]
10006902:	0c08      	lsrs	r0, r1, #16
10006904:	4661      	mov	r1, ip
10006906:	4018      	ands	r0, r3
10006908:	0080      	lsls	r0, r0, #2
1000690a:	5940      	ldr	r0, [r0, r5]
1000690c:	4048      	eors	r0, r1
1000690e:	9903      	ldr	r1, [sp, #12]
10006910:	0e09      	lsrs	r1, r1, #24
10006912:	0089      	lsls	r1, r1, #2
10006914:	468c      	mov	ip, r1
10006916:	4945      	ldr	r1, [pc, #276]	; (10006a2c <mbedtls_internal_aes_decrypt+0x404>)
10006918:	590c      	ldr	r4, [r1, r4]
1000691a:	4661      	mov	r1, ip
1000691c:	59cf      	ldr	r7, [r1, r7]
1000691e:	9901      	ldr	r1, [sp, #4]
10006920:	407c      	eors	r4, r7
10006922:	5997      	ldr	r7, [r2, r6]
10006924:	9a04      	ldr	r2, [sp, #16]
10006926:	68c9      	ldr	r1, [r1, #12]
10006928:	0c12      	lsrs	r2, r2, #16
1000692a:	401a      	ands	r2, r3
1000692c:	0092      	lsls	r2, r2, #2
1000692e:	5952      	ldr	r2, [r2, r5]
10006930:	404c      	eors	r4, r1
10006932:	4067      	eors	r7, r4

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
10006934:	9c05      	ldr	r4, [sp, #20]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10006936:	4057      	eors	r7, r2
10006938:	9901      	ldr	r1, [sp, #4]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
1000693a:	4a40      	ldr	r2, [pc, #256]	; (10006a3c <mbedtls_internal_aes_decrypt+0x414>)
1000693c:	401c      	ands	r4, r3
1000693e:	5d15      	ldrb	r5, [r2, r4]
10006940:	690e      	ldr	r6, [r1, #16]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
10006942:	9906      	ldr	r1, [sp, #24]
10006944:	406e      	eors	r6, r5
10006946:	1c35      	adds	r5, r6, #0
10006948:	0e0c      	lsrs	r4, r1, #24
1000694a:	5d14      	ldrb	r4, [r2, r4]
1000694c:	0624      	lsls	r4, r4, #24
1000694e:	4065      	eors	r5, r4

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
10006950:	0a3c      	lsrs	r4, r7, #8
10006952:	401c      	ands	r4, r3
10006954:	5d16      	ldrb	r6, [r2, r4]
10006956:	1c2c      	adds	r4, r5, #0
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
10006958:	0c05      	lsrs	r5, r0, #16
1000695a:	401d      	ands	r5, r3

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
1000695c:	0236      	lsls	r6, r6, #8
1000695e:	4074      	eors	r4, r6
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
10006960:	5d56      	ldrb	r6, [r2, r5]
10006962:	0436      	lsls	r6, r6, #16
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
10006964:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
10006966:	1c0c      	adds	r4, r1, #0
10006968:	9901      	ldr	r1, [sp, #4]
1000696a:	401c      	ands	r4, r3
1000696c:	5d14      	ldrb	r4, [r2, r4]
1000696e:	694d      	ldr	r5, [r1, #20]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
10006970:	9905      	ldr	r1, [sp, #20]
10006972:	4065      	eors	r5, r4
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
10006974:	0e04      	lsrs	r4, r0, #24
10006976:	5d14      	ldrb	r4, [r2, r4]
10006978:	0624      	lsls	r4, r4, #24
1000697a:	406c      	eors	r4, r5
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
1000697c:	0a0d      	lsrs	r5, r1, #8
1000697e:	401d      	ands	r5, r3
10006980:	5d55      	ldrb	r5, [r2, r5]
10006982:	9901      	ldr	r1, [sp, #4]
10006984:	022d      	lsls	r5, r5, #8
10006986:	406c      	eors	r4, r5
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
10006988:	0c3d      	lsrs	r5, r7, #16
1000698a:	401d      	ands	r5, r3
1000698c:	5d55      	ldrb	r5, [r2, r5]
1000698e:	6989      	ldr	r1, [r1, #24]
10006990:	042d      	lsls	r5, r5, #16
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
10006992:	4065      	eors	r5, r4
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
10006994:	1c04      	adds	r4, r0, #0
10006996:	401c      	ands	r4, r3
10006998:	5d14      	ldrb	r4, [r2, r4]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
1000699a:	0a00      	lsrs	r0, r0, #8
1000699c:	4061      	eors	r1, r4

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
1000699e:	0e3c      	lsrs	r4, r7, #24
100069a0:	5d14      	ldrb	r4, [r2, r4]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
100069a2:	401f      	ands	r7, r3

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
100069a4:	0624      	lsls	r4, r4, #24
100069a6:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
100069a8:	9906      	ldr	r1, [sp, #24]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
100069aa:	4018      	ands	r0, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
100069ac:	0a09      	lsrs	r1, r1, #8
100069ae:	4019      	ands	r1, r3
100069b0:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
100069b2:	5dd7      	ldrb	r7, [r2, r7]
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
100069b4:	0209      	lsls	r1, r1, #8
100069b6:	4061      	eors	r1, r4
100069b8:	468c      	mov	ip, r1
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
100069ba:	9905      	ldr	r1, [sp, #20]
100069bc:	0c0c      	lsrs	r4, r1, #16
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
100069be:	4661      	mov	r1, ip
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
100069c0:	401c      	ands	r4, r3
100069c2:	5d14      	ldrb	r4, [r2, r4]
100069c4:	0424      	lsls	r4, r4, #16
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
100069c6:	404c      	eors	r4, r1
100069c8:	9901      	ldr	r1, [sp, #4]
100069ca:	69c9      	ldr	r1, [r1, #28]
100069cc:	404f      	eors	r7, r1

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
100069ce:	9905      	ldr	r1, [sp, #20]
100069d0:	0e09      	lsrs	r1, r1, #24
100069d2:	5c51      	ldrb	r1, [r2, r1]
100069d4:	0609      	lsls	r1, r1, #24
100069d6:	404f      	eors	r7, r1
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
100069d8:	5c11      	ldrb	r1, [r2, r0]
100069da:	0209      	lsls	r1, r1, #8
100069dc:	404f      	eors	r7, r1
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
100069de:	9906      	ldr	r1, [sp, #24]
100069e0:	0c08      	lsrs	r0, r1, #16
100069e2:	4003      	ands	r3, r0
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );

    return( 0 );
}
100069e4:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
100069e6:	5cd1      	ldrb	r1, [r2, r3]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
100069e8:	9b02      	ldr	r3, [sp, #8]
100069ea:	9a02      	ldr	r2, [sp, #8]
100069ec:	701e      	strb	r6, [r3, #0]
100069ee:	0a33      	lsrs	r3, r6, #8
100069f0:	7053      	strb	r3, [r2, #1]
100069f2:	0c33      	lsrs	r3, r6, #16
100069f4:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
100069f6:	0a2b      	lsrs	r3, r5, #8
100069f8:	7153      	strb	r3, [r2, #5]
100069fa:	0c2b      	lsrs	r3, r5, #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
100069fc:	0409      	lsls	r1, r1, #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
100069fe:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
10006a00:	0a23      	lsrs	r3, r4, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
10006a02:	404f      	eors	r7, r1
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
10006a04:	7253      	strb	r3, [r2, #9]
10006a06:	0c23      	lsrs	r3, r4, #16
10006a08:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
10006a0a:	0a3b      	lsrs	r3, r7, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
10006a0c:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
10006a0e:	7115      	strb	r5, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
10006a10:	7214      	strb	r4, [r2, #8]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
10006a12:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
10006a14:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
10006a16:	7317      	strb	r7, [r2, #12]
10006a18:	7353      	strb	r3, [r2, #13]
10006a1a:	0c3b      	lsrs	r3, r7, #16
10006a1c:	0e3f      	lsrs	r7, r7, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
10006a1e:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
10006a20:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
10006a22:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
10006a24:	7393      	strb	r3, [r2, #14]
10006a26:	73d7      	strb	r7, [r2, #15]

    return( 0 );
}
10006a28:	b009      	add	sp, #36	; 0x24
10006a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006a2c:	1000cc38 	.word	0x1000cc38
10006a30:	1000d838 	.word	0x1000d838
10006a34:	1000d038 	.word	0x1000d038
10006a38:	1000d438 	.word	0x1000d438
10006a3c:	1000ec60 	.word	0x1000ec60

10006a40 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
10006a40:	b508      	push	{r3, lr}
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
10006a42:	2901      	cmp	r1, #1
10006a44:	d104      	bne.n	10006a50 <mbedtls_aes_crypt_ecb+0x10>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
10006a46:	1c11      	adds	r1, r2, #0
10006a48:	1c1a      	adds	r2, r3, #0
10006a4a:	f7ff fbf1 	bl	10006230 <mbedtls_internal_aes_encrypt>
10006a4e:	e003      	b.n	10006a58 <mbedtls_aes_crypt_ecb+0x18>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
10006a50:	1c11      	adds	r1, r2, #0
10006a52:	1c1a      	adds	r2, r3, #0
10006a54:	f7ff fde8 	bl	10006628 <mbedtls_internal_aes_decrypt>
}
10006a58:	bd08      	pop	{r3, pc}

10006a5a <ccm_auth_crypt>:
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
10006a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
10006a5c:	b097      	sub	sp, #92	; 0x5c
10006a5e:	9306      	str	r3, [sp, #24]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
10006a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
10006a62:	1c06      	adds	r6, r0, #0
10006a64:	9103      	str	r1, [sp, #12]
10006a66:	9202      	str	r2, [sp, #8]
10006a68:	9d1e      	ldr	r5, [sp, #120]	; 0x78
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
10006a6a:	2b02      	cmp	r3, #2
10006a6c:	d102      	bne.n	10006a74 <ccm_auth_crypt+0x1a>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
10006a6e:	200d      	movs	r0, #13
10006a70:	4240      	negs	r0, r0
10006a72:	e14f      	b.n	10006d14 <ccm_auth_crypt+0x2ba>
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
10006a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
10006a76:	2b10      	cmp	r3, #16
10006a78:	d8f9      	bhi.n	10006a6e <ccm_auth_crypt+0x14>
10006a7a:	07db      	lsls	r3, r3, #31
10006a7c:	d4f7      	bmi.n	10006a6e <ccm_auth_crypt+0x14>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    /* Also implies q is within bounds */
    if( iv_len < 7 || iv_len > 13 )
10006a7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10006a80:	3b07      	subs	r3, #7
10006a82:	2b06      	cmp	r3, #6
10006a84:	d8f3      	bhi.n	10006a6e <ccm_auth_crypt+0x14>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
10006a86:	23ff      	movs	r3, #255	; 0xff
10006a88:	021b      	lsls	r3, r3, #8
10006a8a:	429d      	cmp	r5, r3
10006a8c:	d8ef      	bhi.n	10006a6e <ccm_auth_crypt+0x14>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
10006a8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
10006a90:	270e      	movs	r7, #14
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
10006a92:	b2da      	uxtb	r2, r3
10006a94:	230f      	movs	r3, #15
10006a96:	1a9b      	subs	r3, r3, r2
10006a98:	b2db      	uxtb	r3, r3
10006a9a:	9307      	str	r3, [sp, #28]
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
10006a9c:	1c2b      	adds	r3, r5, #0
10006a9e:	1e59      	subs	r1, r3, #1
10006aa0:	418b      	sbcs	r3, r1
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );
10006aa2:	2011      	movs	r0, #17
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
10006aa4:	1aba      	subs	r2, r7, r2
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
10006aa6:	0199      	lsls	r1, r3, #6
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
10006aa8:	b2d3      	uxtb	r3, r2
10006aaa:	9304      	str	r3, [sp, #16]
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
10006aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b[0] |= q - 1;
10006aae:	9a04      	ldr	r2, [sp, #16]
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
10006ab0:	3b02      	subs	r3, #2
10006ab2:	085b      	lsrs	r3, r3, #1
10006ab4:	00db      	lsls	r3, r3, #3
10006ab6:	430b      	orrs	r3, r1
    b[0] |= q - 1;
10006ab8:	ac0a      	add	r4, sp, #40	; 0x28
10006aba:	4313      	orrs	r3, r2
10006abc:	7023      	strb	r3, [r4, #0]

    memcpy( b + 1, iv, iv_len );
10006abe:	ab06      	add	r3, sp, #24
10006ac0:	18c0      	adds	r0, r0, r3
10006ac2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
10006ac4:	9906      	ldr	r1, [sp, #24]
10006ac6:	f005 fbb2 	bl	1000c22e <memcpy>
10006aca:	221f      	movs	r2, #31
10006acc:	ab06      	add	r3, sp, #24
10006ace:	18d2      	adds	r2, r2, r3
10006ad0:	9b04      	ldr	r3, [sp, #16]
10006ad2:	1afb      	subs	r3, r7, r3
10006ad4:	9305      	str	r3, [sp, #20]
10006ad6:	18e3      	adds	r3, r4, r3

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
10006ad8:	9c02      	ldr	r4, [sp, #8]
        b[15-i] = (unsigned char)( len_left & 0xFF );
10006ada:	7014      	strb	r4, [r2, #0]
10006adc:	3a01      	subs	r2, #1
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
10006ade:	0a24      	lsrs	r4, r4, #8
10006ae0:	429a      	cmp	r2, r3
10006ae2:	d1fa      	bne.n	10006ada <ccm_auth_crypt+0x80>
        b[15-i] = (unsigned char)( len_left & 0xFF );

    if( len_left > 0 )
10006ae4:	2c00      	cmp	r4, #0
10006ae6:	d1c2      	bne.n	10006a6e <ccm_auth_crypt+0x14>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );


    /* Start CBC-MAC with first block */
    memset( y, 0, 16 );
10006ae8:	a80e      	add	r0, sp, #56	; 0x38
10006aea:	1c21      	adds	r1, r4, #0
10006aec:	2210      	movs	r2, #16
10006aee:	f005 fba7 	bl	1000c240 <memset>
    UPDATE_CBC_MAC;
10006af2:	ab0e      	add	r3, sp, #56	; 0x38
10006af4:	af0a      	add	r7, sp, #40	; 0x28
10006af6:	5ce2      	ldrb	r2, [r4, r3]
10006af8:	5de1      	ldrb	r1, [r4, r7]
10006afa:	404a      	eors	r2, r1
10006afc:	54e2      	strb	r2, [r4, r3]
10006afe:	3401      	adds	r4, #1
10006b00:	2c10      	cmp	r4, #16
10006b02:	d1f6      	bne.n	10006af2 <ccm_auth_crypt+0x98>
10006b04:	aa09      	add	r2, sp, #36	; 0x24
10006b06:	9200      	str	r2, [sp, #0]
10006b08:	1c19      	adds	r1, r3, #0
10006b0a:	1c30      	adds	r0, r6, #0
10006b0c:	1c22      	adds	r2, r4, #0
10006b0e:	f000 fa0b 	bl	10006f28 <mbedtls_cipher_update>
10006b12:	1e01      	subs	r1, r0, #0
10006b14:	d000      	beq.n	10006b18 <ccm_auth_crypt+0xbe>
10006b16:	e0fd      	b.n	10006d14 <ccm_auth_crypt+0x2ba>

    /*
     * If there is additional data, update CBC-MAC with
     * add_len, add, 0 (padding to a block boundary)
     */
    if( add_len > 0 )
10006b18:	2d00      	cmp	r5, #0
10006b1a:	d114      	bne.n	10006b46 <ccm_auth_crypt+0xec>
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
10006b1c:	466b      	mov	r3, sp
    memcpy( ctr + 1, iv, iv_len );
10006b1e:	2031      	movs	r0, #49	; 0x31
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
10006b20:	7c1b      	ldrb	r3, [r3, #16]
10006b22:	ac12      	add	r4, sp, #72	; 0x48
10006b24:	7023      	strb	r3, [r4, #0]
    memcpy( ctr + 1, iv, iv_len );
10006b26:	ab06      	add	r3, sp, #24
10006b28:	18c0      	adds	r0, r0, r3
10006b2a:	9906      	ldr	r1, [sp, #24]
10006b2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
10006b2e:	f005 fb7e 	bl	1000c22e <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
10006b32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10006b34:	2100      	movs	r1, #0
10006b36:	1c58      	adds	r0, r3, #1
10006b38:	1820      	adds	r0, r4, r0
10006b3a:	9a07      	ldr	r2, [sp, #28]
10006b3c:	f005 fb80 	bl	1000c240 <memset>
    ctr[15] = 1;
10006b40:	2301      	movs	r3, #1
10006b42:	73e3      	strb	r3, [r4, #15]
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
10006b44:	e081      	b.n	10006c4a <ccm_auth_crypt+0x1f0>
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
10006b46:	1c22      	adds	r2, r4, #0
10006b48:	1c38      	adds	r0, r7, #0
10006b4a:	f005 fb79 	bl	1000c240 <memset>
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
10006b4e:	0a2b      	lsrs	r3, r5, #8
10006b50:	703b      	strb	r3, [r7, #0]
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
10006b52:	707d      	strb	r5, [r7, #1]

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
10006b54:	1e2c      	subs	r4, r5, #0
10006b56:	2c0e      	cmp	r4, #14
10006b58:	d900      	bls.n	10006b5c <ccm_auth_crypt+0x102>
10006b5a:	240e      	movs	r4, #14
        memcpy( b + 2, src, use_len );
10006b5c:	2012      	movs	r0, #18
10006b5e:	ab06      	add	r3, sp, #24
10006b60:	1c22      	adds	r2, r4, #0
10006b62:	18c0      	adds	r0, r0, r3
10006b64:	991d      	ldr	r1, [sp, #116]	; 0x74
10006b66:	f005 fb62 	bl	1000c22e <memcpy>
10006b6a:	2200      	movs	r2, #0
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;
10006b6c:	ab0e      	add	r3, sp, #56	; 0x38
10006b6e:	a90a      	add	r1, sp, #40	; 0x28
10006b70:	5c50      	ldrb	r0, [r2, r1]
10006b72:	5cd1      	ldrb	r1, [r2, r3]
10006b74:	4041      	eors	r1, r0
10006b76:	54d1      	strb	r1, [r2, r3]
10006b78:	3201      	adds	r2, #1
10006b7a:	2a10      	cmp	r2, #16
10006b7c:	d1f6      	bne.n	10006b6c <ccm_auth_crypt+0x112>
10006b7e:	a909      	add	r1, sp, #36	; 0x24
10006b80:	9100      	str	r1, [sp, #0]
10006b82:	1c30      	adds	r0, r6, #0
10006b84:	1c19      	adds	r1, r3, #0
10006b86:	f000 f9cf 	bl	10006f28 <mbedtls_cipher_update>
10006b8a:	2800      	cmp	r0, #0
10006b8c:	d000      	beq.n	10006b90 <ccm_auth_crypt+0x136>
10006b8e:	e0c1      	b.n	10006d14 <ccm_auth_crypt+0x2ba>
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
        len_left -= use_len;
        src += use_len;
10006b90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
        len_left -= use_len;
10006b92:	1b2d      	subs	r5, r5, r4
        src += use_len;
10006b94:	191c      	adds	r4, r3, r4

        UPDATE_CBC_MAC;

        while( len_left > 0 )
10006b96:	2d00      	cmp	r5, #0
10006b98:	d0c0      	beq.n	10006b1c <ccm_auth_crypt+0xc2>
        {
            use_len = len_left > 16 ? 16 : len_left;
10006b9a:	1e2f      	subs	r7, r5, #0
10006b9c:	2f10      	cmp	r7, #16
10006b9e:	d900      	bls.n	10006ba2 <ccm_auth_crypt+0x148>
10006ba0:	2710      	movs	r7, #16

            memset( b, 0, 16 );
10006ba2:	2100      	movs	r1, #0
10006ba4:	2210      	movs	r2, #16
10006ba6:	a80a      	add	r0, sp, #40	; 0x28
10006ba8:	f005 fb4a 	bl	1000c240 <memset>
            memcpy( b, src, use_len );
10006bac:	1c3a      	adds	r2, r7, #0
10006bae:	a80a      	add	r0, sp, #40	; 0x28
10006bb0:	1c21      	adds	r1, r4, #0
10006bb2:	f005 fb3c 	bl	1000c22e <memcpy>
10006bb6:	2200      	movs	r2, #0
            UPDATE_CBC_MAC;
10006bb8:	ab0e      	add	r3, sp, #56	; 0x38
10006bba:	a90a      	add	r1, sp, #40	; 0x28
10006bbc:	5c50      	ldrb	r0, [r2, r1]
10006bbe:	5cd1      	ldrb	r1, [r2, r3]
10006bc0:	4041      	eors	r1, r0
10006bc2:	54d1      	strb	r1, [r2, r3]
10006bc4:	3201      	adds	r2, #1
10006bc6:	2a10      	cmp	r2, #16
10006bc8:	d1f6      	bne.n	10006bb8 <ccm_auth_crypt+0x15e>
10006bca:	a909      	add	r1, sp, #36	; 0x24
10006bcc:	9100      	str	r1, [sp, #0]
10006bce:	1c30      	adds	r0, r6, #0
10006bd0:	1c19      	adds	r1, r3, #0
10006bd2:	f000 f9a9 	bl	10006f28 <mbedtls_cipher_update>
10006bd6:	2800      	cmp	r0, #0
10006bd8:	d000      	beq.n	10006bdc <ccm_auth_crypt+0x182>
10006bda:	e09b      	b.n	10006d14 <ccm_auth_crypt+0x2ba>

            len_left -= use_len;
10006bdc:	1bed      	subs	r5, r5, r7
            src += use_len;
10006bde:	19e4      	adds	r4, r4, r7
10006be0:	e7d9      	b.n	10006b96 <ccm_auth_crypt+0x13c>
            UPDATE_CBC_MAC;
        }

        CTR_CRYPT( dst, src, use_len );

        if( mode == CCM_DECRYPT )
10006be2:	9b03      	ldr	r3, [sp, #12]
10006be4:	2b01      	cmp	r3, #1
10006be6:	d11b      	bne.n	10006c20 <ccm_auth_crypt+0x1c6>
        {
            memset( b, 0, 16 );
10006be8:	2100      	movs	r1, #0
10006bea:	2210      	movs	r2, #16
10006bec:	a80a      	add	r0, sp, #40	; 0x28
10006bee:	f005 fb27 	bl	1000c240 <memset>
            memcpy( b, dst, use_len );
10006bf2:	1c22      	adds	r2, r4, #0
10006bf4:	a80a      	add	r0, sp, #40	; 0x28
10006bf6:	9920      	ldr	r1, [sp, #128]	; 0x80
10006bf8:	f005 fb19 	bl	1000c22e <memcpy>
10006bfc:	2200      	movs	r2, #0
            UPDATE_CBC_MAC;
10006bfe:	ab0e      	add	r3, sp, #56	; 0x38
10006c00:	a90a      	add	r1, sp, #40	; 0x28
10006c02:	5c50      	ldrb	r0, [r2, r1]
10006c04:	5cd1      	ldrb	r1, [r2, r3]
10006c06:	4041      	eors	r1, r0
10006c08:	54d1      	strb	r1, [r2, r3]
10006c0a:	3201      	adds	r2, #1
10006c0c:	2a10      	cmp	r2, #16
10006c0e:	d1f6      	bne.n	10006bfe <ccm_auth_crypt+0x1a4>
10006c10:	a909      	add	r1, sp, #36	; 0x24
10006c12:	9100      	str	r1, [sp, #0]
10006c14:	1c30      	adds	r0, r6, #0
10006c16:	1c19      	adds	r1, r3, #0
10006c18:	f000 f986 	bl	10006f28 <mbedtls_cipher_update>
10006c1c:	2800      	cmp	r0, #0
10006c1e:	d179      	bne.n	10006d14 <ccm_auth_crypt+0x2ba>
10006c20:	223f      	movs	r2, #63	; 0x3f
        }

        dst += use_len;
10006c22:	9b20      	ldr	r3, [sp, #128]	; 0x80
10006c24:	9905      	ldr	r1, [sp, #20]
10006c26:	191b      	adds	r3, r3, r4
10006c28:	9320      	str	r3, [sp, #128]	; 0x80
        src += use_len;
10006c2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
10006c2c:	191b      	adds	r3, r3, r4
10006c2e:	931f      	str	r3, [sp, #124]	; 0x7c
        len_left -= use_len;
10006c30:	9b02      	ldr	r3, [sp, #8]
10006c32:	1b1b      	subs	r3, r3, r4
10006c34:	9302      	str	r3, [sp, #8]
10006c36:	ab06      	add	r3, sp, #24
10006c38:	18d2      	adds	r2, r2, r3
10006c3a:	ab12      	add	r3, sp, #72	; 0x48
10006c3c:	1859      	adds	r1, r3, r1
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
10006c3e:	7813      	ldrb	r3, [r2, #0]
10006c40:	3301      	adds	r3, #1
10006c42:	b2db      	uxtb	r3, r3
10006c44:	7013      	strb	r3, [r2, #0]
10006c46:	2b00      	cmp	r3, #0
10006c48:	d03b      	beq.n	10006cc2 <ccm_auth_crypt+0x268>
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
10006c4a:	9b02      	ldr	r3, [sp, #8]
10006c4c:	2b00      	cmp	r3, #0
10006c4e:	d03c      	beq.n	10006cca <ccm_auth_crypt+0x270>
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
10006c50:	9c02      	ldr	r4, [sp, #8]
10006c52:	2c10      	cmp	r4, #16
10006c54:	d900      	bls.n	10006c58 <ccm_auth_crypt+0x1fe>
10006c56:	2410      	movs	r4, #16

        if( mode == CCM_ENCRYPT )
10006c58:	9b03      	ldr	r3, [sp, #12]
10006c5a:	2b00      	cmp	r3, #0
10006c5c:	d11b      	bne.n	10006c96 <ccm_auth_crypt+0x23c>
        {
            memset( b, 0, 16 );
10006c5e:	1c19      	adds	r1, r3, #0
10006c60:	2210      	movs	r2, #16
10006c62:	a80a      	add	r0, sp, #40	; 0x28
10006c64:	f005 faec 	bl	1000c240 <memset>
            memcpy( b, src, use_len );
10006c68:	1c22      	adds	r2, r4, #0
10006c6a:	a80a      	add	r0, sp, #40	; 0x28
10006c6c:	991f      	ldr	r1, [sp, #124]	; 0x7c
10006c6e:	f005 fade 	bl	1000c22e <memcpy>
10006c72:	9a03      	ldr	r2, [sp, #12]
            UPDATE_CBC_MAC;
10006c74:	ab0e      	add	r3, sp, #56	; 0x38
10006c76:	a90a      	add	r1, sp, #40	; 0x28
10006c78:	5c50      	ldrb	r0, [r2, r1]
10006c7a:	5cd1      	ldrb	r1, [r2, r3]
10006c7c:	4041      	eors	r1, r0
10006c7e:	54d1      	strb	r1, [r2, r3]
10006c80:	3201      	adds	r2, #1
10006c82:	2a10      	cmp	r2, #16
10006c84:	d1f6      	bne.n	10006c74 <ccm_auth_crypt+0x21a>
10006c86:	a909      	add	r1, sp, #36	; 0x24
10006c88:	9100      	str	r1, [sp, #0]
10006c8a:	1c30      	adds	r0, r6, #0
10006c8c:	1c19      	adds	r1, r3, #0
10006c8e:	f000 f94b 	bl	10006f28 <mbedtls_cipher_update>
10006c92:	2800      	cmp	r0, #0
10006c94:	d13e      	bne.n	10006d14 <ccm_auth_crypt+0x2ba>
        }

        CTR_CRYPT( dst, src, use_len );
10006c96:	ab09      	add	r3, sp, #36	; 0x24
10006c98:	9300      	str	r3, [sp, #0]
10006c9a:	1c30      	adds	r0, r6, #0
10006c9c:	a912      	add	r1, sp, #72	; 0x48
10006c9e:	2210      	movs	r2, #16
10006ca0:	ab0a      	add	r3, sp, #40	; 0x28
10006ca2:	f000 f941 	bl	10006f28 <mbedtls_cipher_update>
10006ca6:	2800      	cmp	r0, #0
10006ca8:	d134      	bne.n	10006d14 <ccm_auth_crypt+0x2ba>
10006caa:	42a0      	cmp	r0, r4
10006cac:	d299      	bcs.n	10006be2 <ccm_auth_crypt+0x188>
10006cae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
10006cb0:	5c1a      	ldrb	r2, [r3, r0]
10006cb2:	ab0a      	add	r3, sp, #40	; 0x28
10006cb4:	5c1b      	ldrb	r3, [r3, r0]
10006cb6:	4053      	eors	r3, r2
10006cb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
10006cba:	5413      	strb	r3, [r2, r0]
10006cbc:	3001      	adds	r0, #1
10006cbe:	b2c0      	uxtb	r0, r0
10006cc0:	e7f3      	b.n	10006caa <ccm_auth_crypt+0x250>
10006cc2:	3a01      	subs	r2, #1

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
10006cc4:	428a      	cmp	r2, r1
10006cc6:	d1ba      	bne.n	10006c3e <ccm_auth_crypt+0x1e4>
10006cc8:	e7bf      	b.n	10006c4a <ccm_auth_crypt+0x1f0>
10006cca:	a912      	add	r1, sp, #72	; 0x48
10006ccc:	468c      	mov	ip, r1
10006cce:	aa06      	add	r2, sp, #24
10006cd0:	333f      	adds	r3, #63	; 0x3f
10006cd2:	189b      	adds	r3, r3, r2
10006cd4:	9a05      	ldr	r2, [sp, #20]
10006cd6:	4462      	add	r2, ip
10006cd8:	1c17      	adds	r7, r2, #0

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;
10006cda:	2200      	movs	r2, #0
10006cdc:	3b01      	subs	r3, #1
10006cde:	705a      	strb	r2, [r3, #1]
    }

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
10006ce0:	42bb      	cmp	r3, r7
10006ce2:	d1fa      	bne.n	10006cda <ccm_auth_crypt+0x280>
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
10006ce4:	ab09      	add	r3, sp, #36	; 0x24
10006ce6:	ac0a      	add	r4, sp, #40	; 0x28
10006ce8:	9300      	str	r3, [sp, #0]
10006cea:	1c30      	adds	r0, r6, #0
10006cec:	1c23      	adds	r3, r4, #0
10006cee:	a912      	add	r1, sp, #72	; 0x48
10006cf0:	3210      	adds	r2, #16
10006cf2:	f000 f919 	bl	10006f28 <mbedtls_cipher_update>
10006cf6:	1e03      	subs	r3, r0, #0
10006cf8:	d10c      	bne.n	10006d14 <ccm_auth_crypt+0x2ba>
10006cfa:	a90e      	add	r1, sp, #56	; 0x38
10006cfc:	5c43      	ldrb	r3, [r0, r1]
10006cfe:	5c22      	ldrb	r2, [r4, r0]
10006d00:	4053      	eors	r3, r2
10006d02:	5443      	strb	r3, [r0, r1]
10006d04:	3001      	adds	r0, #1
10006d06:	2810      	cmp	r0, #16
10006d08:	d1f7      	bne.n	10006cfa <ccm_auth_crypt+0x2a0>
    memcpy( tag, y, tag_len );
10006d0a:	9821      	ldr	r0, [sp, #132]	; 0x84
10006d0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
10006d0e:	f005 fa8e 	bl	1000c22e <memcpy>

    return( 0 );
10006d12:	2000      	movs	r0, #0
}
10006d14:	b017      	add	sp, #92	; 0x5c
10006d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

10006d18 <mbedtls_ccm_init>:

/*
 * Initialize context
 */
void mbedtls_ccm_init( mbedtls_ccm_context *ctx )
{
10006d18:	b508      	push	{r3, lr}
    CCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
10006d1a:	2100      	movs	r1, #0
10006d1c:	2238      	movs	r2, #56	; 0x38
10006d1e:	f005 fa8f 	bl	1000c240 <memset>
}
10006d22:	bd08      	pop	{r3, pc}

10006d24 <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
10006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006d26:	1c04      	adds	r4, r0, #0
10006d28:	1c16      	adds	r6, r2, #0
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
10006d2a:	1c08      	adds	r0, r1, #0
10006d2c:	2201      	movs	r2, #1
10006d2e:	1c19      	adds	r1, r3, #0

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
10006d30:	1c1d      	adds	r5, r3, #0
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
10006d32:	f000 f899 	bl	10006e68 <mbedtls_cipher_info_from_values>
10006d36:	1e07      	subs	r7, r0, #0
    if( cipher_info == NULL )
10006d38:	d012      	beq.n	10006d60 <mbedtls_ccm_setkey+0x3c>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
10006d3a:	6943      	ldr	r3, [r0, #20]
10006d3c:	2b10      	cmp	r3, #16
10006d3e:	d10f      	bne.n	10006d60 <mbedtls_ccm_setkey+0x3c>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
10006d40:	1c20      	adds	r0, r4, #0
10006d42:	f000 f8a7 	bl	10006e94 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
10006d46:	1c20      	adds	r0, r4, #0
10006d48:	1c39      	adds	r1, r7, #0
10006d4a:	f000 f8b3 	bl	10006eb4 <mbedtls_cipher_setup>
10006d4e:	2800      	cmp	r0, #0
10006d50:	d108      	bne.n	10006d64 <mbedtls_ccm_setkey+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
10006d52:	1c20      	adds	r0, r4, #0
10006d54:	1c31      	adds	r1, r6, #0
10006d56:	1c2a      	adds	r2, r5, #0
10006d58:	2301      	movs	r3, #1
10006d5a:	f000 f8c5 	bl	10006ee8 <mbedtls_cipher_setkey>
10006d5e:	e001      	b.n	10006d64 <mbedtls_ccm_setkey+0x40>
    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
10006d60:	200d      	movs	r0, #13
10006d62:	4240      	negs	r0, r0
    {
        return( ret );
    }

    return( 0 );
}
10006d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10006d66 <mbedtls_ccm_free>:

/*
 * Free context
 */
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
10006d66:	b510      	push	{r4, lr}
    if( ctx == NULL )
10006d68:	2800      	cmp	r0, #0
10006d6a:	d006      	beq.n	10006d7a <mbedtls_ccm_free+0x14>
10006d6c:	1c04      	adds	r4, r0, #0
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
10006d6e:	f000 f891 	bl	10006e94 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
10006d72:	1c20      	adds	r0, r4, #0
10006d74:	2138      	movs	r1, #56	; 0x38
10006d76:	f000 fa97 	bl	100072a8 <mbedtls_platform_zeroize>
}
10006d7a:	bd10      	pop	{r4, pc}

10006d7c <mbedtls_ccm_star_encrypt_and_tag>:
int mbedtls_ccm_star_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
10006d7c:	b530      	push	{r4, r5, lr}
10006d7e:	1c0d      	adds	r5, r1, #0
10006d80:	1c14      	adds	r4, r2, #0
10006d82:	b089      	sub	sp, #36	; 0x24
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
10006d84:	9300      	str	r3, [sp, #0]
10006d86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10006d88:	2100      	movs	r1, #0
10006d8a:	9301      	str	r3, [sp, #4]
10006d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10006d8e:	1c2a      	adds	r2, r5, #0
10006d90:	9302      	str	r3, [sp, #8]
10006d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10006d94:	9303      	str	r3, [sp, #12]
10006d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10006d98:	9304      	str	r3, [sp, #16]
10006d9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
10006d9c:	9305      	str	r3, [sp, #20]
10006d9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
10006da0:	9306      	str	r3, [sp, #24]
10006da2:	1c23      	adds	r3, r4, #0
10006da4:	f7ff fe59 	bl	10006a5a <ccm_auth_crypt>
                            add, add_len, input, output, tag, tag_len ) );
}
10006da8:	b009      	add	sp, #36	; 0x24
10006daa:	bd30      	pop	{r4, r5, pc}

10006dac <mbedtls_ccm_encrypt_and_tag>:
int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
10006dac:	b530      	push	{r4, r5, lr}
10006dae:	b087      	sub	sp, #28
10006db0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
10006db2:	2c00      	cmp	r4, #0
10006db4:	d00d      	beq.n	10006dd2 <mbedtls_ccm_encrypt_and_tag+0x26>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
10006db6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
10006db8:	9405      	str	r4, [sp, #20]
10006dba:	9500      	str	r5, [sp, #0]
10006dbc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10006dbe:	9501      	str	r5, [sp, #4]
10006dc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
10006dc2:	9502      	str	r5, [sp, #8]
10006dc4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
10006dc6:	9503      	str	r5, [sp, #12]
10006dc8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
10006dca:	9504      	str	r5, [sp, #16]
10006dcc:	f7ff ffd6 	bl	10006d7c <mbedtls_ccm_star_encrypt_and_tag>
10006dd0:	e001      	b.n	10006dd6 <mbedtls_ccm_encrypt_and_tag+0x2a>
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
10006dd2:	200d      	movs	r0, #13
10006dd4:	4240      	negs	r0, r0

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
10006dd6:	b007      	add	sp, #28
10006dd8:	bd30      	pop	{r4, r5, pc}

10006dda <mbedtls_ccm_star_auth_decrypt>:
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
10006dda:	b5f0      	push	{r4, r5, r6, r7, lr}
10006ddc:	1c0c      	adds	r4, r1, #0
10006dde:	1c17      	adds	r7, r2, #0
10006de0:	b08d      	sub	sp, #52	; 0x34
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
10006de2:	9300      	str	r3, [sp, #0]
10006de4:	9b12      	ldr	r3, [sp, #72]	; 0x48
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
10006de6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
10006de8:	9301      	str	r3, [sp, #4]
10006dea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10006dec:	ae08      	add	r6, sp, #32
10006dee:	9302      	str	r3, [sp, #8]
10006df0:	9b14      	ldr	r3, [sp, #80]	; 0x50
10006df2:	1c22      	adds	r2, r4, #0
10006df4:	9303      	str	r3, [sp, #12]
10006df6:	9b15      	ldr	r3, [sp, #84]	; 0x54
10006df8:	9605      	str	r6, [sp, #20]
10006dfa:	9304      	str	r3, [sp, #16]
10006dfc:	9506      	str	r5, [sp, #24]
10006dfe:	1c3b      	adds	r3, r7, #0
10006e00:	2101      	movs	r1, #1
10006e02:	f7ff fe2a 	bl	10006a5a <ccm_auth_crypt>
10006e06:	1c02      	adds	r2, r0, #0
10006e08:	1e03      	subs	r3, r0, #0
10006e0a:	d112      	bne.n	10006e32 <mbedtls_ccm_star_auth_decrypt+0x58>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
10006e0c:	42aa      	cmp	r2, r5
10006e0e:	d207      	bcs.n	10006e20 <mbedtls_ccm_star_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];
10006e10:	9916      	ldr	r1, [sp, #88]	; 0x58
10006e12:	5c88      	ldrb	r0, [r1, r2]
10006e14:	5cb1      	ldrb	r1, [r6, r2]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
10006e16:	3201      	adds	r2, #1
        diff |= tag[i] ^ check_tag[i];
10006e18:	4041      	eors	r1, r0
10006e1a:	430b      	orrs	r3, r1
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
10006e1c:	b2d2      	uxtb	r2, r2
10006e1e:	e7f5      	b.n	10006e0c <mbedtls_ccm_star_auth_decrypt+0x32>
    {
        mbedtls_platform_zeroize( output, length );
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
    }

    return( 0 );
10006e20:	2200      	movs	r2, #0

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
10006e22:	4293      	cmp	r3, r2
10006e24:	d005      	beq.n	10006e32 <mbedtls_ccm_star_auth_decrypt+0x58>
    {
        mbedtls_platform_zeroize( output, length );
10006e26:	9815      	ldr	r0, [sp, #84]	; 0x54
10006e28:	1c21      	adds	r1, r4, #0
10006e2a:	f000 fa3d 	bl	100072a8 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
10006e2e:	220f      	movs	r2, #15
10006e30:	4252      	negs	r2, r2
    }

    return( 0 );
}
10006e32:	1c10      	adds	r0, r2, #0
10006e34:	b00d      	add	sp, #52	; 0x34
10006e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

10006e38 <mbedtls_ccm_auth_decrypt>:
int mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
10006e38:	b530      	push	{r4, r5, lr}
10006e3a:	b087      	sub	sp, #28
10006e3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
10006e3e:	2c00      	cmp	r4, #0
10006e40:	d00d      	beq.n	10006e5e <mbedtls_ccm_auth_decrypt+0x26>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
10006e42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
10006e44:	9405      	str	r4, [sp, #20]
10006e46:	9500      	str	r5, [sp, #0]
10006e48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10006e4a:	9501      	str	r5, [sp, #4]
10006e4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
10006e4e:	9502      	str	r5, [sp, #8]
10006e50:	9d0d      	ldr	r5, [sp, #52]	; 0x34
10006e52:	9503      	str	r5, [sp, #12]
10006e54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
10006e56:	9504      	str	r5, [sp, #16]
10006e58:	f7ff ffbf 	bl	10006dda <mbedtls_ccm_star_auth_decrypt>
10006e5c:	e001      	b.n	10006e62 <mbedtls_ccm_auth_decrypt+0x2a>
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
10006e5e:	200d      	movs	r0, #13
10006e60:	4240      	negs	r0, r0

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
10006e62:	b007      	add	sp, #28
10006e64:	bd30      	pop	{r4, r5, pc}
	...

10006e68 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
10006e68:	b530      	push	{r4, r5, lr}
10006e6a:	4c09      	ldr	r4, [pc, #36]	; (10006e90 <mbedtls_cipher_info_from_values+0x28>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
10006e6c:	6823      	ldr	r3, [r4, #0]
10006e6e:	2b00      	cmp	r3, #0
10006e70:	d00b      	beq.n	10006e8a <mbedtls_cipher_info_from_values+0x22>
        if( def->info->base->cipher == cipher_id &&
10006e72:	699d      	ldr	r5, [r3, #24]
10006e74:	782d      	ldrb	r5, [r5, #0]
10006e76:	4285      	cmp	r5, r0
10006e78:	d105      	bne.n	10006e86 <mbedtls_cipher_info_from_values+0x1e>
10006e7a:	685d      	ldr	r5, [r3, #4]
10006e7c:	428d      	cmp	r5, r1
10006e7e:	d102      	bne.n	10006e86 <mbedtls_cipher_info_from_values+0x1e>
            def->info->key_bitlen == (unsigned) key_bitlen &&
10006e80:	785d      	ldrb	r5, [r3, #1]
10006e82:	4295      	cmp	r5, r2
10006e84:	d001      	beq.n	10006e8a <mbedtls_cipher_info_from_values+0x22>
10006e86:	3408      	adds	r4, #8
10006e88:	e7f0      	b.n	10006e6c <mbedtls_cipher_info_from_values+0x4>
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
10006e8a:	1c18      	adds	r0, r3, #0
10006e8c:	bd30      	pop	{r4, r5, pc}
10006e8e:	46c0      	nop			; (mov r8, r8)
10006e90:	1000ed98 	.word	0x1000ed98

10006e94 <mbedtls_cipher_free>:
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
10006e94:	b510      	push	{r4, lr}
    if( ctx == NULL )
10006e96:	2800      	cmp	r0, #0
10006e98:	d00b      	beq.n	10006eb2 <mbedtls_cipher_free+0x1e>
10006e9a:	1c04      	adds	r4, r0, #0
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
10006e9c:	6b40      	ldr	r0, [r0, #52]	; 0x34
10006e9e:	2800      	cmp	r0, #0
10006ea0:	d003      	beq.n	10006eaa <mbedtls_cipher_free+0x16>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
10006ea2:	6823      	ldr	r3, [r4, #0]
10006ea4:	699b      	ldr	r3, [r3, #24]
10006ea6:	695b      	ldr	r3, [r3, #20]
10006ea8:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
10006eaa:	1c20      	adds	r0, r4, #0
10006eac:	2138      	movs	r1, #56	; 0x38
10006eae:	f000 f9fb 	bl	100072a8 <mbedtls_platform_zeroize>
}
10006eb2:	bd10      	pop	{r4, pc}

10006eb4 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
10006eb4:	b538      	push	{r3, r4, r5, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
10006eb6:	2900      	cmp	r1, #0
10006eb8:	d00e      	beq.n	10006ed8 <mbedtls_cipher_setup+0x24>
10006eba:	1c0d      	adds	r5, r1, #0
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
10006ebc:	2238      	movs	r2, #56	; 0x38
10006ebe:	2100      	movs	r1, #0
10006ec0:	1c04      	adds	r4, r0, #0
10006ec2:	f005 f9bd 	bl	1000c240 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
10006ec6:	69ab      	ldr	r3, [r5, #24]
10006ec8:	691b      	ldr	r3, [r3, #16]
10006eca:	4798      	blx	r3
10006ecc:	6360      	str	r0, [r4, #52]	; 0x34
10006ece:	2800      	cmp	r0, #0
10006ed0:	d004      	beq.n	10006edc <mbedtls_cipher_setup+0x28>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
10006ed2:	6025      	str	r5, [r4, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
10006ed4:	2000      	movs	r0, #0
10006ed6:	e002      	b.n	10006ede <mbedtls_cipher_setup+0x2a>

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
10006ed8:	4801      	ldr	r0, [pc, #4]	; (10006ee0 <mbedtls_cipher_setup+0x2c>)
10006eda:	e000      	b.n	10006ede <mbedtls_cipher_setup+0x2a>

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
10006edc:	4801      	ldr	r0, [pc, #4]	; (10006ee4 <mbedtls_cipher_setup+0x30>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
10006ede:	bd38      	pop	{r3, r4, r5, pc}
10006ee0:	ffff9f00 	.word	0xffff9f00
10006ee4:	ffff9e80 	.word	0xffff9e80

10006ee8 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
10006ee8:	b538      	push	{r3, r4, r5, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
10006eea:	6804      	ldr	r4, [r0, #0]
10006eec:	2c00      	cmp	r4, #0
10006eee:	d101      	bne.n	10006ef4 <mbedtls_cipher_setkey+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
10006ef0:	480c      	ldr	r0, [pc, #48]	; (10006f24 <mbedtls_cipher_setkey+0x3c>)
10006ef2:	e016      	b.n	10006f22 <mbedtls_cipher_setkey+0x3a>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
10006ef4:	6925      	ldr	r5, [r4, #16]
10006ef6:	07ad      	lsls	r5, r5, #30
10006ef8:	d402      	bmi.n	10006f00 <mbedtls_cipher_setkey+0x18>
10006efa:	6865      	ldr	r5, [r4, #4]
10006efc:	4295      	cmp	r5, r2
10006efe:	d1f7      	bne.n	10006ef0 <mbedtls_cipher_setkey+0x8>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
10006f00:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
10006f02:	7203      	strb	r3, [r0, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
10006f04:	2b01      	cmp	r3, #1
10006f06:	d003      	beq.n	10006f10 <mbedtls_cipher_setkey+0x28>
10006f08:	7865      	ldrb	r5, [r4, #1]
10006f0a:	3d03      	subs	r5, #3
10006f0c:	2d02      	cmp	r5, #2
10006f0e:	d802      	bhi.n	10006f16 <mbedtls_cipher_setkey+0x2e>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
10006f10:	69a3      	ldr	r3, [r4, #24]
10006f12:	689b      	ldr	r3, [r3, #8]
10006f14:	e003      	b.n	10006f1e <mbedtls_cipher_setkey+0x36>
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
10006f16:	2b00      	cmp	r3, #0
10006f18:	d1ea      	bne.n	10006ef0 <mbedtls_cipher_setkey+0x8>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
10006f1a:	69a3      	ldr	r3, [r4, #24]
10006f1c:	68db      	ldr	r3, [r3, #12]
10006f1e:	6b40      	ldr	r0, [r0, #52]	; 0x34
10006f20:	4798      	blx	r3
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
10006f22:	bd38      	pop	{r3, r4, r5, pc}
10006f24:	ffff9f00 	.word	0xffff9f00

10006f28 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
10006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
10006f2a:	6806      	ldr	r6, [r0, #0]
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
10006f2c:	9f06      	ldr	r7, [sp, #24]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
10006f2e:	2e00      	cmp	r6, #0
10006f30:	d101      	bne.n	10006f36 <mbedtls_cipher_update+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
10006f32:	4814      	ldr	r0, [pc, #80]	; (10006f84 <mbedtls_cipher_update+0x5c>)
10006f34:	e024      	b.n	10006f80 <mbedtls_cipher_update+0x58>
10006f36:	1c15      	adds	r5, r2, #0
10006f38:	1c0a      	adds	r2, r1, #0

    *olen = 0;
10006f3a:	2100      	movs	r1, #0
10006f3c:	6039      	str	r1, [r7, #0]
10006f3e:	1c04      	adds	r4, r0, #0
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
10006f40:	7870      	ldrb	r0, [r6, #1]
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    return ctx->cipher_info->block_size;
10006f42:	6971      	ldr	r1, [r6, #20]
10006f44:	2801      	cmp	r0, #1
10006f46:	d109      	bne.n	10006f5c <mbedtls_cipher_update+0x34>
    {
        if( ilen != block_size )
10006f48:	428d      	cmp	r5, r1
10006f4a:	d114      	bne.n	10006f76 <mbedtls_cipher_update+0x4e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
10006f4c:	2108      	movs	r1, #8
10006f4e:	69b0      	ldr	r0, [r6, #24]
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
10006f50:	603d      	str	r5, [r7, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
10006f52:	5661      	ldrsb	r1, [r4, r1]
10006f54:	6845      	ldr	r5, [r0, #4]
10006f56:	6b60      	ldr	r0, [r4, #52]	; 0x34
10006f58:	47a8      	blx	r5
10006f5a:	e011      	b.n	10006f80 <mbedtls_cipher_update+0x58>
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
10006f5c:	2900      	cmp	r1, #0
10006f5e:	d00c      	beq.n	10006f7a <mbedtls_cipher_update+0x52>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
    }

    if( input == output &&
10006f60:	429a      	cmp	r2, r3
10006f62:	d10c      	bne.n	10006f7e <mbedtls_cipher_update+0x56>
10006f64:	69e3      	ldr	r3, [r4, #28]
10006f66:	2b00      	cmp	r3, #0
10006f68:	d1e3      	bne.n	10006f32 <mbedtls_cipher_update+0xa>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
10006f6a:	1c28      	adds	r0, r5, #0
10006f6c:	f002 fdb8 	bl	10009ae0 <__aeabi_uidivmod>
10006f70:	2900      	cmp	r1, #0
10006f72:	d1de      	bne.n	10006f32 <mbedtls_cipher_update+0xa>
10006f74:	e003      	b.n	10006f7e <mbedtls_cipher_update+0x56>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
10006f76:	4804      	ldr	r0, [pc, #16]	; (10006f88 <mbedtls_cipher_update+0x60>)
10006f78:	e002      	b.n	10006f80 <mbedtls_cipher_update+0x58>
    }
#endif

    if ( 0 == block_size )
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
10006f7a:	4804      	ldr	r0, [pc, #16]	; (10006f8c <mbedtls_cipher_update+0x64>)
10006f7c:	e000      	b.n	10006f80 <mbedtls_cipher_update+0x58>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
10006f7e:	4804      	ldr	r0, [pc, #16]	; (10006f90 <mbedtls_cipher_update+0x68>)
}
10006f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10006f82:	46c0      	nop			; (mov r8, r8)
10006f84:	ffff9f00 	.word	0xffff9f00
10006f88:	ffff9d80 	.word	0xffff9d80
10006f8c:	ffff9c80 	.word	0xffff9c80
10006f90:	ffff9f80 	.word	0xffff9f80

10006f94 <ccm_ctx_free>:

    return( ctx );
}

static void ccm_ctx_free( void *ctx )
{
10006f94:	b510      	push	{r4, lr}
10006f96:	1c04      	adds	r4, r0, #0
    mbedtls_ccm_free( ctx );
10006f98:	f7ff fee5 	bl	10006d66 <mbedtls_ccm_free>
    mbedtls_free( ctx );
10006f9c:	1c20      	adds	r0, r4, #0
10006f9e:	f005 f92d 	bl	1000c1fc <free>
}
10006fa2:	bd10      	pop	{r4, pc}

10006fa4 <ccm_ctx_alloc>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc( void )
{
10006fa4:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
10006fa6:	2001      	movs	r0, #1
10006fa8:	2138      	movs	r1, #56	; 0x38
10006faa:	f005 f8ef 	bl	1000c18c <calloc>
10006fae:	1e04      	subs	r4, r0, #0

    if( ctx != NULL )
10006fb0:	d001      	beq.n	10006fb6 <ccm_ctx_alloc+0x12>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
10006fb2:	f7ff feb1 	bl	10006d18 <mbedtls_ccm_init>

    return( ctx );
}
10006fb6:	1c20      	adds	r0, r4, #0
10006fb8:	bd10      	pop	{r4, pc}

10006fba <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
10006fba:	b510      	push	{r4, lr}
10006fbc:	1c0c      	adds	r4, r1, #0
10006fbe:	1c13      	adds	r3, r2, #0
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
10006fc0:	2102      	movs	r1, #2
10006fc2:	1c22      	adds	r2, r4, #0
10006fc4:	f7ff feae 	bl	10006d24 <mbedtls_ccm_setkey>
                     key, key_bitlen );
}
10006fc8:	bd10      	pop	{r4, pc}

10006fca <aes_ctx_free>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
10006fca:	b510      	push	{r4, lr}
10006fcc:	1c04      	adds	r4, r0, #0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
10006fce:	f7fe ffe6 	bl	10005f9e <mbedtls_aes_free>
    mbedtls_free( ctx );
10006fd2:	1c20      	adds	r0, r4, #0
10006fd4:	f005 f912 	bl	1000c1fc <free>
}
10006fd8:	bd10      	pop	{r4, pc}

10006fda <aes_ctx_alloc>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
10006fda:	218c      	movs	r1, #140	; 0x8c
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
10006fdc:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
10006fde:	2001      	movs	r0, #1
10006fe0:	0049      	lsls	r1, r1, #1
10006fe2:	f005 f8d3 	bl	1000c18c <calloc>
10006fe6:	1e04      	subs	r4, r0, #0

    if( aes == NULL )
10006fe8:	d001      	beq.n	10006fee <aes_ctx_alloc+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
10006fea:	f7fe ffd1 	bl	10005f90 <mbedtls_aes_init>

    return( aes );
}
10006fee:	1c20      	adds	r0, r4, #0
10006ff0:	bd10      	pop	{r4, pc}

10006ff2 <aes_setkey_dec_wrap>:
}
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
10006ff2:	b508      	push	{r3, lr}
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
10006ff4:	f7ff f8b6 	bl	10006164 <mbedtls_aes_setkey_dec>
}
10006ff8:	bd08      	pop	{r3, pc}

10006ffa <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
10006ffa:	b508      	push	{r3, lr}
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
10006ffc:	f7fe ffd8 	bl	10005fb0 <mbedtls_aes_setkey_enc>
}
10007000:	bd08      	pop	{r3, pc}

10007002 <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
10007002:	b508      	push	{r3, lr}
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
10007004:	f7ff fd1c 	bl	10006a40 <mbedtls_aes_crypt_ecb>
}
10007008:	bd08      	pop	{r3, pc}
	...

1000700c <mbedtls_md_info_from_type>:
        case MBEDTLS_MD_SHA1:
            return( &mbedtls_sha1_info );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
1000700c:	4a05      	ldr	r2, [pc, #20]	; (10007024 <mbedtls_md_info_from_type+0x18>)
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
1000700e:	2805      	cmp	r0, #5
10007010:	d005      	beq.n	1000701e <mbedtls_md_info_from_type+0x12>
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
10007012:	1f83      	subs	r3, r0, #6
10007014:	4258      	negs	r0, r3
10007016:	4143      	adcs	r3, r0
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
        case MBEDTLS_MD_SHA256:
            return( &mbedtls_sha256_info );
10007018:	4a03      	ldr	r2, [pc, #12]	; (10007028 <mbedtls_md_info_from_type+0x1c>)
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
1000701a:	425b      	negs	r3, r3
1000701c:	401a      	ands	r2, r3
    }
}
1000701e:	1c10      	adds	r0, r2, #0
10007020:	4770      	bx	lr
10007022:	46c0      	nop			; (mov r8, r8)
10007024:	1000eeb8 	.word	0x1000eeb8
10007028:	1000eef8 	.word	0x1000eef8

1000702c <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
1000702c:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
1000702e:	2100      	movs	r1, #0
10007030:	220c      	movs	r2, #12
10007032:	f005 f905 	bl	1000c240 <memset>
}
10007036:	bd08      	pop	{r3, pc}

10007038 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
10007038:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
1000703a:	2800      	cmp	r0, #0
1000703c:	d017      	beq.n	1000706e <mbedtls_md_free+0x36>
1000703e:	6803      	ldr	r3, [r0, #0]
10007040:	2b00      	cmp	r3, #0
10007042:	d014      	beq.n	1000706e <mbedtls_md_free+0x36>
10007044:	1c04      	adds	r4, r0, #0
        return;

    if( ctx->md_ctx != NULL )
10007046:	6840      	ldr	r0, [r0, #4]
10007048:	2800      	cmp	r0, #0
1000704a:	d001      	beq.n	10007050 <mbedtls_md_free+0x18>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
1000704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000704e:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
10007050:	68a0      	ldr	r0, [r4, #8]
10007052:	2800      	cmp	r0, #0
10007054:	d007      	beq.n	10007066 <mbedtls_md_free+0x2e>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
10007056:	6823      	ldr	r3, [r4, #0]
10007058:	68d9      	ldr	r1, [r3, #12]
1000705a:	0049      	lsls	r1, r1, #1
    if( ctx->md_ctx != NULL )
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
1000705c:	f000 f924 	bl	100072a8 <mbedtls_platform_zeroize>
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
10007060:	68a0      	ldr	r0, [r4, #8]
10007062:	f005 f8cb 	bl	1000c1fc <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
10007066:	1c20      	adds	r0, r4, #0
10007068:	210c      	movs	r1, #12
1000706a:	f000 f91d 	bl	100072a8 <mbedtls_platform_zeroize>
}
1000706e:	bd10      	pop	{r4, pc}

10007070 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
10007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( md_info == NULL || ctx == NULL )
10007072:	2900      	cmp	r1, #0
10007074:	d019      	beq.n	100070aa <mbedtls_md_setup+0x3a>
10007076:	2800      	cmp	r0, #0
10007078:	d017      	beq.n	100070aa <mbedtls_md_setup+0x3a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
1000707a:	6a0b      	ldr	r3, [r1, #32]
1000707c:	1c05      	adds	r5, r0, #0
1000707e:	1c17      	adds	r7, r2, #0
10007080:	1c0c      	adds	r4, r1, #0
10007082:	4798      	blx	r3
10007084:	1e06      	subs	r6, r0, #0
10007086:	6068      	str	r0, [r5, #4]
10007088:	d011      	beq.n	100070ae <mbedtls_md_setup+0x3e>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
1000708a:	2f00      	cmp	r7, #0
1000708c:	d00a      	beq.n	100070a4 <mbedtls_md_setup+0x34>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
1000708e:	2002      	movs	r0, #2
10007090:	68e1      	ldr	r1, [r4, #12]
10007092:	f005 f87b 	bl	1000c18c <calloc>
10007096:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
10007098:	2800      	cmp	r0, #0
1000709a:	d103      	bne.n	100070a4 <mbedtls_md_setup+0x34>
        {
            md_info->ctx_free_func( ctx->md_ctx );
1000709c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000709e:	1c30      	adds	r0, r6, #0
100070a0:	4798      	blx	r3
100070a2:	e004      	b.n	100070ae <mbedtls_md_setup+0x3e>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
100070a4:	602c      	str	r4, [r5, #0]

    return( 0 );
100070a6:	2000      	movs	r0, #0
100070a8:	e002      	b.n	100070b0 <mbedtls_md_setup+0x40>
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
100070aa:	4802      	ldr	r0, [pc, #8]	; (100070b4 <mbedtls_md_setup+0x44>)
100070ac:	e000      	b.n	100070b0 <mbedtls_md_setup+0x40>

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
100070ae:	4802      	ldr	r0, [pc, #8]	; (100070b8 <mbedtls_md_setup+0x48>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
100070b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100070b2:	46c0      	nop			; (mov r8, r8)
100070b4:	ffffaf00 	.word	0xffffaf00
100070b8:	ffffae80 	.word	0xffffae80

100070bc <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
100070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100070be:	b08b      	sub	sp, #44	; 0x2c
100070c0:	1c04      	adds	r4, r0, #0
100070c2:	9101      	str	r1, [sp, #4]
100070c4:	1c17      	adds	r7, r2, #0
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
100070c6:	2800      	cmp	r0, #0
100070c8:	d050      	beq.n	1000716c <mbedtls_md_hmac_starts+0xb0>
100070ca:	6803      	ldr	r3, [r0, #0]
100070cc:	2b00      	cmp	r3, #0
100070ce:	d04d      	beq.n	1000716c <mbedtls_md_hmac_starts+0xb0>
100070d0:	6882      	ldr	r2, [r0, #8]
100070d2:	2a00      	cmp	r2, #0
100070d4:	d04a      	beq.n	1000716c <mbedtls_md_hmac_starts+0xb0>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
100070d6:	68da      	ldr	r2, [r3, #12]
100070d8:	4297      	cmp	r7, r2
100070da:	d917      	bls.n	1000710c <mbedtls_md_hmac_starts+0x50>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
100070dc:	691b      	ldr	r3, [r3, #16]
100070de:	6840      	ldr	r0, [r0, #4]
100070e0:	4798      	blx	r3
100070e2:	1e05      	subs	r5, r0, #0
100070e4:	d13c      	bne.n	10007160 <mbedtls_md_hmac_starts+0xa4>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
100070e6:	6823      	ldr	r3, [r4, #0]
100070e8:	6860      	ldr	r0, [r4, #4]
100070ea:	695b      	ldr	r3, [r3, #20]
100070ec:	9901      	ldr	r1, [sp, #4]
100070ee:	1c3a      	adds	r2, r7, #0
100070f0:	4798      	blx	r3
100070f2:	1e05      	subs	r5, r0, #0
100070f4:	d134      	bne.n	10007160 <mbedtls_md_hmac_starts+0xa4>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
100070f6:	6823      	ldr	r3, [r4, #0]
100070f8:	6860      	ldr	r0, [r4, #4]
100070fa:	699b      	ldr	r3, [r3, #24]
100070fc:	a902      	add	r1, sp, #8
100070fe:	4798      	blx	r3
10007100:	1e05      	subs	r5, r0, #0
10007102:	d12d      	bne.n	10007160 <mbedtls_md_hmac_starts+0xa4>
            goto cleanup;

        keylen = ctx->md_info->size;
10007104:	6823      	ldr	r3, [r4, #0]
10007106:	689f      	ldr	r7, [r3, #8]
        key = sum;
10007108:	ab02      	add	r3, sp, #8
1000710a:	9301      	str	r3, [sp, #4]
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
1000710c:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
1000710e:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
10007110:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
10007112:	2136      	movs	r1, #54	; 0x36
10007114:	1c30      	adds	r0, r6, #0
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
10007116:	18b5      	adds	r5, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
10007118:	f005 f892 	bl	1000c240 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
1000711c:	6823      	ldr	r3, [r4, #0]
1000711e:	1c28      	adds	r0, r5, #0
10007120:	68da      	ldr	r2, [r3, #12]
10007122:	215c      	movs	r1, #92	; 0x5c
10007124:	f005 f88c 	bl	1000c240 <memset>

    for( i = 0; i < keylen; i++ )
10007128:	2300      	movs	r3, #0
1000712a:	42bb      	cmp	r3, r7
1000712c:	d00b      	beq.n	10007146 <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
1000712e:	9a01      	ldr	r2, [sp, #4]
10007130:	5cd1      	ldrb	r1, [r2, r3]
10007132:	5cf2      	ldrb	r2, [r6, r3]
10007134:	404a      	eors	r2, r1
10007136:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
10007138:	9a01      	ldr	r2, [sp, #4]
1000713a:	5cd1      	ldrb	r1, [r2, r3]
1000713c:	5cea      	ldrb	r2, [r5, r3]
1000713e:	404a      	eors	r2, r1
10007140:	54ea      	strb	r2, [r5, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
10007142:	3301      	adds	r3, #1
10007144:	e7f1      	b.n	1000712a <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
10007146:	6823      	ldr	r3, [r4, #0]
10007148:	6860      	ldr	r0, [r4, #4]
1000714a:	691b      	ldr	r3, [r3, #16]
1000714c:	4798      	blx	r3
1000714e:	1e05      	subs	r5, r0, #0
10007150:	d106      	bne.n	10007160 <mbedtls_md_hmac_starts+0xa4>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
10007152:	6823      	ldr	r3, [r4, #0]
10007154:	6860      	ldr	r0, [r4, #4]
10007156:	695d      	ldr	r5, [r3, #20]
10007158:	1c31      	adds	r1, r6, #0
1000715a:	68da      	ldr	r2, [r3, #12]
1000715c:	47a8      	blx	r5
1000715e:	1c05      	adds	r5, r0, #0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
10007160:	a802      	add	r0, sp, #8
10007162:	2120      	movs	r1, #32
10007164:	f000 f8a0 	bl	100072a8 <mbedtls_platform_zeroize>

    return( ret );
10007168:	1c28      	adds	r0, r5, #0
1000716a:	e000      	b.n	1000716e <mbedtls_md_hmac_starts+0xb2>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
1000716c:	4801      	ldr	r0, [pc, #4]	; (10007174 <mbedtls_md_hmac_starts+0xb8>)

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );

    return( ret );
}
1000716e:	b00b      	add	sp, #44	; 0x2c
10007170:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007172:	46c0      	nop			; (mov r8, r8)
10007174:	ffffaf00 	.word	0xffffaf00

10007178 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
10007178:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
1000717a:	2800      	cmp	r0, #0
1000717c:	d009      	beq.n	10007192 <mbedtls_md_hmac_update+0x1a>
1000717e:	6803      	ldr	r3, [r0, #0]
10007180:	2b00      	cmp	r3, #0
10007182:	d006      	beq.n	10007192 <mbedtls_md_hmac_update+0x1a>
10007184:	6884      	ldr	r4, [r0, #8]
10007186:	2c00      	cmp	r4, #0
10007188:	d003      	beq.n	10007192 <mbedtls_md_hmac_update+0x1a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
1000718a:	695b      	ldr	r3, [r3, #20]
1000718c:	6840      	ldr	r0, [r0, #4]
1000718e:	4798      	blx	r3
10007190:	e000      	b.n	10007194 <mbedtls_md_hmac_update+0x1c>
}

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
10007192:	4801      	ldr	r0, [pc, #4]	; (10007198 <mbedtls_md_hmac_update+0x20>)

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
}
10007194:	bd10      	pop	{r4, pc}
10007196:	46c0      	nop			; (mov r8, r8)
10007198:	ffffaf00 	.word	0xffffaf00

1000719c <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
1000719c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000719e:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
100071a0:	2800      	cmp	r0, #0
100071a2:	d02a      	beq.n	100071fa <mbedtls_md_hmac_finish+0x5e>
100071a4:	6803      	ldr	r3, [r0, #0]
100071a6:	2b00      	cmp	r3, #0
100071a8:	d027      	beq.n	100071fa <mbedtls_md_hmac_finish+0x5e>
100071aa:	6887      	ldr	r7, [r0, #8]
100071ac:	2f00      	cmp	r7, #0
100071ae:	d024      	beq.n	100071fa <mbedtls_md_hmac_finish+0x5e>
100071b0:	1c0d      	adds	r5, r1, #0
100071b2:	1c04      	adds	r4, r0, #0
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
100071b4:	68de      	ldr	r6, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
100071b6:	6840      	ldr	r0, [r0, #4]
100071b8:	699b      	ldr	r3, [r3, #24]
100071ba:	4669      	mov	r1, sp
100071bc:	4798      	blx	r3
100071be:	2800      	cmp	r0, #0
100071c0:	d11c      	bne.n	100071fc <mbedtls_md_hmac_finish+0x60>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
100071c2:	6823      	ldr	r3, [r4, #0]
100071c4:	6860      	ldr	r0, [r4, #4]
100071c6:	691b      	ldr	r3, [r3, #16]
100071c8:	4798      	blx	r3
100071ca:	2800      	cmp	r0, #0
100071cc:	d116      	bne.n	100071fc <mbedtls_md_hmac_finish+0x60>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
100071ce:	6823      	ldr	r3, [r4, #0]
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
100071d0:	19b9      	adds	r1, r7, r6

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
100071d2:	6860      	ldr	r0, [r4, #4]
100071d4:	695e      	ldr	r6, [r3, #20]
100071d6:	68da      	ldr	r2, [r3, #12]
100071d8:	47b0      	blx	r6
100071da:	2800      	cmp	r0, #0
100071dc:	d10e      	bne.n	100071fc <mbedtls_md_hmac_finish+0x60>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
100071de:	6823      	ldr	r3, [r4, #0]
100071e0:	6860      	ldr	r0, [r4, #4]
100071e2:	695e      	ldr	r6, [r3, #20]
100071e4:	4669      	mov	r1, sp
100071e6:	689a      	ldr	r2, [r3, #8]
100071e8:	47b0      	blx	r6
100071ea:	2800      	cmp	r0, #0
100071ec:	d106      	bne.n	100071fc <mbedtls_md_hmac_finish+0x60>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
100071ee:	6823      	ldr	r3, [r4, #0]
100071f0:	6860      	ldr	r0, [r4, #4]
100071f2:	699b      	ldr	r3, [r3, #24]
100071f4:	1c29      	adds	r1, r5, #0
100071f6:	4798      	blx	r3
100071f8:	e000      	b.n	100071fc <mbedtls_md_hmac_finish+0x60>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
100071fa:	4801      	ldr	r0, [pc, #4]	; (10007200 <mbedtls_md_hmac_finish+0x64>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
100071fc:	b009      	add	sp, #36	; 0x24
100071fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007200:	ffffaf00 	.word	0xffffaf00

10007204 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
10007204:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
10007206:	2800      	cmp	r0, #0
10007208:	d012      	beq.n	10007230 <mbedtls_md_hmac_reset+0x2c>
1000720a:	6803      	ldr	r3, [r0, #0]
1000720c:	2b00      	cmp	r3, #0
1000720e:	d00f      	beq.n	10007230 <mbedtls_md_hmac_reset+0x2c>
10007210:	6885      	ldr	r5, [r0, #8]
10007212:	2d00      	cmp	r5, #0
10007214:	d00c      	beq.n	10007230 <mbedtls_md_hmac_reset+0x2c>
10007216:	1c04      	adds	r4, r0, #0
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
10007218:	691b      	ldr	r3, [r3, #16]
1000721a:	6840      	ldr	r0, [r0, #4]
1000721c:	4798      	blx	r3
1000721e:	2800      	cmp	r0, #0
10007220:	d107      	bne.n	10007232 <mbedtls_md_hmac_reset+0x2e>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
10007222:	6823      	ldr	r3, [r4, #0]
10007224:	6860      	ldr	r0, [r4, #4]
10007226:	695e      	ldr	r6, [r3, #20]
10007228:	1c29      	adds	r1, r5, #0
1000722a:	68da      	ldr	r2, [r3, #12]
1000722c:	47b0      	blx	r6
1000722e:	e000      	b.n	10007232 <mbedtls_md_hmac_reset+0x2e>
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
10007230:	4800      	ldr	r0, [pc, #0]	; (10007234 <mbedtls_md_hmac_reset+0x30>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
10007232:	bd70      	pop	{r4, r5, r6, pc}
10007234:	ffffaf00 	.word	0xffffaf00

10007238 <sha224_process_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
10007238:	b508      	push	{r3, lr}
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
1000723a:	f000 f899 	bl	10007370 <mbedtls_internal_sha256_process>
                                             data ) );
}
1000723e:	bd08      	pop	{r3, pc}

10007240 <sha224_clone_wrap>:
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
}

static void sha224_clone_wrap( void *dst, const void *src )
{
10007240:	b508      	push	{r3, lr}
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
10007242:	f000 f848 	bl	100072d6 <mbedtls_sha256_clone>
                    (const mbedtls_sha256_context *) src );
}
10007246:	bd08      	pop	{r3, pc}

10007248 <sha224_ctx_free>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
10007248:	b510      	push	{r4, lr}
1000724a:	1c04      	adds	r4, r0, #0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
1000724c:	f000 f83c 	bl	100072c8 <mbedtls_sha256_free>
    mbedtls_free( ctx );
10007250:	1c20      	adds	r0, r4, #0
10007252:	f004 ffd3 	bl	1000c1fc <free>
}
10007256:	bd10      	pop	{r4, pc}

10007258 <sha224_ctx_alloc>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
10007258:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
1000725a:	2001      	movs	r0, #1
1000725c:	216c      	movs	r1, #108	; 0x6c
1000725e:	f004 ff95 	bl	1000c18c <calloc>
10007262:	1e04      	subs	r4, r0, #0

    if( ctx != NULL )
10007264:	d001      	beq.n	1000726a <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
10007266:	f000 f829 	bl	100072bc <mbedtls_sha256_init>

    return( ctx );
}
1000726a:	1c20      	adds	r0, r4, #0
1000726c:	bd10      	pop	{r4, pc}

1000726e <sha224_wrap>:
                                       output ) );
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
1000726e:	b508      	push	{r3, lr}
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
10007270:	2301      	movs	r3, #1
10007272:	f000 fdee 	bl	10007e52 <mbedtls_sha256_ret>
}
10007276:	bd08      	pop	{r3, pc}

10007278 <sha256_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
10007278:	b508      	push	{r3, lr}
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
1000727a:	2300      	movs	r3, #0
1000727c:	f000 fde9 	bl	10007e52 <mbedtls_sha256_ret>
}
10007280:	bd08      	pop	{r3, pc}

10007282 <sha224_finish_wrap>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
10007282:	b508      	push	{r3, lr}
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
10007284:	f000 fd44 	bl	10007d10 <mbedtls_sha256_finish_ret>
                                       output ) );
}
10007288:	bd08      	pop	{r3, pc}

1000728a <sha224_update_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
}

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
1000728a:	b508      	push	{r3, lr}
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
1000728c:	f000 fd00 	bl	10007c90 <mbedtls_sha256_update_ret>
                                       input, ilen ) );
}
10007290:	bd08      	pop	{r3, pc}

10007292 <sha224_starts_wrap>:
 * Wrappers for generic message digests
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
10007292:	b508      	push	{r3, lr}
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
10007294:	2101      	movs	r1, #1
10007296:	f000 f823 	bl	100072e0 <mbedtls_sha256_starts_ret>
}
1000729a:	bd08      	pop	{r3, pc}

1000729c <sha256_starts_wrap>:
    sha224_clone_wrap,
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
1000729c:	b508      	push	{r3, lr}
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
1000729e:	2100      	movs	r1, #0
100072a0:	f000 f81e 	bl	100072e0 <mbedtls_sha256_starts_ret>
}
100072a4:	bd08      	pop	{r3, pc}
	...

100072a8 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
100072a8:	b508      	push	{r3, lr}
    memset_func( buf, 0, len );
100072aa:	4b03      	ldr	r3, [pc, #12]	; (100072b8 <mbedtls_platform_zeroize+0x10>)
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
100072ac:	1c0a      	adds	r2, r1, #0
    memset_func( buf, 0, len );
100072ae:	681b      	ldr	r3, [r3, #0]
100072b0:	2100      	movs	r1, #0
100072b2:	4798      	blx	r3
}
100072b4:	bd08      	pop	{r3, pc}
100072b6:	46c0      	nop			; (mov r8, r8)
100072b8:	20001a60 	.word	0x20001a60

100072bc <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
100072bc:	b508      	push	{r3, lr}
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
100072be:	2100      	movs	r1, #0
100072c0:	226c      	movs	r2, #108	; 0x6c
100072c2:	f004 ffbd 	bl	1000c240 <memset>
}
100072c6:	bd08      	pop	{r3, pc}

100072c8 <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
100072c8:	b508      	push	{r3, lr}
    if( ctx == NULL )
100072ca:	2800      	cmp	r0, #0
100072cc:	d002      	beq.n	100072d4 <mbedtls_sha256_free+0xc>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
100072ce:	216c      	movs	r1, #108	; 0x6c
100072d0:	f7ff ffea 	bl	100072a8 <mbedtls_platform_zeroize>
}
100072d4:	bd08      	pop	{r3, pc}

100072d6 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
100072d6:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
100072d8:	226c      	movs	r2, #108	; 0x6c
100072da:	f004 ffa8 	bl	1000c22e <memcpy>
}
100072de:	bd08      	pop	{r3, pc}

100072e0 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
100072e0:	2300      	movs	r3, #0
100072e2:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
100072e4:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
100072e6:	4299      	cmp	r1, r3
100072e8:	d10f      	bne.n	1000730a <mbedtls_sha256_starts_ret+0x2a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
100072ea:	4b11      	ldr	r3, [pc, #68]	; (10007330 <mbedtls_sha256_starts_ret+0x50>)
100072ec:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
100072ee:	4b11      	ldr	r3, [pc, #68]	; (10007334 <mbedtls_sha256_starts_ret+0x54>)
100072f0:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
100072f2:	4b11      	ldr	r3, [pc, #68]	; (10007338 <mbedtls_sha256_starts_ret+0x58>)
100072f4:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
100072f6:	4b11      	ldr	r3, [pc, #68]	; (1000733c <mbedtls_sha256_starts_ret+0x5c>)
100072f8:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
100072fa:	4b11      	ldr	r3, [pc, #68]	; (10007340 <mbedtls_sha256_starts_ret+0x60>)
100072fc:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
100072fe:	4b11      	ldr	r3, [pc, #68]	; (10007344 <mbedtls_sha256_starts_ret+0x64>)
10007300:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
10007302:	4b11      	ldr	r3, [pc, #68]	; (10007348 <mbedtls_sha256_starts_ret+0x68>)
10007304:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
10007306:	4b11      	ldr	r3, [pc, #68]	; (1000734c <mbedtls_sha256_starts_ret+0x6c>)
10007308:	e00e      	b.n	10007328 <mbedtls_sha256_starts_ret+0x48>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
1000730a:	4b11      	ldr	r3, [pc, #68]	; (10007350 <mbedtls_sha256_starts_ret+0x70>)
1000730c:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
1000730e:	4b11      	ldr	r3, [pc, #68]	; (10007354 <mbedtls_sha256_starts_ret+0x74>)
10007310:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
10007312:	4b11      	ldr	r3, [pc, #68]	; (10007358 <mbedtls_sha256_starts_ret+0x78>)
10007314:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
10007316:	4b11      	ldr	r3, [pc, #68]	; (1000735c <mbedtls_sha256_starts_ret+0x7c>)
10007318:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
1000731a:	4b11      	ldr	r3, [pc, #68]	; (10007360 <mbedtls_sha256_starts_ret+0x80>)
1000731c:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
1000731e:	4b11      	ldr	r3, [pc, #68]	; (10007364 <mbedtls_sha256_starts_ret+0x84>)
10007320:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
10007322:	4b11      	ldr	r3, [pc, #68]	; (10007368 <mbedtls_sha256_starts_ret+0x88>)
10007324:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
10007326:	4b11      	ldr	r3, [pc, #68]	; (1000736c <mbedtls_sha256_starts_ret+0x8c>)
10007328:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
1000732a:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
1000732c:	2000      	movs	r0, #0
1000732e:	4770      	bx	lr
10007330:	6a09e667 	.word	0x6a09e667
10007334:	bb67ae85 	.word	0xbb67ae85
10007338:	3c6ef372 	.word	0x3c6ef372
1000733c:	a54ff53a 	.word	0xa54ff53a
10007340:	510e527f 	.word	0x510e527f
10007344:	9b05688c 	.word	0x9b05688c
10007348:	1f83d9ab 	.word	0x1f83d9ab
1000734c:	5be0cd19 	.word	0x5be0cd19
10007350:	c1059ed8 	.word	0xc1059ed8
10007354:	367cd507 	.word	0x367cd507
10007358:	3070dd17 	.word	0x3070dd17
1000735c:	f70e5939 	.word	0xf70e5939
10007360:	ffc00b31 	.word	0xffc00b31
10007364:	68581511 	.word	0x68581511
10007368:	64f98fa7 	.word	0x64f98fa7
1000736c:	befa4fa4 	.word	0xbefa4fa4

10007370 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
10007370:	2300      	movs	r3, #0
10007372:	b5f0      	push	{r4, r5, r6, r7, lr}
10007374:	b0d5      	sub	sp, #340	; 0x154
10007376:	900b      	str	r0, [sp, #44]	; 0x2c
10007378:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000737a:	18d2      	adds	r2, r2, r3

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
1000737c:	6892      	ldr	r2, [r2, #8]
1000737e:	9200      	str	r2, [sp, #0]
10007380:	9800      	ldr	r0, [sp, #0]
10007382:	aa0c      	add	r2, sp, #48	; 0x30
10007384:	5098      	str	r0, [r3, r2]
10007386:	3304      	adds	r3, #4
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
10007388:	2b20      	cmp	r3, #32
1000738a:	d1f5      	bne.n	10007378 <mbedtls_internal_sha256_process+0x8>
1000738c:	2000      	movs	r0, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
1000738e:	780b      	ldrb	r3, [r1, #0]
10007390:	061a      	lsls	r2, r3, #24
10007392:	784b      	ldrb	r3, [r1, #1]
10007394:	041b      	lsls	r3, r3, #16
10007396:	4313      	orrs	r3, r2
10007398:	78ca      	ldrb	r2, [r1, #3]
1000739a:	4313      	orrs	r3, r2
1000739c:	788a      	ldrb	r2, [r1, #2]
1000739e:	3104      	adds	r1, #4
100073a0:	0212      	lsls	r2, r2, #8
100073a2:	4313      	orrs	r3, r2
100073a4:	aa14      	add	r2, sp, #80	; 0x50
100073a6:	5083      	str	r3, [r0, r2]
100073a8:	3004      	adds	r0, #4

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
100073aa:	2840      	cmp	r0, #64	; 0x40
100073ac:	d1ef      	bne.n	1000738e <mbedtls_internal_sha256_process+0x1e>
100073ae:	4cef      	ldr	r4, [pc, #956]	; (1000776c <mbedtls_internal_sha256_process+0x3fc>)
100073b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100073b2:	1d20      	adds	r0, r4, #4
100073b4:	9005      	str	r0, [sp, #20]
100073b6:	2000      	movs	r0, #0
100073b8:	9304      	str	r3, [sp, #16]
100073ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100073bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
100073be:	9300      	str	r3, [sp, #0]
100073c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
100073c2:	9203      	str	r2, [sp, #12]
100073c4:	9301      	str	r3, [sp, #4]
100073c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
100073c8:	990e      	ldr	r1, [sp, #56]	; 0x38
100073ca:	9302      	str	r3, [sp, #8]
100073cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100073ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100073d0:	ae15      	add	r6, sp, #84	; 0x54
100073d2:	9006      	str	r0, [sp, #24]
100073d4:	2520      	movs	r5, #32
100073d6:	9c06      	ldr	r4, [sp, #24]
100073d8:	a80c      	add	r0, sp, #48	; 0x30
100073da:	1940      	adds	r0, r0, r5
100073dc:	5900      	ldr	r0, [r0, r4]
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
100073de:	9d03      	ldr	r5, [sp, #12]
100073e0:	9007      	str	r0, [sp, #28]
100073e2:	48e2      	ldr	r0, [pc, #904]	; (1000776c <mbedtls_internal_sha256_process+0x3fc>)
100073e4:	5820      	ldr	r0, [r4, r0]
100073e6:	9008      	str	r0, [sp, #32]
100073e8:	9c08      	ldr	r4, [sp, #32]
100073ea:	9807      	ldr	r0, [sp, #28]
100073ec:	46a4      	mov	ip, r4
100073ee:	4460      	add	r0, ip
100073f0:	1c07      	adds	r7, r0, #0
100073f2:	200b      	movs	r0, #11
100073f4:	2406      	movs	r4, #6
100073f6:	41c5      	rors	r5, r0
100073f8:	9803      	ldr	r0, [sp, #12]
100073fa:	41e0      	rors	r0, r4
100073fc:	4045      	eors	r5, r0
100073fe:	9803      	ldr	r0, [sp, #12]
10007400:	3413      	adds	r4, #19
10007402:	41e0      	rors	r0, r4
10007404:	4068      	eors	r0, r5
10007406:	183f      	adds	r7, r7, r0
10007408:	9d01      	ldr	r5, [sp, #4]
1000740a:	9802      	ldr	r0, [sp, #8]
1000740c:	3c0c      	subs	r4, #12
1000740e:	4045      	eors	r5, r0
10007410:	9803      	ldr	r0, [sp, #12]
10007412:	4005      	ands	r5, r0
10007414:	9801      	ldr	r0, [sp, #4]
10007416:	4045      	eors	r5, r0
10007418:	9804      	ldr	r0, [sp, #16]
1000741a:	197d      	adds	r5, r7, r5
1000741c:	182d      	adds	r5, r5, r0
1000741e:	9800      	ldr	r0, [sp, #0]
10007420:	1c1f      	adds	r7, r3, #0
10007422:	4684      	mov	ip, r0
10007424:	44ac      	add	ip, r5
10007426:	4660      	mov	r0, ip
10007428:	9000      	str	r0, [sp, #0]
1000742a:	1c10      	adds	r0, r2, #0
1000742c:	4317      	orrs	r7, r2
1000742e:	4018      	ands	r0, r3
10007430:	400f      	ands	r7, r1
10007432:	4307      	orrs	r7, r0
10007434:	1c10      	adds	r0, r2, #0
10007436:	41e0      	rors	r0, r4
10007438:	4684      	mov	ip, r0
1000743a:	1c10      	adds	r0, r2, #0
1000743c:	3c0b      	subs	r4, #11
1000743e:	41e0      	rors	r0, r4
10007440:	4664      	mov	r4, ip
10007442:	4044      	eors	r4, r0
10007444:	46a4      	mov	ip, r4
10007446:	1c10      	adds	r0, r2, #0
10007448:	2416      	movs	r4, #22
1000744a:	41e0      	rors	r0, r4
1000744c:	4664      	mov	r4, ip
1000744e:	4060      	eors	r0, r4
10007450:	1838      	adds	r0, r7, r0
10007452:	1945      	adds	r5, r0, r5
10007454:	9805      	ldr	r0, [sp, #20]
10007456:	6834      	ldr	r4, [r6, #0]
10007458:	6800      	ldr	r0, [r0, #0]
1000745a:	1900      	adds	r0, r0, r4
1000745c:	9c01      	ldr	r4, [sp, #4]
1000745e:	1907      	adds	r7, r0, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
10007460:	9c03      	ldr	r4, [sp, #12]
10007462:	9802      	ldr	r0, [sp, #8]
10007464:	4060      	eors	r0, r4
10007466:	9c00      	ldr	r4, [sp, #0]
10007468:	4020      	ands	r0, r4
1000746a:	9c02      	ldr	r4, [sp, #8]
1000746c:	4060      	eors	r0, r4
1000746e:	1838      	adds	r0, r7, r0
10007470:	270b      	movs	r7, #11
10007472:	9c00      	ldr	r4, [sp, #0]
10007474:	41fc      	rors	r4, r7
10007476:	46a4      	mov	ip, r4
10007478:	2406      	movs	r4, #6
1000747a:	9f00      	ldr	r7, [sp, #0]
1000747c:	41e7      	rors	r7, r4
1000747e:	4664      	mov	r4, ip
10007480:	407c      	eors	r4, r7
10007482:	46a4      	mov	ip, r4
10007484:	2419      	movs	r4, #25
10007486:	9f00      	ldr	r7, [sp, #0]
10007488:	41e7      	rors	r7, r4
1000748a:	4664      	mov	r4, ip
1000748c:	4067      	eors	r7, r4
1000748e:	19c0      	adds	r0, r0, r7
10007490:	1841      	adds	r1, r0, r1
10007492:	1c2f      	adds	r7, r5, #0
10007494:	9101      	str	r1, [sp, #4]
10007496:	1c11      	adds	r1, r2, #0
10007498:	4317      	orrs	r7, r2
1000749a:	4029      	ands	r1, r5
1000749c:	401f      	ands	r7, r3
1000749e:	430f      	orrs	r7, r1
100074a0:	240d      	movs	r4, #13
100074a2:	1c29      	adds	r1, r5, #0
100074a4:	41e1      	rors	r1, r4
100074a6:	468c      	mov	ip, r1
100074a8:	1c29      	adds	r1, r5, #0
100074aa:	3c0b      	subs	r4, #11
100074ac:	41e1      	rors	r1, r4
100074ae:	4664      	mov	r4, ip
100074b0:	404c      	eors	r4, r1
100074b2:	46a4      	mov	ip, r4
100074b4:	1c29      	adds	r1, r5, #0
100074b6:	2416      	movs	r4, #22
100074b8:	41e1      	rors	r1, r4
100074ba:	4664      	mov	r4, ip
100074bc:	4061      	eors	r1, r4
100074be:	1879      	adds	r1, r7, r1
100074c0:	1809      	adds	r1, r1, r0
100074c2:	9805      	ldr	r0, [sp, #20]
100074c4:	6874      	ldr	r4, [r6, #4]
100074c6:	6840      	ldr	r0, [r0, #4]
100074c8:	1900      	adds	r0, r0, r4
100074ca:	9c02      	ldr	r4, [sp, #8]
100074cc:	1907      	adds	r7, r0, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
100074ce:	9803      	ldr	r0, [sp, #12]
100074d0:	9c00      	ldr	r4, [sp, #0]
100074d2:	4060      	eors	r0, r4
100074d4:	9c01      	ldr	r4, [sp, #4]
100074d6:	4020      	ands	r0, r4
100074d8:	9c03      	ldr	r4, [sp, #12]
100074da:	4060      	eors	r0, r4
100074dc:	1838      	adds	r0, r7, r0
100074de:	270b      	movs	r7, #11
100074e0:	9c01      	ldr	r4, [sp, #4]
100074e2:	41fc      	rors	r4, r7
100074e4:	46a4      	mov	ip, r4
100074e6:	2406      	movs	r4, #6
100074e8:	9f01      	ldr	r7, [sp, #4]
100074ea:	41e7      	rors	r7, r4
100074ec:	4664      	mov	r4, ip
100074ee:	407c      	eors	r4, r7
100074f0:	46a4      	mov	ip, r4
100074f2:	2419      	movs	r4, #25
100074f4:	9f01      	ldr	r7, [sp, #4]
100074f6:	41e7      	rors	r7, r4
100074f8:	4664      	mov	r4, ip
100074fa:	4067      	eors	r7, r4
100074fc:	19c0      	adds	r0, r0, r7
100074fe:	18c3      	adds	r3, r0, r3
10007500:	1c0f      	adds	r7, r1, #0
10007502:	9302      	str	r3, [sp, #8]
10007504:	1c2b      	adds	r3, r5, #0
10007506:	432f      	orrs	r7, r5
10007508:	400b      	ands	r3, r1
1000750a:	4017      	ands	r7, r2
1000750c:	431f      	orrs	r7, r3
1000750e:	240d      	movs	r4, #13
10007510:	1c0b      	adds	r3, r1, #0
10007512:	41e3      	rors	r3, r4
10007514:	469c      	mov	ip, r3
10007516:	1c0b      	adds	r3, r1, #0
10007518:	3c0b      	subs	r4, #11
1000751a:	41e3      	rors	r3, r4
1000751c:	4664      	mov	r4, ip
1000751e:	405c      	eors	r4, r3
10007520:	46a4      	mov	ip, r4
10007522:	1c0b      	adds	r3, r1, #0
10007524:	2416      	movs	r4, #22
10007526:	41e3      	rors	r3, r4
10007528:	4664      	mov	r4, ip
1000752a:	4063      	eors	r3, r4
1000752c:	18ff      	adds	r7, r7, r3
1000752e:	9b05      	ldr	r3, [sp, #20]
10007530:	183f      	adds	r7, r7, r0
10007532:	689b      	ldr	r3, [r3, #8]
10007534:	68b0      	ldr	r0, [r6, #8]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
10007536:	9c01      	ldr	r4, [sp, #4]
10007538:	1818      	adds	r0, r3, r0
1000753a:	9b03      	ldr	r3, [sp, #12]
1000753c:	18c0      	adds	r0, r0, r3
1000753e:	9b00      	ldr	r3, [sp, #0]
10007540:	4063      	eors	r3, r4
10007542:	9c02      	ldr	r4, [sp, #8]
10007544:	4023      	ands	r3, r4
10007546:	9c00      	ldr	r4, [sp, #0]
10007548:	4063      	eors	r3, r4
1000754a:	240b      	movs	r4, #11
1000754c:	18c3      	adds	r3, r0, r3
1000754e:	9802      	ldr	r0, [sp, #8]
10007550:	41e0      	rors	r0, r4
10007552:	4684      	mov	ip, r0
10007554:	9802      	ldr	r0, [sp, #8]
10007556:	3c05      	subs	r4, #5
10007558:	41e0      	rors	r0, r4
1000755a:	4664      	mov	r4, ip
1000755c:	4044      	eors	r4, r0
1000755e:	46a4      	mov	ip, r4
10007560:	2419      	movs	r4, #25
10007562:	9802      	ldr	r0, [sp, #8]
10007564:	41e0      	rors	r0, r4
10007566:	4664      	mov	r4, ip
10007568:	4060      	eors	r0, r4
1000756a:	181b      	adds	r3, r3, r0
1000756c:	189a      	adds	r2, r3, r2
1000756e:	1c38      	adds	r0, r7, #0
10007570:	9203      	str	r2, [sp, #12]
10007572:	1c0a      	adds	r2, r1, #0
10007574:	4308      	orrs	r0, r1
10007576:	403a      	ands	r2, r7
10007578:	4028      	ands	r0, r5
1000757a:	4310      	orrs	r0, r2
1000757c:	240d      	movs	r4, #13
1000757e:	1c3a      	adds	r2, r7, #0
10007580:	41e2      	rors	r2, r4
10007582:	4694      	mov	ip, r2
10007584:	1c3a      	adds	r2, r7, #0
10007586:	3c0b      	subs	r4, #11
10007588:	41e2      	rors	r2, r4
1000758a:	4664      	mov	r4, ip
1000758c:	4054      	eors	r4, r2
1000758e:	46a4      	mov	ip, r4
10007590:	1c3a      	adds	r2, r7, #0
10007592:	2416      	movs	r4, #22
10007594:	41e2      	rors	r2, r4
10007596:	4664      	mov	r4, ip
10007598:	4062      	eors	r2, r4
1000759a:	1880      	adds	r0, r0, r2
1000759c:	9a05      	ldr	r2, [sp, #20]
1000759e:	18c0      	adds	r0, r0, r3
100075a0:	68d2      	ldr	r2, [r2, #12]
100075a2:	68f3      	ldr	r3, [r6, #12]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
100075a4:	9c02      	ldr	r4, [sp, #8]
100075a6:	189b      	adds	r3, r3, r2
100075a8:	9a00      	ldr	r2, [sp, #0]
100075aa:	189a      	adds	r2, r3, r2
100075ac:	9b01      	ldr	r3, [sp, #4]
100075ae:	4063      	eors	r3, r4
100075b0:	9c03      	ldr	r4, [sp, #12]
100075b2:	4023      	ands	r3, r4
100075b4:	9c01      	ldr	r4, [sp, #4]
100075b6:	4063      	eors	r3, r4
100075b8:	240b      	movs	r4, #11
100075ba:	18d3      	adds	r3, r2, r3
100075bc:	9a03      	ldr	r2, [sp, #12]
100075be:	41e2      	rors	r2, r4
100075c0:	4694      	mov	ip, r2
100075c2:	9a03      	ldr	r2, [sp, #12]
100075c4:	3c05      	subs	r4, #5
100075c6:	41e2      	rors	r2, r4
100075c8:	4664      	mov	r4, ip
100075ca:	4054      	eors	r4, r2
100075cc:	46a4      	mov	ip, r4
100075ce:	2419      	movs	r4, #25
100075d0:	9a03      	ldr	r2, [sp, #12]
100075d2:	41e2      	rors	r2, r4
100075d4:	4664      	mov	r4, ip
100075d6:	4062      	eors	r2, r4
100075d8:	189b      	adds	r3, r3, r2
100075da:	195a      	adds	r2, r3, r5
100075dc:	1c05      	adds	r5, r0, #0
100075de:	9204      	str	r2, [sp, #16]
100075e0:	1c3a      	adds	r2, r7, #0
100075e2:	433d      	orrs	r5, r7
100075e4:	4002      	ands	r2, r0
100075e6:	400d      	ands	r5, r1
100075e8:	4315      	orrs	r5, r2
100075ea:	240d      	movs	r4, #13
100075ec:	1c02      	adds	r2, r0, #0
100075ee:	41e2      	rors	r2, r4
100075f0:	4694      	mov	ip, r2
100075f2:	1c02      	adds	r2, r0, #0
100075f4:	3c0b      	subs	r4, #11
100075f6:	41e2      	rors	r2, r4
100075f8:	4664      	mov	r4, ip
100075fa:	4054      	eors	r4, r2
100075fc:	46a4      	mov	ip, r4
100075fe:	1c02      	adds	r2, r0, #0
10007600:	2416      	movs	r4, #22
10007602:	41e2      	rors	r2, r4
10007604:	4664      	mov	r4, ip
10007606:	4062      	eors	r2, r4
10007608:	18aa      	adds	r2, r5, r2
1000760a:	18d3      	adds	r3, r2, r3
1000760c:	9300      	str	r3, [sp, #0]
1000760e:	9a05      	ldr	r2, [sp, #20]
10007610:	6933      	ldr	r3, [r6, #16]
10007612:	6912      	ldr	r2, [r2, #16]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
10007614:	2406      	movs	r4, #6
10007616:	189a      	adds	r2, r3, r2
10007618:	9b01      	ldr	r3, [sp, #4]
1000761a:	18d5      	adds	r5, r2, r3
1000761c:	9b02      	ldr	r3, [sp, #8]
1000761e:	9a03      	ldr	r2, [sp, #12]
10007620:	4053      	eors	r3, r2
10007622:	9a04      	ldr	r2, [sp, #16]
10007624:	4013      	ands	r3, r2
10007626:	9a02      	ldr	r2, [sp, #8]
10007628:	4053      	eors	r3, r2
1000762a:	18ea      	adds	r2, r5, r3
1000762c:	230b      	movs	r3, #11
1000762e:	9d04      	ldr	r5, [sp, #16]
10007630:	41dd      	rors	r5, r3
10007632:	9b04      	ldr	r3, [sp, #16]
10007634:	41e3      	rors	r3, r4
10007636:	406b      	eors	r3, r5
10007638:	9d04      	ldr	r5, [sp, #16]
1000763a:	3413      	adds	r4, #19
1000763c:	41e5      	rors	r5, r4
1000763e:	406b      	eors	r3, r5
10007640:	18d3      	adds	r3, r2, r3
10007642:	185a      	adds	r2, r3, r1
10007644:	9201      	str	r2, [sp, #4]
10007646:	220d      	movs	r2, #13
10007648:	9d00      	ldr	r5, [sp, #0]
1000764a:	9900      	ldr	r1, [sp, #0]
1000764c:	4305      	orrs	r5, r0
1000764e:	4001      	ands	r1, r0
10007650:	403d      	ands	r5, r7
10007652:	430d      	orrs	r5, r1
10007654:	9900      	ldr	r1, [sp, #0]
10007656:	3c17      	subs	r4, #23
10007658:	41d1      	rors	r1, r2
1000765a:	9a00      	ldr	r2, [sp, #0]
1000765c:	41e2      	rors	r2, r4
1000765e:	4051      	eors	r1, r2
10007660:	9a00      	ldr	r2, [sp, #0]
10007662:	3414      	adds	r4, #20
10007664:	41e2      	rors	r2, r4
10007666:	404a      	eors	r2, r1
10007668:	18a9      	adds	r1, r5, r2
1000766a:	9a05      	ldr	r2, [sp, #20]
1000766c:	18c9      	adds	r1, r1, r3
1000766e:	6952      	ldr	r2, [r2, #20]
10007670:	6973      	ldr	r3, [r6, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
10007672:	9c04      	ldr	r4, [sp, #16]
10007674:	189b      	adds	r3, r3, r2
10007676:	9a02      	ldr	r2, [sp, #8]
10007678:	189b      	adds	r3, r3, r2
1000767a:	9a03      	ldr	r2, [sp, #12]
1000767c:	4062      	eors	r2, r4
1000767e:	9c01      	ldr	r4, [sp, #4]
10007680:	4022      	ands	r2, r4
10007682:	9c03      	ldr	r4, [sp, #12]
10007684:	4062      	eors	r2, r4
10007686:	189d      	adds	r5, r3, r2
10007688:	230b      	movs	r3, #11
1000768a:	2406      	movs	r4, #6
1000768c:	9a01      	ldr	r2, [sp, #4]
1000768e:	41da      	rors	r2, r3
10007690:	9b01      	ldr	r3, [sp, #4]
10007692:	41e3      	rors	r3, r4
10007694:	4053      	eors	r3, r2
10007696:	9a01      	ldr	r2, [sp, #4]
10007698:	3413      	adds	r4, #19
1000769a:	41e2      	rors	r2, r4
1000769c:	405a      	eors	r2, r3
1000769e:	18aa      	adds	r2, r5, r2
100076a0:	19d3      	adds	r3, r2, r7
100076a2:	9f00      	ldr	r7, [sp, #0]
100076a4:	9302      	str	r3, [sp, #8]
100076a6:	9b00      	ldr	r3, [sp, #0]
100076a8:	430f      	orrs	r7, r1
100076aa:	4007      	ands	r7, r0
100076ac:	400b      	ands	r3, r1
100076ae:	431f      	orrs	r7, r3
100076b0:	1c0d      	adds	r5, r1, #0
100076b2:	230d      	movs	r3, #13
100076b4:	41dd      	rors	r5, r3
100076b6:	1c0b      	adds	r3, r1, #0
100076b8:	3c17      	subs	r4, #23
100076ba:	41e3      	rors	r3, r4
100076bc:	406b      	eors	r3, r5
100076be:	1c0d      	adds	r5, r1, #0
100076c0:	3414      	adds	r4, #20
100076c2:	41e5      	rors	r5, r4
100076c4:	9c05      	ldr	r4, [sp, #20]
100076c6:	405d      	eors	r5, r3
100076c8:	197b      	adds	r3, r7, r5
100076ca:	189b      	adds	r3, r3, r2
100076cc:	69b2      	ldr	r2, [r6, #24]
100076ce:	69a4      	ldr	r4, [r4, #24]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
100076d0:	9d04      	ldr	r5, [sp, #16]
100076d2:	1912      	adds	r2, r2, r4
100076d4:	9c03      	ldr	r4, [sp, #12]
100076d6:	9f02      	ldr	r7, [sp, #8]
100076d8:	1912      	adds	r2, r2, r4
100076da:	9c01      	ldr	r4, [sp, #4]
100076dc:	3620      	adds	r6, #32
100076de:	4065      	eors	r5, r4
100076e0:	9c02      	ldr	r4, [sp, #8]
100076e2:	4025      	ands	r5, r4
100076e4:	9c04      	ldr	r4, [sp, #16]
100076e6:	4065      	eors	r5, r4
100076e8:	1955      	adds	r5, r2, r5
100076ea:	220b      	movs	r2, #11
100076ec:	2406      	movs	r4, #6
100076ee:	41d7      	rors	r7, r2
100076f0:	9a02      	ldr	r2, [sp, #8]
100076f2:	41e2      	rors	r2, r4
100076f4:	407a      	eors	r2, r7
100076f6:	9f02      	ldr	r7, [sp, #8]
100076f8:	3413      	adds	r4, #19
100076fa:	41e7      	rors	r7, r4
100076fc:	407a      	eors	r2, r7
100076fe:	1c1f      	adds	r7, r3, #0
10007700:	18ad      	adds	r5, r5, r2
10007702:	182a      	adds	r2, r5, r0
10007704:	9203      	str	r2, [sp, #12]
10007706:	9a00      	ldr	r2, [sp, #0]
10007708:	430f      	orrs	r7, r1
1000770a:	4017      	ands	r7, r2
1000770c:	1c0a      	adds	r2, r1, #0
1000770e:	401a      	ands	r2, r3
10007710:	4317      	orrs	r7, r2
10007712:	1c18      	adds	r0, r3, #0
10007714:	220d      	movs	r2, #13
10007716:	41d0      	rors	r0, r2
10007718:	1c1a      	adds	r2, r3, #0
1000771a:	3c17      	subs	r4, #23
1000771c:	41e2      	rors	r2, r4
1000771e:	4042      	eors	r2, r0
10007720:	1c18      	adds	r0, r3, #0
10007722:	3414      	adds	r4, #20
10007724:	41e0      	rors	r0, r4
10007726:	4050      	eors	r0, r2
10007728:	183a      	adds	r2, r7, r0
1000772a:	9806      	ldr	r0, [sp, #24]
1000772c:	1952      	adds	r2, r2, r5
1000772e:	3020      	adds	r0, #32
10007730:	9006      	str	r0, [sp, #24]
10007732:	9805      	ldr	r0, [sp, #20]
10007734:	3020      	adds	r0, #32
10007736:	9005      	str	r0, [sp, #20]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
10007738:	9806      	ldr	r0, [sp, #24]
1000773a:	2840      	cmp	r0, #64	; 0x40
1000773c:	d000      	beq.n	10007740 <mbedtls_internal_sha256_process+0x3d0>
1000773e:	e649      	b.n	100073d4 <mbedtls_internal_sha256_process+0x64>
10007740:	9804      	ldr	r0, [sp, #16]
10007742:	910e      	str	r1, [sp, #56]	; 0x38
10007744:	9013      	str	r0, [sp, #76]	; 0x4c
10007746:	9803      	ldr	r0, [sp, #12]
10007748:	920c      	str	r2, [sp, #48]	; 0x30
1000774a:	9010      	str	r0, [sp, #64]	; 0x40
1000774c:	9802      	ldr	r0, [sp, #8]
1000774e:	930d      	str	r3, [sp, #52]	; 0x34
10007750:	9011      	str	r0, [sp, #68]	; 0x44
10007752:	9801      	ldr	r0, [sp, #4]
10007754:	ac14      	add	r4, sp, #80	; 0x50
10007756:	9012      	str	r0, [sp, #72]	; 0x48
10007758:	9801      	ldr	r0, [sp, #4]
1000775a:	9101      	str	r1, [sp, #4]
1000775c:	9902      	ldr	r1, [sp, #8]
1000775e:	9006      	str	r0, [sp, #24]
10007760:	9105      	str	r1, [sp, #20]
10007762:	4902      	ldr	r1, [pc, #8]	; (1000776c <mbedtls_internal_sha256_process+0x3fc>)
10007764:	9102      	str	r1, [sp, #8]
10007766:	2110      	movs	r1, #16
10007768:	910a      	str	r1, [sp, #40]	; 0x28
1000776a:	e001      	b.n	10007770 <mbedtls_internal_sha256_process+0x400>
1000776c:	1000ef28 	.word	0x1000ef28
10007770:	6821      	ldr	r1, [r4, #0]
10007772:	6a60      	ldr	r0, [r4, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
10007774:	6ba5      	ldr	r5, [r4, #56]	; 0x38
10007776:	180f      	adds	r7, r1, r0
10007778:	2113      	movs	r1, #19
1000777a:	2011      	movs	r0, #17
1000777c:	41cd      	rors	r5, r1
1000777e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
10007780:	2607      	movs	r6, #7
10007782:	41c1      	rors	r1, r0
10007784:	6ba0      	ldr	r0, [r4, #56]	; 0x38
10007786:	4069      	eors	r1, r5
10007788:	0a85      	lsrs	r5, r0, #10
1000778a:	2012      	movs	r0, #18
1000778c:	4069      	eors	r1, r5
1000778e:	6865      	ldr	r5, [r4, #4]
10007790:	1879      	adds	r1, r7, r1
10007792:	41c5      	rors	r5, r0
10007794:	6860      	ldr	r0, [r4, #4]
10007796:	1c17      	adds	r7, r2, #0
10007798:	41f0      	rors	r0, r6
1000779a:	4068      	eors	r0, r5
1000779c:	6865      	ldr	r5, [r4, #4]
1000779e:	3e05      	subs	r6, #5
100077a0:	08ed      	lsrs	r5, r5, #3
100077a2:	4045      	eors	r5, r0
100077a4:	1949      	adds	r1, r1, r5
100077a6:	9109      	str	r1, [sp, #36]	; 0x24
100077a8:	210b      	movs	r1, #11
100077aa:	2506      	movs	r5, #6
100077ac:	9803      	ldr	r0, [sp, #12]
100077ae:	41c8      	rors	r0, r1
100077b0:	9903      	ldr	r1, [sp, #12]
100077b2:	41e9      	rors	r1, r5
100077b4:	4048      	eors	r0, r1
100077b6:	9903      	ldr	r1, [sp, #12]
100077b8:	3513      	adds	r5, #19
100077ba:	41e9      	rors	r1, r5
100077bc:	9d05      	ldr	r5, [sp, #20]
100077be:	4048      	eors	r0, r1
100077c0:	9906      	ldr	r1, [sp, #24]
100077c2:	4069      	eors	r1, r5
100077c4:	9d03      	ldr	r5, [sp, #12]
100077c6:	4029      	ands	r1, r5
100077c8:	9d06      	ldr	r5, [sp, #24]
100077ca:	4069      	eors	r1, r5
100077cc:	1845      	adds	r5, r0, r1
100077ce:	9902      	ldr	r1, [sp, #8]
100077d0:	1c18      	adds	r0, r3, #0
100077d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
100077d4:	4310      	orrs	r0, r2
100077d6:	186d      	adds	r5, r5, r1
100077d8:	9909      	ldr	r1, [sp, #36]	; 0x24
100077da:	6421      	str	r1, [r4, #64]	; 0x40
100077dc:	186d      	adds	r5, r5, r1
100077de:	9904      	ldr	r1, [sp, #16]
100077e0:	186d      	adds	r5, r5, r1
100077e2:	9900      	ldr	r1, [sp, #0]
100077e4:	468c      	mov	ip, r1
100077e6:	44ac      	add	ip, r5
100077e8:	4661      	mov	r1, ip
100077ea:	9104      	str	r1, [sp, #16]
100077ec:	9901      	ldr	r1, [sp, #4]
100077ee:	4008      	ands	r0, r1
100077f0:	1c11      	adds	r1, r2, #0
100077f2:	4019      	ands	r1, r3
100077f4:	4308      	orrs	r0, r1
100077f6:	210d      	movs	r1, #13
100077f8:	41cf      	rors	r7, r1
100077fa:	1c11      	adds	r1, r2, #0
100077fc:	41f1      	rors	r1, r6
100077fe:	404f      	eors	r7, r1
10007800:	1c11      	adds	r1, r2, #0
10007802:	3614      	adds	r6, #20
10007804:	41f1      	rors	r1, r6
10007806:	4079      	eors	r1, r7
10007808:	1841      	adds	r1, r0, r1
1000780a:	1949      	adds	r1, r1, r5
1000780c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1000780e:	9100      	str	r1, [sp, #0]
10007810:	6861      	ldr	r1, [r4, #4]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
10007812:	6be5      	ldr	r5, [r4, #60]	; 0x3c
10007814:	1809      	adds	r1, r1, r0
10007816:	2013      	movs	r0, #19
10007818:	41c5      	rors	r5, r0
1000781a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1000781c:	3e05      	subs	r6, #5
1000781e:	41f0      	rors	r0, r6
10007820:	4068      	eors	r0, r5
10007822:	6be5      	ldr	r5, [r4, #60]	; 0x3c
10007824:	68a7      	ldr	r7, [r4, #8]
10007826:	0aad      	lsrs	r5, r5, #10
10007828:	4068      	eors	r0, r5
1000782a:	1808      	adds	r0, r1, r0
1000782c:	2112      	movs	r1, #18
1000782e:	2507      	movs	r5, #7
10007830:	41cf      	rors	r7, r1
10007832:	68a1      	ldr	r1, [r4, #8]
10007834:	3e0b      	subs	r6, #11
10007836:	41e9      	rors	r1, r5
10007838:	404f      	eors	r7, r1
1000783a:	68a1      	ldr	r1, [r4, #8]
1000783c:	08c9      	lsrs	r1, r1, #3
1000783e:	404f      	eors	r7, r1
10007840:	19c7      	adds	r7, r0, r7
10007842:	9906      	ldr	r1, [sp, #24]
10007844:	9802      	ldr	r0, [sp, #8]
10007846:	9d03      	ldr	r5, [sp, #12]
10007848:	6c40      	ldr	r0, [r0, #68]	; 0x44
1000784a:	6467      	str	r7, [r4, #68]	; 0x44
1000784c:	4684      	mov	ip, r0
1000784e:	4461      	add	r1, ip
10007850:	19c8      	adds	r0, r1, r7
10007852:	9905      	ldr	r1, [sp, #20]
10007854:	4069      	eors	r1, r5
10007856:	9d04      	ldr	r5, [sp, #16]
10007858:	4029      	ands	r1, r5
1000785a:	9d05      	ldr	r5, [sp, #20]
1000785c:	4069      	eors	r1, r5
1000785e:	1841      	adds	r1, r0, r1
10007860:	200b      	movs	r0, #11
10007862:	9d04      	ldr	r5, [sp, #16]
10007864:	41c5      	rors	r5, r0
10007866:	9804      	ldr	r0, [sp, #16]
10007868:	41f0      	rors	r0, r6
1000786a:	4045      	eors	r5, r0
1000786c:	9804      	ldr	r0, [sp, #16]
1000786e:	3613      	adds	r6, #19
10007870:	41f0      	rors	r0, r6
10007872:	4068      	eors	r0, r5
10007874:	1809      	adds	r1, r1, r0
10007876:	9801      	ldr	r0, [sp, #4]
10007878:	9d00      	ldr	r5, [sp, #0]
1000787a:	1808      	adds	r0, r1, r0
1000787c:	9006      	str	r0, [sp, #24]
1000787e:	9800      	ldr	r0, [sp, #0]
10007880:	4315      	orrs	r5, r2
10007882:	4010      	ands	r0, r2
10007884:	401d      	ands	r5, r3
10007886:	4305      	orrs	r5, r0
10007888:	9800      	ldr	r0, [sp, #0]
1000788a:	3e0c      	subs	r6, #12
1000788c:	41f0      	rors	r0, r6
1000788e:	4684      	mov	ip, r0
10007890:	9800      	ldr	r0, [sp, #0]
10007892:	3e0b      	subs	r6, #11
10007894:	41f0      	rors	r0, r6
10007896:	4666      	mov	r6, ip
10007898:	4046      	eors	r6, r0
1000789a:	46b4      	mov	ip, r6
1000789c:	2616      	movs	r6, #22
1000789e:	9800      	ldr	r0, [sp, #0]
100078a0:	41f0      	rors	r0, r6
100078a2:	4666      	mov	r6, ip
100078a4:	4070      	eors	r0, r6
100078a6:	1828      	adds	r0, r5, r0
100078a8:	1841      	adds	r1, r0, r1
100078aa:	9101      	str	r1, [sp, #4]
100078ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
100078ae:	68a1      	ldr	r1, [r4, #8]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
100078b0:	2611      	movs	r6, #17
100078b2:	180d      	adds	r5, r1, r0
100078b4:	2113      	movs	r1, #19
100078b6:	9809      	ldr	r0, [sp, #36]	; 0x24
100078b8:	41c8      	rors	r0, r1
100078ba:	9909      	ldr	r1, [sp, #36]	; 0x24
100078bc:	41f1      	rors	r1, r6
100078be:	4041      	eors	r1, r0
100078c0:	9809      	ldr	r0, [sp, #36]	; 0x24
100078c2:	3e0a      	subs	r6, #10
100078c4:	0a80      	lsrs	r0, r0, #10
100078c6:	4041      	eors	r1, r0
100078c8:	2012      	movs	r0, #18
100078ca:	1869      	adds	r1, r5, r1
100078cc:	68e5      	ldr	r5, [r4, #12]
100078ce:	41c5      	rors	r5, r0
100078d0:	68e0      	ldr	r0, [r4, #12]
100078d2:	41f0      	rors	r0, r6
100078d4:	4045      	eors	r5, r0
100078d6:	68e0      	ldr	r0, [r4, #12]
100078d8:	9e04      	ldr	r6, [sp, #16]
100078da:	08c0      	lsrs	r0, r0, #3
100078dc:	4045      	eors	r5, r0
100078de:	9802      	ldr	r0, [sp, #8]
100078e0:	194d      	adds	r5, r1, r5
100078e2:	6c80      	ldr	r0, [r0, #72]	; 0x48
100078e4:	9905      	ldr	r1, [sp, #20]
100078e6:	4684      	mov	ip, r0
100078e8:	4461      	add	r1, ip
100078ea:	1948      	adds	r0, r1, r5
100078ec:	9903      	ldr	r1, [sp, #12]
100078ee:	4071      	eors	r1, r6
100078f0:	9e06      	ldr	r6, [sp, #24]
100078f2:	4031      	ands	r1, r6
100078f4:	9e03      	ldr	r6, [sp, #12]
100078f6:	64a5      	str	r5, [r4, #72]	; 0x48
100078f8:	4071      	eors	r1, r6
100078fa:	260b      	movs	r6, #11
100078fc:	1841      	adds	r1, r0, r1
100078fe:	9806      	ldr	r0, [sp, #24]
10007900:	41f0      	rors	r0, r6
10007902:	4684      	mov	ip, r0
10007904:	9806      	ldr	r0, [sp, #24]
10007906:	3e05      	subs	r6, #5
10007908:	41f0      	rors	r0, r6
1000790a:	4666      	mov	r6, ip
1000790c:	4046      	eors	r6, r0
1000790e:	46b4      	mov	ip, r6
10007910:	2619      	movs	r6, #25
10007912:	9806      	ldr	r0, [sp, #24]
10007914:	41f0      	rors	r0, r6
10007916:	4666      	mov	r6, ip
10007918:	4070      	eors	r0, r6
1000791a:	1809      	adds	r1, r1, r0
1000791c:	18cb      	adds	r3, r1, r3
1000791e:	9307      	str	r3, [sp, #28]
10007920:	9800      	ldr	r0, [sp, #0]
10007922:	9b01      	ldr	r3, [sp, #4]
10007924:	9e01      	ldr	r6, [sp, #4]
10007926:	4318      	orrs	r0, r3
10007928:	9b00      	ldr	r3, [sp, #0]
1000792a:	4010      	ands	r0, r2
1000792c:	4033      	ands	r3, r6
1000792e:	4318      	orrs	r0, r3
10007930:	1c33      	adds	r3, r6, #0
10007932:	260d      	movs	r6, #13
10007934:	41f3      	rors	r3, r6
10007936:	469c      	mov	ip, r3
10007938:	9b01      	ldr	r3, [sp, #4]
1000793a:	3e0b      	subs	r6, #11
1000793c:	41f3      	rors	r3, r6
1000793e:	4666      	mov	r6, ip
10007940:	405e      	eors	r6, r3
10007942:	46b4      	mov	ip, r6
10007944:	2616      	movs	r6, #22
10007946:	9b01      	ldr	r3, [sp, #4]
10007948:	41f3      	rors	r3, r6
1000794a:	4666      	mov	r6, ip
1000794c:	4073      	eors	r3, r6
1000794e:	18c3      	adds	r3, r0, r3
10007950:	185b      	adds	r3, r3, r1
10007952:	9305      	str	r3, [sp, #20]
10007954:	6b21      	ldr	r1, [r4, #48]	; 0x30
10007956:	68e3      	ldr	r3, [r4, #12]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
10007958:	1c38      	adds	r0, r7, #0
1000795a:	185b      	adds	r3, r3, r1
1000795c:	2113      	movs	r1, #19
1000795e:	2611      	movs	r6, #17
10007960:	41c8      	rors	r0, r1
10007962:	1c39      	adds	r1, r7, #0
10007964:	41f1      	rors	r1, r6
10007966:	0abf      	lsrs	r7, r7, #10
10007968:	4041      	eors	r1, r0
1000796a:	4079      	eors	r1, r7
1000796c:	185b      	adds	r3, r3, r1
1000796e:	2112      	movs	r1, #18
10007970:	6920      	ldr	r0, [r4, #16]
10007972:	3e0a      	subs	r6, #10
10007974:	41c8      	rors	r0, r1
10007976:	6921      	ldr	r1, [r4, #16]
10007978:	9f07      	ldr	r7, [sp, #28]
1000797a:	41f1      	rors	r1, r6
1000797c:	4041      	eors	r1, r0
1000797e:	6920      	ldr	r0, [r4, #16]
10007980:	08c0      	lsrs	r0, r0, #3
10007982:	4041      	eors	r1, r0
10007984:	9802      	ldr	r0, [sp, #8]
10007986:	1859      	adds	r1, r3, r1
10007988:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
1000798a:	9b03      	ldr	r3, [sp, #12]
1000798c:	46b4      	mov	ip, r6
1000798e:	4463      	add	r3, ip
10007990:	1858      	adds	r0, r3, r1
10007992:	9e06      	ldr	r6, [sp, #24]
10007994:	9b04      	ldr	r3, [sp, #16]
10007996:	64e1      	str	r1, [r4, #76]	; 0x4c
10007998:	4073      	eors	r3, r6
1000799a:	9e07      	ldr	r6, [sp, #28]
1000799c:	4033      	ands	r3, r6
1000799e:	9e04      	ldr	r6, [sp, #16]
100079a0:	4073      	eors	r3, r6
100079a2:	18c3      	adds	r3, r0, r3
100079a4:	200b      	movs	r0, #11
100079a6:	2606      	movs	r6, #6
100079a8:	41c7      	rors	r7, r0
100079aa:	9807      	ldr	r0, [sp, #28]
100079ac:	41f0      	rors	r0, r6
100079ae:	4047      	eors	r7, r0
100079b0:	9807      	ldr	r0, [sp, #28]
100079b2:	3613      	adds	r6, #19
100079b4:	41f0      	rors	r0, r6
100079b6:	4078      	eors	r0, r7
100079b8:	181b      	adds	r3, r3, r0
100079ba:	189a      	adds	r2, r3, r2
100079bc:	9208      	str	r2, [sp, #32]
100079be:	9f01      	ldr	r7, [sp, #4]
100079c0:	9a05      	ldr	r2, [sp, #20]
100079c2:	3e17      	subs	r6, #23
100079c4:	4317      	orrs	r7, r2
100079c6:	9a00      	ldr	r2, [sp, #0]
100079c8:	4017      	ands	r7, r2
100079ca:	9a01      	ldr	r2, [sp, #4]
100079cc:	9805      	ldr	r0, [sp, #20]
100079ce:	4002      	ands	r2, r0
100079d0:	4317      	orrs	r7, r2
100079d2:	220d      	movs	r2, #13
100079d4:	41d0      	rors	r0, r2
100079d6:	9a05      	ldr	r2, [sp, #20]
100079d8:	41f2      	rors	r2, r6
100079da:	4050      	eors	r0, r2
100079dc:	9a05      	ldr	r2, [sp, #20]
100079de:	3614      	adds	r6, #20
100079e0:	41f2      	rors	r2, r6
100079e2:	4042      	eors	r2, r0
100079e4:	18ba      	adds	r2, r7, r2
100079e6:	18d3      	adds	r3, r2, r3
100079e8:	9303      	str	r3, [sp, #12]
100079ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
100079ec:	6923      	ldr	r3, [r4, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
100079ee:	1c28      	adds	r0, r5, #0
100079f0:	189b      	adds	r3, r3, r2
100079f2:	2213      	movs	r2, #19
100079f4:	41d0      	rors	r0, r2
100079f6:	1c2a      	adds	r2, r5, #0
100079f8:	3e05      	subs	r6, #5
100079fa:	41f2      	rors	r2, r6
100079fc:	0aad      	lsrs	r5, r5, #10
100079fe:	4042      	eors	r2, r0
10007a00:	406a      	eors	r2, r5
10007a02:	189b      	adds	r3, r3, r2
10007a04:	2212      	movs	r2, #18
10007a06:	2507      	movs	r5, #7
10007a08:	6960      	ldr	r0, [r4, #20]
10007a0a:	9f06      	ldr	r7, [sp, #24]
10007a0c:	41d0      	rors	r0, r2
10007a0e:	6962      	ldr	r2, [r4, #20]
10007a10:	3e0f      	subs	r6, #15
10007a12:	41ea      	rors	r2, r5
10007a14:	4050      	eors	r0, r2
10007a16:	6962      	ldr	r2, [r4, #20]
10007a18:	08d2      	lsrs	r2, r2, #3
10007a1a:	4050      	eors	r0, r2
10007a1c:	1818      	adds	r0, r3, r0
10007a1e:	9b02      	ldr	r3, [sp, #8]
10007a20:	6520      	str	r0, [r4, #80]	; 0x50
10007a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10007a24:	18c5      	adds	r5, r0, r3
10007a26:	9b04      	ldr	r3, [sp, #16]
10007a28:	18ea      	adds	r2, r5, r3
10007a2a:	9b07      	ldr	r3, [sp, #28]
10007a2c:	405f      	eors	r7, r3
10007a2e:	9b08      	ldr	r3, [sp, #32]
10007a30:	401f      	ands	r7, r3
10007a32:	9b06      	ldr	r3, [sp, #24]
10007a34:	405f      	eors	r7, r3
10007a36:	230b      	movs	r3, #11
10007a38:	19d5      	adds	r5, r2, r7
10007a3a:	2206      	movs	r2, #6
10007a3c:	9f08      	ldr	r7, [sp, #32]
10007a3e:	41df      	rors	r7, r3
10007a40:	9b08      	ldr	r3, [sp, #32]
10007a42:	41d3      	rors	r3, r2
10007a44:	405f      	eors	r7, r3
10007a46:	9b08      	ldr	r3, [sp, #32]
10007a48:	3213      	adds	r2, #19
10007a4a:	41d3      	rors	r3, r2
10007a4c:	405f      	eors	r7, r3
10007a4e:	9b00      	ldr	r3, [sp, #0]
10007a50:	19ef      	adds	r7, r5, r7
10007a52:	18fb      	adds	r3, r7, r3
10007a54:	9a03      	ldr	r2, [sp, #12]
10007a56:	9304      	str	r3, [sp, #16]
10007a58:	9b05      	ldr	r3, [sp, #20]
10007a5a:	9d03      	ldr	r5, [sp, #12]
10007a5c:	4313      	orrs	r3, r2
10007a5e:	9a01      	ldr	r2, [sp, #4]
10007a60:	4013      	ands	r3, r2
10007a62:	9a05      	ldr	r2, [sp, #20]
10007a64:	402a      	ands	r2, r5
10007a66:	4313      	orrs	r3, r2
10007a68:	220d      	movs	r2, #13
10007a6a:	41d5      	rors	r5, r2
10007a6c:	9a03      	ldr	r2, [sp, #12]
10007a6e:	41f2      	rors	r2, r6
10007a70:	406a      	eors	r2, r5
10007a72:	9d03      	ldr	r5, [sp, #12]
10007a74:	3614      	adds	r6, #20
10007a76:	41f5      	rors	r5, r6
10007a78:	4055      	eors	r5, r2
10007a7a:	195a      	adds	r2, r3, r5
10007a7c:	19d3      	adds	r3, r2, r7
10007a7e:	9300      	str	r3, [sp, #0]
10007a80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
10007a82:	6963      	ldr	r3, [r4, #20]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
10007a84:	1c0d      	adds	r5, r1, #0
10007a86:	189b      	adds	r3, r3, r2
10007a88:	2213      	movs	r2, #19
10007a8a:	41d5      	rors	r5, r2
10007a8c:	1c0a      	adds	r2, r1, #0
10007a8e:	3e05      	subs	r6, #5
10007a90:	41f2      	rors	r2, r6
10007a92:	0a89      	lsrs	r1, r1, #10
10007a94:	406a      	eors	r2, r5
10007a96:	404a      	eors	r2, r1
10007a98:	189b      	adds	r3, r3, r2
10007a9a:	2212      	movs	r2, #18
10007a9c:	2507      	movs	r5, #7
10007a9e:	69a1      	ldr	r1, [r4, #24]
10007aa0:	9f04      	ldr	r7, [sp, #16]
10007aa2:	41d1      	rors	r1, r2
10007aa4:	69a2      	ldr	r2, [r4, #24]
10007aa6:	3e0f      	subs	r6, #15
10007aa8:	41ea      	rors	r2, r5
10007aaa:	404a      	eors	r2, r1
10007aac:	69a1      	ldr	r1, [r4, #24]
10007aae:	08c9      	lsrs	r1, r1, #3
10007ab0:	404a      	eors	r2, r1
10007ab2:	189a      	adds	r2, r3, r2
10007ab4:	9b02      	ldr	r3, [sp, #8]
10007ab6:	6562      	str	r2, [r4, #84]	; 0x54
10007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10007aba:	18d5      	adds	r5, r2, r3
10007abc:	9b06      	ldr	r3, [sp, #24]
10007abe:	18e9      	adds	r1, r5, r3
10007ac0:	9d08      	ldr	r5, [sp, #32]
10007ac2:	9b07      	ldr	r3, [sp, #28]
10007ac4:	406b      	eors	r3, r5
10007ac6:	9d04      	ldr	r5, [sp, #16]
10007ac8:	402b      	ands	r3, r5
10007aca:	9d07      	ldr	r5, [sp, #28]
10007acc:	406b      	eors	r3, r5
10007ace:	18cd      	adds	r5, r1, r3
10007ad0:	230b      	movs	r3, #11
10007ad2:	2106      	movs	r1, #6
10007ad4:	41df      	rors	r7, r3
10007ad6:	9b04      	ldr	r3, [sp, #16]
10007ad8:	41cb      	rors	r3, r1
10007ada:	407b      	eors	r3, r7
10007adc:	9f04      	ldr	r7, [sp, #16]
10007ade:	3113      	adds	r1, #19
10007ae0:	41cf      	rors	r7, r1
10007ae2:	9901      	ldr	r1, [sp, #4]
10007ae4:	407b      	eors	r3, r7
10007ae6:	18eb      	adds	r3, r5, r3
10007ae8:	1859      	adds	r1, r3, r1
10007aea:	9106      	str	r1, [sp, #24]
10007aec:	9f03      	ldr	r7, [sp, #12]
10007aee:	9900      	ldr	r1, [sp, #0]
10007af0:	9d00      	ldr	r5, [sp, #0]
10007af2:	430f      	orrs	r7, r1
10007af4:	9905      	ldr	r1, [sp, #20]
10007af6:	400f      	ands	r7, r1
10007af8:	9903      	ldr	r1, [sp, #12]
10007afa:	4029      	ands	r1, r5
10007afc:	430f      	orrs	r7, r1
10007afe:	210d      	movs	r1, #13
10007b00:	41cd      	rors	r5, r1
10007b02:	9900      	ldr	r1, [sp, #0]
10007b04:	41f1      	rors	r1, r6
10007b06:	4069      	eors	r1, r5
10007b08:	9d00      	ldr	r5, [sp, #0]
10007b0a:	3614      	adds	r6, #20
10007b0c:	41f5      	rors	r5, r6
10007b0e:	404d      	eors	r5, r1
10007b10:	1979      	adds	r1, r7, r5
10007b12:	18cb      	adds	r3, r1, r3
10007b14:	9301      	str	r3, [sp, #4]
10007b16:	6be1      	ldr	r1, [r4, #60]	; 0x3c
10007b18:	69a3      	ldr	r3, [r4, #24]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
10007b1a:	1c05      	adds	r5, r0, #0
10007b1c:	185b      	adds	r3, r3, r1
10007b1e:	2113      	movs	r1, #19
10007b20:	41cd      	rors	r5, r1
10007b22:	1c01      	adds	r1, r0, #0
10007b24:	3e05      	subs	r6, #5
10007b26:	41f1      	rors	r1, r6
10007b28:	0a80      	lsrs	r0, r0, #10
10007b2a:	4069      	eors	r1, r5
10007b2c:	4041      	eors	r1, r0
10007b2e:	185b      	adds	r3, r3, r1
10007b30:	2112      	movs	r1, #18
10007b32:	2507      	movs	r5, #7
10007b34:	69e0      	ldr	r0, [r4, #28]
10007b36:	3e0f      	subs	r6, #15
10007b38:	41c8      	rors	r0, r1
10007b3a:	69e1      	ldr	r1, [r4, #28]
10007b3c:	41e9      	rors	r1, r5
10007b3e:	4048      	eors	r0, r1
10007b40:	69e1      	ldr	r1, [r4, #28]
10007b42:	08c9      	lsrs	r1, r1, #3
10007b44:	4048      	eors	r0, r1
10007b46:	1818      	adds	r0, r3, r0
10007b48:	9b02      	ldr	r3, [sp, #8]
10007b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10007b4c:	18c7      	adds	r7, r0, r3
10007b4e:	9b07      	ldr	r3, [sp, #28]
10007b50:	18fd      	adds	r5, r7, r3
10007b52:	9f08      	ldr	r7, [sp, #32]
10007b54:	9b04      	ldr	r3, [sp, #16]
10007b56:	65a0      	str	r0, [r4, #88]	; 0x58
10007b58:	405f      	eors	r7, r3
10007b5a:	9b06      	ldr	r3, [sp, #24]
10007b5c:	2006      	movs	r0, #6
10007b5e:	401f      	ands	r7, r3
10007b60:	9b08      	ldr	r3, [sp, #32]
10007b62:	9906      	ldr	r1, [sp, #24]
10007b64:	405f      	eors	r7, r3
10007b66:	230b      	movs	r3, #11
10007b68:	41d9      	rors	r1, r3
10007b6a:	9b06      	ldr	r3, [sp, #24]
10007b6c:	19ef      	adds	r7, r5, r7
10007b6e:	41c3      	rors	r3, r0
10007b70:	404b      	eors	r3, r1
10007b72:	2119      	movs	r1, #25
10007b74:	9806      	ldr	r0, [sp, #24]
10007b76:	9d00      	ldr	r5, [sp, #0]
10007b78:	41c8      	rors	r0, r1
10007b7a:	4043      	eors	r3, r0
10007b7c:	18f9      	adds	r1, r7, r3
10007b7e:	9b05      	ldr	r3, [sp, #20]
10007b80:	9801      	ldr	r0, [sp, #4]
10007b82:	18cb      	adds	r3, r1, r3
10007b84:	9305      	str	r3, [sp, #20]
10007b86:	9b01      	ldr	r3, [sp, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
10007b88:	1c17      	adds	r7, r2, #0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
10007b8a:	431d      	orrs	r5, r3
10007b8c:	9b03      	ldr	r3, [sp, #12]
10007b8e:	401d      	ands	r5, r3
10007b90:	9b00      	ldr	r3, [sp, #0]
10007b92:	4003      	ands	r3, r0
10007b94:	431d      	orrs	r5, r3
10007b96:	230d      	movs	r3, #13
10007b98:	41d8      	rors	r0, r3
10007b9a:	9b01      	ldr	r3, [sp, #4]
10007b9c:	41f3      	rors	r3, r6
10007b9e:	4043      	eors	r3, r0
10007ba0:	9801      	ldr	r0, [sp, #4]
10007ba2:	3614      	adds	r6, #20
10007ba4:	41f0      	rors	r0, r6
10007ba6:	4058      	eors	r0, r3
10007ba8:	182b      	adds	r3, r5, r0
10007baa:	69e5      	ldr	r5, [r4, #28]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
10007bac:	3e05      	subs	r6, #5
10007bae:	46ac      	mov	ip, r5
10007bb0:	2513      	movs	r5, #19
10007bb2:	41ef      	rors	r7, r5
10007bb4:	1c15      	adds	r5, r2, #0
10007bb6:	41f5      	rors	r5, r6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
10007bb8:	185b      	adds	r3, r3, r1
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
10007bba:	6a21      	ldr	r1, [r4, #32]
10007bbc:	407d      	eors	r5, r7
10007bbe:	0a92      	lsrs	r2, r2, #10
10007bc0:	4055      	eors	r5, r2
10007bc2:	1c0f      	adds	r7, r1, #0
10007bc4:	2212      	movs	r2, #18
10007bc6:	9809      	ldr	r0, [sp, #36]	; 0x24
10007bc8:	41d7      	rors	r7, r2
10007bca:	4460      	add	r0, ip
10007bcc:	1940      	adds	r0, r0, r5
10007bce:	1c0a      	adds	r2, r1, #0
10007bd0:	2507      	movs	r5, #7
10007bd2:	41ea      	rors	r2, r5
10007bd4:	08c9      	lsrs	r1, r1, #3
10007bd6:	407a      	eors	r2, r7
10007bd8:	404a      	eors	r2, r1
10007bda:	1880      	adds	r0, r0, r2
10007bdc:	9a02      	ldr	r2, [sp, #8]
10007bde:	9904      	ldr	r1, [sp, #16]
10007be0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
10007be2:	65e0      	str	r0, [r4, #92]	; 0x5c
10007be4:	1885      	adds	r5, r0, r2
10007be6:	9a08      	ldr	r2, [sp, #32]
10007be8:	2006      	movs	r0, #6
10007bea:	18af      	adds	r7, r5, r2
10007bec:	9a06      	ldr	r2, [sp, #24]
10007bee:	3e0f      	subs	r6, #15
10007bf0:	4051      	eors	r1, r2
10007bf2:	9a05      	ldr	r2, [sp, #20]
10007bf4:	3420      	adds	r4, #32
10007bf6:	4011      	ands	r1, r2
10007bf8:	9a04      	ldr	r2, [sp, #16]
10007bfa:	4051      	eors	r1, r2
10007bfc:	220b      	movs	r2, #11
10007bfe:	187d      	adds	r5, r7, r1
10007c00:	9905      	ldr	r1, [sp, #20]
10007c02:	41d1      	rors	r1, r2
10007c04:	9a05      	ldr	r2, [sp, #20]
10007c06:	41c2      	rors	r2, r0
10007c08:	404a      	eors	r2, r1
10007c0a:	2119      	movs	r1, #25
10007c0c:	9805      	ldr	r0, [sp, #20]
10007c0e:	41c8      	rors	r0, r1
10007c10:	4042      	eors	r2, r0
10007c12:	18a9      	adds	r1, r5, r2
10007c14:	9a03      	ldr	r2, [sp, #12]
10007c16:	9d01      	ldr	r5, [sp, #4]
10007c18:	188a      	adds	r2, r1, r2
10007c1a:	9203      	str	r2, [sp, #12]
10007c1c:	9a00      	ldr	r2, [sp, #0]
10007c1e:	431d      	orrs	r5, r3
10007c20:	4015      	ands	r5, r2
10007c22:	9a01      	ldr	r2, [sp, #4]
10007c24:	1c18      	adds	r0, r3, #0
10007c26:	401a      	ands	r2, r3
10007c28:	4315      	orrs	r5, r2
10007c2a:	220d      	movs	r2, #13
10007c2c:	41d0      	rors	r0, r2
10007c2e:	1c1a      	adds	r2, r3, #0
10007c30:	41f2      	rors	r2, r6
10007c32:	4042      	eors	r2, r0
10007c34:	1c18      	adds	r0, r3, #0
10007c36:	3614      	adds	r6, #20
10007c38:	41f0      	rors	r0, r6
10007c3a:	4050      	eors	r0, r2
10007c3c:	182a      	adds	r2, r5, r0
10007c3e:	1852      	adds	r2, r2, r1
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
10007c40:	990a      	ldr	r1, [sp, #40]	; 0x28
10007c42:	3108      	adds	r1, #8
10007c44:	910a      	str	r1, [sp, #40]	; 0x28
10007c46:	9902      	ldr	r1, [sp, #8]
10007c48:	3120      	adds	r1, #32
10007c4a:	9102      	str	r1, [sp, #8]
10007c4c:	990a      	ldr	r1, [sp, #40]	; 0x28
10007c4e:	2940      	cmp	r1, #64	; 0x40
10007c50:	d000      	beq.n	10007c54 <mbedtls_internal_sha256_process+0x8e4>
10007c52:	e58d      	b.n	10007770 <mbedtls_internal_sha256_process+0x400>
10007c54:	930d      	str	r3, [sp, #52]	; 0x34
10007c56:	9b01      	ldr	r3, [sp, #4]
10007c58:	9904      	ldr	r1, [sp, #16]
10007c5a:	930e      	str	r3, [sp, #56]	; 0x38
10007c5c:	9b00      	ldr	r3, [sp, #0]
10007c5e:	9113      	str	r1, [sp, #76]	; 0x4c
10007c60:	930f      	str	r3, [sp, #60]	; 0x3c
10007c62:	2300      	movs	r3, #0
10007c64:	9903      	ldr	r1, [sp, #12]
10007c66:	920c      	str	r2, [sp, #48]	; 0x30
10007c68:	9110      	str	r1, [sp, #64]	; 0x40
10007c6a:	9905      	ldr	r1, [sp, #20]
10007c6c:	9111      	str	r1, [sp, #68]	; 0x44
10007c6e:	9906      	ldr	r1, [sp, #24]
10007c70:	9112      	str	r1, [sp, #72]	; 0x48
10007c72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10007c74:	18d1      	adds	r1, r2, r3
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
10007c76:	6888      	ldr	r0, [r1, #8]
10007c78:	aa0c      	add	r2, sp, #48	; 0x30
10007c7a:	4684      	mov	ip, r0
10007c7c:	58d2      	ldr	r2, [r2, r3]
10007c7e:	3304      	adds	r3, #4
10007c80:	9200      	str	r2, [sp, #0]
10007c82:	4462      	add	r2, ip
10007c84:	608a      	str	r2, [r1, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
10007c86:	2b20      	cmp	r3, #32
10007c88:	d1f3      	bne.n	10007c72 <mbedtls_internal_sha256_process+0x902>
        ctx->state[i] += A[i];

    return( 0 );
}
10007c8a:	2000      	movs	r0, #0
10007c8c:	b055      	add	sp, #340	; 0x154
10007c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10007c90 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
10007c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10007c92:	1c04      	adds	r4, r0, #0
10007c94:	9101      	str	r1, [sp, #4]
10007c96:	1e15      	subs	r5, r2, #0
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
10007c98:	d038      	beq.n	10007d0c <mbedtls_sha256_update_ret+0x7c>
        return( 0 );

    left = ctx->total[0] & 0x3F;
10007c9a:	6803      	ldr	r3, [r0, #0]
10007c9c:	203f      	movs	r0, #63	; 0x3f
10007c9e:	4018      	ands	r0, r3
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
10007ca0:	18d3      	adds	r3, r2, r3
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
10007ca2:	1c07      	adds	r7, r0, #0
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
10007ca4:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
10007ca6:	4293      	cmp	r3, r2
10007ca8:	d202      	bcs.n	10007cb0 <mbedtls_sha256_update_ret+0x20>
        ctx->total[1]++;
10007caa:	6863      	ldr	r3, [r4, #4]
10007cac:	3301      	adds	r3, #1
10007cae:	6063      	str	r3, [r4, #4]

    if( left && ilen >= fill )
10007cb0:	2f00      	cmp	r7, #0
10007cb2:	d016      	beq.n	10007ce2 <mbedtls_sha256_update_ret+0x52>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
10007cb4:	2640      	movs	r6, #64	; 0x40
10007cb6:	1bf6      	subs	r6, r6, r7
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
10007cb8:	42b5      	cmp	r5, r6
10007cba:	d312      	bcc.n	10007ce2 <mbedtls_sha256_update_ret+0x52>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
10007cbc:	1c38      	adds	r0, r7, #0
10007cbe:	3028      	adds	r0, #40	; 0x28
10007cc0:	9901      	ldr	r1, [sp, #4]
10007cc2:	1c32      	adds	r2, r6, #0
10007cc4:	1820      	adds	r0, r4, r0
10007cc6:	f004 fab2 	bl	1000c22e <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
10007cca:	1c21      	adds	r1, r4, #0
10007ccc:	1c20      	adds	r0, r4, #0
10007cce:	3128      	adds	r1, #40	; 0x28
10007cd0:	f7ff fb4e 	bl	10007370 <mbedtls_internal_sha256_process>
10007cd4:	1e03      	subs	r3, r0, #0
10007cd6:	d11a      	bne.n	10007d0e <mbedtls_sha256_update_ret+0x7e>
            return( ret );

        input += fill;
        ilen  -= fill;
        left = 0;
10007cd8:	1c1f      	adds	r7, r3, #0
        memcpy( (void *) (ctx->buffer + left), input, fill );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        input += fill;
10007cda:	9a01      	ldr	r2, [sp, #4]
        ilen  -= fill;
10007cdc:	1bad      	subs	r5, r5, r6
        memcpy( (void *) (ctx->buffer + left), input, fill );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        input += fill;
10007cde:	1992      	adds	r2, r2, r6
10007ce0:	9201      	str	r2, [sp, #4]
        ilen  -= fill;
        left = 0;
10007ce2:	1c2e      	adds	r6, r5, #0
10007ce4:	9b01      	ldr	r3, [sp, #4]
10007ce6:	1ba9      	subs	r1, r5, r6
10007ce8:	1859      	adds	r1, r3, r1
    }

    while( ilen >= 64 )
10007cea:	2e3f      	cmp	r6, #63	; 0x3f
10007cec:	d906      	bls.n	10007cfc <mbedtls_sha256_update_ret+0x6c>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
10007cee:	1c20      	adds	r0, r4, #0
10007cf0:	f7ff fb3e 	bl	10007370 <mbedtls_internal_sha256_process>
10007cf4:	2800      	cmp	r0, #0
10007cf6:	d10a      	bne.n	10007d0e <mbedtls_sha256_update_ret+0x7e>
            return( ret );

        input += 64;
        ilen  -= 64;
10007cf8:	3e40      	subs	r6, #64	; 0x40
10007cfa:	e7f3      	b.n	10007ce4 <mbedtls_sha256_update_ret+0x54>
    }

    if( ilen > 0 )
10007cfc:	2e00      	cmp	r6, #0
10007cfe:	d005      	beq.n	10007d0c <mbedtls_sha256_update_ret+0x7c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
10007d00:	1c38      	adds	r0, r7, #0
10007d02:	3028      	adds	r0, #40	; 0x28
10007d04:	1820      	adds	r0, r4, r0
10007d06:	1c32      	adds	r2, r6, #0
10007d08:	f004 fa91 	bl	1000c22e <memcpy>

    return( 0 );
10007d0c:	2000      	movs	r0, #0
}
10007d0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10007d10 <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
10007d10:	223f      	movs	r2, #63	; 0x3f
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
10007d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
10007d14:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
10007d16:	1c04      	adds	r4, r0, #0
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
10007d18:	4013      	ands	r3, r2
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
10007d1a:	1c0d      	adds	r5, r1, #0
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
10007d1c:	18c1      	adds	r1, r0, r3
10007d1e:	2080      	movs	r0, #128	; 0x80
10007d20:	3128      	adds	r1, #40	; 0x28
10007d22:	7008      	strb	r0, [r1, #0]
10007d24:	1c26      	adds	r6, r4, #0
10007d26:	1c18      	adds	r0, r3, #0
10007d28:	1c5f      	adds	r7, r3, #1
10007d2a:	3029      	adds	r0, #41	; 0x29
10007d2c:	3628      	adds	r6, #40	; 0x28

    if( used <= 56 )
10007d2e:	2f38      	cmp	r7, #56	; 0x38
10007d30:	d804      	bhi.n	10007d3c <mbedtls_sha256_finish_ret+0x2c>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
10007d32:	3a08      	subs	r2, #8
10007d34:	1ad2      	subs	r2, r2, r3
10007d36:	1820      	adds	r0, r4, r0
10007d38:	2100      	movs	r1, #0
10007d3a:	e00c      	b.n	10007d56 <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
10007d3c:	1ad2      	subs	r2, r2, r3
10007d3e:	2100      	movs	r1, #0
10007d40:	1820      	adds	r0, r4, r0
10007d42:	f004 fa7d 	bl	1000c240 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
10007d46:	1c31      	adds	r1, r6, #0
10007d48:	1c20      	adds	r0, r4, #0
10007d4a:	f7ff fb11 	bl	10007370 <mbedtls_internal_sha256_process>
10007d4e:	1e01      	subs	r1, r0, #0
10007d50:	d17e      	bne.n	10007e50 <mbedtls_sha256_finish_ret+0x140>
            return( ret );

        memset( ctx->buffer, 0, 56 );
10007d52:	1c30      	adds	r0, r6, #0
10007d54:	2238      	movs	r2, #56	; 0x38
10007d56:	f004 fa73 	bl	1000c240 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
10007d5a:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
10007d5c:	6862      	ldr	r2, [r4, #4]
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
10007d5e:	0f59      	lsrs	r1, r3, #29
         | ( ctx->total[1] <<  3 );
10007d60:	00d2      	lsls	r2, r2, #3
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
10007d62:	430a      	orrs	r2, r1
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
10007d64:	1c21      	adds	r1, r4, #0
10007d66:	0e10      	lsrs	r0, r2, #24
10007d68:	3160      	adds	r1, #96	; 0x60
10007d6a:	7008      	strb	r0, [r1, #0]
10007d6c:	0c10      	lsrs	r0, r2, #16
10007d6e:	7048      	strb	r0, [r1, #1]
10007d70:	70ca      	strb	r2, [r1, #3]
10007d72:	0a10      	lsrs	r0, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
10007d74:	1c22      	adds	r2, r4, #0
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
10007d76:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
10007d78:	7088      	strb	r0, [r1, #2]
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
10007d7a:	3264      	adds	r2, #100	; 0x64
10007d7c:	0e19      	lsrs	r1, r3, #24
10007d7e:	7011      	strb	r1, [r2, #0]
10007d80:	0c19      	lsrs	r1, r3, #16
10007d82:	7051      	strb	r1, [r2, #1]
10007d84:	0a19      	lsrs	r1, r3, #8
10007d86:	7091      	strb	r1, [r2, #2]
10007d88:	70d3      	strb	r3, [r2, #3]

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
10007d8a:	1c20      	adds	r0, r4, #0
10007d8c:	1c31      	adds	r1, r6, #0
10007d8e:	f7ff faef 	bl	10007370 <mbedtls_internal_sha256_process>
10007d92:	1e02      	subs	r2, r0, #0
10007d94:	d15c      	bne.n	10007e50 <mbedtls_sha256_finish_ret+0x140>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
10007d96:	68a3      	ldr	r3, [r4, #8]
10007d98:	0e1b      	lsrs	r3, r3, #24
10007d9a:	702b      	strb	r3, [r5, #0]
10007d9c:	68a3      	ldr	r3, [r4, #8]
10007d9e:	0c1b      	lsrs	r3, r3, #16
10007da0:	706b      	strb	r3, [r5, #1]
10007da2:	68a3      	ldr	r3, [r4, #8]
10007da4:	0a1b      	lsrs	r3, r3, #8
10007da6:	70ab      	strb	r3, [r5, #2]
10007da8:	7a23      	ldrb	r3, [r4, #8]
10007daa:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
10007dac:	68e3      	ldr	r3, [r4, #12]
10007dae:	0e1b      	lsrs	r3, r3, #24
10007db0:	712b      	strb	r3, [r5, #4]
10007db2:	68e3      	ldr	r3, [r4, #12]
10007db4:	0c1b      	lsrs	r3, r3, #16
10007db6:	716b      	strb	r3, [r5, #5]
10007db8:	68e3      	ldr	r3, [r4, #12]
10007dba:	0a1b      	lsrs	r3, r3, #8
10007dbc:	71ab      	strb	r3, [r5, #6]
10007dbe:	7b23      	ldrb	r3, [r4, #12]
10007dc0:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
10007dc2:	6923      	ldr	r3, [r4, #16]
10007dc4:	0e1b      	lsrs	r3, r3, #24
10007dc6:	722b      	strb	r3, [r5, #8]
10007dc8:	6923      	ldr	r3, [r4, #16]
10007dca:	0c1b      	lsrs	r3, r3, #16
10007dcc:	726b      	strb	r3, [r5, #9]
10007dce:	6923      	ldr	r3, [r4, #16]
10007dd0:	0a1b      	lsrs	r3, r3, #8
10007dd2:	72ab      	strb	r3, [r5, #10]
10007dd4:	7c23      	ldrb	r3, [r4, #16]
10007dd6:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
10007dd8:	6963      	ldr	r3, [r4, #20]
10007dda:	0e1b      	lsrs	r3, r3, #24
10007ddc:	732b      	strb	r3, [r5, #12]
10007dde:	6963      	ldr	r3, [r4, #20]
10007de0:	0c1b      	lsrs	r3, r3, #16
10007de2:	736b      	strb	r3, [r5, #13]
10007de4:	6963      	ldr	r3, [r4, #20]
10007de6:	0a1b      	lsrs	r3, r3, #8
10007de8:	73ab      	strb	r3, [r5, #14]
10007dea:	7d23      	ldrb	r3, [r4, #20]
10007dec:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
10007dee:	69a3      	ldr	r3, [r4, #24]
10007df0:	0e1b      	lsrs	r3, r3, #24
10007df2:	742b      	strb	r3, [r5, #16]
10007df4:	69a3      	ldr	r3, [r4, #24]
10007df6:	0c1b      	lsrs	r3, r3, #16
10007df8:	746b      	strb	r3, [r5, #17]
10007dfa:	69a3      	ldr	r3, [r4, #24]
10007dfc:	0a1b      	lsrs	r3, r3, #8
10007dfe:	74ab      	strb	r3, [r5, #18]
10007e00:	7e23      	ldrb	r3, [r4, #24]
10007e02:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
10007e04:	69e3      	ldr	r3, [r4, #28]
10007e06:	0e1b      	lsrs	r3, r3, #24
10007e08:	752b      	strb	r3, [r5, #20]
10007e0a:	69e3      	ldr	r3, [r4, #28]
10007e0c:	0c1b      	lsrs	r3, r3, #16
10007e0e:	756b      	strb	r3, [r5, #21]
10007e10:	69e3      	ldr	r3, [r4, #28]
10007e12:	0a1b      	lsrs	r3, r3, #8
10007e14:	75ab      	strb	r3, [r5, #22]
10007e16:	7f23      	ldrb	r3, [r4, #28]
10007e18:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
10007e1a:	6a23      	ldr	r3, [r4, #32]
10007e1c:	0e1b      	lsrs	r3, r3, #24
10007e1e:	762b      	strb	r3, [r5, #24]
10007e20:	6a23      	ldr	r3, [r4, #32]
10007e22:	0c1b      	lsrs	r3, r3, #16
10007e24:	766b      	strb	r3, [r5, #25]
10007e26:	6a23      	ldr	r3, [r4, #32]
10007e28:	0a1b      	lsrs	r3, r3, #8
10007e2a:	76ab      	strb	r3, [r5, #26]
10007e2c:	6a23      	ldr	r3, [r4, #32]
10007e2e:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
10007e30:	6ea0      	ldr	r0, [r4, #104]	; 0x68
10007e32:	2800      	cmp	r0, #0
10007e34:	d10b      	bne.n	10007e4e <mbedtls_sha256_finish_ret+0x13e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
10007e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
10007e38:	0e1b      	lsrs	r3, r3, #24
10007e3a:	772b      	strb	r3, [r5, #28]
10007e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
10007e3e:	0c1b      	lsrs	r3, r3, #16
10007e40:	776b      	strb	r3, [r5, #29]
10007e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
10007e44:	0a1b      	lsrs	r3, r3, #8
10007e46:	77ab      	strb	r3, [r5, #30]
10007e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
10007e4a:	77eb      	strb	r3, [r5, #31]
10007e4c:	e000      	b.n	10007e50 <mbedtls_sha256_finish_ret+0x140>

    return( 0 );
10007e4e:	1c10      	adds	r0, r2, #0
}
10007e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10007e52 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
10007e52:	b5f0      	push	{r4, r5, r6, r7, lr}
10007e54:	1c1c      	adds	r4, r3, #0
10007e56:	b09d      	sub	sp, #116	; 0x74
10007e58:	1c07      	adds	r7, r0, #0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
10007e5a:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
10007e5c:	1c0e      	adds	r6, r1, #0
10007e5e:	1c15      	adds	r5, r2, #0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
10007e60:	f7ff fa2c 	bl	100072bc <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
10007e64:	1c21      	adds	r1, r4, #0
10007e66:	a801      	add	r0, sp, #4
10007e68:	f7ff fa3a 	bl	100072e0 <mbedtls_sha256_starts_ret>
10007e6c:	1e04      	subs	r4, r0, #0
10007e6e:	d10b      	bne.n	10007e88 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
10007e70:	a801      	add	r0, sp, #4
10007e72:	1c39      	adds	r1, r7, #0
10007e74:	1c32      	adds	r2, r6, #0
10007e76:	f7ff ff0b 	bl	10007c90 <mbedtls_sha256_update_ret>
10007e7a:	1e04      	subs	r4, r0, #0
10007e7c:	d104      	bne.n	10007e88 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
10007e7e:	a801      	add	r0, sp, #4
10007e80:	1c29      	adds	r1, r5, #0
10007e82:	f7ff ff45 	bl	10007d10 <mbedtls_sha256_finish_ret>
10007e86:	1c04      	adds	r4, r0, #0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
10007e88:	a801      	add	r0, sp, #4
10007e8a:	f7ff fa1d 	bl	100072c8 <mbedtls_sha256_free>

    return( ret );
}
10007e8e:	1c20      	adds	r0, r4, #0
10007e90:	b01d      	add	sp, #116	; 0x74
10007e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

10007e94 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10007e94:	4b01      	ldr	r3, [pc, #4]	; (10007e9c <optiga_crypt_callback+0x8>)
10007e96:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10007e98:	4770      	bx	lr
10007e9a:	46c0      	nop			; (mov r8, r8)
10007e9c:	20002f8c 	.word	0x20002f8c

10007ea0 <example_optiga_crypt_ecc_generate_keypair>:
 * The below example demonstrates the generation of
 * ECC Key pair using #optiga_crypt_ecc_generate_keypair.
 *
 */
void example_optiga_crypt_ecc_generate_keypair(void)
{
10007ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
10007ea2:	2712      	movs	r7, #18
 * The below example demonstrates the generation of
 * ECC Key pair using #optiga_crypt_ecc_generate_keypair.
 *
 */
void example_optiga_crypt_ecc_generate_keypair(void)
{
10007ea4:	b0a1      	sub	sp, #132	; 0x84
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
10007ea6:	ab02      	add	r3, sp, #8
10007ea8:	18ff      	adds	r7, r7, r3
10007eaa:	2364      	movs	r3, #100	; 0x64

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10007eac:	4d20      	ldr	r5, [pc, #128]	; (10007f30 <example_optiga_crypt_ecc_generate_keypair+0x90>)
10007eae:	4c21      	ldr	r4, [pc, #132]	; (10007f34 <example_optiga_crypt_ecc_generate_keypair+0x94>)
10007eb0:	4821      	ldr	r0, [pc, #132]	; (10007f38 <example_optiga_crypt_ecc_generate_keypair+0x98>)
10007eb2:	1c21      	adds	r1, r4, #0
10007eb4:	1c2a      	adds	r2, r5, #0
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
10007eb6:	803b      	strh	r3, [r7, #0]

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10007eb8:	f7fc fa4a 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10007ebc:	2000      	movs	r0, #0
10007ebe:	491f      	ldr	r1, [pc, #124]	; (10007f3c <example_optiga_crypt_ecc_generate_keypair+0x9c>)
10007ec0:	1c02      	adds	r2, r0, #0
10007ec2:	f7fa f837 	bl	10001f34 <optiga_crypt_create>
10007ec6:	9505      	str	r5, [sp, #20]
10007ec8:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10007eca:	d01f      	beq.n	10007f0c <example_optiga_crypt_ecc_generate_keypair+0x6c>
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10007ecc:	2301      	movs	r3, #1
10007ece:	4d1c      	ldr	r5, [pc, #112]	; (10007f40 <example_optiga_crypt_ecc_generate_keypair+0xa0>)
        optiga_key_id = OPTIGA_KEY_ID_E0F1;
10007ed0:	4a1c      	ldr	r2, [pc, #112]	; (10007f44 <example_optiga_crypt_ecc_generate_keypair+0xa4>)
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10007ed2:	802b      	strh	r3, [r5, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0F1;
10007ed4:	ab06      	add	r3, sp, #24
10007ed6:	801a      	strh	r2, [r3, #0]
        //for Session based, use OPTIGA_KEY_ID_SESSION_BASED as key id as shown below.
        //optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
        return_status = optiga_crypt_ecc_generate_keypair(me,
10007ed8:	9300      	str	r3, [sp, #0]
10007eda:	ab07      	add	r3, sp, #28
10007edc:	9301      	str	r3, [sp, #4]
10007ede:	2210      	movs	r2, #16
10007ee0:	9702      	str	r7, [sp, #8]
10007ee2:	2103      	movs	r1, #3
10007ee4:	2300      	movs	r3, #0
10007ee6:	f7fa f947 	bl	10002178 <optiga_crypt_ecc_generate_keypair>
10007eea:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_SIGN,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
10007eec:	d109      	bne.n	10007f02 <example_optiga_crypt_ecc_generate_keypair+0x62>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10007eee:	882b      	ldrh	r3, [r5, #0]
10007ef0:	2b01      	cmp	r3, #1
10007ef2:	d0fc      	beq.n	10007eee <example_optiga_crypt_ecc_generate_keypair+0x4e>
        {
            //Wait until the optiga_crypt_ecc_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10007ef4:	882b      	ldrh	r3, [r5, #0]
10007ef6:	2b00      	cmp	r3, #0
10007ef8:	d008      	beq.n	10007f0c <example_optiga_crypt_ecc_generate_keypair+0x6c>
        {
            //Key pair generation failed
            return_status = optiga_lib_status;
10007efa:	882a      	ldrh	r2, [r5, #0]
10007efc:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10007efe:	2a00      	cmp	r2, #0
10007f00:	d004      	beq.n	10007f0c <example_optiga_crypt_ecc_generate_keypair+0x6c>
10007f02:	1c20      	adds	r0, r4, #0
10007f04:	4910      	ldr	r1, [pc, #64]	; (10007f48 <example_optiga_crypt_ecc_generate_keypair+0xa8>)
10007f06:	f7fc fa55 	bl	100043b4 <optiga_lib_print_status>
10007f0a:	e006      	b.n	10007f1a <example_optiga_crypt_ecc_generate_keypair+0x7a>
10007f0c:	1c20      	adds	r0, r4, #0
10007f0e:	9905      	ldr	r1, [sp, #20]
10007f10:	2200      	movs	r2, #0
10007f12:	f7fc fa4f 	bl	100043b4 <optiga_lib_print_status>

    if (me)
10007f16:	2e00      	cmp	r6, #0
10007f18:	d008      	beq.n	10007f2c <example_optiga_crypt_ecc_generate_keypair+0x8c>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10007f1a:	1c30      	adds	r0, r6, #0
10007f1c:	f7fa f832 	bl	10001f84 <optiga_crypt_destroy>
10007f20:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10007f22:	d003      	beq.n	10007f2c <example_optiga_crypt_ecc_generate_keypair+0x8c>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10007f24:	1c20      	adds	r0, r4, #0
10007f26:	4908      	ldr	r1, [pc, #32]	; (10007f48 <example_optiga_crypt_ecc_generate_keypair+0xa8>)
10007f28:	f7fc fa44 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
10007f2c:	b021      	add	sp, #132	; 0x84
10007f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007f30:	1000cae0 	.word	0x1000cae0
10007f34:	1000f028 	.word	0x1000f028
10007f38:	1000f043 	.word	0x1000f043
10007f3c:	10007e95 	.word	0x10007e95
10007f40:	20002f8c 	.word	0x20002f8c
10007f44:	ffffe0f1 	.word	0xffffe0f1
10007f48:	1000f03d 	.word	0x1000f03d

10007f4c <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10007f4c:	4b01      	ldr	r3, [pc, #4]	; (10007f54 <optiga_crypt_callback+0x8>)
10007f4e:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10007f50:	4770      	bx	lr
10007f52:	46c0      	nop			; (mov r8, r8)
10007f54:	20002f8e 	.word	0x20002f8e

10007f58 <example_optiga_crypt_ecdh>:
 * The below example demonstrates the generation of
 * shared secret using #optiga_crypt_ecdh with a session based approach.
 *
 */
void example_optiga_crypt_ecdh(void)
{
10007f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
10007f5a:	2612      	movs	r6, #18
 * The below example demonstrates the generation of
 * shared secret using #optiga_crypt_ecdh with a session based approach.
 *
 */
void example_optiga_crypt_ecdh(void)
{
10007f5c:	b0a9      	sub	sp, #164	; 0xa4
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
10007f5e:	ab02      	add	r3, sp, #8
10007f60:	18f6      	adds	r6, r6, r3
10007f62:	2364      	movs	r3, #100	; 0x64

    //To store the generated shared secret as part of ECDH
    uint8_t shared_secret [32];

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10007f64:	4f34      	ldr	r7, [pc, #208]	; (10008038 <example_optiga_crypt_ecdh+0xe0>)
10007f66:	4c35      	ldr	r4, [pc, #212]	; (1000803c <example_optiga_crypt_ecdh+0xe4>)
10007f68:	4835      	ldr	r0, [pc, #212]	; (10008040 <example_optiga_crypt_ecdh+0xe8>)
10007f6a:	1c39      	adds	r1, r7, #0
10007f6c:	1c22      	adds	r2, r4, #0
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
10007f6e:	8033      	strh	r3, [r6, #0]

    //To store the generated shared secret as part of ECDH
    uint8_t shared_secret [32];

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10007f70:	f7fc f9ee 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10007f74:	2000      	movs	r0, #0
10007f76:	4933      	ldr	r1, [pc, #204]	; (10008044 <example_optiga_crypt_ecdh+0xec>)
10007f78:	1c02      	adds	r2, r0, #0
10007f7a:	f7f9 ffdb 	bl	10001f34 <optiga_crypt_create>
10007f7e:	9704      	str	r7, [sp, #16]
10007f80:	1e05      	subs	r5, r0, #0
10007f82:	9405      	str	r4, [sp, #20]
        if (NULL == me)
10007f84:	d046      	beq.n	10008014 <example_optiga_crypt_ecdh+0xbc>
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage as Key Agreement
         *       - Store the Private key with in OPTIGA Session
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10007f86:	2401      	movs	r4, #1
10007f88:	4b2f      	ldr	r3, [pc, #188]	; (10008048 <example_optiga_crypt_ecdh+0xf0>)
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
10007f8a:	1c21      	adds	r1, r4, #0
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage as Key Agreement
         *       - Store the Private key with in OPTIGA Session
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10007f8c:	801c      	strh	r4, [r3, #0]
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
10007f8e:	2300      	movs	r3, #0

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
10007f90:	1c22      	adds	r2, r4, #0
         *       - Specify the Key Usage as Key Agreement
         *       - Store the Private key with in OPTIGA Session
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
10007f92:	af06      	add	r7, sp, #24
10007f94:	803b      	strh	r3, [r7, #0]

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
10007f96:	f7f9 ffc3 	bl	10001f20 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10007f9a:	1c22      	adds	r2, r4, #0
10007f9c:	1c28      	adds	r0, r5, #0
10007f9e:	2102      	movs	r1, #2
10007fa0:	f7f9 ffbe 	bl	10001f20 <optiga_crypt_set_comms_params>
        return_status = optiga_crypt_ecc_generate_keypair(me,
10007fa4:	ab0f      	add	r3, sp, #60	; 0x3c
10007fa6:	9301      	str	r3, [sp, #4]
10007fa8:	2220      	movs	r2, #32
10007faa:	9700      	str	r7, [sp, #0]
10007fac:	9602      	str	r6, [sp, #8]
10007fae:	1c28      	adds	r0, r5, #0
10007fb0:	2103      	movs	r1, #3
10007fb2:	2300      	movs	r3, #0
10007fb4:	f7fa f8e0 	bl	10002178 <optiga_crypt_ecc_generate_keypair>
10007fb8:	4c23      	ldr	r4, [pc, #140]	; (10008048 <example_optiga_crypt_ecdh+0xf0>)
10007fba:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_KEY_AGREEMENT,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
10007fbc:	d125      	bne.n	1000800a <example_optiga_crypt_ecdh+0xb2>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10007fbe:	8823      	ldrh	r3, [r4, #0]
10007fc0:	2b01      	cmp	r3, #1
10007fc2:	d0fc      	beq.n	10007fbe <example_optiga_crypt_ecdh+0x66>
        {
            //Wait until the optiga_crypt_ecc_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10007fc4:	8823      	ldrh	r3, [r4, #0]
10007fc6:	2b00      	cmp	r3, #0
10007fc8:	d11b      	bne.n	10008002 <example_optiga_crypt_ecdh+0xaa>
         * 3. Perform ECDH using the Peer Public key
         *       - Use ECC NIST P 256 Curve
         *       - Provide the peer public key details
         *       - Export the generated shared secret with protected I2C communication
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10007fca:	2601      	movs	r6, #1
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
10007fcc:	1c28      	adds	r0, r5, #0
10007fce:	1c31      	adds	r1, r6, #0
10007fd0:	1c32      	adds	r2, r6, #0
         * 3. Perform ECDH using the Peer Public key
         *       - Use ECC NIST P 256 Curve
         *       - Provide the peer public key details
         *       - Export the generated shared secret with protected I2C communication
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10007fd2:	8026      	strh	r6, [r4, #0]
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
10007fd4:	f7f9 ffa4 	bl	10001f20 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10007fd8:	1c28      	adds	r0, r5, #0
10007fda:	2102      	movs	r1, #2
10007fdc:	1c32      	adds	r2, r6, #0
10007fde:	f7f9 ff9f 	bl	10001f20 <optiga_crypt_set_comms_params>
        return_status = optiga_crypt_ecdh(me,
10007fe2:	ab07      	add	r3, sp, #28
10007fe4:	8839      	ldrh	r1, [r7, #0]
10007fe6:	4a19      	ldr	r2, [pc, #100]	; (1000804c <example_optiga_crypt_ecdh+0xf4>)
10007fe8:	9300      	str	r3, [sp, #0]
10007fea:	1c28      	adds	r0, r5, #0
10007fec:	1c33      	adds	r3, r6, #0
10007fee:	f7fa f8f3 	bl	100021d8 <optiga_crypt_ecdh>
10007ff2:	1e02      	subs	r2, r0, #0
                                          optiga_key_id,
                                          &peer_public_key_details,
                                          TRUE,
                                          shared_secret);
        if (OPTIGA_LIB_SUCCESS != return_status)
10007ff4:	d109      	bne.n	1000800a <example_optiga_crypt_ecdh+0xb2>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10007ff6:	8823      	ldrh	r3, [r4, #0]
10007ff8:	2b01      	cmp	r3, #1
10007ffa:	d0fc      	beq.n	10007ff6 <example_optiga_crypt_ecdh+0x9e>
        {
            //Wait until the optiga_crypt_ecdh operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10007ffc:	8823      	ldrh	r3, [r4, #0]
10007ffe:	2b00      	cmp	r3, #0
10008000:	d008      	beq.n	10008014 <example_optiga_crypt_ecdh+0xbc>
        {
            //ECDH Operation failed.
            return_status = optiga_lib_status;
10008002:	8822      	ldrh	r2, [r4, #0]
10008004:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008006:	2a00      	cmp	r2, #0
10008008:	d004      	beq.n	10008014 <example_optiga_crypt_ecdh+0xbc>
1000800a:	9804      	ldr	r0, [sp, #16]
1000800c:	4910      	ldr	r1, [pc, #64]	; (10008050 <example_optiga_crypt_ecdh+0xf8>)
1000800e:	f7fc f9d1 	bl	100043b4 <optiga_lib_print_status>
10008012:	e006      	b.n	10008022 <example_optiga_crypt_ecdh+0xca>
10008014:	9804      	ldr	r0, [sp, #16]
10008016:	9905      	ldr	r1, [sp, #20]
10008018:	2200      	movs	r2, #0
1000801a:	f7fc f9cb 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
1000801e:	2d00      	cmp	r5, #0
10008020:	d008      	beq.n	10008034 <example_optiga_crypt_ecdh+0xdc>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008022:	1c28      	adds	r0, r5, #0
10008024:	f7f9 ffae 	bl	10001f84 <optiga_crypt_destroy>
10008028:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
1000802a:	d003      	beq.n	10008034 <example_optiga_crypt_ecdh+0xdc>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
1000802c:	9804      	ldr	r0, [sp, #16]
1000802e:	4908      	ldr	r1, [pc, #32]	; (10008050 <example_optiga_crypt_ecdh+0xf8>)
10008030:	f7fc f9c0 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
10008034:	b029      	add	sp, #164	; 0xa4
10008036:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008038:	1000f028 	.word	0x1000f028
1000803c:	1000cae0 	.word	0x1000cae0
10008040:	1000f06d 	.word	0x1000f06d
10008044:	10007f4d 	.word	0x10007f4d
10008048:	20002f8e 	.word	0x20002f8e
1000804c:	20001aa8 	.word	0x20001aa8
10008050:	1000f03d 	.word	0x1000f03d

10008054 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008054:	4b01      	ldr	r3, [pc, #4]	; (1000805c <optiga_crypt_callback+0x8>)
10008056:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008058:	4770      	bx	lr
1000805a:	46c0      	nop			; (mov r8, r8)
1000805c:	20002f90 	.word	0x20002f90

10008060 <example_optiga_crypt_ecdsa_sign>:
 *
 * Example for #optiga_crypt_ecdsa_sign
 *
 */
void example_optiga_crypt_ecdsa_sign(void)
{
10008060:	b5f0      	push	{r4, r5, r6, r7, lr}
    //To store the signture generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
10008062:	270e      	movs	r7, #14
 *
 * Example for #optiga_crypt_ecdsa_sign
 *
 */
void example_optiga_crypt_ecdsa_sign(void)
{
10008064:	b09b      	sub	sp, #108	; 0x6c
    //To store the signture generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
10008066:	ab02      	add	r3, sp, #8
10008068:	18ff      	adds	r7, r7, r3
1000806a:	2350      	movs	r3, #80	; 0x50

    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000806c:	4d1e      	ldr	r5, [pc, #120]	; (100080e8 <example_optiga_crypt_ecdsa_sign+0x88>)
1000806e:	4c1f      	ldr	r4, [pc, #124]	; (100080ec <example_optiga_crypt_ecdsa_sign+0x8c>)
10008070:	481f      	ldr	r0, [pc, #124]	; (100080f0 <example_optiga_crypt_ecdsa_sign+0x90>)
10008072:	1c21      	adds	r1, r4, #0
10008074:	1c2a      	adds	r2, r5, #0
 */
void example_optiga_crypt_ecdsa_sign(void)
{
    //To store the signture generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
10008076:	803b      	strh	r3, [r7, #0]

    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008078:	f7fc f96a 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
1000807c:	2000      	movs	r0, #0
1000807e:	491d      	ldr	r1, [pc, #116]	; (100080f4 <example_optiga_crypt_ecdsa_sign+0x94>)
10008080:	1c02      	adds	r2, r0, #0
10008082:	f7f9 ff57 	bl	10001f34 <optiga_crypt_create>
10008086:	9503      	str	r5, [sp, #12]
10008088:	1e06      	subs	r6, r0, #0
        if (NULL == me)
1000808a:	d01b      	beq.n	100080c4 <example_optiga_crypt_ecdsa_sign+0x64>
        }

        /**
         * 2. Sign the digest using Private key from Key Store ID E0F0
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000808c:	2301      	movs	r3, #1
1000808e:	4d1a      	ldr	r5, [pc, #104]	; (100080f8 <example_optiga_crypt_ecdsa_sign+0x98>)
        return_status = optiga_crypt_ecdsa_sign(me,
10008090:	2220      	movs	r2, #32
        }

        /**
         * 2. Sign the digest using Private key from Key Store ID E0F0
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008092:	802b      	strh	r3, [r5, #0]
        return_status = optiga_crypt_ecdsa_sign(me,
10008094:	ab06      	add	r3, sp, #24
10008096:	9300      	str	r3, [sp, #0]
10008098:	9701      	str	r7, [sp, #4]
1000809a:	4918      	ldr	r1, [pc, #96]	; (100080fc <example_optiga_crypt_ecdsa_sign+0x9c>)
1000809c:	4b18      	ldr	r3, [pc, #96]	; (10008100 <example_optiga_crypt_ecdsa_sign+0xa0>)
1000809e:	f7fa f876 	bl	1000218e <optiga_crypt_ecdsa_sign>
100080a2:	1e02      	subs	r2, r0, #0
                                                sizeof(digest),
                                                OPTIGA_KEY_ID_E0F0,
                                                signature,
                                                &signature_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
100080a4:	d109      	bne.n	100080ba <example_optiga_crypt_ecdsa_sign+0x5a>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100080a6:	882b      	ldrh	r3, [r5, #0]
100080a8:	2b01      	cmp	r3, #1
100080aa:	d0fc      	beq.n	100080a6 <example_optiga_crypt_ecdsa_sign+0x46>
        {
            //Wait until the optiga_crypt_ecdsa_sign operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100080ac:	882b      	ldrh	r3, [r5, #0]
100080ae:	2b00      	cmp	r3, #0
100080b0:	d008      	beq.n	100080c4 <example_optiga_crypt_ecdsa_sign+0x64>
        {
            return_status = optiga_lib_status;
100080b2:	882a      	ldrh	r2, [r5, #0]
100080b4:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100080b6:	2a00      	cmp	r2, #0
100080b8:	d004      	beq.n	100080c4 <example_optiga_crypt_ecdsa_sign+0x64>
100080ba:	1c20      	adds	r0, r4, #0
100080bc:	4911      	ldr	r1, [pc, #68]	; (10008104 <example_optiga_crypt_ecdsa_sign+0xa4>)
100080be:	f7fc f979 	bl	100043b4 <optiga_lib_print_status>
100080c2:	e006      	b.n	100080d2 <example_optiga_crypt_ecdsa_sign+0x72>
100080c4:	1c20      	adds	r0, r4, #0
100080c6:	9903      	ldr	r1, [sp, #12]
100080c8:	2200      	movs	r2, #0
100080ca:	f7fc f973 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
100080ce:	2e00      	cmp	r6, #0
100080d0:	d008      	beq.n	100080e4 <example_optiga_crypt_ecdsa_sign+0x84>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
100080d2:	1c30      	adds	r0, r6, #0
100080d4:	f7f9 ff56 	bl	10001f84 <optiga_crypt_destroy>
100080d8:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
100080da:	d003      	beq.n	100080e4 <example_optiga_crypt_ecdsa_sign+0x84>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100080dc:	1c20      	adds	r0, r4, #0
100080de:	4909      	ldr	r1, [pc, #36]	; (10008104 <example_optiga_crypt_ecdsa_sign+0xa4>)
100080e0:	f7fc f968 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
100080e4:	b01b      	add	sp, #108	; 0x6c
100080e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100080e8:	1000cae0 	.word	0x1000cae0
100080ec:	1000f028 	.word	0x1000f028
100080f0:	1000f087 	.word	0x1000f087
100080f4:	10008055 	.word	0x10008055
100080f8:	20002f90 	.word	0x20002f90
100080fc:	20001ab0 	.word	0x20001ab0
10008100:	0000e0f0 	.word	0x0000e0f0
10008104:	1000f03d 	.word	0x1000f03d

10008108 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008108:	4b01      	ldr	r3, [pc, #4]	; (10008110 <optiga_crypt_callback+0x8>)
1000810a:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
1000810c:	4770      	bx	lr
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	20002f92 	.word	0x20002f92

10008114 <example_optiga_crypt_ecdsa_verify>:
 *
 * Example for #optiga_crypt_ecdsa_verify
 *
 */
void example_optiga_crypt_ecdsa_verify(void)
{
10008114:	b5f0      	push	{r4, r5, r6, r7, lr}
10008116:	b089      	sub	sp, #36	; 0x24
    public_key_from_host_t public_key_details = {
10008118:	af06      	add	r7, sp, #24
1000811a:	1c3a      	adds	r2, r7, #0
                                                };

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000811c:	4d20      	ldr	r5, [pc, #128]	; (100081a0 <example_optiga_crypt_ecdsa_verify+0x8c>)
 * Example for #optiga_crypt_ecdsa_verify
 *
 */
void example_optiga_crypt_ecdsa_verify(void)
{
    public_key_from_host_t public_key_details = {
1000811e:	4b21      	ldr	r3, [pc, #132]	; (100081a4 <example_optiga_crypt_ecdsa_verify+0x90>)
                                                };

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008120:	4c21      	ldr	r4, [pc, #132]	; (100081a8 <example_optiga_crypt_ecdsa_verify+0x94>)
 * Example for #optiga_crypt_ecdsa_verify
 *
 */
void example_optiga_crypt_ecdsa_verify(void)
{
    public_key_from_host_t public_key_details = {
10008122:	cb03      	ldmia	r3!, {r0, r1}
10008124:	c203      	stmia	r2!, {r0, r1}
                                                };

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008126:	4821      	ldr	r0, [pc, #132]	; (100081ac <example_optiga_crypt_ecdsa_verify+0x98>)
10008128:	1c21      	adds	r1, r4, #0
1000812a:	1c2a      	adds	r2, r5, #0
1000812c:	f7fc f910 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008130:	2000      	movs	r0, #0
10008132:	491f      	ldr	r1, [pc, #124]	; (100081b0 <example_optiga_crypt_ecdsa_verify+0x9c>)
10008134:	1c02      	adds	r2, r0, #0
10008136:	f7f9 fefd 	bl	10001f34 <optiga_crypt_create>
1000813a:	9505      	str	r5, [sp, #20]
1000813c:	1e06      	subs	r6, r0, #0
        if (NULL == me)
1000813e:	d01c      	beq.n	1000817a <example_optiga_crypt_ecdsa_verify+0x66>
        }

        /**
         * 2. Verify ECDSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008140:	2301      	movs	r3, #1
        return_status = optiga_crypt_ecdsa_verify (me,
10008142:	2242      	movs	r2, #66	; 0x42
        }

        /**
         * 2. Verify ECDSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008144:	4d1b      	ldr	r5, [pc, #108]	; (100081b4 <example_optiga_crypt_ecdsa_verify+0xa0>)
        return_status = optiga_crypt_ecdsa_verify (me,
10008146:	491c      	ldr	r1, [pc, #112]	; (100081b8 <example_optiga_crypt_ecdsa_verify+0xa4>)
        }

        /**
         * 2. Verify ECDSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008148:	802b      	strh	r3, [r5, #0]
        return_status = optiga_crypt_ecdsa_verify (me,
1000814a:	9200      	str	r2, [sp, #0]
1000814c:	9301      	str	r3, [sp, #4]
1000814e:	3a22      	subs	r2, #34	; 0x22
10008150:	9702      	str	r7, [sp, #8]
10008152:	4b1a      	ldr	r3, [pc, #104]	; (100081bc <example_optiga_crypt_ecdsa_verify+0xa8>)
10008154:	f7fa f82b 	bl	100021ae <optiga_crypt_ecdsa_verify>
10008158:	1e02      	subs	r2, r0, #0
                                                   signature,
                                                   sizeof(signature),
                                                   OPTIGA_CRYPT_HOST_DATA,
                                                   &public_key_details);

        if (OPTIGA_LIB_SUCCESS != return_status)
1000815a:	d109      	bne.n	10008170 <example_optiga_crypt_ecdsa_verify+0x5c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000815c:	882b      	ldrh	r3, [r5, #0]
1000815e:	2b01      	cmp	r3, #1
10008160:	d0fc      	beq.n	1000815c <example_optiga_crypt_ecdsa_verify+0x48>
        {
            //Wait until the optiga_crypt_ecdsa_verify operation is completed
        }

        if ((OPTIGA_LIB_SUCCESS != optiga_lib_status))
10008162:	882b      	ldrh	r3, [r5, #0]
10008164:	2b00      	cmp	r3, #0
10008166:	d008      	beq.n	1000817a <example_optiga_crypt_ecdsa_verify+0x66>
        {
            //Signature verification failed.
            return_status = optiga_lib_status;
10008168:	882a      	ldrh	r2, [r5, #0]
1000816a:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
1000816c:	2a00      	cmp	r2, #0
1000816e:	d004      	beq.n	1000817a <example_optiga_crypt_ecdsa_verify+0x66>
10008170:	1c20      	adds	r0, r4, #0
10008172:	4913      	ldr	r1, [pc, #76]	; (100081c0 <example_optiga_crypt_ecdsa_verify+0xac>)
10008174:	f7fc f91e 	bl	100043b4 <optiga_lib_print_status>
10008178:	e006      	b.n	10008188 <example_optiga_crypt_ecdsa_verify+0x74>
1000817a:	1c20      	adds	r0, r4, #0
1000817c:	9905      	ldr	r1, [sp, #20]
1000817e:	2200      	movs	r2, #0
10008180:	f7fc f918 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
10008184:	2e00      	cmp	r6, #0
10008186:	d008      	beq.n	1000819a <example_optiga_crypt_ecdsa_verify+0x86>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008188:	1c30      	adds	r0, r6, #0
1000818a:	f7f9 fefb 	bl	10001f84 <optiga_crypt_destroy>
1000818e:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008190:	d003      	beq.n	1000819a <example_optiga_crypt_ecdsa_verify+0x86>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008192:	1c20      	adds	r0, r4, #0
10008194:	490a      	ldr	r1, [pc, #40]	; (100081c0 <example_optiga_crypt_ecdsa_verify+0xac>)
10008196:	f7fc f90d 	bl	100043b4 <optiga_lib_print_status>
        }
    }
    
}
1000819a:	b009      	add	sp, #36	; 0x24
1000819c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000819e:	46c0      	nop			; (mov r8, r8)
100081a0:	1000cae0 	.word	0x1000cae0
100081a4:	1000f0a8 	.word	0x1000f0a8
100081a8:	1000f028 	.word	0x1000f028
100081ac:	1000f0b0 	.word	0x1000f0b0
100081b0:	10008109 	.word	0x10008109
100081b4:	20002f92 	.word	0x20002f92
100081b8:	20001b56 	.word	0x20001b56
100081bc:	20001ad0 	.word	0x20001ad0
100081c0:	1000f03d 	.word	0x1000f03d

100081c4 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
100081c4:	4b01      	ldr	r3, [pc, #4]	; (100081cc <optiga_crypt_callback+0x8>)
100081c6:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
100081c8:	4770      	bx	lr
100081ca:	46c0      	nop			; (mov r8, r8)
100081cc:	20002f94 	.word	0x20002f94

100081d0 <example_optiga_crypt_hash>:
 * Example for #optiga_crypt_hash_start, #optiga_crypt_hash_update,
 * #optiga_crypt_hash_finalize
 *
 */
void example_optiga_crypt_hash(void)
{
100081d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100081d2:	b0b9      	sub	sp, #228	; 0xe4
    optiga_lib_status_t return_status = 0;

    uint8_t hash_context_buffer [130];
    optiga_hash_context_t hash_context;

    uint8_t data_to_hash [] = {"OPITGA, Infineon Technologies AG"};
100081d4:	af0e      	add	r7, sp, #56	; 0x38
100081d6:	4934      	ldr	r1, [pc, #208]	; (100082a8 <example_optiga_crypt_hash+0xd8>)
100081d8:	2221      	movs	r2, #33	; 0x21
100081da:	1c38      	adds	r0, r7, #0
100081dc:	f004 f827 	bl	1000c22e <memcpy>
    hash_data_from_host_t hash_data_host;

    uint8_t digest [32];

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100081e0:	4c32      	ldr	r4, [pc, #200]	; (100082ac <example_optiga_crypt_hash+0xdc>)
100081e2:	4d33      	ldr	r5, [pc, #204]	; (100082b0 <example_optiga_crypt_hash+0xe0>)
100081e4:	4833      	ldr	r0, [pc, #204]	; (100082b4 <example_optiga_crypt_hash+0xe4>)
100081e6:	1c29      	adds	r1, r5, #0
100081e8:	1c22      	adds	r2, r4, #0
100081ea:	f7fc f8b1 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
100081ee:	2000      	movs	r0, #0
100081f0:	4931      	ldr	r1, [pc, #196]	; (100082b8 <example_optiga_crypt_hash+0xe8>)
100081f2:	1c02      	adds	r2, r0, #0
100081f4:	f7f9 fe9e 	bl	10001f34 <optiga_crypt_create>
100081f8:	9401      	str	r4, [sp, #4]
100081fa:	1e06      	subs	r6, r0, #0
        if (NULL == me)
100081fc:	d042      	beq.n	10008284 <example_optiga_crypt_hash+0xb4>
        }

        /**
         * 2. Initialize the Hash context
         */
        OPTIGA_HASH_CONTEXT_INIT(hash_context,hash_context_buffer,  \
100081fe:	ab17      	add	r3, sp, #92	; 0x5c
10008200:	9302      	str	r3, [sp, #8]
10008202:	2382      	movs	r3, #130	; 0x82
10008204:	aa02      	add	r2, sp, #8
10008206:	8093      	strh	r3, [r2, #4]
                                 sizeof(hash_context_buffer),(uint8_t)OPTIGA_HASH_TYPE_SHA_256);

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008208:	4c2c      	ldr	r4, [pc, #176]	; (100082bc <example_optiga_crypt_hash+0xec>)
        }

        /**
         * 2. Initialize the Hash context
         */
        OPTIGA_HASH_CONTEXT_INIT(hash_context,hash_context_buffer,  \
1000820a:	3360      	adds	r3, #96	; 0x60
1000820c:	7193      	strb	r3, [r2, #6]
        optiga_lib_status = OPTIGA_LIB_BUSY;

        /**
         * 3. Initialize the hashing context at OPTIGA
         */
        return_status = optiga_crypt_hash_start(me, &hash_context);
1000820e:	1c11      	adds	r1, r2, #0
         * 2. Initialize the Hash context
         */
        OPTIGA_HASH_CONTEXT_INIT(hash_context,hash_context_buffer,  \
                                 sizeof(hash_context_buffer),(uint8_t)OPTIGA_HASH_TYPE_SHA_256);

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008210:	3be1      	subs	r3, #225	; 0xe1
10008212:	8023      	strh	r3, [r4, #0]

        /**
         * 3. Initialize the hashing context at OPTIGA
         */
        return_status = optiga_crypt_hash_start(me, &hash_context);
10008214:	f7f9 fee0 	bl	10001fd8 <optiga_crypt_hash_start>
10008218:	1e02      	subs	r2, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_status)
1000821a:	d12e      	bne.n	1000827a <example_optiga_crypt_hash+0xaa>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000821c:	8823      	ldrh	r3, [r4, #0]
1000821e:	2b01      	cmp	r3, #1
10008220:	d0fc      	beq.n	1000821c <example_optiga_crypt_hash+0x4c>
        {
            //Wait until the optiga_crypt_hash_start operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008222:	8823      	ldrh	r3, [r4, #0]
10008224:	2b00      	cmp	r3, #0
10008226:	d124      	bne.n	10008272 <example_optiga_crypt_hash+0xa2>

        /**
         * 4. Continue hashing the data
         */
        hash_data_host.buffer = data_to_hash;
        hash_data_host.length = sizeof(data_to_hash);
10008228:	2321      	movs	r3, #33	; 0x21

        optiga_lib_status = OPTIGA_LIB_BUSY;
1000822a:	2201      	movs	r2, #1

        /**
         * 4. Continue hashing the data
         */
        hash_data_host.buffer = data_to_hash;
        hash_data_host.length = sizeof(data_to_hash);
1000822c:	9305      	str	r3, [sp, #20]

        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_crypt_hash_update(me,
1000822e:	1c30      	adds	r0, r6, #0
10008230:	a902      	add	r1, sp, #8
10008232:	ab04      	add	r3, sp, #16
         * 4. Continue hashing the data
         */
        hash_data_host.buffer = data_to_hash;
        hash_data_host.length = sizeof(data_to_hash);

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008234:	8022      	strh	r2, [r4, #0]
        }

        /**
         * 4. Continue hashing the data
         */
        hash_data_host.buffer = data_to_hash;
10008236:	9704      	str	r7, [sp, #16]
        hash_data_host.length = sizeof(data_to_hash);

        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_crypt_hash_update(me,
10008238:	f7f9 ff0c 	bl	10002054 <optiga_crypt_hash_update>
1000823c:	1e02      	subs	r2, r0, #0
                                                 &hash_context,
                                                 OPTIGA_CRYPT_HOST_DATA,
                                                 &hash_data_host);
        if (OPTIGA_LIB_SUCCESS != return_status)
1000823e:	d11c      	bne.n	1000827a <example_optiga_crypt_hash+0xaa>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008240:	4b1e      	ldr	r3, [pc, #120]	; (100082bc <example_optiga_crypt_hash+0xec>)
10008242:	881a      	ldrh	r2, [r3, #0]
10008244:	1c1c      	adds	r4, r3, #0
10008246:	2a01      	cmp	r2, #1
10008248:	d0fa      	beq.n	10008240 <example_optiga_crypt_hash+0x70>
        {
            //Wait until the optiga_crypt_hash_update operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000824a:	881a      	ldrh	r2, [r3, #0]
1000824c:	2a00      	cmp	r2, #0
1000824e:	d001      	beq.n	10008254 <example_optiga_crypt_hash+0x84>
        {
            return_status = optiga_lib_status;
10008250:	881a      	ldrh	r2, [r3, #0]
10008252:	e00f      	b.n	10008274 <example_optiga_crypt_hash+0xa4>
        }

        /**
         * 5. Finalize the hash
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008254:	2301      	movs	r3, #1
        return_status = optiga_crypt_hash_finalize(me,
10008256:	aa06      	add	r2, sp, #24
10008258:	1c30      	adds	r0, r6, #0
1000825a:	a902      	add	r1, sp, #8
        }

        /**
         * 5. Finalize the hash
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000825c:	8023      	strh	r3, [r4, #0]
        return_status = optiga_crypt_hash_finalize(me,
1000825e:	f7f9 ff47 	bl	100020f0 <optiga_crypt_hash_finalize>
10008262:	1e02      	subs	r2, r0, #0
                                                   &hash_context,
                                                   digest);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008264:	d109      	bne.n	1000827a <example_optiga_crypt_hash+0xaa>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008266:	8823      	ldrh	r3, [r4, #0]
10008268:	2b01      	cmp	r3, #1
1000826a:	d0fc      	beq.n	10008266 <example_optiga_crypt_hash+0x96>
        {
            //Wait until the optiga_crypt_hash_finalize operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000826c:	8823      	ldrh	r3, [r4, #0]
1000826e:	2b00      	cmp	r3, #0
10008270:	d008      	beq.n	10008284 <example_optiga_crypt_hash+0xb4>
        {
            return_status = optiga_lib_status;
10008272:	8822      	ldrh	r2, [r4, #0]
10008274:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008276:	2a00      	cmp	r2, #0
10008278:	d004      	beq.n	10008284 <example_optiga_crypt_hash+0xb4>
1000827a:	1c28      	adds	r0, r5, #0
1000827c:	4910      	ldr	r1, [pc, #64]	; (100082c0 <example_optiga_crypt_hash+0xf0>)
1000827e:	f7fc f899 	bl	100043b4 <optiga_lib_print_status>
10008282:	e006      	b.n	10008292 <example_optiga_crypt_hash+0xc2>
10008284:	1c28      	adds	r0, r5, #0
10008286:	9901      	ldr	r1, [sp, #4]
10008288:	2200      	movs	r2, #0
1000828a:	f7fc f893 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
1000828e:	2e00      	cmp	r6, #0
10008290:	d008      	beq.n	100082a4 <example_optiga_crypt_hash+0xd4>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008292:	1c30      	adds	r0, r6, #0
10008294:	f7f9 fe76 	bl	10001f84 <optiga_crypt_destroy>
10008298:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
1000829a:	d003      	beq.n	100082a4 <example_optiga_crypt_hash+0xd4>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
1000829c:	1c28      	adds	r0, r5, #0
1000829e:	4908      	ldr	r1, [pc, #32]	; (100082c0 <example_optiga_crypt_hash+0xf0>)
100082a0:	f7fc f888 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
100082a4:	b039      	add	sp, #228	; 0xe4
100082a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a8:	1000f0d2 	.word	0x1000f0d2
100082ac:	1000cae0 	.word	0x1000cae0
100082b0:	1000f028 	.word	0x1000f028
100082b4:	1000f0f3 	.word	0x1000f0f3
100082b8:	100081c5 	.word	0x100081c5
100082bc:	20002f94 	.word	0x20002f94
100082c0:	1000f03d 	.word	0x1000f03d

100082c4 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
100082c4:	4b01      	ldr	r3, [pc, #4]	; (100082cc <optiga_crypt_callback+0x8>)
100082c6:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
100082c8:	4770      	bx	lr
100082ca:	46c0      	nop			; (mov r8, r8)
100082cc:	20002f96 	.word	0x20002f96

100082d0 <example_optiga_crypt_random>:
 *
 * Example for #optiga_crypt_random
 *
 */
void example_optiga_crypt_random(void)
{
100082d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t random_data_buffer [32];
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100082d2:	4c20      	ldr	r4, [pc, #128]	; (10008354 <example_optiga_crypt_random+0x84>)
100082d4:	4f20      	ldr	r7, [pc, #128]	; (10008358 <example_optiga_crypt_random+0x88>)
 *
 * Example for #optiga_crypt_random
 *
 */
void example_optiga_crypt_random(void)
{
100082d6:	b089      	sub	sp, #36	; 0x24
    uint8_t random_data_buffer [32];
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100082d8:	4820      	ldr	r0, [pc, #128]	; (1000835c <example_optiga_crypt_random+0x8c>)
100082da:	1c21      	adds	r1, r4, #0
100082dc:	1c3a      	adds	r2, r7, #0
100082de:	f7fc f837 	bl	10004350 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
100082e2:	2000      	movs	r0, #0
100082e4:	491e      	ldr	r1, [pc, #120]	; (10008360 <example_optiga_crypt_random+0x90>)
100082e6:	1c02      	adds	r2, r0, #0
100082e8:	f7f9 fe24 	bl	10001f34 <optiga_crypt_create>
100082ec:	1e06      	subs	r6, r0, #0
        if (NULL == me)
100082ee:	d01f      	beq.n	10008330 <example_optiga_crypt_random+0x60>

        /**
         * 2. Generate Random -
         *       - Specify the Random type as TRNG
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100082f0:	2301      	movs	r3, #1
100082f2:	4d1c      	ldr	r5, [pc, #112]	; (10008364 <example_optiga_crypt_random+0x94>)

        return_status = optiga_crypt_random(me,
100082f4:	466a      	mov	r2, sp

        /**
         * 2. Generate Random -
         *       - Specify the Random type as TRNG
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100082f6:	802b      	strh	r3, [r5, #0]

        return_status = optiga_crypt_random(me,
100082f8:	2100      	movs	r1, #0
100082fa:	331f      	adds	r3, #31
100082fc:	f7f9 fe5a 	bl	10001fb4 <optiga_crypt_random>
10008300:	1e02      	subs	r2, r0, #0
                                            OPTIGA_RNG_TYPE_TRNG,
                                            random_data_buffer,
                                            sizeof(random_data_buffer));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008302:	d110      	bne.n	10008326 <example_optiga_crypt_random+0x56>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008304:	882b      	ldrh	r3, [r5, #0]
10008306:	2b01      	cmp	r3, #1
10008308:	d0fc      	beq.n	10008304 <example_optiga_crypt_random+0x34>
        {
            //Wait until the optiga_crypt_random operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000830a:	882b      	ldrh	r3, [r5, #0]
1000830c:	2b00      	cmp	r3, #0
1000830e:	d004      	beq.n	1000831a <example_optiga_crypt_random+0x4a>
        {
            return_status = optiga_lib_status;
10008310:	882a      	ldrh	r2, [r5, #0]
10008312:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;

        OPTIGA_EXAMPLE_LOG_HEX_DATA(random_data_buffer, sizeof(random_data_buffer));

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008314:	2a00      	cmp	r2, #0
10008316:	d106      	bne.n	10008326 <example_optiga_crypt_random+0x56>
10008318:	e00a      	b.n	10008330 <example_optiga_crypt_random+0x60>
            return_status = optiga_lib_status;
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

        OPTIGA_EXAMPLE_LOG_HEX_DATA(random_data_buffer, sizeof(random_data_buffer));
1000831a:	4668      	mov	r0, sp
1000831c:	2120      	movs	r1, #32
1000831e:	4a12      	ldr	r2, [pc, #72]	; (10008368 <example_optiga_crypt_random+0x98>)
10008320:	f7fc f8a8 	bl	10004474 <optiga_lib_print_array_hex_format>
10008324:	e004      	b.n	10008330 <example_optiga_crypt_random+0x60>

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008326:	1c20      	adds	r0, r4, #0
10008328:	4910      	ldr	r1, [pc, #64]	; (1000836c <example_optiga_crypt_random+0x9c>)
1000832a:	f7fc f843 	bl	100043b4 <optiga_lib_print_status>
1000832e:	e006      	b.n	1000833e <example_optiga_crypt_random+0x6e>
10008330:	1c20      	adds	r0, r4, #0
10008332:	1c39      	adds	r1, r7, #0
10008334:	2200      	movs	r2, #0
10008336:	f7fc f83d 	bl	100043b4 <optiga_lib_print_status>
    if (me)
1000833a:	2e00      	cmp	r6, #0
1000833c:	d008      	beq.n	10008350 <example_optiga_crypt_random+0x80>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
1000833e:	1c30      	adds	r0, r6, #0
10008340:	f7f9 fe20 	bl	10001f84 <optiga_crypt_destroy>
10008344:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008346:	d003      	beq.n	10008350 <example_optiga_crypt_random+0x80>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008348:	1c20      	adds	r0, r4, #0
1000834a:	4908      	ldr	r1, [pc, #32]	; (1000836c <example_optiga_crypt_random+0x9c>)
1000834c:	f7fc f832 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
10008350:	b009      	add	sp, #36	; 0x24
10008352:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008354:	1000f028 	.word	0x1000f028
10008358:	1000cae0 	.word	0x1000cae0
1000835c:	1000f113 	.word	0x1000f113
10008360:	100082c5 	.word	0x100082c5
10008364:	20002f96 	.word	0x20002f96
10008368:	1000f10d 	.word	0x1000f10d
1000836c:	1000f03d 	.word	0x1000f03d

10008370 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008370:	4b01      	ldr	r3, [pc, #4]	; (10008378 <optiga_crypt_callback+0x8>)
10008372:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008374:	4770      	bx	lr
10008376:	46c0      	nop			; (mov r8, r8)
10008378:	20002f98 	.word	0x20002f98

1000837c <example_optiga_crypt_rsa_decrypt_and_export>:
 * The below example demonstrates RSA decryption
 * #optiga_crypt_rsa_decrypt_and_export where message is provided by user
 *
 */
void example_optiga_crypt_rsa_decrypt_and_export(void)
{
1000837c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
1000837e:	b0ff      	sub	sp, #508	; 0x1fc
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;
    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;
    uint8_t encrypted_message[128];
    uint8_t message[] = {"RSA PKCS1_v1.5 Encryption of user message"};
10008380:	494a      	ldr	r1, [pc, #296]	; (100084ac <example_optiga_crypt_rsa_decrypt_and_export+0x130>)
10008382:	222a      	movs	r2, #42	; 0x2a
10008384:	a80b      	add	r0, sp, #44	; 0x2c
10008386:	f003 ff52 	bl	1000c22e <memcpy>
    uint16_t message_length = sizeof(message);
    uint16_t encrypted_message_length = sizeof(encrypted_message);
1000838a:	466a      	mov	r2, sp
1000838c:	2380      	movs	r3, #128	; 0x80
    uint8_t public_key [150];
    uint8_t decrypted_message[150];
    uint16_t decrypted_message_length = sizeof(decrypted_message);
    uint16_t public_key_length = sizeof(public_key);
1000838e:	2622      	movs	r6, #34	; 0x22
    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;
    uint8_t encrypted_message[128];
    uint8_t message[] = {"RSA PKCS1_v1.5 Encryption of user message"};
    uint16_t message_length = sizeof(message);
    uint16_t encrypted_message_length = sizeof(encrypted_message);
10008390:	83d3      	strh	r3, [r2, #30]
    uint8_t public_key [150];
    uint8_t decrypted_message[150];
    uint16_t decrypted_message_length = sizeof(decrypted_message);
10008392:	3316      	adds	r3, #22
10008394:	8413      	strh	r3, [r2, #32]
    uint16_t public_key_length = sizeof(public_key);

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008396:	4846      	ldr	r0, [pc, #280]	; (100084b0 <example_optiga_crypt_rsa_decrypt_and_export+0x134>)
10008398:	4946      	ldr	r1, [pc, #280]	; (100084b4 <example_optiga_crypt_rsa_decrypt_and_export+0x138>)
1000839a:	4a47      	ldr	r2, [pc, #284]	; (100084b8 <example_optiga_crypt_rsa_decrypt_and_export+0x13c>)
    uint16_t message_length = sizeof(message);
    uint16_t encrypted_message_length = sizeof(encrypted_message);
    uint8_t public_key [150];
    uint8_t decrypted_message[150];
    uint16_t decrypted_message_length = sizeof(decrypted_message);
    uint16_t public_key_length = sizeof(public_key);
1000839c:	446e      	add	r6, sp
1000839e:	8033      	strh	r3, [r6, #0]

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100083a0:	f7fb ffd6 	bl	10004350 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
100083a4:	2000      	movs	r0, #0
100083a6:	4945      	ldr	r1, [pc, #276]	; (100084bc <example_optiga_crypt_rsa_decrypt_and_export+0x140>)
100083a8:	1c02      	adds	r2, r0, #0
100083aa:	f7f9 fdc3 	bl	10001f34 <optiga_crypt_create>
100083ae:	1e04      	subs	r4, r0, #0
        if (NULL == me)
100083b0:	d069      	beq.n	10008486 <example_optiga_crypt_rsa_decrypt_and_export+0x10a>
         *       - Use 1024 or 2048 bit RSA key
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100083b2:	2301      	movs	r3, #1
100083b4:	4d42      	ldr	r5, [pc, #264]	; (100084c0 <example_optiga_crypt_rsa_decrypt_and_export+0x144>)
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
100083b6:	4a43      	ldr	r2, [pc, #268]	; (100084c4 <example_optiga_crypt_rsa_decrypt_and_export+0x148>)
         *       - Use 1024 or 2048 bit RSA key
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100083b8:	802b      	strh	r3, [r5, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
        return_status = optiga_crypt_rsa_generate_keypair(me,
100083ba:	af36      	add	r7, sp, #216	; 0xd8
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
100083bc:	ab07      	add	r3, sp, #28
100083be:	801a      	strh	r2, [r3, #0]
        return_status = optiga_crypt_rsa_generate_keypair(me,
100083c0:	2141      	movs	r1, #65	; 0x41
100083c2:	9300      	str	r3, [sp, #0]
100083c4:	2202      	movs	r2, #2
100083c6:	9701      	str	r7, [sp, #4]
100083c8:	9602      	str	r6, [sp, #8]
100083ca:	2300      	movs	r3, #0
100083cc:	f7f9 ffb0 	bl	10002330 <optiga_crypt_rsa_generate_keypair>
100083d0:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_ENCRYPTION,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
100083d2:	d153      	bne.n	1000847c <example_optiga_crypt_rsa_decrypt_and_export+0x100>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100083d4:	882b      	ldrh	r3, [r5, #0]
100083d6:	2b01      	cmp	r3, #1
100083d8:	d0fc      	beq.n	100083d4 <example_optiga_crypt_rsa_decrypt_and_export+0x58>
        {
            //Wait until the optiga_crypt_rsa_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100083da:	882b      	ldrh	r3, [r5, #0]
100083dc:	b29b      	uxth	r3, r3
100083de:	2b00      	cmp	r3, #0
100083e0:	d001      	beq.n	100083e6 <example_optiga_crypt_rsa_decrypt_and_export+0x6a>
        {
            //Key pair generation failed
            return_status = optiga_lib_status;
100083e2:	882a      	ldrh	r2, [r5, #0]
100083e4:	e047      	b.n	10008476 <example_optiga_crypt_rsa_decrypt_and_export+0xfa>
        /**
         * 3. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
        public_key_from_host.length = public_key_length;
100083e6:	8831      	ldrh	r1, [r6, #0]
        }
        /**
         * 3. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
100083e8:	aa09      	add	r2, sp, #36	; 0x24
        public_key_from_host.length = public_key_length;
100083ea:	8091      	strh	r1, [r2, #4]
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
100083ec:	2141      	movs	r1, #65	; 0x41
100083ee:	7191      	strb	r1, [r2, #6]
        optiga_lib_status = OPTIGA_LIB_BUSY;
100083f0:	3940      	subs	r1, #64	; 0x40
100083f2:	8029      	strh	r1, [r5, #0]

        return_status = optiga_crypt_rsa_encrypt_message(me,
100083f4:	9300      	str	r3, [sp, #0]
100083f6:	9301      	str	r3, [sp, #4]
100083f8:	231e      	movs	r3, #30
100083fa:	ae16      	add	r6, sp, #88	; 0x58
100083fc:	446b      	add	r3, sp
100083fe:	9102      	str	r1, [sp, #8]
10008400:	9203      	str	r2, [sp, #12]
10008402:	9305      	str	r3, [sp, #20]
10008404:	aa0b      	add	r2, sp, #44	; 0x2c
10008406:	9604      	str	r6, [sp, #16]
10008408:	1c20      	adds	r0, r4, #0
1000840a:	3110      	adds	r1, #16
1000840c:	232a      	movs	r3, #42	; 0x2a
        }
        /**
         * 3. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
1000840e:	9709      	str	r7, [sp, #36]	; 0x24
        public_key_from_host.length = public_key_length;
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
        optiga_lib_status = OPTIGA_LIB_BUSY;

        return_status = optiga_crypt_rsa_encrypt_message(me,
10008410:	f7f9 ffb4 	bl	1000237c <optiga_crypt_rsa_encrypt_message>
10008414:	1e02      	subs	r2, r0, #0
                                                         OPTIGA_CRYPT_HOST_DATA,
                                                         &public_key_from_host,
                                                         encrypted_message,
                                                         &encrypted_message_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008416:	d131      	bne.n	1000847c <example_optiga_crypt_rsa_decrypt_and_export+0x100>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008418:	4b29      	ldr	r3, [pc, #164]	; (100084c0 <example_optiga_crypt_rsa_decrypt_and_export+0x144>)
1000841a:	881a      	ldrh	r2, [r3, #0]
1000841c:	1c1f      	adds	r7, r3, #0
1000841e:	2a01      	cmp	r2, #1
10008420:	d0fa      	beq.n	10008418 <example_optiga_crypt_rsa_decrypt_and_export+0x9c>
        {
            //Wait until the optiga_crypt_rsa_encrypt_message operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008422:	881d      	ldrh	r5, [r3, #0]
10008424:	b2ad      	uxth	r5, r5
10008426:	2d00      	cmp	r5, #0
10008428:	d001      	beq.n	1000842e <example_optiga_crypt_rsa_decrypt_and_export+0xb2>
        {
            //Encryption failed
            return_status = optiga_lib_status;
1000842a:	881a      	ldrh	r2, [r3, #0]
1000842c:	e023      	b.n	10008476 <example_optiga_crypt_rsa_decrypt_and_export+0xfa>
        }
        /**
         * 4. RSA decryption
         */
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
1000842e:	1c20      	adds	r0, r4, #0
10008430:	2102      	movs	r1, #2
10008432:	2201      	movs	r2, #1
10008434:	f7f9 fd74 	bl	10001f20 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_RESPONSE_PROTECTION);
10008438:	1c20      	adds	r0, r4, #0
1000843a:	2101      	movs	r1, #1
1000843c:	2202      	movs	r2, #2
1000843e:	f7f9 fd6f 	bl	10001f20 <optiga_crypt_set_comms_params>

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008442:	2301      	movs	r3, #1
10008444:	803b      	strh	r3, [r7, #0]
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        return_status = optiga_crypt_rsa_decrypt_and_export(me,
10008446:	9500      	str	r5, [sp, #0]
10008448:	9501      	str	r5, [sp, #4]
1000844a:	ab07      	add	r3, sp, #28
1000844c:	881b      	ldrh	r3, [r3, #0]
1000844e:	1c32      	adds	r2, r6, #0
10008450:	9302      	str	r3, [sp, #8]
10008452:	ab5c      	add	r3, sp, #368	; 0x170
10008454:	9303      	str	r3, [sp, #12]
10008456:	ab08      	add	r3, sp, #32
10008458:	9304      	str	r3, [sp, #16]
1000845a:	1c20      	adds	r0, r4, #0
1000845c:	2111      	movs	r1, #17
1000845e:	2380      	movs	r3, #128	; 0x80
10008460:	f7f9 ffd8 	bl	10002414 <optiga_crypt_rsa_decrypt_and_export>
10008464:	1e02      	subs	r2, r0, #0
                                                            0,
                                                            optiga_key_id,
                                                            decrypted_message,
                                                            &decrypted_message_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008466:	d109      	bne.n	1000847c <example_optiga_crypt_rsa_decrypt_and_export+0x100>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008468:	883b      	ldrh	r3, [r7, #0]
1000846a:	2b01      	cmp	r3, #1
1000846c:	d0fc      	beq.n	10008468 <example_optiga_crypt_rsa_decrypt_and_export+0xec>
        {
            //Wait until the optiga_crypt_rsa_decrypt_and_export operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000846e:	883b      	ldrh	r3, [r7, #0]
10008470:	2b00      	cmp	r3, #0
10008472:	d008      	beq.n	10008486 <example_optiga_crypt_rsa_decrypt_and_export+0x10a>
        {
            //RSA Decryption failed
            return_status = optiga_lib_status;
10008474:	883a      	ldrh	r2, [r7, #0]
10008476:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008478:	2a00      	cmp	r2, #0
1000847a:	d004      	beq.n	10008486 <example_optiga_crypt_rsa_decrypt_and_export+0x10a>
1000847c:	480d      	ldr	r0, [pc, #52]	; (100084b4 <example_optiga_crypt_rsa_decrypt_and_export+0x138>)
1000847e:	4912      	ldr	r1, [pc, #72]	; (100084c8 <example_optiga_crypt_rsa_decrypt_and_export+0x14c>)
10008480:	f7fb ff98 	bl	100043b4 <optiga_lib_print_status>
10008484:	e006      	b.n	10008494 <example_optiga_crypt_rsa_decrypt_and_export+0x118>
10008486:	480b      	ldr	r0, [pc, #44]	; (100084b4 <example_optiga_crypt_rsa_decrypt_and_export+0x138>)
10008488:	490b      	ldr	r1, [pc, #44]	; (100084b8 <example_optiga_crypt_rsa_decrypt_and_export+0x13c>)
1000848a:	2200      	movs	r2, #0
1000848c:	f7fb ff92 	bl	100043b4 <optiga_lib_print_status>
    if (me)
10008490:	2c00      	cmp	r4, #0
10008492:	d008      	beq.n	100084a6 <example_optiga_crypt_rsa_decrypt_and_export+0x12a>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008494:	1c20      	adds	r0, r4, #0
10008496:	f7f9 fd75 	bl	10001f84 <optiga_crypt_destroy>
1000849a:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
1000849c:	d003      	beq.n	100084a6 <example_optiga_crypt_rsa_decrypt_and_export+0x12a>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
1000849e:	4805      	ldr	r0, [pc, #20]	; (100084b4 <example_optiga_crypt_rsa_decrypt_and_export+0x138>)
100084a0:	4909      	ldr	r1, [pc, #36]	; (100084c8 <example_optiga_crypt_rsa_decrypt_and_export+0x14c>)
100084a2:	f7fb ff87 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
100084a6:	b07f      	add	sp, #508	; 0x1fc
100084a8:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100084aa:	46c0      	nop			; (mov r8, r8)
100084ac:	1000f15c 	.word	0x1000f15c
100084b0:	1000f186 	.word	0x1000f186
100084b4:	1000f028 	.word	0x1000f028
100084b8:	1000cae0 	.word	0x1000cae0
100084bc:	10008371 	.word	0x10008371
100084c0:	20002f98 	.word	0x20002f98
100084c4:	ffffe0fc 	.word	0xffffe0fc
100084c8:	1000f03d 	.word	0x1000f03d

100084cc <example_optiga_crypt_rsa_decrypt_and_store>:
 * The below example demonstrates RSA decryption
 * #optiga_crypt_rsa_decrypt_and_store where decrypted message get stored in session context
 *
 */
void example_optiga_crypt_rsa_decrypt_and_store(void)
{
100084cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100084ce:	b0cf      	sub	sp, #316	; 0x13c
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;
    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;
    uint8_t encrypted_message[128];
    uint16_t encrypted_message_length = sizeof(encrypted_message);
100084d0:	466a      	mov	r2, sp
100084d2:	2380      	movs	r3, #128	; 0x80
100084d4:	8293      	strh	r3, [r2, #20]
    uint8_t public_key [150];
    uint16_t public_key_length = sizeof(public_key);
100084d6:	3316      	adds	r3, #22
100084d8:	82d3      	strh	r3, [r2, #22]
    const uint8_t optional_data[] = {0x01, 0x02};
100084da:	494f      	ldr	r1, [pc, #316]	; (10008618 <example_optiga_crypt_rsa_decrypt_and_store+0x14c>)
100084dc:	2202      	movs	r2, #2
100084de:	a804      	add	r0, sp, #16
100084e0:	f003 fea5 	bl	1000c22e <memcpy>

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100084e4:	4d4d      	ldr	r5, [pc, #308]	; (1000861c <example_optiga_crypt_rsa_decrypt_and_store+0x150>)
100084e6:	484e      	ldr	r0, [pc, #312]	; (10008620 <example_optiga_crypt_rsa_decrypt_and_store+0x154>)
100084e8:	1c29      	adds	r1, r5, #0
100084ea:	4a4e      	ldr	r2, [pc, #312]	; (10008624 <example_optiga_crypt_rsa_decrypt_and_store+0x158>)
100084ec:	f7fb ff30 	bl	10004350 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
100084f0:	2000      	movs	r0, #0
100084f2:	494d      	ldr	r1, [pc, #308]	; (10008628 <example_optiga_crypt_rsa_decrypt_and_store+0x15c>)
100084f4:	1c02      	adds	r2, r0, #0
100084f6:	f7f9 fd1d 	bl	10001f34 <optiga_crypt_create>
100084fa:	1e04      	subs	r4, r0, #0
        if (NULL == me)
100084fc:	d100      	bne.n	10008500 <example_optiga_crypt_rsa_decrypt_and_store+0x34>
100084fe:	e078      	b.n	100085f2 <example_optiga_crypt_rsa_decrypt_and_store+0x126>
         *       - Use 1024 or 2048 bit RSA key
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008500:	2301      	movs	r3, #1
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10008502:	466a      	mov	r2, sp
         *       - Use 1024 or 2048 bit RSA key
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008504:	4e49      	ldr	r6, [pc, #292]	; (1000862c <example_optiga_crypt_rsa_decrypt_and_store+0x160>)
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
        return_status = optiga_crypt_rsa_generate_keypair(me,
10008506:	2141      	movs	r1, #65	; 0x41
         *       - Use 1024 or 2048 bit RSA key
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008508:	8033      	strh	r3, [r6, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
1000850a:	4b49      	ldr	r3, [pc, #292]	; (10008630 <example_optiga_crypt_rsa_decrypt_and_store+0x164>)
1000850c:	8253      	strh	r3, [r2, #18]
        return_status = optiga_crypt_rsa_generate_keypair(me,
1000850e:	2312      	movs	r3, #18
10008510:	446b      	add	r3, sp
10008512:	9300      	str	r3, [sp, #0]
10008514:	ab28      	add	r3, sp, #160	; 0xa0
10008516:	9301      	str	r3, [sp, #4]
10008518:	2316      	movs	r3, #22
1000851a:	446b      	add	r3, sp
1000851c:	9302      	str	r3, [sp, #8]
1000851e:	2202      	movs	r2, #2
10008520:	2300      	movs	r3, #0
10008522:	f7f9 ff05 	bl	10002330 <optiga_crypt_rsa_generate_keypair>
10008526:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_ENCRYPTION,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
10008528:	d15e      	bne.n	100085e8 <example_optiga_crypt_rsa_decrypt_and_store+0x11c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000852a:	8833      	ldrh	r3, [r6, #0]
1000852c:	2b01      	cmp	r3, #1
1000852e:	d0fc      	beq.n	1000852a <example_optiga_crypt_rsa_decrypt_and_store+0x5e>
        {
            //Wait until the optiga_crypt_rsa_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008530:	8833      	ldrh	r3, [r6, #0]
10008532:	2b00      	cmp	r3, #0
10008534:	d001      	beq.n	1000853a <example_optiga_crypt_rsa_decrypt_and_store+0x6e>
        {
            //Key pair generation failed
            return_status = optiga_lib_status;
10008536:	8832      	ldrh	r2, [r6, #0]
10008538:	e053      	b.n	100085e2 <example_optiga_crypt_rsa_decrypt_and_store+0x116>
            break;
        }
        /**
         * 3. Generate 0x46 byte RSA Pre master secret which is stored in acquired session OID
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000853a:	2301      	movs	r3, #1
        return_status = optiga_crypt_rsa_generate_pre_master_secret(me,
1000853c:	2202      	movs	r2, #2
            break;
        }
        /**
         * 3. Generate 0x46 byte RSA Pre master secret which is stored in acquired session OID
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000853e:	8033      	strh	r3, [r6, #0]
        return_status = optiga_crypt_rsa_generate_pre_master_secret(me,
10008540:	1c20      	adds	r0, r4, #0
10008542:	a904      	add	r1, sp, #16
10008544:	331d      	adds	r3, #29
10008546:	f7f9 ffab 	bl	100024a0 <optiga_crypt_rsa_generate_pre_master_secret>
1000854a:	1e02      	subs	r2, r0, #0
                                                                    optional_data,
                                                                    sizeof(optional_data),
                                                                    30);

        if (OPTIGA_LIB_SUCCESS != return_status)
1000854c:	d14c      	bne.n	100085e8 <example_optiga_crypt_rsa_decrypt_and_store+0x11c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000854e:	4b37      	ldr	r3, [pc, #220]	; (1000862c <example_optiga_crypt_rsa_decrypt_and_store+0x160>)
10008550:	881a      	ldrh	r2, [r3, #0]
10008552:	2a01      	cmp	r2, #1
10008554:	d0fb      	beq.n	1000854e <example_optiga_crypt_rsa_decrypt_and_store+0x82>
        {
            //Wait until the optiga_crypt_random operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008556:	881e      	ldrh	r6, [r3, #0]
10008558:	b2b6      	uxth	r6, r6
1000855a:	2e00      	cmp	r6, #0
1000855c:	d140      	bne.n	100085e0 <example_optiga_crypt_rsa_decrypt_and_store+0x114>
        {
            return_status = optiga_lib_status;
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
1000855e:	2701      	movs	r7, #1
        /**
         * 4. Encrypt(RSA) the data stored in session OID
         */

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008560:	1c20      	adds	r0, r4, #0
10008562:	1c3a      	adds	r2, r7, #0
10008564:	2102      	movs	r1, #2
        {
            return_status = optiga_lib_status;
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008566:	801f      	strh	r7, [r3, #0]
        /**
         * 4. Encrypt(RSA) the data stored in session OID
         */

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008568:	f7f9 fcda 	bl	10001f20 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
1000856c:	1c39      	adds	r1, r7, #0
1000856e:	1c3a      	adds	r2, r7, #0
10008570:	1c20      	adds	r0, r4, #0
10008572:	f7f9 fcd5 	bl	10001f20 <optiga_crypt_set_comms_params>

        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10008576:	aa28      	add	r2, sp, #160	; 0xa0
10008578:	9206      	str	r2, [sp, #24]
        public_key_from_host.length = public_key_length;
1000857a:	466a      	mov	r2, sp
1000857c:	8ad2      	ldrh	r2, [r2, #22]
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);

        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
1000857e:	ab06      	add	r3, sp, #24
        public_key_from_host.length = public_key_length;
10008580:	809a      	strh	r2, [r3, #4]
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
10008582:	2241      	movs	r2, #65	; 0x41
10008584:	719a      	strb	r2, [r3, #6]

        return_status = optiga_crypt_rsa_encrypt_session(me,
10008586:	9700      	str	r7, [sp, #0]
10008588:	9301      	str	r3, [sp, #4]
1000858a:	af08      	add	r7, sp, #32
1000858c:	ab05      	add	r3, sp, #20
1000858e:	9303      	str	r3, [sp, #12]
10008590:	1c32      	adds	r2, r6, #0
10008592:	9702      	str	r7, [sp, #8]
10008594:	1c20      	adds	r0, r4, #0
10008596:	2111      	movs	r1, #17
10008598:	1c33      	adds	r3, r6, #0
1000859a:	f7f9 ff13 	bl	100023c4 <optiga_crypt_rsa_encrypt_session>
1000859e:	1e02      	subs	r2, r0, #0
                                                         OPTIGA_CRYPT_HOST_DATA,
                                                         &public_key_from_host,
                                                         encrypted_message,
                                                         &encrypted_message_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
100085a0:	d122      	bne.n	100085e8 <example_optiga_crypt_rsa_decrypt_and_store+0x11c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100085a2:	4b22      	ldr	r3, [pc, #136]	; (1000862c <example_optiga_crypt_rsa_decrypt_and_store+0x160>)
100085a4:	881a      	ldrh	r2, [r3, #0]
100085a6:	2a01      	cmp	r2, #1
100085a8:	d0fb      	beq.n	100085a2 <example_optiga_crypt_rsa_decrypt_and_store+0xd6>
        {
            //Wait until the optiga_crypt_rsa_encrypt_session operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100085aa:	881a      	ldrh	r2, [r3, #0]
100085ac:	b292      	uxth	r2, r2
100085ae:	2a00      	cmp	r2, #0
100085b0:	d116      	bne.n	100085e0 <example_optiga_crypt_rsa_decrypt_and_store+0x114>
            break;
        }
        /**
         * 5. RSA decryption
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100085b2:	2101      	movs	r1, #1
100085b4:	8019      	strh	r1, [r3, #0]
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        return_status = optiga_crypt_rsa_decrypt_and_store(me,
100085b6:	466b      	mov	r3, sp
100085b8:	8a9b      	ldrh	r3, [r3, #20]
100085ba:	9200      	str	r2, [sp, #0]
100085bc:	9201      	str	r2, [sp, #4]
100085be:	466a      	mov	r2, sp
100085c0:	8a52      	ldrh	r2, [r2, #18]
100085c2:	1c20      	adds	r0, r4, #0
100085c4:	9202      	str	r2, [sp, #8]
100085c6:	3110      	adds	r1, #16
100085c8:	1c3a      	adds	r2, r7, #0
100085ca:	f7f9 ff4d 	bl	10002468 <optiga_crypt_rsa_decrypt_and_store>
100085ce:	1e02      	subs	r2, r0, #0
                                                           encrypted_message,
                                                           encrypted_message_length,
                                                           NULL,
                                                           0,
                                                           optiga_key_id);
        if (OPTIGA_LIB_SUCCESS != return_status)
100085d0:	d10a      	bne.n	100085e8 <example_optiga_crypt_rsa_decrypt_and_store+0x11c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100085d2:	4b16      	ldr	r3, [pc, #88]	; (1000862c <example_optiga_crypt_rsa_decrypt_and_store+0x160>)
100085d4:	881a      	ldrh	r2, [r3, #0]
100085d6:	2a01      	cmp	r2, #1
100085d8:	d0fb      	beq.n	100085d2 <example_optiga_crypt_rsa_decrypt_and_store+0x106>
        {
            //Wait until the optiga_crypt_rsa_decrypt_and_store operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100085da:	881a      	ldrh	r2, [r3, #0]
100085dc:	2a00      	cmp	r2, #0
100085de:	d008      	beq.n	100085f2 <example_optiga_crypt_rsa_decrypt_and_store+0x126>
        {
            //RSA Decryption failed
            return_status = optiga_lib_status;
100085e0:	881a      	ldrh	r2, [r3, #0]
100085e2:	b292      	uxth	r2, r2
        }

        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100085e4:	2a00      	cmp	r2, #0
100085e6:	d004      	beq.n	100085f2 <example_optiga_crypt_rsa_decrypt_and_store+0x126>
100085e8:	1c28      	adds	r0, r5, #0
100085ea:	4912      	ldr	r1, [pc, #72]	; (10008634 <example_optiga_crypt_rsa_decrypt_and_store+0x168>)
100085ec:	f7fb fee2 	bl	100043b4 <optiga_lib_print_status>
100085f0:	e006      	b.n	10008600 <example_optiga_crypt_rsa_decrypt_and_store+0x134>
100085f2:	1c28      	adds	r0, r5, #0
100085f4:	490b      	ldr	r1, [pc, #44]	; (10008624 <example_optiga_crypt_rsa_decrypt_and_store+0x158>)
100085f6:	2200      	movs	r2, #0
100085f8:	f7fb fedc 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
100085fc:	2c00      	cmp	r4, #0
100085fe:	d008      	beq.n	10008612 <example_optiga_crypt_rsa_decrypt_and_store+0x146>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008600:	1c20      	adds	r0, r4, #0
10008602:	f7f9 fcbf 	bl	10001f84 <optiga_crypt_destroy>
10008606:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008608:	d003      	beq.n	10008612 <example_optiga_crypt_rsa_decrypt_and_store+0x146>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
1000860a:	1c28      	adds	r0, r5, #0
1000860c:	4909      	ldr	r1, [pc, #36]	; (10008634 <example_optiga_crypt_rsa_decrypt_and_store+0x168>)
1000860e:	f7fb fed1 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
10008612:	b04f      	add	sp, #316	; 0x13c
10008614:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008616:	46c0      	nop			; (mov r8, r8)
10008618:	1000f12f 	.word	0x1000f12f
1000861c:	1000f028 	.word	0x1000f028
10008620:	1000f131 	.word	0x1000f131
10008624:	1000cae0 	.word	0x1000cae0
10008628:	10008371 	.word	0x10008371
1000862c:	20002f98 	.word	0x20002f98
10008630:	ffffe0fc 	.word	0xffffe0fc
10008634:	1000f03d 	.word	0x1000f03d

10008638 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008638:	4b01      	ldr	r3, [pc, #4]	; (10008640 <optiga_crypt_callback+0x8>)
1000863a:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
1000863c:	4770      	bx	lr
1000863e:	46c0      	nop			; (mov r8, r8)
10008640:	20002f9a 	.word	0x20002f9a

10008644 <example_optiga_crypt_rsa_encrypt_message>:
 * The below example demonstrates RSA encryption
 * #optiga_crypt_rsa_encrypt_message where message is provided by user
 *
 */
void example_optiga_crypt_rsa_encrypt_message(void)
{
10008644:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = 0;
    optiga_rsa_encryption_scheme_t encryption_scheme;
    uint8_t encrypted_message[128];
    uint16_t encrypted_message_length = sizeof(encrypted_message);
10008646:	271e      	movs	r7, #30
 * The below example demonstrates RSA encryption
 * #optiga_crypt_rsa_encrypt_message where message is provided by user
 *
 */
void example_optiga_crypt_rsa_encrypt_message(void)
{
10008648:	b0ad      	sub	sp, #180	; 0xb4
    optiga_lib_status_t return_status = 0;
    optiga_rsa_encryption_scheme_t encryption_scheme;
    uint8_t encrypted_message[128];
    uint16_t encrypted_message_length = sizeof(encrypted_message);
1000864a:	ab02      	add	r3, sp, #8
1000864c:	18ff      	adds	r7, r7, r3
1000864e:	2380      	movs	r3, #128	; 0x80
    public_key_from_host_t public_key_from_host;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008650:	4d24      	ldr	r5, [pc, #144]	; (100086e4 <example_optiga_crypt_rsa_encrypt_message+0xa0>)
10008652:	4c25      	ldr	r4, [pc, #148]	; (100086e8 <example_optiga_crypt_rsa_encrypt_message+0xa4>)
10008654:	4825      	ldr	r0, [pc, #148]	; (100086ec <example_optiga_crypt_rsa_encrypt_message+0xa8>)
10008656:	1c21      	adds	r1, r4, #0
10008658:	1c2a      	adds	r2, r5, #0
void example_optiga_crypt_rsa_encrypt_message(void)
{
    optiga_lib_status_t return_status = 0;
    optiga_rsa_encryption_scheme_t encryption_scheme;
    uint8_t encrypted_message[128];
    uint16_t encrypted_message_length = sizeof(encrypted_message);
1000865a:	803b      	strh	r3, [r7, #0]
    public_key_from_host_t public_key_from_host;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000865c:	f7fb fe78 	bl	10004350 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008660:	2000      	movs	r0, #0
10008662:	4923      	ldr	r1, [pc, #140]	; (100086f0 <example_optiga_crypt_rsa_encrypt_message+0xac>)
10008664:	1c02      	adds	r2, r0, #0
10008666:	f7f9 fc65 	bl	10001f34 <optiga_crypt_create>
1000866a:	9507      	str	r5, [sp, #28]
1000866c:	1e06      	subs	r6, r0, #0
        if (NULL == me)
1000866e:	d027      	beq.n	100086c0 <example_optiga_crypt_rsa_encrypt_message+0x7c>

        /**
         * 2. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10008670:	4a20      	ldr	r2, [pc, #128]	; (100086f4 <example_optiga_crypt_rsa_encrypt_message+0xb0>)
        public_key_from_host.length = sizeof(public_key);
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_crypt_rsa_encrypt_message(me,
10008672:	2100      	movs	r1, #0

        /**
         * 2. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10008674:	920a      	str	r2, [sp, #40]	; 0x28
        public_key_from_host.length = sizeof(public_key);
10008676:	2291      	movs	r2, #145	; 0x91

        /**
         * 2. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10008678:	ab0a      	add	r3, sp, #40	; 0x28
        public_key_from_host.length = sizeof(public_key);
1000867a:	809a      	strh	r2, [r3, #4]
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000867c:	4d1e      	ldr	r5, [pc, #120]	; (100086f8 <example_optiga_crypt_rsa_encrypt_message+0xb4>)
         * 2. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
        public_key_from_host.length = sizeof(public_key);
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
1000867e:	3a50      	subs	r2, #80	; 0x50
10008680:	719a      	strb	r2, [r3, #6]
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008682:	3a40      	subs	r2, #64	; 0x40
10008684:	802a      	strh	r2, [r5, #0]
        return_status = optiga_crypt_rsa_encrypt_message(me,
10008686:	9303      	str	r3, [sp, #12]
10008688:	ab0c      	add	r3, sp, #48	; 0x30
1000868a:	9100      	str	r1, [sp, #0]
1000868c:	9101      	str	r1, [sp, #4]
1000868e:	9202      	str	r2, [sp, #8]
10008690:	9304      	str	r3, [sp, #16]
10008692:	4a1a      	ldr	r2, [pc, #104]	; (100086fc <example_optiga_crypt_rsa_encrypt_message+0xb8>)
10008694:	9705      	str	r7, [sp, #20]
10008696:	3111      	adds	r1, #17
10008698:	232a      	movs	r3, #42	; 0x2a
1000869a:	f7f9 fe6f 	bl	1000237c <optiga_crypt_rsa_encrypt_message>
1000869e:	1e02      	subs	r2, r0, #0
                                                            OPTIGA_CRYPT_HOST_DATA,
                                                            &public_key_from_host,
                                                            encrypted_message,
                                                            &encrypted_message_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
100086a0:	d109      	bne.n	100086b6 <example_optiga_crypt_rsa_encrypt_message+0x72>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100086a2:	882b      	ldrh	r3, [r5, #0]
100086a4:	2b01      	cmp	r3, #1
100086a6:	d0fc      	beq.n	100086a2 <example_optiga_crypt_rsa_encrypt_message+0x5e>
        {
            //Wait until the optiga_crypt_rsa_encrypt_message operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100086a8:	882b      	ldrh	r3, [r5, #0]
100086aa:	2b00      	cmp	r3, #0
100086ac:	d008      	beq.n	100086c0 <example_optiga_crypt_rsa_encrypt_message+0x7c>
        {
            //RSA Encryption failed
            return_status = optiga_lib_status;
100086ae:	882a      	ldrh	r2, [r5, #0]
100086b0:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100086b2:	2a00      	cmp	r2, #0
100086b4:	d004      	beq.n	100086c0 <example_optiga_crypt_rsa_encrypt_message+0x7c>
100086b6:	1c20      	adds	r0, r4, #0
100086b8:	4911      	ldr	r1, [pc, #68]	; (10008700 <example_optiga_crypt_rsa_encrypt_message+0xbc>)
100086ba:	f7fb fe7b 	bl	100043b4 <optiga_lib_print_status>
100086be:	e006      	b.n	100086ce <example_optiga_crypt_rsa_encrypt_message+0x8a>
100086c0:	1c20      	adds	r0, r4, #0
100086c2:	9907      	ldr	r1, [sp, #28]
100086c4:	2200      	movs	r2, #0
100086c6:	f7fb fe75 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
100086ca:	2e00      	cmp	r6, #0
100086cc:	d008      	beq.n	100086e0 <example_optiga_crypt_rsa_encrypt_message+0x9c>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
100086ce:	1c30      	adds	r0, r6, #0
100086d0:	f7f9 fc58 	bl	10001f84 <optiga_crypt_destroy>
100086d4:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
100086d6:	d003      	beq.n	100086e0 <example_optiga_crypt_rsa_encrypt_message+0x9c>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100086d8:	1c20      	adds	r0, r4, #0
100086da:	4909      	ldr	r1, [pc, #36]	; (10008700 <example_optiga_crypt_rsa_encrypt_message+0xbc>)
100086dc:	f7fb fe6a 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
100086e0:	b02d      	add	sp, #180	; 0xb4
100086e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100086e4:	1000cae0 	.word	0x1000cae0
100086e8:	1000f028 	.word	0x1000f028
100086ec:	1000f1b2 	.word	0x1000f1b2
100086f0:	10008639 	.word	0x10008639
100086f4:	20001ba0 	.word	0x20001ba0
100086f8:	20002f9a 	.word	0x20002f9a
100086fc:	20001b76 	.word	0x20001b76
10008700:	1000f03d 	.word	0x1000f03d

10008704 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008704:	4b01      	ldr	r3, [pc, #4]	; (1000870c <optiga_crypt_callback+0x8>)
10008706:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008708:	4770      	bx	lr
1000870a:	46c0      	nop			; (mov r8, r8)
1000870c:	20002f9c 	.word	0x20002f9c

10008710 <example_optiga_crypt_rsa_encrypt_session>:
 * The below example demonstrates RSA encryption
 * #optiga_crypt_rsa_encrypt_session where session data is encrypted
 *
 */
void example_optiga_crypt_rsa_encrypt_session(void)
{
10008710:	b5f0      	push	{r4, r5, r6, r7, lr}
10008712:	b0cf      	sub	sp, #316	; 0x13c
    optiga_key_id_t optiga_key_id;
    optiga_rsa_encryption_scheme_t encryption_scheme;

    uint8_t public_key [150];
    uint8_t encrypted_message[128];
    uint16_t encrypted_message_length = sizeof(encrypted_message);
10008714:	466a      	mov	r2, sp
10008716:	2380      	movs	r3, #128	; 0x80
10008718:	8293      	strh	r3, [r2, #20]
    uint16_t public_key_length = sizeof(public_key);
1000871a:	3316      	adds	r3, #22
1000871c:	82d3      	strh	r3, [r2, #22]
    public_key_from_host_t public_key_from_host;
    const uint8_t optional_data[2] = {0x01, 0x02};
1000871e:	4941      	ldr	r1, [pc, #260]	; (10008824 <example_optiga_crypt_rsa_encrypt_session+0x114>)
10008720:	2202      	movs	r2, #2
10008722:	a804      	add	r0, sp, #16
10008724:	f003 fd83 	bl	1000c22e <memcpy>
    uint16_t optional_data_length = sizeof(optional_data);

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008728:	4e3f      	ldr	r6, [pc, #252]	; (10008828 <example_optiga_crypt_rsa_encrypt_session+0x118>)
1000872a:	4840      	ldr	r0, [pc, #256]	; (1000882c <example_optiga_crypt_rsa_encrypt_session+0x11c>)
1000872c:	1c31      	adds	r1, r6, #0
1000872e:	4a40      	ldr	r2, [pc, #256]	; (10008830 <example_optiga_crypt_rsa_encrypt_session+0x120>)
10008730:	f7fb fe0e 	bl	10004350 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008734:	2000      	movs	r0, #0
10008736:	493f      	ldr	r1, [pc, #252]	; (10008834 <example_optiga_crypt_rsa_encrypt_session+0x124>)
10008738:	1c02      	adds	r2, r0, #0
1000873a:	f7f9 fbfb 	bl	10001f34 <optiga_crypt_create>
1000873e:	1e04      	subs	r4, r0, #0
        if (NULL == me)
10008740:	d05e      	beq.n	10008800 <example_optiga_crypt_rsa_encrypt_session+0xf0>

        /**
         * 2. Generate 1024 bit RSA Key pair
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10008742:	2712      	movs	r7, #18
        }

        /**
         * 2. Generate 1024 bit RSA Key pair
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008744:	2101      	movs	r1, #1
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10008746:	4b3c      	ldr	r3, [pc, #240]	; (10008838 <example_optiga_crypt_rsa_encrypt_session+0x128>)
        }

        /**
         * 2. Generate 1024 bit RSA Key pair
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008748:	4d3c      	ldr	r5, [pc, #240]	; (1000883c <example_optiga_crypt_rsa_encrypt_session+0x12c>)
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
1000874a:	446f      	add	r7, sp
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
1000874c:	2200      	movs	r2, #0
        }

        /**
         * 2. Generate 1024 bit RSA Key pair
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000874e:	8029      	strh	r1, [r5, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10008750:	803b      	strh	r3, [r7, #0]
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
10008752:	f7f9 fbe5 	bl	10001f20 <optiga_crypt_set_comms_params>
        return_status = optiga_crypt_rsa_generate_keypair(me,
10008756:	ab28      	add	r3, sp, #160	; 0xa0
10008758:	9301      	str	r3, [sp, #4]
1000875a:	2316      	movs	r3, #22
1000875c:	446b      	add	r3, sp
1000875e:	9302      	str	r3, [sp, #8]
10008760:	2210      	movs	r2, #16
10008762:	9700      	str	r7, [sp, #0]
10008764:	1c20      	adds	r0, r4, #0
10008766:	2141      	movs	r1, #65	; 0x41
10008768:	2300      	movs	r3, #0
1000876a:	f7f9 fde1 	bl	10002330 <optiga_crypt_rsa_generate_keypair>
1000876e:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_SIGN,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
10008770:	d141      	bne.n	100087f6 <example_optiga_crypt_rsa_encrypt_session+0xe6>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008772:	882b      	ldrh	r3, [r5, #0]
10008774:	2b01      	cmp	r3, #1
10008776:	d0fc      	beq.n	10008772 <example_optiga_crypt_rsa_encrypt_session+0x62>
        {
            //Wait until the optiga_crypt_rsa_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008778:	882b      	ldrh	r3, [r5, #0]
1000877a:	2b00      	cmp	r3, #0
1000877c:	d001      	beq.n	10008782 <example_optiga_crypt_rsa_encrypt_session+0x72>
        {
            //Key pair generation failed
            return_status = optiga_lib_status;
1000877e:	882a      	ldrh	r2, [r5, #0]
10008780:	e036      	b.n	100087f0 <example_optiga_crypt_rsa_encrypt_session+0xe0>
        }

        /**
         * 3. Generate 48 byte RSA Pre master secret in acquired session OID
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008782:	2301      	movs	r3, #1
        return_status = optiga_crypt_rsa_generate_pre_master_secret(me,
10008784:	2202      	movs	r2, #2
        }

        /**
         * 3. Generate 48 byte RSA Pre master secret in acquired session OID
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008786:	802b      	strh	r3, [r5, #0]
        return_status = optiga_crypt_rsa_generate_pre_master_secret(me,
10008788:	1c20      	adds	r0, r4, #0
1000878a:	a904      	add	r1, sp, #16
1000878c:	332f      	adds	r3, #47	; 0x2f
1000878e:	f7f9 fe87 	bl	100024a0 <optiga_crypt_rsa_generate_pre_master_secret>
10008792:	1e02      	subs	r2, r0, #0
                                                                    optional_data,
                                                                    optional_data_length,
                                                                    48);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008794:	d12f      	bne.n	100087f6 <example_optiga_crypt_rsa_encrypt_session+0xe6>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008796:	4b29      	ldr	r3, [pc, #164]	; (1000883c <example_optiga_crypt_rsa_encrypt_session+0x12c>)
10008798:	881a      	ldrh	r2, [r3, #0]
1000879a:	2a01      	cmp	r2, #1
1000879c:	d0fb      	beq.n	10008796 <example_optiga_crypt_rsa_encrypt_session+0x86>
        {
            //Wait until the optiga_crypt_rsa_generate_pre_master_secret operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000879e:	881d      	ldrh	r5, [r3, #0]
100087a0:	b2ad      	uxth	r5, r5
100087a2:	2d00      	cmp	r5, #0
100087a4:	d123      	bne.n	100087ee <example_optiga_crypt_rsa_encrypt_session+0xde>
        {
            return_status = optiga_lib_status;
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
100087a6:	2701      	movs	r7, #1
        /**
         * 4. Encrypt (RSA) the data in session OID
         */

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
100087a8:	1c20      	adds	r0, r4, #0
100087aa:	2102      	movs	r1, #2
100087ac:	1c3a      	adds	r2, r7, #0
        {
            return_status = optiga_lib_status;
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
100087ae:	801f      	strh	r7, [r3, #0]
        /**
         * 4. Encrypt (RSA) the data in session OID
         */

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
100087b0:	f7f9 fbb6 	bl	10001f20 <optiga_crypt_set_comms_params>

        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
100087b4:	aa28      	add	r2, sp, #160	; 0xa0
100087b6:	9206      	str	r2, [sp, #24]
        public_key_from_host.length = public_key_length;
100087b8:	466a      	mov	r2, sp
100087ba:	8ad2      	ldrh	r2, [r2, #22]

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);

        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
100087bc:	ab06      	add	r3, sp, #24
        public_key_from_host.length = public_key_length;
100087be:	809a      	strh	r2, [r3, #4]
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
100087c0:	2241      	movs	r2, #65	; 0x41
100087c2:	719a      	strb	r2, [r3, #6]
        // Default protection level for this API is OPTIGA_COMMS_COMMAND_PROTECTION
        return_status = optiga_crypt_rsa_encrypt_session(me,
100087c4:	9301      	str	r3, [sp, #4]
100087c6:	ab08      	add	r3, sp, #32
100087c8:	9302      	str	r3, [sp, #8]
100087ca:	ab05      	add	r3, sp, #20
100087cc:	9303      	str	r3, [sp, #12]
100087ce:	1c2a      	adds	r2, r5, #0
100087d0:	9700      	str	r7, [sp, #0]
100087d2:	1c20      	adds	r0, r4, #0
100087d4:	2111      	movs	r1, #17
100087d6:	1c2b      	adds	r3, r5, #0
100087d8:	f7f9 fdf4 	bl	100023c4 <optiga_crypt_rsa_encrypt_session>
100087dc:	1e02      	subs	r2, r0, #0
                                                         OPTIGA_CRYPT_HOST_DATA,
                                                         &public_key_from_host,
                                                         encrypted_message,
                                                         &encrypted_message_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
100087de:	d10a      	bne.n	100087f6 <example_optiga_crypt_rsa_encrypt_session+0xe6>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100087e0:	4b16      	ldr	r3, [pc, #88]	; (1000883c <example_optiga_crypt_rsa_encrypt_session+0x12c>)
100087e2:	881a      	ldrh	r2, [r3, #0]
100087e4:	2a01      	cmp	r2, #1
100087e6:	d0fb      	beq.n	100087e0 <example_optiga_crypt_rsa_encrypt_session+0xd0>
        {
            //Wait until the optiga_crypt_rsa_encrypt_session operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100087e8:	881a      	ldrh	r2, [r3, #0]
100087ea:	2a00      	cmp	r2, #0
100087ec:	d008      	beq.n	10008800 <example_optiga_crypt_rsa_encrypt_session+0xf0>
        {
            //RSA Encryption failed
            return_status = optiga_lib_status;
100087ee:	881a      	ldrh	r2, [r3, #0]
100087f0:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100087f2:	2a00      	cmp	r2, #0
100087f4:	d004      	beq.n	10008800 <example_optiga_crypt_rsa_encrypt_session+0xf0>
100087f6:	1c30      	adds	r0, r6, #0
100087f8:	4911      	ldr	r1, [pc, #68]	; (10008840 <example_optiga_crypt_rsa_encrypt_session+0x130>)
100087fa:	f7fb fddb 	bl	100043b4 <optiga_lib_print_status>
100087fe:	e006      	b.n	1000880e <example_optiga_crypt_rsa_encrypt_session+0xfe>
10008800:	1c30      	adds	r0, r6, #0
10008802:	490b      	ldr	r1, [pc, #44]	; (10008830 <example_optiga_crypt_rsa_encrypt_session+0x120>)
10008804:	2200      	movs	r2, #0
10008806:	f7fb fdd5 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
1000880a:	2c00      	cmp	r4, #0
1000880c:	d008      	beq.n	10008820 <example_optiga_crypt_rsa_encrypt_session+0x110>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
1000880e:	1c20      	adds	r0, r4, #0
10008810:	f7f9 fbb8 	bl	10001f84 <optiga_crypt_destroy>
10008814:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008816:	d003      	beq.n	10008820 <example_optiga_crypt_rsa_encrypt_session+0x110>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008818:	1c30      	adds	r0, r6, #0
1000881a:	4909      	ldr	r1, [pc, #36]	; (10008840 <example_optiga_crypt_rsa_encrypt_session+0x130>)
1000881c:	f7fb fdca 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
10008820:	b04f      	add	sp, #316	; 0x13c
10008822:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008824:	1000f1db 	.word	0x1000f1db
10008828:	1000f028 	.word	0x1000f028
1000882c:	1000f1dd 	.word	0x1000f1dd
10008830:	1000cae0 	.word	0x1000cae0
10008834:	10008705 	.word	0x10008705
10008838:	ffffe0fc 	.word	0xffffe0fc
1000883c:	20002f9c 	.word	0x20002f9c
10008840:	1000f03d 	.word	0x1000f03d

10008844 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008844:	4b01      	ldr	r3, [pc, #4]	; (1000884c <optiga_crypt_callback+0x8>)
10008846:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008848:	4770      	bx	lr
1000884a:	46c0      	nop			; (mov r8, r8)
1000884c:	20002f9e 	.word	0x20002f9e

10008850 <example_optiga_crypt_rsa_generate_keypair>:
 * The below example demonstrates the generation of
 * RSA Key pair using #optiga_crypt_rsa_generate_keypair.
 *
 */
void example_optiga_crypt_rsa_generate_keypair(void)
{
10008850:	b5f0      	push	{r4, r5, r6, r7, lr}
    * E.g
    * For 1024 bit key : modulus(128 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    * For 2048 bit key : modulus(256 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    */
    uint8_t public_key [150];
    uint16_t public_key_length = sizeof(public_key);
10008852:	2716      	movs	r7, #22
 * The below example demonstrates the generation of
 * RSA Key pair using #optiga_crypt_rsa_generate_keypair.
 *
 */
void example_optiga_crypt_rsa_generate_keypair(void)
{
10008854:	b0af      	sub	sp, #188	; 0xbc
    * E.g
    * For 1024 bit key : modulus(128 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    * For 2048 bit key : modulus(256 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    */
    uint8_t public_key [150];
    uint16_t public_key_length = sizeof(public_key);
10008856:	ab02      	add	r3, sp, #8
10008858:	18ff      	adds	r7, r7, r3
1000885a:	2396      	movs	r3, #150	; 0x96

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000885c:	4d20      	ldr	r5, [pc, #128]	; (100088e0 <example_optiga_crypt_rsa_generate_keypair+0x90>)
1000885e:	4c21      	ldr	r4, [pc, #132]	; (100088e4 <example_optiga_crypt_rsa_generate_keypair+0x94>)
10008860:	4821      	ldr	r0, [pc, #132]	; (100088e8 <example_optiga_crypt_rsa_generate_keypair+0x98>)
10008862:	1c21      	adds	r1, r4, #0
10008864:	1c2a      	adds	r2, r5, #0
    * E.g
    * For 1024 bit key : modulus(128 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    * For 2048 bit key : modulus(256 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    */
    uint8_t public_key [150];
    uint16_t public_key_length = sizeof(public_key);
10008866:	803b      	strh	r3, [r7, #0]

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008868:	f7fb fd72 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
1000886c:	2000      	movs	r0, #0
1000886e:	491f      	ldr	r1, [pc, #124]	; (100088ec <example_optiga_crypt_rsa_generate_keypair+0x9c>)
10008870:	1c02      	adds	r2, r0, #0
10008872:	f7f9 fb5f 	bl	10001f34 <optiga_crypt_create>
10008876:	9505      	str	r5, [sp, #20]
10008878:	1e06      	subs	r6, r0, #0
        if (NULL == me)
1000887a:	d01f      	beq.n	100088bc <example_optiga_crypt_rsa_generate_keypair+0x6c>
         *       - Store the Private key in OPTIGA Key store
         *              (When exporting the private key, provide buffer of sufficient length (key size in bytes +
         *               encoding length))
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000887c:	2301      	movs	r3, #1
1000887e:	4d1c      	ldr	r5, [pc, #112]	; (100088f0 <example_optiga_crypt_rsa_generate_keypair+0xa0>)
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10008880:	4a1c      	ldr	r2, [pc, #112]	; (100088f4 <example_optiga_crypt_rsa_generate_keypair+0xa4>)
         *       - Store the Private key in OPTIGA Key store
         *              (When exporting the private key, provide buffer of sufficient length (key size in bytes +
         *               encoding length))
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008882:	802b      	strh	r3, [r5, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10008884:	ab07      	add	r3, sp, #28
10008886:	801a      	strh	r2, [r3, #0]
        return_status = optiga_crypt_rsa_generate_keypair(me,
10008888:	9300      	str	r3, [sp, #0]
1000888a:	ab08      	add	r3, sp, #32
1000888c:	9301      	str	r3, [sp, #4]
1000888e:	2210      	movs	r2, #16
10008890:	9702      	str	r7, [sp, #8]
10008892:	2141      	movs	r1, #65	; 0x41
10008894:	2300      	movs	r3, #0
10008896:	f7f9 fd4b 	bl	10002330 <optiga_crypt_rsa_generate_keypair>
1000889a:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_SIGN,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
1000889c:	d109      	bne.n	100088b2 <example_optiga_crypt_rsa_generate_keypair+0x62>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000889e:	882b      	ldrh	r3, [r5, #0]
100088a0:	2b01      	cmp	r3, #1
100088a2:	d0fc      	beq.n	1000889e <example_optiga_crypt_rsa_generate_keypair+0x4e>
        {
            //Wait until the optiga_crypt_rsa_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100088a4:	882b      	ldrh	r3, [r5, #0]
100088a6:	2b00      	cmp	r3, #0
100088a8:	d008      	beq.n	100088bc <example_optiga_crypt_rsa_generate_keypair+0x6c>
        {
            //RSA Key pair generation failed
            return_status = optiga_lib_status;
100088aa:	882a      	ldrh	r2, [r5, #0]
100088ac:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100088ae:	2a00      	cmp	r2, #0
100088b0:	d004      	beq.n	100088bc <example_optiga_crypt_rsa_generate_keypair+0x6c>
100088b2:	1c20      	adds	r0, r4, #0
100088b4:	4910      	ldr	r1, [pc, #64]	; (100088f8 <example_optiga_crypt_rsa_generate_keypair+0xa8>)
100088b6:	f7fb fd7d 	bl	100043b4 <optiga_lib_print_status>
100088ba:	e006      	b.n	100088ca <example_optiga_crypt_rsa_generate_keypair+0x7a>
100088bc:	1c20      	adds	r0, r4, #0
100088be:	9905      	ldr	r1, [sp, #20]
100088c0:	2200      	movs	r2, #0
100088c2:	f7fb fd77 	bl	100043b4 <optiga_lib_print_status>

    if (me)
100088c6:	2e00      	cmp	r6, #0
100088c8:	d008      	beq.n	100088dc <example_optiga_crypt_rsa_generate_keypair+0x8c>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
100088ca:	1c30      	adds	r0, r6, #0
100088cc:	f7f9 fb5a 	bl	10001f84 <optiga_crypt_destroy>
100088d0:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
100088d2:	d003      	beq.n	100088dc <example_optiga_crypt_rsa_generate_keypair+0x8c>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100088d4:	1c20      	adds	r0, r4, #0
100088d6:	4908      	ldr	r1, [pc, #32]	; (100088f8 <example_optiga_crypt_rsa_generate_keypair+0xa8>)
100088d8:	f7fb fd6c 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
100088dc:	b02f      	add	sp, #188	; 0xbc
100088de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100088e0:	1000cae0 	.word	0x1000cae0
100088e4:	1000f028 	.word	0x1000f028
100088e8:	1000f206 	.word	0x1000f206
100088ec:	10008845 	.word	0x10008845
100088f0:	20002f9e 	.word	0x20002f9e
100088f4:	ffffe0fc 	.word	0xffffe0fc
100088f8:	1000f03d 	.word	0x1000f03d

100088fc <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
100088fc:	4b01      	ldr	r3, [pc, #4]	; (10008904 <optiga_crypt_callback+0x8>)
100088fe:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008900:	4770      	bx	lr
10008902:	46c0      	nop			; (mov r8, r8)
10008904:	20002fa0 	.word	0x20002fa0

10008908 <example_optiga_crypt_rsa_sign>:
 *
 * Example for #optiga_crypt_rsa_sign
 *
 */
void example_optiga_crypt_rsa_sign(void)
{
10008908:	b5f0      	push	{r4, r5, r6, r7, lr}
    //To store the signture generated
    uint8_t signature [200];
    uint16_t signature_length = sizeof(signature);
1000890a:	2716      	movs	r7, #22
 *
 * Example for #optiga_crypt_rsa_sign
 *
 */
void example_optiga_crypt_rsa_sign(void)
{
1000890c:	b0bb      	sub	sp, #236	; 0xec
    //To store the signture generated
    uint8_t signature [200];
    uint16_t signature_length = sizeof(signature);
1000890e:	ab02      	add	r3, sp, #8
10008910:	18ff      	adds	r7, r7, r3
10008912:	23c8      	movs	r3, #200	; 0xc8

    //Crypt Instance
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008914:	4d20      	ldr	r5, [pc, #128]	; (10008998 <example_optiga_crypt_rsa_sign+0x90>)
10008916:	4c21      	ldr	r4, [pc, #132]	; (1000899c <example_optiga_crypt_rsa_sign+0x94>)
10008918:	4821      	ldr	r0, [pc, #132]	; (100089a0 <example_optiga_crypt_rsa_sign+0x98>)
1000891a:	1c21      	adds	r1, r4, #0
1000891c:	1c2a      	adds	r2, r5, #0
 */
void example_optiga_crypt_rsa_sign(void)
{
    //To store the signture generated
    uint8_t signature [200];
    uint16_t signature_length = sizeof(signature);
1000891e:	803b      	strh	r3, [r7, #0]

    //Crypt Instance
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008920:	f7fb fd16 	bl	10004350 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008924:	2000      	movs	r0, #0
10008926:	491f      	ldr	r1, [pc, #124]	; (100089a4 <example_optiga_crypt_rsa_sign+0x9c>)
10008928:	1c02      	adds	r2, r0, #0
1000892a:	f7f9 fb03 	bl	10001f34 <optiga_crypt_create>
1000892e:	9505      	str	r5, [sp, #20]
10008930:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10008932:	d01e      	beq.n	10008972 <example_optiga_crypt_rsa_sign+0x6a>
        /**
         * 2. Sign the digest -
         *       - Use Private key from Key Store ID E0FC
         *       - Signature scheme is SHA256,
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008934:	2101      	movs	r1, #1
10008936:	4d1c      	ldr	r5, [pc, #112]	; (100089a8 <example_optiga_crypt_rsa_sign+0xa0>)
        return_status = optiga_crypt_rsa_sign(me,
10008938:	4b1c      	ldr	r3, [pc, #112]	; (100089ac <example_optiga_crypt_rsa_sign+0xa4>)
        /**
         * 2. Sign the digest -
         *       - Use Private key from Key Store ID E0FC
         *       - Signature scheme is SHA256,
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000893a:	8029      	strh	r1, [r5, #0]
        return_status = optiga_crypt_rsa_sign(me,
1000893c:	9300      	str	r3, [sp, #0]
1000893e:	ab08      	add	r3, sp, #32
10008940:	9301      	str	r3, [sp, #4]
10008942:	2300      	movs	r3, #0
10008944:	4a1a      	ldr	r2, [pc, #104]	; (100089b0 <example_optiga_crypt_rsa_sign+0xa8>)
10008946:	9303      	str	r3, [sp, #12]
10008948:	9702      	str	r7, [sp, #8]
1000894a:	3320      	adds	r3, #32
1000894c:	f7f9 fcfb 	bl	10002346 <optiga_crypt_rsa_sign>
10008950:	1e02      	subs	r2, r0, #0
                                              OPTIGA_KEY_ID_E0FC,
                                              signature,
                                              &signature_length,
                                              0x0000);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008952:	d109      	bne.n	10008968 <example_optiga_crypt_rsa_sign+0x60>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008954:	882b      	ldrh	r3, [r5, #0]
10008956:	2b01      	cmp	r3, #1
10008958:	d0fc      	beq.n	10008954 <example_optiga_crypt_rsa_sign+0x4c>
        {
            //Wait until the optiga_crypt_rsa_sign operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000895a:	882b      	ldrh	r3, [r5, #0]
1000895c:	2b00      	cmp	r3, #0
1000895e:	d008      	beq.n	10008972 <example_optiga_crypt_rsa_sign+0x6a>
        {
            //RSA Signature generation failed.
            return_status = optiga_lib_status;
10008960:	882a      	ldrh	r2, [r5, #0]
10008962:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008964:	2a00      	cmp	r2, #0
10008966:	d004      	beq.n	10008972 <example_optiga_crypt_rsa_sign+0x6a>
10008968:	1c20      	adds	r0, r4, #0
1000896a:	4912      	ldr	r1, [pc, #72]	; (100089b4 <example_optiga_crypt_rsa_sign+0xac>)
1000896c:	f7fb fd22 	bl	100043b4 <optiga_lib_print_status>
10008970:	e006      	b.n	10008980 <example_optiga_crypt_rsa_sign+0x78>
10008972:	1c20      	adds	r0, r4, #0
10008974:	9905      	ldr	r1, [sp, #20]
10008976:	2200      	movs	r2, #0
10008978:	f7fb fd1c 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
1000897c:	2e00      	cmp	r6, #0
1000897e:	d008      	beq.n	10008992 <example_optiga_crypt_rsa_sign+0x8a>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008980:	1c30      	adds	r0, r6, #0
10008982:	f7f9 faff 	bl	10001f84 <optiga_crypt_destroy>
10008986:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008988:	d003      	beq.n	10008992 <example_optiga_crypt_rsa_sign+0x8a>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
1000898a:	1c20      	adds	r0, r4, #0
1000898c:	4909      	ldr	r1, [pc, #36]	; (100089b4 <example_optiga_crypt_rsa_sign+0xac>)
1000898e:	f7fb fd11 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
10008992:	b03b      	add	sp, #236	; 0xec
10008994:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008996:	46c0      	nop			; (mov r8, r8)
10008998:	1000cae0 	.word	0x1000cae0
1000899c:	1000f028 	.word	0x1000f028
100089a0:	1000f230 	.word	0x1000f230
100089a4:	100088fd 	.word	0x100088fd
100089a8:	20002fa0 	.word	0x20002fa0
100089ac:	0000e0fc 	.word	0x0000e0fc
100089b0:	20001c31 	.word	0x20001c31
100089b4:	1000f03d 	.word	0x1000f03d

100089b8 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
100089b8:	4b01      	ldr	r3, [pc, #4]	; (100089c0 <optiga_crypt_callback+0x8>)
100089ba:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
100089bc:	4770      	bx	lr
100089be:	46c0      	nop			; (mov r8, r8)
100089c0:	20002fa2 	.word	0x20002fa2

100089c4 <example_optiga_crypt_rsa_verify>:
 *
 * Example for #optiga_crypt_rsa_verify
 *
 */
void example_optiga_crypt_rsa_verify(void)
{
100089c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100089c6:	b08b      	sub	sp, #44	; 0x2c
    public_key_from_host_t public_key_details =
100089c8:	af08      	add	r7, sp, #32
100089ca:	1c3a      	adds	r2, r7, #0
         (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL
    };

    optiga_lib_status_t return_status = 0;
    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100089cc:	4d21      	ldr	r5, [pc, #132]	; (10008a54 <example_optiga_crypt_rsa_verify+0x90>)
 * Example for #optiga_crypt_rsa_verify
 *
 */
void example_optiga_crypt_rsa_verify(void)
{
    public_key_from_host_t public_key_details =
100089ce:	4b22      	ldr	r3, [pc, #136]	; (10008a58 <example_optiga_crypt_rsa_verify+0x94>)
         (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL
    };

    optiga_lib_status_t return_status = 0;
    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100089d0:	4c22      	ldr	r4, [pc, #136]	; (10008a5c <example_optiga_crypt_rsa_verify+0x98>)
 * Example for #optiga_crypt_rsa_verify
 *
 */
void example_optiga_crypt_rsa_verify(void)
{
    public_key_from_host_t public_key_details =
100089d2:	cb03      	ldmia	r3!, {r0, r1}
100089d4:	c203      	stmia	r2!, {r0, r1}
         (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL
    };

    optiga_lib_status_t return_status = 0;
    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100089d6:	4822      	ldr	r0, [pc, #136]	; (10008a60 <example_optiga_crypt_rsa_verify+0x9c>)
100089d8:	1c21      	adds	r1, r4, #0
100089da:	1c2a      	adds	r2, r5, #0
100089dc:	f7fb fcb8 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
100089e0:	2000      	movs	r0, #0
100089e2:	4920      	ldr	r1, [pc, #128]	; (10008a64 <example_optiga_crypt_rsa_verify+0xa0>)
100089e4:	1c02      	adds	r2, r0, #0
100089e6:	f7f9 faa5 	bl	10001f34 <optiga_crypt_create>
100089ea:	9507      	str	r5, [sp, #28]
100089ec:	1e06      	subs	r6, r0, #0
        if (NULL == me)
100089ee:	d01f      	beq.n	10008a30 <example_optiga_crypt_rsa_verify+0x6c>
        }

        /**
         * 2. Verify RSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100089f0:	2101      	movs	r1, #1
        return_status = optiga_crypt_rsa_verify (me,
100089f2:	4b1d      	ldr	r3, [pc, #116]	; (10008a68 <example_optiga_crypt_rsa_verify+0xa4>)
        }

        /**
         * 2. Verify RSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100089f4:	4d1d      	ldr	r5, [pc, #116]	; (10008a6c <example_optiga_crypt_rsa_verify+0xa8>)
        return_status = optiga_crypt_rsa_verify (me,
100089f6:	4a1e      	ldr	r2, [pc, #120]	; (10008a70 <example_optiga_crypt_rsa_verify+0xac>)
        }

        /**
         * 2. Verify RSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100089f8:	8029      	strh	r1, [r5, #0]
        return_status = optiga_crypt_rsa_verify (me,
100089fa:	9300      	str	r3, [sp, #0]
100089fc:	2380      	movs	r3, #128	; 0x80
100089fe:	9301      	str	r3, [sp, #4]
10008a00:	2300      	movs	r3, #0
10008a02:	9102      	str	r1, [sp, #8]
10008a04:	9304      	str	r3, [sp, #16]
10008a06:	9703      	str	r7, [sp, #12]
10008a08:	3320      	adds	r3, #32
10008a0a:	f7f9 fca8 	bl	1000235e <optiga_crypt_rsa_verify>
10008a0e:	1e02      	subs	r2, r0, #0
                                                 sizeof(signature),
                                                 OPTIGA_CRYPT_HOST_DATA,
                                                 &public_key_details,
                                                 0x0000);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008a10:	d109      	bne.n	10008a26 <example_optiga_crypt_rsa_verify+0x62>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008a12:	882b      	ldrh	r3, [r5, #0]
10008a14:	2b01      	cmp	r3, #1
10008a16:	d0fc      	beq.n	10008a12 <example_optiga_crypt_rsa_verify+0x4e>
        {
            //Wait until the optiga_crypt_rsa_verify operation is completed
        }

        if ((OPTIGA_LIB_SUCCESS != optiga_lib_status))
10008a18:	882b      	ldrh	r3, [r5, #0]
10008a1a:	2b00      	cmp	r3, #0
10008a1c:	d008      	beq.n	10008a30 <example_optiga_crypt_rsa_verify+0x6c>
        {
            //RSA Signature verification failed.
            return_status = optiga_lib_status;
10008a1e:	882a      	ldrh	r2, [r5, #0]
10008a20:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008a22:	2a00      	cmp	r2, #0
10008a24:	d004      	beq.n	10008a30 <example_optiga_crypt_rsa_verify+0x6c>
10008a26:	1c20      	adds	r0, r4, #0
10008a28:	4912      	ldr	r1, [pc, #72]	; (10008a74 <example_optiga_crypt_rsa_verify+0xb0>)
10008a2a:	f7fb fcc3 	bl	100043b4 <optiga_lib_print_status>
10008a2e:	e006      	b.n	10008a3e <example_optiga_crypt_rsa_verify+0x7a>
10008a30:	1c20      	adds	r0, r4, #0
10008a32:	9907      	ldr	r1, [sp, #28]
10008a34:	2200      	movs	r2, #0
10008a36:	f7fb fcbd 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
10008a3a:	2e00      	cmp	r6, #0
10008a3c:	d008      	beq.n	10008a50 <example_optiga_crypt_rsa_verify+0x8c>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008a3e:	1c30      	adds	r0, r6, #0
10008a40:	f7f9 faa0 	bl	10001f84 <optiga_crypt_destroy>
10008a44:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008a46:	d003      	beq.n	10008a50 <example_optiga_crypt_rsa_verify+0x8c>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008a48:	1c20      	adds	r0, r4, #0
10008a4a:	490a      	ldr	r1, [pc, #40]	; (10008a74 <example_optiga_crypt_rsa_verify+0xb0>)
10008a4c:	f7fb fcb2 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
10008a50:	b00b      	add	sp, #44	; 0x2c
10008a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008a54:	1000cae0 	.word	0x1000cae0
10008a58:	1000f250 	.word	0x1000f250
10008a5c:	1000f028 	.word	0x1000f028
10008a60:	1000f258 	.word	0x1000f258
10008a64:	100089b9 	.word	0x100089b9
10008a68:	20001c51 	.word	0x20001c51
10008a6c:	20002fa2 	.word	0x20002fa2
10008a70:	20001d62 	.word	0x20001d62
10008a74:	1000f03d 	.word	0x1000f03d

10008a78 <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008a78:	4b01      	ldr	r3, [pc, #4]	; (10008a80 <optiga_lib_callback+0x8>)
10008a7a:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008a7c:	4770      	bx	lr
10008a7e:	46c0      	nop			; (mov r8, r8)
10008a80:	20002fa4 	.word	0x20002fa4

10008a84 <example_optiga_crypt_tls_prf_sha256>:
/**
 * The below example demonstrates the key derivation using #optiga_crypt_tls_prf_sha256.
 *
 */
void example_optiga_crypt_tls_prf_sha256(void)
{
10008a84:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a86:	b08d      	sub	sp, #52	; 0x34
    uint8_t decryption_key [16] = {0};
10008a88:	2100      	movs	r1, #0
10008a8a:	2210      	movs	r2, #16
10008a8c:	a808      	add	r0, sp, #32
10008a8e:	f003 fbd7 	bl	1000c240 <memset>

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
    optiga_util_t * me_util = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008a92:	4c57      	ldr	r4, [pc, #348]	; (10008bf0 <example_optiga_crypt_tls_prf_sha256+0x16c>)
10008a94:	4d57      	ldr	r5, [pc, #348]	; (10008bf4 <example_optiga_crypt_tls_prf_sha256+0x170>)
10008a96:	4858      	ldr	r0, [pc, #352]	; (10008bf8 <example_optiga_crypt_tls_prf_sha256+0x174>)
10008a98:	1c29      	adds	r1, r5, #0
10008a9a:	1c22      	adds	r2, r4, #0
10008a9c:	f7fb fc58 	bl	10004350 <optiga_lib_print_message>
    do
    {

        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
10008aa0:	2000      	movs	r0, #0
10008aa2:	4f56      	ldr	r7, [pc, #344]	; (10008bfc <example_optiga_crypt_tls_prf_sha256+0x178>)
10008aa4:	1c02      	adds	r2, r0, #0
10008aa6:	1c39      	adds	r1, r7, #0
10008aa8:	f7f8 fe88 	bl	100017bc <optiga_util_create>
10008aac:	9407      	str	r4, [sp, #28]
10008aae:	9006      	str	r0, [sp, #24]
        if (NULL == me_util)
10008ab0:	2800      	cmp	r0, #0
10008ab2:	d06a      	beq.n	10008b8a <example_optiga_crypt_tls_prf_sha256+0x106>
         *       - This is typically a one time activity and
         *       - use the this OID as input secret to derive keys further
         * 2. Use Erase and Write (OPTIGA_UTIL_ERASE_AND_WRITE) option,
         *    to clear the remaining data in the object
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ab4:	2301      	movs	r3, #1
10008ab6:	4c52      	ldr	r4, [pc, #328]	; (10008c00 <example_optiga_crypt_tls_prf_sha256+0x17c>)
        return_status = optiga_util_write_data(me_util,
10008ab8:	2240      	movs	r2, #64	; 0x40
         *       - This is typically a one time activity and
         *       - use the this OID as input secret to derive keys further
         * 2. Use Erase and Write (OPTIGA_UTIL_ERASE_AND_WRITE) option,
         *    to clear the remaining data in the object
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008aba:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_write_data(me_util,
10008abc:	4b51      	ldr	r3, [pc, #324]	; (10008c04 <example_optiga_crypt_tls_prf_sha256+0x180>)
10008abe:	4952      	ldr	r1, [pc, #328]	; (10008c08 <example_optiga_crypt_tls_prf_sha256+0x184>)
10008ac0:	9300      	str	r3, [sp, #0]
10008ac2:	2320      	movs	r3, #32
10008ac4:	9301      	str	r3, [sp, #4]
10008ac6:	2300      	movs	r3, #0
10008ac8:	f7f8 ffb4 	bl	10001a34 <optiga_util_write_data>
10008acc:	1c23      	adds	r3, r4, #0
10008ace:	1e02      	subs	r2, r0, #0
                                               OPTIGA_UTIL_ERASE_AND_WRITE ,
                                               0x00,
                                               secret_to_be_written,
                                               sizeof(secret_to_be_written));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008ad0:	d000      	beq.n	10008ad4 <example_optiga_crypt_tls_prf_sha256+0x50>
10008ad2:	e078      	b.n	10008bc6 <example_optiga_crypt_tls_prf_sha256+0x142>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008ad4:	881a      	ldrh	r2, [r3, #0]
10008ad6:	2a01      	cmp	r2, #1
10008ad8:	d0fc      	beq.n	10008ad4 <example_optiga_crypt_tls_prf_sha256+0x50>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008ada:	881c      	ldrh	r4, [r3, #0]
10008adc:	b2a4      	uxth	r4, r4
10008ade:	2c00      	cmp	r4, #0
10008ae0:	d001      	beq.n	10008ae6 <example_optiga_crypt_tls_prf_sha256+0x62>
        {
            //Write to data object is failed.
            return_status = optiga_lib_status;
10008ae2:	881a      	ldrh	r2, [r3, #0]
10008ae4:	e012      	b.n	10008b0c <example_optiga_crypt_tls_prf_sha256+0x88>
        /**
         * 2. Change data object type to PRESSEC
         *
         */

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ae6:	2201      	movs	r2, #1
        return_status = optiga_util_write_metadata(me_util,
10008ae8:	9806      	ldr	r0, [sp, #24]
        /**
         * 2. Change data object type to PRESSEC
         *
         */

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008aea:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_write_metadata(me_util,
10008aec:	4946      	ldr	r1, [pc, #280]	; (10008c08 <example_optiga_crypt_tls_prf_sha256+0x184>)
10008aee:	4a47      	ldr	r2, [pc, #284]	; (10008c0c <example_optiga_crypt_tls_prf_sha256+0x188>)
10008af0:	2308      	movs	r3, #8
10008af2:	f7f8 ffb1 	bl	10001a58 <optiga_util_write_metadata>
10008af6:	1e02      	subs	r2, r0, #0
                                                   0xF1D0,
                                                   metadata,
                                                   sizeof(metadata));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008af8:	d166      	bne.n	10008bc8 <example_optiga_crypt_tls_prf_sha256+0x144>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008afa:	4e41      	ldr	r6, [pc, #260]	; (10008c00 <example_optiga_crypt_tls_prf_sha256+0x17c>)
10008afc:	8833      	ldrh	r3, [r6, #0]
10008afe:	2b01      	cmp	r3, #1
10008b00:	d0fb      	beq.n	10008afa <example_optiga_crypt_tls_prf_sha256+0x76>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008b02:	8832      	ldrh	r2, [r6, #0]
10008b04:	b292      	uxth	r2, r2
10008b06:	2a00      	cmp	r2, #0
10008b08:	d004      	beq.n	10008b14 <example_optiga_crypt_tls_prf_sha256+0x90>
        {
            //writing metadata to a data object failed.
            return_status = optiga_lib_status;
10008b0a:	8832      	ldrh	r2, [r6, #0]
10008b0c:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008b0e:	1e14      	subs	r4, r2, #0
10008b10:	d03c      	beq.n	10008b8c <example_optiga_crypt_tls_prf_sha256+0x108>
10008b12:	e060      	b.n	10008bd6 <example_optiga_crypt_tls_prf_sha256+0x152>

        /**
         * 3. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_lib_callback, NULL);
10008b14:	1c10      	adds	r0, r2, #0
10008b16:	1c39      	adds	r1, r7, #0
10008b18:	f7f9 fa0c 	bl	10001f34 <optiga_crypt_create>
10008b1c:	1e04      	subs	r4, r0, #0
        if (NULL == me)
10008b1e:	d034      	beq.n	10008b8a <example_optiga_crypt_tls_prf_sha256+0x106>

        /**
         * 4. Derive key (e.g. decryption key) using optiga_crypt_tls_prf_sha256 with protected I2C communication.
         *       - Use shared secret from F1D0 data object
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008b20:	2701      	movs	r7, #1

        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008b22:	2102      	movs	r1, #2
10008b24:	1c3a      	adds	r2, r7, #0

        /**
         * 4. Derive key (e.g. decryption key) using optiga_crypt_tls_prf_sha256 with protected I2C communication.
         *       - Use shared secret from F1D0 data object
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008b26:	8037      	strh	r7, [r6, #0]

        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008b28:	f7f9 f9fa 	bl	10001f20 <optiga_crypt_set_comms_params>
        // Default protecition for this API is OPTIGA_COMMS_COMMAND_PROTECTION
        return_status = optiga_crypt_tls_prf_sha256(me,
10008b2c:	4b38      	ldr	r3, [pc, #224]	; (10008c10 <example_optiga_crypt_tls_prf_sha256+0x18c>)
10008b2e:	aa08      	add	r2, sp, #32
10008b30:	9300      	str	r3, [sp, #0]
10008b32:	2320      	movs	r3, #32
10008b34:	9301      	str	r3, [sp, #4]
10008b36:	3b10      	subs	r3, #16
10008b38:	9204      	str	r2, [sp, #16]
10008b3a:	9302      	str	r3, [sp, #8]
10008b3c:	4a35      	ldr	r2, [pc, #212]	; (10008c14 <example_optiga_crypt_tls_prf_sha256+0x190>)
10008b3e:	9703      	str	r7, [sp, #12]
10008b40:	1c20      	adds	r0, r4, #0
10008b42:	4931      	ldr	r1, [pc, #196]	; (10008c08 <example_optiga_crypt_tls_prf_sha256+0x184>)
10008b44:	f7f9 fb94 	bl	10002270 <optiga_crypt_tls_prf_sha256>
10008b48:	1e02      	subs	r2, r0, #0
                                                    sizeof(random_seed),
                                                    sizeof(decryption_key),
                                                    TRUE,
                                                    decryption_key);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008b4a:	d13d      	bne.n	10008bc8 <example_optiga_crypt_tls_prf_sha256+0x144>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008b4c:	4b2c      	ldr	r3, [pc, #176]	; (10008c00 <example_optiga_crypt_tls_prf_sha256+0x17c>)
10008b4e:	881a      	ldrh	r2, [r3, #0]
10008b50:	1c1e      	adds	r6, r3, #0
10008b52:	2a01      	cmp	r2, #1
10008b54:	d0fa      	beq.n	10008b4c <example_optiga_crypt_tls_prf_sha256+0xc8>
        {
            //Wait until the optiga_crypt_tls_prf_sha256 operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008b56:	881a      	ldrh	r2, [r3, #0]
10008b58:	2a00      	cmp	r2, #0
10008b5a:	d001      	beq.n	10008b60 <example_optiga_crypt_tls_prf_sha256+0xdc>
        {
            //Derive key operation failed.
            return_status = optiga_lib_status;
10008b5c:	881a      	ldrh	r2, [r3, #0]
10008b5e:	e010      	b.n	10008b82 <example_optiga_crypt_tls_prf_sha256+0xfe>
         * 5. Change meta data to default value
         *
         */


        optiga_lib_status = OPTIGA_LIB_BUSY;
10008b60:	2301      	movs	r3, #1
        return_status = optiga_util_write_metadata(me_util,
10008b62:	4a2d      	ldr	r2, [pc, #180]	; (10008c18 <example_optiga_crypt_tls_prf_sha256+0x194>)
         * 5. Change meta data to default value
         *
         */


        optiga_lib_status = OPTIGA_LIB_BUSY;
10008b64:	8033      	strh	r3, [r6, #0]
        return_status = optiga_util_write_metadata(me_util,
10008b66:	9806      	ldr	r0, [sp, #24]
10008b68:	4927      	ldr	r1, [pc, #156]	; (10008c08 <example_optiga_crypt_tls_prf_sha256+0x184>)
10008b6a:	3307      	adds	r3, #7
10008b6c:	f7f8 ff74 	bl	10001a58 <optiga_util_write_metadata>
10008b70:	1e02      	subs	r2, r0, #0
                                                   0xF1D0,
                                                   default_metadata,
                                                   sizeof(default_metadata));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008b72:	d129      	bne.n	10008bc8 <example_optiga_crypt_tls_prf_sha256+0x144>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008b74:	8833      	ldrh	r3, [r6, #0]
10008b76:	2b01      	cmp	r3, #1
10008b78:	d0fc      	beq.n	10008b74 <example_optiga_crypt_tls_prf_sha256+0xf0>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008b7a:	8833      	ldrh	r3, [r6, #0]
10008b7c:	2b00      	cmp	r3, #0
10008b7e:	d005      	beq.n	10008b8c <example_optiga_crypt_tls_prf_sha256+0x108>
        {
            //writing metadata to a data object failed.
            return_status = optiga_lib_status;
10008b80:	8832      	ldrh	r2, [r6, #0]
10008b82:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008b84:	2a00      	cmp	r2, #0
10008b86:	d001      	beq.n	10008b8c <example_optiga_crypt_tls_prf_sha256+0x108>
10008b88:	e02a      	b.n	10008be0 <example_optiga_crypt_tls_prf_sha256+0x15c>
{
    uint8_t decryption_key [16] = {0};

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
10008b8a:	2400      	movs	r4, #0
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008b8c:	1c28      	adds	r0, r5, #0
10008b8e:	9907      	ldr	r1, [sp, #28]
10008b90:	2200      	movs	r2, #0
10008b92:	f7fb fc0f 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
10008b96:	2c00      	cmp	r4, #0
10008b98:	d008      	beq.n	10008bac <example_optiga_crypt_tls_prf_sha256+0x128>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008b9a:	1c20      	adds	r0, r4, #0
10008b9c:	f7f9 f9f2 	bl	10001f84 <optiga_crypt_destroy>
10008ba0:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008ba2:	d003      	beq.n	10008bac <example_optiga_crypt_tls_prf_sha256+0x128>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008ba4:	1c28      	adds	r0, r5, #0
10008ba6:	491d      	ldr	r1, [pc, #116]	; (10008c1c <example_optiga_crypt_tls_prf_sha256+0x198>)
10008ba8:	f7fb fc04 	bl	100043b4 <optiga_lib_print_status>
        }
    }

    if (me_util)
10008bac:	9b06      	ldr	r3, [sp, #24]
10008bae:	2b00      	cmp	r3, #0
10008bb0:	d01b      	beq.n	10008bea <example_optiga_crypt_tls_prf_sha256+0x166>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
10008bb2:	9806      	ldr	r0, [sp, #24]
10008bb4:	f7f8 fe2a 	bl	1000180c <optiga_util_destroy>
10008bb8:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008bba:	d016      	beq.n	10008bea <example_optiga_crypt_tls_prf_sha256+0x166>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008bbc:	1c28      	adds	r0, r5, #0
10008bbe:	4917      	ldr	r1, [pc, #92]	; (10008c1c <example_optiga_crypt_tls_prf_sha256+0x198>)
10008bc0:	f7fb fbf8 	bl	100043b4 <optiga_lib_print_status>
10008bc4:	e011      	b.n	10008bea <example_optiga_crypt_tls_prf_sha256+0x166>
{
    uint8_t decryption_key [16] = {0};

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
10008bc6:	2400      	movs	r4, #0
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008bc8:	1c28      	adds	r0, r5, #0
10008bca:	4914      	ldr	r1, [pc, #80]	; (10008c1c <example_optiga_crypt_tls_prf_sha256+0x198>)
10008bcc:	f7fb fbf2 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
10008bd0:	2c00      	cmp	r4, #0
10008bd2:	d1e2      	bne.n	10008b9a <example_optiga_crypt_tls_prf_sha256+0x116>
10008bd4:	e7ed      	b.n	10008bb2 <example_optiga_crypt_tls_prf_sha256+0x12e>
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008bd6:	1c28      	adds	r0, r5, #0
10008bd8:	4910      	ldr	r1, [pc, #64]	; (10008c1c <example_optiga_crypt_tls_prf_sha256+0x198>)
10008bda:	f7fb fbeb 	bl	100043b4 <optiga_lib_print_status>
10008bde:	e7e8      	b.n	10008bb2 <example_optiga_crypt_tls_prf_sha256+0x12e>
10008be0:	1c28      	adds	r0, r5, #0
10008be2:	490e      	ldr	r1, [pc, #56]	; (10008c1c <example_optiga_crypt_tls_prf_sha256+0x198>)
10008be4:	f7fb fbe6 	bl	100043b4 <optiga_lib_print_status>
10008be8:	e7d7      	b.n	10008b9a <example_optiga_crypt_tls_prf_sha256+0x116>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
}
10008bea:	b00d      	add	sp, #52	; 0x34
10008bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008bee:	46c0      	nop			; (mov r8, r8)
10008bf0:	1000cae0 	.word	0x1000cae0
10008bf4:	1000f028 	.word	0x1000f028
10008bf8:	1000f278 	.word	0x1000f278
10008bfc:	10008a79 	.word	0x10008a79
10008c00:	20002fa4 	.word	0x20002fa4
10008c04:	20001d9a 	.word	0x20001d9a
10008c08:	0000f1d0 	.word	0x0000f1d0
10008c0c:	20001dda 	.word	0x20001dda
10008c10:	20001dba 	.word	0x20001dba
10008c14:	20001d8a 	.word	0x20001d8a
10008c18:	20001d82 	.word	0x20001d82
10008c1c:	1000f03d 	.word	0x1000f03d

10008c20 <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008c20:	4b01      	ldr	r3, [pc, #4]	; (10008c28 <optiga_lib_callback+0x8>)
10008c22:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008c24:	4770      	bx	lr
10008c26:	46c0      	nop			; (mov r8, r8)
10008c28:	20002fa6 	.word	0x20002fa6

10008c2c <example_optiga_util_hibernate_restore>:
 *
 * Example for #optiga_util_open_application and #optiga_util_close_application
 *
 */
void example_optiga_util_hibernate_restore(void)
{
10008c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008c2e:	b0b7      	sub	sp, #220	; 0xdc
    optiga_crypt_t * me_crypt = NULL;
    // To store the public key generated
    uint8_t public_key [100];
    //To store the signature generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
10008c30:	466a      	mov	r2, sp
10008c32:	2350      	movs	r3, #80	; 0x50
    uint16_t bytes_to_read = 1;
    optiga_key_id_t optiga_key_id;
    optiga_lib_status_t return_status = 0;
    uint8_t security_event_counter = 0;
10008c34:	2600      	movs	r6, #0
    optiga_crypt_t * me_crypt = NULL;
    // To store the public key generated
    uint8_t public_key [100];
    //To store the signature generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
10008c36:	8293      	strh	r3, [r2, #20]
    uint16_t bytes_to_read = 1;
10008c38:	3b4f      	subs	r3, #79	; 0x4f
10008c3a:	82d3      	strh	r3, [r2, #22]
    optiga_key_id_t optiga_key_id;
    optiga_lib_status_t return_status = 0;
    uint8_t security_event_counter = 0;
    public_key_from_host_t public_key_details;
    //To store the generated public key as part of Generate key pair
    uint16_t public_key_length = sizeof(public_key);
10008c3c:	231a      	movs	r3, #26
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
    uint16_t bytes_to_read = 1;
    optiga_key_id_t optiga_key_id;
    optiga_lib_status_t return_status = 0;
    uint8_t security_event_counter = 0;
10008c3e:	74d6      	strb	r6, [r2, #19]
    public_key_from_host_t public_key_details;
    //To store the generated public key as part of Generate key pair
    uint16_t public_key_length = sizeof(public_key);
10008c40:	2264      	movs	r2, #100	; 0x64
10008c42:	446b      	add	r3, sp
10008c44:	801a      	strh	r2, [r3, #0]

    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008c46:	487a      	ldr	r0, [pc, #488]	; (10008e30 <example_optiga_util_hibernate_restore+0x204>)
10008c48:	497a      	ldr	r1, [pc, #488]	; (10008e34 <example_optiga_util_hibernate_restore+0x208>)
10008c4a:	4a7b      	ldr	r2, [pc, #492]	; (10008e38 <example_optiga_util_hibernate_restore+0x20c>)
10008c4c:	f7fb fb80 	bl	10004350 <optiga_lib_print_message>

    do
    {
        //Create an instance of optiga_util and optiga_crypt
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
10008c50:	4c7a      	ldr	r4, [pc, #488]	; (10008e3c <example_optiga_util_hibernate_restore+0x210>)
10008c52:	1c30      	adds	r0, r6, #0
10008c54:	1c21      	adds	r1, r4, #0
10008c56:	1c32      	adds	r2, r6, #0
10008c58:	f7f8 fdb0 	bl	100017bc <optiga_util_create>
10008c5c:	1e07      	subs	r7, r0, #0
        if (NULL == me_util)
10008c5e:	42b7      	cmp	r7, r6
10008c60:	d100      	bne.n	10008c64 <example_optiga_util_hibernate_restore+0x38>
10008c62:	e0c7      	b.n	10008df4 <example_optiga_util_hibernate_restore+0x1c8>
        {
            break;
        }

        me_crypt = optiga_crypt_create(0, optiga_lib_callback, NULL);
10008c64:	1c21      	adds	r1, r4, #0
10008c66:	1c30      	adds	r0, r6, #0
10008c68:	1c32      	adds	r2, r6, #0
10008c6a:	f7f9 f963 	bl	10001f34 <optiga_crypt_create>
10008c6e:	1e04      	subs	r4, r0, #0
        if (NULL == me_crypt)
10008c70:	42b4      	cmp	r4, r6
10008c72:	d100      	bne.n	10008c76 <example_optiga_util_hibernate_restore+0x4a>
10008c74:	e0be      	b.n	10008df4 <example_optiga_util_hibernate_restore+0x1c8>

        /**
         * 1. Open the application on OPTIGA which is a pre-condition to perform any other operations
         *    using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008c76:	2301      	movs	r3, #1
10008c78:	4d71      	ldr	r5, [pc, #452]	; (10008e40 <example_optiga_util_hibernate_restore+0x214>)
        return_status = optiga_util_open_application(me_util, 0);
10008c7a:	1c38      	adds	r0, r7, #0
10008c7c:	1c31      	adds	r1, r6, #0

        /**
         * 1. Open the application on OPTIGA which is a pre-condition to perform any other operations
         *    using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008c7e:	802b      	strh	r3, [r5, #0]
        return_status = optiga_util_open_application(me_util, 0);
10008c80:	f7f8 fddc 	bl	1000183c <optiga_util_open_application>
10008c84:	1e02      	subs	r2, r0, #0

        if (OPTIGA_LIB_SUCCESS != return_status)
10008c86:	42b2      	cmp	r2, r6
10008c88:	d000      	beq.n	10008c8c <example_optiga_util_hibernate_restore+0x60>
10008c8a:	e0ae      	b.n	10008dea <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
10008c8c:	882b      	ldrh	r3, [r5, #0]
10008c8e:	2b01      	cmp	r3, #1
10008c90:	d0fc      	beq.n	10008c8c <example_optiga_util_hibernate_restore+0x60>
        {
            //Wait until the optiga_util_open_application is completed
        }
        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008c92:	882e      	ldrh	r6, [r5, #0]
10008c94:	b2b6      	uxth	r6, r6
10008c96:	2e00      	cmp	r6, #0
10008c98:	d000      	beq.n	10008c9c <example_optiga_util_hibernate_restore+0x70>
10008c9a:	e0a2      	b.n	10008de2 <example_optiga_util_hibernate_restore+0x1b6>
        }

        /**
         * 2. Pairing the Host and OPTIGA using a pre-shared secret
         */
        example_pair_host_and_optiga_using_pre_shared_secret();
10008c9c:	f000 fad2 	bl	10009244 <example_pair_host_and_optiga_using_pre_shared_secret>
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key generated in a Session OID
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ca0:	2101      	movs	r1, #1
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
10008ca2:	1c20      	adds	r0, r4, #0
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key generated in a Session OID
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ca4:	8029      	strh	r1, [r5, #0]
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
10008ca6:	2202      	movs	r2, #2
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key generated in a Session OID
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
10008ca8:	ad06      	add	r5, sp, #24
10008caa:	802e      	strh	r6, [r5, #0]
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
10008cac:	f7f9 f938 	bl	10001f20 <optiga_crypt_set_comms_params>

        return_status = optiga_crypt_ecc_generate_keypair(me_crypt,
10008cb0:	ab1d      	add	r3, sp, #116	; 0x74
10008cb2:	9301      	str	r3, [sp, #4]
10008cb4:	231a      	movs	r3, #26
10008cb6:	446b      	add	r3, sp
10008cb8:	9302      	str	r3, [sp, #8]
10008cba:	2210      	movs	r2, #16
10008cbc:	9500      	str	r5, [sp, #0]
10008cbe:	1c20      	adds	r0, r4, #0
10008cc0:	2103      	movs	r1, #3
10008cc2:	1c33      	adds	r3, r6, #0
10008cc4:	f7f9 fa58 	bl	10002178 <optiga_crypt_ecc_generate_keypair>
10008cc8:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_SIGN,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
10008cca:	d000      	beq.n	10008cce <example_optiga_util_hibernate_restore+0xa2>
10008ccc:	e08d      	b.n	10008dea <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008cce:	4b5c      	ldr	r3, [pc, #368]	; (10008e40 <example_optiga_util_hibernate_restore+0x214>)
10008cd0:	881a      	ldrh	r2, [r3, #0]
10008cd2:	2a01      	cmp	r2, #1
10008cd4:	d0fb      	beq.n	10008cce <example_optiga_util_hibernate_restore+0xa2>
        {
            //Wait until the optiga_crypt_ecc_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008cd6:	881a      	ldrh	r2, [r3, #0]
10008cd8:	2a00      	cmp	r2, #0
10008cda:	d000      	beq.n	10008cde <example_optiga_util_hibernate_restore+0xb2>
10008cdc:	e072      	b.n	10008dc4 <example_optiga_util_hibernate_restore+0x198>
         * 4. To perform the hibernate, Security Event Counter(SEC) must be 0.
         *    Read SEC data object (0xE0C5) and wait until SEC = 0
         */
        do
        {
            optiga_lib_status = OPTIGA_LIB_BUSY;
10008cde:	2301      	movs	r3, #1
10008ce0:	4e57      	ldr	r6, [pc, #348]	; (10008e40 <example_optiga_util_hibernate_restore+0x214>)
            return_status = optiga_util_read_data(me_util,
10008ce2:	1c38      	adds	r0, r7, #0
         * 4. To perform the hibernate, Security Event Counter(SEC) must be 0.
         *    Read SEC data object (0xE0C5) and wait until SEC = 0
         */
        do
        {
            optiga_lib_status = OPTIGA_LIB_BUSY;
10008ce4:	8033      	strh	r3, [r6, #0]
            return_status = optiga_util_read_data(me_util,
10008ce6:	3315      	adds	r3, #21
10008ce8:	446b      	add	r3, sp
10008cea:	9300      	str	r3, [sp, #0]
10008cec:	2313      	movs	r3, #19
10008cee:	4955      	ldr	r1, [pc, #340]	; (10008e44 <example_optiga_util_hibernate_restore+0x218>)
10008cf0:	2200      	movs	r2, #0
10008cf2:	446b      	add	r3, sp
10008cf4:	f7f8 fe0e 	bl	10001914 <optiga_util_read_data>
10008cf8:	1c35      	adds	r5, r6, #0
                                                  0xE0C5,
                                                  0x0000,
                                                  &security_event_counter,
                                                  &bytes_to_read);

            if (OPTIGA_LIB_SUCCESS != return_status)
10008cfa:	2800      	cmp	r0, #0
10008cfc:	d10f      	bne.n	10008d1e <example_optiga_util_hibernate_restore+0xf2>
            {
                break;
            }

            while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008cfe:	882b      	ldrh	r3, [r5, #0]
10008d00:	2b01      	cmp	r3, #1
10008d02:	d0fc      	beq.n	10008cfe <example_optiga_util_hibernate_restore+0xd2>
            {
                //Wait until the optiga_util_read_data operation is completed
            }

            if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008d04:	8833      	ldrh	r3, [r6, #0]
10008d06:	2b00      	cmp	r3, #0
10008d08:	d001      	beq.n	10008d0e <example_optiga_util_hibernate_restore+0xe2>
            {
                //Reading the data object failed.
                return_status = optiga_lib_status;
10008d0a:	882b      	ldrh	r3, [r5, #0]
                break;
10008d0c:	e007      	b.n	10008d1e <example_optiga_util_hibernate_restore+0xf2>
            }
            pal_os_timer_delay_in_milliseconds(1000);
10008d0e:	20fa      	movs	r0, #250	; 0xfa
10008d10:	0080      	lsls	r0, r0, #2
10008d12:	f7f8 fcdb 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
        } while (0 != security_event_counter);
10008d16:	466b      	mov	r3, sp
10008d18:	7cdb      	ldrb	r3, [r3, #19]
10008d1a:	2b00      	cmp	r3, #0
10008d1c:	d1df      	bne.n	10008cde <example_optiga_util_hibernate_restore+0xb2>

        /**
         * 5. Hibernate the application on OPTIGA
         *    using optiga_util_close_application with perform_hibernate parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008d1e:	2101      	movs	r1, #1
        return_status = optiga_util_close_application(me_util, 1);
10008d20:	1c38      	adds	r0, r7, #0

        /**
         * 5. Hibernate the application on OPTIGA
         *    using optiga_util_close_application with perform_hibernate parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008d22:	8029      	strh	r1, [r5, #0]
        return_status = optiga_util_close_application(me_util, 1);
10008d24:	f7f8 fdc0 	bl	100018a8 <optiga_util_close_application>
10008d28:	1e02      	subs	r2, r0, #0

        if (OPTIGA_LIB_SUCCESS != return_status)
10008d2a:	d15e      	bne.n	10008dea <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
10008d2c:	882b      	ldrh	r3, [r5, #0]
10008d2e:	2b01      	cmp	r3, #1
10008d30:	d0fc      	beq.n	10008d2c <example_optiga_util_hibernate_restore+0x100>
        {
            //Wait until the optiga_util_close_application is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008d32:	882b      	ldrh	r3, [r5, #0]
10008d34:	2b00      	cmp	r3, #0
10008d36:	d154      	bne.n	10008de2 <example_optiga_util_hibernate_restore+0x1b6>

        /**
         * 6. Restore the application on OPTIGA
         *    using optiga_util_open_application with perform_restore parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008d38:	2101      	movs	r1, #1
        return_status = optiga_util_open_application(me_util, 1);
10008d3a:	1c38      	adds	r0, r7, #0

        /**
         * 6. Restore the application on OPTIGA
         *    using optiga_util_open_application with perform_restore parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008d3c:	8029      	strh	r1, [r5, #0]
        return_status = optiga_util_open_application(me_util, 1);
10008d3e:	f7f8 fd7d 	bl	1000183c <optiga_util_open_application>
10008d42:	1e02      	subs	r2, r0, #0

        if (OPTIGA_LIB_SUCCESS != return_status)
10008d44:	d151      	bne.n	10008dea <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }
        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008d46:	882b      	ldrh	r3, [r5, #0]
10008d48:	2b01      	cmp	r3, #1
10008d4a:	d0fc      	beq.n	10008d46 <example_optiga_util_hibernate_restore+0x11a>
        {
            //Wait until the optiga_util_open_application is completed
        }
        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008d4c:	882e      	ldrh	r6, [r5, #0]
10008d4e:	b2b6      	uxth	r6, r6
10008d50:	2e00      	cmp	r6, #0
10008d52:	d146      	bne.n	10008de2 <example_optiga_util_hibernate_restore+0x1b6>
        }

        /**
         * 7. Sign the digest using the session key from Step 3
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008d54:	2101      	movs	r1, #1
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
10008d56:	1c20      	adds	r0, r4, #0
10008d58:	2202      	movs	r2, #2
        }

        /**
         * 7. Sign the digest using the session key from Step 3
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008d5a:	8029      	strh	r1, [r5, #0]
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
10008d5c:	f7f9 f8e0 	bl	10001f20 <optiga_crypt_set_comms_params>
        return_status = optiga_crypt_ecdsa_sign(me_crypt,
10008d60:	ab09      	add	r3, sp, #36	; 0x24
10008d62:	9300      	str	r3, [sp, #0]
10008d64:	ab05      	add	r3, sp, #20
10008d66:	9301      	str	r3, [sp, #4]
10008d68:	2220      	movs	r2, #32
10008d6a:	1c20      	adds	r0, r4, #0
10008d6c:	4936      	ldr	r1, [pc, #216]	; (10008e48 <example_optiga_util_hibernate_restore+0x21c>)
10008d6e:	1c33      	adds	r3, r6, #0
10008d70:	f7f9 fa0d 	bl	1000218e <optiga_crypt_ecdsa_sign>
10008d74:	1e02      	subs	r2, r0, #0
                                                sizeof(digest),
                                                OPTIGA_KEY_ID_SESSION_BASED,
                                                signature,
                                                &signature_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008d76:	d138      	bne.n	10008dea <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008d78:	882b      	ldrh	r3, [r5, #0]
10008d7a:	2b01      	cmp	r3, #1
10008d7c:	d0fc      	beq.n	10008d78 <example_optiga_util_hibernate_restore+0x14c>
        {
            //Wait until the optiga_crypt_ecdsa_sign operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008d7e:	882b      	ldrh	r3, [r5, #0]
10008d80:	2b00      	cmp	r3, #0
10008d82:	d12e      	bne.n	10008de2 <example_optiga_util_hibernate_restore+0x1b6>

        /**
         * 8. Verify ECDSA signature using public key from step 2
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        public_key_details.public_key = public_key;
10008d84:	a91d      	add	r1, sp, #116	; 0x74
10008d86:	9107      	str	r1, [sp, #28]
        public_key_details.length = public_key_length;
10008d88:	4669      	mov	r1, sp
10008d8a:	8b49      	ldrh	r1, [r1, #26]

        /**
         * 8. Verify ECDSA signature using public key from step 2
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        public_key_details.public_key = public_key;
10008d8c:	ab07      	add	r3, sp, #28
        public_key_details.length = public_key_length;
10008d8e:	8099      	strh	r1, [r3, #4]
        public_key_details.key_type = (uint8_t)OPTIGA_ECC_CURVE_NIST_P_256;
10008d90:	2103      	movs	r1, #3
10008d92:	7199      	strb	r1, [r3, #6]
        return_status = optiga_crypt_ecdsa_verify (me_crypt,
10008d94:	4669      	mov	r1, sp
        }

        /**
         * 8. Verify ECDSA signature using public key from step 2
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008d96:	2201      	movs	r2, #1
        public_key_details.public_key = public_key;
        public_key_details.length = public_key_length;
        public_key_details.key_type = (uint8_t)OPTIGA_ECC_CURVE_NIST_P_256;
        return_status = optiga_crypt_ecdsa_verify (me_crypt,
10008d98:	8a89      	ldrh	r1, [r1, #20]
        }

        /**
         * 8. Verify ECDSA signature using public key from step 2
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008d9a:	802a      	strh	r2, [r5, #0]
        public_key_details.public_key = public_key;
        public_key_details.length = public_key_length;
        public_key_details.key_type = (uint8_t)OPTIGA_ECC_CURVE_NIST_P_256;
        return_status = optiga_crypt_ecdsa_verify (me_crypt,
10008d9c:	1c20      	adds	r0, r4, #0
10008d9e:	9100      	str	r1, [sp, #0]
10008da0:	9201      	str	r2, [sp, #4]
10008da2:	9302      	str	r3, [sp, #8]
10008da4:	321f      	adds	r2, #31
10008da6:	4928      	ldr	r1, [pc, #160]	; (10008e48 <example_optiga_util_hibernate_restore+0x21c>)
10008da8:	ab09      	add	r3, sp, #36	; 0x24
10008daa:	f7f9 fa00 	bl	100021ae <optiga_crypt_ecdsa_verify>
10008dae:	1e02      	subs	r2, r0, #0
                                                   signature,
                                                   signature_length,
                                                   OPTIGA_CRYPT_HOST_DATA,
                                                   &public_key_details);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008db0:	d11b      	bne.n	10008dea <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008db2:	4b23      	ldr	r3, [pc, #140]	; (10008e40 <example_optiga_util_hibernate_restore+0x214>)
10008db4:	881a      	ldrh	r2, [r3, #0]
10008db6:	1c1d      	adds	r5, r3, #0
10008db8:	2a01      	cmp	r2, #1
10008dba:	d0fa      	beq.n	10008db2 <example_optiga_util_hibernate_restore+0x186>
        {
            //Wait until the optiga_crypt_ecdsa_verify operation is completed
        }

        if ((OPTIGA_LIB_SUCCESS != optiga_lib_status))
10008dbc:	8819      	ldrh	r1, [r3, #0]
10008dbe:	b289      	uxth	r1, r1
10008dc0:	2900      	cmp	r1, #0
10008dc2:	d001      	beq.n	10008dc8 <example_optiga_util_hibernate_restore+0x19c>
        {
            //Signature verification failed.
            return_status = optiga_lib_status;
10008dc4:	881a      	ldrh	r2, [r3, #0]
10008dc6:	e00d      	b.n	10008de4 <example_optiga_util_hibernate_restore+0x1b8>

        /**
         * 9. Close the application on OPTIGA without hibernating
         *    using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008dc8:	2301      	movs	r3, #1
        return_status = optiga_util_close_application(me_util, 0);
10008dca:	1c38      	adds	r0, r7, #0

        /**
         * 9. Close the application on OPTIGA without hibernating
         *    using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008dcc:	802b      	strh	r3, [r5, #0]
        return_status = optiga_util_close_application(me_util, 0);
10008dce:	f7f8 fd6b 	bl	100018a8 <optiga_util_close_application>
10008dd2:	1e02      	subs	r2, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_status)
10008dd4:	d109      	bne.n	10008dea <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
10008dd6:	882b      	ldrh	r3, [r5, #0]
10008dd8:	2b01      	cmp	r3, #1
10008dda:	d0fc      	beq.n	10008dd6 <example_optiga_util_hibernate_restore+0x1aa>
        {
            //Wait until the optiga_util_close_application is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008ddc:	882b      	ldrh	r3, [r5, #0]
10008dde:	2b00      	cmp	r3, #0
10008de0:	d009      	beq.n	10008df6 <example_optiga_util_hibernate_restore+0x1ca>
        {
            //optiga_util_close_application failed
            return_status = optiga_lib_status;
10008de2:	882a      	ldrh	r2, [r5, #0]
10008de4:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008de6:	2a00      	cmp	r2, #0
10008de8:	d005      	beq.n	10008df6 <example_optiga_util_hibernate_restore+0x1ca>
10008dea:	4812      	ldr	r0, [pc, #72]	; (10008e34 <example_optiga_util_hibernate_restore+0x208>)
10008dec:	4917      	ldr	r1, [pc, #92]	; (10008e4c <example_optiga_util_hibernate_restore+0x220>)
10008dee:	f7fb fae1 	bl	100043b4 <optiga_lib_print_status>
10008df2:	e007      	b.n	10008e04 <example_optiga_util_hibernate_restore+0x1d8>
 *
 */
void example_optiga_util_hibernate_restore(void)
{
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;
10008df4:	2400      	movs	r4, #0
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008df6:	480f      	ldr	r0, [pc, #60]	; (10008e34 <example_optiga_util_hibernate_restore+0x208>)
10008df8:	490f      	ldr	r1, [pc, #60]	; (10008e38 <example_optiga_util_hibernate_restore+0x20c>)
10008dfa:	2200      	movs	r2, #0
10008dfc:	f7fb fada 	bl	100043b4 <optiga_lib_print_status>

    if (me_util)
10008e00:	2f00      	cmp	r7, #0
10008e02:	d008      	beq.n	10008e16 <example_optiga_util_hibernate_restore+0x1ea>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
10008e04:	1c38      	adds	r0, r7, #0
10008e06:	f7f8 fd01 	bl	1000180c <optiga_util_destroy>
10008e0a:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008e0c:	d003      	beq.n	10008e16 <example_optiga_util_hibernate_restore+0x1ea>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008e0e:	4809      	ldr	r0, [pc, #36]	; (10008e34 <example_optiga_util_hibernate_restore+0x208>)
10008e10:	490e      	ldr	r1, [pc, #56]	; (10008e4c <example_optiga_util_hibernate_restore+0x220>)
10008e12:	f7fb facf 	bl	100043b4 <optiga_lib_print_status>
        }
    }

    if (me_crypt)
10008e16:	2c00      	cmp	r4, #0
10008e18:	d008      	beq.n	10008e2c <example_optiga_util_hibernate_restore+0x200>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me_crypt);
10008e1a:	1c20      	adds	r0, r4, #0
10008e1c:	f7f9 f8b2 	bl	10001f84 <optiga_crypt_destroy>
10008e20:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008e22:	d003      	beq.n	10008e2c <example_optiga_util_hibernate_restore+0x200>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008e24:	4803      	ldr	r0, [pc, #12]	; (10008e34 <example_optiga_util_hibernate_restore+0x208>)
10008e26:	4909      	ldr	r1, [pc, #36]	; (10008e4c <example_optiga_util_hibernate_restore+0x220>)
10008e28:	f7fb fac4 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
10008e2c:	b037      	add	sp, #220	; 0xdc
10008e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008e30:	1000f29c 	.word	0x1000f29c
10008e34:	1000f028 	.word	0x1000f028
10008e38:	1000cae0 	.word	0x1000cae0
10008e3c:	10008c21 	.word	0x10008c21
10008e40:	20002fa6 	.word	0x20002fa6
10008e44:	0000e0c5 	.word	0x0000e0c5
10008e48:	20001de2 	.word	0x20001de2
10008e4c:	1000f03d 	.word	0x1000f03d

10008e50 <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008e50:	4b01      	ldr	r3, [pc, #4]	; (10008e58 <optiga_util_callback+0x8>)
10008e52:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008e54:	4770      	bx	lr
10008e56:	46c0      	nop			; (mov r8, r8)
10008e58:	20002fa8 	.word	0x20002fa8

10008e5c <example_optiga_util_protected_update>:
 * Example for #optiga_util_protected_update_start,#optiga_util_protected_update_continue
 *              & #optiga_util_protected_update_final.
 *
 */
void example_optiga_util_protected_update(void)
{
10008e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = 0;

    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008e5e:	4e44      	ldr	r6, [pc, #272]	; (10008f70 <example_optiga_util_protected_update+0x114>)
10008e60:	4f44      	ldr	r7, [pc, #272]	; (10008f74 <example_optiga_util_protected_update+0x118>)
10008e62:	4845      	ldr	r0, [pc, #276]	; (10008f78 <example_optiga_util_protected_update+0x11c>)
10008e64:	1c31      	adds	r1, r6, #0
10008e66:	1c3a      	adds	r2, r7, #0
10008e68:	f7fb fa72 	bl	10004350 <optiga_lib_print_message>
    {
        /**
         *  Create OPTIGA util Instance
         *
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
10008e6c:	2000      	movs	r0, #0
10008e6e:	4943      	ldr	r1, [pc, #268]	; (10008f7c <example_optiga_util_protected_update+0x120>)
10008e70:	1c02      	adds	r2, r0, #0
10008e72:	f7f8 fca3 	bl	100017bc <optiga_util_create>
10008e76:	1e05      	subs	r5, r0, #0
        if (NULL == me)
10008e78:	d063      	beq.n	10008f42 <example_optiga_util_protected_update+0xe6>
    do
    {
        /**
        *   set meta data "0x20 0x09 0xD0 0x03 0x21 0xE0 0xE8 0xC1 0x02 0x00 0x00" for oids 0xE0E1
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008e7a:	2301      	movs	r3, #1
10008e7c:	4c40      	ldr	r4, [pc, #256]	; (10008f80 <example_optiga_util_protected_update+0x124>)
        optiga_oid = 0xE0E1;
        return_status = optiga_util_write_metadata(me,
10008e7e:	4a41      	ldr	r2, [pc, #260]	; (10008f84 <example_optiga_util_protected_update+0x128>)
    do
    {
        /**
        *   set meta data "0x20 0x09 0xD0 0x03 0x21 0xE0 0xE8 0xC1 0x02 0x00 0x00" for oids 0xE0E1
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008e80:	8023      	strh	r3, [r4, #0]
        optiga_oid = 0xE0E1;
        return_status = optiga_util_write_metadata(me,
10008e82:	4941      	ldr	r1, [pc, #260]	; (10008f88 <example_optiga_util_protected_update+0x12c>)
10008e84:	330a      	adds	r3, #10
10008e86:	f7f8 fde7 	bl	10001a58 <optiga_util_write_metadata>
10008e8a:	1e02      	subs	r2, r0, #0
                                                   optiga_oid,
                                                   E0E1_metadata,
                                                   sizeof(E0E1_metadata));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008e8c:	d12f      	bne.n	10008eee <example_optiga_util_protected_update+0x92>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008e8e:	8823      	ldrh	r3, [r4, #0]
10008e90:	2b01      	cmp	r3, #1
10008e92:	d0fc      	beq.n	10008e8e <example_optiga_util_protected_update+0x32>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008e94:	8823      	ldrh	r3, [r4, #0]
10008e96:	2b00      	cmp	r3, #0
10008e98:	d10d      	bne.n	10008eb6 <example_optiga_util_protected_update+0x5a>
        }

        /**
        *   set meta data "0x20 0x03 0xD3 0x01 0x00" for oid 0xE0E3
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008e9a:	3301      	adds	r3, #1
10008e9c:	8023      	strh	r3, [r4, #0]
        optiga_oid = 0xE0E3;
        return_status = optiga_util_write_metadata(me,
10008e9e:	4a3b      	ldr	r2, [pc, #236]	; (10008f8c <example_optiga_util_protected_update+0x130>)
10008ea0:	1c28      	adds	r0, r5, #0
10008ea2:	493b      	ldr	r1, [pc, #236]	; (10008f90 <example_optiga_util_protected_update+0x134>)
10008ea4:	3307      	adds	r3, #7
10008ea6:	f7f8 fdd7 	bl	10001a58 <optiga_util_write_metadata>
10008eaa:	1e02      	subs	r2, r0, #0
                                                   optiga_oid,
                                                   E0E3_metadata,
                                                   sizeof(E0E3_metadata));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008eac:	d11f      	bne.n	10008eee <example_optiga_util_protected_update+0x92>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008eae:	8823      	ldrh	r3, [r4, #0]
10008eb0:	2b01      	cmp	r3, #1
10008eb2:	d0fc      	beq.n	10008eae <example_optiga_util_protected_update+0x52>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008eb4:	8823      	ldrh	r3, [r4, #0]
    do
    {
        /**
        *   valid ECC-256 with sha256 certificate is available in oid 0xE0E3
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008eb6:	2301      	movs	r3, #1
10008eb8:	8023      	strh	r3, [r4, #0]
        optiga_oid = 0xE0E3;
        offset = 0x00;
        return_status = optiga_util_write_data(me,
10008eba:	4b36      	ldr	r3, [pc, #216]	; (10008f94 <example_optiga_util_protected_update+0x138>)
10008ebc:	2240      	movs	r2, #64	; 0x40
10008ebe:	9300      	str	r3, [sp, #0]
10008ec0:	2397      	movs	r3, #151	; 0x97
10008ec2:	009b      	lsls	r3, r3, #2
10008ec4:	9301      	str	r3, [sp, #4]
10008ec6:	1c28      	adds	r0, r5, #0
10008ec8:	4931      	ldr	r1, [pc, #196]	; (10008f90 <example_optiga_util_protected_update+0x134>)
10008eca:	2300      	movs	r3, #0
10008ecc:	f7f8 fdb2 	bl	10001a34 <optiga_util_write_data>
10008ed0:	1e02      	subs	r2, r0, #0
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               trust_anchor,
                                               sizeof(trust_anchor));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008ed2:	d10c      	bne.n	10008eee <example_optiga_util_protected_update+0x92>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008ed4:	8823      	ldrh	r3, [r4, #0]
10008ed6:	2b01      	cmp	r3, #1
10008ed8:	d0fc      	beq.n	10008ed4 <example_optiga_util_protected_update+0x78>
            break;
        }
        /**
        *   Send the manifest using optiga_util_protected_update_start
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008eda:	2101      	movs	r1, #1
        while (OPTIGA_LIB_BUSY == optiga_lib_status)
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008edc:	8823      	ldrh	r3, [r4, #0]
        }
        /**
        *   Send the manifest using optiga_util_protected_update_start
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_protected_update_start(me,
10008ede:	4a2e      	ldr	r2, [pc, #184]	; (10008f98 <example_optiga_util_protected_update+0x13c>)
10008ee0:	1c28      	adds	r0, r5, #0
10008ee2:	238b      	movs	r3, #139	; 0x8b
            break;
        }
        /**
        *   Send the manifest using optiga_util_protected_update_start
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ee4:	8021      	strh	r1, [r4, #0]
        return_status = optiga_util_protected_update_start(me,
10008ee6:	f7f8 fdf9 	bl	10001adc <optiga_util_protected_update_start>
10008eea:	1e02      	subs	r2, r0, #0
                                                           0x01,
                                                           manifest,
                                                           sizeof(manifest));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008eec:	d004      	beq.n	10008ef8 <example_optiga_util_protected_update+0x9c>
            break;
        }

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008eee:	1c30      	adds	r0, r6, #0
10008ef0:	492a      	ldr	r1, [pc, #168]	; (10008f9c <example_optiga_util_protected_update+0x140>)
10008ef2:	f7fb fa5f 	bl	100043b4 <optiga_lib_print_status>
10008ef6:	e02b      	b.n	10008f50 <example_optiga_util_protected_update+0xf4>
        if (OPTIGA_LIB_SUCCESS != return_status)
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008ef8:	8823      	ldrh	r3, [r4, #0]
10008efa:	2b01      	cmp	r3, #1
10008efc:	d0fc      	beq.n	10008ef8 <example_optiga_util_protected_update+0x9c>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008efe:	8823      	ldrh	r3, [r4, #0]
10008f00:	2b00      	cmp	r3, #0
10008f02:	d12f      	bne.n	10008f64 <example_optiga_util_protected_update+0x108>

        /**
        *   Send the first fragment using optiga_util_protected_update_continue
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_protected_update_continue( me,
10008f04:	22a0      	movs	r2, #160	; 0xa0
        }

        /**
        *   Send the first fragment using optiga_util_protected_update_continue
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008f06:	2301      	movs	r3, #1
        return_status = optiga_util_protected_update_continue( me,
10008f08:	0092      	lsls	r2, r2, #2
10008f0a:	1c28      	adds	r0, r5, #0
10008f0c:	4924      	ldr	r1, [pc, #144]	; (10008fa0 <example_optiga_util_protected_update+0x144>)
        }

        /**
        *   Send the first fragment using optiga_util_protected_update_continue
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008f0e:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_protected_update_continue( me,
10008f10:	f7f8 fe24 	bl	10001b5c <optiga_util_protected_update_continue>
10008f14:	1e02      	subs	r2, r0, #0
                                                               continue_fragment_array,
                                                               sizeof(continue_fragment_array));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008f16:	d1ea      	bne.n	10008eee <example_optiga_util_protected_update+0x92>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008f18:	8823      	ldrh	r3, [r4, #0]
10008f1a:	2b01      	cmp	r3, #1
10008f1c:	d0fc      	beq.n	10008f18 <example_optiga_util_protected_update+0xbc>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008f1e:	8823      	ldrh	r3, [r4, #0]
10008f20:	2b00      	cmp	r3, #0
10008f22:	d11f      	bne.n	10008f64 <example_optiga_util_protected_update+0x108>
        }

        /**
        *   Send the last fragment using optiga_util_protected_update_final
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008f24:	2301      	movs	r3, #1
        return_status = optiga_util_protected_update_final(me,
10008f26:	2232      	movs	r2, #50	; 0x32
10008f28:	1c28      	adds	r0, r5, #0
10008f2a:	491e      	ldr	r1, [pc, #120]	; (10008fa4 <example_optiga_util_protected_update+0x148>)
        }

        /**
        *   Send the last fragment using optiga_util_protected_update_final
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008f2c:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_protected_update_final(me,
10008f2e:	f7f8 fe37 	bl	10001ba0 <optiga_util_protected_update_final>
10008f32:	1e02      	subs	r2, r0, #0
                                                           final_fragment_array,
                                                           sizeof(final_fragment_array));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008f34:	d1db      	bne.n	10008eee <example_optiga_util_protected_update+0x92>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008f36:	8823      	ldrh	r3, [r4, #0]
10008f38:	2b01      	cmp	r3, #1
10008f3a:	d0fc      	beq.n	10008f36 <example_optiga_util_protected_update+0xda>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008f3c:	8823      	ldrh	r3, [r4, #0]
10008f3e:	2b00      	cmp	r3, #0
10008f40:	d110      	bne.n	10008f64 <example_optiga_util_protected_update+0x108>
            break;
        }

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008f42:	1c30      	adds	r0, r6, #0
10008f44:	1c39      	adds	r1, r7, #0
10008f46:	2200      	movs	r2, #0
10008f48:	f7fb fa34 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
10008f4c:	2d00      	cmp	r5, #0
10008f4e:	d00e      	beq.n	10008f6e <example_optiga_util_protected_update+0x112>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
10008f50:	1c28      	adds	r0, r5, #0
10008f52:	f7f8 fc5b 	bl	1000180c <optiga_util_destroy>
10008f56:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008f58:	d009      	beq.n	10008f6e <example_optiga_util_protected_update+0x112>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008f5a:	1c30      	adds	r0, r6, #0
10008f5c:	490f      	ldr	r1, [pc, #60]	; (10008f9c <example_optiga_util_protected_update+0x140>)
10008f5e:	f7fb fa29 	bl	100043b4 <optiga_lib_print_status>
10008f62:	e004      	b.n	10008f6e <example_optiga_util_protected_update+0x112>
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
        {
            //writing data to a data object failed.
            return_status = optiga_lib_status;
10008f64:	8822      	ldrh	r2, [r4, #0]
10008f66:	b292      	uxth	r2, r2
            break;
        }

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008f68:	2a00      	cmp	r2, #0
10008f6a:	d0ea      	beq.n	10008f42 <example_optiga_util_protected_update+0xe6>
10008f6c:	e7bf      	b.n	10008eee <example_optiga_util_protected_update+0x92>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
}
10008f6e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10008f70:	1000f028 	.word	0x1000f028
10008f74:	1000cae0 	.word	0x1000cae0
10008f78:	1000f2c2 	.word	0x1000f2c2
10008f7c:	10008e51 	.word	0x10008e51
10008f80:	20002fa8 	.word	0x20002fa8
10008f84:	20002318 	.word	0x20002318
10008f88:	0000e0e1 	.word	0x0000e0e1
10008f8c:	20002082 	.word	0x20002082
10008f90:	0000e0e3 	.word	0x0000e0e3
10008f94:	200020bc 	.word	0x200020bc
10008f98:	20002323 	.word	0x20002323
10008f9c:	1000f03d 	.word	0x1000f03d
10008fa0:	20001e02 	.word	0x20001e02
10008fa4:	2000208a 	.word	0x2000208a

10008fa8 <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008fa8:	4b01      	ldr	r3, [pc, #4]	; (10008fb0 <optiga_util_callback+0x8>)
10008faa:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008fac:	4770      	bx	lr
10008fae:	46c0      	nop			; (mov r8, r8)
10008fb0:	20002faa 	.word	0x20002faa

10008fb4 <example_optiga_util_read_data>:
 *
 * Example for #optiga_util_read_data and #optiga_util_read_metadata
 *
 */
void example_optiga_util_read_data(void)
{
10008fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10008fb6:	4c30      	ldr	r4, [pc, #192]	; (10009078 <example_optiga_util_read_data+0xc4>)
    uint16_t offset, bytes_to_read;
    uint16_t optiga_oid;
    uint8_t read_data_buffer[1024];
    optiga_lib_status_t return_status = 0;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008fb8:	4e30      	ldr	r6, [pc, #192]	; (1000907c <example_optiga_util_read_data+0xc8>)
 *
 * Example for #optiga_util_read_data and #optiga_util_read_metadata
 *
 */
void example_optiga_util_read_data(void)
{
10008fba:	44a5      	add	sp, r4
    uint16_t offset, bytes_to_read;
    uint16_t optiga_oid;
    uint8_t read_data_buffer[1024];
    optiga_lib_status_t return_status = 0;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008fbc:	4c30      	ldr	r4, [pc, #192]	; (10009080 <example_optiga_util_read_data+0xcc>)
10008fbe:	4831      	ldr	r0, [pc, #196]	; (10009084 <example_optiga_util_read_data+0xd0>)
10008fc0:	1c31      	adds	r1, r6, #0
10008fc2:	1c22      	adds	r2, r4, #0
10008fc4:	f7fb f9c4 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util Instance
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
10008fc8:	2000      	movs	r0, #0
10008fca:	492f      	ldr	r1, [pc, #188]	; (10009088 <example_optiga_util_read_data+0xd4>)
10008fcc:	1c02      	adds	r2, r0, #0
10008fce:	f7f8 fbf5 	bl	100017bc <optiga_util_create>
10008fd2:	9403      	str	r4, [sp, #12]
10008fd4:	1e05      	subs	r5, r0, #0
        if (NULL == me)
10008fd6:	d03c      	beq.n	10009052 <example_optiga_util_read_data+0x9e>
        }

        //Read device end entity certificate from OPTIGA
        optiga_oid = 0xE0E0;
        offset = 0x00;
        bytes_to_read = sizeof(read_data_buffer);
10008fd8:	270e      	movs	r7, #14
10008fda:	ab02      	add	r3, sp, #8
10008fdc:	18ff      	adds	r7, r7, r3
10008fde:	2380      	movs	r3, #128	; 0x80

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008fe0:	2102      	movs	r1, #2
        }

        //Read device end entity certificate from OPTIGA
        optiga_oid = 0xE0E0;
        offset = 0x00;
        bytes_to_read = sizeof(read_data_buffer);
10008fe2:	00db      	lsls	r3, r3, #3

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008fe4:	2201      	movs	r2, #1
        }

        //Read device end entity certificate from OPTIGA
        optiga_oid = 0xE0E0;
        offset = 0x00;
        bytes_to_read = sizeof(read_data_buffer);
10008fe6:	803b      	strh	r3, [r7, #0]

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008fe8:	f7f8 fbde 	bl	100017a8 <optiga_util_set_comms_params>
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_RESPONSE_PROTECTION);
10008fec:	1c28      	adds	r0, r5, #0
10008fee:	2101      	movs	r1, #1
10008ff0:	2202      	movs	r2, #2
10008ff2:	f7f8 fbd9 	bl	100017a8 <optiga_util_set_comms_params>

        /**
         * 2. Read data from a data object (e.g. certificate data object)
         *    using optiga_util_read_data.
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ff6:	2301      	movs	r3, #1
10008ff8:	4c24      	ldr	r4, [pc, #144]	; (1000908c <example_optiga_util_read_data+0xd8>)
        return_status = optiga_util_read_data(me,
10008ffa:	2200      	movs	r2, #0

        /**
         * 2. Read data from a data object (e.g. certificate data object)
         *    using optiga_util_read_data.
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ffc:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_read_data(me,
10008ffe:	1c28      	adds	r0, r5, #0
10009000:	9700      	str	r7, [sp, #0]
10009002:	4923      	ldr	r1, [pc, #140]	; (10009090 <example_optiga_util_read_data+0xdc>)
10009004:	ab06      	add	r3, sp, #24
10009006:	f7f8 fc85 	bl	10001914 <optiga_util_read_data>
1000900a:	1e02      	subs	r2, r0, #0
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        if (OPTIGA_LIB_SUCCESS != return_status)
1000900c:	d11c      	bne.n	10009048 <example_optiga_util_read_data+0x94>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000900e:	8823      	ldrh	r3, [r4, #0]
10009010:	2b01      	cmp	r3, #1
10009012:	d0fc      	beq.n	1000900e <example_optiga_util_read_data+0x5a>
        {
            //Wait until the optiga_util_read_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009014:	8823      	ldrh	r3, [r4, #0]
10009016:	2b00      	cmp	r3, #0
10009018:	d112      	bne.n	10009040 <example_optiga_util_read_data+0x8c>
        /**
         * Read metadata of a data object (e.g. certificate data object E0E0)
         * using optiga_util_read_data.
         */
        optiga_oid = 0xE0E0;
        bytes_to_read = sizeof(read_data_buffer);
1000901a:	2380      	movs	r3, #128	; 0x80
1000901c:	00db      	lsls	r3, r3, #3
1000901e:	803b      	strh	r3, [r7, #0]
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009020:	2301      	movs	r3, #1
        return_status = optiga_util_read_metadata(me,
10009022:	aa06      	add	r2, sp, #24
         * Read metadata of a data object (e.g. certificate data object E0E0)
         * using optiga_util_read_data.
         */
        optiga_oid = 0xE0E0;
        bytes_to_read = sizeof(read_data_buffer);
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009024:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_read_metadata(me,
10009026:	1c28      	adds	r0, r5, #0
10009028:	4919      	ldr	r1, [pc, #100]	; (10009090 <example_optiga_util_read_data+0xdc>)
1000902a:	1c3b      	adds	r3, r7, #0
1000902c:	f7f8 fcbc 	bl	100019a8 <optiga_util_read_metadata>
10009030:	1e02      	subs	r2, r0, #0
                                                  optiga_oid,
                                                  read_data_buffer,
                                                  &bytes_to_read);

        if (OPTIGA_LIB_SUCCESS != return_status)
10009032:	d109      	bne.n	10009048 <example_optiga_util_read_data+0x94>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009034:	8823      	ldrh	r3, [r4, #0]
10009036:	2b01      	cmp	r3, #1
10009038:	d0fc      	beq.n	10009034 <example_optiga_util_read_data+0x80>
        {
            //Wait until the optiga_util_read_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000903a:	8823      	ldrh	r3, [r4, #0]
1000903c:	2b00      	cmp	r3, #0
1000903e:	d008      	beq.n	10009052 <example_optiga_util_read_data+0x9e>
        {
            //Reading metadata data object failed.
            return_status = optiga_lib_status;
10009040:	8822      	ldrh	r2, [r4, #0]
10009042:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009044:	2a00      	cmp	r2, #0
10009046:	d004      	beq.n	10009052 <example_optiga_util_read_data+0x9e>
10009048:	1c30      	adds	r0, r6, #0
1000904a:	4912      	ldr	r1, [pc, #72]	; (10009094 <example_optiga_util_read_data+0xe0>)
1000904c:	f7fb f9b2 	bl	100043b4 <optiga_lib_print_status>
10009050:	e006      	b.n	10009060 <example_optiga_util_read_data+0xac>
10009052:	1c30      	adds	r0, r6, #0
10009054:	9903      	ldr	r1, [sp, #12]
10009056:	2200      	movs	r2, #0
10009058:	f7fb f9ac 	bl	100043b4 <optiga_lib_print_status>

    if (me)
1000905c:	2d00      	cmp	r5, #0
1000905e:	d008      	beq.n	10009072 <example_optiga_util_read_data+0xbe>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
10009060:	1c28      	adds	r0, r5, #0
10009062:	f7f8 fbd3 	bl	1000180c <optiga_util_destroy>
10009066:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009068:	d003      	beq.n	10009072 <example_optiga_util_read_data+0xbe>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
1000906a:	1c30      	adds	r0, r6, #0
1000906c:	4909      	ldr	r1, [pc, #36]	; (10009094 <example_optiga_util_read_data+0xe0>)
1000906e:	f7fb f9a1 	bl	100043b4 <optiga_lib_print_status>
        }
    }

}
10009072:	4b09      	ldr	r3, [pc, #36]	; (10009098 <example_optiga_util_read_data+0xe4>)
10009074:	449d      	add	sp, r3
10009076:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009078:	fffffbe4 	.word	0xfffffbe4
1000907c:	1000f028 	.word	0x1000f028
10009080:	1000cae0 	.word	0x1000cae0
10009084:	1000f2e7 	.word	0x1000f2e7
10009088:	10008fa9 	.word	0x10008fa9
1000908c:	20002faa 	.word	0x20002faa
10009090:	0000e0e0 	.word	0x0000e0e0
10009094:	1000f03d 	.word	0x1000f03d
10009098:	0000041c 	.word	0x0000041c

1000909c <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
1000909c:	4b01      	ldr	r3, [pc, #4]	; (100090a4 <optiga_util_callback+0x8>)
1000909e:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
100090a0:	4770      	bx	lr
100090a2:	46c0      	nop			; (mov r8, r8)
100090a4:	20002fac 	.word	0x20002fac

100090a8 <example_optiga_util_update_count>:
 *
 * Example for #optiga_util_update_count
 *
 */
void example_optiga_util_update_count(void)
{
100090a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t optiga_counter_oid;
    uint8_t offset;

    optiga_lib_status_t return_status = 0;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100090aa:	4d25      	ldr	r5, [pc, #148]	; (10009140 <example_optiga_util_update_count+0x98>)
100090ac:	4f25      	ldr	r7, [pc, #148]	; (10009144 <example_optiga_util_update_count+0x9c>)
100090ae:	4826      	ldr	r0, [pc, #152]	; (10009148 <example_optiga_util_update_count+0xa0>)
100090b0:	1c29      	adds	r1, r5, #0
100090b2:	1c3a      	adds	r2, r7, #0
100090b4:	f7fb f94c 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util Instance
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
100090b8:	2000      	movs	r0, #0
100090ba:	4924      	ldr	r1, [pc, #144]	; (1000914c <example_optiga_util_update_count+0xa4>)
100090bc:	1c02      	adds	r2, r0, #0
100090be:	f7f8 fb7d 	bl	100017bc <optiga_util_create>
100090c2:	1e06      	subs	r6, r0, #0
        if (NULL == me)
100090c4:	d02b      	beq.n	1000911e <example_optiga_util_update_count+0x76>
         * Use Erase and Write (OPTIGA_UTIL_ERASE_AND_WRITE) option,
         * in order to correctly update the used length of the object.
         */
        optiga_counter_oid = 0xE120;
        offset = 0x00;
        optiga_lib_status = OPTIGA_LIB_BUSY;
100090c6:	2301      	movs	r3, #1
100090c8:	4c21      	ldr	r4, [pc, #132]	; (10009150 <example_optiga_util_update_count+0xa8>)
        return_status = optiga_util_write_data(me,
100090ca:	2240      	movs	r2, #64	; 0x40
         * Use Erase and Write (OPTIGA_UTIL_ERASE_AND_WRITE) option,
         * in order to correctly update the used length of the object.
         */
        optiga_counter_oid = 0xE120;
        offset = 0x00;
        optiga_lib_status = OPTIGA_LIB_BUSY;
100090cc:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_write_data(me,
100090ce:	4b21      	ldr	r3, [pc, #132]	; (10009154 <example_optiga_util_update_count+0xac>)
100090d0:	4921      	ldr	r1, [pc, #132]	; (10009158 <example_optiga_util_update_count+0xb0>)
100090d2:	9300      	str	r3, [sp, #0]
100090d4:	2308      	movs	r3, #8
100090d6:	9301      	str	r3, [sp, #4]
100090d8:	2300      	movs	r3, #0
100090da:	f7f8 fcab 	bl	10001a34 <optiga_util_write_data>
100090de:	1e02      	subs	r2, r0, #0
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               initial_counter_object_data,
                                               sizeof(initial_counter_object_data));

        if (OPTIGA_LIB_SUCCESS != return_status)
100090e0:	d118      	bne.n	10009114 <example_optiga_util_update_count+0x6c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100090e2:	8823      	ldrh	r3, [r4, #0]
100090e4:	2b01      	cmp	r3, #1
100090e6:	d0fc      	beq.n	100090e2 <example_optiga_util_update_count+0x3a>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100090e8:	8823      	ldrh	r3, [r4, #0]
100090ea:	2b00      	cmp	r3, #0
100090ec:	d10e      	bne.n	1000910c <example_optiga_util_update_count+0x64>
            return_status = optiga_lib_status;
            break;
        }

        // In this example, the counter is update by 5 and the final count would be 15
        optiga_lib_status = OPTIGA_LIB_BUSY;
100090ee:	2301      	movs	r3, #1
        return_status = optiga_util_update_count(me,
100090f0:	2205      	movs	r2, #5
100090f2:	1c30      	adds	r0, r6, #0
100090f4:	4918      	ldr	r1, [pc, #96]	; (10009158 <example_optiga_util_update_count+0xb0>)
            return_status = optiga_lib_status;
            break;
        }

        // In this example, the counter is update by 5 and the final count would be 15
        optiga_lib_status = OPTIGA_LIB_BUSY;
100090f6:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_update_count(me,
100090f8:	f7f8 fd72 	bl	10001be0 <optiga_util_update_count>
100090fc:	1e02      	subs	r2, r0, #0
                                                 optiga_counter_oid,
                                                 0x05);

        if (OPTIGA_LIB_SUCCESS != return_status)
100090fe:	d109      	bne.n	10009114 <example_optiga_util_update_count+0x6c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009100:	8823      	ldrh	r3, [r4, #0]
10009102:	2b01      	cmp	r3, #1
10009104:	d0fc      	beq.n	10009100 <example_optiga_util_update_count+0x58>
        {
            //Wait until the optiga_util_update_count operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009106:	8823      	ldrh	r3, [r4, #0]
10009108:	2b00      	cmp	r3, #0
1000910a:	d008      	beq.n	1000911e <example_optiga_util_update_count+0x76>
        {
            //Updating count of a counter data object failed.
            return_status = optiga_lib_status;
1000910c:	8822      	ldrh	r2, [r4, #0]
1000910e:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009110:	2a00      	cmp	r2, #0
10009112:	d004      	beq.n	1000911e <example_optiga_util_update_count+0x76>
10009114:	1c28      	adds	r0, r5, #0
10009116:	4911      	ldr	r1, [pc, #68]	; (1000915c <example_optiga_util_update_count+0xb4>)
10009118:	f7fb f94c 	bl	100043b4 <optiga_lib_print_status>
1000911c:	e006      	b.n	1000912c <example_optiga_util_update_count+0x84>
1000911e:	1c28      	adds	r0, r5, #0
10009120:	1c39      	adds	r1, r7, #0
10009122:	2200      	movs	r2, #0
10009124:	f7fb f946 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
10009128:	2e00      	cmp	r6, #0
1000912a:	d008      	beq.n	1000913e <example_optiga_util_update_count+0x96>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
1000912c:	1c30      	adds	r0, r6, #0
1000912e:	f7f8 fb6d 	bl	1000180c <optiga_util_destroy>
10009132:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009134:	d003      	beq.n	1000913e <example_optiga_util_update_count+0x96>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009136:	1c28      	adds	r0, r5, #0
10009138:	4908      	ldr	r1, [pc, #32]	; (1000915c <example_optiga_util_update_count+0xb4>)
1000913a:	f7fb f93b 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
1000913e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10009140:	1000f028 	.word	0x1000f028
10009144:	1000cae0 	.word	0x1000cae0
10009148:	1000f305 	.word	0x1000f305
1000914c:	1000909d 	.word	0x1000909d
10009150:	20002fac 	.word	0x20002fac
10009154:	200023ae 	.word	0x200023ae
10009158:	0000e120 	.word	0x0000e120
1000915c:	1000f03d 	.word	0x1000f03d

10009160 <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10009160:	4b01      	ldr	r3, [pc, #4]	; (10009168 <optiga_util_callback+0x8>)
10009162:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10009164:	4770      	bx	lr
10009166:	46c0      	nop			; (mov r8, r8)
10009168:	20002fae 	.word	0x20002fae

1000916c <example_optiga_util_write_data>:
 *
 * Example for #optiga_util_write_data and #optiga_util_write_metadata
 *
 */
void example_optiga_util_write_data(void)
{
1000916c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t optiga_oid;
    uint16_t offset;

    optiga_lib_status_t return_status = 0;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000916e:	4d28      	ldr	r5, [pc, #160]	; (10009210 <example_optiga_util_write_data+0xa4>)
10009170:	4f28      	ldr	r7, [pc, #160]	; (10009214 <example_optiga_util_write_data+0xa8>)
10009172:	4829      	ldr	r0, [pc, #164]	; (10009218 <example_optiga_util_write_data+0xac>)
10009174:	1c29      	adds	r1, r5, #0
10009176:	1c3a      	adds	r2, r7, #0
10009178:	f7fb f8ea 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util Instance
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
1000917c:	2000      	movs	r0, #0
1000917e:	4927      	ldr	r1, [pc, #156]	; (1000921c <example_optiga_util_write_data+0xb0>)
10009180:	1c02      	adds	r2, r0, #0
10009182:	f7f8 fb1b 	bl	100017bc <optiga_util_create>
10009186:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10009188:	d031      	beq.n	100091ee <example_optiga_util_write_data+0x82>
         * to clear the remaining data in the object
         */
        optiga_oid = 0xE0E8;
        offset = 0x00;

        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
1000918a:	2101      	movs	r1, #1
1000918c:	2200      	movs	r2, #0
1000918e:	f7f8 fb0b 	bl	100017a8 <optiga_util_set_comms_params>

        optiga_lib_status = OPTIGA_LIB_BUSY;
10009192:	2301      	movs	r3, #1
10009194:	4c22      	ldr	r4, [pc, #136]	; (10009220 <example_optiga_util_write_data+0xb4>)
        return_status = optiga_util_write_data(me,
10009196:	2240      	movs	r2, #64	; 0x40
        optiga_oid = 0xE0E8;
        offset = 0x00;

        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);

        optiga_lib_status = OPTIGA_LIB_BUSY;
10009198:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_write_data(me,
1000919a:	4b22      	ldr	r3, [pc, #136]	; (10009224 <example_optiga_util_write_data+0xb8>)
1000919c:	1c30      	adds	r0, r6, #0
1000919e:	9300      	str	r3, [sp, #0]
100091a0:	4b21      	ldr	r3, [pc, #132]	; (10009228 <example_optiga_util_write_data+0xbc>)
100091a2:	4922      	ldr	r1, [pc, #136]	; (1000922c <example_optiga_util_write_data+0xc0>)
100091a4:	9301      	str	r3, [sp, #4]
100091a6:	2300      	movs	r3, #0
100091a8:	f7f8 fc44 	bl	10001a34 <optiga_util_write_data>
100091ac:	1e02      	subs	r2, r0, #0
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               trust_anchor,
                                               sizeof(trust_anchor));

        if (OPTIGA_LIB_SUCCESS != return_status)
100091ae:	d119      	bne.n	100091e4 <example_optiga_util_write_data+0x78>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100091b0:	8823      	ldrh	r3, [r4, #0]
100091b2:	2b01      	cmp	r3, #1
100091b4:	d0fc      	beq.n	100091b0 <example_optiga_util_write_data+0x44>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100091b6:	8823      	ldrh	r3, [r4, #0]
100091b8:	2b00      	cmp	r3, #0
100091ba:	d10f      	bne.n	100091dc <example_optiga_util_write_data+0x70>
         * using optiga_util_write_metadata.
         *
         * Sample metadata: write "Read" access condition as LcsO < Operational
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100091bc:	2301      	movs	r3, #1
        return_status = optiga_util_write_metadata(me,
100091be:	4a1c      	ldr	r2, [pc, #112]	; (10009230 <example_optiga_util_write_data+0xc4>)
         * using optiga_util_write_metadata.
         *
         * Sample metadata: write "Read" access condition as LcsO < Operational
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100091c0:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_write_metadata(me,
100091c2:	1c30      	adds	r0, r6, #0
100091c4:	4919      	ldr	r1, [pc, #100]	; (1000922c <example_optiga_util_write_data+0xc0>)
100091c6:	3306      	adds	r3, #6
100091c8:	f7f8 fc46 	bl	10001a58 <optiga_util_write_metadata>
100091cc:	1e02      	subs	r2, r0, #0
                                                   0xE0E8,
                                                   metadata,
                                                   sizeof(metadata));

        if (OPTIGA_LIB_SUCCESS != return_status)
100091ce:	d109      	bne.n	100091e4 <example_optiga_util_write_data+0x78>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100091d0:	8823      	ldrh	r3, [r4, #0]
100091d2:	2b01      	cmp	r3, #1
100091d4:	d0fc      	beq.n	100091d0 <example_optiga_util_write_data+0x64>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100091d6:	8823      	ldrh	r3, [r4, #0]
100091d8:	2b00      	cmp	r3, #0
100091da:	d008      	beq.n	100091ee <example_optiga_util_write_data+0x82>
        {
            //writing metadata to a data object failed.
            return_status = optiga_lib_status;
100091dc:	8822      	ldrh	r2, [r4, #0]
100091de:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100091e0:	2a00      	cmp	r2, #0
100091e2:	d004      	beq.n	100091ee <example_optiga_util_write_data+0x82>
100091e4:	1c28      	adds	r0, r5, #0
100091e6:	4913      	ldr	r1, [pc, #76]	; (10009234 <example_optiga_util_write_data+0xc8>)
100091e8:	f7fb f8e4 	bl	100043b4 <optiga_lib_print_status>
100091ec:	e006      	b.n	100091fc <example_optiga_util_write_data+0x90>
100091ee:	1c28      	adds	r0, r5, #0
100091f0:	1c39      	adds	r1, r7, #0
100091f2:	2200      	movs	r2, #0
100091f4:	f7fb f8de 	bl	100043b4 <optiga_lib_print_status>
    
    if (me)
100091f8:	2e00      	cmp	r6, #0
100091fa:	d008      	beq.n	1000920e <example_optiga_util_write_data+0xa2>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
100091fc:	1c30      	adds	r0, r6, #0
100091fe:	f7f8 fb05 	bl	1000180c <optiga_util_destroy>
10009202:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009204:	d003      	beq.n	1000920e <example_optiga_util_write_data+0xa2>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009206:	1c28      	adds	r0, r5, #0
10009208:	490a      	ldr	r1, [pc, #40]	; (10009234 <example_optiga_util_write_data+0xc8>)
1000920a:	f7fb f8d3 	bl	100043b4 <optiga_lib_print_status>
        }
    }
}
1000920e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10009210:	1000f028 	.word	0x1000f028
10009214:	1000cae0 	.word	0x1000cae0
10009218:	1000f326 	.word	0x1000f326
1000921c:	10009161 	.word	0x10009161
10009220:	20002fae 	.word	0x20002fae
10009224:	200023b6 	.word	0x200023b6
10009228:	00000282 	.word	0x00000282
1000922c:	0000e0e8 	.word	0x0000e0e8
10009230:	20002638 	.word	0x20002638
10009234:	1000f03d 	.word	0x1000f03d

10009238 <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10009238:	4b01      	ldr	r3, [pc, #4]	; (10009240 <optiga_lib_callback+0x8>)
1000923a:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
1000923c:	4770      	bx	lr
1000923e:	46c0      	nop			; (mov r8, r8)
10009240:	20002fb0 	.word	0x20002fb0

10009244 <example_pair_host_and_optiga_using_pre_shared_secret>:
 *
 * Preconditions: The optiga_util_open_application must be executed before invoking the below example.
 *
 */
void example_pair_host_and_optiga_using_pre_shared_secret(void)
{
10009244:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = 0;
    pal_status_t pal_return_status;
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;

    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009246:	4f59      	ldr	r7, [pc, #356]	; (100093ac <example_pair_host_and_optiga_using_pre_shared_secret+0x168>)
10009248:	4e59      	ldr	r6, [pc, #356]	; (100093b0 <example_pair_host_and_optiga_using_pre_shared_secret+0x16c>)
 *
 * Preconditions: The optiga_util_open_application must be executed before invoking the below example.
 *
 */
void example_pair_host_and_optiga_using_pre_shared_secret(void)
{
1000924a:	b0a1      	sub	sp, #132	; 0x84
    optiga_lib_status_t return_status = 0;
    pal_status_t pal_return_status;
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;

    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000924c:	4859      	ldr	r0, [pc, #356]	; (100093b4 <example_pair_host_and_optiga_using_pre_shared_secret+0x170>)
1000924e:	1c39      	adds	r1, r7, #0
10009250:	1c32      	adds	r2, r6, #0
10009252:	f7fb f87d 	bl	10004350 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util and Crypt Instances
         */
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
10009256:	2000      	movs	r0, #0
10009258:	4c57      	ldr	r4, [pc, #348]	; (100093b8 <example_pair_host_and_optiga_using_pre_shared_secret+0x174>)
1000925a:	1c02      	adds	r2, r0, #0
1000925c:	1c21      	adds	r1, r4, #0
1000925e:	f7f8 faad 	bl	100017bc <optiga_util_create>
10009262:	9702      	str	r7, [sp, #8]
10009264:	1e05      	subs	r5, r0, #0
10009266:	9603      	str	r6, [sp, #12]
        if (NULL == me_util)
10009268:	d100      	bne.n	1000926c <example_pair_host_and_optiga_using_pre_shared_secret+0x28>
1000926a:	e081      	b.n	10009370 <example_pair_host_and_optiga_using_pre_shared_secret+0x12c>
        {
            break;
        }

        me_crypt = optiga_crypt_create(0, optiga_lib_callback, NULL);
1000926c:	2000      	movs	r0, #0
1000926e:	1c21      	adds	r1, r4, #0
10009270:	1c02      	adds	r2, r0, #0
10009272:	f7f8 fe5f 	bl	10001f34 <optiga_crypt_create>
10009276:	1e06      	subs	r6, r0, #0
        if (NULL == me_crypt)
10009278:	d100      	bne.n	1000927c <example_pair_host_and_optiga_using_pre_shared_secret+0x38>
1000927a:	e079      	b.n	10009370 <example_pair_host_and_optiga_using_pre_shared_secret+0x12c>
        }

        /**
         * 2. Initialize the protection level and protocol version for the instances
         */
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
1000927c:	1c28      	adds	r0, r5, #0
1000927e:	2101      	movs	r1, #1
10009280:	2200      	movs	r2, #0
10009282:	f7f8 fa91 	bl	100017a8 <optiga_util_set_comms_params>
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me_util,OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10009286:	1c28      	adds	r0, r5, #0
10009288:	2102      	movs	r1, #2
1000928a:	2201      	movs	r2, #1
1000928c:	f7f8 fa8c 	bl	100017a8 <optiga_util_set_comms_params>

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt,OPTIGA_COMMS_NO_PROTECTION);
10009290:	1c30      	adds	r0, r6, #0
10009292:	2101      	movs	r1, #1
10009294:	2200      	movs	r2, #0
10009296:	f7f8 fe43 	bl	10001f20 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me_crypt,OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
1000929a:	1c30      	adds	r0, r6, #0
1000929c:	2102      	movs	r1, #2
1000929e:	2201      	movs	r2, #1
100092a0:	f7f8 fe3e 	bl	10001f20 <optiga_crypt_set_comms_params>

        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
100092a4:	230a      	movs	r3, #10
100092a6:	aa02      	add	r2, sp, #8
100092a8:	189b      	adds	r3, r3, r2
100092aa:	222c      	movs	r2, #44	; 0x2c
        optiga_lib_status = OPTIGA_LIB_BUSY;
100092ac:	4c43      	ldr	r4, [pc, #268]	; (100093bc <example_pair_host_and_optiga_using_pre_shared_secret+0x178>)

        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
100092ae:	801a      	strh	r2, [r3, #0]
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_read_metadata(me_util,
100092b0:	af05      	add	r7, sp, #20
        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
        optiga_lib_status = OPTIGA_LIB_BUSY;
100092b2:	3a2b      	subs	r2, #43	; 0x2b
100092b4:	8022      	strh	r2, [r4, #0]
        return_status = optiga_util_read_metadata(me_util,
100092b6:	1c28      	adds	r0, r5, #0
100092b8:	1c3a      	adds	r2, r7, #0
100092ba:	4941      	ldr	r1, [pc, #260]	; (100093c0 <example_pair_host_and_optiga_using_pre_shared_secret+0x17c>)
100092bc:	f7f8 fb74 	bl	100019a8 <optiga_util_read_metadata>
100092c0:	1e02      	subs	r2, r0, #0
                                                  0xE140,
                                                  platform_binding_secret_metadata,
                                                  &bytes_to_read);

        if (OPTIGA_LIB_SUCCESS != return_status)
100092c2:	d150      	bne.n	10009366 <example_pair_host_and_optiga_using_pre_shared_secret+0x122>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
100092c4:	8823      	ldrh	r3, [r4, #0]
100092c6:	2b01      	cmp	r3, #1
100092c8:	d0fc      	beq.n	100092c4 <example_pair_host_and_optiga_using_pre_shared_secret+0x80>
        {
            //Wait until the optiga_util_read_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100092ca:	8821      	ldrh	r1, [r4, #0]
100092cc:	b289      	uxth	r1, r1
100092ce:	2900      	cmp	r1, #0
100092d0:	d145      	bne.n	1000935e <example_pair_host_and_optiga_using_pre_shared_secret+0x11a>

        /**
         * 4. Validate LcsO in the metadata.
         *    Skip the rest of the procedure if LcsO is greater than or equal to operational state(0x07)
         */
        if (platform_binding_secret_metadata[4] >= LCSO_STATE_OPERATIONAL)
100092d2:	793b      	ldrb	r3, [r7, #4]
100092d4:	2b06      	cmp	r3, #6
100092d6:	d84c      	bhi.n	10009372 <example_pair_host_and_optiga_using_pre_shared_secret+0x12e>
         *    b. If the host platform doesn't support random generation,
         *       use OPTIGA to generate the maximum size chosen.
         *       else choose the appropriate length of random to be generted by OPTIGA
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100092d8:	2301      	movs	r3, #1
        return_status = optiga_crypt_random(me_crypt,
100092da:	aa10      	add	r2, sp, #64	; 0x40
         *    b. If the host platform doesn't support random generation,
         *       use OPTIGA to generate the maximum size chosen.
         *       else choose the appropriate length of random to be generted by OPTIGA
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100092dc:	8023      	strh	r3, [r4, #0]
        return_status = optiga_crypt_random(me_crypt,
100092de:	1c30      	adds	r0, r6, #0
100092e0:	333f      	adds	r3, #63	; 0x3f
100092e2:	f7f8 fe67 	bl	10001fb4 <optiga_crypt_random>
100092e6:	1e02      	subs	r2, r0, #0
                                            OPTIGA_RNG_TYPE_TRNG,
                                            platform_binding_secret,
                                            sizeof(platform_binding_secret));
        if (OPTIGA_LIB_SUCCESS != return_status)
100092e8:	d13d      	bne.n	10009366 <example_pair_host_and_optiga_using_pre_shared_secret+0x122>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
100092ea:	8823      	ldrh	r3, [r4, #0]
100092ec:	2b01      	cmp	r3, #1
100092ee:	d0fc      	beq.n	100092ea <example_pair_host_and_optiga_using_pre_shared_secret+0xa6>
        {
            //Wait until the optiga_crypt_random operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100092f0:	8827      	ldrh	r7, [r4, #0]
100092f2:	b2bf      	uxth	r7, r7
100092f4:	2f00      	cmp	r7, #0
100092f6:	d132      	bne.n	1000935e <example_pair_host_and_optiga_using_pre_shared_secret+0x11a>


        /**
         * 7. Write random(secret) to OPTIGA platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100092f8:	2101      	movs	r1, #1
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
100092fa:	1c28      	adds	r0, r5, #0
100092fc:	1c3a      	adds	r2, r7, #0


        /**
         * 7. Write random(secret) to OPTIGA platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100092fe:	8021      	strh	r1, [r4, #0]
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
10009300:	f7f8 fa52 	bl	100017a8 <optiga_util_set_comms_params>
        return_status = optiga_util_write_data(me_util,
10009304:	2240      	movs	r2, #64	; 0x40
10009306:	ab10      	add	r3, sp, #64	; 0x40
10009308:	9300      	str	r3, [sp, #0]
1000930a:	9201      	str	r2, [sp, #4]
1000930c:	1c28      	adds	r0, r5, #0
1000930e:	492c      	ldr	r1, [pc, #176]	; (100093c0 <example_pair_host_and_optiga_using_pre_shared_secret+0x17c>)
10009310:	1c3b      	adds	r3, r7, #0
10009312:	f7f8 fb8f 	bl	10001a34 <optiga_util_write_data>
10009316:	1e02      	subs	r2, r0, #0
                                               0xE140,
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
                                               platform_binding_secret,
                                               sizeof(platform_binding_secret));
        if (OPTIGA_LIB_SUCCESS != return_status)
10009318:	d125      	bne.n	10009366 <example_pair_host_and_optiga_using_pre_shared_secret+0x122>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
1000931a:	8823      	ldrh	r3, [r4, #0]
1000931c:	2b01      	cmp	r3, #1
1000931e:	d0fc      	beq.n	1000931a <example_pair_host_and_optiga_using_pre_shared_secret+0xd6>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009320:	8823      	ldrh	r3, [r4, #0]
10009322:	2b00      	cmp	r3, #0
10009324:	d11b      	bne.n	1000935e <example_pair_host_and_optiga_using_pre_shared_secret+0x11a>

        /**
         * 8. Write/store the random(secret) on the Host platform
         *
         */
        pal_return_status = pal_os_datastore_write(OPTIGA_PLATFORM_BINDING_SHARED_SECRET_ID,
10009326:	2240      	movs	r2, #64	; 0x40
10009328:	2011      	movs	r0, #17
1000932a:	a910      	add	r1, sp, #64	; 0x40
1000932c:	f7f8 f922 	bl	10001574 <pal_os_datastore_write>
10009330:	1e02      	subs	r2, r0, #0
                                                   platform_binding_secret,
                                                   sizeof(platform_binding_secret));

        if (PAL_STATUS_SUCCESS != pal_return_status)
10009332:	d001      	beq.n	10009338 <example_pair_host_and_optiga_using_pre_shared_secret+0xf4>
        {
            //Storing of Pre-shared secret on Host failed.
            optiga_lib_status = pal_return_status;
10009334:	8020      	strh	r0, [r4, #0]
            break;
10009336:	e01c      	b.n	10009372 <example_pair_host_and_optiga_using_pre_shared_secret+0x12e>


        /**
         * 9. Update metadata of OPTIGA Platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009338:	2101      	movs	r1, #1
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
1000933a:	1c28      	adds	r0, r5, #0


        /**
         * 9. Update metadata of OPTIGA Platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000933c:	8021      	strh	r1, [r4, #0]
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
1000933e:	f7f8 fa33 	bl	100017a8 <optiga_util_set_comms_params>
        return_status = optiga_util_write_metadata(me_util,
10009342:	4a20      	ldr	r2, [pc, #128]	; (100093c4 <example_pair_host_and_optiga_using_pre_shared_secret+0x180>)
10009344:	1c28      	adds	r0, r5, #0
10009346:	491e      	ldr	r1, [pc, #120]	; (100093c0 <example_pair_host_and_optiga_using_pre_shared_secret+0x17c>)
10009348:	2319      	movs	r3, #25
1000934a:	f7f8 fb85 	bl	10001a58 <optiga_util_write_metadata>
1000934e:	1e02      	subs	r2, r0, #0
                                                   0xE140,
                                                   platform_binding_shared_secret_metadata_final,
                                                   sizeof(platform_binding_shared_secret_metadata_final));

        if (OPTIGA_LIB_SUCCESS != return_status)
10009350:	d109      	bne.n	10009366 <example_pair_host_and_optiga_using_pre_shared_secret+0x122>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
10009352:	8823      	ldrh	r3, [r4, #0]
10009354:	2b01      	cmp	r3, #1
10009356:	d0fc      	beq.n	10009352 <example_pair_host_and_optiga_using_pre_shared_secret+0x10e>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009358:	8823      	ldrh	r3, [r4, #0]
1000935a:	2b00      	cmp	r3, #0
1000935c:	d009      	beq.n	10009372 <example_pair_host_and_optiga_using_pre_shared_secret+0x12e>
        {
            //writing metadata to a data object failed.
            return_status = optiga_lib_status;
1000935e:	8822      	ldrh	r2, [r4, #0]
10009360:	b292      	uxth	r2, r2
        }

        return_status = OPTIGA_LIB_SUCCESS;

    } while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009362:	2a00      	cmp	r2, #0
10009364:	d005      	beq.n	10009372 <example_pair_host_and_optiga_using_pre_shared_secret+0x12e>
10009366:	9802      	ldr	r0, [sp, #8]
10009368:	4917      	ldr	r1, [pc, #92]	; (100093c8 <example_pair_host_and_optiga_using_pre_shared_secret+0x184>)
1000936a:	f7fb f823 	bl	100043b4 <optiga_lib_print_status>
1000936e:	e007      	b.n	10009380 <example_pair_host_and_optiga_using_pre_shared_secret+0x13c>
    uint8_t platform_binding_secret[64];
    uint8_t platform_binding_secret_metadata[44];
    optiga_lib_status_t return_status = 0;
    pal_status_t pal_return_status;
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;
10009370:	2600      	movs	r6, #0
        }

        return_status = OPTIGA_LIB_SUCCESS;

    } while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009372:	9802      	ldr	r0, [sp, #8]
10009374:	9903      	ldr	r1, [sp, #12]
10009376:	2200      	movs	r2, #0
10009378:	f7fb f81c 	bl	100043b4 <optiga_lib_print_status>
    
    if(me_util)
1000937c:	2d00      	cmp	r5, #0
1000937e:	d008      	beq.n	10009392 <example_pair_host_and_optiga_using_pre_shared_secret+0x14e>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
10009380:	1c28      	adds	r0, r5, #0
10009382:	f7f8 fa43 	bl	1000180c <optiga_util_destroy>
10009386:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009388:	d003      	beq.n	10009392 <example_pair_host_and_optiga_using_pre_shared_secret+0x14e>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
1000938a:	9802      	ldr	r0, [sp, #8]
1000938c:	490e      	ldr	r1, [pc, #56]	; (100093c8 <example_pair_host_and_optiga_using_pre_shared_secret+0x184>)
1000938e:	f7fb f811 	bl	100043b4 <optiga_lib_print_status>
        }
    }
    if(me_crypt)
10009392:	2e00      	cmp	r6, #0
10009394:	d008      	beq.n	100093a8 <example_pair_host_and_optiga_using_pre_shared_secret+0x164>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me_crypt);
10009396:	1c30      	adds	r0, r6, #0
10009398:	f7f8 fdf4 	bl	10001f84 <optiga_crypt_destroy>
1000939c:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
1000939e:	d003      	beq.n	100093a8 <example_pair_host_and_optiga_using_pre_shared_secret+0x164>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100093a0:	9802      	ldr	r0, [sp, #8]
100093a2:	4909      	ldr	r1, [pc, #36]	; (100093c8 <example_pair_host_and_optiga_using_pre_shared_secret+0x184>)
100093a4:	f7fb f806 	bl	100043b4 <optiga_lib_print_status>
        }
    }
    
}
100093a8:	b021      	add	sp, #132	; 0x84
100093aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100093ac:	1000f028 	.word	0x1000f028
100093b0:	1000cae0 	.word	0x1000cae0
100093b4:	1000f345 	.word	0x1000f345
100093b8:	10009239 	.word	0x10009239
100093bc:	20002fb0 	.word	0x20002fb0
100093c0:	0000e140 	.word	0x0000e140
100093c4:	2000263f 	.word	0x2000263f
100093c8:	1000f03d 	.word	0x1000f03d

100093cc <OSCHP_GetFrequency>:
}

__WEAK uint32_t OSCHP_GetFrequency(void)
{
  return OSCHP_FREQUENCY;
}
100093cc:	4800      	ldr	r0, [pc, #0]	; (100093d0 <OSCHP_GetFrequency+0x4>)
100093ce:	4770      	bx	lr
100093d0:	01312d00 	.word	0x01312d00

100093d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100093d6:	4f16      	ldr	r7, [pc, #88]	; (10009430 <SystemCoreClockUpdate+0x5c>)
100093d8:	4e16      	ldr	r6, [pc, #88]	; (10009434 <SystemCoreClockUpdate+0x60>)
100093da:	683b      	ldr	r3, [r7, #0]
100093dc:	4c16      	ldr	r4, [pc, #88]	; (10009438 <SystemCoreClockUpdate+0x64>)
100093de:	041b      	lsls	r3, r3, #16
100093e0:	0e1b      	lsrs	r3, r3, #24
100093e2:	6033      	str	r3, [r6, #0]

  if (IDIV != 0)
100093e4:	d01a      	beq.n	1000941c <SystemCoreClockUpdate+0x48>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100093e6:	2203      	movs	r2, #3

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

  if (IDIV != 0)
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100093e8:	6838      	ldr	r0, [r7, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100093ea:	69f9      	ldr	r1, [r7, #28]

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

  if (IDIV != 0)
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100093ec:	b2c0      	uxtb	r0, r0
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100093ee:	400a      	ands	r2, r1
100093f0:	0212      	lsls	r2, r2, #8
100093f2:	4d12      	ldr	r5, [pc, #72]	; (1000943c <SystemCoreClockUpdate+0x68>)
100093f4:	4302      	orrs	r2, r0
100093f6:	602a      	str	r2, [r5, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100093f8:	69f9      	ldr	r1, [r7, #28]
100093fa:	0589      	lsls	r1, r1, #22
100093fc:	d403      	bmi.n	10009406 <SystemCoreClockUpdate+0x32>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100093fe:	029b      	lsls	r3, r3, #10
10009400:	1899      	adds	r1, r3, r2
10009402:	480f      	ldr	r0, [pc, #60]	; (10009440 <SystemCoreClockUpdate+0x6c>)
10009404:	e006      	b.n	10009414 <SystemCoreClockUpdate+0x40>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10009406:	f7ff ffe1 	bl	100093cc <OSCHP_GetFrequency>
1000940a:	6831      	ldr	r1, [r6, #0]
1000940c:	682b      	ldr	r3, [r5, #0]
1000940e:	0289      	lsls	r1, r1, #10
10009410:	0180      	lsls	r0, r0, #6
10009412:	18c9      	adds	r1, r1, r3
10009414:	f000 fb44 	bl	10009aa0 <__aeabi_uidiv>
10009418:	0100      	lsls	r0, r0, #4
1000941a:	e007      	b.n	1000942c <SystemCoreClockUpdate+0x58>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000941c:	69fb      	ldr	r3, [r7, #28]
1000941e:	059b      	lsls	r3, r3, #22
10009420:	d402      	bmi.n	10009428 <SystemCoreClockUpdate+0x54>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10009422:	4b08      	ldr	r3, [pc, #32]	; (10009444 <SystemCoreClockUpdate+0x70>)
10009424:	6023      	str	r3, [r4, #0]
10009426:	e002      	b.n	1000942e <SystemCoreClockUpdate+0x5a>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10009428:	f7ff ffd0 	bl	100093cc <OSCHP_GetFrequency>
1000942c:	6020      	str	r0, [r4, #0]
    }
  }
}
1000942e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009430:	40010300 	.word	0x40010300
10009434:	20002fb8 	.word	0x20002fb8
10009438:	20003ffc 	.word	0x20003ffc
1000943c:	20002fb4 	.word	0x20002fb4
10009440:	b71b0000 	.word	0xb71b0000
10009444:	02dc6c00 	.word	0x02dc6c00

10009448 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
10009448:	b508      	push	{r3, lr}
  SystemCoreSetup();
1000944a:	f001 fda1 	bl	1000af90 <SystemCoreSetup>
  SystemCoreClockSetup();
1000944e:	f001 fdaf 	bl	1000afb0 <SystemCoreClockSetup>
}
10009452:	bd08      	pop	{r3, pc}

10009454 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10009454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10009456:	2503      	movs	r5, #3
10009458:	1c0c      	adds	r4, r1, #0
1000945a:	402c      	ands	r4, r5
1000945c:	40ac      	lsls	r4, r5
1000945e:	9401      	str	r4, [sp, #4]
10009460:	24fc      	movs	r4, #252	; 0xfc
10009462:	9e01      	ldr	r6, [sp, #4]
10009464:	088b      	lsrs	r3, r1, #2
10009466:	40b4      	lsls	r4, r6
10009468:	009b      	lsls	r3, r3, #2
1000946a:	18c3      	adds	r3, r0, r3
1000946c:	691f      	ldr	r7, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
1000946e:	2604      	movs	r6, #4
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10009470:	43a7      	bics	r7, r4
10009472:	611f      	str	r7, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10009474:	004f      	lsls	r7, r1, #1
10009476:	40bd      	lsls	r5, r7
10009478:	6f44      	ldr	r4, [r0, #116]	; 0x74
1000947a:	43ac      	bics	r4, r5

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
1000947c:	2507      	movs	r5, #7
1000947e:	400d      	ands	r5, r1
10009480:	00ad      	lsls	r5, r5, #2
10009482:	40ae      	lsls	r6, r5
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10009484:	6744      	str	r4, [r0, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10009486:	08cc      	lsrs	r4, r1, #3
10009488:	00a4      	lsls	r4, r4, #2
1000948a:	1904      	adds	r4, r0, r4
1000948c:	6c27      	ldr	r7, [r4, #64]	; 0x40
1000948e:	43b7      	bics	r7, r6
10009490:	6427      	str	r7, [r4, #64]	; 0x40
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10009492:	7856      	ldrb	r6, [r2, #1]
10009494:	6c27      	ldr	r7, [r4, #64]	; 0x40
10009496:	40ae      	lsls	r6, r5
10009498:	1c35      	adds	r5, r6, #0
1000949a:	433d      	orrs	r5, r7
1000949c:	6425      	str	r5, [r4, #64]	; 0x40
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000949e:	4c0a      	ldr	r4, [pc, #40]	; (100094c8 <XMC_GPIO_Init+0x74>)
100094a0:	42a0      	cmp	r0, r4
100094a2:	d104      	bne.n	100094ae <XMC_GPIO_Init+0x5a>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
100094a4:	2501      	movs	r5, #1
100094a6:	408d      	lsls	r5, r1
100094a8:	6e04      	ldr	r4, [r0, #96]	; 0x60
100094aa:	43ac      	bics	r4, r5
100094ac:	6604      	str	r4, [r0, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
100094ae:	7814      	ldrb	r4, [r2, #0]
100094b0:	b265      	sxtb	r5, r4
100094b2:	2d00      	cmp	r5, #0
100094b4:	da02      	bge.n	100094bc <XMC_GPIO_Init+0x68>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
100094b6:	6852      	ldr	r2, [r2, #4]
100094b8:	408a      	lsls	r2, r1
100094ba:	6042      	str	r2, [r0, #4]
  }
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100094bc:	9901      	ldr	r1, [sp, #4]
100094be:	691a      	ldr	r2, [r3, #16]
100094c0:	408c      	lsls	r4, r1
100094c2:	4314      	orrs	r4, r2
100094c4:	611c      	str	r4, [r3, #16]
}
100094c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100094c8:	40040200 	.word	0x40040200

100094cc <XMC_SCU_UnlockProtectedBits>:
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100094cc:	22c0      	movs	r2, #192	; 0xc0
100094ce:	4b03      	ldr	r3, [pc, #12]	; (100094dc <XMC_SCU_UnlockProtectedBits+0x10>)
100094d0:	625a      	str	r2, [r3, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100094d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100094d4:	0752      	lsls	r2, r2, #29
100094d6:	d4fc      	bmi.n	100094d2 <XMC_SCU_UnlockProtectedBits+0x6>
  {
    /* Loop until the lock is removed */
  }
}
100094d8:	4770      	bx	lr
100094da:	46c0      	nop			; (mov r8, r8)
100094dc:	40010000 	.word	0x40010000

100094e0 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100094e0:	b510      	push	{r4, lr}
100094e2:	1c04      	adds	r4, r0, #0
  XMC_SCU_UnlockProtectedBits();
100094e4:	f7ff fff2 	bl	100094cc <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
100094e8:	4b05      	ldr	r3, [pc, #20]	; (10009500 <XMC_SCU_CLOCK_UngatePeripheralClock+0x20>)
100094ea:	6918      	ldr	r0, [r3, #16]
100094ec:	4320      	orrs	r0, r4
100094ee:	6118      	str	r0, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100094f0:	681a      	ldr	r2, [r3, #0]
100094f2:	0052      	lsls	r2, r2, #1
100094f4:	d4fc      	bmi.n	100094f0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x10>
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100094f6:	22c3      	movs	r2, #195	; 0xc3
100094f8:	4b02      	ldr	r3, [pc, #8]	; (10009504 <XMC_SCU_CLOCK_UngatePeripheralClock+0x24>)
100094fa:	625a      	str	r2, [r3, #36]	; 0x24
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
}
100094fc:	bd10      	pop	{r4, pc}
100094fe:	46c0      	nop			; (mov r8, r8)
10009500:	40010300 	.word	0x40010300
10009504:	40010000 	.word	0x40010000

10009508 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
10009508:	4b03      	ldr	r3, [pc, #12]	; (10009518 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x10>)
1000950a:	689b      	ldr	r3, [r3, #8]
1000950c:	4018      	ands	r0, r3
1000950e:	1e43      	subs	r3, r0, #1
10009510:	4198      	sbcs	r0, r3
10009512:	b2c0      	uxtb	r0, r0
}
10009514:	4770      	bx	lr
10009516:	46c0      	nop			; (mov r8, r8)
10009518:	40010300 	.word	0x40010300

1000951c <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
1000951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000951e:	1c0d      	adds	r5, r1, #0

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10009520:	2603      	movs	r6, #3
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10009522:	1c04      	adds	r4, r0, #0
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10009524:	f7ff ffd2 	bl	100094cc <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10009528:	4b22      	ldr	r3, [pc, #136]	; (100095b4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x98>)

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
1000952a:	0a28      	lsrs	r0, r5, #8
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000952c:	681a      	ldr	r2, [r3, #0]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
1000952e:	69d9      	ldr	r1, [r3, #28]
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10009530:	b2ed      	uxtb	r5, r5

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10009532:	43b1      	bics	r1, r6
10009534:	4301      	orrs	r1, r0
10009536:	61d9      	str	r1, [r3, #28]
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009538:	6818      	ldr	r0, [r3, #0]
1000953a:	491f      	ldr	r1, [pc, #124]	; (100095b8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000953c:	0412      	lsls	r2, r2, #16

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000953e:	4001      	ands	r1, r0
10009540:	481e      	ldr	r0, [pc, #120]	; (100095bc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>)
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10009542:	0e12      	lsrs	r2, r2, #24
10009544:	4301      	orrs	r1, r0
#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10009546:	430d      	orrs	r5, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009548:	601d      	str	r5, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000954a:	6819      	ldr	r1, [r3, #0]
1000954c:	0049      	lsls	r1, r1, #1
1000954e:	d4fc      	bmi.n	1000954a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x2e>
10009550:	4d1b      	ldr	r5, [pc, #108]	; (100095c0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa4>)
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10009552:	00a6      	lsls	r6, r4, #2
  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
  {
    /* Spin until the core supply stabilizes */
  }

  if(curr_idiv <= idiv)
10009554:	42a2      	cmp	r2, r4
10009556:	d81a      	bhi.n	1000958e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x72>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10009558:	0091      	lsls	r1, r2, #2
1000955a:	42a1      	cmp	r1, r4
1000955c:	d20d      	bcs.n	1000957a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x5e>
  {
    if(0U == curr_idiv)
1000955e:	2a00      	cmp	r2, #0
10009560:	d100      	bne.n	10009564 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x48>
    {
      curr_idiv = 1U;
10009562:	3201      	adds	r2, #1
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009564:	6819      	ldr	r1, [r3, #0]
  {
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
10009566:	0092      	lsls	r2, r2, #2
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009568:	4029      	ands	r1, r5
1000956a:	4301      	orrs	r1, r0
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000956c:	0216      	lsls	r6, r2, #8
1000956e:	4331      	orrs	r1, r6
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009570:	6019      	str	r1, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10009572:	6819      	ldr	r1, [r3, #0]
10009574:	0049      	lsls	r1, r1, #1
10009576:	d4fc      	bmi.n	10009572 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x56>
10009578:	e7ee      	b.n	10009558 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x3c>
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000957a:	681a      	ldr	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
1000957c:	0224      	lsls	r4, r4, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000957e:	402a      	ands	r2, r5
10009580:	4310      	orrs	r0, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10009582:	4320      	orrs	r0, r4
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009584:	6018      	str	r0, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10009586:	e00c      	b.n	100095a2 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x86>

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10009588:	6819      	ldr	r1, [r3, #0]
1000958a:	0049      	lsls	r1, r1, #1
1000958c:	d4fc      	bmi.n	10009588 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
1000958e:	42b2      	cmp	r2, r6
10009590:	d9f3      	bls.n	1000957a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x5e>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009592:	6819      	ldr	r1, [r3, #0]
/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
10009594:	0892      	lsrs	r2, r2, #2

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009596:	4029      	ands	r1, r5
10009598:	4301      	orrs	r1, r0
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
1000959a:	0217      	lsls	r7, r2, #8
1000959c:	4339      	orrs	r1, r7
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000959e:	6019      	str	r1, [r3, #0]
100095a0:	e7f2      	b.n	10009588 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100095a2:	681a      	ldr	r2, [r3, #0]
100095a4:	0052      	lsls	r2, r2, #1
100095a6:	d4fc      	bmi.n	100095a2 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x86>
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100095a8:	22c3      	movs	r2, #195	; 0xc3
100095aa:	4b06      	ldr	r3, [pc, #24]	; (100095c4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa8>)
100095ac:	625a      	str	r2, [r3, #36]	; 0x24
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();

  SystemCoreClockUpdate();
100095ae:	f7ff ff11 	bl	100093d4 <SystemCoreClockUpdate>

}
100095b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100095b4:	40010300 	.word	0x40010300
100095b8:	c00fff00 	.word	0xc00fff00
100095bc:	3ff00000 	.word	0x3ff00000
100095c0:	c00f00ff 	.word	0xc00f00ff
100095c4:	40010000 	.word	0x40010000

100095c8 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
100095c8:	b538      	push	{r3, r4, r5, lr}
100095ca:	1c04      	adds	r4, r0, #0
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
100095cc:	f7ff ff7e 	bl	100094cc <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
100095d0:	79a2      	ldrb	r2, [r4, #6]
100095d2:	4d2c      	ldr	r5, [pc, #176]	; (10009684 <XMC_SCU_CLOCK_Init+0xbc>)
100095d4:	2a30      	cmp	r2, #48	; 0x30
100095d6:	d02f      	beq.n	10009638 <XMC_SCU_CLOCK_Init+0x70>
  {
    if (OSCHP_GetFrequency() > 20000000U)
100095d8:	f7ff fef8 	bl	100093cc <OSCHP_GetFrequency>
100095dc:	4b2a      	ldr	r3, [pc, #168]	; (10009688 <XMC_SCU_CLOCK_Init+0xc0>)
100095de:	4298      	cmp	r0, r3
100095e0:	d903      	bls.n	100095ea <XMC_SCU_CLOCK_Init+0x22>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
100095e2:	2240      	movs	r2, #64	; 0x40
100095e4:	882b      	ldrh	r3, [r5, #0]
100095e6:	4313      	orrs	r3, r2
100095e8:	802b      	strh	r3, [r5, #0]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
100095ea:	2232      	movs	r2, #50	; 0x32
100095ec:	882b      	ldrh	r3, [r5, #0]
100095ee:	4393      	bics	r3, r2
100095f0:	79a2      	ldrb	r2, [r4, #6]
100095f2:	4313      	orrs	r3, r2
100095f4:	802b      	strh	r3, [r5, #0]
                               config->oschp_mode;

    do 
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
100095f6:	2302      	movs	r3, #2
100095f8:	4924      	ldr	r1, [pc, #144]	; (1000968c <XMC_SCU_CLOCK_Init+0xc4>)

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog, 
         keeping in between at least one DCO2 cycle */
    
      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
100095fa:	4a25      	ldr	r2, [pc, #148]	; (10009690 <XMC_SCU_CLOCK_Init+0xc8>)
                               config->oschp_mode;

    do 
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
100095fc:	628b      	str	r3, [r1, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog, 
         keeping in between at least one DCO2 cycle */
    
      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
100095fe:	4b25      	ldr	r3, [pc, #148]	; (10009694 <XMC_SCU_CLOCK_Init+0xcc>)
10009600:	6958      	ldr	r0, [r3, #20]
10009602:	4002      	ands	r2, r0
10009604:	1c18      	adds	r0, r3, #0
10009606:	615a      	str	r2, [r3, #20]
10009608:	4a23      	ldr	r2, [pc, #140]	; (10009698 <XMC_SCU_CLOCK_Init+0xd0>)
1000960a:	3a01      	subs	r2, #1

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
1000960c:	2a00      	cmp	r2, #0
1000960e:	d001      	beq.n	10009614 <XMC_SCU_CLOCK_Init+0x4c>
  {
    __NOP();
10009610:	46c0      	nop			; (mov r8, r8)
10009612:	e7fa      	b.n	1000960a <XMC_SCU_CLOCK_Init+0x42>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);
      
      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
10009614:	25c0      	movs	r5, #192	; 0xc0
10009616:	695a      	ldr	r2, [r3, #20]
10009618:	04ad      	lsls	r5, r5, #18
1000961a:	432a      	orrs	r2, r5
1000961c:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
1000961e:	6943      	ldr	r3, [r0, #20]
10009620:	01db      	lsls	r3, r3, #7
10009622:	d4fc      	bmi.n	1000961e <XMC_SCU_CLOCK_Init+0x56>
10009624:	4b1d      	ldr	r3, [pc, #116]	; (1000969c <XMC_SCU_CLOCK_Init+0xd4>)
10009626:	3b01      	subs	r3, #1

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
10009628:	2b00      	cmp	r3, #0
1000962a:	d001      	beq.n	10009630 <XMC_SCU_CLOCK_Init+0x68>
  {
    __NOP();
1000962c:	46c0      	nop			; (mov r8, r8)
1000962e:	e7fa      	b.n	10009626 <XMC_SCU_CLOCK_Init+0x5e>

      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);
      
    } while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
10009630:	6a0b      	ldr	r3, [r1, #32]
10009632:	079b      	lsls	r3, r3, #30
10009634:	d4df      	bmi.n	100095f6 <XMC_SCU_CLOCK_Init+0x2e>
10009636:	e002      	b.n	1000963e <XMC_SCU_CLOCK_Init+0x76>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
10009638:	882b      	ldrh	r3, [r5, #0]
1000963a:	4313      	orrs	r3, r2
1000963c:	802b      	strh	r3, [r5, #0]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
1000963e:	79e3      	ldrb	r3, [r4, #7]
10009640:	4a17      	ldr	r2, [pc, #92]	; (100096a0 <XMC_SCU_CLOCK_Init+0xd8>)
10009642:	b299      	uxth	r1, r3
10009644:	8011      	strh	r1, [r2, #0]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP  
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
10009646:	2b00      	cmp	r3, #0
10009648:	d105      	bne.n	10009656 <XMC_SCU_CLOCK_Init+0x8e>
1000964a:	4b16      	ldr	r3, [pc, #88]	; (100096a4 <XMC_SCU_CLOCK_Init+0xdc>)
1000964c:	3b01      	subs	r3, #1

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
1000964e:	2b00      	cmp	r3, #0
10009650:	d001      	beq.n	10009656 <XMC_SCU_CLOCK_Init+0x8e>
  {
    __NOP();
10009652:	46c0      	nop			; (mov r8, r8)
10009654:	e7fa      	b.n	1000964c <XMC_SCU_CLOCK_Init+0x84>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif  

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
10009656:	490f      	ldr	r1, [pc, #60]	; (10009694 <XMC_SCU_CLOCK_Init+0xcc>)
10009658:	4a13      	ldr	r2, [pc, #76]	; (100096a8 <XMC_SCU_CLOCK_Init+0xe0>)
1000965a:	69cb      	ldr	r3, [r1, #28]
1000965c:	88a0      	ldrh	r0, [r4, #4]
1000965e:	4013      	ands	r3, r2
10009660:	4303      	orrs	r3, r0
10009662:	68e2      	ldr	r2, [r4, #12]
10009664:	68a0      	ldr	r0, [r4, #8]
10009666:	61cb      	str	r3, [r1, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10009668:	680b      	ldr	r3, [r1, #0]
1000966a:	4310      	orrs	r0, r2
1000966c:	4a0f      	ldr	r2, [pc, #60]	; (100096ac <XMC_SCU_CLOCK_Init+0xe4>)
1000966e:	4013      	ands	r3, r2
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10009670:	22c3      	movs	r2, #195	; 0xc3
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10009672:	4303      	orrs	r3, r0
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10009674:	600b      	str	r3, [r1, #0]
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10009676:	4b0e      	ldr	r3, [pc, #56]	; (100096b0 <XMC_SCU_CLOCK_Init+0xe8>)
10009678:	625a      	str	r2, [r3, #36]	; 0x24

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000967a:	78a0      	ldrb	r0, [r4, #2]
1000967c:	8821      	ldrh	r1, [r4, #0]
1000967e:	f7ff ff4d 	bl	1000951c <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10009682:	bd38      	pop	{r3, r4, r5, pc}
10009684:	40011090 	.word	0x40011090
10009688:	01312d00 	.word	0x01312d00
1000968c:	40010038 	.word	0x40010038
10009690:	fdffffff 	.word	0xfdffffff
10009694:	40010300 	.word	0x40010300
10009698:	0000021a 	.word	0x0000021a
1000969c:	00000a7d 	.word	0x00000a7d
100096a0:	4001108c 	.word	0x4001108c
100096a4:	00632ea0 	.word	0x00632ea0
100096a8:	fffffdff 	.word	0xfffffdff
100096ac:	fff0ffff 	.word	0xfff0ffff
100096b0:	40010000 	.word	0x40010000

100096b4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (SystemCoreClock);
100096b4:	4b01      	ldr	r3, [pc, #4]	; (100096bc <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x8>)
100096b6:	6818      	ldr	r0, [r3, #0]
}
100096b8:	4770      	bx	lr
100096ba:	46c0      	nop			; (mov r8, r8)
100096bc:	20003ffc 	.word	0x20003ffc

100096c0 <XMC_SCU_SetInterruptControl>:
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
100096c0:	2303      	movs	r3, #3
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
100096c2:	b530      	push	{r4, r5, lr}
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
100096c4:	4019      	ands	r1, r3
100096c6:	4a0b      	ldr	r2, [pc, #44]	; (100096f4 <XMC_SCU_SetInterruptControl+0x34>)
  if (irq_number < 16U)
100096c8:	280f      	cmp	r0, #15
100096ca:	d808      	bhi.n	100096de <XMC_SCU_SetInterruptControl+0x1e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100096cc:	0040      	lsls	r0, r0, #1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
100096ce:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100096d0:	4083      	lsls	r3, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
100096d2:	1c08      	adds	r0, r1, #0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100096d4:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
100096d6:	439c      	bics	r4, r3
100096d8:	4320      	orrs	r0, r4
100096da:	66d0      	str	r0, [r2, #108]	; 0x6c
100096dc:	e009      	b.n	100096f2 <XMC_SCU_SetInterruptControl+0x32>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100096de:	240f      	movs	r4, #15
100096e0:	4020      	ands	r0, r4
100096e2:	0044      	lsls	r4, r0, #1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
100096e4:	40a1      	lsls	r1, r4
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100096e6:	40a3      	lsls	r3, r4
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
100096e8:	1c08      	adds	r0, r1, #0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100096ea:	6f15      	ldr	r5, [r2, #112]	; 0x70
100096ec:	439d      	bics	r5, r3
100096ee:	4328      	orrs	r0, r5
100096f0:	6710      	str	r0, [r2, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
100096f2:	bd30      	pop	{r4, r5, pc}
100096f4:	40010000 	.word	0x40010000

100096f8 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
100096f8:	b508      	push	{r3, lr}
  if (module == CCU40)
100096fa:	4b06      	ldr	r3, [pc, #24]	; (10009714 <XMC_CCU4_lUngateClock+0x1c>)
100096fc:	4298      	cmp	r0, r3
100096fe:	d101      	bne.n	10009704 <XMC_CCU4_lUngateClock+0xc>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
10009700:	2004      	movs	r0, #4
10009702:	e004      	b.n	1000970e <XMC_CCU4_lUngateClock+0x16>
  }
#if defined(CCU41)
  else if (module == CCU41)
10009704:	4b04      	ldr	r3, [pc, #16]	; (10009718 <XMC_CCU4_lUngateClock+0x20>)
10009706:	4298      	cmp	r0, r3
10009708:	d103      	bne.n	10009712 <XMC_CCU4_lUngateClock+0x1a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
1000970a:	2080      	movs	r0, #128	; 0x80
1000970c:	0280      	lsls	r0, r0, #10
1000970e:	f7ff fee7 	bl	100094e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
10009712:	bd08      	pop	{r3, pc}
10009714:	48040000 	.word	0x48040000
10009718:	48044000 	.word	0x48044000

1000971c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
1000971c:	b538      	push	{r3, r4, r5, lr}
1000971e:	1c04      	adds	r4, r0, #0
10009720:	1c0d      	adds	r5, r1, #0
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
10009722:	f7ff ffe9 	bl	100096f8 <XMC_CCU4_lUngateClock>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10009726:	2380      	movs	r3, #128	; 0x80
10009728:	005b      	lsls	r3, r3, #1
1000972a:	60e3      	str	r3, [r4, #12]
  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
1000972c:	6821      	ldr	r1, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
1000972e:	4b03      	ldr	r3, [pc, #12]	; (1000973c <XMC_CCU4_Init+0x20>)
10009730:	400b      	ands	r3, r1
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10009732:	03a9      	lsls	r1, r5, #14
10009734:	4319      	orrs	r1, r3
  
  module->GCTRL = gctrl;
10009736:	6021      	str	r1, [r4, #0]
}
10009738:	bd38      	pop	{r3, r4, r5, pc}
1000973a:	46c0      	nop			; (mov r8, r8)
1000973c:	ffff3fff 	.word	0xffff3fff

10009740 <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10009740:	680b      	ldr	r3, [r1, #0]
10009742:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10009744:	794b      	ldrb	r3, [r1, #5]
10009746:	069b      	lsls	r3, r3, #26
10009748:	0fdb      	lsrs	r3, r3, #31
1000974a:	051b      	lsls	r3, r3, #20
1000974c:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
1000974e:	790b      	ldrb	r3, [r1, #4]
10009750:	071b      	lsls	r3, r3, #28
10009752:	0f1b      	lsrs	r3, r3, #28
10009754:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10009756:	794b      	ldrb	r3, [r1, #5]
10009758:	071b      	lsls	r3, r3, #28
1000975a:	0f1b      	lsrs	r3, r3, #28
1000975c:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
1000975e:	794b      	ldrb	r3, [r1, #5]
10009760:	06db      	lsls	r3, r3, #27
10009762:	0fdb      	lsrs	r3, r3, #31
10009764:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10009766:	790b      	ldrb	r3, [r1, #4]
10009768:	091b      	lsrs	r3, r3, #4
1000976a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
1000976c:	4770      	bx	lr
	...

10009770 <XMC_CCU4_SLICE_SetPrescaler>:
{
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
10009770:	6a82      	ldr	r2, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
10009772:	4b03      	ldr	r3, [pc, #12]	; (10009780 <XMC_CCU4_SLICE_SetPrescaler+0x10>)
10009774:	4013      	ands	r3, r2
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
10009776:	020a      	lsls	r2, r1, #8
10009778:	4313      	orrs	r3, r2
  slice->FPC = fpc;
1000977a:	6283      	str	r3, [r0, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
1000977c:	6241      	str	r1, [r0, #36]	; 0x24
}
1000977e:	4770      	bx	lr
10009780:	fffff0ff 	.word	0xfffff0ff

10009784 <XMC_CCU4_SLICE_SetInterruptNode>:

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10009784:	30a8      	adds	r0, #168	; 0xa8

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10009786:	b530      	push	{r4, r5, lr}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10009788:	6803      	ldr	r3, [r0, #0]
1000978a:	2909      	cmp	r1, #9
1000978c:	d805      	bhi.n	1000979a <XMC_CCU4_SLICE_SetInterruptNode+0x16>
1000978e:	4c07      	ldr	r4, [pc, #28]	; (100097ac <XMC_CCU4_SLICE_SetInterruptNode+0x28>)
10009790:	4d07      	ldr	r5, [pc, #28]	; (100097b0 <XMC_CCU4_SLICE_SetInterruptNode+0x2c>)
10009792:	5c64      	ldrb	r4, [r4, r1]
10009794:	0049      	lsls	r1, r1, #1
10009796:	5b49      	ldrh	r1, [r1, r5]
10009798:	e002      	b.n	100097a0 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>
1000979a:	21c0      	movs	r1, #192	; 0xc0
1000979c:	240c      	movs	r4, #12
1000979e:	0189      	lsls	r1, r1, #6
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
  srs |= (uint32_t)sr << pos;
100097a0:	40a2      	lsls	r2, r4
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
100097a2:	438b      	bics	r3, r1
  srs |= (uint32_t)sr << pos;
100097a4:	431a      	orrs	r2, r3
  slice->SRS = srs;
100097a6:	6002      	str	r2, [r0, #0]
}
100097a8:	bd30      	pop	{r4, r5, pc}
100097aa:	46c0      	nop			; (mov r8, r8)
100097ac:	1000f38e 	.word	0x1000f38e
100097b0:	1000f37a 	.word	0x1000f37a

100097b4 <XMC_GPIO_SetMode>:
void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
100097b4:	088b      	lsrs	r3, r1, #2
100097b6:	009b      	lsls	r3, r3, #2
100097b8:	18c0      	adds	r0, r0, r3
100097ba:	2303      	movs	r3, #3
100097bc:	4019      	ands	r1, r3
100097be:	4099      	lsls	r1, r3
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
100097c0:	408a      	lsls	r2, r1
void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
100097c2:	33f9      	adds	r3, #249	; 0xf9
100097c4:	408b      	lsls	r3, r1
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
100097c6:	1c11      	adds	r1, r2, #0
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
100097c8:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
100097ca:	6904      	ldr	r4, [r0, #16]
100097cc:	439c      	bics	r4, r3
100097ce:	6104      	str	r4, [r0, #16]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
100097d0:	6903      	ldr	r3, [r0, #16]
100097d2:	4319      	orrs	r1, r3
100097d4:	6101      	str	r1, [r0, #16]
}
100097d6:	bd10      	pop	{r4, pc}

100097d8 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
100097d8:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100097da:	2403      	movs	r4, #3
100097dc:	0049      	lsls	r1, r1, #1
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100097de:	408a      	lsls	r2, r1
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100097e0:	408c      	lsls	r4, r1
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100097e2:	1c11      	adds	r1, r2, #0
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100097e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
100097e6:	43a3      	bics	r3, r4
100097e8:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100097ea:	6f43      	ldr	r3, [r0, #116]	; 0x74
100097ec:	4319      	orrs	r1, r3
100097ee:	6741      	str	r1, [r0, #116]	; 0x74
}
100097f0:	bd10      	pop	{r4, pc}

100097f2 <XMC_I2C_CH_SetSlaveAddress>:
  channel->CCR = 0x0U;
}
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
100097f2:	23f8      	movs	r3, #248	; 0xf8
100097f4:	22f0      	movs	r2, #240	; 0xf0
100097f6:	01db      	lsls	r3, r3, #7
100097f8:	400b      	ands	r3, r1
100097fa:	01d2      	lsls	r2, r2, #7
100097fc:	4293      	cmp	r3, r2
100097fe:	d107      	bne.n	10009810 <XMC_I2C_CH_SetSlaveAddress+0x1e>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
10009800:	23fe      	movs	r3, #254	; 0xfe
10009802:	004a      	lsls	r2, r1, #1
10009804:	021b      	lsls	r3, r3, #8
10009806:	401a      	ands	r2, r3
10009808:	b2cb      	uxtb	r3, r1
1000980a:	431a      	orrs	r2, r3
1000980c:	1c11      	adds	r1, r2, #0
1000980e:	e000      	b.n	10009812 <XMC_I2C_CH_SetSlaveAddress+0x20>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
10009810:	0209      	lsls	r1, r1, #8
10009812:	63c1      	str	r1, [r0, #60]	; 0x3c
  }
}
10009814:	4770      	bx	lr
	...

10009818 <XMC_I2C_CH_SetBaudrate>:
  return (uint16_t)address;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
10009818:	b508      	push	{r3, lr}
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
1000981a:	4b0d      	ldr	r3, [pc, #52]	; (10009850 <XMC_I2C_CH_SetBaudrate+0x38>)
1000981c:	4299      	cmp	r1, r3
1000981e:	d805      	bhi.n	1000982c <XMC_I2C_CH_SetBaudrate+0x14>
  {
	channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
10009820:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
10009822:	4b0c      	ldr	r3, [pc, #48]	; (10009854 <XMC_I2C_CH_SetBaudrate+0x3c>)
10009824:	4013      	ands	r3, r2
10009826:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
10009828:	220a      	movs	r2, #10
1000982a:	e009      	b.n	10009840 <XMC_I2C_CH_SetBaudrate+0x28>
    {
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
1000982c:	4a0a      	ldr	r2, [pc, #40]	; (10009858 <XMC_I2C_CH_SetBaudrate+0x40>)
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
1000982e:	2301      	movs	r3, #1
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
10009830:	4291      	cmp	r1, r2
10009832:	d80a      	bhi.n	1000984a <XMC_I2C_CH_SetBaudrate+0x32>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
10009834:	2280      	movs	r2, #128	; 0x80
10009836:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
10009838:	0292      	lsls	r2, r2, #10
1000983a:	4313      	orrs	r3, r2
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
1000983c:	2219      	movs	r2, #25
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
1000983e:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
10009840:	f000 f9cc 	bl	10009bdc <XMC_USIC_CH_SetBaudrate>
10009844:	1e43      	subs	r3, r0, #1
10009846:	4198      	sbcs	r0, r3
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
	channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
10009848:	b2c3      	uxtb	r3, r0
  {
    status = XMC_I2C_CH_STATUS_ERROR;
  }
  
  return status;
}
1000984a:	1c18      	adds	r0, r3, #0
1000984c:	bd08      	pop	{r3, pc}
1000984e:	46c0      	nop			; (mov r8, r8)
10009850:	000186a0 	.word	0x000186a0
10009854:	fffdffff 	.word	0xfffdffff
10009858:	00061a80 	.word	0x00061a80

1000985c <XMC_I2C_CH_SetBaudrateEx>:

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
1000985c:	1c03      	adds	r3, r0, #0
  XMC_USIC_CH_STATUS_t status;
   
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
1000985e:	4811      	ldr	r0, [pc, #68]	; (100098a4 <XMC_I2C_CH_SetBaudrateEx+0x48>)
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
10009860:	b510      	push	{r4, lr}
  XMC_USIC_CH_STATUS_t status;
   
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
10009862:	4281      	cmp	r1, r0
10009864:	d80a      	bhi.n	1000987c <XMC_I2C_CH_SetBaudrateEx+0x20>
  {
	  channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
10009866:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
10009868:	480f      	ldr	r0, [pc, #60]	; (100098a8 <XMC_I2C_CH_SetBaudrateEx+0x4c>)
1000986a:	4020      	ands	r0, r4
1000986c:	63d8      	str	r0, [r3, #60]	; 0x3c
    if (normal_divider_mode)
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
1000986e:	1c18      	adds	r0, r3, #0
  XMC_USIC_CH_STATUS_t status;
   
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
	  channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
    if (normal_divider_mode)
10009870:	2a00      	cmp	r2, #0
10009872:	d001      	beq.n	10009878 <XMC_I2C_CH_SetBaudrateEx+0x1c>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
10009874:	220a      	movs	r2, #10
10009876:	e00e      	b.n	10009896 <XMC_I2C_CH_SetBaudrateEx+0x3a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
10009878:	220a      	movs	r2, #10
1000987a:	e010      	b.n	1000989e <XMC_I2C_CH_SetBaudrateEx+0x42>
    }   
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
1000987c:	4c0b      	ldr	r4, [pc, #44]	; (100098ac <XMC_I2C_CH_SetBaudrateEx+0x50>)
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
    }
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
1000987e:	2001      	movs	r0, #1
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
    }   
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
10009880:	42a1      	cmp	r1, r4
10009882:	d80e      	bhi.n	100098a2 <XMC_I2C_CH_SetBaudrateEx+0x46>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
10009884:	2480      	movs	r4, #128	; 0x80
10009886:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
10009888:	02a4      	lsls	r4, r4, #10
1000988a:	4320      	orrs	r0, r4
1000988c:	63d8      	str	r0, [r3, #60]	; 0x3c
    if (normal_divider_mode)
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
1000988e:	1c18      	adds	r0, r3, #0
    }   
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
    if (normal_divider_mode)
10009890:	2a00      	cmp	r2, #0
10009892:	d003      	beq.n	1000989c <XMC_I2C_CH_SetBaudrateEx+0x40>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
10009894:	2219      	movs	r2, #25
10009896:	f000 f9ed 	bl	10009c74 <XMC_USIC_CH_SetBaudrateEx>
1000989a:	e002      	b.n	100098a2 <XMC_I2C_CH_SetBaudrateEx+0x46>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
1000989c:	2219      	movs	r2, #25
1000989e:	f000 f99d 	bl	10009bdc <XMC_USIC_CH_SetBaudrate>
  {
    status = XMC_USIC_CH_STATUS_ERROR;
  }
  
  return (XMC_I2C_CH_STATUS_t)status;
}
100098a2:	bd10      	pop	{r4, pc}
100098a4:	000186a0 	.word	0x000186a0
100098a8:	fffdffff 	.word	0xfffdffff
100098ac:	00061a80 	.word	0x00061a80

100098b0 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
100098b0:	b538      	push	{r3, r4, r5, lr}
100098b2:	1c04      	adds	r4, r0, #0
100098b4:	1c0d      	adds	r5, r1, #0
  XMC_USIC_CH_Enable(channel);
100098b6:	f000 fab1 	bl	10009e1c <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
100098ba:	4b0a      	ldr	r3, [pc, #40]	; (100098e4 <XMC_I2C_CH_Init+0x34>)
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
100098bc:	1c20      	adds	r0, r4, #0
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
  XMC_USIC_CH_Enable(channel);
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
100098be:	6363      	str	r3, [r4, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
100098c0:	88e9      	ldrh	r1, [r5, #6]
100098c2:	f7ff ff96 	bl	100097f2 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
100098c6:	792a      	ldrb	r2, [r5, #4]
100098c8:	6829      	ldr	r1, [r5, #0]
100098ca:	1c20      	adds	r0, r4, #0
100098cc:	f7ff ffc6 	bl	1000985c <XMC_I2C_CH_SetBaudrateEx>
  
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
100098d0:	23a0      	movs	r3, #160	; 0xa0
100098d2:	00db      	lsls	r3, r3, #3
100098d4:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
100098d6:	2301      	movs	r3, #1
100098d8:	425b      	negs	r3, r3
100098da:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
100098dc:	2300      	movs	r3, #0
100098de:	6423      	str	r3, [r4, #64]	; 0x40
}
100098e0:	bd38      	pop	{r3, r4, r5, pc}
100098e2:	46c0      	nop			; (mov r8, r8)
100098e4:	073f0303 	.word	0x073f0303

100098e8 <XMC_I2C_CH_MasterStart>:
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
  if (command == XMC_I2C_CH_CMD_READ)
100098e8:	2a01      	cmp	r2, #1
100098ea:	d002      	beq.n	100098f2 <XMC_I2C_CH_MasterStart+0xa>
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
100098ec:	2380      	movs	r3, #128	; 0x80
100098ee:	00db      	lsls	r3, r3, #3
100098f0:	e000      	b.n	100098f4 <XMC_I2C_CH_MasterStart+0xc>
  if (command == XMC_I2C_CH_CMD_READ)
  {
    temp |= 0x1U;
100098f2:	4b0d      	ldr	r3, [pc, #52]	; (10009928 <XMC_I2C_CH_MasterStart+0x40>)
100098f4:	4319      	orrs	r1, r3
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
100098f6:	1c03      	adds	r3, r0, #0
100098f8:	33fc      	adds	r3, #252	; 0xfc
100098fa:	68da      	ldr	r2, [r3, #12]
100098fc:	23e0      	movs	r3, #224	; 0xe0
100098fe:	04db      	lsls	r3, r3, #19
10009900:	421a      	tst	r2, r3
10009902:	d10d      	bne.n	10009920 <XMC_I2C_CH_MasterStart+0x38>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10009904:	227f      	movs	r2, #127	; 0x7f
10009906:	6b83      	ldr	r3, [r0, #56]	; 0x38
10009908:	4393      	bics	r3, r2
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000990a:	b2db      	uxtb	r3, r3
1000990c:	2b80      	cmp	r3, #128	; 0x80
1000990e:	d0f9      	beq.n	10009904 <XMC_I2C_CH_MasterStart+0x1c>
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
10009910:	2280      	movs	r2, #128	; 0x80
10009912:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
10009914:	0192      	lsls	r2, r2, #6
10009916:	4313      	orrs	r3, r2
10009918:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = temp;
1000991a:	3004      	adds	r0, #4
1000991c:	67c1      	str	r1, [r0, #124]	; 0x7c
1000991e:	e002      	b.n	10009926 <XMC_I2C_CH_MasterStart+0x3e>
  }
  else
  {
    channel->IN[0U] = temp;
10009920:	23c0      	movs	r3, #192	; 0xc0
10009922:	005b      	lsls	r3, r3, #1
10009924:	50c1      	str	r1, [r0, r3]
  }
}
10009926:	4770      	bx	lr
10009928:	00000401 	.word	0x00000401

1000992c <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
  if (command == XMC_I2C_CH_CMD_READ)
1000992c:	2a01      	cmp	r2, #1
1000992e:	d002      	beq.n	10009936 <XMC_I2C_CH_MasterRepeatedStart+0xa>
}
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
10009930:	23a0      	movs	r3, #160	; 0xa0
10009932:	00db      	lsls	r3, r3, #3
10009934:	e000      	b.n	10009938 <XMC_I2C_CH_MasterRepeatedStart+0xc>
  if (command == XMC_I2C_CH_CMD_READ)
  {
    tmp |= 0x1U;
10009936:	4b0d      	ldr	r3, [pc, #52]	; (1000996c <XMC_I2C_CH_MasterRepeatedStart+0x40>)
10009938:	4319      	orrs	r1, r3
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000993a:	1c03      	adds	r3, r0, #0
1000993c:	33fc      	adds	r3, #252	; 0xfc
1000993e:	68da      	ldr	r2, [r3, #12]
10009940:	23e0      	movs	r3, #224	; 0xe0
10009942:	04db      	lsls	r3, r3, #19
10009944:	421a      	tst	r2, r3
10009946:	d10d      	bne.n	10009964 <XMC_I2C_CH_MasterRepeatedStart+0x38>
10009948:	227f      	movs	r2, #127	; 0x7f
1000994a:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000994c:	4393      	bics	r3, r2
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000994e:	b2db      	uxtb	r3, r3
10009950:	2b80      	cmp	r3, #128	; 0x80
10009952:	d0f9      	beq.n	10009948 <XMC_I2C_CH_MasterRepeatedStart+0x1c>
10009954:	2280      	movs	r2, #128	; 0x80
10009956:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
10009958:	0192      	lsls	r2, r2, #6
1000995a:	4313      	orrs	r3, r2
1000995c:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = tmp;
1000995e:	3004      	adds	r0, #4
10009960:	67c1      	str	r1, [r0, #124]	; 0x7c
10009962:	e002      	b.n	1000996a <XMC_I2C_CH_MasterRepeatedStart+0x3e>
  }
  else
  {
    channel->IN[0U] = tmp;
10009964:	23c0      	movs	r3, #192	; 0xc0
10009966:	005b      	lsls	r3, r3, #1
10009968:	50c1      	str	r1, [r0, r3]
  }
}
1000996a:	4770      	bx	lr
1000996c:	00000501 	.word	0x00000501

10009970 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10009970:	1c03      	adds	r3, r0, #0
10009972:	33fc      	adds	r3, #252	; 0xfc
10009974:	68da      	ldr	r2, [r3, #12]
10009976:	23e0      	movs	r3, #224	; 0xe0
10009978:	04db      	lsls	r3, r3, #19
1000997a:	421a      	tst	r2, r3
1000997c:	d10f      	bne.n	1000999e <XMC_I2C_CH_MasterStop+0x2e>
1000997e:	227f      	movs	r2, #127	; 0x7f
10009980:	6b83      	ldr	r3, [r0, #56]	; 0x38
10009982:	4393      	bics	r3, r2
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10009984:	b2db      	uxtb	r3, r3
10009986:	2b80      	cmp	r3, #128	; 0x80
10009988:	d0f9      	beq.n	1000997e <XMC_I2C_CH_MasterStop+0xe>
1000998a:	2280      	movs	r2, #128	; 0x80
1000998c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000998e:	0192      	lsls	r2, r2, #6
10009990:	4313      	orrs	r3, r2
10009992:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
10009994:	23c0      	movs	r3, #192	; 0xc0
10009996:	3004      	adds	r0, #4
10009998:	00db      	lsls	r3, r3, #3
1000999a:	67c3      	str	r3, [r0, #124]	; 0x7c
1000999c:	e004      	b.n	100099a8 <XMC_I2C_CH_MasterStop+0x38>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
1000999e:	22c0      	movs	r2, #192	; 0xc0
100099a0:	23c0      	movs	r3, #192	; 0xc0
100099a2:	00d2      	lsls	r2, r2, #3
100099a4:	005b      	lsls	r3, r3, #1
100099a6:	50c2      	str	r2, [r0, r3]
  }
}
100099a8:	4770      	bx	lr

100099aa <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
100099aa:	1c03      	adds	r3, r0, #0
100099ac:	33fc      	adds	r3, #252	; 0xfc
100099ae:	68da      	ldr	r2, [r3, #12]
100099b0:	23e0      	movs	r3, #224	; 0xe0
100099b2:	04db      	lsls	r3, r3, #19
100099b4:	421a      	tst	r2, r3
100099b6:	d10d      	bne.n	100099d4 <XMC_I2C_CH_MasterTransmit+0x2a>
100099b8:	227f      	movs	r2, #127	; 0x7f
100099ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
100099bc:	4393      	bics	r3, r2
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100099be:	b2db      	uxtb	r3, r3
100099c0:	2b80      	cmp	r3, #128	; 0x80
100099c2:	d0f9      	beq.n	100099b8 <XMC_I2C_CH_MasterTransmit+0xe>
100099c4:	2280      	movs	r2, #128	; 0x80
100099c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
100099c8:	0192      	lsls	r2, r2, #6
100099ca:	4313      	orrs	r3, r2
100099cc:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
100099ce:	3004      	adds	r0, #4
100099d0:	67c1      	str	r1, [r0, #124]	; 0x7c
100099d2:	e002      	b.n	100099da <XMC_I2C_CH_MasterTransmit+0x30>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
100099d4:	23c0      	movs	r3, #192	; 0xc0
100099d6:	005b      	lsls	r3, r3, #1
100099d8:	50c1      	str	r1, [r0, r3]
  }
}
100099da:	4770      	bx	lr

100099dc <XMC_I2C_CH_MasterReceiveAck>:

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
100099dc:	1c03      	adds	r3, r0, #0
100099de:	33fc      	adds	r3, #252	; 0xfc
100099e0:	68da      	ldr	r2, [r3, #12]
100099e2:	23e0      	movs	r3, #224	; 0xe0
100099e4:	04db      	lsls	r3, r3, #19
100099e6:	421a      	tst	r2, r3
100099e8:	d10f      	bne.n	10009a0a <XMC_I2C_CH_MasterReceiveAck+0x2e>
100099ea:	227f      	movs	r2, #127	; 0x7f
100099ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
100099ee:	4393      	bics	r3, r2
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100099f0:	b2db      	uxtb	r3, r3
100099f2:	2b80      	cmp	r3, #128	; 0x80
100099f4:	d0f9      	beq.n	100099ea <XMC_I2C_CH_MasterReceiveAck+0xe>
100099f6:	2280      	movs	r2, #128	; 0x80
100099f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
100099fa:	0192      	lsls	r2, r2, #6
100099fc:	4313      	orrs	r3, r2
100099fe:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10009a00:	2380      	movs	r3, #128	; 0x80
10009a02:	3004      	adds	r0, #4
10009a04:	009b      	lsls	r3, r3, #2
10009a06:	67c3      	str	r3, [r0, #124]	; 0x7c
10009a08:	e004      	b.n	10009a14 <XMC_I2C_CH_MasterReceiveAck+0x38>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10009a0a:	2280      	movs	r2, #128	; 0x80
10009a0c:	23c0      	movs	r3, #192	; 0xc0
10009a0e:	0092      	lsls	r2, r2, #2
10009a10:	005b      	lsls	r3, r3, #1
10009a12:	50c2      	str	r2, [r0, r3]
  }
}
10009a14:	4770      	bx	lr

10009a16 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10009a16:	1c03      	adds	r3, r0, #0
10009a18:	33fc      	adds	r3, #252	; 0xfc
10009a1a:	68da      	ldr	r2, [r3, #12]
10009a1c:	23e0      	movs	r3, #224	; 0xe0
10009a1e:	04db      	lsls	r3, r3, #19
10009a20:	421a      	tst	r2, r3
10009a22:	d10f      	bne.n	10009a44 <XMC_I2C_CH_MasterReceiveNack+0x2e>
10009a24:	227f      	movs	r2, #127	; 0x7f
10009a26:	6b83      	ldr	r3, [r0, #56]	; 0x38
10009a28:	4393      	bics	r3, r2
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10009a2a:	b2db      	uxtb	r3, r3
10009a2c:	2b80      	cmp	r3, #128	; 0x80
10009a2e:	d0f9      	beq.n	10009a24 <XMC_I2C_CH_MasterReceiveNack+0xe>
10009a30:	2280      	movs	r2, #128	; 0x80
10009a32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
10009a34:	0192      	lsls	r2, r2, #6
10009a36:	4313      	orrs	r3, r2
10009a38:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
10009a3a:	23c0      	movs	r3, #192	; 0xc0
10009a3c:	3004      	adds	r0, #4
10009a3e:	009b      	lsls	r3, r3, #2
10009a40:	67c3      	str	r3, [r0, #124]	; 0x7c
10009a42:	e004      	b.n	10009a4e <XMC_I2C_CH_MasterReceiveNack+0x38>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
10009a44:	22c0      	movs	r2, #192	; 0xc0
10009a46:	23c0      	movs	r3, #192	; 0xc0
10009a48:	0092      	lsls	r2, r2, #2
10009a4a:	005b      	lsls	r3, r3, #1
10009a4c:	50c2      	str	r2, [r0, r3]
  }
}
10009a4e:	4770      	bx	lr

10009a50 <XMC_I2C_CH_GetReceivedData>:
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10009a50:	1c03      	adds	r3, r0, #0
10009a52:	22e0      	movs	r2, #224	; 0xe0
10009a54:	33fc      	adds	r3, #252	; 0xfc
10009a56:	6919      	ldr	r1, [r3, #16]
10009a58:	04d2      	lsls	r2, r2, #19
10009a5a:	4211      	tst	r1, r2
10009a5c:	d101      	bne.n	10009a62 <XMC_I2C_CH_GetReceivedData+0x12>
  {
    retval = (uint8_t)channel->RBUF;
10009a5e:	6d40      	ldr	r0, [r0, #84]	; 0x54
10009a60:	e000      	b.n	10009a64 <XMC_I2C_CH_GetReceivedData+0x14>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
10009a62:	6a18      	ldr	r0, [r3, #32]
10009a64:	b2c0      	uxtb	r0, r0
  }

  return retval;
}
10009a66:	4770      	bx	lr

10009a68 <XMC_I2C_CH_EnableEvent>:
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= (event&0x1fc00U);
10009a68:	23fe      	movs	r3, #254	; 0xfe
10009a6a:	6c02      	ldr	r2, [r0, #64]	; 0x40
10009a6c:	025b      	lsls	r3, r3, #9
10009a6e:	400b      	ands	r3, r1
10009a70:	4313      	orrs	r3, r2
10009a72:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
10009a74:	4a02      	ldr	r2, [pc, #8]	; (10009a80 <XMC_I2C_CH_EnableEvent+0x18>)
10009a76:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
10009a78:	4011      	ands	r1, r2
10009a7a:	4319      	orrs	r1, r3
10009a7c:	63c1      	str	r1, [r0, #60]	; 0x3c
}
10009a7e:	4770      	bx	lr
10009a80:	41fc0000 	.word	0x41fc0000

10009a84 <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
10009a84:	22fe      	movs	r2, #254	; 0xfe
10009a86:	6c03      	ldr	r3, [r0, #64]	; 0x40
10009a88:	0252      	lsls	r2, r2, #9
10009a8a:	400a      	ands	r2, r1
10009a8c:	4393      	bics	r3, r2
10009a8e:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
10009a90:	4a02      	ldr	r2, [pc, #8]	; (10009a9c <XMC_I2C_CH_DisableEvent+0x18>)
10009a92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
10009a94:	4011      	ands	r1, r2
10009a96:	438b      	bics	r3, r1
10009a98:	63c3      	str	r3, [r0, #60]	; 0x3c
}
10009a9a:	4770      	bx	lr
10009a9c:	41fc0000 	.word	0x41fc0000

10009aa0 <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
10009aa0:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10009aa2:	f3ef 8210 	mrs	r2, PRIMASK
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10009aa6:	b672      	cpsid	i
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10009aa8:	2404      	movs	r4, #4
10009aaa:	4b04      	ldr	r3, [pc, #16]	; (10009abc <__aeabi_uidiv+0x1c>)
10009aac:	635c      	str	r4, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10009aae:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
10009ab0:	6259      	str	r1, [r3, #36]	; 0x24

  result = MATH->QUOT;
10009ab2:	6a98      	ldr	r0, [r3, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10009ab4:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return result;
}
10009ab8:	bd10      	pop	{r4, pc}
10009aba:	46c0      	nop			; (mov r8, r8)
10009abc:	40030000 	.word	0x40030000

10009ac0 <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
10009ac0:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10009ac2:	f3ef 8210 	mrs	r2, PRIMASK
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10009ac6:	b672      	cpsid	i
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();

  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
10009ac8:	2400      	movs	r4, #0
10009aca:	4b04      	ldr	r3, [pc, #16]	; (10009adc <__aeabi_idiv+0x1c>)
10009acc:	635c      	str	r4, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10009ace:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
10009ad0:	6259      	str	r1, [r3, #36]	; 0x24

  result = MATH->QUOT;
10009ad2:	6a98      	ldr	r0, [r3, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10009ad4:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);
  
  return result;
}
10009ad8:	bd10      	pop	{r4, pc}
10009ada:	46c0      	nop			; (mov r8, r8)
10009adc:	40030000 	.word	0x40030000

10009ae0 <__aeabi_uidivmod>:

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
10009ae0:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10009ae2:	f3ef 8210 	mrs	r2, PRIMASK
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10009ae6:	b672      	cpsid	i
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
  
  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10009ae8:	2404      	movs	r4, #4
10009aea:	4b04      	ldr	r3, [pc, #16]	; (10009afc <__aeabi_uidivmod+0x1c>)
10009aec:	635c      	str	r4, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10009aee:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
10009af0:	6259      	str	r1, [r3, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;
10009af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  quot = (uint64_t)MATH->QUOT;
10009af4:	6a98      	ldr	r0, [r3, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10009af6:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((remainder << 32) | quot);
}
10009afa:	bd10      	pop	{r4, pc}
10009afc:	40030000 	.word	0x40030000

10009b00 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
10009b00:	b570      	push	{r4, r5, r6, lr}
10009b02:	1c0e      	adds	r6, r1, #0
10009b04:	1c04      	adds	r4, r0, #0
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
10009b06:	f000 f989 	bl	10009e1c <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
10009b0a:	7a33      	ldrb	r3, [r6, #8]
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
10009b0c:	2510      	movs	r5, #16

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
  
  if(config->oversampling != 0U)
10009b0e:	2b00      	cmp	r3, #0
10009b10:	d000      	beq.n	10009b14 <XMC_UART_CH_Init+0x14>
  {
    oversampling = (uint32_t)config->oversampling;
10009b12:	1c1d      	adds	r5, r3, #0
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
10009b14:	7933      	ldrb	r3, [r6, #4]
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
10009b16:	1c20      	adds	r0, r4, #0
10009b18:	6831      	ldr	r1, [r6, #0]
10009b1a:	1c2a      	adds	r2, r5, #0
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
10009b1c:	2b00      	cmp	r3, #0
10009b1e:	d002      	beq.n	10009b26 <XMC_UART_CH_Init+0x26>
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
10009b20:	f000 f8a8 	bl	10009c74 <XMC_USIC_CH_SetBaudrateEx>
10009b24:	e001      	b.n	10009b2a <XMC_UART_CH_Init+0x2a>
  }
  else
  {
    /* Fractional divider mode */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
10009b26:	f000 f859 	bl	10009bdc <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
10009b2a:	79f3      	ldrb	r3, [r6, #7]
10009b2c:	4a13      	ldr	r2, [pc, #76]	; (10009b7c <XMC_UART_CH_Init+0x7c>)
10009b2e:	3b01      	subs	r3, #1
10009b30:	005b      	lsls	r3, r3, #1
10009b32:	4313      	orrs	r3, r2
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
10009b34:	2281      	movs	r2, #129	; 0x81
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
10009b36:	086d      	lsrs	r5, r5, #1
10009b38:	3501      	adds	r5, #1
10009b3a:	022d      	lsls	r5, r5, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
10009b3c:	431d      	orrs	r5, r3
10009b3e:	63e5      	str	r5, [r4, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
10009b40:	7973      	ldrb	r3, [r6, #5]
10009b42:	0052      	lsls	r2, r2, #1
10009b44:	3b01      	subs	r3, #1
10009b46:	061b      	lsls	r3, r3, #24
10009b48:	4313      	orrs	r3, r2
10009b4a:	6363      	str	r3, [r4, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
10009b4c:	79b3      	ldrb	r3, [r6, #6]
10009b4e:	2b00      	cmp	r3, #0
10009b50:	d004      	beq.n	10009b5c <XMC_UART_CH_Init+0x5c>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
10009b52:	6b62      	ldr	r2, [r4, #52]	; 0x34
10009b54:	3b01      	subs	r3, #1
10009b56:	041b      	lsls	r3, r3, #16
10009b58:	4313      	orrs	r3, r2
10009b5a:	e004      	b.n	10009b66 <XMC_UART_CH_Init+0x66>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
10009b5c:	7972      	ldrb	r2, [r6, #5]
10009b5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10009b60:	1e53      	subs	r3, r2, #1
10009b62:	041b      	lsls	r3, r3, #16
10009b64:	430b      	orrs	r3, r1
10009b66:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
10009b68:	23a0      	movs	r3, #160	; 0xa0
10009b6a:	00db      	lsls	r3, r3, #3
10009b6c:	63a3      	str	r3, [r4, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
10009b6e:	2301      	movs	r3, #1
10009b70:	425b      	negs	r3, r3
10009b72:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
10009b74:	8973      	ldrh	r3, [r6, #10]
10009b76:	6423      	str	r3, [r4, #64]	; 0x40
}
10009b78:	bd70      	pop	{r4, r5, r6, pc}
10009b7a:	46c0      	nop			; (mov r8, r8)
10009b7c:	00030001 	.word	0x00030001

10009b80 <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
10009b80:	1c03      	adds	r3, r0, #0
10009b82:	33fc      	adds	r3, #252	; 0xfc
10009b84:	68da      	ldr	r2, [r3, #12]
10009b86:	23e0      	movs	r3, #224	; 0xe0
10009b88:	04db      	lsls	r3, r3, #19
10009b8a:	421a      	tst	r2, r3
10009b8c:	d10b      	bne.n	10009ba6 <XMC_UART_CH_Transmit+0x26>
10009b8e:	227f      	movs	r2, #127	; 0x7f
10009b90:	6b83      	ldr	r3, [r0, #56]	; 0x38
10009b92:	4393      	bics	r3, r2
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10009b94:	b2db      	uxtb	r3, r3
10009b96:	2b80      	cmp	r3, #128	; 0x80
10009b98:	d0f9      	beq.n	10009b8e <XMC_UART_CH_Transmit+0xe>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
10009b9a:	2380      	movs	r3, #128	; 0x80
10009b9c:	019b      	lsls	r3, r3, #6
10009b9e:	64c3      	str	r3, [r0, #76]	; 0x4c
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    /*Transmit data */
    channel->TBUF[0U] = data;
10009ba0:	3004      	adds	r0, #4
10009ba2:	67c1      	str	r1, [r0, #124]	; 0x7c
10009ba4:	e002      	b.n	10009bac <XMC_UART_CH_Transmit+0x2c>
  }
  else
  {
    channel->IN[0U] = data;
10009ba6:	23c0      	movs	r3, #192	; 0xc0
10009ba8:	005b      	lsls	r3, r3, #1
10009baa:	50c1      	str	r1, [r0, r3]
  }
}
10009bac:	4770      	bx	lr

10009bae <XMC_UART_CH_GetReceivedData>:
uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10009bae:	1c03      	adds	r3, r0, #0
10009bb0:	22e0      	movs	r2, #224	; 0xe0
10009bb2:	33fc      	adds	r3, #252	; 0xfc
10009bb4:	6919      	ldr	r1, [r3, #16]
10009bb6:	04d2      	lsls	r2, r2, #19
10009bb8:	4211      	tst	r1, r2
10009bba:	d101      	bne.n	10009bc0 <XMC_UART_CH_GetReceivedData+0x12>
  {
    retval = (uint16_t)channel->RBUF;
10009bbc:	6d40      	ldr	r0, [r0, #84]	; 0x54
10009bbe:	e000      	b.n	10009bc2 <XMC_UART_CH_GetReceivedData+0x14>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
10009bc0:	6a18      	ldr	r0, [r3, #32]
10009bc2:	b280      	uxth	r0, r0
  }

  return retval;
}
10009bc4:	4770      	bx	lr

10009bc6 <XMC_USIC_Enable.part.0>:
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
10009bc6:	b508      	push	{r3, lr}
{
  if (usic == USIC0)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
10009bc8:	2008      	movs	r0, #8
10009bca:	f7ff fc89 	bl	100094e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
10009bce:	2008      	movs	r0, #8
10009bd0:	f7ff fc9a 	bl	10009508 <XMC_SCU_CLOCK_IsPeripheralClockGated>
10009bd4:	2800      	cmp	r0, #0
10009bd6:	d1fa      	bne.n	10009bce <XMC_USIC_Enable.part.0+0x8>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
10009bd8:	bd08      	pop	{r3, pc}
	...

10009bdc <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10009bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
                    
    status = XMC_USIC_CH_STATUS_OK;
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10009bde:	2401      	movs	r4, #1
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10009be0:	b087      	sub	sp, #28
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
10009be2:	2963      	cmp	r1, #99	; 0x63
10009be4:	d93e      	bls.n	10009c64 <XMC_USIC_CH_SetBaudrate+0x88>
10009be6:	2a00      	cmp	r2, #0
10009be8:	d03c      	beq.n	10009c64 <XMC_USIC_CH_SetBaudrate+0x88>
10009bea:	1c0e      	adds	r6, r1, #0
10009bec:	9204      	str	r2, [sp, #16]
10009bee:	1c05      	adds	r5, r0, #0
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
10009bf0:	f7ff fd60 	bl	100096b4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10009bf4:	2164      	movs	r1, #100	; 0x64
10009bf6:	f7ff ff53 	bl	10009aa0 <__aeabi_uidiv>
    rate = rate / 100U;
10009bfa:	2164      	movs	r1, #100	; 0x64
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
10009bfc:	1c07      	adds	r7, r0, #0
    rate = rate / 100U;
10009bfe:	1c30      	adds	r0, r6, #0
10009c00:	f7ff ff4e 	bl	10009aa0 <__aeabi_uidiv>

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
10009c04:	4e19      	ldr	r6, [pc, #100]	; (10009c6c <XMC_USIC_CH_SetBaudrate+0x90>)
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
10009c06:	9401      	str	r4, [sp, #4]
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
10009c08:	9403      	str	r4, [sp, #12]
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
10009c0a:	1c34      	adds	r4, r6, #0
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
10009c0c:	9b04      	ldr	r3, [sp, #16]
10009c0e:	4343      	muls	r3, r0
10009c10:	9305      	str	r3, [sp, #20]
10009c12:	02bb      	lsls	r3, r7, #10
10009c14:	1bdb      	subs	r3, r3, r7
10009c16:	9302      	str	r3, [sp, #8]
10009c18:	9802      	ldr	r0, [sp, #8]
10009c1a:	9905      	ldr	r1, [sp, #20]
10009c1c:	f7ff ff40 	bl	10009aa0 <__aeabi_uidiv>
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
10009c20:	4a12      	ldr	r2, [pc, #72]	; (10009c6c <XMC_USIC_CH_SetBaudrate+0x90>)
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
10009c22:	0a83      	lsrs	r3, r0, #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
10009c24:	4293      	cmp	r3, r2
10009c26:	d806      	bhi.n	10009c36 <XMC_USIC_CH_SetBaudrate+0x5a>

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
10009c28:	0580      	lsls	r0, r0, #22
10009c2a:	0d80      	lsrs	r0, r0, #22

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
10009c2c:	42b0      	cmp	r0, r6
10009c2e:	d202      	bcs.n	10009c36 <XMC_USIC_CH_SetBaudrate+0x5a>
10009c30:	1c06      	adds	r6, r0, #0
10009c32:	9301      	str	r3, [sp, #4]
10009c34:	9403      	str	r4, [sp, #12]
10009c36:	9b02      	ldr	r3, [sp, #8]

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
10009c38:	3c01      	subs	r4, #1
10009c3a:	1bdb      	subs	r3, r3, r7
10009c3c:	9302      	str	r3, [sp, #8]
10009c3e:	2c00      	cmp	r4, #0
10009c40:	d1ea      	bne.n	10009c18 <XMC_USIC_CH_SetBaudrate+0x3c>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
10009c42:	2380      	movs	r3, #128	; 0x80
10009c44:	9a03      	ldr	r2, [sp, #12]
10009c46:	021b      	lsls	r3, r3, #8
10009c48:	4313      	orrs	r3, r2
10009c4a:	612b      	str	r3, [r5, #16]

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10009c4c:	9b04      	ldr	r3, [sp, #16]
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10009c4e:	6969      	ldr	r1, [r5, #20]
10009c50:	4a07      	ldr	r2, [pc, #28]	; (10009c70 <XMC_USIC_CH_SetBaudrate+0x94>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10009c52:	3b01      	subs	r3, #1
10009c54:	029b      	lsls	r3, r3, #10
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10009c56:	400a      	ands	r2, r1
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10009c58:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
10009c5a:	9b01      	ldr	r3, [sp, #4]
10009c5c:	3b01      	subs	r3, #1
10009c5e:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10009c60:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10009c62:	616a      	str	r2, [r5, #20]
  {
    status = XMC_USIC_CH_STATUS_ERROR;
  }
  
  return status;
}
10009c64:	1c20      	adds	r0, r4, #0
10009c66:	b007      	add	sp, #28
10009c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009c6a:	46c0      	nop			; (mov r8, r8)
10009c6c:	000003ff 	.word	0x000003ff
10009c70:	fc0080ef 	.word	0xfc0080ef

10009c74 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
10009c74:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c76:	b085      	sub	sp, #20
10009c78:	9201      	str	r2, [sp, #4]
10009c7a:	1c07      	adds	r7, r0, #0
10009c7c:	9103      	str	r1, [sp, #12]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10009c7e:	f7ff fd19 	bl	100096b4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
  int32_t brg_clock = rate * oversampling;
10009c82:	9b01      	ldr	r3, [sp, #4]
10009c84:	9a03      	ldr	r2, [sp, #12]
  return status;
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10009c86:	1c06      	adds	r6, r0, #0
  int32_t brg_clock = rate * oversampling;
10009c88:	4353      	muls	r3, r2

    status = XMC_USIC_CH_STATUS_OK;
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10009c8a:	2401      	movs	r4, #1
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
  int32_t brg_clock = rate * oversampling;
10009c8c:	9300      	str	r3, [sp, #0]
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
10009c8e:	4298      	cmp	r0, r3
10009c90:	dd45      	ble.n	10009d1e <XMC_USIC_CH_SetBaudrateEx+0xaa>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
10009c92:	1c19      	adds	r1, r3, #0
10009c94:	f7ff ff14 	bl	10009ac0 <__aeabi_idiv>
10009c98:	9b00      	ldr	r3, [sp, #0]
10009c9a:	1c05      	adds	r5, r0, #0
10009c9c:	40a3      	lsls	r3, r4
10009c9e:	9302      	str	r3, [sp, #8]
    while (divider_step >= 1023)
10009ca0:	4b20      	ldr	r3, [pc, #128]	; (10009d24 <XMC_USIC_CH_SetBaudrateEx+0xb0>)
10009ca2:	429d      	cmp	r5, r3
10009ca4:	d90a      	bls.n	10009cbc <XMC_USIC_CH_SetBaudrateEx+0x48>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
10009ca6:	1c30      	adds	r0, r6, #0
10009ca8:	9902      	ldr	r1, [sp, #8]
10009caa:	f7ff ff09 	bl	10009ac0 <__aeabi_idiv>
10009cae:	9a00      	ldr	r2, [sp, #0]
10009cb0:	9b02      	ldr	r3, [sp, #8]
10009cb2:	4694      	mov	ip, r2
  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
    {
      pdiv++;
10009cb4:	3401      	adds	r4, #1
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
10009cb6:	1c05      	adds	r5, r0, #0
10009cb8:	4463      	add	r3, ip
10009cba:	e7f0      	b.n	10009c9e <XMC_USIC_CH_SetBaudrateEx+0x2a>
10009cbc:	9901      	ldr	r1, [sp, #4]
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
10009cbe:	1c6b      	adds	r3, r5, #1
10009cc0:	4361      	muls	r1, r4
10009cc2:	1c30      	adds	r0, r6, #0
10009cc4:	4359      	muls	r1, r3
10009cc6:	9300      	str	r3, [sp, #0]
10009cc8:	f7ff feea 	bl	10009aa0 <__aeabi_uidiv>
10009ccc:	1c21      	adds	r1, r4, #0

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
10009cce:	9b03      	ldr	r3, [sp, #12]
10009cd0:	4369      	muls	r1, r5
10009cd2:	1a18      	subs	r0, r3, r0
10009cd4:	17c2      	asrs	r2, r0, #31
10009cd6:	1883      	adds	r3, r0, r2
10009cd8:	4053      	eors	r3, r2
10009cda:	9302      	str	r3, [sp, #8]
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
10009cdc:	9b01      	ldr	r3, [sp, #4]
10009cde:	1c30      	adds	r0, r6, #0
10009ce0:	4359      	muls	r1, r3
10009ce2:	f7ff fedd 	bl	10009aa0 <__aeabi_uidiv>
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
10009ce6:	9b03      	ldr	r3, [sp, #12]
10009ce8:	1a18      	subs	r0, r3, r0
10009cea:	17c3      	asrs	r3, r0, #31
10009cec:	18c0      	adds	r0, r0, r3
10009cee:	4058      	eors	r0, r3
10009cf0:	9b02      	ldr	r3, [sp, #8]
10009cf2:	4283      	cmp	r3, r0
10009cf4:	da00      	bge.n	10009cf8 <XMC_USIC_CH_SetBaudrateEx+0x84>
    {
      divider_step += 1;
10009cf6:	9d00      	ldr	r5, [sp, #0]
    }

    divider_step = 1024 - divider_step;
10009cf8:	2380      	movs	r3, #128	; 0x80
10009cfa:	00db      	lsls	r3, r3, #3
10009cfc:	1b5d      	subs	r5, r3, r5


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
10009cfe:	2380      	movs	r3, #128	; 0x80
10009d00:	01db      	lsls	r3, r3, #7
10009d02:	431d      	orrs	r5, r3
10009d04:	613d      	str	r5, [r7, #16]

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10009d06:	9b01      	ldr	r3, [sp, #4]


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10009d08:	6979      	ldr	r1, [r7, #20]
10009d0a:	4a07      	ldr	r2, [pc, #28]	; (10009d28 <XMC_USIC_CH_SetBaudrateEx+0xb4>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10009d0c:	3b01      	subs	r3, #1
10009d0e:	029b      	lsls	r3, r3, #10


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10009d10:	400a      	ands	r2, r1
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
10009d12:	3c01      	subs	r4, #1
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10009d14:	4313      	orrs	r3, r2
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
10009d16:	0424      	lsls	r4, r4, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10009d18:	431c      	orrs	r4, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10009d1a:	617c      	str	r4, [r7, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
10009d1c:	2400      	movs	r4, #0
  {
    status = XMC_USIC_CH_STATUS_ERROR;
  }

  return status;
}
10009d1e:	1c20      	adds	r0, r4, #0
10009d20:	b005      	add	sp, #20
10009d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009d24:	000003fe 	.word	0x000003fe
10009d28:	fc0080ef 	.word	0xfc0080ef

10009d2c <XMC_USIC_CH_TXFIFO_Configure>:
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
10009d2c:	30fc      	adds	r0, #252	; 0xfc

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10009d2e:	b530      	push	{r4, r5, lr}
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
10009d30:	68c5      	ldr	r5, [r0, #12]
10009d32:	4c06      	ldr	r4, [pc, #24]	; (10009d4c <XMC_USIC_CH_TXFIFO_Configure+0x20>)
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
10009d34:	0612      	lsls	r2, r2, #24
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
10009d36:	402c      	ands	r4, r5
10009d38:	60c4      	str	r4, [r0, #12]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10009d3a:	68c5      	ldr	r5, [r0, #12]
10009d3c:	4c04      	ldr	r4, [pc, #16]	; (10009d50 <XMC_USIC_CH_TXFIFO_Configure+0x24>)
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
10009d3e:	021b      	lsls	r3, r3, #8
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10009d40:	402c      	ands	r4, r5
10009d42:	4321      	orrs	r1, r4
10009d44:	430a      	orrs	r2, r1
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
10009d46:	4313      	orrs	r3, r2
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
10009d48:	60c3      	str	r3, [r0, #12]
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
10009d4a:	bd30      	pop	{r4, r5, pc}
10009d4c:	f8ffffff 	.word	0xf8ffffff
10009d50:	f8ffc0c0 	.word	0xf8ffc0c0

10009d54 <XMC_USIC_CH_RXFIFO_Configure>:
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10009d54:	30fc      	adds	r0, #252	; 0xfc

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10009d56:	b530      	push	{r4, r5, lr}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10009d58:	6905      	ldr	r5, [r0, #16]
10009d5a:	4c08      	ldr	r4, [pc, #32]	; (10009d7c <XMC_USIC_CH_RXFIFO_Configure+0x28>)
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
10009d5c:	0612      	lsls	r2, r2, #24
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10009d5e:	402c      	ands	r4, r5
10009d60:	6104      	str	r4, [r0, #16]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10009d62:	6904      	ldr	r4, [r0, #16]
10009d64:	4d06      	ldr	r5, [pc, #24]	; (10009d80 <XMC_USIC_CH_RXFIFO_Configure+0x2c>)
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
10009d66:	021b      	lsls	r3, r3, #8
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10009d68:	4025      	ands	r5, r4
10009d6a:	2480      	movs	r4, #128	; 0x80
10009d6c:	0564      	lsls	r4, r4, #21
10009d6e:	432c      	orrs	r4, r5
10009d70:	4321      	orrs	r1, r4
10009d72:	430a      	orrs	r2, r1
10009d74:	4313      	orrs	r3, r2
10009d76:	6103      	str	r3, [r0, #16]
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
10009d78:	bd30      	pop	{r4, r5, pc}
10009d7a:	46c0      	nop			; (mov r8, r8)
10009d7c:	f8ffffff 	.word	0xf8ffffff
10009d80:	efffc0c0 	.word	0xefffc0c0

10009d84 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
10009d84:	0212      	lsls	r2, r2, #8
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
10009d86:	0609      	lsls	r1, r1, #24
10009d88:	4311      	orrs	r1, r2
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10009d8a:	1c0a      	adds	r2, r1, #0
void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10009d8c:	30fc      	adds	r0, #252	; 0xfc
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
10009d8e:	b510      	push	{r4, lr}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
10009d90:	4b04      	ldr	r3, [pc, #16]	; (10009da4 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x20>)
10009d92:	6904      	ldr	r4, [r0, #16]
10009d94:	4023      	ands	r3, r4
10009d96:	6103      	str	r3, [r0, #16]

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10009d98:	6904      	ldr	r4, [r0, #16]
10009d9a:	4b03      	ldr	r3, [pc, #12]	; (10009da8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x24>)
10009d9c:	4023      	ands	r3, r4
10009d9e:	431a      	orrs	r2, r3
10009da0:	6102      	str	r2, [r0, #16]
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
10009da2:	bd10      	pop	{r4, pc}
10009da4:	f8ffffff 	.word	0xf8ffffff
10009da8:	ffffc0ff 	.word	0xffffc0ff

10009dac <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
10009dac:	b510      	push	{r4, lr}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10009dae:	2407      	movs	r4, #7
10009db0:	408c      	lsls	r4, r1
                  (service_request << (uint32_t)interrupt_node));
10009db2:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10009db4:	6983      	ldr	r3, [r0, #24]
10009db6:	43a3      	bics	r3, r4
10009db8:	4313      	orrs	r3, r2
10009dba:	6183      	str	r3, [r0, #24]
                  (service_request << (uint32_t)interrupt_node));
}
10009dbc:	bd10      	pop	{r4, pc}

10009dbe <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
10009dbe:	b510      	push	{r4, lr}
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10009dc0:	2407      	movs	r4, #7
10009dc2:	408c      	lsls	r4, r1
                   (service_request << (uint32_t)interrupt_node));
10009dc4:	408a      	lsls	r2, r1

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10009dc6:	30fc      	adds	r0, #252	; 0xfc
10009dc8:	68c3      	ldr	r3, [r0, #12]
10009dca:	43a3      	bics	r3, r4
10009dcc:	4313      	orrs	r3, r2
10009dce:	60c3      	str	r3, [r0, #12]
                   (service_request << (uint32_t)interrupt_node));
}
10009dd0:	bd10      	pop	{r4, pc}

10009dd2 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
10009dd2:	b510      	push	{r4, lr}
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10009dd4:	2407      	movs	r4, #7
10009dd6:	408c      	lsls	r4, r1
                   (service_request << (uint32_t)interrupt_node));
10009dd8:	408a      	lsls	r2, r1

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10009dda:	30fc      	adds	r0, #252	; 0xfc
10009ddc:	6903      	ldr	r3, [r0, #16]
10009dde:	43a3      	bics	r3, r4
10009de0:	4313      	orrs	r3, r2
10009de2:	6103      	str	r3, [r0, #16]
                   (service_request << (uint32_t)interrupt_node));
}
10009de4:	bd10      	pop	{r4, pc}
	...

10009de8 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
10009de8:	b508      	push	{r3, lr}
  if (usic == USIC0)
10009dea:	4b0a      	ldr	r3, [pc, #40]	; (10009e14 <XMC_USIC_Enable+0x2c>)
10009dec:	4298      	cmp	r0, r3
10009dee:	d102      	bne.n	10009df6 <XMC_USIC_Enable+0xe>
10009df0:	f7ff fee9 	bl	10009bc6 <XMC_USIC_Enable.part.0>
10009df4:	e00c      	b.n	10009e10 <XMC_USIC_Enable+0x28>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
10009df6:	4b08      	ldr	r3, [pc, #32]	; (10009e18 <XMC_USIC_Enable+0x30>)
10009df8:	4298      	cmp	r0, r3
10009dfa:	d109      	bne.n	10009e10 <XMC_USIC_Enable+0x28>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
10009dfc:	2080      	movs	r0, #128	; 0x80
10009dfe:	02c0      	lsls	r0, r0, #11
10009e00:	f7ff fb6e 	bl	100094e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
10009e04:	2080      	movs	r0, #128	; 0x80
10009e06:	02c0      	lsls	r0, r0, #11
10009e08:	f7ff fb7e 	bl	10009508 <XMC_SCU_CLOCK_IsPeripheralClockGated>
10009e0c:	2800      	cmp	r0, #0
10009e0e:	d1f9      	bne.n	10009e04 <XMC_USIC_Enable+0x1c>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
10009e10:	bd08      	pop	{r3, pc}
10009e12:	46c0      	nop			; (mov r8, r8)
10009e14:	48000008 	.word	0x48000008
10009e18:	48004008 	.word	0x48004008

10009e1c <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10009e1c:	2390      	movs	r3, #144	; 0x90
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10009e1e:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10009e20:	05db      	lsls	r3, r3, #23
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10009e22:	1e04      	subs	r4, r0, #0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10009e24:	429c      	cmp	r4, r3
10009e26:	d002      	beq.n	10009e2e <XMC_USIC_CH_Enable+0x12>
10009e28:	4b0c      	ldr	r3, [pc, #48]	; (10009e5c <XMC_USIC_CH_Enable+0x40>)
10009e2a:	4298      	cmp	r0, r3
10009e2c:	d102      	bne.n	10009e34 <XMC_USIC_CH_Enable+0x18>
10009e2e:	f7ff feca 	bl	10009bc6 <XMC_USIC_Enable.part.0>
10009e32:	e008      	b.n	10009e46 <XMC_USIC_CH_Enable+0x2a>
  {
    XMC_USIC_Enable(XMC_USIC0);
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
10009e34:	4b0a      	ldr	r3, [pc, #40]	; (10009e60 <XMC_USIC_CH_Enable+0x44>)
10009e36:	4298      	cmp	r0, r3
10009e38:	d002      	beq.n	10009e40 <XMC_USIC_CH_Enable+0x24>
10009e3a:	4b0a      	ldr	r3, [pc, #40]	; (10009e64 <XMC_USIC_CH_Enable+0x48>)
10009e3c:	4298      	cmp	r0, r3
10009e3e:	d102      	bne.n	10009e46 <XMC_USIC_CH_Enable+0x2a>
  {
    XMC_USIC_Enable(XMC_USIC1);
10009e40:	4809      	ldr	r0, [pc, #36]	; (10009e68 <XMC_USIC_CH_Enable+0x4c>)
10009e42:	f7ff ffd1 	bl	10009de8 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
10009e46:	2303      	movs	r3, #3
10009e48:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10009e4a:	68e3      	ldr	r3, [r4, #12]
10009e4c:	07db      	lsls	r3, r3, #31
10009e4e:	d5fc      	bpl.n	10009e4a <XMC_USIC_CH_Enable+0x2e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
10009e50:	220f      	movs	r2, #15
10009e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
10009e54:	4393      	bics	r3, r2
10009e56:	6423      	str	r3, [r4, #64]	; 0x40
}
10009e58:	bd10      	pop	{r4, pc}
10009e5a:	46c0      	nop			; (mov r8, r8)
10009e5c:	48000200 	.word	0x48000200
10009e60:	48004000 	.word	0x48004000
10009e64:	48004200 	.word	0x48004200
10009e68:	48004008 	.word	0x48004008

10009e6c <_sbrk>:
caddr_t _sbrk(int nbytes)
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
10009e6c:	4a0c      	ldr	r2, [pc, #48]	; (10009ea0 <_sbrk+0x34>)

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
10009e6e:	b508      	push	{r3, lr}
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
10009e70:	6811      	ldr	r1, [r2, #0]

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
10009e72:	1c03      	adds	r3, r0, #0
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
10009e74:	2900      	cmp	r1, #0
10009e76:	d101      	bne.n	10009e7c <_sbrk+0x10>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
10009e78:	490a      	ldr	r1, [pc, #40]	; (10009ea4 <_sbrk+0x38>)
10009e7a:	6011      	str	r1, [r2, #0]
  }

  base = heap_ptr;

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
10009e7c:	2103      	movs	r1, #3

  if (heap_ptr == NULL) {
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
  }

  base = heap_ptr;
10009e7e:	6810      	ldr	r0, [r2, #0]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
10009e80:	3303      	adds	r3, #3
10009e82:	438b      	bics	r3, r1
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
10009e84:	4908      	ldr	r1, [pc, #32]	; (10009ea8 <_sbrk+0x3c>)
10009e86:	18c3      	adds	r3, r0, r3
10009e88:	428b      	cmp	r3, r1
10009e8a:	d201      	bcs.n	10009e90 <_sbrk+0x24>
  {
    heap_ptr += nbytes;
10009e8c:	6013      	str	r3, [r2, #0]
    return (base);
10009e8e:	e005      	b.n	10009e9c <_sbrk+0x30>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
10009e90:	f002 f988 	bl	1000c1a4 <__errno>
10009e94:	230c      	movs	r3, #12
10009e96:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
10009e98:	2001      	movs	r0, #1
10009e9a:	4240      	negs	r0, r0
  }
}
10009e9c:	bd08      	pop	{r3, pc}
10009e9e:	46c0      	nop			; (mov r8, r8)
10009ea0:	20002fbc 	.word	0x20002fbc
10009ea4:	20003060 	.word	0x20003060
10009ea8:	20003ffc 	.word	0x20003ffc

10009eac <_init>:

/* Init */
void _init(void)
{}
10009eac:	4770      	bx	lr

10009eae <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
10009eae:	b510      	push	{r4, lr}
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
10009eb0:	6843      	ldr	r3, [r0, #4]
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
10009eb2:	1c0c      	adds	r4, r1, #0
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
10009eb4:	332c      	adds	r3, #44	; 0x2c
10009eb6:	7819      	ldrb	r1, [r3, #0]
10009eb8:	2301      	movs	r3, #1
10009eba:	408b      	lsls	r3, r1
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
10009ebc:	1e5a      	subs	r2, r3, #1
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
10009ebe:	429c      	cmp	r4, r3
10009ec0:	d200      	bcs.n	10009ec4 <UART_lReconfigureRxFIFO+0x16>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
10009ec2:	1e62      	subs	r2, r4, #1
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
10009ec4:	6800      	ldr	r0, [r0, #0]
10009ec6:	f7ff ff5d 	bl	10009d84 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
10009eca:	bd10      	pop	{r4, pc}

10009ecc <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
10009ecc:	b508      	push	{r3, lr}
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
10009ece:	6843      	ldr	r3, [r0, #4]
10009ed0:	685b      	ldr	r3, [r3, #4]
10009ed2:	4798      	blx	r3

  return status;
}
10009ed4:	bd08      	pop	{r3, pc}

10009ed6 <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10009ed6:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
10009ed8:	6844      	ldr	r4, [r0, #4]
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10009eda:	6885      	ldr	r5, [r0, #8]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
10009edc:	1c23      	adds	r3, r4, #0
10009ede:	3329      	adds	r3, #41	; 0x29
10009ee0:	781e      	ldrb	r6, [r3, #0]
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10009ee2:	2304      	movs	r3, #4
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
10009ee4:	2e00      	cmp	r6, #0
10009ee6:	d12b      	bne.n	10009f40 <UART_StartTransmitIRQ+0x6a>
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->tx_busy == false)
10009ee8:	7e2e      	ldrb	r6, [r5, #24]
  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
10009eea:	3b02      	subs	r3, #2
    if (ptr_runtime->tx_busy == false)
10009eec:	b2f6      	uxtb	r6, r6
10009eee:	2e00      	cmp	r6, #0
10009ef0:	d126      	bne.n	10009f40 <UART_StartTransmitIRQ+0x6a>
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
10009ef2:	3301      	adds	r3, #1
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->tx_busy == false)
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
10009ef4:	2900      	cmp	r1, #0
10009ef6:	d023      	beq.n	10009f40 <UART_StartTransmitIRQ+0x6a>
10009ef8:	2a00      	cmp	r2, #0
10009efa:	d021      	beq.n	10009f40 <UART_StartTransmitIRQ+0x6a>
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
        ptr_runtime->tx_data_count = count;
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
        ptr_runtime->tx_busy = true;
10009efc:	3b02      	subs	r3, #2
10009efe:	762b      	strb	r3, [r5, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10009f00:	1c23      	adds	r3, r4, #0
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
        ptr_runtime->tx_data_count = count;
10009f02:	60aa      	str	r2, [r5, #8]
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
10009f04:	6029      	str	r1, [r5, #0]
        ptr_runtime->tx_data_count = count;
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
10009f06:	60ee      	str	r6, [r5, #12]
        ptr_runtime->tx_busy = true;

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10009f08:	332b      	adds	r3, #43	; 0x2b
10009f0a:	781b      	ldrb	r3, [r3, #0]
10009f0c:	6802      	ldr	r2, [r0, #0]
10009f0e:	2b00      	cmp	r3, #0
10009f10:	d00a      	beq.n	10009f28 <UART_StartTransmitIRQ+0x52>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
10009f12:	2180      	movs	r1, #128	; 0x80
10009f14:	1c13      	adds	r3, r2, #0
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
10009f16:	2080      	movs	r0, #128	; 0x80
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
10009f18:	33fc      	adds	r3, #252	; 0xfc
10009f1a:	0209      	lsls	r1, r1, #8
10009f1c:	61d9      	str	r1, [r3, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
10009f1e:	68d9      	ldr	r1, [r3, #12]
10009f20:	05c0      	lsls	r0, r0, #23
10009f22:	4301      	orrs	r1, r0
10009f24:	60d9      	str	r1, [r3, #12]
10009f26:	e004      	b.n	10009f32 <UART_StartTransmitIRQ+0x5c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
10009f28:	2180      	movs	r1, #128	; 0x80
10009f2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
10009f2c:	0189      	lsls	r1, r1, #6
10009f2e:	430b      	orrs	r3, r1
10009f30:	6413      	str	r3, [r2, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
10009f32:	2380      	movs	r3, #128	; 0x80
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
        }
        ret_stat = UART_STATUS_SUCCESS;
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
10009f34:	342d      	adds	r4, #45	; 0x2d
10009f36:	7821      	ldrb	r1, [r4, #0]
10009f38:	025b      	lsls	r3, r3, #9
10009f3a:	408b      	lsls	r3, r1
10009f3c:	6693      	str	r3, [r2, #104]	; 0x68
10009f3e:	2300      	movs	r3, #0
        ret_stat = UART_STATUS_BUFFER_INVALID;
      }
    }
  }
  return ret_stat;
}
10009f40:	1c18      	adds	r0, r3, #0
10009f42:	bd70      	pop	{r4, r5, r6, pc}

10009f44 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10009f44:	b508      	push	{r3, lr}
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
10009f46:	6843      	ldr	r3, [r0, #4]
10009f48:	3329      	adds	r3, #41	; 0x29
10009f4a:	781b      	ldrb	r3, [r3, #0]
10009f4c:	2b00      	cmp	r3, #0
10009f4e:	d102      	bne.n	10009f56 <UART_Transmit+0x12>
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
10009f50:	f7ff ffc1 	bl	10009ed6 <UART_StartTransmitIRQ>
    break;
10009f54:	e000      	b.n	10009f58 <UART_Transmit+0x14>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10009f56:	2004      	movs	r0, #4
#endif
  default:
    break;
  }
  return ret_stat;
}
10009f58:	bd08      	pop	{r3, pc}

10009f5a <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10009f5a:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
10009f5c:	6846      	ldr	r6, [r0, #4]
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10009f5e:	6885      	ldr	r5, [r0, #8]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
10009f60:	1c33      	adds	r3, r6, #0
10009f62:	332a      	adds	r3, #42	; 0x2a
10009f64:	781c      	ldrb	r4, [r3, #0]
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10009f66:	2304      	movs	r3, #4
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
10009f68:	2c00      	cmp	r4, #0
10009f6a:	d129      	bne.n	10009fc0 <UART_StartReceiveIRQ+0x66>
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->rx_busy == false)
10009f6c:	7e6c      	ldrb	r4, [r5, #25]
  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
10009f6e:	3b02      	subs	r3, #2
    if (ptr_runtime->rx_busy == false)
10009f70:	b2e4      	uxtb	r4, r4
10009f72:	2c00      	cmp	r4, #0
10009f74:	d124      	bne.n	10009fc0 <UART_StartReceiveIRQ+0x66>
        }
        ret_stat = UART_STATUS_SUCCESS;
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
10009f76:	3301      	adds	r3, #1
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->rx_busy == false)
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
10009f78:	2900      	cmp	r1, #0
10009f7a:	d021      	beq.n	10009fc0 <UART_StartReceiveIRQ+0x66>
10009f7c:	2a00      	cmp	r2, #0
10009f7e:	d01f      	beq.n	10009fc0 <UART_StartReceiveIRQ+0x66>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
10009f80:	3b02      	subs	r3, #2
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
10009f82:	6069      	str	r1, [r5, #4]
        ptr_runtime->rx_data_count = count;
10009f84:	612a      	str	r2, [r5, #16]
        ptr_runtime->rx_busy = true;
10009f86:	766b      	strb	r3, [r5, #25]
        ptr_runtime->rx_data_index = 0U;
10009f88:	616c      	str	r4, [r5, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10009f8a:	362c      	adds	r6, #44	; 0x2c
10009f8c:	7833      	ldrb	r3, [r6, #0]
10009f8e:	6805      	ldr	r5, [r0, #0]
10009f90:	2b00      	cmp	r3, #0
10009f92:	d010      	beq.n	10009fb6 <UART_StartReceiveIRQ+0x5c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
10009f94:	2380      	movs	r3, #128	; 0x80
10009f96:	1c06      	adds	r6, r0, #0
10009f98:	01db      	lsls	r3, r3, #7
10009f9a:	35fc      	adds	r5, #252	; 0xfc
10009f9c:	1c11      	adds	r1, r2, #0
10009f9e:	61eb      	str	r3, [r5, #28]
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
10009fa0:	f7ff ff85 	bl	10009eae <UART_lReconfigureRxFIFO>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
10009fa4:	21c0      	movs	r1, #192	; 0xc0

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
10009fa6:	6833      	ldr	r3, [r6, #0]
10009fa8:	05c9      	lsls	r1, r1, #23
10009faa:	33fc      	adds	r3, #252	; 0xfc
10009fac:	691a      	ldr	r2, [r3, #16]
10009fae:	430a      	orrs	r2, r1
10009fb0:	611a      	str	r2, [r3, #16]
10009fb2:	1c23      	adds	r3, r4, #0
10009fb4:	e004      	b.n	10009fc0 <UART_StartReceiveIRQ+0x66>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
10009fb6:	21c0      	movs	r1, #192	; 0xc0
10009fb8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
10009fba:	0209      	lsls	r1, r1, #8
10009fbc:	430a      	orrs	r2, r1
10009fbe:	642a      	str	r2, [r5, #64]	; 0x40
        ret_stat = UART_STATUS_BUFFER_INVALID;
      }
    }
  }
  return ret_stat;
}
10009fc0:	1c18      	adds	r0, r3, #0
10009fc2:	bd70      	pop	{r4, r5, r6, pc}

10009fc4 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10009fc4:	b508      	push	{r3, lr}
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->receive_mode)
10009fc6:	6843      	ldr	r3, [r0, #4]
10009fc8:	332a      	adds	r3, #42	; 0x2a
10009fca:	781b      	ldrb	r3, [r3, #0]
10009fcc:	2b00      	cmp	r3, #0
10009fce:	d102      	bne.n	10009fd6 <UART_Receive+0x12>
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
10009fd0:	f7ff ffc3 	bl	10009f5a <UART_StartReceiveIRQ>
    break;
10009fd4:	e000      	b.n	10009fd8 <UART_Receive+0x14>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10009fd6:	2004      	movs	r0, #4
#endif
  default:
    break;
  }
  return ret_stat;
}
10009fd8:	bd08      	pop	{r3, pc}
	...

10009fdc <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
10009fdc:	b538      	push	{r3, r4, r5, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10009fde:	6884      	ldr	r4, [r0, #8]
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
10009fe0:	1c05      	adds	r5, r0, #0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10009fe2:	68e2      	ldr	r2, [r4, #12]
10009fe4:	68a3      	ldr	r3, [r4, #8]
10009fe6:	429a      	cmp	r2, r3
10009fe8:	d21f      	bcs.n	1000a02a <UART_lTransmitHandler+0x4e>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10009fea:	6843      	ldr	r3, [r0, #4]
10009fec:	332b      	adds	r3, #43	; 0x2b
10009fee:	781b      	ldrb	r3, [r3, #0]
10009ff0:	2b00      	cmp	r3, #0
10009ff2:	d011      	beq.n	1000a018 <UART_lTransmitHandler+0x3c>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
10009ff4:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10009ff6:	1c03      	adds	r3, r0, #0
10009ff8:	33fc      	adds	r3, #252	; 0xfc
10009ffa:	699b      	ldr	r3, [r3, #24]
10009ffc:	04db      	lsls	r3, r3, #19
10009ffe:	d436      	bmi.n	1000a06e <UART_lTransmitHandler+0x92>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000a000:	68e3      	ldr	r3, [r4, #12]
1000a002:	68a2      	ldr	r2, [r4, #8]
1000a004:	4293      	cmp	r3, r2
1000a006:	d232      	bcs.n	1000a06e <UART_lTransmitHandler+0x92>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
1000a008:	6822      	ldr	r2, [r4, #0]
1000a00a:	5cd1      	ldrb	r1, [r2, r3]
1000a00c:	f7ff fdb8 	bl	10009b80 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
1000a010:	68e3      	ldr	r3, [r4, #12]
1000a012:	3301      	adds	r3, #1
1000a014:	60e3      	str	r3, [r4, #12]
1000a016:	e7ed      	b.n	10009ff4 <UART_lTransmitHandler+0x18>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
1000a018:	6823      	ldr	r3, [r4, #0]
1000a01a:	6800      	ldr	r0, [r0, #0]
1000a01c:	5c99      	ldrb	r1, [r3, r2]
1000a01e:	f7ff fdaf 	bl	10009b80 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
1000a022:	68e3      	ldr	r3, [r4, #12]
1000a024:	3301      	adds	r3, #1
1000a026:	60e3      	str	r3, [r4, #12]
1000a028:	e021      	b.n	1000a06e <UART_lTransmitHandler+0x92>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
1000a02a:	6802      	ldr	r2, [r0, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1000a02c:	1c13      	adds	r3, r2, #0
1000a02e:	33fc      	adds	r3, #252	; 0xfc
1000a030:	6999      	ldr	r1, [r3, #24]
1000a032:	0509      	lsls	r1, r1, #20
1000a034:	d51b      	bpl.n	1000a06e <UART_lTransmitHandler+0x92>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000a036:	6841      	ldr	r1, [r0, #4]
1000a038:	1c08      	adds	r0, r1, #0
1000a03a:	302b      	adds	r0, #43	; 0x2b
1000a03c:	7800      	ldrb	r0, [r0, #0]
1000a03e:	2800      	cmp	r0, #0
1000a040:	d004      	beq.n	1000a04c <UART_lTransmitHandler+0x70>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000a042:	68dd      	ldr	r5, [r3, #12]
1000a044:	480a      	ldr	r0, [pc, #40]	; (1000a070 <UART_lTransmitHandler+0x94>)
1000a046:	4028      	ands	r0, r5
1000a048:	60d8      	str	r0, [r3, #12]
1000a04a:	e003      	b.n	1000a054 <UART_lTransmitHandler+0x78>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
1000a04c:	6c10      	ldr	r0, [r2, #64]	; 0x40
1000a04e:	4b09      	ldr	r3, [pc, #36]	; (1000a074 <UART_lTransmitHandler+0x98>)
1000a050:	4003      	ands	r3, r0
1000a052:	6413      	str	r3, [r2, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1000a054:	207f      	movs	r0, #127	; 0x7f
1000a056:	6b93      	ldr	r3, [r2, #56]	; 0x38
1000a058:	4383      	bics	r3, r0
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000a05a:	b2db      	uxtb	r3, r3
1000a05c:	2b80      	cmp	r3, #128	; 0x80
1000a05e:	d0f9      	beq.n	1000a054 <UART_lTransmitHandler+0x78>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
1000a060:	2300      	movs	r3, #0
1000a062:	7623      	strb	r3, [r4, #24]
      ptr_runtime->tx_data = NULL;
1000a064:	6023      	str	r3, [r4, #0]

      if (handle->config->tx_cbhandler != NULL)
1000a066:	688b      	ldr	r3, [r1, #8]
1000a068:	2b00      	cmp	r3, #0
1000a06a:	d000      	beq.n	1000a06e <UART_lTransmitHandler+0x92>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
1000a06c:	4798      	blx	r3
      }
    }
  }
}
1000a06e:	bd38      	pop	{r3, r4, r5, pc}
1000a070:	bfffffff 	.word	0xbfffffff
1000a074:	ffffdfff 	.word	0xffffdfff

1000a078 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
1000a078:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000a07a:	6843      	ldr	r3, [r0, #4]
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
1000a07c:	1c05      	adds	r5, r0, #0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000a07e:	332c      	adds	r3, #44	; 0x2c
1000a080:	781b      	ldrb	r3, [r3, #0]
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
1000a082:	6884      	ldr	r4, [r0, #8]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000a084:	2b00      	cmp	r3, #0
1000a086:	d02b      	beq.n	1000a0e0 <UART_lReceiveHandler+0x68>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
1000a088:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1000a08a:	1c03      	adds	r3, r0, #0
1000a08c:	33fc      	adds	r3, #252	; 0xfc
1000a08e:	699b      	ldr	r3, [r3, #24]
1000a090:	071b      	lsls	r3, r3, #28
1000a092:	d41c      	bmi.n	1000a0ce <UART_lReceiveHandler+0x56>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000a094:	6963      	ldr	r3, [r4, #20]
1000a096:	6922      	ldr	r2, [r4, #16]
1000a098:	4293      	cmp	r3, r2
1000a09a:	d207      	bcs.n	1000a0ac <UART_lReceiveHandler+0x34>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1000a09c:	6862      	ldr	r2, [r4, #4]
1000a09e:	18d6      	adds	r6, r2, r3
1000a0a0:	f7ff fd85 	bl	10009bae <XMC_UART_CH_GetReceivedData>
1000a0a4:	7030      	strb	r0, [r6, #0]
        (ptr_runtime->rx_data_index)++;
1000a0a6:	6963      	ldr	r3, [r4, #20]
1000a0a8:	3301      	adds	r3, #1
1000a0aa:	6163      	str	r3, [r4, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000a0ac:	6963      	ldr	r3, [r4, #20]
1000a0ae:	6922      	ldr	r2, [r4, #16]
1000a0b0:	4293      	cmp	r3, r2
1000a0b2:	d1e9      	bne.n	1000a088 <UART_lReceiveHandler+0x10>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
1000a0b4:	2300      	movs	r3, #0
1000a0b6:	7663      	strb	r3, [r4, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
1000a0b8:	682b      	ldr	r3, [r5, #0]
1000a0ba:	4a18      	ldr	r2, [pc, #96]	; (1000a11c <UART_lReceiveHandler+0xa4>)
1000a0bc:	33fc      	adds	r3, #252	; 0xfc
1000a0be:	6919      	ldr	r1, [r3, #16]
1000a0c0:	400a      	ands	r2, r1
1000a0c2:	611a      	str	r2, [r3, #16]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
1000a0c4:	686b      	ldr	r3, [r5, #4]
1000a0c6:	68db      	ldr	r3, [r3, #12]
1000a0c8:	2b00      	cmp	r3, #0
1000a0ca:	d000      	beq.n	1000a0ce <UART_lReceiveHandler+0x56>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
1000a0cc:	4798      	blx	r3
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000a0ce:	6961      	ldr	r1, [r4, #20]
1000a0d0:	6923      	ldr	r3, [r4, #16]
1000a0d2:	4299      	cmp	r1, r3
1000a0d4:	d221      	bcs.n	1000a11a <UART_lReceiveHandler+0xa2>
    {
      UART_lReconfigureRxFIFO(handle,
1000a0d6:	1a59      	subs	r1, r3, r1
1000a0d8:	1c28      	adds	r0, r5, #0
1000a0da:	f7ff fee8 	bl	10009eae <UART_lReconfigureRxFIFO>
1000a0de:	e01c      	b.n	1000a11a <UART_lReceiveHandler+0xa2>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000a0e0:	6963      	ldr	r3, [r4, #20]
1000a0e2:	6922      	ldr	r2, [r4, #16]
1000a0e4:	4293      	cmp	r3, r2
1000a0e6:	d208      	bcs.n	1000a0fa <UART_lReceiveHandler+0x82>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1000a0e8:	6862      	ldr	r2, [r4, #4]
1000a0ea:	6800      	ldr	r0, [r0, #0]
1000a0ec:	18d6      	adds	r6, r2, r3
1000a0ee:	f7ff fd5e 	bl	10009bae <XMC_UART_CH_GetReceivedData>
1000a0f2:	7030      	strb	r0, [r6, #0]
      (ptr_runtime->rx_data_index)++;
1000a0f4:	6963      	ldr	r3, [r4, #20]
1000a0f6:	3301      	adds	r3, #1
1000a0f8:	6163      	str	r3, [r4, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000a0fa:	6963      	ldr	r3, [r4, #20]
1000a0fc:	6922      	ldr	r2, [r4, #16]
1000a0fe:	4293      	cmp	r3, r2
1000a100:	d10b      	bne.n	1000a11a <UART_lReceiveHandler+0xa2>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
1000a102:	2300      	movs	r3, #0
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
1000a104:	682a      	ldr	r2, [r5, #0]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
1000a106:	7663      	strb	r3, [r4, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
1000a108:	6c11      	ldr	r1, [r2, #64]	; 0x40
1000a10a:	4b05      	ldr	r3, [pc, #20]	; (1000a120 <UART_lReceiveHandler+0xa8>)
1000a10c:	400b      	ands	r3, r1
1000a10e:	6413      	str	r3, [r2, #64]	; 0x40
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
1000a110:	686b      	ldr	r3, [r5, #4]
1000a112:	68db      	ldr	r3, [r3, #12]
1000a114:	2b00      	cmp	r3, #0
1000a116:	d000      	beq.n	1000a11a <UART_lReceiveHandler+0xa2>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
1000a118:	4798      	blx	r3
      }
    }
  }
}
1000a11a:	bd70      	pop	{r4, r5, r6, pc}
1000a11c:	9fffffff 	.word	0x9fffffff
1000a120:	ffff3fff 	.word	0xffff3fff

1000a124 <esWiFi_com_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t esWiFi_com_init()
{
1000a124:	b570      	push	{r4, r5, r6, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT4_BASE, 4U, &esWiFi_com_rx_pin_config);
1000a126:	4e31      	ldr	r6, [pc, #196]	; (1000a1ec <esWiFi_com_init+0xc8>)
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &esWiFi_com_channel_config);
1000a128:	4c31      	ldr	r4, [pc, #196]	; (1000a1f0 <esWiFi_com_init+0xcc>)
/*Channel initialization function*/
UART_STATUS_t esWiFi_com_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT4_BASE, 4U, &esWiFi_com_rx_pin_config);
1000a12a:	1c30      	adds	r0, r6, #0
1000a12c:	4a31      	ldr	r2, [pc, #196]	; (1000a1f4 <esWiFi_com_init+0xd0>)
1000a12e:	2104      	movs	r1, #4
1000a130:	f7ff f990 	bl	10009454 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &esWiFi_com_channel_config);
1000a134:	1c20      	adds	r0, r4, #0
1000a136:	4930      	ldr	r1, [pc, #192]	; (1000a1f8 <esWiFi_com_init+0xd4>)
1000a138:	f7ff fce2 	bl	10009b00 <XMC_UART_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000a13c:	2207      	movs	r2, #7
1000a13e:	2502      	movs	r5, #2
1000a140:	69e3      	ldr	r3, [r4, #28]
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 2U);
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX3, 0U);
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX5, 0U);
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART1_CH0,
1000a142:	1c20      	adds	r0, r4, #0
1000a144:	4393      	bics	r3, r2
1000a146:	432b      	orrs	r3, r5
1000a148:	61e3      	str	r3, [r4, #28]
1000a14a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1000a14c:	2130      	movs	r1, #48	; 0x30
1000a14e:	4393      	bics	r3, r2
1000a150:	62a3      	str	r3, [r4, #40]	; 0x28
1000a152:	6b23      	ldr	r3, [r4, #48]	; 0x30
1000a154:	4393      	bics	r3, r2
1000a156:	6323      	str	r3, [r4, #48]	; 0x30
1000a158:	3a03      	subs	r2, #3
1000a15a:	2301      	movs	r3, #1
1000a15c:	f7ff fde6 	bl	10009d2c <XMC_USIC_CH_TXFIFO_Configure>
        48U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH0,
1000a160:	1c20      	adds	r0, r4, #0
1000a162:	2120      	movs	r1, #32
1000a164:	2204      	movs	r2, #4
1000a166:	2300      	movs	r3, #0
1000a168:	f7ff fdf4 	bl	10009d54 <XMC_USIC_CH_RXFIFO_Configure>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
1000a16c:	220f      	movs	r2, #15
1000a16e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT4_BASE, 5U, &esWiFi_com_tx_pin_config);
1000a170:	1c30      	adds	r0, r6, #0
1000a172:	4393      	bics	r3, r2
1000a174:	432b      	orrs	r3, r5
1000a176:	6423      	str	r3, [r4, #64]	; 0x40
1000a178:	2105      	movs	r1, #5
1000a17a:	4a20      	ldr	r2, [pc, #128]	; (1000a1fc <esWiFi_com_init+0xd8>)
1000a17c:	f7ff f96a 	bl	10009454 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
1000a180:	1c20      	adds	r0, r4, #0
1000a182:	2110      	movs	r1, #16
1000a184:	2201      	movs	r2, #1
1000a186:	f7ff fe11 	bl	10009dac <XMC_USIC_CH_SetInterruptNodePointer>
     1U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1000a18a:	1c2a      	adds	r2, r5, #0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000a18c:	25c2      	movs	r5, #194	; 0xc2
1000a18e:	1c20      	adds	r0, r4, #0
1000a190:	2110      	movs	r1, #16
1000a192:	f7ff fe14 	bl	10009dbe <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      2U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1000a196:	1c20      	adds	r0, r4, #0
1000a198:	2110      	movs	r1, #16
1000a19a:	2200      	movs	r2, #0
1000a19c:	f7ff fe19 	bl	10009dd2 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
1000a1a0:	1c20      	adds	r0, r4, #0
1000a1a2:	2113      	movs	r1, #19
1000a1a4:	2200      	movs	r2, #0
1000a1a6:	f7ff fe14 	bl	10009dd2 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
1000a1aa:	22c0      	movs	r2, #192	; 0xc0
1000a1ac:	4c14      	ldr	r4, [pc, #80]	; (1000a200 <esWiFi_com_init+0xdc>)
1000a1ae:	00ad      	lsls	r5, r5, #2
1000a1b0:	5963      	ldr	r3, [r4, r5]
1000a1b2:	0612      	lsls	r2, r2, #24
1000a1b4:	021b      	lsls	r3, r3, #8
1000a1b6:	0a1b      	lsrs	r3, r3, #8
1000a1b8:	4313      	orrs	r3, r2
1000a1ba:	5163      	str	r3, [r4, r5]
       0x0U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)11, 3U);
  XMC_SCU_SetInterruptControl(11U, XMC_SCU_IRQCTRL_USIC1_SR2_IRQ11);
1000a1bc:	200b      	movs	r0, #11
1000a1be:	4911      	ldr	r1, [pc, #68]	; (1000a204 <esWiFi_com_init+0xe0>)
1000a1c0:	f7ff fa7e 	bl	100096c0 <XMC_SCU_SetInterruptControl>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000a1c4:	2380      	movs	r3, #128	; 0x80
1000a1c6:	011b      	lsls	r3, r3, #4
1000a1c8:	6023      	str	r3, [r4, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000a1ca:	4b0f      	ldr	r3, [pc, #60]	; (1000a208 <esWiFi_com_init+0xe4>)
1000a1cc:	5962      	ldr	r2, [r4, r5]
  NVIC_EnableIRQ((IRQn_Type)11);
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)9, 3U);
  XMC_SCU_SetInterruptControl(9U, XMC_SCU_IRQCTRL_USIC1_SR0_IRQ9);
1000a1ce:	2009      	movs	r0, #9
1000a1d0:	4013      	ands	r3, r2
1000a1d2:	22c0      	movs	r2, #192	; 0xc0
1000a1d4:	0212      	lsls	r2, r2, #8
1000a1d6:	4313      	orrs	r3, r2
1000a1d8:	5163      	str	r3, [r4, r5]
1000a1da:	490c      	ldr	r1, [pc, #48]	; (1000a20c <esWiFi_com_init+0xe8>)
1000a1dc:	f7ff fa70 	bl	100096c0 <XMC_SCU_SetInterruptControl>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000a1e0:	2380      	movs	r3, #128	; 0x80
1000a1e2:	009b      	lsls	r3, r3, #2
1000a1e4:	6023      	str	r3, [r4, #0]
  NVIC_EnableIRQ((IRQn_Type)9);
  return status;
}
1000a1e6:	2000      	movs	r0, #0
1000a1e8:	bd70      	pop	{r4, r5, r6, pc}
1000a1ea:	46c0      	nop			; (mov r8, r8)
1000a1ec:	40040400 	.word	0x40040400
1000a1f0:	48004000 	.word	0x48004000
1000a1f4:	1000f438 	.word	0x1000f438
1000a1f8:	1000f398 	.word	0x1000f398
1000a1fc:	1000f3f8 	.word	0x1000f3f8
1000a200:	e000e100 	.word	0xe000e100
1000a204:	00000b01 	.word	0x00000b01
1000a208:	ffff00ff 	.word	0xffff00ff
1000a20c:	00000901 	.word	0x00000901

1000a210 <cunit_logger_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
1000a210:	b538      	push	{r3, r4, r5, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 3U, &cunit_logger_rx_pin_config);
1000a212:	4d31      	ldr	r5, [pc, #196]	; (1000a2d8 <cunit_logger_init+0xc8>)
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &cunit_logger_channel_config);
1000a214:	4c31      	ldr	r4, [pc, #196]	; (1000a2dc <cunit_logger_init+0xcc>)
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 3U, &cunit_logger_rx_pin_config);
1000a216:	1c28      	adds	r0, r5, #0
1000a218:	4a31      	ldr	r2, [pc, #196]	; (1000a2e0 <cunit_logger_init+0xd0>)
1000a21a:	2103      	movs	r1, #3
1000a21c:	f7ff f91a 	bl	10009454 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &cunit_logger_channel_config);
1000a220:	1c20      	adds	r0, r4, #0
1000a222:	4930      	ldr	r1, [pc, #192]	; (1000a2e4 <cunit_logger_init+0xd4>)
1000a224:	f7ff fc6c 	bl	10009b00 <XMC_UART_CH_Init>
1000a228:	2207      	movs	r2, #7
1000a22a:	69e3      	ldr	r3, [r4, #28]
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX0, 0U);
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH1,
1000a22c:	1c20      	adds	r0, r4, #0
1000a22e:	4393      	bics	r3, r2
1000a230:	61e3      	str	r3, [r4, #28]
1000a232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1000a234:	2110      	movs	r1, #16
1000a236:	4393      	bics	r3, r2
1000a238:	62a3      	str	r3, [r4, #40]	; 0x28
1000a23a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1000a23c:	4393      	bics	r3, r2
1000a23e:	6323      	str	r3, [r4, #48]	; 0x30
1000a240:	3a03      	subs	r2, #3
1000a242:	2301      	movs	r3, #1
1000a244:	f7ff fd72 	bl	10009d2c <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH1,
1000a248:	2100      	movs	r1, #0
1000a24a:	1c20      	adds	r0, r4, #0
1000a24c:	1c0b      	adds	r3, r1, #0
1000a24e:	2204      	movs	r2, #4
1000a250:	f7ff fd80 	bl	10009d54 <XMC_USIC_CH_RXFIFO_Configure>
1000a254:	220f      	movs	r2, #15
1000a256:	2102      	movs	r1, #2
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH1);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 2U, &cunit_logger_tx_pin_config);
1000a258:	1c28      	adds	r0, r5, #0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000a25a:	25c3      	movs	r5, #195	; 0xc3
1000a25c:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000a25e:	00ad      	lsls	r5, r5, #2
1000a260:	4393      	bics	r3, r2
1000a262:	430b      	orrs	r3, r1
1000a264:	6423      	str	r3, [r4, #64]	; 0x40
1000a266:	4a20      	ldr	r2, [pc, #128]	; (1000a2e8 <cunit_logger_init+0xd8>)
1000a268:	f7ff f8f4 	bl	10009454 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
1000a26c:	1c20      	adds	r0, r4, #0
1000a26e:	2110      	movs	r1, #16
1000a270:	2200      	movs	r2, #0
1000a272:	f7ff fd9b 	bl	10009dac <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1000a276:	1c20      	adds	r0, r4, #0
1000a278:	2110      	movs	r1, #16
1000a27a:	2205      	movs	r2, #5
1000a27c:	f7ff fd9f 	bl	10009dbe <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      5U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1000a280:	1c20      	adds	r0, r4, #0
1000a282:	2110      	movs	r1, #16
1000a284:	2204      	movs	r2, #4
1000a286:	f7ff fda4 	bl	10009dd2 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x4U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
1000a28a:	1c20      	adds	r0, r4, #0
1000a28c:	4c17      	ldr	r4, [pc, #92]	; (1000a2ec <cunit_logger_init+0xdc>)
1000a28e:	2113      	movs	r1, #19
1000a290:	2204      	movs	r2, #4
1000a292:	f7ff fd9e 	bl	10009dd2 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
1000a296:	5962      	ldr	r2, [r4, r5]
1000a298:	4b15      	ldr	r3, [pc, #84]	; (1000a2f0 <cunit_logger_init+0xe0>)
       0x4U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)14, 3U);
  XMC_SCU_SetInterruptControl(14U, XMC_SCU_IRQCTRL_USIC0_SR5_IRQ14);
1000a29a:	21e0      	movs	r1, #224	; 0xe0
1000a29c:	4013      	ands	r3, r2
1000a29e:	22c0      	movs	r2, #192	; 0xc0
1000a2a0:	0412      	lsls	r2, r2, #16
1000a2a2:	4313      	orrs	r3, r2
1000a2a4:	5163      	str	r3, [r4, r5]
1000a2a6:	200e      	movs	r0, #14
1000a2a8:	0109      	lsls	r1, r1, #4
1000a2aa:	f7ff fa09 	bl	100096c0 <XMC_SCU_SetInterruptControl>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000a2ae:	2380      	movs	r3, #128	; 0x80
1000a2b0:	01db      	lsls	r3, r3, #7
1000a2b2:	6023      	str	r3, [r4, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000a2b4:	4b0f      	ldr	r3, [pc, #60]	; (1000a2f4 <cunit_logger_init+0xe4>)
1000a2b6:	5962      	ldr	r2, [r4, r5]
  NVIC_EnableIRQ((IRQn_Type)14);
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)13, 3U);
  XMC_SCU_SetInterruptControl(13U, XMC_SCU_IRQCTRL_USIC0_SR4_IRQ13);
1000a2b8:	21d0      	movs	r1, #208	; 0xd0
1000a2ba:	4013      	ands	r3, r2
1000a2bc:	22c0      	movs	r2, #192	; 0xc0
1000a2be:	0212      	lsls	r2, r2, #8
1000a2c0:	4313      	orrs	r3, r2
1000a2c2:	5163      	str	r3, [r4, r5]
1000a2c4:	200d      	movs	r0, #13
1000a2c6:	0109      	lsls	r1, r1, #4
1000a2c8:	f7ff f9fa 	bl	100096c0 <XMC_SCU_SetInterruptControl>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000a2cc:	2380      	movs	r3, #128	; 0x80
1000a2ce:	019b      	lsls	r3, r3, #6
1000a2d0:	6023      	str	r3, [r4, #0]
  NVIC_EnableIRQ((IRQn_Type)13);
  return status;
}
1000a2d2:	2000      	movs	r0, #0
1000a2d4:	bd38      	pop	{r3, r4, r5, pc}
1000a2d6:	46c0      	nop			; (mov r8, r8)
1000a2d8:	40040100 	.word	0x40040100
1000a2dc:	48000200 	.word	0x48000200
1000a2e0:	1000f440 	.word	0x1000f440
1000a2e4:	1000f3d4 	.word	0x1000f3d4
1000a2e8:	1000f400 	.word	0x1000f400
1000a2ec:	e000e100 	.word	0xe000e100
1000a2f0:	ff00ffff 	.word	0xff00ffff
1000a2f4:	ffff00ff 	.word	0xffff00ff

1000a2f8 <IRQ14_Handler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void cunit_logger_TX_HANDLER()
{
1000a2f8:	b508      	push	{r3, lr}
  UART_lTransmitHandler(&cunit_logger);
1000a2fa:	4802      	ldr	r0, [pc, #8]	; (1000a304 <IRQ14_Handler+0xc>)
1000a2fc:	f7ff fe6e 	bl	10009fdc <UART_lTransmitHandler>
}
1000a300:	bd08      	pop	{r3, pc}
1000a302:	46c0      	nop			; (mov r8, r8)
1000a304:	20002664 	.word	0x20002664

1000a308 <IRQ13_Handler>:

/*Receive ISR*/
void cunit_logger_RX_HANDLER()
{
1000a308:	b508      	push	{r3, lr}
  UART_lReceiveHandler(&cunit_logger);
1000a30a:	4802      	ldr	r0, [pc, #8]	; (1000a314 <IRQ13_Handler+0xc>)
1000a30c:	f7ff feb4 	bl	1000a078 <UART_lReceiveHandler>
}
1000a310:	bd08      	pop	{r3, pc}
1000a312:	46c0      	nop			; (mov r8, r8)
1000a314:	20002664 	.word	0x20002664

1000a318 <IRQ11_Handler>:
  return status;
}
/*Interrupt handlers*/
/*Transmit ISR*/
void esWiFi_com_TX_HANDLER()
{
1000a318:	b508      	push	{r3, lr}
  UART_lTransmitHandler(&esWiFi_com);
1000a31a:	4802      	ldr	r0, [pc, #8]	; (1000a324 <IRQ11_Handler+0xc>)
1000a31c:	f7ff fe5e 	bl	10009fdc <UART_lTransmitHandler>
}
1000a320:	bd08      	pop	{r3, pc}
1000a322:	46c0      	nop			; (mov r8, r8)
1000a324:	20002658 	.word	0x20002658

1000a328 <IRQ9_Handler>:

/*Receive ISR*/
void esWiFi_com_RX_HANDLER()
{
1000a328:	b508      	push	{r3, lr}
  UART_lReceiveHandler(&esWiFi_com);
1000a32a:	4802      	ldr	r0, [pc, #8]	; (1000a334 <IRQ9_Handler+0xc>)
1000a32c:	f7ff fea4 	bl	1000a078 <UART_lReceiveHandler>
}
1000a330:	bd08      	pop	{r3, pc}
1000a332:	46c0      	nop			; (mov r8, r8)
1000a334:	20002658 	.word	0x20002658

1000a338 <TIMER_Start>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
1000a338:	1dc2      	adds	r2, r0, #7
1000a33a:	7fd2      	ldrb	r2, [r2, #31]

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
1000a33c:	1c03      	adds	r3, r0, #0
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
1000a33e:	2001      	movs	r0, #1
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
1000a340:	2a00      	cmp	r2, #0
1000a342:	d007      	beq.n	1000a354 <TIMER_Start+0x1c>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
1000a344:	2000      	movs	r0, #0

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000a346:	1c9a      	adds	r2, r3, #2
1000a348:	7fd2      	ldrb	r2, [r2, #31]
1000a34a:	4282      	cmp	r2, r0
1000a34c:	d102      	bne.n	1000a354 <TIMER_Start+0x1c>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
1000a34e:	2201      	movs	r2, #1
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
1000a350:	695b      	ldr	r3, [r3, #20]
1000a352:	60da      	str	r2, [r3, #12]
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
1000a354:	4770      	bx	lr

1000a356 <TIMER_GetTimerStatus>:
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000a356:	1c82      	adds	r2, r0, #2

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
1000a358:	1c03      	adds	r3, r0, #0
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
1000a35a:	2000      	movs	r0, #0

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000a35c:	7fd2      	ldrb	r2, [r2, #31]
1000a35e:	4282      	cmp	r2, r0
1000a360:	d103      	bne.n	1000a36a <TIMER_GetTimerStatus+0x14>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
1000a362:	695b      	ldr	r3, [r3, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1000a364:	6898      	ldr	r0, [r3, #8]
1000a366:	2301      	movs	r3, #1
1000a368:	4018      	ands	r0, r3
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
}
1000a36a:	4770      	bx	lr

1000a36c <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
1000a36c:	b510      	push	{r4, lr}
1000a36e:	1c04      	adds	r4, r0, #0
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
1000a370:	f7ff fff1 	bl	1000a356 <TIMER_GetTimerStatus>
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
1000a374:	2301      	movs	r3, #1
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
1000a376:	2800      	cmp	r0, #0
1000a378:	d00b      	beq.n	1000a392 <TIMER_Stop+0x26>
1000a37a:	1de2      	adds	r2, r4, #7
1000a37c:	7fd2      	ldrb	r2, [r2, #31]
1000a37e:	2a00      	cmp	r2, #0
1000a380:	d007      	beq.n	1000a392 <TIMER_Stop+0x26>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000a382:	1ca3      	adds	r3, r4, #2
1000a384:	7fda      	ldrb	r2, [r3, #31]
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
1000a386:	2300      	movs	r3, #0

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000a388:	429a      	cmp	r2, r3
1000a38a:	d102      	bne.n	1000a392 <TIMER_Stop+0x26>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
1000a38c:	2101      	movs	r1, #1
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
1000a38e:	6962      	ldr	r2, [r4, #20]
1000a390:	6111      	str	r1, [r2, #16]
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
1000a392:	1c18      	adds	r0, r3, #0
1000a394:	bd10      	pop	{r4, pc}

1000a396 <TIMER_ClearEvent>:
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000a396:	1c83      	adds	r3, r0, #2
1000a398:	7fdb      	ldrb	r3, [r3, #31]
1000a39a:	2b00      	cmp	r3, #0
1000a39c:	d103      	bne.n	1000a3a6 <TIMER_ClearEvent+0x10>
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
1000a39e:	2201      	movs	r2, #1
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
1000a3a0:	6943      	ldr	r3, [r0, #20]
1000a3a2:	33b0      	adds	r3, #176	; 0xb0
1000a3a4:	601a      	str	r2, [r3, #0]
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
1000a3a6:	4770      	bx	lr

1000a3a8 <TIMER_Clear>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
1000a3a8:	1dc2      	adds	r2, r0, #7
1000a3aa:	7fd2      	ldrb	r2, [r2, #31]

/*
 * Clear the timer
 */
TIMER_STATUS_t TIMER_Clear(TIMER_t *const handle_ptr)
{
1000a3ac:	1c03      	adds	r3, r0, #0
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
1000a3ae:	2001      	movs	r0, #1
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
1000a3b0:	2a00      	cmp	r2, #0
1000a3b2:	d007      	beq.n	1000a3c4 <TIMER_Clear+0x1c>
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
1000a3b4:	2000      	movs	r0, #0

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000a3b6:	1c9a      	adds	r2, r3, #2
1000a3b8:	7fd2      	ldrb	r2, [r2, #31]
1000a3ba:	4282      	cmp	r2, r0
1000a3bc:	d102      	bne.n	1000a3c4 <TIMER_Clear+0x1c>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1000a3be:	2202      	movs	r2, #2
    {
      /* Clear the timer register */
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
1000a3c0:	695b      	ldr	r3, [r3, #20]
1000a3c2:	611a      	str	r2, [r3, #16]
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
1000a3c4:	4770      	bx	lr

1000a3c6 <TIMER_CCU4_lShadowTransfer>:
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
1000a3c6:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
1000a3c8:	8c42      	ldrh	r2, [r0, #34]	; 0x22
1000a3ca:	635a      	str	r2, [r3, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
1000a3cc:	2200      	movs	r2, #0
1000a3ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
1000a3d0:	6903      	ldr	r3, [r0, #16]
1000a3d2:	68c2      	ldr	r2, [r0, #12]
1000a3d4:	689b      	ldr	r3, [r3, #8]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
1000a3d6:	611a      	str	r2, [r3, #16]
}
1000a3d8:	4770      	bx	lr
	...

1000a3dc <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
1000a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a3de:	1c04      	adds	r4, r0, #0
1000a3e0:	1c0e      	adds	r6, r1, #0

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;

  if (false == TIMER_GetTimerStatus(handle_ptr))
1000a3e2:	f7ff ffb8 	bl	1000a356 <TIMER_GetTimerStatus>
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
1000a3e6:	2201      	movs	r2, #1

  if (false == TIMER_GetTimerStatus(handle_ptr))
1000a3e8:	2800      	cmp	r0, #0
1000a3ea:	d138      	bne.n	1000a45e <TIMER_SetTimeInterval+0x82>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
1000a3ec:	68a3      	ldr	r3, [r4, #8]
1000a3ee:	429e      	cmp	r6, r3
1000a3f0:	d335      	bcc.n	1000a45e <TIMER_SetTimeInterval+0x82>
1000a3f2:	6867      	ldr	r7, [r4, #4]
1000a3f4:	1c05      	adds	r5, r0, #0
1000a3f6:	42be      	cmp	r6, r7
1000a3f8:	d831      	bhi.n	1000a45e <TIMER_SetTimeInterval+0x82>
1000a3fa:	210f      	movs	r1, #15
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
1000a3fc:	1c3a      	adds	r2, r7, #0
1000a3fe:	1b4b      	subs	r3, r1, r5
1000a400:	40da      	lsrs	r2, r3
1000a402:	4296      	cmp	r6, r2
1000a404:	d901      	bls.n	1000a40a <TIMER_SetTimeInterval+0x2e>
      {
        lprescaler++;
1000a406:	3501      	adds	r5, #1
1000a408:	e7f7      	b.n	1000a3fa <TIMER_SetTimeInterval+0x1e>
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000a40a:	1ca3      	adds	r3, r4, #2
1000a40c:	7fdb      	ldrb	r3, [r3, #31]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
1000a40e:	2201      	movs	r2, #1
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000a410:	2b00      	cmp	r3, #0
1000a412:	d124      	bne.n	1000a45e <TIMER_SetTimeInterval+0x82>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
1000a414:	b2ed      	uxtb	r5, r5
1000a416:	1c2f      	adds	r7, r5, #0
1000a418:	69e0      	ldr	r0, [r4, #28]
1000a41a:	400f      	ands	r7, r1
1000a41c:	7900      	ldrb	r0, [r0, #4]
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
1000a41e:	6922      	ldr	r2, [r4, #16]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
1000a420:	4388      	bics	r0, r1
1000a422:	1c01      	adds	r1, r0, #0
1000a424:	69e0      	ldr	r0, [r4, #28]
1000a426:	4339      	orrs	r1, r7
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
1000a428:	6812      	ldr	r2, [r2, #0]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
1000a42a:	7101      	strb	r1, [r0, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
1000a42c:	1c19      	adds	r1, r3, #0
1000a42e:	1c30      	adds	r0, r6, #0
1000a430:	f001 fc7c 	bl	1000bd2c <__aeabi_lmul>
1000a434:	1c3a      	adds	r2, r7, #0
1000a436:	f001 fc4d 	bl	1000bcd4 <__aeabi_llsr>
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
1000a43a:	4a0a      	ldr	r2, [pc, #40]	; (1000a464 <TIMER_SetTimeInterval+0x88>)
1000a43c:	2300      	movs	r3, #0
1000a43e:	f001 fc55 	bl	1000bcec <__aeabi_uldivmod>
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
1000a442:	b280      	uxth	r0, r0
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
1000a444:	2801      	cmp	r0, #1
1000a446:	d900      	bls.n	1000a44a <TIMER_SetTimeInterval+0x6e>
        {
          (handle_ptr->period_value)--;
1000a448:	3801      	subs	r0, #1
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
1000a44a:	210f      	movs	r1, #15
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
        {
          (handle_ptr->period_value)--;
1000a44c:	8460      	strh	r0, [r4, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
1000a44e:	4029      	ands	r1, r5
1000a450:	6960      	ldr	r0, [r4, #20]
1000a452:	f7ff f98d 	bl	10009770 <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
1000a456:	1c20      	adds	r0, r4, #0
1000a458:	f7ff ffb5 	bl	1000a3c6 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
1000a45c:	2200      	movs	r2, #0
      }
#endif
    }
  }
  return (status);
}
1000a45e:	1c10      	adds	r0, r2, #0
1000a460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a462:	46c0      	nop			; (mov r8, r8)
1000a464:	05f5e100 	.word	0x05f5e100

1000a468 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
1000a468:	b570      	push	{r4, r5, r6, lr}
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
1000a46a:	2601      	movs	r6, #1
1000a46c:	1c04      	adds	r4, r0, #0
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
1000a46e:	6900      	ldr	r0, [r0, #16]
1000a470:	f000 fd6e 	bl	1000af50 <GLOBAL_CCU4_Init>
1000a474:	1c31      	adds	r1, r6, #0

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
1000a476:	6923      	ldr	r3, [r4, #16]
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
1000a478:	1c05      	adds	r5, r0, #0

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
1000a47a:	689a      	ldr	r2, [r3, #8]
1000a47c:	7e23      	ldrb	r3, [r4, #24]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
1000a47e:	6960      	ldr	r0, [r4, #20]
1000a480:	4099      	lsls	r1, r3
1000a482:	60d1      	str	r1, [r2, #12]
1000a484:	69e1      	ldr	r1, [r4, #28]
1000a486:	f7ff f95b 	bl	10009740 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
1000a48a:	1c20      	adds	r0, r4, #0
1000a48c:	f7ff ff9b 	bl	1000a3c6 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
1000a490:	1da3      	adds	r3, r4, #6
1000a492:	7fdb      	ldrb	r3, [r3, #31]
1000a494:	2b00      	cmp	r3, #0
1000a496:	d00a      	beq.n	1000a4ae <TIMER_CCU4_lInit+0x46>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
1000a498:	19a3      	adds	r3, r4, r6
1000a49a:	7fda      	ldrb	r2, [r3, #31]
1000a49c:	6960      	ldr	r0, [r4, #20]
1000a49e:	2100      	movs	r1, #0
1000a4a0:	f7ff f970 	bl	10009784 <XMC_CCU4_SLICE_SetInterruptNode>
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
1000a4a4:	6963      	ldr	r3, [r4, #20]
1000a4a6:	33a4      	adds	r3, #164	; 0xa4
1000a4a8:	681a      	ldr	r2, [r3, #0]
1000a4aa:	4332      	orrs	r2, r6
1000a4ac:	601a      	str	r2, [r3, #0]
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1000a4ae:	2202      	movs	r2, #2
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
1000a4b0:	6963      	ldr	r3, [r4, #20]

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
1000a4b2:	1de1      	adds	r1, r4, #7
1000a4b4:	611a      	str	r2, [r3, #16]
1000a4b6:	3a01      	subs	r2, #1
1000a4b8:	77ca      	strb	r2, [r1, #31]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
1000a4ba:	3405      	adds	r4, #5
1000a4bc:	7fe1      	ldrb	r1, [r4, #31]
1000a4be:	2900      	cmp	r1, #0
1000a4c0:	d000      	beq.n	1000a4c4 <TIMER_CCU4_lInit+0x5c>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
1000a4c2:	60da      	str	r2, [r3, #12]
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
  }

  return (status);
}
1000a4c4:	1c28      	adds	r0, r5, #0
1000a4c6:	bd70      	pop	{r4, r5, r6, pc}

1000a4c8 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
1000a4c8:	b508      	push	{r3, lr}

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
1000a4ca:	1dc2      	adds	r2, r0, #7
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
1000a4cc:	1c03      	adds	r3, r0, #0
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
1000a4ce:	2000      	movs	r0, #0
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
1000a4d0:	7fd2      	ldrb	r2, [r2, #31]
1000a4d2:	4282      	cmp	r2, r0
1000a4d4:	d106      	bne.n	1000a4e4 <TIMER_Init+0x1c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000a4d6:	1c9a      	adds	r2, r3, #2
1000a4d8:	7fd2      	ldrb	r2, [r2, #31]
1000a4da:	4282      	cmp	r2, r0
1000a4dc:	d102      	bne.n	1000a4e4 <TIMER_Init+0x1c>
1000a4de:	1c18      	adds	r0, r3, #0
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
1000a4e0:	f7ff ffc2 	bl	1000a468 <TIMER_CCU4_lInit>
    }
#endif
  }

  return (status);
}
1000a4e4:	bd08      	pop	{r3, pc}
	...

1000a4e8 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
1000a4e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000a4ea:	1c04      	adds	r4, r0, #0
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
1000a4ec:	7880      	ldrb	r0, [r0, #2]
1000a4ee:	78e6      	ldrb	r6, [r4, #3]
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
1000a4f0:	b241      	sxtb	r1, r0
1000a4f2:	01b3      	lsls	r3, r6, #6
1000a4f4:	9301      	str	r3, [sp, #4]
1000a4f6:	2900      	cmp	r1, #0
1000a4f8:	db19      	blt.n	1000a52e <INTERRUPT_Init+0x46>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000a4fa:	2503      	movs	r5, #3
1000a4fc:	26ff      	movs	r6, #255	; 0xff
1000a4fe:	4005      	ands	r5, r0
1000a500:	00ed      	lsls	r5, r5, #3
1000a502:	40ae      	lsls	r6, r5
1000a504:	27c0      	movs	r7, #192	; 0xc0
1000a506:	46b4      	mov	ip, r6
1000a508:	4b1f      	ldr	r3, [pc, #124]	; (1000a588 <INTERRUPT_Init+0xa0>)
1000a50a:	088a      	lsrs	r2, r1, #2
1000a50c:	0092      	lsls	r2, r2, #2
1000a50e:	18d2      	adds	r2, r2, r3
1000a510:	00bf      	lsls	r7, r7, #2
1000a512:	59d3      	ldr	r3, [r2, r7]
1000a514:	1c1e      	adds	r6, r3, #0
1000a516:	4663      	mov	r3, ip
1000a518:	439e      	bics	r6, r3
1000a51a:	46b4      	mov	ip, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000a51c:	26ff      	movs	r6, #255	; 0xff
1000a51e:	9b01      	ldr	r3, [sp, #4]
1000a520:	4033      	ands	r3, r6
1000a522:	40ab      	lsls	r3, r5
1000a524:	1c1d      	adds	r5, r3, #0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000a526:	4663      	mov	r3, ip
1000a528:	431d      	orrs	r5, r3
1000a52a:	51d5      	str	r5, [r2, r7]
1000a52c:	e015      	b.n	1000a55a <INTERRUPT_Init+0x72>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000a52e:	220f      	movs	r2, #15
1000a530:	b2c3      	uxtb	r3, r0
1000a532:	401a      	ands	r2, r3
1000a534:	3a08      	subs	r2, #8
1000a536:	4d15      	ldr	r5, [pc, #84]	; (1000a58c <INTERRUPT_Init+0xa4>)
1000a538:	0892      	lsrs	r2, r2, #2
1000a53a:	0092      	lsls	r2, r2, #2
1000a53c:	1952      	adds	r2, r2, r5
1000a53e:	2503      	movs	r5, #3
1000a540:	402b      	ands	r3, r5
1000a542:	40ab      	lsls	r3, r5
1000a544:	35fc      	adds	r5, #252	; 0xfc
1000a546:	1c2e      	adds	r6, r5, #0
1000a548:	409e      	lsls	r6, r3
1000a54a:	69d7      	ldr	r7, [r2, #28]
1000a54c:	43b7      	bics	r7, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000a54e:	9e01      	ldr	r6, [sp, #4]
1000a550:	402e      	ands	r6, r5
1000a552:	409e      	lsls	r6, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000a554:	1c3d      	adds	r5, r7, #0
1000a556:	4335      	orrs	r5, r6
1000a558:	61d5      	str	r5, [r2, #28]
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
1000a55a:	8823      	ldrh	r3, [r4, #0]
1000a55c:	0209      	lsls	r1, r1, #8
1000a55e:	4319      	orrs	r1, r3
1000a560:	b2c0      	uxtb	r0, r0
1000a562:	b289      	uxth	r1, r1
1000a564:	f7ff f8ac 	bl	100096c0 <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
1000a568:	7923      	ldrb	r3, [r4, #4]
1000a56a:	2b00      	cmp	r3, #0
1000a56c:	d00a      	beq.n	1000a584 <INTERRUPT_Init+0x9c>
1000a56e:	78a2      	ldrb	r2, [r4, #2]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1000a570:	b253      	sxtb	r3, r2
1000a572:	2b00      	cmp	r3, #0
1000a574:	db06      	blt.n	1000a584 <INTERRUPT_Init+0x9c>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000a576:	231f      	movs	r3, #31
1000a578:	4013      	ands	r3, r2
1000a57a:	2201      	movs	r2, #1
1000a57c:	409a      	lsls	r2, r3
1000a57e:	1c13      	adds	r3, r2, #0
1000a580:	4a01      	ldr	r2, [pc, #4]	; (1000a588 <INTERRUPT_Init+0xa0>)
1000a582:	6013      	str	r3, [r2, #0]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
1000a584:	2000      	movs	r0, #0
1000a586:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000a588:	e000e100 	.word	0xe000e100
1000a58c:	e000ed00 	.word	0xe000ed00

1000a590 <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
1000a590:	b538      	push	{r3, r4, r5, lr}
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
1000a592:	6844      	ldr	r4, [r0, #4]
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
1000a594:	1c0d      	adds	r5, r1, #0
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
1000a596:	1c23      	adds	r3, r4, #0
1000a598:	3308      	adds	r3, #8
1000a59a:	7fd9      	ldrb	r1, [r3, #31]
1000a59c:	2301      	movs	r3, #1
1000a59e:	1c1a      	adds	r2, r3, #0

  if ((handle->config->txFIFO_size > 0))
1000a5a0:	3407      	adds	r4, #7
1000a5a2:	7fe4      	ldrb	r4, [r4, #31]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
1000a5a4:	408a      	lsls	r2, r1

  if ((handle->config->txFIFO_size > 0))
1000a5a6:	2c00      	cmp	r4, #0
1000a5a8:	d001      	beq.n	1000a5ae <I2C_MASTER_lReconfigureRxFIFO+0x1e>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
1000a5aa:	40a3      	lsls	r3, r4
1000a5ac:	b2db      	uxtb	r3, r3
1000a5ae:	b2d2      	uxtb	r2, r2
1000a5b0:	42aa      	cmp	r2, r5
1000a5b2:	d900      	bls.n	1000a5b6 <I2C_MASTER_lReconfigureRxFIFO+0x26>
1000a5b4:	1c2a      	adds	r2, r5, #0
1000a5b6:	429a      	cmp	r2, r3
1000a5b8:	d900      	bls.n	1000a5bc <I2C_MASTER_lReconfigureRxFIFO+0x2c>
1000a5ba:	1c1a      	adds	r2, r3, #0
  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
1000a5bc:	3a01      	subs	r2, #1
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1000a5be:	6800      	ldr	r0, [r0, #0]
1000a5c0:	f7ff fbe0 	bl	10009d84 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
1000a5c4:	bd38      	pop	{r3, r4, r5, pc}

1000a5c6 <I2C_MASTER_lSendStop_JumpTo_TxCallback>:
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
1000a5c6:	2180      	movs	r1, #128	; 0x80
 } /* end of else */
}

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
1000a5c8:	b538      	push	{r3, r4, r5, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
1000a5ca:	6885      	ldr	r5, [r0, #8]
 } /* end of else */
}

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
1000a5cc:	1c04      	adds	r4, r0, #0
1000a5ce:	05c9      	lsls	r1, r1, #23
1000a5d0:	6800      	ldr	r0, [r0, #0]
1000a5d2:	f7ff fa57 	bl	10009a84 <XMC_I2C_CH_DisableEvent>

  ptr_runtime = handle->runtime;

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));

  if (ptr_runtime->send_stop == true)
1000a5d6:	69eb      	ldr	r3, [r5, #28]
1000a5d8:	2b01      	cmp	r3, #1
1000a5da:	d10a      	bne.n	1000a5f2 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2c>
  {
    ptr_runtime->bus_acquired = false;
1000a5dc:	1c2b      	adds	r3, r5, #0
1000a5de:	2200      	movs	r2, #0
1000a5e0:	3328      	adds	r3, #40	; 0x28
1000a5e2:	6820      	ldr	r0, [r4, #0]
1000a5e4:	701a      	strb	r2, [r3, #0]
1000a5e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a5e8:	3210      	adds	r2, #16
1000a5ea:	4313      	orrs	r3, r2
1000a5ec:	64c3      	str	r3, [r0, #76]	; 0x4c
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStop(handle->channel);
1000a5ee:	f7ff f9bf 	bl	10009970 <XMC_I2C_CH_MasterStop>
    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
1000a5f2:	6821      	ldr	r1, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1000a5f4:	227f      	movs	r2, #127	; 0x7f
1000a5f6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
1000a5f8:	4393      	bics	r3, r2
1000a5fa:	b2db      	uxtb	r3, r3
1000a5fc:	2b80      	cmp	r3, #128	; 0x80
1000a5fe:	d0f9      	beq.n	1000a5f4 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2e>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
1000a600:	2300      	movs	r3, #0
1000a602:	3507      	adds	r5, #7
1000a604:	77eb      	strb	r3, [r5, #31]

  if (handle->config->tx_cbhandler != NULL)
1000a606:	6863      	ldr	r3, [r4, #4]
1000a608:	691b      	ldr	r3, [r3, #16]
1000a60a:	2b00      	cmp	r3, #0
1000a60c:	d000      	beq.n	1000a610 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x4a>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
1000a60e:	4798      	blx	r3
  }
}
1000a610:	bd38      	pop	{r3, r4, r5, pc}

1000a612 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
1000a612:	b510      	push	{r4, lr}
  if (handle->runtime->bus_acquired == true)
1000a614:	6883      	ldr	r3, [r0, #8]
1000a616:	b289      	uxth	r1, r1
1000a618:	3328      	adds	r3, #40	; 0x28
1000a61a:	781c      	ldrb	r4, [r3, #0]
1000a61c:	6800      	ldr	r0, [r0, #0]
1000a61e:	2c00      	cmp	r4, #0
1000a620:	d006      	beq.n	1000a630 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x1e>
1000a622:	2408      	movs	r4, #8
1000a624:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a626:	4323      	orrs	r3, r4
1000a628:	64c3      	str	r3, [r0, #76]	; 0x4c
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
1000a62a:	f7ff f97f 	bl	1000992c <XMC_I2C_CH_MasterRepeatedStart>
1000a62e:	e007      	b.n	1000a640 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x2e>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
  }
  else
  {
    handle->runtime->bus_acquired = true;
1000a630:	2401      	movs	r4, #1
1000a632:	701c      	strb	r4, [r3, #0]
1000a634:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a636:	3403      	adds	r4, #3
1000a638:	4323      	orrs	r3, r4
1000a63a:	64c3      	str	r3, [r0, #76]	; 0x4c
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
1000a63c:	f7ff f954 	bl	100098e8 <XMC_I2C_CH_MasterStart>
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
  }
}
1000a640:	bd10      	pop	{r4, pc}

1000a642 <I2C_MASTER_lSendStop_JumpTo_RxCallback>:
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
1000a642:	b538      	push	{r3, r4, r5, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
1000a644:	6884      	ldr	r4, [r0, #8]
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
1000a646:	1c05      	adds	r5, r0, #0
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;

  if (ptr_runtime->send_stop == true)
1000a648:	69e3      	ldr	r3, [r4, #28]
1000a64a:	2b01      	cmp	r3, #1
1000a64c:	d110      	bne.n	1000a670 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x2e>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
1000a64e:	6800      	ldr	r0, [r0, #0]
1000a650:	227f      	movs	r2, #127	; 0x7f
1000a652:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000a654:	4393      	bics	r3, r2
1000a656:	b2db      	uxtb	r3, r3
1000a658:	2b80      	cmp	r3, #128	; 0x80
1000a65a:	d0f9      	beq.n	1000a650 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0xe>

    ptr_runtime->bus_acquired = false;
1000a65c:	1c23      	adds	r3, r4, #0
1000a65e:	2200      	movs	r2, #0
1000a660:	3328      	adds	r3, #40	; 0x28
1000a662:	701a      	strb	r2, [r3, #0]
1000a664:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a666:	3210      	adds	r2, #16
1000a668:	4313      	orrs	r3, r2
1000a66a:	64c3      	str	r3, [r0, #76]	; 0x4c
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStop(handle->channel);
1000a66c:	f7ff f980 	bl	10009970 <XMC_I2C_CH_MasterStop>

    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
1000a670:	6829      	ldr	r1, [r5, #0]
1000a672:	227f      	movs	r2, #127	; 0x7f
1000a674:	6b8b      	ldr	r3, [r1, #56]	; 0x38
1000a676:	4393      	bics	r3, r2
1000a678:	b2db      	uxtb	r3, r3
1000a67a:	2b80      	cmp	r3, #128	; 0x80
1000a67c:	d0f9      	beq.n	1000a672 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x30>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
1000a67e:	1c22      	adds	r2, r4, #0
1000a680:	2300      	movs	r3, #0
1000a682:	3208      	adds	r2, #8
  ptr_runtime->tx_busy = false;
1000a684:	3407      	adds	r4, #7
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}

  /* Reception complete */
  ptr_runtime->rx_busy = false;
1000a686:	77d3      	strb	r3, [r2, #31]
  ptr_runtime->tx_busy = false;
1000a688:	77e3      	strb	r3, [r4, #31]

  if (handle->config->rx_cbhandler != NULL)
1000a68a:	686b      	ldr	r3, [r5, #4]
1000a68c:	695b      	ldr	r3, [r3, #20]
1000a68e:	2b00      	cmp	r3, #0
1000a690:	d000      	beq.n	1000a694 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x52>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
1000a692:	4798      	blx	r3
  }
}
1000a694:	bd38      	pop	{r3, r4, r5, pc}

1000a696 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
1000a696:	b508      	push	{r3, lr}

    status = I2C_MASTER_STATUS_SUCCESS;
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
1000a698:	2301      	movs	r3, #1
/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
1000a69a:	2800      	cmp	r0, #0
1000a69c:	d003      	beq.n	1000a6a6 <I2C_MASTER_Init+0x10>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
1000a69e:	6843      	ldr	r3, [r0, #4]
1000a6a0:	685b      	ldr	r3, [r3, #4]
1000a6a2:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
1000a6a4:	2300      	movs	r3, #0
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  return (status);
}
1000a6a6:	1c18      	adds	r0, r3, #0
1000a6a8:	bd08      	pop	{r3, pc}

1000a6aa <I2C_MASTER_ClearFlag>:
}

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
1000a6aa:	6802      	ldr	r2, [r0, #0]
1000a6ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1000a6ae:	4319      	orrs	r1, r3
1000a6b0:	64d1      	str	r1, [r2, #76]	; 0x4c
}
1000a6b2:	4770      	bx	lr

1000a6b4 <I2C_MASTER_StartTransmitIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
1000a6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000a6b6:	9201      	str	r2, [sp, #4]
1000a6b8:	aa08      	add	r2, sp, #32
1000a6ba:	1c0f      	adds	r7, r1, #0
1000a6bc:	ca02      	ldmia	r2!, {r1}
1000a6be:	1c06      	adds	r6, r0, #0
1000a6c0:	7812      	ldrb	r2, [r2, #0]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;
1000a6c2:	6884      	ldr	r4, [r0, #8]
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
1000a6c4:	4694      	mov	ip, r2
  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
1000a6c6:	2f00      	cmp	r7, #0
1000a6c8:	d105      	bne.n	1000a6d6 <I2C_MASTER_StartTransmitIRQ+0x22>
1000a6ca:	1c22      	adds	r2, r4, #0
1000a6cc:	3228      	adds	r2, #40	; 0x28
1000a6ce:	7812      	ldrb	r2, [r2, #0]
  {
  status = I2C_MASTER_STATUS_FAILURE;
1000a6d0:	2001      	movs	r0, #1
  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
1000a6d2:	2a00      	cmp	r2, #0
1000a6d4:	d02e      	beq.n	1000a734 <I2C_MASTER_StartTransmitIRQ+0x80>
  {
  status = I2C_MASTER_STATUS_FAILURE;
1000a6d6:	2001      	movs	r0, #1
  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
1000a6d8:	2b00      	cmp	r3, #0
1000a6da:	d02b      	beq.n	1000a734 <I2C_MASTER_StartTransmitIRQ+0x80>
1000a6dc:	2900      	cmp	r1, #0
1000a6de:	d029      	beq.n	1000a734 <I2C_MASTER_StartTransmitIRQ+0x80>
  {
  status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
1000a6e0:	2200      	movs	r2, #0
1000a6e2:	61a2      	str	r2, [r4, #24]

    if (ptr_runtime->tx_busy == false)
1000a6e4:	1de2      	adds	r2, r4, #7
1000a6e6:	7fd5      	ldrb	r5, [r2, #31]
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
1000a6e8:	1800      	adds	r0, r0, r0
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;

    if (ptr_runtime->tx_busy == false)
1000a6ea:	b2ed      	uxtb	r5, r5
1000a6ec:	2d00      	cmp	r5, #0
1000a6ee:	d121      	bne.n	1000a734 <I2C_MASTER_StartTransmitIRQ+0x80>
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
1000a6f0:	6023      	str	r3, [r4, #0]
    ptr_runtime->tx_data_count = size;

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
    ptr_runtime->tx_busy = true;
1000a6f2:	2301      	movs	r3, #1

    if (ptr_runtime->tx_busy == false)
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = size;
1000a6f4:	60a1      	str	r1, [r4, #8]

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
1000a6f6:	60e5      	str	r5, [r4, #12]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
1000a6f8:	2180      	movs	r1, #128	; 0x80
    ptr_runtime->tx_busy = true;
1000a6fa:	77d3      	strb	r3, [r2, #31]
    ptr_runtime->send_stop = send_stop;
1000a6fc:	4663      	mov	r3, ip
1000a6fe:	6830      	ldr	r0, [r6, #0]
1000a700:	61e3      	str	r3, [r4, #28]
1000a702:	05c9      	lsls	r1, r1, #23

    /* Enable ACK event */
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
1000a704:	3405      	adds	r4, #5
1000a706:	f7ff f9af 	bl	10009a68 <XMC_I2C_CH_EnableEvent>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
1000a70a:	7fe2      	ldrb	r2, [r4, #31]
1000a70c:	6830      	ldr	r0, [r6, #0]
1000a70e:	2110      	movs	r1, #16
1000a710:	f7ff fb4c 	bl	10009dac <XMC_USIC_CH_SetInterruptNodePointer>

    if (send_start == true)
1000a714:	2f00      	cmp	r7, #0
1000a716:	d006      	beq.n	1000a726 <I2C_MASTER_StartTransmitIRQ+0x72>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
1000a718:	1c30      	adds	r0, r6, #0
1000a71a:	9901      	ldr	r1, [sp, #4]
1000a71c:	1c2a      	adds	r2, r5, #0
1000a71e:	f7ff ff78 	bl	1000a612 <I2C_MASTER_lSendStart_Or_RepeatedStart>
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
    }

    status = I2C_MASTER_STATUS_SUCCESS;
1000a722:	1c28      	adds	r0, r5, #0
1000a724:	e006      	b.n	1000a734 <I2C_MASTER_StartTransmitIRQ+0x80>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1000a726:	2380      	movs	r3, #128	; 0x80
1000a728:	7fe1      	ldrb	r1, [r4, #31]
1000a72a:	025b      	lsls	r3, r3, #9
1000a72c:	408b      	lsls	r3, r1
1000a72e:	1c38      	adds	r0, r7, #0
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
    }
    else
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
1000a730:	6832      	ldr	r2, [r6, #0]
1000a732:	6693      	str	r3, [r2, #104]	; 0x68

    status = I2C_MASTER_STATUS_SUCCESS;
  }
  }
  return (status);
}
1000a734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000a736 <I2C_MASTER_Transmit>:
}

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
1000a736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000a738:	ac08      	add	r4, sp, #32
1000a73a:	cc40      	ldmia	r4!, {r6}
1000a73c:	7825      	ldrb	r5, [r4, #0]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000a73e:	6844      	ldr	r4, [r0, #4]
1000a740:	3405      	adds	r4, #5
1000a742:	7fe7      	ldrb	r7, [r4, #31]
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
1000a744:	2402      	movs	r4, #2

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000a746:	2f00      	cmp	r7, #0
1000a748:	d104      	bne.n	1000a754 <I2C_MASTER_Transmit+0x1e>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
1000a74a:	9600      	str	r6, [sp, #0]
1000a74c:	9501      	str	r5, [sp, #4]
1000a74e:	f7ff ffb1 	bl	1000a6b4 <I2C_MASTER_StartTransmitIRQ>
1000a752:	1c04      	adds	r4, r0, #0
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
} /* end of function */
1000a754:	1c20      	adds	r0, r4, #0
1000a756:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000a758 <I2C_MASTER_StartReceiveIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
1000a758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000a75a:	9200      	str	r2, [sp, #0]
1000a75c:	aa08      	add	r2, sp, #32
1000a75e:	1c0e      	adds	r6, r1, #0
1000a760:	ca02      	ldmia	r2!, {r1}
1000a762:	1c05      	adds	r5, r0, #0
1000a764:	7812      	ldrb	r2, [r2, #0]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;
1000a766:	6884      	ldr	r4, [r0, #8]
#endif

#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
1000a768:	1c17      	adds	r7, r2, #0
1000a76a:	aa0a      	add	r2, sp, #40	; 0x28
1000a76c:	7812      	ldrb	r2, [r2, #0]
1000a76e:	9201      	str	r2, [sp, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
1000a770:	2e00      	cmp	r6, #0
1000a772:	d106      	bne.n	1000a782 <I2C_MASTER_StartReceiveIRQ+0x2a>
1000a774:	1c22      	adds	r2, r4, #0
1000a776:	3228      	adds	r2, #40	; 0x28
1000a778:	7812      	ldrb	r2, [r2, #0]
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
1000a77a:	2001      	movs	r0, #1
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
1000a77c:	2a00      	cmp	r2, #0
1000a77e:	d100      	bne.n	1000a782 <I2C_MASTER_StartReceiveIRQ+0x2a>
1000a780:	e107      	b.n	1000a992 <I2C_MASTER_StartReceiveIRQ+0x23a>
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
1000a782:	2001      	movs	r0, #1
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
1000a784:	2b00      	cmp	r3, #0
1000a786:	d100      	bne.n	1000a78a <I2C_MASTER_StartReceiveIRQ+0x32>
1000a788:	e103      	b.n	1000a992 <I2C_MASTER_StartReceiveIRQ+0x23a>
1000a78a:	2900      	cmp	r1, #0
1000a78c:	d100      	bne.n	1000a790 <I2C_MASTER_StartReceiveIRQ+0x38>
1000a78e:	e100      	b.n	1000a992 <I2C_MASTER_StartReceiveIRQ+0x23a>
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
1000a790:	2208      	movs	r2, #8
1000a792:	4694      	mov	ip, r2
1000a794:	44a4      	add	ip, r4
1000a796:	4662      	mov	r2, ip
1000a798:	7fd2      	ldrb	r2, [r2, #31]
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
1000a79a:	1800      	adds	r0, r0, r0
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
1000a79c:	b2d2      	uxtb	r2, r2
1000a79e:	2a00      	cmp	r2, #0
1000a7a0:	d000      	beq.n	1000a7a4 <I2C_MASTER_StartReceiveIRQ+0x4c>
1000a7a2:	e0f6      	b.n	1000a992 <I2C_MASTER_StartReceiveIRQ+0x23a>
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
1000a7a4:	3801      	subs	r0, #1

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
1000a7a6:	6063      	str	r3, [r4, #4]
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
1000a7a8:	6023      	str	r3, [r4, #0]
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
1000a7aa:	1de3      	adds	r3, r4, #7
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
1000a7ac:	61a0      	str	r0, [r4, #24]

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
1000a7ae:	6121      	str	r1, [r4, #16]
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
1000a7b0:	60a1      	str	r1, [r4, #8]
    ptr_runtime->tx_busy = true;
1000a7b2:	77d8      	strb	r0, [r3, #31]
    ptr_runtime->rx_busy = true;
1000a7b4:	4663      	mov	r3, ip
1000a7b6:	77d8      	strb	r0, [r3, #31]
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
1000a7b8:	9b01      	ldr	r3, [sp, #4]
    ptr_runtime->rx_data_index = 0U;
1000a7ba:	6162      	str	r2, [r4, #20]
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
1000a7bc:	6223      	str	r3, [r4, #32]
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;

    if (handle->config->rxFIFO_size > 0)
1000a7be:	686b      	ldr	r3, [r5, #4]
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;
1000a7c0:	60e2      	str	r2, [r4, #12]

    if (handle->config->rxFIFO_size > 0)
1000a7c2:	1c1a      	adds	r2, r3, #0
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
1000a7c4:	61e7      	str	r7, [r4, #28]
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;

    if (handle->config->rxFIFO_size > 0)
1000a7c6:	3208      	adds	r2, #8
1000a7c8:	7fd2      	ldrb	r2, [r2, #31]
1000a7ca:	6828      	ldr	r0, [r5, #0]
1000a7cc:	2a00      	cmp	r2, #0
1000a7ce:	d07e      	beq.n	1000a8ce <I2C_MASTER_StartReceiveIRQ+0x176>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1000a7d0:	2380      	movs	r3, #128	; 0x80
1000a7d2:	30fc      	adds	r0, #252	; 0xfc
1000a7d4:	01db      	lsls	r3, r3, #7
1000a7d6:	61c3      	str	r3, [r0, #28]
  /*Clear the receive FIFO, configure the trigger lime
   * and enable the receive events*/
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);

  /*Configure the FIFO trigger limit based on the required data size*/
  I2C_MASTER_lReconfigureRxFIFO(handle, count);
1000a7d8:	1c28      	adds	r0, r5, #0
1000a7da:	f7ff fed9 	bl	1000a590 <I2C_MASTER_lReconfigureRxFIFO>

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
1000a7de:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
1000a7e0:	21c0      	movs	r1, #192	; 0xc0
1000a7e2:	1c02      	adds	r2, r0, #0
1000a7e4:	32fc      	adds	r2, #252	; 0xfc
1000a7e6:	6913      	ldr	r3, [r2, #16]
1000a7e8:	05c9      	lsls	r1, r1, #23
1000a7ea:	430b      	orrs	r3, r1
1000a7ec:	6113      	str	r3, [r2, #16]
1000a7ee:	686b      	ldr	r3, [r5, #4]
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
1000a7f0:	2e00      	cmp	r6, #0
1000a7f2:	d039      	beq.n	1000a868 <I2C_MASTER_StartReceiveIRQ+0x110>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
1000a7f4:	3305      	adds	r3, #5
1000a7f6:	7fdb      	ldrb	r3, [r3, #31]
1000a7f8:	3b01      	subs	r3, #1
1000a7fa:	2b01      	cmp	r3, #1
1000a7fc:	d909      	bls.n	1000a812 <I2C_MASTER_StartReceiveIRQ+0xba>
1000a7fe:	2180      	movs	r1, #128	; 0x80
1000a800:	05c9      	lsls	r1, r1, #23
1000a802:	f7ff f931 	bl	10009a68 <XMC_I2C_CH_EnableEvent>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
1000a806:	1d63      	adds	r3, r4, #5
1000a808:	7fda      	ldrb	r2, [r3, #31]
1000a80a:	6828      	ldr	r0, [r5, #0]
1000a80c:	2110      	movs	r1, #16
1000a80e:	f7ff facd 	bl	10009dac <XMC_USIC_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
1000a812:	2201      	movs	r2, #1
1000a814:	1c28      	adds	r0, r5, #0
1000a816:	9900      	ldr	r1, [sp, #0]
1000a818:	f7ff fefb 	bl	1000a612 <I2C_MASTER_lSendStart_Or_RepeatedStart>
    I2C_MASTER_ReceiveACK(handle);
    }
    ptr_runtime->tx_data_index++;
    }
#endif
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
1000a81c:	686b      	ldr	r3, [r5, #4]
1000a81e:	1d5a      	adds	r2, r3, #5
1000a820:	7fd2      	ldrb	r2, [r2, #31]
1000a822:	2a02      	cmp	r2, #2
1000a824:	d000      	beq.n	1000a828 <I2C_MASTER_StartReceiveIRQ+0xd0>
1000a826:	e093      	b.n	1000a950 <I2C_MASTER_StartReceiveIRQ+0x1f8>
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000a828:	3307      	adds	r3, #7
1000a82a:	7fdb      	ldrb	r3, [r3, #31]
1000a82c:	2b00      	cmp	r3, #0
1000a82e:	d070      	beq.n	1000a912 <I2C_MASTER_StartReceiveIRQ+0x1ba>
1000a830:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000a832:	1c03      	adds	r3, r0, #0
1000a834:	33fc      	adds	r3, #252	; 0xfc
1000a836:	699b      	ldr	r3, [r3, #24]
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000a838:	04db      	lsls	r3, r3, #19
1000a83a:	d500      	bpl.n	1000a83e <I2C_MASTER_StartReceiveIRQ+0xe6>
1000a83c:	e088      	b.n	1000a950 <I2C_MASTER_StartReceiveIRQ+0x1f8>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000a83e:	68e3      	ldr	r3, [r4, #12]
1000a840:	68a2      	ldr	r2, [r4, #8]
1000a842:	4293      	cmp	r3, r2
1000a844:	d300      	bcc.n	1000a848 <I2C_MASTER_StartReceiveIRQ+0xf0>
1000a846:	e083      	b.n	1000a950 <I2C_MASTER_StartReceiveIRQ+0x1f8>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000a848:	68e3      	ldr	r3, [r4, #12]
1000a84a:	3301      	adds	r3, #1
1000a84c:	4293      	cmp	r3, r2
1000a84e:	d105      	bne.n	1000a85c <I2C_MASTER_StartReceiveIRQ+0x104>
1000a850:	6a23      	ldr	r3, [r4, #32]
1000a852:	2b01      	cmp	r3, #1
1000a854:	d102      	bne.n	1000a85c <I2C_MASTER_StartReceiveIRQ+0x104>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000a856:	f7ff f8de 	bl	10009a16 <XMC_I2C_CH_MasterReceiveNack>
1000a85a:	e001      	b.n	1000a860 <I2C_MASTER_StartReceiveIRQ+0x108>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000a85c:	f7ff f8be 	bl	100099dc <XMC_I2C_CH_MasterReceiveAck>
      }
      else
        {
          I2C_MASTER_ReceiveACK(handle);
        }
      ptr_runtime->tx_data_index++;
1000a860:	68e3      	ldr	r3, [r4, #12]
1000a862:	3301      	adds	r3, #1
1000a864:	60e3      	str	r3, [r4, #12]
1000a866:	e7e3      	b.n	1000a830 <I2C_MASTER_StartReceiveIRQ+0xd8>
    } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
  } /* end of if (send_start == true) */
  else
  {
    /* if Tx FIFO enabled */
    if (handle->config->txFIFO_size > 0)
1000a868:	3307      	adds	r3, #7
1000a86a:	7fdb      	ldrb	r3, [r3, #31]
1000a86c:	2b00      	cmp	r3, #0
1000a86e:	d01d      	beq.n	1000a8ac <I2C_MASTER_StartReceiveIRQ+0x154>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000a870:	68d1      	ldr	r1, [r2, #12]
1000a872:	4b48      	ldr	r3, [pc, #288]	; (1000a994 <I2C_MASTER_StartReceiveIRQ+0x23c>)
1000a874:	400b      	ands	r3, r1
1000a876:	60d3      	str	r3, [r2, #12]
1000a878:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000a87a:	1c03      	adds	r3, r0, #0
1000a87c:	33fc      	adds	r3, #252	; 0xfc
1000a87e:	699b      	ldr	r3, [r3, #24]
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000a880:	04db      	lsls	r3, r3, #19
1000a882:	d465      	bmi.n	1000a950 <I2C_MASTER_StartReceiveIRQ+0x1f8>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000a884:	68e3      	ldr	r3, [r4, #12]
1000a886:	68a2      	ldr	r2, [r4, #8]
1000a888:	4293      	cmp	r3, r2
1000a88a:	d261      	bcs.n	1000a950 <I2C_MASTER_StartReceiveIRQ+0x1f8>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
1000a88c:	68e3      	ldr	r3, [r4, #12]
1000a88e:	3301      	adds	r3, #1
1000a890:	4293      	cmp	r3, r2
1000a892:	d105      	bne.n	1000a8a0 <I2C_MASTER_StartReceiveIRQ+0x148>
1000a894:	6a23      	ldr	r3, [r4, #32]
1000a896:	2b01      	cmp	r3, #1
1000a898:	d102      	bne.n	1000a8a0 <I2C_MASTER_StartReceiveIRQ+0x148>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000a89a:	f7ff f8bc 	bl	10009a16 <XMC_I2C_CH_MasterReceiveNack>
1000a89e:	e001      	b.n	1000a8a4 <I2C_MASTER_StartReceiveIRQ+0x14c>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000a8a0:	f7ff f89c 	bl	100099dc <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
1000a8a4:	68e3      	ldr	r3, [r4, #12]
1000a8a6:	3301      	adds	r3, #1
1000a8a8:	60e3      	str	r3, [r4, #12]
1000a8aa:	e7e5      	b.n	1000a878 <I2C_MASTER_StartReceiveIRQ+0x120>
        }
      } /* end of while */
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000a8ac:	68e3      	ldr	r3, [r4, #12]
1000a8ae:	68a2      	ldr	r2, [r4, #8]
1000a8b0:	4293      	cmp	r3, r2
1000a8b2:	d24d      	bcs.n	1000a950 <I2C_MASTER_StartReceiveIRQ+0x1f8>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
1000a8b4:	68e3      	ldr	r3, [r4, #12]
1000a8b6:	3301      	adds	r3, #1
1000a8b8:	4293      	cmp	r3, r2
1000a8ba:	d102      	bne.n	1000a8c2 <I2C_MASTER_StartReceiveIRQ+0x16a>
1000a8bc:	6a23      	ldr	r3, [r4, #32]
1000a8be:	2b01      	cmp	r3, #1
1000a8c0:	d03e      	beq.n	1000a940 <I2C_MASTER_StartReceiveIRQ+0x1e8>
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
1000a8c2:	22f2      	movs	r2, #242	; 0xf2
1000a8c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a8c6:	0212      	lsls	r2, r2, #8
1000a8c8:	4313      	orrs	r3, r2
1000a8ca:	64c3      	str	r3, [r0, #76]	; 0x4c
1000a8cc:	e03b      	b.n	1000a946 <I2C_MASTER_StartReceiveIRQ+0x1ee>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
1000a8ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
1000a8d0:	1c17      	adds	r7, r2, #0
1000a8d2:	22c0      	movs	r2, #192	; 0xc0
1000a8d4:	0212      	lsls	r2, r2, #8
1000a8d6:	4317      	orrs	r7, r2
1000a8d8:	6407      	str	r7, [r0, #64]	; 0x40
  ptr_runtime = handle->runtime;

  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
1000a8da:	2e00      	cmp	r6, #0
1000a8dc:	d025      	beq.n	1000a92a <I2C_MASTER_StartReceiveIRQ+0x1d2>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
1000a8de:	3305      	adds	r3, #5
1000a8e0:	7fdb      	ldrb	r3, [r3, #31]
1000a8e2:	3b01      	subs	r3, #1
1000a8e4:	2b01      	cmp	r3, #1
1000a8e6:	d909      	bls.n	1000a8fc <I2C_MASTER_StartReceiveIRQ+0x1a4>
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
1000a8e8:	2180      	movs	r1, #128	; 0x80
1000a8ea:	05c9      	lsls	r1, r1, #23
1000a8ec:	f7ff f8bc 	bl	10009a68 <XMC_I2C_CH_EnableEvent>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
1000a8f0:	1d63      	adds	r3, r4, #5
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
1000a8f2:	7fda      	ldrb	r2, [r3, #31]
1000a8f4:	6828      	ldr	r0, [r5, #0]
1000a8f6:	2110      	movs	r1, #16
1000a8f8:	f7ff fa58 	bl	10009dac <XMC_USIC_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
1000a8fc:	1c28      	adds	r0, r5, #0
1000a8fe:	9900      	ldr	r1, [sp, #0]
1000a900:	2201      	movs	r2, #1
1000a902:	f7ff fe86 	bl	1000a612 <I2C_MASTER_lSendStart_Or_RepeatedStart>

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
1000a906:	686b      	ldr	r3, [r5, #4]
1000a908:	3305      	adds	r3, #5
1000a90a:	7fdb      	ldrb	r3, [r3, #31]
1000a90c:	3b01      	subs	r3, #1
1000a90e:	2b01      	cmp	r3, #1
1000a910:	d81e      	bhi.n	1000a950 <I2C_MASTER_StartReceiveIRQ+0x1f8>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
  {
    if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000a912:	68e3      	ldr	r3, [r4, #12]
1000a914:	68a2      	ldr	r2, [r4, #8]
1000a916:	3301      	adds	r3, #1
1000a918:	4293      	cmp	r3, r2
1000a91a:	d104      	bne.n	1000a926 <I2C_MASTER_StartReceiveIRQ+0x1ce>
1000a91c:	6a23      	ldr	r3, [r4, #32]
1000a91e:	2b01      	cmp	r3, #1
1000a920:	d101      	bne.n	1000a926 <I2C_MASTER_StartReceiveIRQ+0x1ce>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000a922:	6828      	ldr	r0, [r5, #0]
1000a924:	e00c      	b.n	1000a940 <I2C_MASTER_StartReceiveIRQ+0x1e8>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000a926:	6828      	ldr	r0, [r5, #0]
1000a928:	e00d      	b.n	1000a946 <I2C_MASTER_StartReceiveIRQ+0x1ee>
  else
  {
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is disabled
***********************************************************************************************************************/
    if (handle->config->txFIFO_size == 0)
1000a92a:	3307      	adds	r3, #7
1000a92c:	7fdb      	ldrb	r3, [r3, #31]
1000a92e:	2b00      	cmp	r3, #0
1000a930:	d110      	bne.n	1000a954 <I2C_MASTER_StartReceiveIRQ+0x1fc>
    {
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000a932:	68e3      	ldr	r3, [r4, #12]
1000a934:	3301      	adds	r3, #1
1000a936:	428b      	cmp	r3, r1
1000a938:	d105      	bne.n	1000a946 <I2C_MASTER_StartReceiveIRQ+0x1ee>
1000a93a:	9b01      	ldr	r3, [sp, #4]
1000a93c:	2b01      	cmp	r3, #1
1000a93e:	d102      	bne.n	1000a946 <I2C_MASTER_StartReceiveIRQ+0x1ee>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000a940:	f7ff f869 	bl	10009a16 <XMC_I2C_CH_MasterReceiveNack>
1000a944:	e001      	b.n	1000a94a <I2C_MASTER_StartReceiveIRQ+0x1f2>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000a946:	f7ff f849 	bl	100099dc <XMC_I2C_CH_MasterReceiveAck>
      else
      {
        I2C_MASTER_ReceiveACK(handle);
      }

      ptr_runtime->tx_data_index++;
1000a94a:	68e3      	ldr	r3, [r4, #12]
1000a94c:	3301      	adds	r3, #1
1000a94e:	60e3      	str	r3, [r4, #12]
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
    }
    status = I2C_MASTER_STATUS_SUCCESS;
1000a950:	2000      	movs	r0, #0
1000a952:	e01e      	b.n	1000a992 <I2C_MASTER_StartReceiveIRQ+0x23a>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000a954:	30fc      	adds	r0, #252	; 0xfc
1000a956:	68c2      	ldr	r2, [r0, #12]
1000a958:	4b0e      	ldr	r3, [pc, #56]	; (1000a994 <I2C_MASTER_StartReceiveIRQ+0x23c>)
1000a95a:	4013      	ands	r3, r2
1000a95c:	60c3      	str	r3, [r0, #12]
1000a95e:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000a960:	1c03      	adds	r3, r0, #0
1000a962:	33fc      	adds	r3, #252	; 0xfc
1000a964:	699b      	ldr	r3, [r3, #24]
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000a966:	04db      	lsls	r3, r3, #19
1000a968:	d4f2      	bmi.n	1000a950 <I2C_MASTER_StartReceiveIRQ+0x1f8>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000a96a:	68e3      	ldr	r3, [r4, #12]
1000a96c:	68a2      	ldr	r2, [r4, #8]
1000a96e:	4293      	cmp	r3, r2
1000a970:	d2ee      	bcs.n	1000a950 <I2C_MASTER_StartReceiveIRQ+0x1f8>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000a972:	68e3      	ldr	r3, [r4, #12]
1000a974:	3301      	adds	r3, #1
1000a976:	4293      	cmp	r3, r2
1000a978:	d105      	bne.n	1000a986 <I2C_MASTER_StartReceiveIRQ+0x22e>
1000a97a:	6a23      	ldr	r3, [r4, #32]
1000a97c:	2b01      	cmp	r3, #1
1000a97e:	d102      	bne.n	1000a986 <I2C_MASTER_StartReceiveIRQ+0x22e>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000a980:	f7ff f849 	bl	10009a16 <XMC_I2C_CH_MasterReceiveNack>
1000a984:	e001      	b.n	1000a98a <I2C_MASTER_StartReceiveIRQ+0x232>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000a986:	f7ff f829 	bl	100099dc <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
1000a98a:	68e3      	ldr	r3, [r4, #12]
1000a98c:	3301      	adds	r3, #1
1000a98e:	60e3      	str	r3, [r4, #12]
1000a990:	e7e5      	b.n	1000a95e <I2C_MASTER_StartReceiveIRQ+0x206>
    }
    status = I2C_MASTER_STATUS_SUCCESS;
  }
  }
  return (status);
}
1000a992:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000a994:	bfffffff 	.word	0xbfffffff

1000a998 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
1000a998:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a99a:	b087      	sub	sp, #28
1000a99c:	ac0c      	add	r4, sp, #48	; 0x30
1000a99e:	cc40      	ldmia	r4!, {r6}
1000a9a0:	9305      	str	r3, [sp, #20]
1000a9a2:	7827      	ldrb	r7, [r4, #0]
1000a9a4:	ac0e      	add	r4, sp, #56	; 0x38
1000a9a6:	7825      	ldrb	r5, [r4, #0]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000a9a8:	6844      	ldr	r4, [r0, #4]
1000a9aa:	3406      	adds	r4, #6
1000a9ac:	7fe4      	ldrb	r4, [r4, #31]
1000a9ae:	46a4      	mov	ip, r4
1000a9b0:	4663      	mov	r3, ip
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
1000a9b2:	2402      	movs	r4, #2

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000a9b4:	2b00      	cmp	r3, #0
1000a9b6:	d106      	bne.n	1000a9c6 <I2C_MASTER_Receive+0x2e>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
1000a9b8:	9600      	str	r6, [sp, #0]
1000a9ba:	9701      	str	r7, [sp, #4]
1000a9bc:	9502      	str	r5, [sp, #8]
1000a9be:	9b05      	ldr	r3, [sp, #20]
1000a9c0:	f7ff feca 	bl	1000a758 <I2C_MASTER_StartReceiveIRQ>
1000a9c4:	1c04      	adds	r4, r0, #0
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }

  return (status);
}
1000a9c6:	1c20      	adds	r0, r4, #0
1000a9c8:	b007      	add	sp, #28
1000a9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000a9cc <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
1000a9cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
1000a9ce:	6884      	ldr	r4, [r0, #8]
  fifo_lindex = 0U;

  if (ptr_runtime->rx_busy == true)
1000a9d0:	1c27      	adds	r7, r4, #0
1000a9d2:	3708      	adds	r7, #8
1000a9d4:	7ffb      	ldrb	r3, [r7, #31]
1000a9d6:	2b00      	cmp	r3, #0
1000a9d8:	d100      	bne.n	1000a9dc <I2C_MASTER_ReceiveHandler+0x10>
1000a9da:	e0ac      	b.n	1000ab36 <I2C_MASTER_ReceiveHandler+0x16a>
  {
    if (handle->config->rxFIFO_size > 0)
1000a9dc:	6843      	ldr	r3, [r0, #4]
1000a9de:	1c05      	adds	r5, r0, #0
1000a9e0:	3308      	adds	r3, #8
1000a9e2:	7fdb      	ldrb	r3, [r3, #31]
1000a9e4:	2b00      	cmp	r3, #0
1000a9e6:	d078      	beq.n	1000aada <I2C_MASTER_ReceiveHandler+0x10e>
1000a9e8:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1000a9ea:	1c03      	adds	r3, r0, #0
1000a9ec:	33fc      	adds	r3, #252	; 0xfc
1000a9ee:	699e      	ldr	r6, [r3, #24]
1000a9f0:	2308      	movs	r3, #8
1000a9f2:	401e      	ands	r6, r3
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
1000a9f4:	d115      	bne.n	1000aa22 <I2C_MASTER_ReceiveHandler+0x56>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
1000a9f6:	6862      	ldr	r2, [r4, #4]
1000a9f8:	6963      	ldr	r3, [r4, #20]
1000a9fa:	18d3      	adds	r3, r2, r3
1000a9fc:	9301      	str	r3, [sp, #4]
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
1000a9fe:	f7ff f827 	bl	10009a50 <XMC_I2C_CH_GetReceivedData>
1000aa02:	9b01      	ldr	r3, [sp, #4]
1000aa04:	7018      	strb	r0, [r3, #0]
        ptr_runtime->rx_data_index++;
1000aa06:	6963      	ldr	r3, [r4, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000aa08:	6922      	ldr	r2, [r4, #16]
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
        ptr_runtime->rx_data_index++;
1000aa0a:	3301      	adds	r3, #1
1000aa0c:	6163      	str	r3, [r4, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000aa0e:	6963      	ldr	r3, [r4, #20]
1000aa10:	4293      	cmp	r3, r2
1000aa12:	d1e9      	bne.n	1000a9e8 <I2C_MASTER_ReceiveHandler+0x1c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
1000aa14:	682b      	ldr	r3, [r5, #0]
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
1000aa16:	77fe      	strb	r6, [r7, #31]
1000aa18:	33fc      	adds	r3, #252	; 0xfc
1000aa1a:	6919      	ldr	r1, [r3, #16]
1000aa1c:	4a46      	ldr	r2, [pc, #280]	; (1000ab38 <I2C_MASTER_ReceiveHandler+0x16c>)
1000aa1e:	400a      	ands	r2, r1
1000aa20:	611a      	str	r2, [r3, #16]
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000aa22:	6962      	ldr	r2, [r4, #20]
1000aa24:	6923      	ldr	r3, [r4, #16]
1000aa26:	429a      	cmp	r2, r3
1000aa28:	d240      	bcs.n	1000aaac <I2C_MASTER_ReceiveHandler+0xe0>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
1000aa2a:	6961      	ldr	r1, [r4, #20]
1000aa2c:	1c28      	adds	r0, r5, #0
1000aa2e:	1a59      	subs	r1, r3, r1
1000aa30:	f7ff fdae 	bl	1000a590 <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
1000aa34:	6869      	ldr	r1, [r5, #4]
1000aa36:	1dcb      	adds	r3, r1, #7
1000aa38:	7fda      	ldrb	r2, [r3, #31]
1000aa3a:	2a00      	cmp	r2, #0
1000aa3c:	d028      	beq.n	1000aa90 <I2C_MASTER_ReceiveHandler+0xc4>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
1000aa3e:	2301      	movs	r3, #1
1000aa40:	1c18      	adds	r0, r3, #0
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
1000aa42:	3108      	adds	r1, #8
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
1000aa44:	7fc9      	ldrb	r1, [r1, #31]
1000aa46:	4090      	lsls	r0, r2
1000aa48:	408b      	lsls	r3, r1
1000aa4a:	4283      	cmp	r3, r0
1000aa4c:	d900      	bls.n	1000aa50 <I2C_MASTER_ReceiveHandler+0x84>
1000aa4e:	1c03      	adds	r3, r0, #0
1000aa50:	2700      	movs	r7, #0
1000aa52:	b2de      	uxtb	r6, r3
1000aa54:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000aa56:	1c03      	adds	r3, r0, #0
1000aa58:	33fc      	adds	r3, #252	; 0xfc
1000aa5a:	699b      	ldr	r3, [r3, #24]
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000aa5c:	04db      	lsls	r3, r3, #19
1000aa5e:	d425      	bmi.n	1000aaac <I2C_MASTER_ReceiveHandler+0xe0>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000aa60:	68e3      	ldr	r3, [r4, #12]
1000aa62:	68a2      	ldr	r2, [r4, #8]
1000aa64:	4293      	cmp	r3, r2
1000aa66:	d221      	bcs.n	1000aaac <I2C_MASTER_ReceiveHandler+0xe0>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000aa68:	68e3      	ldr	r3, [r4, #12]
1000aa6a:	3301      	adds	r3, #1
1000aa6c:	4293      	cmp	r3, r2
1000aa6e:	d105      	bne.n	1000aa7c <I2C_MASTER_ReceiveHandler+0xb0>
1000aa70:	6a23      	ldr	r3, [r4, #32]
1000aa72:	2b01      	cmp	r3, #1
1000aa74:	d102      	bne.n	1000aa7c <I2C_MASTER_ReceiveHandler+0xb0>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000aa76:	f7fe ffce 	bl	10009a16 <XMC_I2C_CH_MasterReceiveNack>
1000aa7a:	e001      	b.n	1000aa80 <I2C_MASTER_ReceiveHandler+0xb4>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000aa7c:	f7fe ffae 	bl	100099dc <XMC_I2C_CH_MasterReceiveAck>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
1000aa80:	68e3      	ldr	r3, [r4, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
1000aa82:	3701      	adds	r7, #1
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
1000aa84:	3301      	adds	r3, #1

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
1000aa86:	b2ff      	uxtb	r7, r7
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
1000aa88:	60e3      	str	r3, [r4, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
1000aa8a:	42b7      	cmp	r7, r6
1000aa8c:	d3e2      	bcc.n	1000aa54 <I2C_MASTER_ReceiveHandler+0x88>
1000aa8e:	e00d      	b.n	1000aaac <I2C_MASTER_ReceiveHandler+0xe0>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000aa90:	68e3      	ldr	r3, [r4, #12]
1000aa92:	68a2      	ldr	r2, [r4, #8]
1000aa94:	3301      	adds	r3, #1
1000aa96:	4293      	cmp	r3, r2
1000aa98:	d149      	bne.n	1000ab2e <I2C_MASTER_ReceiveHandler+0x162>
1000aa9a:	6a23      	ldr	r3, [r4, #32]
1000aa9c:	2b01      	cmp	r3, #1
1000aa9e:	d146      	bne.n	1000ab2e <I2C_MASTER_ReceiveHandler+0x162>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000aaa0:	6828      	ldr	r0, [r5, #0]
1000aaa2:	f7fe ffb8 	bl	10009a16 <XMC_I2C_CH_MasterReceiveNack>
         else
         {
           I2C_MASTER_ReceiveACK(handle);
         }

         ptr_runtime->tx_data_index++;
1000aaa6:	68e3      	ldr	r3, [r4, #12]
1000aaa8:	3301      	adds	r3, #1
1000aaaa:	60e3      	str	r3, [r4, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000aaac:	6963      	ldr	r3, [r4, #20]
1000aaae:	6922      	ldr	r2, [r4, #16]
1000aab0:	4293      	cmp	r3, r2
1000aab2:	d140      	bne.n	1000ab36 <I2C_MASTER_ReceiveHandler+0x16a>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
1000aab4:	682b      	ldr	r3, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
1000aab6:	4a20      	ldr	r2, [pc, #128]	; (1000ab38 <I2C_MASTER_ReceiveHandler+0x16c>)
1000aab8:	1c19      	adds	r1, r3, #0
1000aaba:	31fc      	adds	r1, #252	; 0xfc
1000aabc:	6908      	ldr	r0, [r1, #16]
1000aabe:	4002      	ands	r2, r0
1000aac0:	610a      	str	r2, [r1, #16]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
1000aac2:	6c19      	ldr	r1, [r3, #64]	; 0x40
1000aac4:	4a1d      	ldr	r2, [pc, #116]	; (1000ab3c <I2C_MASTER_ReceiveHandler+0x170>)
1000aac6:	400a      	ands	r2, r1
1000aac8:	641a      	str	r2, [r3, #64]	; 0x40

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
1000aaca:	3428      	adds	r4, #40	; 0x28
1000aacc:	7823      	ldrb	r3, [r4, #0]
1000aace:	2b00      	cmp	r3, #0
1000aad0:	d031      	beq.n	1000ab36 <I2C_MASTER_ReceiveHandler+0x16a>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
1000aad2:	1c28      	adds	r0, r5, #0
1000aad4:	f7ff fdb5 	bl	1000a642 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
1000aad8:	e02d      	b.n	1000ab36 <I2C_MASTER_ReceiveHandler+0x16a>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
1000aada:	6863      	ldr	r3, [r4, #4]
1000aadc:	6966      	ldr	r6, [r4, #20]
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
1000aade:	6800      	ldr	r0, [r0, #0]
1000aae0:	199e      	adds	r6, r3, r6
1000aae2:	f7fe ffb5 	bl	10009a50 <XMC_I2C_CH_GetReceivedData>
1000aae6:	7030      	strb	r0, [r6, #0]
      ptr_runtime->rx_data_index++;
1000aae8:	6963      	ldr	r3, [r4, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000aaea:	6922      	ldr	r2, [r4, #16]
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
      ptr_runtime->rx_data_index++;
1000aaec:	3301      	adds	r3, #1
1000aaee:	6163      	str	r3, [r4, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000aaf0:	6963      	ldr	r3, [r4, #20]
1000aaf2:	4293      	cmp	r3, r2
1000aaf4:	d215      	bcs.n	1000ab22 <I2C_MASTER_ReceiveHandler+0x156>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000aaf6:	68e2      	ldr	r2, [r4, #12]
1000aaf8:	68a3      	ldr	r3, [r4, #8]
1000aafa:	429a      	cmp	r2, r3
1000aafc:	d21b      	bcs.n	1000ab36 <I2C_MASTER_ReceiveHandler+0x16a>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
1000aafe:	68e2      	ldr	r2, [r4, #12]
1000ab00:	3b01      	subs	r3, #1
1000ab02:	429a      	cmp	r2, r3
1000ab04:	d106      	bne.n	1000ab14 <I2C_MASTER_ReceiveHandler+0x148>
1000ab06:	6a23      	ldr	r3, [r4, #32]
1000ab08:	2b01      	cmp	r3, #1
1000ab0a:	d103      	bne.n	1000ab14 <I2C_MASTER_ReceiveHandler+0x148>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000ab0c:	6828      	ldr	r0, [r5, #0]
1000ab0e:	f7fe ff82 	bl	10009a16 <XMC_I2C_CH_MasterReceiveNack>
1000ab12:	e002      	b.n	1000ab1a <I2C_MASTER_ReceiveHandler+0x14e>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000ab14:	6828      	ldr	r0, [r5, #0]
1000ab16:	f7fe ff61 	bl	100099dc <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
1000ab1a:	68e3      	ldr	r3, [r4, #12]
1000ab1c:	3301      	adds	r3, #1
1000ab1e:	60e3      	str	r3, [r4, #12]
1000ab20:	e009      	b.n	1000ab36 <I2C_MASTER_ReceiveHandler+0x16a>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
1000ab22:	682a      	ldr	r2, [r5, #0]
1000ab24:	4b05      	ldr	r3, [pc, #20]	; (1000ab3c <I2C_MASTER_ReceiveHandler+0x170>)
1000ab26:	6c11      	ldr	r1, [r2, #64]	; 0x40
1000ab28:	400b      	ands	r3, r1
1000ab2a:	6413      	str	r3, [r2, #64]	; 0x40
1000ab2c:	e7cd      	b.n	1000aaca <I2C_MASTER_ReceiveHandler+0xfe>
1000ab2e:	6828      	ldr	r0, [r5, #0]
1000ab30:	f7fe ff54 	bl	100099dc <XMC_I2C_CH_MasterReceiveAck>
1000ab34:	e7b7      	b.n	1000aaa6 <I2C_MASTER_ReceiveHandler+0xda>
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
1000ab36:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ab38:	9fffffff 	.word	0x9fffffff
1000ab3c:	ffff3fff 	.word	0xffff3fff

1000ab40 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
1000ab40:	b538      	push	{r3, r4, r5, lr}
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
1000ab42:	6803      	ldr	r3, [r0, #0]
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
1000ab44:	1c04      	adds	r4, r0, #0
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
  return (channel->PSR_IICMode);
1000ab46:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
1000ab48:	6843      	ldr	r3, [r0, #4]
1000ab4a:	699b      	ldr	r3, [r3, #24]
1000ab4c:	2b00      	cmp	r3, #0
1000ab4e:	d007      	beq.n	1000ab60 <I2C_MASTER_ProtocolHandler+0x20>
1000ab50:	2120      	movs	r1, #32
1000ab52:	420d      	tst	r5, r1
1000ab54:	d004      	beq.n	1000ab60 <I2C_MASTER_ProtocolHandler+0x20>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
1000ab56:	f7ff fda8 	bl	1000a6aa <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
1000ab5a:	6863      	ldr	r3, [r4, #4]
1000ab5c:	699b      	ldr	r3, [r3, #24]
1000ab5e:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
1000ab60:	6863      	ldr	r3, [r4, #4]
1000ab62:	69db      	ldr	r3, [r3, #28]
1000ab64:	2b00      	cmp	r3, #0
1000ab66:	d008      	beq.n	1000ab7a <I2C_MASTER_ProtocolHandler+0x3a>
1000ab68:	2140      	movs	r1, #64	; 0x40
1000ab6a:	420d      	tst	r5, r1
1000ab6c:	d005      	beq.n	1000ab7a <I2C_MASTER_ProtocolHandler+0x3a>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
1000ab6e:	1c20      	adds	r0, r4, #0
1000ab70:	f7ff fd9b 	bl	1000a6aa <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
1000ab74:	6863      	ldr	r3, [r4, #4]
1000ab76:	69db      	ldr	r3, [r3, #28]
1000ab78:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
1000ab7a:	6863      	ldr	r3, [r4, #4]
1000ab7c:	6a1b      	ldr	r3, [r3, #32]
1000ab7e:	2b00      	cmp	r3, #0
1000ab80:	d00b      	beq.n	1000ab9a <I2C_MASTER_ProtocolHandler+0x5a>
1000ab82:	2381      	movs	r3, #129	; 0x81
1000ab84:	005b      	lsls	r3, r3, #1
1000ab86:	421d      	tst	r5, r3
1000ab88:	d007      	beq.n	1000ab9a <I2C_MASTER_ProtocolHandler+0x5a>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
1000ab8a:	2180      	movs	r1, #128	; 0x80
1000ab8c:	1c20      	adds	r0, r4, #0
1000ab8e:	0049      	lsls	r1, r1, #1
1000ab90:	f7ff fd8b 	bl	1000a6aa <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
1000ab94:	6863      	ldr	r3, [r4, #4]
1000ab96:	6a1b      	ldr	r3, [r3, #32]
1000ab98:	4798      	blx	r3
  }
}
1000ab9a:	bd38      	pop	{r3, r4, r5, pc}

1000ab9c <I2C_MASTER_TransmitHandler>:

  ptr_runtime = handle->runtime;
  fifo_min = 0U;

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
1000ab9c:	23b1      	movs	r3, #177	; 0xb1
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
1000ab9e:	b570      	push	{r4, r5, r6, lr}
1000aba0:	1c05      	adds	r5, r0, #0
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
1000aba2:	6884      	ldr	r4, [r0, #8]
/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
1000aba4:	6800      	ldr	r0, [r0, #0]

  ptr_runtime = handle->runtime;
  fifo_min = 0U;

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
1000aba6:	005b      	lsls	r3, r3, #1
1000aba8:	6c82      	ldr	r2, [r0, #72]	; 0x48
1000abaa:	421a      	tst	r2, r3
1000abac:	d00d      	beq.n	1000abca <I2C_MASTER_TransmitHandler+0x2e>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000abae:	1c02      	adds	r2, r0, #0
1000abb0:	32fc      	adds	r2, #252	; 0xfc
1000abb2:	68d1      	ldr	r1, [r2, #12]
1000abb4:	4b56      	ldr	r3, [pc, #344]	; (1000ad10 <I2C_MASTER_TransmitHandler+0x174>)
1000abb6:	400b      	ands	r3, r1
1000abb8:	60d3      	str	r3, [r2, #12]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
1000abba:	6c02      	ldr	r2, [r0, #64]	; 0x40
1000abbc:	4b55      	ldr	r3, [pc, #340]	; (1000ad14 <I2C_MASTER_TransmitHandler+0x178>)
1000abbe:	4013      	ands	r3, r2
1000abc0:	6403      	str	r3, [r0, #64]	; 0x40
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);

    I2C_MASTER_ProtocolHandler(handle);
1000abc2:	1c28      	adds	r0, r5, #0
1000abc4:	f7ff ffbc 	bl	1000ab40 <I2C_MASTER_ProtocolHandler>
1000abc8:	e0a0      	b.n	1000ad0c <I2C_MASTER_TransmitHandler+0x170>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
1000abca:	69a2      	ldr	r2, [r4, #24]
1000abcc:	686b      	ldr	r3, [r5, #4]
1000abce:	2a00      	cmp	r2, #0
1000abd0:	d14f      	bne.n	1000ac72 <I2C_MASTER_TransmitHandler+0xd6>
  {
    if (handle->config->txFIFO_size > 0)
1000abd2:	1dda      	adds	r2, r3, #7
1000abd4:	7fd1      	ldrb	r1, [r2, #31]
1000abd6:	68a2      	ldr	r2, [r4, #8]
1000abd8:	2900      	cmp	r1, #0
1000abda:	d03e      	beq.n	1000ac5a <I2C_MASTER_TransmitHandler+0xbe>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000abdc:	68e1      	ldr	r1, [r4, #12]
1000abde:	4291      	cmp	r1, r2
1000abe0:	d21d      	bcs.n	1000ac1e <I2C_MASTER_TransmitHandler+0x82>
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
1000abe2:	2680      	movs	r6, #128	; 0x80
1000abe4:	05f6      	lsls	r6, r6, #23
1000abe6:	1c31      	adds	r1, r6, #0
1000abe8:	f7fe ff4c 	bl	10009a84 <XMC_I2C_CH_DisableEvent>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
1000abec:	682b      	ldr	r3, [r5, #0]
1000abee:	33fc      	adds	r3, #252	; 0xfc
1000abf0:	68da      	ldr	r2, [r3, #12]
1000abf2:	4316      	orrs	r6, r2
1000abf4:	60de      	str	r6, [r3, #12]
1000abf6:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000abf8:	1c03      	adds	r3, r0, #0
1000abfa:	33fc      	adds	r3, #252	; 0xfc
1000abfc:	699b      	ldr	r3, [r3, #24]
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000abfe:	04db      	lsls	r3, r3, #19
1000ac00:	d500      	bpl.n	1000ac04 <I2C_MASTER_TransmitHandler+0x68>
1000ac02:	e083      	b.n	1000ad0c <I2C_MASTER_TransmitHandler+0x170>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000ac04:	68e3      	ldr	r3, [r4, #12]
1000ac06:	68a2      	ldr	r2, [r4, #8]
1000ac08:	4293      	cmp	r3, r2
1000ac0a:	d27f      	bcs.n	1000ad0c <I2C_MASTER_TransmitHandler+0x170>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
1000ac0c:	68e3      	ldr	r3, [r4, #12]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
1000ac0e:	6822      	ldr	r2, [r4, #0]
1000ac10:	5cd1      	ldrb	r1, [r2, r3]
1000ac12:	f7fe feca 	bl	100099aa <XMC_I2C_CH_MasterTransmit>
            ptr_runtime->tx_data_index++;
1000ac16:	68e3      	ldr	r3, [r4, #12]
1000ac18:	3301      	adds	r3, #1
1000ac1a:	60e3      	str	r3, [r4, #12]
1000ac1c:	e7eb      	b.n	1000abf6 <I2C_MASTER_TransmitHandler+0x5a>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000ac1e:	30fc      	adds	r0, #252	; 0xfc
1000ac20:	68c1      	ldr	r1, [r0, #12]
1000ac22:	4a3b      	ldr	r2, [pc, #236]	; (1000ad10 <I2C_MASTER_TransmitHandler+0x174>)
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
1000ac24:	3328      	adds	r3, #40	; 0x28
1000ac26:	400a      	ands	r2, r1
1000ac28:	60c2      	str	r2, [r0, #12]
1000ac2a:	781a      	ldrb	r2, [r3, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1000ac2c:	b253      	sxtb	r3, r2
1000ac2e:	2b00      	cmp	r3, #0
1000ac30:	db08      	blt.n	1000ac44 <I2C_MASTER_TransmitHandler+0xa8>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000ac32:	231f      	movs	r3, #31
1000ac34:	4013      	ands	r3, r2
1000ac36:	2201      	movs	r2, #1
1000ac38:	409a      	lsls	r2, r3
1000ac3a:	1c13      	adds	r3, r2, #0
1000ac3c:	22c0      	movs	r2, #192	; 0xc0
1000ac3e:	4936      	ldr	r1, [pc, #216]	; (1000ad18 <I2C_MASTER_TransmitHandler+0x17c>)
1000ac40:	0052      	lsls	r2, r2, #1
1000ac42:	508b      	str	r3, [r1, r2]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1000ac44:	6983      	ldr	r3, [r0, #24]

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
1000ac46:	051b      	lsls	r3, r3, #20
1000ac48:	d5fc      	bpl.n	1000ac44 <I2C_MASTER_TransmitHandler+0xa8>

          if (ptr_runtime->bus_acquired == true)
1000ac4a:	3428      	adds	r4, #40	; 0x28
1000ac4c:	7823      	ldrb	r3, [r4, #0]
1000ac4e:	2b00      	cmp	r3, #0
1000ac50:	d05c      	beq.n	1000ad0c <I2C_MASTER_TransmitHandler+0x170>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
1000ac52:	1c28      	adds	r0, r5, #0
1000ac54:	f7ff fcb7 	bl	1000a5c6 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
1000ac58:	e058      	b.n	1000ad0c <I2C_MASTER_TransmitHandler+0x170>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000ac5a:	68e3      	ldr	r3, [r4, #12]
1000ac5c:	4293      	cmp	r3, r2
1000ac5e:	d2f4      	bcs.n	1000ac4a <I2C_MASTER_TransmitHandler+0xae>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
1000ac60:	68e3      	ldr	r3, [r4, #12]
1000ac62:	6822      	ldr	r2, [r4, #0]
1000ac64:	5cd1      	ldrb	r1, [r2, r3]
1000ac66:	f7fe fea0 	bl	100099aa <XMC_I2C_CH_MasterTransmit>
        ptr_runtime->tx_data_index++;
1000ac6a:	68e3      	ldr	r3, [r4, #12]
1000ac6c:	3301      	adds	r3, #1
1000ac6e:	60e3      	str	r3, [r4, #12]
1000ac70:	e04c      	b.n	1000ad0c <I2C_MASTER_TransmitHandler+0x170>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
1000ac72:	1dda      	adds	r2, r3, #7
1000ac74:	7fd2      	ldrb	r2, [r2, #31]
1000ac76:	2a00      	cmp	r2, #0
1000ac78:	d02e      	beq.n	1000acd8 <I2C_MASTER_TransmitHandler+0x13c>
    {
      if ((handle->config->rxFIFO_size > 0))
1000ac7a:	3308      	adds	r3, #8
1000ac7c:	7fd9      	ldrb	r1, [r3, #31]
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
1000ac7e:	2602      	movs	r6, #2
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
1000ac80:	2900      	cmp	r1, #0
1000ac82:	d007      	beq.n	1000ac94 <I2C_MASTER_TransmitHandler+0xf8>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
1000ac84:	2301      	movs	r3, #1
1000ac86:	1c1e      	adds	r6, r3, #0
1000ac88:	408b      	lsls	r3, r1
1000ac8a:	4096      	lsls	r6, r2
1000ac8c:	42b3      	cmp	r3, r6
1000ac8e:	d900      	bls.n	1000ac92 <I2C_MASTER_TransmitHandler+0xf6>
1000ac90:	1c33      	adds	r3, r6, #0
1000ac92:	b2de      	uxtb	r6, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000ac94:	30fc      	adds	r0, #252	; 0xfc
1000ac96:	68c2      	ldr	r2, [r0, #12]
1000ac98:	4b1d      	ldr	r3, [pc, #116]	; (1000ad10 <I2C_MASTER_TransmitHandler+0x174>)
1000ac9a:	4013      	ands	r3, r2
1000ac9c:	60c3      	str	r3, [r0, #12]
1000ac9e:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000aca0:	1c03      	adds	r3, r0, #0
1000aca2:	33fc      	adds	r3, #252	; 0xfc
1000aca4:	699b      	ldr	r3, [r3, #24]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000aca6:	04db      	lsls	r3, r3, #19
1000aca8:	d426      	bmi.n	1000acf8 <I2C_MASTER_TransmitHandler+0x15c>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000acaa:	68e3      	ldr	r3, [r4, #12]
1000acac:	68a2      	ldr	r2, [r4, #8]
1000acae:	4293      	cmp	r3, r2
1000acb0:	d222      	bcs.n	1000acf8 <I2C_MASTER_TransmitHandler+0x15c>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000acb2:	68e3      	ldr	r3, [r4, #12]
1000acb4:	3301      	adds	r3, #1
1000acb6:	4293      	cmp	r3, r2
1000acb8:	d105      	bne.n	1000acc6 <I2C_MASTER_TransmitHandler+0x12a>
1000acba:	6a23      	ldr	r3, [r4, #32]
1000acbc:	2b01      	cmp	r3, #1
1000acbe:	d102      	bne.n	1000acc6 <I2C_MASTER_TransmitHandler+0x12a>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000acc0:	f7fe fea9 	bl	10009a16 <XMC_I2C_CH_MasterReceiveNack>
1000acc4:	e001      	b.n	1000acca <I2C_MASTER_TransmitHandler+0x12e>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000acc6:	f7fe fe89 	bl	100099dc <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
1000acca:	68e3      	ldr	r3, [r4, #12]
1000accc:	3301      	adds	r3, #1
1000acce:	60e3      	str	r3, [r4, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
1000acd0:	68e3      	ldr	r3, [r4, #12]
1000acd2:	42b3      	cmp	r3, r6
1000acd4:	d3e3      	bcc.n	1000ac9e <I2C_MASTER_TransmitHandler+0x102>
1000acd6:	e00f      	b.n	1000acf8 <I2C_MASTER_TransmitHandler+0x15c>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000acd8:	68e3      	ldr	r3, [r4, #12]
1000acda:	68a2      	ldr	r2, [r4, #8]
1000acdc:	3301      	adds	r3, #1
1000acde:	4293      	cmp	r3, r2
1000ace0:	d105      	bne.n	1000acee <I2C_MASTER_TransmitHandler+0x152>
1000ace2:	6a23      	ldr	r3, [r4, #32]
1000ace4:	2b01      	cmp	r3, #1
1000ace6:	d102      	bne.n	1000acee <I2C_MASTER_TransmitHandler+0x152>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000ace8:	f7fe fe95 	bl	10009a16 <XMC_I2C_CH_MasterReceiveNack>
1000acec:	e001      	b.n	1000acf2 <I2C_MASTER_TransmitHandler+0x156>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000acee:	f7fe fe75 	bl	100099dc <XMC_I2C_CH_MasterReceiveAck>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
      }
      ptr_runtime->tx_data_index++;
1000acf2:	68e3      	ldr	r3, [r4, #12]
1000acf4:	3301      	adds	r3, #1
1000acf6:	60e3      	str	r3, [r4, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
1000acf8:	68ab      	ldr	r3, [r5, #8]
1000acfa:	68da      	ldr	r2, [r3, #12]
1000acfc:	689b      	ldr	r3, [r3, #8]
1000acfe:	429a      	cmp	r2, r3
1000ad00:	d104      	bne.n	1000ad0c <I2C_MASTER_TransmitHandler+0x170>
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
1000ad02:	2180      	movs	r1, #128	; 0x80
1000ad04:	6828      	ldr	r0, [r5, #0]
1000ad06:	05c9      	lsls	r1, r1, #23
1000ad08:	f7fe febc 	bl	10009a84 <XMC_I2C_CH_DisableEvent>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
1000ad0c:	bd70      	pop	{r4, r5, r6, pc}
1000ad0e:	46c0      	nop			; (mov r8, r8)
1000ad10:	bfffffff 	.word	0xbfffffff
1000ad14:	ffffdfff 	.word	0xffffdfff
1000ad18:	e000e100 	.word	0xe000e100

1000ad1c <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
1000ad1c:	b510      	push	{r4, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000ad1e:	6842      	ldr	r2, [r0, #4]
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
1000ad20:	1c04      	adds	r4, r0, #0
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000ad22:	1d53      	adds	r3, r2, #5
1000ad24:	7fd8      	ldrb	r0, [r3, #31]
1000ad26:	2800      	cmp	r0, #0
1000ad28:	d119      	bne.n	1000ad5e <I2C_MASTER_AbortTransmit+0x42>
  return (status);
}

static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
{
  handle->runtime->tx_busy = false;
1000ad2a:	68a3      	ldr	r3, [r4, #8]
  handle->runtime->tx_data = NULL;
  handle->runtime->bus_acquired = false;

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000ad2c:	3207      	adds	r2, #7
  return (status);
}

static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
{
  handle->runtime->tx_busy = false;
1000ad2e:	1dd9      	adds	r1, r3, #7
1000ad30:	77c8      	strb	r0, [r1, #31]
  handle->runtime->tx_data = NULL;
1000ad32:	6018      	str	r0, [r3, #0]
  handle->runtime->bus_acquired = false;
1000ad34:	3328      	adds	r3, #40	; 0x28
1000ad36:	7018      	strb	r0, [r3, #0]

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000ad38:	7fd3      	ldrb	r3, [r2, #31]
1000ad3a:	2b00      	cmp	r3, #0
1000ad3c:	d008      	beq.n	1000ad50 <I2C_MASTER_AbortTransmit+0x34>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000ad3e:	6823      	ldr	r3, [r4, #0]
1000ad40:	4a0c      	ldr	r2, [pc, #48]	; (1000ad74 <I2C_MASTER_AbortTransmit+0x58>)
1000ad42:	33fc      	adds	r3, #252	; 0xfc
1000ad44:	68d9      	ldr	r1, [r3, #12]
1000ad46:	400a      	ands	r2, r1
1000ad48:	60da      	str	r2, [r3, #12]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1000ad4a:	2280      	movs	r2, #128	; 0x80
1000ad4c:	0212      	lsls	r2, r2, #8
1000ad4e:	61da      	str	r2, [r3, #28]
1000ad50:	2180      	movs	r1, #128	; 0x80
1000ad52:	6820      	ldr	r0, [r4, #0]
1000ad54:	05c9      	lsls	r1, r1, #23
1000ad56:	f7fe fe95 	bl	10009a84 <XMC_I2C_CH_DisableEvent>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
1000ad5a:	2000      	movs	r0, #0
1000ad5c:	e003      	b.n	1000ad66 <I2C_MASTER_AbortTransmit+0x4a>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
1000ad5e:	3801      	subs	r0, #1
1000ad60:	1e43      	subs	r3, r0, #1
1000ad62:	4198      	sbcs	r0, r3
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
1000ad64:	b2c0      	uxtb	r0, r0
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
1000ad66:	2102      	movs	r1, #2
1000ad68:	6823      	ldr	r3, [r4, #0]
1000ad6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000ad6c:	430a      	orrs	r2, r1
1000ad6e:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
1000ad70:	6699      	str	r1, [r3, #104]	; 0x68

  return (status);
}
1000ad72:	bd10      	pop	{r4, pc}
1000ad74:	bfffffff 	.word	0xbfffffff

1000ad78 <I2C_MASTER_AbortReceive>:
 * is active, user will not be able to place a new receive request till the active
 * reception is complete. This API can stop the progressing reception to make
 * a new receive request.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
1000ad78:	b510      	push	{r4, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000ad7a:	6841      	ldr	r1, [r0, #4]
1000ad7c:	1d8b      	adds	r3, r1, #6
1000ad7e:	7fdb      	ldrb	r3, [r3, #31]
1000ad80:	2b00      	cmp	r3, #0
1000ad82:	d11e      	bne.n	1000adc2 <I2C_MASTER_AbortReceive+0x4a>


static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
1000ad84:	6882      	ldr	r2, [r0, #8]
  handle->runtime->rx_data = NULL;

  handle->runtime->bus_acquired = false;

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000ad86:	3108      	adds	r1, #8


static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
1000ad88:	1c14      	adds	r4, r2, #0
1000ad8a:	3408      	adds	r4, #8
1000ad8c:	77e3      	strb	r3, [r4, #31]
  handle->runtime->tx_busy = false;
1000ad8e:	1dd4      	adds	r4, r2, #7
1000ad90:	77e3      	strb	r3, [r4, #31]
  handle->runtime->rx_data = NULL;
1000ad92:	6053      	str	r3, [r2, #4]

  handle->runtime->bus_acquired = false;
1000ad94:	3228      	adds	r2, #40	; 0x28
1000ad96:	7013      	strb	r3, [r2, #0]

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000ad98:	7fca      	ldrb	r2, [r1, #31]
1000ad9a:	6803      	ldr	r3, [r0, #0]
1000ad9c:	2a00      	cmp	r2, #0
1000ad9e:	d005      	beq.n	1000adac <I2C_MASTER_AbortReceive+0x34>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
1000ada0:	33fc      	adds	r3, #252	; 0xfc
1000ada2:	6919      	ldr	r1, [r3, #16]
1000ada4:	4a0a      	ldr	r2, [pc, #40]	; (1000add0 <I2C_MASTER_AbortReceive+0x58>)
1000ada6:	400a      	ands	r2, r1
1000ada8:	611a      	str	r2, [r3, #16]
1000adaa:	e003      	b.n	1000adb4 <I2C_MASTER_AbortReceive+0x3c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
1000adac:	6c19      	ldr	r1, [r3, #64]	; 0x40
1000adae:	4a09      	ldr	r2, [pc, #36]	; (1000add4 <I2C_MASTER_AbortReceive+0x5c>)
1000adb0:	400a      	ands	r2, r1
1000adb2:	641a      	str	r2, [r3, #64]	; 0x40
1000adb4:	2180      	movs	r1, #128	; 0x80
1000adb6:	6800      	ldr	r0, [r0, #0]
1000adb8:	05c9      	lsls	r1, r1, #23
1000adba:	f7fe fe63 	bl	10009a84 <XMC_I2C_CH_DisableEvent>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
1000adbe:	2000      	movs	r0, #0
1000adc0:	e004      	b.n	1000adcc <I2C_MASTER_AbortReceive+0x54>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
    I2C_MASTER_lAbortReceiveIRQ(handle);
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
1000adc2:	1e58      	subs	r0, r3, #1
1000adc4:	1c03      	adds	r3, r0, #0
1000adc6:	1e58      	subs	r0, r3, #1
1000adc8:	4183      	sbcs	r3, r0
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
1000adca:	b2d8      	uxtb	r0, r3
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }

  return (status);
}
1000adcc:	bd10      	pop	{r4, pc}
1000adce:	46c0      	nop			; (mov r8, r8)
1000add0:	9fffffff 	.word	0x9fffffff
1000add4:	ffff3fff 	.word	0xffff3fff

1000add8 <i2c_master_0_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void i2c_master_0_disable_io(void)
{
1000add8:	b508      	push	{r3, lr}
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)12, XMC_GPIO_MODE_INPUT_TRISTATE);
1000adda:	4805      	ldr	r0, [pc, #20]	; (1000adf0 <i2c_master_0_disable_io+0x18>)
1000addc:	210c      	movs	r1, #12
1000adde:	2200      	movs	r2, #0
1000ade0:	f7fe fce8 	bl	100097b4 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, XMC_GPIO_MODE_INPUT_TRISTATE);
1000ade4:	4803      	ldr	r0, [pc, #12]	; (1000adf4 <i2c_master_0_disable_io+0x1c>)
1000ade6:	2101      	movs	r1, #1
1000ade8:	2200      	movs	r2, #0
1000adea:	f7fe fce3 	bl	100097b4 <XMC_GPIO_SetMode>
}
1000adee:	bd08      	pop	{r3, pc}
1000adf0:	40040200 	.word	0x40040200
1000adf4:	40040000 	.word	0x40040000

1000adf8 <i2c_master_0_enable_io>:

static void i2c_master_0_enable_io(void)
{
1000adf8:	b508      	push	{r3, lr}
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)12, i2c_master_0_sda_pin_config.mode);
1000adfa:	4805      	ldr	r0, [pc, #20]	; (1000ae10 <i2c_master_0_enable_io+0x18>)
1000adfc:	210c      	movs	r1, #12
1000adfe:	22dc      	movs	r2, #220	; 0xdc
1000ae00:	f7fe fcd8 	bl	100097b4 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, i2c_master_0_scl_pin_config.mode);
1000ae04:	4803      	ldr	r0, [pc, #12]	; (1000ae14 <i2c_master_0_enable_io+0x1c>)
1000ae06:	2101      	movs	r1, #1
1000ae08:	22e0      	movs	r2, #224	; 0xe0
1000ae0a:	f7fe fcd3 	bl	100097b4 <XMC_GPIO_SetMode>
}
1000ae0e:	bd08      	pop	{r3, pc}
1000ae10:	40040200 	.word	0x40040200
1000ae14:	40040000 	.word	0x40040000

1000ae18 <i2c_master_0_init>:
  .config = &i2c_master_0_config,
  .runtime = &i2c_master_0_runtime,
};

void i2c_master_0_init(void)
{
1000ae18:	b538      	push	{r3, r4, r5, lr}
                               XMC_I2C_CH_EVENT_ARBITRATION_LOST | 
                               XMC_I2C_CH_EVENT_ERROR); 

  const uint32_t tx_fifo_events = (uint32_t)(0);
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
  XMC_I2C_CH_Init(XMC_I2C1_CH1, &i2c_master_0_channel_config);
1000ae1a:	4c3b      	ldr	r4, [pc, #236]	; (1000af08 <i2c_master_0_init+0xf0>)
1000ae1c:	493b      	ldr	r1, [pc, #236]	; (1000af0c <i2c_master_0_init+0xf4>)
1000ae1e:	1c20      	adds	r0, r4, #0
1000ae20:	f7fe fd46 	bl	100098b0 <XMC_I2C_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000ae24:	2307      	movs	r3, #7
1000ae26:	2102      	movs	r1, #2
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
1000ae28:	1c25      	adds	r5, r4, #0
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000ae2a:	69e2      	ldr	r2, [r4, #28]

  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX4, 0U);
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C1_CH1,
1000ae2c:	1c20      	adds	r0, r4, #0
1000ae2e:	439a      	bics	r2, r3
1000ae30:	430a      	orrs	r2, r1
1000ae32:	61e2      	str	r2, [r4, #28]
1000ae34:	6a22      	ldr	r2, [r4, #32]
1000ae36:	310e      	adds	r1, #14
1000ae38:	439a      	bics	r2, r3
1000ae3a:	6222      	str	r2, [r4, #32]
1000ae3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
1000ae3e:	35fc      	adds	r5, #252	; 0xfc
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000ae40:	439a      	bics	r2, r3
1000ae42:	62a2      	str	r2, [r4, #40]	; 0x28
1000ae44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1000ae46:	439a      	bics	r2, r3
1000ae48:	62e2      	str	r2, [r4, #44]	; 0x2c
1000ae4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
1000ae4c:	439a      	bics	r2, r3
1000ae4e:	6322      	str	r2, [r4, #48]	; 0x30
1000ae50:	2301      	movs	r3, #1
1000ae52:	2204      	movs	r2, #4
1000ae54:	f7fe ff6a 	bl	10009d2c <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
1000ae58:	1c20      	adds	r0, r4, #0
1000ae5a:	2110      	movs	r1, #16
1000ae5c:	2203      	movs	r2, #3
1000ae5e:	f7fe ffae 	bl	10009dbe <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
1000ae62:	68eb      	ldr	r3, [r5, #12]
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)3));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C1_CH1, tx_fifo_events);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C1_CH1,
1000ae64:	1c20      	adds	r0, r4, #0
1000ae66:	60eb      	str	r3, [r5, #12]
1000ae68:	2100      	movs	r1, #0
1000ae6a:	230f      	movs	r3, #15
1000ae6c:	2204      	movs	r2, #4
1000ae6e:	f7fe ff71 	bl	10009d54 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
1000ae72:	1c20      	adds	r0, r4, #0
1000ae74:	2110      	movs	r1, #16
1000ae76:	2201      	movs	r2, #1
1000ae78:	f7fe ffab 	bl	10009dd2 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x1));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
1000ae7c:	1c20      	adds	r0, r4, #0
1000ae7e:	2113      	movs	r1, #19
1000ae80:	2201      	movs	r2, #1
1000ae82:	f7fe ffa6 	bl	10009dd2 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
1000ae86:	22c0      	movs	r2, #192	; 0xc0
1000ae88:	692b      	ldr	r3, [r5, #16]
1000ae8a:	05d2      	lsls	r2, r2, #23
1000ae8c:	4313      	orrs	r3, r2
1000ae8e:	612b      	str	r3, [r5, #16]
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x1));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C1_CH1, rx_fifo_events);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C1_CH1,
1000ae90:	1c20      	adds	r0, r4, #0
1000ae92:	2201      	movs	r2, #1
1000ae94:	2110      	movs	r1, #16
1000ae96:	f7fe ff89 	bl	10009dac <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)1));
  XMC_I2C_CH_EnableEvent(XMC_I2C1_CH1, enabled_protocol_events);
1000ae9a:	21b0      	movs	r1, #176	; 0xb0
1000ae9c:	1c20      	adds	r0, r4, #0
1000ae9e:	0449      	lsls	r1, r1, #17
1000aea0:	f7fe fde2 	bl	10009a68 <XMC_I2C_CH_EnableEvent>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
1000aea4:	220f      	movs	r2, #15
1000aea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  XMC_I2C_CH_Start(XMC_I2C1_CH1);

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)12, &i2c_master_0_sda_pin_config);
1000aea8:	4819      	ldr	r0, [pc, #100]	; (1000af10 <i2c_master_0_init+0xf8>)
1000aeaa:	4393      	bics	r3, r2
1000aeac:	3a0b      	subs	r2, #11
1000aeae:	4313      	orrs	r3, r2
1000aeb0:	6423      	str	r3, [r4, #64]	; 0x40
1000aeb2:	210c      	movs	r1, #12
1000aeb4:	4a17      	ldr	r2, [pc, #92]	; (1000af14 <i2c_master_0_init+0xfc>)
1000aeb6:	f7fe facd 	bl	10009454 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, &i2c_master_0_scl_pin_config);
1000aeba:	4817      	ldr	r0, [pc, #92]	; (1000af18 <i2c_master_0_init+0x100>)
1000aebc:	2101      	movs	r1, #1
1000aebe:	4a17      	ldr	r2, [pc, #92]	; (1000af1c <i2c_master_0_init+0x104>)
1000aec0:	f7fe fac8 	bl	10009454 <XMC_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000aec4:	22c3      	movs	r2, #195	; 0xc3
1000aec6:	21ff      	movs	r1, #255	; 0xff
1000aec8:	4c15      	ldr	r4, [pc, #84]	; (1000af20 <i2c_master_0_init+0x108>)
1000aeca:	0092      	lsls	r2, r2, #2
1000aecc:	58a3      	ldr	r3, [r4, r2]

  NVIC_SetPriority((IRQn_Type)12, 3);
  XMC_SCU_SetInterruptControl(12, XMC_SCU_IRQCTRL_USIC1_SR3_IRQ12);
1000aece:	200c      	movs	r0, #12
1000aed0:	438b      	bics	r3, r1
1000aed2:	393f      	subs	r1, #63	; 0x3f
1000aed4:	430b      	orrs	r3, r1
1000aed6:	50a3      	str	r3, [r4, r2]
1000aed8:	4912      	ldr	r1, [pc, #72]	; (1000af24 <i2c_master_0_init+0x10c>)
1000aeda:	f7fe fbf1 	bl	100096c0 <XMC_SCU_SetInterruptControl>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000aede:	2380      	movs	r3, #128	; 0x80
1000aee0:	015b      	lsls	r3, r3, #5
1000aee2:	6023      	str	r3, [r4, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000aee4:	22c2      	movs	r2, #194	; 0xc2
1000aee6:	0092      	lsls	r2, r2, #2
1000aee8:	58a1      	ldr	r1, [r4, r2]
1000aeea:	4b0f      	ldr	r3, [pc, #60]	; (1000af28 <i2c_master_0_init+0x110>)
  NVIC_EnableIRQ((IRQn_Type)12);
  NVIC_SetPriority((IRQn_Type)10, 3);
  XMC_SCU_SetInterruptControl(10, XMC_SCU_IRQCTRL_USIC1_SR1_IRQ10);
1000aeec:	200a      	movs	r0, #10
1000aeee:	400b      	ands	r3, r1
1000aef0:	21c0      	movs	r1, #192	; 0xc0
1000aef2:	0409      	lsls	r1, r1, #16
1000aef4:	430b      	orrs	r3, r1
1000aef6:	50a3      	str	r3, [r4, r2]
1000aef8:	490c      	ldr	r1, [pc, #48]	; (1000af2c <i2c_master_0_init+0x114>)
1000aefa:	f7fe fbe1 	bl	100096c0 <XMC_SCU_SetInterruptControl>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000aefe:	2380      	movs	r3, #128	; 0x80
1000af00:	00db      	lsls	r3, r3, #3
1000af02:	6023      	str	r3, [r4, #0]
  NVIC_EnableIRQ((IRQn_Type)10);}
1000af04:	bd38      	pop	{r3, r4, r5, pc}
1000af06:	46c0      	nop			; (mov r8, r8)
1000af08:	48004200 	.word	0x48004200
1000af0c:	1000f490 	.word	0x1000f490
1000af10:	40040200 	.word	0x40040200
1000af14:	1000f454 	.word	0x1000f454
1000af18:	40040000 	.word	0x40040000
1000af1c:	1000f45c 	.word	0x1000f45c
1000af20:	e000e100 	.word	0xe000e100
1000af24:	00000c01 	.word	0x00000c01
1000af28:	ff00ffff 	.word	0xff00ffff
1000af2c:	00000a01 	.word	0x00000a01

1000af30 <IRQ12_Handler>:
/*Transmit ISR*/
void i2c_master_0_TX_HANDLER()
{
1000af30:	b508      	push	{r3, lr}
  I2C_MASTER_TransmitHandler(&i2c_master_0);
1000af32:	4802      	ldr	r0, [pc, #8]	; (1000af3c <IRQ12_Handler+0xc>)
1000af34:	f7ff fe32 	bl	1000ab9c <I2C_MASTER_TransmitHandler>
}
1000af38:	bd08      	pop	{r3, pc}
1000af3a:	46c0      	nop			; (mov r8, r8)
1000af3c:	200026fc 	.word	0x200026fc

1000af40 <IRQ10_Handler>:
/*Receive ISR*/
void i2c_master_0_RX_HANDLER()
{
1000af40:	b508      	push	{r3, lr}
  I2C_MASTER_ReceiveHandler(&i2c_master_0);
1000af42:	4802      	ldr	r0, [pc, #8]	; (1000af4c <IRQ10_Handler+0xc>)
1000af44:	f7ff fd42 	bl	1000a9cc <I2C_MASTER_ReceiveHandler>
}
1000af48:	bd08      	pop	{r3, pc}
1000af4a:	46c0      	nop			; (mov r8, r8)
1000af4c:	200026fc 	.word	0x200026fc

1000af50 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
1000af50:	b510      	push	{r4, lr}
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
1000af52:	7b43      	ldrb	r3, [r0, #13]
1000af54:	2b00      	cmp	r3, #0
1000af56:	d10a      	bne.n	1000af6e <GLOBAL_CCU4_Init+0x1e>
1000af58:	1c04      	adds	r4, r0, #0
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
1000af5a:	7b01      	ldrb	r1, [r0, #12]
1000af5c:	6880      	ldr	r0, [r0, #8]
1000af5e:	f7fe fbdd 	bl	1000971c <XMC_CCU4_Init>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
1000af62:	2280      	movs	r2, #128	; 0x80
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
1000af64:	68a3      	ldr	r3, [r4, #8]
1000af66:	0052      	lsls	r2, r2, #1
1000af68:	60da      	str	r2, [r3, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
1000af6a:	2301      	movs	r3, #1
1000af6c:	7363      	strb	r3, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
1000af6e:	2000      	movs	r0, #0
1000af70:	bd10      	pop	{r4, pc}

1000af72 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
1000af72:	b510      	push	{r4, lr}
1000af74:	1c04      	adds	r4, r0, #0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
1000af76:	7b01      	ldrb	r1, [r0, #12]
1000af78:	1d02      	adds	r2, r0, #4
1000af7a:	6800      	ldr	r0, [r0, #0]
1000af7c:	f7fe fa6a 	bl	10009454 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
1000af80:	6820      	ldr	r0, [r4, #0]
1000af82:	7b21      	ldrb	r1, [r4, #12]
1000af84:	7b62      	ldrb	r2, [r4, #13]
1000af86:	f7fe fc27 	bl	100097d8 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
1000af8a:	2000      	movs	r0, #0
1000af8c:	bd10      	pop	{r4, pc}
	...

1000af90 <SystemCoreSetup>:
 
void SystemCoreSetup(void)
{
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
1000af90:	2101      	movs	r1, #1
1000af92:	4a02      	ldr	r2, [pc, #8]	; (1000af9c <SystemCoreSetup+0xc>)
1000af94:	6e93      	ldr	r3, [r2, #104]	; 0x68
1000af96:	438b      	bics	r3, r1
1000af98:	6693      	str	r3, [r2, #104]	; 0x68
#endif
}
1000af9a:	4770      	bx	lr
1000af9c:	40010000 	.word	0x40010000

1000afa0 <CLOCK_XMC1_Init>:
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
1000afa0:	7803      	ldrb	r3, [r0, #0]
1000afa2:	2b00      	cmp	r3, #0
1000afa4:	d101      	bne.n	1000afaa <CLOCK_XMC1_Init+0xa>
#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
    {
      handle->init_status = true;
1000afa6:	3301      	adds	r3, #1
1000afa8:	7003      	strb	r3, [r0, #0]
    }
  }
  return (status);
}
1000afaa:	2000      	movs	r0, #0
1000afac:	4770      	bx	lr
	...

1000afb0 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
1000afb0:	b530      	push	{r4, r5, lr}
1000afb2:	b085      	sub	sp, #20
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
1000afb4:	466a      	mov	r2, sp
1000afb6:	4b05      	ldr	r3, [pc, #20]	; (1000afcc <SystemCoreClockSetup+0x1c>)
1000afb8:	4668      	mov	r0, sp
1000afba:	cb32      	ldmia	r3!, {r1, r4, r5}
1000afbc:	c232      	stmia	r2!, {r1, r4, r5}
1000afbe:	681b      	ldr	r3, [r3, #0]
1000afc0:	6013      	str	r3, [r2, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
1000afc2:	f7fe fb01 	bl	100095c8 <XMC_SCU_CLOCK_Init>
}
1000afc6:	b005      	add	sp, #20
1000afc8:	bd30      	pop	{r4, r5, pc}
1000afca:	46c0      	nop			; (mov r8, r8)
1000afcc:	1000f4c8 	.word	0x1000f4c8

1000afd0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
1000afd0:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
1000afd2:	481b      	ldr	r0, [pc, #108]	; (1000b040 <DAVE_Init+0x70>)
1000afd4:	f7ff ffe4 	bl	1000afa0 <CLOCK_XMC1_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
1000afd8:	2800      	cmp	r0, #0
1000afda:	d12f      	bne.n	1000b03c <DAVE_Init+0x6c>
  {
	 /**  Initialization of UART APP instance cunit_logger */
	 init_status = (DAVE_STATUS_t)UART_Init(&cunit_logger); 
1000afdc:	4819      	ldr	r0, [pc, #100]	; (1000b044 <DAVE_Init+0x74>)
1000afde:	f7fe ff75 	bl	10009ecc <UART_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000afe2:	2800      	cmp	r0, #0
1000afe4:	d12a      	bne.n	1000b03c <DAVE_Init+0x6c>
  {
	 /**  Initialization of INTERRUPT APP instance scheduler_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&scheduler_timer_intr); 
1000afe6:	4818      	ldr	r0, [pc, #96]	; (1000b048 <DAVE_Init+0x78>)
1000afe8:	f7ff fa7e 	bl	1000a4e8 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000afec:	2800      	cmp	r0, #0
1000afee:	d125      	bne.n	1000b03c <DAVE_Init+0x6c>
  {
	 /**  Initialization of TIMER APP instance scheduler_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&scheduler_timer); 
1000aff0:	4816      	ldr	r0, [pc, #88]	; (1000b04c <DAVE_Init+0x7c>)
1000aff2:	f7ff fa69 	bl	1000a4c8 <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000aff6:	2800      	cmp	r0, #0
1000aff8:	d120      	bne.n	1000b03c <DAVE_Init+0x6c>
  {
	 /**  Initialization of INTERRUPT APP instance tick_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&tick_timer_intr); 
1000affa:	4815      	ldr	r0, [pc, #84]	; (1000b050 <DAVE_Init+0x80>)
1000affc:	f7ff fa74 	bl	1000a4e8 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b000:	2800      	cmp	r0, #0
1000b002:	d11b      	bne.n	1000b03c <DAVE_Init+0x6c>
  {
	 /**  Initialization of TIMER APP instance tick_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&tick_timer); 
1000b004:	4813      	ldr	r0, [pc, #76]	; (1000b054 <DAVE_Init+0x84>)
1000b006:	f7ff fa5f 	bl	1000a4c8 <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b00a:	2800      	cmp	r0, #0
1000b00c:	d116      	bne.n	1000b03c <DAVE_Init+0x6c>
  {
	 /**  Initialization of DIGITAL_IO APP instance reset_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&reset_pin); 
1000b00e:	4812      	ldr	r0, [pc, #72]	; (1000b058 <DAVE_Init+0x88>)
1000b010:	f7ff ffaf 	bl	1000af72 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b014:	2800      	cmp	r0, #0
1000b016:	d111      	bne.n	1000b03c <DAVE_Init+0x6c>
  {
	 /**  Initialization of DIGITAL_IO APP instance vdd_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&vdd_pin); 
1000b018:	4810      	ldr	r0, [pc, #64]	; (1000b05c <DAVE_Init+0x8c>)
1000b01a:	f7ff ffaa 	bl	1000af72 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b01e:	2800      	cmp	r0, #0
1000b020:	d10c      	bne.n	1000b03c <DAVE_Init+0x6c>
  {
	 /**  Initialization of DIGITAL_IO APP instance io_test */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&io_test); 
1000b022:	480f      	ldr	r0, [pc, #60]	; (1000b060 <DAVE_Init+0x90>)
1000b024:	f7ff ffa5 	bl	1000af72 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b028:	2800      	cmp	r0, #0
1000b02a:	d107      	bne.n	1000b03c <DAVE_Init+0x6c>
  {
	 /**  Initialization of UART APP instance esWiFi_com */
	 init_status = (DAVE_STATUS_t)UART_Init(&esWiFi_com); 
1000b02c:	480d      	ldr	r0, [pc, #52]	; (1000b064 <DAVE_Init+0x94>)
1000b02e:	f7fe ff4d 	bl	10009ecc <UART_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b032:	2800      	cmp	r0, #0
1000b034:	d102      	bne.n	1000b03c <DAVE_Init+0x6c>
  {
	 /**  Initialization of I2C_MASTER APP instance i2c_master_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&i2c_master_0); 
1000b036:	480c      	ldr	r0, [pc, #48]	; (1000b068 <DAVE_Init+0x98>)
1000b038:	f7ff fb2d 	bl	1000a696 <I2C_MASTER_Init>
   }  
  return init_status;
} /**  End of function DAVE_Init */
1000b03c:	bd08      	pop	{r3, pc}
1000b03e:	46c0      	nop			; (mov r8, r8)
1000b040:	20002ff8 	.word	0x20002ff8
1000b044:	20002664 	.word	0x20002664
1000b048:	1000f448 	.word	0x1000f448
1000b04c:	20002698 	.word	0x20002698
1000b050:	1000f44e 	.word	0x1000f44e
1000b054:	20002670 	.word	0x20002670
1000b058:	1000f4a8 	.word	0x1000f4a8
1000b05c:	1000f4b8 	.word	0x1000f4b8
1000b060:	1000f498 	.word	0x1000f498
1000b064:	20002658 	.word	0x20002658
1000b068:	200026fc 	.word	0x200026fc

1000b06c <main>:
 *  0 on success
 *  1 on failure
 */

int main(void)
{
1000b06c:	b508      	push	{r3, lr}
    DAVE_STATUS_t status;
    uint8_t return_value = 0;

    // Initialization of DAVE Apps
    status = DAVE_Init(); /* Initialization of DAVE APPs  */
1000b06e:	f7ff ffaf 	bl	1000afd0 <DAVE_Init>
    if (status == DAVE_STATUS_FAILURE)
1000b072:	2801      	cmp	r0, #1
1000b074:	d100      	bne.n	1000b078 <main+0xc>
        XMC_DEBUG("DAVE APPs initialization failed\n");

        while (1U)
        {

        }
1000b076:	e7fe      	b.n	1000b076 <main+0xa>
    }

    do
    {

        if(PAL_STATUS_SUCCESS != pal_logger_init(&cunit_console))
1000b078:	4806      	ldr	r0, [pc, #24]	; (1000b094 <main+0x28>)
1000b07a:	f7f6 fa4b 	bl	10001514 <pal_logger_init>
1000b07e:	2800      	cmp	r0, #0
1000b080:	d106      	bne.n	1000b090 <main+0x24>
        {
            break;
        }

        pal_os_timer_delay_in_milliseconds(100);
1000b082:	3064      	adds	r0, #100	; 0x64
1000b084:	f7f6 fb22 	bl	100016cc <pal_os_timer_delay_in_milliseconds>

        optiga_shell_wait_for_user();
1000b088:	f000 fdf2 	bl	1000bc70 <optiga_shell_wait_for_user>
        optiga_shell_begin();
1000b08c:	f000 fd6c 	bl	1000bb68 <optiga_shell_begin>

    }while (FALSE);

    return return_value;
}
1000b090:	2000      	movs	r0, #0
1000b092:	bd08      	pop	{r3, pc}
1000b094:	20001564 	.word	0x20001564

1000b098 <optiga_util_callback>:
 * Callback when optiga_util_xxxx operation is completed asynchronously
 */
static volatile optiga_lib_status_t optiga_lib_status;
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
	optiga_lib_status = return_status;
1000b098:	4b01      	ldr	r3, [pc, #4]	; (1000b0a0 <optiga_util_callback+0x8>)
1000b09a:	8019      	strh	r1, [r3, #0]
}
1000b09c:	4770      	bx	lr
1000b09e:	46c0      	nop			; (mov r8, r8)
1000b0a0:	20003000 	.word	0x20003000

1000b0a4 <optiga_shell_crypt_rsa_decrypt_and_export>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting generate RSA Key Example");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate RSA 1024 Key Pair and export the public key");
	example_optiga_crypt_rsa_generate_keypair();
}
static void optiga_shell_crypt_rsa_decrypt_and_export()
{
1000b0a4:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Decrypt and Export Data with RSA Key Example");
1000b0a6:	4d0f      	ldr	r5, [pc, #60]	; (1000b0e4 <optiga_shell_crypt_rsa_decrypt_and_export+0x40>)
1000b0a8:	4c0f      	ldr	r4, [pc, #60]	; (1000b0e8 <optiga_shell_crypt_rsa_decrypt_and_export+0x44>)
1000b0aa:	1c29      	adds	r1, r5, #0
1000b0ac:	1c22      	adds	r2, r4, #0
1000b0ae:	480f      	ldr	r0, [pc, #60]	; (1000b0ec <optiga_shell_crypt_rsa_decrypt_and_export+0x48>)
1000b0b0:	f7f9 f94e 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate RSA 1024 Key Pair and export the public key");
1000b0b4:	1c29      	adds	r1, r5, #0
1000b0b6:	1c22      	adds	r2, r4, #0
1000b0b8:	480d      	ldr	r0, [pc, #52]	; (1000b0f0 <optiga_shell_crypt_rsa_decrypt_and_export+0x4c>)
1000b0ba:	f7f9 f949 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Encrypt a message with RSAES PKCS#1 Ver1.5 Scheme");
1000b0be:	1c29      	adds	r1, r5, #0
1000b0c0:	1c22      	adds	r2, r4, #0
1000b0c2:	480c      	ldr	r0, [pc, #48]	; (1000b0f4 <optiga_shell_crypt_rsa_decrypt_and_export+0x50>)
1000b0c4:	f7f9 f944 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
1000b0c8:	1c29      	adds	r1, r5, #0
1000b0ca:	1c22      	adds	r2, r4, #0
1000b0cc:	480a      	ldr	r0, [pc, #40]	; (1000b0f8 <optiga_shell_crypt_rsa_decrypt_and_export+0x54>)
1000b0ce:	f7f9 f93f 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Decrypt the message with RSAES PKCS#1 Ver1.5 Scheme and export it");
1000b0d2:	1c29      	adds	r1, r5, #0
1000b0d4:	4809      	ldr	r0, [pc, #36]	; (1000b0fc <optiga_shell_crypt_rsa_decrypt_and_export+0x58>)
1000b0d6:	1c22      	adds	r2, r4, #0
1000b0d8:	f7f9 f93a 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_rsa_decrypt_and_export();
1000b0dc:	f7fd f94e 	bl	1000837c <example_optiga_crypt_rsa_decrypt_and_export>
}
1000b0e0:	bd38      	pop	{r3, r4, r5, pc}
1000b0e2:	46c0      	nop			; (mov r8, r8)
1000b0e4:	1000f50e 	.word	0x1000f50e
1000b0e8:	1000f521 	.word	0x1000f521
1000b0ec:	1000f4d8 	.word	0x1000f4d8
1000b0f0:	1000f527 	.word	0x1000f527
1000b0f4:	1000f564 	.word	0x1000f564
1000b0f8:	1000f59e 	.word	0x1000f59e
1000b0fc:	1000f5c6 	.word	0x1000f5c6

1000b100 <optiga_shell_crypt_rsa_decrypt_and_store>:
static void optiga_shell_crypt_rsa_decrypt_and_store()
{
1000b100:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Decrypt and Store Data on the chip with RSA Key Example");
1000b102:	4d11      	ldr	r5, [pc, #68]	; (1000b148 <optiga_shell_crypt_rsa_decrypt_and_store+0x48>)
1000b104:	4c11      	ldr	r4, [pc, #68]	; (1000b14c <optiga_shell_crypt_rsa_decrypt_and_store+0x4c>)
1000b106:	1c29      	adds	r1, r5, #0
1000b108:	1c22      	adds	r2, r4, #0
1000b10a:	4811      	ldr	r0, [pc, #68]	; (1000b150 <optiga_shell_crypt_rsa_decrypt_and_store+0x50>)
1000b10c:	f7f9 f920 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate RSA 1024 Key Pair and export the public key");
1000b110:	1c29      	adds	r1, r5, #0
1000b112:	1c22      	adds	r2, r4, #0
1000b114:	480f      	ldr	r0, [pc, #60]	; (1000b154 <optiga_shell_crypt_rsa_decrypt_and_store+0x54>)
1000b116:	f7f9 f91b 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Generate 70 bytes RSA Pre master secret which is stored in acquired session OID");
1000b11a:	1c29      	adds	r1, r5, #0
1000b11c:	1c22      	adds	r2, r4, #0
1000b11e:	480e      	ldr	r0, [pc, #56]	; (1000b158 <optiga_shell_crypt_rsa_decrypt_and_store+0x58>)
1000b120:	f7f9 f916 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
1000b124:	1c29      	adds	r1, r5, #0
1000b126:	1c22      	adds	r2, r4, #0
1000b128:	480c      	ldr	r0, [pc, #48]	; (1000b15c <optiga_shell_crypt_rsa_decrypt_and_store+0x5c>)
1000b12a:	f7f9 f911 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Encrypt Session Data with RSA Public Key");
1000b12e:	1c29      	adds	r1, r5, #0
1000b130:	1c22      	adds	r2, r4, #0
1000b132:	480b      	ldr	r0, [pc, #44]	; (1000b160 <optiga_shell_crypt_rsa_decrypt_and_store+0x60>)
1000b134:	f7f9 f90c 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("5 Step: Decrypt the message with RSAES PKCS#1 Ver1.5 Scheme and store it on chip");
1000b138:	1c29      	adds	r1, r5, #0
1000b13a:	480a      	ldr	r0, [pc, #40]	; (1000b164 <optiga_shell_crypt_rsa_decrypt_and_store+0x64>)
1000b13c:	1c22      	adds	r2, r4, #0
1000b13e:	f7f9 f907 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_rsa_decrypt_and_store();
1000b142:	f7fd f9c3 	bl	100084cc <example_optiga_crypt_rsa_decrypt_and_store>
}
1000b146:	bd38      	pop	{r3, r4, r5, pc}
1000b148:	1000f50e 	.word	0x1000f50e
1000b14c:	1000f521 	.word	0x1000f521
1000b150:	1000f610 	.word	0x1000f610
1000b154:	1000f527 	.word	0x1000f527
1000b158:	1000f651 	.word	0x1000f651
1000b15c:	1000f59e 	.word	0x1000f59e
1000b160:	1000f6a9 	.word	0x1000f6a9
1000b164:	1000f6da 	.word	0x1000f6da

1000b168 <optiga_shell_crypt_rsa_encrypt_session>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting Encrypt Data with RSA Key Example");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Encrypt a message with RSAES PKCS#1 Ver1.5 Scheme");
	example_optiga_crypt_rsa_encrypt_message();
}
static void optiga_shell_crypt_rsa_encrypt_session()
{
1000b168:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Encrypt Data in Session Object on chip with RSA Key Example");
1000b16a:	4d07      	ldr	r5, [pc, #28]	; (1000b188 <optiga_shell_crypt_rsa_encrypt_session+0x20>)
1000b16c:	4c07      	ldr	r4, [pc, #28]	; (1000b18c <optiga_shell_crypt_rsa_encrypt_session+0x24>)
1000b16e:	1c29      	adds	r1, r5, #0
1000b170:	1c22      	adds	r2, r4, #0
1000b172:	4807      	ldr	r0, [pc, #28]	; (1000b190 <optiga_shell_crypt_rsa_encrypt_session+0x28>)
1000b174:	f7f9 f8ec 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Encrypt a message with RSAES PKCS#1 Ver1.5 Scheme stored on chip in Session Object");
1000b178:	1c29      	adds	r1, r5, #0
1000b17a:	4806      	ldr	r0, [pc, #24]	; (1000b194 <optiga_shell_crypt_rsa_encrypt_session+0x2c>)
1000b17c:	1c22      	adds	r2, r4, #0
1000b17e:	f7f9 f8e7 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_rsa_encrypt_session();
1000b182:	f7fd fac5 	bl	10008710 <example_optiga_crypt_rsa_encrypt_session>
}
1000b186:	bd38      	pop	{r3, r4, r5, pc}
1000b188:	1000f50e 	.word	0x1000f50e
1000b18c:	1000f521 	.word	0x1000f521
1000b190:	1000f72b 	.word	0x1000f72b
1000b194:	1000f770 	.word	0x1000f770

1000b198 <optiga_shell_crypt_rsa_encrypt_message>:
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Encrypt Session Data with RSA Public Key");
	OPTIGA_SHELL_LOG_MESSAGE("5 Step: Decrypt the message with RSAES PKCS#1 Ver1.5 Scheme and store it on chip");
	example_optiga_crypt_rsa_decrypt_and_store();
}
static void optiga_shell_crypt_rsa_encrypt_message()
{
1000b198:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Encrypt Data with RSA Key Example");
1000b19a:	4d07      	ldr	r5, [pc, #28]	; (1000b1b8 <optiga_shell_crypt_rsa_encrypt_message+0x20>)
1000b19c:	4c07      	ldr	r4, [pc, #28]	; (1000b1bc <optiga_shell_crypt_rsa_encrypt_message+0x24>)
1000b19e:	1c29      	adds	r1, r5, #0
1000b1a0:	1c22      	adds	r2, r4, #0
1000b1a2:	4807      	ldr	r0, [pc, #28]	; (1000b1c0 <optiga_shell_crypt_rsa_encrypt_message+0x28>)
1000b1a4:	f7f9 f8d4 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Encrypt a message with RSAES PKCS#1 Ver1.5 Scheme");
1000b1a8:	1c29      	adds	r1, r5, #0
1000b1aa:	4806      	ldr	r0, [pc, #24]	; (1000b1c4 <optiga_shell_crypt_rsa_encrypt_message+0x2c>)
1000b1ac:	1c22      	adds	r2, r4, #0
1000b1ae:	f7f9 f8cf 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_rsa_encrypt_message();
1000b1b2:	f7fd fa47 	bl	10008644 <example_optiga_crypt_rsa_encrypt_message>
}
1000b1b6:	bd38      	pop	{r3, r4, r5, pc}
1000b1b8:	1000f50e 	.word	0x1000f50e
1000b1bc:	1000f521 	.word	0x1000f521
1000b1c0:	1000f7cb 	.word	0x1000f7cb
1000b1c4:	1000f7f6 	.word	0x1000f7f6

1000b1c8 <optiga_shell_crypt_rsa_verify>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for PKCS#1 Ver1.5 SHA256 Signature scheme (RSA)");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Sign prepared Data and export the signature");
	example_optiga_crypt_rsa_sign();
}
static void optiga_shell_crypt_rsa_verify()
{
1000b1c8:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for PKCS#1 Ver1.5 SHA256 Signature scheme (RSA)");
1000b1ca:	4d07      	ldr	r5, [pc, #28]	; (1000b1e8 <optiga_shell_crypt_rsa_verify+0x20>)
1000b1cc:	4c07      	ldr	r4, [pc, #28]	; (1000b1ec <optiga_shell_crypt_rsa_verify+0x24>)
1000b1ce:	1c29      	adds	r1, r5, #0
1000b1d0:	1c22      	adds	r2, r4, #0
1000b1d2:	4807      	ldr	r0, [pc, #28]	; (1000b1f0 <optiga_shell_crypt_rsa_verify+0x28>)
1000b1d4:	f7f9 f8bc 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Verify prepared signature, with prepared public key and digest");
1000b1d8:	1c29      	adds	r1, r5, #0
1000b1da:	4806      	ldr	r0, [pc, #24]	; (1000b1f4 <optiga_shell_crypt_rsa_verify+0x2c>)
1000b1dc:	1c22      	adds	r2, r4, #0
1000b1de:	f7f9 f8b7 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_rsa_verify();
1000b1e2:	f7fd fbef 	bl	100089c4 <example_optiga_crypt_rsa_verify>
}
1000b1e6:	bd38      	pop	{r3, r4, r5, pc}
1000b1e8:	1000f50e 	.word	0x1000f50e
1000b1ec:	1000f521 	.word	0x1000f521
1000b1f0:	1000f830 	.word	0x1000f830
1000b1f4:	1000f879 	.word	0x1000f879

1000b1f8 <optiga_shell_crypt_rsa_sign>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting verification example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Verify prepared signature, with prepared public key and digest");
	example_optiga_crypt_ecdsa_verify();
}
static void optiga_shell_crypt_rsa_sign()
{
1000b1f8:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for PKCS#1 Ver1.5 SHA256 Signature scheme (RSA)");
1000b1fa:	4d07      	ldr	r5, [pc, #28]	; (1000b218 <optiga_shell_crypt_rsa_sign+0x20>)
1000b1fc:	4c07      	ldr	r4, [pc, #28]	; (1000b21c <optiga_shell_crypt_rsa_sign+0x24>)
1000b1fe:	1c29      	adds	r1, r5, #0
1000b200:	1c22      	adds	r2, r4, #0
1000b202:	4807      	ldr	r0, [pc, #28]	; (1000b220 <optiga_shell_crypt_rsa_sign+0x28>)
1000b204:	f7f9 f8a4 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Sign prepared Data and export the signature");
1000b208:	1c29      	adds	r1, r5, #0
1000b20a:	4806      	ldr	r0, [pc, #24]	; (1000b224 <optiga_shell_crypt_rsa_sign+0x2c>)
1000b20c:	1c22      	adds	r2, r4, #0
1000b20e:	f7f9 f89f 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_rsa_sign();
1000b212:	f7fd fb79 	bl	10008908 <example_optiga_crypt_rsa_sign>
}
1000b216:	bd38      	pop	{r3, r4, r5, pc}
1000b218:	1000f50e 	.word	0x1000f50e
1000b21c:	1000f521 	.word	0x1000f521
1000b220:	1000f830 	.word	0x1000f830
1000b224:	1000f8c0 	.word	0x1000f8c0

1000b228 <optiga_shell_crypt_generate_keypair>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for PKCS#1 Ver1.5 SHA256 Signature scheme (RSA)");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Verify prepared signature, with prepared public key and digest");
	example_optiga_crypt_rsa_verify();
}
static void optiga_shell_crypt_generate_keypair()
{
1000b228:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting generate RSA Key Example");
1000b22a:	4d07      	ldr	r5, [pc, #28]	; (1000b248 <optiga_shell_crypt_generate_keypair+0x20>)
1000b22c:	4c07      	ldr	r4, [pc, #28]	; (1000b24c <optiga_shell_crypt_generate_keypair+0x24>)
1000b22e:	1c29      	adds	r1, r5, #0
1000b230:	1c22      	adds	r2, r4, #0
1000b232:	4807      	ldr	r0, [pc, #28]	; (1000b250 <optiga_shell_crypt_generate_keypair+0x28>)
1000b234:	f7f9 f88c 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate RSA 1024 Key Pair and export the public key");
1000b238:	1c29      	adds	r1, r5, #0
1000b23a:	4806      	ldr	r0, [pc, #24]	; (1000b254 <optiga_shell_crypt_generate_keypair+0x2c>)
1000b23c:	1c22      	adds	r2, r4, #0
1000b23e:	f7f9 f887 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_rsa_generate_keypair();
1000b242:	f7fd fb05 	bl	10008850 <example_optiga_crypt_rsa_generate_keypair>
}
1000b246:	bd38      	pop	{r3, r4, r5, pc}
1000b248:	1000f50e 	.word	0x1000f50e
1000b24c:	1000f521 	.word	0x1000f521
1000b250:	1000f8f4 	.word	0x1000f8f4
1000b254:	1000f527 	.word	0x1000f527

1000b258 <optiga_shell_crypt_ecdh>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting generate ECC Key Example");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate ECC NIST P-256 Key Pair and export the public key");
	example_optiga_crypt_ecc_generate_keypair();
}
static void optiga_shell_crypt_ecdh()
{
1000b258:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Elliptic-curve Diffie–Hellman (ECDH) Key Agreement Protocol Example");
1000b25a:	4d0f      	ldr	r5, [pc, #60]	; (1000b298 <optiga_shell_crypt_ecdh+0x40>)
1000b25c:	4c0f      	ldr	r4, [pc, #60]	; (1000b29c <optiga_shell_crypt_ecdh+0x44>)
1000b25e:	1c29      	adds	r1, r5, #0
1000b260:	1c22      	adds	r2, r4, #0
1000b262:	480f      	ldr	r0, [pc, #60]	; (1000b2a0 <optiga_shell_crypt_ecdh+0x48>)
1000b264:	f7f9 f874 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Select Protected I2C Connection");
1000b268:	1c29      	adds	r1, r5, #0
1000b26a:	1c22      	adds	r2, r4, #0
1000b26c:	480d      	ldr	r0, [pc, #52]	; (1000b2a4 <optiga_shell_crypt_ecdh+0x4c>)
1000b26e:	f7f9 f86f 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Generate new ECC NIST P-256 Key Pair");
1000b272:	1c29      	adds	r1, r5, #0
1000b274:	1c22      	adds	r2, r4, #0
1000b276:	480c      	ldr	r0, [pc, #48]	; (1000b2a8 <optiga_shell_crypt_ecdh+0x50>)
1000b278:	f7f9 f86a 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
1000b27c:	1c29      	adds	r1, r5, #0
1000b27e:	1c22      	adds	r2, r4, #0
1000b280:	480a      	ldr	r0, [pc, #40]	; (1000b2ac <optiga_shell_crypt_ecdh+0x54>)
1000b282:	f7f9 f865 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Generate Shared Secret and export it");
1000b286:	1c29      	adds	r1, r5, #0
1000b288:	4809      	ldr	r0, [pc, #36]	; (1000b2b0 <optiga_shell_crypt_ecdh+0x58>)
1000b28a:	1c22      	adds	r2, r4, #0
1000b28c:	f7f9 f860 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_ecdh();
1000b290:	f7fc fe62 	bl	10007f58 <example_optiga_crypt_ecdh>
}
1000b294:	bd38      	pop	{r3, r4, r5, pc}
1000b296:	46c0      	nop			; (mov r8, r8)
1000b298:	1000f50e 	.word	0x1000f50e
1000b29c:	1000f521 	.word	0x1000f521
1000b2a0:	1000f916 	.word	0x1000f916
1000b2a4:	1000f965 	.word	0x1000f965
1000b2a8:	1000f98d 	.word	0x1000f98d
1000b2ac:	1000f59e 	.word	0x1000f59e
1000b2b0:	1000f9ba 	.word	0x1000f9ba

1000b2b4 <optiga_shell_crypt_ecdsa_verify>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Sign prepared Data and export the signature");
	example_optiga_crypt_ecdsa_sign();
}
static void optiga_shell_crypt_ecdsa_verify()
{
1000b2b4:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting verification example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
1000b2b6:	4d07      	ldr	r5, [pc, #28]	; (1000b2d4 <optiga_shell_crypt_ecdsa_verify+0x20>)
1000b2b8:	4c07      	ldr	r4, [pc, #28]	; (1000b2d8 <optiga_shell_crypt_ecdsa_verify+0x24>)
1000b2ba:	1c29      	adds	r1, r5, #0
1000b2bc:	1c22      	adds	r2, r4, #0
1000b2be:	4807      	ldr	r0, [pc, #28]	; (1000b2dc <optiga_shell_crypt_ecdsa_verify+0x28>)
1000b2c0:	f7f9 f846 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Verify prepared signature, with prepared public key and digest");
1000b2c4:	1c29      	adds	r1, r5, #0
1000b2c6:	4806      	ldr	r0, [pc, #24]	; (1000b2e0 <optiga_shell_crypt_ecdsa_verify+0x2c>)
1000b2c8:	1c22      	adds	r2, r4, #0
1000b2ca:	f7f9 f841 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_ecdsa_verify();
1000b2ce:	f7fc ff21 	bl	10008114 <example_optiga_crypt_ecdsa_verify>
}
1000b2d2:	bd38      	pop	{r3, r4, r5, pc}
1000b2d4:	1000f50e 	.word	0x1000f50e
1000b2d8:	1000f521 	.word	0x1000f521
1000b2dc:	1000f9e7 	.word	0x1000f9e7
1000b2e0:	1000f879 	.word	0x1000f879

1000b2e4 <optiga_shell_crypt_ecdsa_sign>:
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Generate Shared Secret and export it");
	example_optiga_crypt_ecdh();
}
static void optiga_shell_crypt_ecdsa_sign()
{
1000b2e4:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
1000b2e6:	4d07      	ldr	r5, [pc, #28]	; (1000b304 <optiga_shell_crypt_ecdsa_sign+0x20>)
1000b2e8:	4c07      	ldr	r4, [pc, #28]	; (1000b308 <optiga_shell_crypt_ecdsa_sign+0x24>)
1000b2ea:	1c29      	adds	r1, r5, #0
1000b2ec:	1c22      	adds	r2, r4, #0
1000b2ee:	4807      	ldr	r0, [pc, #28]	; (1000b30c <optiga_shell_crypt_ecdsa_sign+0x28>)
1000b2f0:	f7f9 f82e 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Sign prepared Data and export the signature");
1000b2f4:	1c29      	adds	r1, r5, #0
1000b2f6:	4806      	ldr	r0, [pc, #24]	; (1000b310 <optiga_shell_crypt_ecdsa_sign+0x2c>)
1000b2f8:	1c22      	adds	r2, r4, #0
1000b2fa:	f7f9 f829 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_ecdsa_sign();
1000b2fe:	f7fc feaf 	bl	10008060 <example_optiga_crypt_ecdsa_sign>
}
1000b302:	bd38      	pop	{r3, r4, r5, pc}
1000b304:	1000f50e 	.word	0x1000f50e
1000b308:	1000f521 	.word	0x1000f521
1000b30c:	1000fa3c 	.word	0x1000fa3c
1000b310:	1000f8c0 	.word	0x1000f8c0

1000b314 <optiga_shell_crypt_ecc_generate_keypair>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting Generate Random Example");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate 32 bytes random");
	example_optiga_crypt_random();
}
static void optiga_shell_crypt_ecc_generate_keypair()
{
1000b314:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting generate ECC Key Example");
1000b316:	4d07      	ldr	r5, [pc, #28]	; (1000b334 <optiga_shell_crypt_ecc_generate_keypair+0x20>)
1000b318:	4c07      	ldr	r4, [pc, #28]	; (1000b338 <optiga_shell_crypt_ecc_generate_keypair+0x24>)
1000b31a:	1c29      	adds	r1, r5, #0
1000b31c:	1c22      	adds	r2, r4, #0
1000b31e:	4807      	ldr	r0, [pc, #28]	; (1000b33c <optiga_shell_crypt_ecc_generate_keypair+0x28>)
1000b320:	f7f9 f816 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate ECC NIST P-256 Key Pair and export the public key");
1000b324:	1c29      	adds	r1, r5, #0
1000b326:	4806      	ldr	r0, [pc, #24]	; (1000b340 <optiga_shell_crypt_ecc_generate_keypair+0x2c>)
1000b328:	1c22      	adds	r2, r4, #0
1000b32a:	f7f9 f811 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_ecc_generate_keypair();
1000b32e:	f7fc fdb7 	bl	10007ea0 <example_optiga_crypt_ecc_generate_keypair>
}
1000b332:	bd38      	pop	{r3, r4, r5, pc}
1000b334:	1000f50e 	.word	0x1000f50e
1000b338:	1000f521 	.word	0x1000f521
1000b33c:	1000fa8c 	.word	0x1000fa8c
1000b340:	1000faae 	.word	0x1000faae

1000b344 <optiga_shell_crypt_random>:
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Generate Shared Secret using the Shared Secret from the Arbitrary Data Object");
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Restore Metadata of the Arbitrary Data Object");
	example_optiga_crypt_tls_prf_sha256();
}
static void optiga_shell_crypt_random()
{
1000b344:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Generate Random Example");
1000b346:	4d07      	ldr	r5, [pc, #28]	; (1000b364 <optiga_shell_crypt_random+0x20>)
1000b348:	4c07      	ldr	r4, [pc, #28]	; (1000b368 <optiga_shell_crypt_random+0x24>)
1000b34a:	1c29      	adds	r1, r5, #0
1000b34c:	1c22      	adds	r2, r4, #0
1000b34e:	4807      	ldr	r0, [pc, #28]	; (1000b36c <optiga_shell_crypt_random+0x28>)
1000b350:	f7f8 fffe 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate 32 bytes random");
1000b354:	1c29      	adds	r1, r5, #0
1000b356:	4806      	ldr	r0, [pc, #24]	; (1000b370 <optiga_shell_crypt_random+0x2c>)
1000b358:	1c22      	adds	r2, r4, #0
1000b35a:	f7f8 fff9 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_random();
1000b35e:	f7fc ffb7 	bl	100082d0 <example_optiga_crypt_random>
}
1000b362:	bd38      	pop	{r3, r4, r5, pc}
1000b364:	1000f50e 	.word	0x1000f50e
1000b368:	1000f521 	.word	0x1000f521
1000b36c:	1000faf1 	.word	0x1000faf1
1000b370:	1000fb12 	.word	0x1000fb12

1000b374 <optiga_shell_crypt_tls_prf_sha256>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting Hash Example");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Hash given data with Start, Update and Finalize calls");
	example_optiga_crypt_hash();
}
static void optiga_shell_crypt_tls_prf_sha256()
{
1000b374:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting TLS PRF SHA256 (Key Deriviation) Example");
1000b376:	4d0f      	ldr	r5, [pc, #60]	; (1000b3b4 <optiga_shell_crypt_tls_prf_sha256+0x40>)
1000b378:	4c0f      	ldr	r4, [pc, #60]	; (1000b3b8 <optiga_shell_crypt_tls_prf_sha256+0x44>)
1000b37a:	1c29      	adds	r1, r5, #0
1000b37c:	1c22      	adds	r2, r4, #0
1000b37e:	480f      	ldr	r0, [pc, #60]	; (1000b3bc <optiga_shell_crypt_tls_prf_sha256+0x48>)
1000b380:	f7f8 ffe6 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write prepared Shared Secret into an Arbitrary Data Object");
1000b384:	1c29      	adds	r1, r5, #0
1000b386:	1c22      	adds	r2, r4, #0
1000b388:	480d      	ldr	r0, [pc, #52]	; (1000b3c0 <optiga_shell_crypt_tls_prf_sha256+0x4c>)
1000b38a:	f7f8 ffe1 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Update Metadata of the Object to use the Arbitrary Data Object only via Shielded I2C Connection");
1000b38e:	1c29      	adds	r1, r5, #0
1000b390:	1c22      	adds	r2, r4, #0
1000b392:	480c      	ldr	r0, [pc, #48]	; (1000b3c4 <optiga_shell_crypt_tls_prf_sha256+0x50>)
1000b394:	f7f8 ffdc 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Generate Shared Secret using the Shared Secret from the Arbitrary Data Object");
1000b398:	1c29      	adds	r1, r5, #0
1000b39a:	1c22      	adds	r2, r4, #0
1000b39c:	480a      	ldr	r0, [pc, #40]	; (1000b3c8 <optiga_shell_crypt_tls_prf_sha256+0x54>)
1000b39e:	f7f8 ffd7 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Restore Metadata of the Arbitrary Data Object");
1000b3a2:	1c29      	adds	r1, r5, #0
1000b3a4:	4809      	ldr	r0, [pc, #36]	; (1000b3cc <optiga_shell_crypt_tls_prf_sha256+0x58>)
1000b3a6:	1c22      	adds	r2, r4, #0
1000b3a8:	f7f8 ffd2 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_tls_prf_sha256();
1000b3ac:	f7fd fb6a 	bl	10008a84 <example_optiga_crypt_tls_prf_sha256>
}
1000b3b0:	bd38      	pop	{r3, r4, r5, pc}
1000b3b2:	46c0      	nop			; (mov r8, r8)
1000b3b4:	1000f50e 	.word	0x1000f50e
1000b3b8:	1000f521 	.word	0x1000f521
1000b3bc:	1000fb33 	.word	0x1000fb33
1000b3c0:	1000fb65 	.word	0x1000fb65
1000b3c4:	1000fba8 	.word	0x1000fba8
1000b3c8:	1000fc10 	.word	0x1000fc10
1000b3cc:	1000fc66 	.word	0x1000fc66

1000b3d0 <optiga_shell_crypt_hash>:
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write Trust Anchor used by the Trust M to verify the update");
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Start Protected update with prepared manifest and fragments");
	example_optiga_util_protected_update();
}
static void optiga_shell_crypt_hash()
{
1000b3d0:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Hash Example");
1000b3d2:	4d07      	ldr	r5, [pc, #28]	; (1000b3f0 <optiga_shell_crypt_hash+0x20>)
1000b3d4:	4c07      	ldr	r4, [pc, #28]	; (1000b3f4 <optiga_shell_crypt_hash+0x24>)
1000b3d6:	1c29      	adds	r1, r5, #0
1000b3d8:	1c22      	adds	r2, r4, #0
1000b3da:	4807      	ldr	r0, [pc, #28]	; (1000b3f8 <optiga_shell_crypt_hash+0x28>)
1000b3dc:	f7f8 ffb8 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Hash given data with Start, Update and Finalize calls");
1000b3e0:	1c29      	adds	r1, r5, #0
1000b3e2:	4806      	ldr	r0, [pc, #24]	; (1000b3fc <optiga_shell_crypt_hash+0x2c>)
1000b3e4:	1c22      	adds	r2, r4, #0
1000b3e6:	f7f8 ffb3 	bl	10004350 <optiga_lib_print_message>
	example_optiga_crypt_hash();
1000b3ea:	f7fc fef1 	bl	100081d0 <example_optiga_crypt_hash>
}
1000b3ee:	bd38      	pop	{r3, r4, r5, pc}
1000b3f0:	1000f50e 	.word	0x1000f50e
1000b3f4:	1000f521 	.word	0x1000f521
1000b3f8:	1000fc9c 	.word	0x1000fc9c
1000b3fc:	1000fcb2 	.word	0x1000fcb2

1000b400 <optiga_shell_util_protected_update>:
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Initial Counter Value");
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Increase Counter Object");
	example_optiga_util_update_count();
}
static void optiga_shell_util_protected_update()
{
1000b400:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Protected Update Example");
1000b402:	4d0c      	ldr	r5, [pc, #48]	; (1000b434 <optiga_shell_util_protected_update+0x34>)
1000b404:	4c0c      	ldr	r4, [pc, #48]	; (1000b438 <optiga_shell_util_protected_update+0x38>)
1000b406:	1c29      	adds	r1, r5, #0
1000b408:	1c22      	adds	r2, r4, #0
1000b40a:	480c      	ldr	r0, [pc, #48]	; (1000b43c <optiga_shell_util_protected_update+0x3c>)
1000b40c:	f7f8 ffa0 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Update Metadata for the Object to be updated and the Trust Anchor used to verify the update");
1000b410:	1c29      	adds	r1, r5, #0
1000b412:	1c22      	adds	r2, r4, #0
1000b414:	480a      	ldr	r0, [pc, #40]	; (1000b440 <optiga_shell_util_protected_update+0x40>)
1000b416:	f7f8 ff9b 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write Trust Anchor used by the Trust M to verify the update");
1000b41a:	1c29      	adds	r1, r5, #0
1000b41c:	1c22      	adds	r2, r4, #0
1000b41e:	4809      	ldr	r0, [pc, #36]	; (1000b444 <optiga_shell_util_protected_update+0x44>)
1000b420:	f7f8 ff96 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Start Protected update with prepared manifest and fragments");
1000b424:	1c29      	adds	r1, r5, #0
1000b426:	4808      	ldr	r0, [pc, #32]	; (1000b448 <optiga_shell_util_protected_update+0x48>)
1000b428:	1c22      	adds	r2, r4, #0
1000b42a:	f7f8 ff91 	bl	10004350 <optiga_lib_print_message>
	example_optiga_util_protected_update();
1000b42e:	f7fd fd15 	bl	10008e5c <example_optiga_util_protected_update>
}
1000b432:	bd38      	pop	{r3, r4, r5, pc}
1000b434:	1000f50e 	.word	0x1000f50e
1000b438:	1000f521 	.word	0x1000f521
1000b43c:	1000fcf0 	.word	0x1000fcf0
1000b440:	1000fd12 	.word	0x1000fd12
1000b444:	1000fd76 	.word	0x1000fd76
1000b448:	1000fdba 	.word	0x1000fdba

1000b44c <optiga_shell_util_update_count>:
	OPTIGA_SHELL_LOG_MESSAGE("10 Step: Close Applicaiton on the chip");
	OPTIGA_SHELL_LOG_MESSAGE("Important note: To continue with other examples you need to call the init parameter once again");
	example_optiga_util_hibernate_restore();
}
static void optiga_shell_util_update_count()
{
1000b44c:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Update Counter Example");
1000b44e:	4d0a      	ldr	r5, [pc, #40]	; (1000b478 <optiga_shell_util_update_count+0x2c>)
1000b450:	4c0a      	ldr	r4, [pc, #40]	; (1000b47c <optiga_shell_util_update_count+0x30>)
1000b452:	1c29      	adds	r1, r5, #0
1000b454:	1c22      	adds	r2, r4, #0
1000b456:	480a      	ldr	r0, [pc, #40]	; (1000b480 <optiga_shell_util_update_count+0x34>)
1000b458:	f7f8 ff7a 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Initial Counter Value");
1000b45c:	1c29      	adds	r1, r5, #0
1000b45e:	1c22      	adds	r2, r4, #0
1000b460:	4808      	ldr	r0, [pc, #32]	; (1000b484 <optiga_shell_util_update_count+0x38>)
1000b462:	f7f8 ff75 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Increase Counter Object");
1000b466:	1c29      	adds	r1, r5, #0
1000b468:	4807      	ldr	r0, [pc, #28]	; (1000b488 <optiga_shell_util_update_count+0x3c>)
1000b46a:	1c22      	adds	r2, r4, #0
1000b46c:	f7f8 ff70 	bl	10004350 <optiga_lib_print_message>
	example_optiga_util_update_count();
1000b470:	f7fd fe1a 	bl	100090a8 <example_optiga_util_update_count>
}
1000b474:	bd38      	pop	{r3, r4, r5, pc}
1000b476:	46c0      	nop			; (mov r8, r8)
1000b478:	1000f50e 	.word	0x1000f50e
1000b47c:	1000f521 	.word	0x1000f521
1000b480:	1000fdfe 	.word	0x1000fdfe
1000b484:	1000fe1e 	.word	0x1000fe1e
1000b488:	1000fe42 	.word	0x1000fe42

1000b48c <optiga_shell_util_hibernate_restore>:
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Write new Binding Secret");
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Store new Binding Secret on the Host");
	example_pair_host_and_optiga_using_pre_shared_secret();
}
static void optiga_shell_util_hibernate_restore()
{
1000b48c:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Hibernate and Restore Example");
1000b48e:	4d20      	ldr	r5, [pc, #128]	; (1000b510 <optiga_shell_util_hibernate_restore+0x84>)
1000b490:	4c20      	ldr	r4, [pc, #128]	; (1000b514 <optiga_shell_util_hibernate_restore+0x88>)
1000b492:	1c29      	adds	r1, r5, #0
1000b494:	1c22      	adds	r2, r4, #0
1000b496:	4820      	ldr	r0, [pc, #128]	; (1000b518 <optiga_shell_util_hibernate_restore+0x8c>)
1000b498:	f7f8 ff5a 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Open Application on the security chip");
1000b49c:	1c29      	adds	r1, r5, #0
1000b49e:	1c22      	adds	r2, r4, #0
1000b4a0:	481e      	ldr	r0, [pc, #120]	; (1000b51c <optiga_shell_util_hibernate_restore+0x90>)
1000b4a2:	f7f8 ff55 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Pair the host and the security chip");
1000b4a6:	1c29      	adds	r1, r5, #0
1000b4a8:	1c22      	adds	r2, r4, #0
1000b4aa:	481d      	ldr	r0, [pc, #116]	; (1000b520 <optiga_shell_util_hibernate_restore+0x94>)
1000b4ac:	f7f8 ff50 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
1000b4b0:	1c29      	adds	r1, r5, #0
1000b4b2:	1c22      	adds	r2, r4, #0
1000b4b4:	481b      	ldr	r0, [pc, #108]	; (1000b524 <optiga_shell_util_hibernate_restore+0x98>)
1000b4b6:	f7f8 ff4b 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Generate ECC NIST P-256 Key pair and store it in Session Data Object, export the public key");
1000b4ba:	1c29      	adds	r1, r5, #0
1000b4bc:	1c22      	adds	r2, r4, #0
1000b4be:	481a      	ldr	r0, [pc, #104]	; (1000b528 <optiga_shell_util_hibernate_restore+0x9c>)
1000b4c0:	f7f8 ff46 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("5 Step: Check Security Event Counter and wait till it reaches 0");
1000b4c4:	1c29      	adds	r1, r5, #0
1000b4c6:	1c22      	adds	r2, r4, #0
1000b4c8:	4818      	ldr	r0, [pc, #96]	; (1000b52c <optiga_shell_util_hibernate_restore+0xa0>)
1000b4ca:	f7f8 ff41 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("6 Step: Perform Close application with Hibernate parameter set to True");
1000b4ce:	1c29      	adds	r1, r5, #0
1000b4d0:	1c22      	adds	r2, r4, #0
1000b4d2:	4817      	ldr	r0, [pc, #92]	; (1000b530 <optiga_shell_util_hibernate_restore+0xa4>)
1000b4d4:	f7f8 ff3c 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("7 Step: Open Application on the security chip");
1000b4d8:	1c29      	adds	r1, r5, #0
1000b4da:	1c22      	adds	r2, r4, #0
1000b4dc:	4815      	ldr	r0, [pc, #84]	; (1000b534 <optiga_shell_util_hibernate_restore+0xa8>)
1000b4de:	f7f8 ff37 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("8 Step: Sign prepared data with private key stored in Session Data Object");
1000b4e2:	1c29      	adds	r1, r5, #0
1000b4e4:	1c22      	adds	r2, r4, #0
1000b4e6:	4814      	ldr	r0, [pc, #80]	; (1000b538 <optiga_shell_util_hibernate_restore+0xac>)
1000b4e8:	f7f8 ff32 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("9 Step: Verify the signature with the public key generated previously");
1000b4ec:	1c29      	adds	r1, r5, #0
1000b4ee:	1c22      	adds	r2, r4, #0
1000b4f0:	4812      	ldr	r0, [pc, #72]	; (1000b53c <optiga_shell_util_hibernate_restore+0xb0>)
1000b4f2:	f7f8 ff2d 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("10 Step: Close Applicaiton on the chip");
1000b4f6:	1c29      	adds	r1, r5, #0
1000b4f8:	1c22      	adds	r2, r4, #0
1000b4fa:	4811      	ldr	r0, [pc, #68]	; (1000b540 <optiga_shell_util_hibernate_restore+0xb4>)
1000b4fc:	f7f8 ff28 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("Important note: To continue with other examples you need to call the init parameter once again");
1000b500:	1c29      	adds	r1, r5, #0
1000b502:	4810      	ldr	r0, [pc, #64]	; (1000b544 <optiga_shell_util_hibernate_restore+0xb8>)
1000b504:	1c22      	adds	r2, r4, #0
1000b506:	f7f8 ff23 	bl	10004350 <optiga_lib_print_message>
	example_optiga_util_hibernate_restore();
1000b50a:	f7fd fb8f 	bl	10008c2c <example_optiga_util_hibernate_restore>
}
1000b50e:	bd38      	pop	{r3, r4, r5, pc}
1000b510:	1000f50e 	.word	0x1000f50e
1000b514:	1000f521 	.word	0x1000f521
1000b518:	1000fe62 	.word	0x1000fe62
1000b51c:	1000fe89 	.word	0x1000fe89
1000b520:	1000feb7 	.word	0x1000feb7
1000b524:	1000f59e 	.word	0x1000f59e
1000b528:	1000fee3 	.word	0x1000fee3
1000b52c:	1000ff47 	.word	0x1000ff47
1000b530:	1000ff87 	.word	0x1000ff87
1000b534:	1000ffce 	.word	0x1000ffce
1000b538:	1000fffc 	.word	0x1000fffc
1000b53c:	10010046 	.word	0x10010046
1000b540:	1001008c 	.word	0x1001008c
1000b544:	100100b3 	.word	0x100100b3

1000b548 <optiga_shell_pair_host_optiga>:
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Sample Certificate in Trust Anchor Data Object (640 bytes)");
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write new Metadata");
	example_optiga_util_write_data();
}
static void optiga_shell_pair_host_optiga()
{
1000b548:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Pairing of Host and Trust M Example");
1000b54a:	4d0f      	ldr	r5, [pc, #60]	; (1000b588 <optiga_shell_pair_host_optiga+0x40>)
1000b54c:	4c0f      	ldr	r4, [pc, #60]	; (1000b58c <optiga_shell_pair_host_optiga+0x44>)
1000b54e:	1c29      	adds	r1, r5, #0
1000b550:	1c22      	adds	r2, r4, #0
1000b552:	480f      	ldr	r0, [pc, #60]	; (1000b590 <optiga_shell_pair_host_optiga+0x48>)
1000b554:	f7f8 fefc 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read and Check existing Metadata for the Binding Secret");
1000b558:	1c29      	adds	r1, r5, #0
1000b55a:	1c22      	adds	r2, r4, #0
1000b55c:	480d      	ldr	r0, [pc, #52]	; (1000b594 <optiga_shell_pair_host_optiga+0x4c>)
1000b55e:	f7f8 fef7 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Generate Random for the new Binding Secret");
1000b562:	1c29      	adds	r1, r5, #0
1000b564:	1c22      	adds	r2, r4, #0
1000b566:	480c      	ldr	r0, [pc, #48]	; (1000b598 <optiga_shell_pair_host_optiga+0x50>)
1000b568:	f7f8 fef2 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Write new Binding Secret");
1000b56c:	1c29      	adds	r1, r5, #0
1000b56e:	1c22      	adds	r2, r4, #0
1000b570:	480a      	ldr	r0, [pc, #40]	; (1000b59c <optiga_shell_pair_host_optiga+0x54>)
1000b572:	f7f8 feed 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Store new Binding Secret on the Host");
1000b576:	1c29      	adds	r1, r5, #0
1000b578:	4809      	ldr	r0, [pc, #36]	; (1000b5a0 <optiga_shell_pair_host_optiga+0x58>)
1000b57a:	1c22      	adds	r2, r4, #0
1000b57c:	f7f8 fee8 	bl	10004350 <optiga_lib_print_message>
	example_pair_host_and_optiga_using_pre_shared_secret();
1000b580:	f7fd fe60 	bl	10009244 <example_pair_host_and_optiga_using_pre_shared_secret>
}
1000b584:	bd38      	pop	{r3, r4, r5, pc}
1000b586:	46c0      	nop			; (mov r8, r8)
1000b588:	1000f50e 	.word	0x1000f50e
1000b58c:	1000f521 	.word	0x1000f521
1000b590:	10010112 	.word	0x10010112
1000b594:	1001013f 	.word	0x1001013f
1000b598:	1001017f 	.word	0x1001017f
1000b59c:	100101b2 	.word	0x100101b2
1000b5a0:	100101d3 	.word	0x100101d3

1000b5a4 <optiga_shell_util_write_data>:
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read Certificate (~500 bytes)");
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Read Certificate Metadata");
	example_optiga_util_read_data();
}
static void optiga_shell_util_write_data()
{
1000b5a4:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Write Data/Metadata Example");
1000b5a6:	4d0a      	ldr	r5, [pc, #40]	; (1000b5d0 <optiga_shell_util_write_data+0x2c>)
1000b5a8:	4c0a      	ldr	r4, [pc, #40]	; (1000b5d4 <optiga_shell_util_write_data+0x30>)
1000b5aa:	1c29      	adds	r1, r5, #0
1000b5ac:	1c22      	adds	r2, r4, #0
1000b5ae:	480a      	ldr	r0, [pc, #40]	; (1000b5d8 <optiga_shell_util_write_data+0x34>)
1000b5b0:	f7f8 fece 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Sample Certificate in Trust Anchor Data Object (640 bytes)");
1000b5b4:	1c29      	adds	r1, r5, #0
1000b5b6:	1c22      	adds	r2, r4, #0
1000b5b8:	4808      	ldr	r0, [pc, #32]	; (1000b5dc <optiga_shell_util_write_data+0x38>)
1000b5ba:	f7f8 fec9 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write new Metadata");
1000b5be:	1c29      	adds	r1, r5, #0
1000b5c0:	4807      	ldr	r0, [pc, #28]	; (1000b5e0 <optiga_shell_util_write_data+0x3c>)
1000b5c2:	1c22      	adds	r2, r4, #0
1000b5c4:	f7f8 fec4 	bl	10004350 <optiga_lib_print_message>
	example_optiga_util_write_data();
1000b5c8:	f7fd fdd0 	bl	1000916c <example_optiga_util_write_data>
}
1000b5cc:	bd38      	pop	{r3, r4, r5, pc}
1000b5ce:	46c0      	nop			; (mov r8, r8)
1000b5d0:	1000f50e 	.word	0x1000f50e
1000b5d4:	1000f521 	.word	0x1000f521
1000b5d8:	10010200 	.word	0x10010200
1000b5dc:	10010225 	.word	0x10010225
1000b5e0:	1001026e 	.word	0x1001026e

1000b5e4 <optiga_shell_util_read_data>:
		optiga_util_destroy(me_util);
	}while(FALSE);
}

static void optiga_shell_util_read_data()
{
1000b5e4:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Read Data/Metadata Example");
1000b5e6:	4d0a      	ldr	r5, [pc, #40]	; (1000b610 <optiga_shell_util_read_data+0x2c>)
1000b5e8:	4c0a      	ldr	r4, [pc, #40]	; (1000b614 <optiga_shell_util_read_data+0x30>)
1000b5ea:	1c29      	adds	r1, r5, #0
1000b5ec:	1c22      	adds	r2, r4, #0
1000b5ee:	480a      	ldr	r0, [pc, #40]	; (1000b618 <optiga_shell_util_read_data+0x34>)
1000b5f0:	f7f8 feae 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read Certificate (~500 bytes)");
1000b5f4:	1c29      	adds	r1, r5, #0
1000b5f6:	1c22      	adds	r2, r4, #0
1000b5f8:	4808      	ldr	r0, [pc, #32]	; (1000b61c <optiga_shell_util_read_data+0x38>)
1000b5fa:	f7f8 fea9 	bl	10004350 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Read Certificate Metadata");
1000b5fe:	1c29      	adds	r1, r5, #0
1000b600:	4807      	ldr	r0, [pc, #28]	; (1000b620 <optiga_shell_util_read_data+0x3c>)
1000b602:	1c22      	adds	r2, r4, #0
1000b604:	f7f8 fea4 	bl	10004350 <optiga_lib_print_message>
	example_optiga_util_read_data();
1000b608:	f7fd fcd4 	bl	10008fb4 <example_optiga_util_read_data>
}
1000b60c:	bd38      	pop	{r3, r4, r5, pc}
1000b60e:	46c0      	nop			; (mov r8, r8)
1000b610:	1000f50e 	.word	0x1000f50e
1000b614:	1000f521 	.word	0x1000f521
1000b618:	10010289 	.word	0x10010289
1000b61c:	100102ad 	.word	0x100102ad
1000b620:	100102d3 	.word	0x100102d3

1000b624 <optiga_shell_init>:
	const char_t * cmd_options;
	void (*cmd_handler)();
}optiga_example_cmd_t;

static void optiga_shell_init()
{
1000b624:	b5f0      	push	{r4, r5, r6, r7, lr}
	optiga_lib_status_t return_status;
	uint16_t optiga_oid = 0xE0C4;
	uint8_t required_current = 0x0F;
1000b626:	270f      	movs	r7, #15
	const char_t * cmd_options;
	void (*cmd_handler)();
}optiga_example_cmd_t;

static void optiga_shell_init()
{
1000b628:	b087      	sub	sp, #28
	optiga_lib_status_t return_status;
	uint16_t optiga_oid = 0xE0C4;
	uint8_t required_current = 0x0F;
1000b62a:	ab02      	add	r3, sp, #8

	do
	{
		//Create an instance of optiga_util to open the application on OPTIGA.
		me_util = optiga_util_create(0, optiga_util_callback, NULL);
1000b62c:	2000      	movs	r0, #0

static void optiga_shell_init()
{
	optiga_lib_status_t return_status;
	uint16_t optiga_oid = 0xE0C4;
	uint8_t required_current = 0x0F;
1000b62e:	18ff      	adds	r7, r7, r3
1000b630:	230f      	movs	r3, #15

	do
	{
		//Create an instance of optiga_util to open the application on OPTIGA.
		me_util = optiga_util_create(0, optiga_util_callback, NULL);
1000b632:	4926      	ldr	r1, [pc, #152]	; (1000b6cc <optiga_shell_init+0xa8>)
1000b634:	1c02      	adds	r2, r0, #0

static void optiga_shell_init()
{
	optiga_lib_status_t return_status;
	uint16_t optiga_oid = 0xE0C4;
	uint8_t required_current = 0x0F;
1000b636:	703b      	strb	r3, [r7, #0]

	do
	{
		//Create an instance of optiga_util to open the application on OPTIGA.
		me_util = optiga_util_create(0, optiga_util_callback, NULL);
1000b638:	f7f6 f8c0 	bl	100017bc <optiga_util_create>
1000b63c:	4c24      	ldr	r4, [pc, #144]	; (1000b6d0 <optiga_shell_init+0xac>)

		OPTIGA_EXAMPLE_LOG_MESSAGE("Initializing OPTIGA for example demonstration...\n");
1000b63e:	4925      	ldr	r1, [pc, #148]	; (1000b6d4 <optiga_shell_init+0xb0>)
	uint8_t required_current = 0x0F;

	do
	{
		//Create an instance of optiga_util to open the application on OPTIGA.
		me_util = optiga_util_create(0, optiga_util_callback, NULL);
1000b640:	6020      	str	r0, [r4, #0]

		OPTIGA_EXAMPLE_LOG_MESSAGE("Initializing OPTIGA for example demonstration...\n");
1000b642:	4a25      	ldr	r2, [pc, #148]	; (1000b6d8 <optiga_shell_init+0xb4>)
1000b644:	4825      	ldr	r0, [pc, #148]	; (1000b6dc <optiga_shell_init+0xb8>)
1000b646:	f7f8 fe83 	bl	10004350 <optiga_lib_print_message>
		/**
		 * Open the application on OPTIGA which is a precondition to perform any other operations
		 * using optiga_util_open_application
		 */
		optiga_lib_status = OPTIGA_LIB_BUSY;
1000b64a:	2301      	movs	r3, #1
1000b64c:	4e24      	ldr	r6, [pc, #144]	; (1000b6e0 <optiga_shell_init+0xbc>)
		return_status = optiga_util_open_application(me_util, 0);
1000b64e:	6820      	ldr	r0, [r4, #0]
1000b650:	2100      	movs	r1, #0
		OPTIGA_EXAMPLE_LOG_MESSAGE("Initializing OPTIGA for example demonstration...\n");
		/**
		 * Open the application on OPTIGA which is a precondition to perform any other operations
		 * using optiga_util_open_application
		 */
		optiga_lib_status = OPTIGA_LIB_BUSY;
1000b652:	8033      	strh	r3, [r6, #0]
		return_status = optiga_util_open_application(me_util, 0);
1000b654:	f7f6 f8f2 	bl	1000183c <optiga_util_open_application>
1000b658:	9403      	str	r4, [sp, #12]

		if (OPTIGA_LIB_SUCCESS != return_status)
1000b65a:	2800      	cmp	r0, #0
1000b65c:	d133      	bne.n	1000b6c6 <optiga_shell_init+0xa2>
		{
			break;
		}
		while (optiga_lib_status == OPTIGA_LIB_BUSY)
1000b65e:	8833      	ldrh	r3, [r6, #0]
1000b660:	2b01      	cmp	r3, #1
1000b662:	d0fc      	beq.n	1000b65e <optiga_shell_init+0x3a>
		{
			//Wait until the optiga_util_open_application is completed
		}
		if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000b664:	8833      	ldrh	r3, [r6, #0]
1000b666:	b29b      	uxth	r3, r3
1000b668:	9302      	str	r3, [sp, #8]
1000b66a:	2b00      	cmp	r3, #0
1000b66c:	d12b      	bne.n	1000b6c6 <optiga_shell_init+0xa2>
		{
			//optiga util open application failed
			break;
		}

		OPTIGA_SHELL_LOG_MESSAGE("Initializing OPTIGA completed...\n\n");
1000b66e:	4d1d      	ldr	r5, [pc, #116]	; (1000b6e4 <optiga_shell_init+0xc0>)
1000b670:	4c1d      	ldr	r4, [pc, #116]	; (1000b6e8 <optiga_shell_init+0xc4>)
1000b672:	481e      	ldr	r0, [pc, #120]	; (1000b6ec <optiga_shell_init+0xc8>)
1000b674:	1c29      	adds	r1, r5, #0
1000b676:	1c22      	adds	r2, r4, #0
1000b678:	f7f8 fe6a 	bl	10004350 <optiga_lib_print_message>
		OPTIGA_SHELL_LOG_MESSAGE("Begin pairing of host and OPTIGA...");
1000b67c:	481c      	ldr	r0, [pc, #112]	; (1000b6f0 <optiga_shell_init+0xcc>)
1000b67e:	1c29      	adds	r1, r5, #0
1000b680:	1c22      	adds	r2, r4, #0
1000b682:	f7f8 fe65 	bl	10004350 <optiga_lib_print_message>
		// Usercase: Generate the pre-shared secret on host and write it to OPTIGA
		example_pair_host_and_optiga_using_pre_shared_secret();
1000b686:	f7fd fddd 	bl	10009244 <example_pair_host_and_optiga_using_pre_shared_secret>
		OPTIGA_SHELL_LOG_MESSAGE("Pairing of host and OPTIGA completed...");
1000b68a:	481a      	ldr	r0, [pc, #104]	; (1000b6f4 <optiga_shell_init+0xd0>)
1000b68c:	1c29      	adds	r1, r5, #0
1000b68e:	1c22      	adds	r2, r4, #0
1000b690:	f7f8 fe5e 	bl	10004350 <optiga_lib_print_message>
		// Usercase: Generate the pre-shared secret on host and write it to OPTIGA
        return_status = optiga_util_write_data(me_util,
1000b694:	2301      	movs	r3, #1
1000b696:	9301      	str	r3, [sp, #4]
1000b698:	9b03      	ldr	r3, [sp, #12]
1000b69a:	9700      	str	r7, [sp, #0]
1000b69c:	6818      	ldr	r0, [r3, #0]
1000b69e:	4916      	ldr	r1, [pc, #88]	; (1000b6f8 <optiga_shell_init+0xd4>)
1000b6a0:	2240      	movs	r2, #64	; 0x40
1000b6a2:	9b02      	ldr	r3, [sp, #8]
1000b6a4:	f7f6 f9c6 	bl	10001a34 <optiga_util_write_data>
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
											   &required_current,
                                               1);

        if (OPTIGA_LIB_SUCCESS != return_status)
1000b6a8:	2800      	cmp	r0, #0
1000b6aa:	d10c      	bne.n	1000b6c6 <optiga_shell_init+0xa2>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000b6ac:	8833      	ldrh	r3, [r6, #0]
1000b6ae:	2b01      	cmp	r3, #1
1000b6b0:	d0fc      	beq.n	1000b6ac <optiga_shell_init+0x88>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        OPTIGA_SHELL_LOG_MESSAGE("Setting current limitation to minimum...");
1000b6b2:	4812      	ldr	r0, [pc, #72]	; (1000b6fc <optiga_shell_init+0xd8>)
1000b6b4:	1c29      	adds	r1, r5, #0
1000b6b6:	1c22      	adds	r2, r4, #0
1000b6b8:	f7f8 fe4a 	bl	10004350 <optiga_lib_print_message>
        OPTIGA_SHELL_LOG_MESSAGE("Starting OPTIGA example demonstration..\n");
1000b6bc:	4810      	ldr	r0, [pc, #64]	; (1000b700 <optiga_shell_init+0xdc>)
1000b6be:	1c29      	adds	r1, r5, #0
1000b6c0:	1c22      	adds	r2, r4, #0
1000b6c2:	f7f8 fe45 	bl	10004350 <optiga_lib_print_message>
	}while(FALSE);
}
1000b6c6:	b007      	add	sp, #28
1000b6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b6ca:	46c0      	nop			; (mov r8, r8)
1000b6cc:	1000b099 	.word	0x1000b099
1000b6d0:	20002ffc 	.word	0x20002ffc
1000b6d4:	1000f028 	.word	0x1000f028
1000b6d8:	1000cae0 	.word	0x1000cae0
1000b6dc:	100102f5 	.word	0x100102f5
1000b6e0:	20003000 	.word	0x20003000
1000b6e4:	1000f50e 	.word	0x1000f50e
1000b6e8:	1000f521 	.word	0x1000f521
1000b6ec:	10010327 	.word	0x10010327
1000b6f0:	1001034a 	.word	0x1001034a
1000b6f4:	1001036e 	.word	0x1001036e
1000b6f8:	0000e0c4 	.word	0x0000e0c4
1000b6fc:	10010396 	.word	0x10010396
1000b700:	100103bf 	.word	0x100103bf

1000b704 <optiga_shell_selftest>:
		OPTIGA_SHELL_LOG_MESSAGE(buffer_string); \
		optiga_lib_print_string_with_newline(""); \
		pal_os_timer_delay_in_milliseconds(2000);

static void optiga_shell_selftest()
{
1000b704:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b706:	b089      	sub	sp, #36	; 0x24
	char buffer_string[30];
	int timestamp = pal_os_timer_get_time_in_milliseconds();
1000b708:	f7f5 ffda 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>

	PRINT_PERFORMANCE_RESULTS(optiga_shell_init);
1000b70c:	f7f5 ffd8 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b710:	1c04      	adds	r4, r0, #0
1000b712:	f7ff ff87 	bl	1000b624 <optiga_shell_init>
1000b716:	f7f5 ffd3 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b71a:	4eef      	ldr	r6, [pc, #956]	; (1000bad8 <optiga_shell_selftest+0x3d4>)
1000b71c:	1b02      	subs	r2, r0, r4
1000b71e:	1c31      	adds	r1, r6, #0
1000b720:	4668      	mov	r0, sp
1000b722:	f000 fe53 	bl	1000c3cc <siprintf>
1000b726:	4ded      	ldr	r5, [pc, #948]	; (1000badc <optiga_shell_selftest+0x3d8>)
1000b728:	4ced      	ldr	r4, [pc, #948]	; (1000bae0 <optiga_shell_selftest+0x3dc>)
1000b72a:	1c29      	adds	r1, r5, #0
1000b72c:	1c22      	adds	r2, r4, #0
1000b72e:	4668      	mov	r0, sp
1000b730:	f7f8 fe0e 	bl	10004350 <optiga_lib_print_message>
1000b734:	48eb      	ldr	r0, [pc, #940]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b736:	f7f8 fdef 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b73a:	20fa      	movs	r0, #250	; 0xfa
1000b73c:	00c0      	lsls	r0, r0, #3
1000b73e:	f7f5 ffc5 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_util_read_data);
1000b742:	f7f5 ffbd 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b746:	1c07      	adds	r7, r0, #0
1000b748:	f7ff ff4c 	bl	1000b5e4 <optiga_shell_util_read_data>
1000b74c:	f7f5 ffb8 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b750:	1c31      	adds	r1, r6, #0
1000b752:	1bc2      	subs	r2, r0, r7
1000b754:	4668      	mov	r0, sp
1000b756:	f000 fe39 	bl	1000c3cc <siprintf>
1000b75a:	1c29      	adds	r1, r5, #0
1000b75c:	1c22      	adds	r2, r4, #0
1000b75e:	4668      	mov	r0, sp
1000b760:	f7f8 fdf6 	bl	10004350 <optiga_lib_print_message>
1000b764:	48df      	ldr	r0, [pc, #892]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b766:	f7f8 fdd7 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b76a:	20fa      	movs	r0, #250	; 0xfa
1000b76c:	00c0      	lsls	r0, r0, #3
1000b76e:	f7f5 ffad 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_util_write_data);
1000b772:	f7f5 ffa5 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b776:	1c07      	adds	r7, r0, #0
1000b778:	f7ff ff14 	bl	1000b5a4 <optiga_shell_util_write_data>
1000b77c:	f7f5 ffa0 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b780:	1c31      	adds	r1, r6, #0
1000b782:	1bc2      	subs	r2, r0, r7
1000b784:	4668      	mov	r0, sp
1000b786:	f000 fe21 	bl	1000c3cc <siprintf>
1000b78a:	1c29      	adds	r1, r5, #0
1000b78c:	1c22      	adds	r2, r4, #0
1000b78e:	4668      	mov	r0, sp
1000b790:	f7f8 fdde 	bl	10004350 <optiga_lib_print_message>
1000b794:	48d3      	ldr	r0, [pc, #844]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b796:	f7f8 fdbf 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b79a:	20fa      	movs	r0, #250	; 0xfa
1000b79c:	00c0      	lsls	r0, r0, #3
1000b79e:	f7f5 ff95 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_pair_host_optiga);
1000b7a2:	f7f5 ff8d 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b7a6:	1c07      	adds	r7, r0, #0
1000b7a8:	f7ff fece 	bl	1000b548 <optiga_shell_pair_host_optiga>
1000b7ac:	f7f5 ff88 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b7b0:	1c31      	adds	r1, r6, #0
1000b7b2:	1bc2      	subs	r2, r0, r7
1000b7b4:	4668      	mov	r0, sp
1000b7b6:	f000 fe09 	bl	1000c3cc <siprintf>
1000b7ba:	1c29      	adds	r1, r5, #0
1000b7bc:	1c22      	adds	r2, r4, #0
1000b7be:	4668      	mov	r0, sp
1000b7c0:	f7f8 fdc6 	bl	10004350 <optiga_lib_print_message>
1000b7c4:	48c7      	ldr	r0, [pc, #796]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b7c6:	f7f8 fda7 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b7ca:	20fa      	movs	r0, #250	; 0xfa
1000b7cc:	00c0      	lsls	r0, r0, #3
1000b7ce:	f7f5 ff7d 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_util_update_count);
1000b7d2:	f7f5 ff75 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b7d6:	1c07      	adds	r7, r0, #0
1000b7d8:	f7ff fe38 	bl	1000b44c <optiga_shell_util_update_count>
1000b7dc:	f7f5 ff70 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b7e0:	1c31      	adds	r1, r6, #0
1000b7e2:	1bc2      	subs	r2, r0, r7
1000b7e4:	4668      	mov	r0, sp
1000b7e6:	f000 fdf1 	bl	1000c3cc <siprintf>
1000b7ea:	1c29      	adds	r1, r5, #0
1000b7ec:	1c22      	adds	r2, r4, #0
1000b7ee:	4668      	mov	r0, sp
1000b7f0:	f7f8 fdae 	bl	10004350 <optiga_lib_print_message>
1000b7f4:	48bb      	ldr	r0, [pc, #748]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b7f6:	f7f8 fd8f 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b7fa:	20fa      	movs	r0, #250	; 0xfa
1000b7fc:	00c0      	lsls	r0, r0, #3
1000b7fe:	f7f5 ff65 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_util_protected_update);
1000b802:	f7f5 ff5d 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b806:	1c07      	adds	r7, r0, #0
1000b808:	f7ff fdfa 	bl	1000b400 <optiga_shell_util_protected_update>
1000b80c:	f7f5 ff58 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b810:	1c31      	adds	r1, r6, #0
1000b812:	1bc2      	subs	r2, r0, r7
1000b814:	4668      	mov	r0, sp
1000b816:	f000 fdd9 	bl	1000c3cc <siprintf>
1000b81a:	1c29      	adds	r1, r5, #0
1000b81c:	1c22      	adds	r2, r4, #0
1000b81e:	4668      	mov	r0, sp
1000b820:	f7f8 fd96 	bl	10004350 <optiga_lib_print_message>
1000b824:	48af      	ldr	r0, [pc, #700]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b826:	f7f8 fd77 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b82a:	20fa      	movs	r0, #250	; 0xfa
1000b82c:	00c0      	lsls	r0, r0, #3
1000b82e:	f7f5 ff4d 	bl	100016cc <pal_os_timer_delay_in_milliseconds>

	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_hash);
1000b832:	f7f5 ff45 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b836:	1c07      	adds	r7, r0, #0
1000b838:	f7ff fdca 	bl	1000b3d0 <optiga_shell_crypt_hash>
1000b83c:	f7f5 ff40 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b840:	1c31      	adds	r1, r6, #0
1000b842:	1bc2      	subs	r2, r0, r7
1000b844:	4668      	mov	r0, sp
1000b846:	f000 fdc1 	bl	1000c3cc <siprintf>
1000b84a:	1c29      	adds	r1, r5, #0
1000b84c:	1c22      	adds	r2, r4, #0
1000b84e:	4668      	mov	r0, sp
1000b850:	f7f8 fd7e 	bl	10004350 <optiga_lib_print_message>
1000b854:	48a3      	ldr	r0, [pc, #652]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b856:	f7f8 fd5f 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b85a:	20fa      	movs	r0, #250	; 0xfa
1000b85c:	00c0      	lsls	r0, r0, #3
1000b85e:	f7f5 ff35 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_tls_prf_sha256);
1000b862:	f7f5 ff2d 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b866:	1c07      	adds	r7, r0, #0
1000b868:	f7ff fd84 	bl	1000b374 <optiga_shell_crypt_tls_prf_sha256>
1000b86c:	f7f5 ff28 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b870:	1c31      	adds	r1, r6, #0
1000b872:	1bc2      	subs	r2, r0, r7
1000b874:	4668      	mov	r0, sp
1000b876:	f000 fda9 	bl	1000c3cc <siprintf>
1000b87a:	1c29      	adds	r1, r5, #0
1000b87c:	1c22      	adds	r2, r4, #0
1000b87e:	4668      	mov	r0, sp
1000b880:	f7f8 fd66 	bl	10004350 <optiga_lib_print_message>
1000b884:	4897      	ldr	r0, [pc, #604]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b886:	f7f8 fd47 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b88a:	20fa      	movs	r0, #250	; 0xfa
1000b88c:	00c0      	lsls	r0, r0, #3
1000b88e:	f7f5 ff1d 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_random);
1000b892:	f7f5 ff15 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b896:	1c07      	adds	r7, r0, #0
1000b898:	f7ff fd54 	bl	1000b344 <optiga_shell_crypt_random>
1000b89c:	f7f5 ff10 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b8a0:	1c31      	adds	r1, r6, #0
1000b8a2:	1bc2      	subs	r2, r0, r7
1000b8a4:	4668      	mov	r0, sp
1000b8a6:	f000 fd91 	bl	1000c3cc <siprintf>
1000b8aa:	1c29      	adds	r1, r5, #0
1000b8ac:	1c22      	adds	r2, r4, #0
1000b8ae:	4668      	mov	r0, sp
1000b8b0:	f7f8 fd4e 	bl	10004350 <optiga_lib_print_message>
1000b8b4:	488b      	ldr	r0, [pc, #556]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b8b6:	f7f8 fd2f 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b8ba:	20fa      	movs	r0, #250	; 0xfa
1000b8bc:	00c0      	lsls	r0, r0, #3
1000b8be:	f7f5 ff05 	bl	100016cc <pal_os_timer_delay_in_milliseconds>

	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_ecc_generate_keypair);
1000b8c2:	f7f5 fefd 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b8c6:	1c07      	adds	r7, r0, #0
1000b8c8:	f7ff fd24 	bl	1000b314 <optiga_shell_crypt_ecc_generate_keypair>
1000b8cc:	f7f5 fef8 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b8d0:	1c31      	adds	r1, r6, #0
1000b8d2:	1bc2      	subs	r2, r0, r7
1000b8d4:	4668      	mov	r0, sp
1000b8d6:	f000 fd79 	bl	1000c3cc <siprintf>
1000b8da:	1c29      	adds	r1, r5, #0
1000b8dc:	1c22      	adds	r2, r4, #0
1000b8de:	4668      	mov	r0, sp
1000b8e0:	f7f8 fd36 	bl	10004350 <optiga_lib_print_message>
1000b8e4:	487f      	ldr	r0, [pc, #508]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b8e6:	f7f8 fd17 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b8ea:	20fa      	movs	r0, #250	; 0xfa
1000b8ec:	00c0      	lsls	r0, r0, #3
1000b8ee:	f7f5 feed 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_ecdsa_sign);
1000b8f2:	f7f5 fee5 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b8f6:	1c07      	adds	r7, r0, #0
1000b8f8:	f7ff fcf4 	bl	1000b2e4 <optiga_shell_crypt_ecdsa_sign>
1000b8fc:	f7f5 fee0 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b900:	1c31      	adds	r1, r6, #0
1000b902:	1bc2      	subs	r2, r0, r7
1000b904:	4668      	mov	r0, sp
1000b906:	f000 fd61 	bl	1000c3cc <siprintf>
1000b90a:	1c29      	adds	r1, r5, #0
1000b90c:	1c22      	adds	r2, r4, #0
1000b90e:	4668      	mov	r0, sp
1000b910:	f7f8 fd1e 	bl	10004350 <optiga_lib_print_message>
1000b914:	4873      	ldr	r0, [pc, #460]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b916:	f7f8 fcff 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b91a:	20fa      	movs	r0, #250	; 0xfa
1000b91c:	00c0      	lsls	r0, r0, #3
1000b91e:	f7f5 fed5 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_ecdsa_verify);
1000b922:	f7f5 fecd 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b926:	1c07      	adds	r7, r0, #0
1000b928:	f7ff fcc4 	bl	1000b2b4 <optiga_shell_crypt_ecdsa_verify>
1000b92c:	f7f5 fec8 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b930:	1c31      	adds	r1, r6, #0
1000b932:	1bc2      	subs	r2, r0, r7
1000b934:	4668      	mov	r0, sp
1000b936:	f000 fd49 	bl	1000c3cc <siprintf>
1000b93a:	1c29      	adds	r1, r5, #0
1000b93c:	1c22      	adds	r2, r4, #0
1000b93e:	4668      	mov	r0, sp
1000b940:	f7f8 fd06 	bl	10004350 <optiga_lib_print_message>
1000b944:	4867      	ldr	r0, [pc, #412]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b946:	f7f8 fce7 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b94a:	20fa      	movs	r0, #250	; 0xfa
1000b94c:	00c0      	lsls	r0, r0, #3
1000b94e:	f7f5 febd 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_ecdh);
1000b952:	f7f5 feb5 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b956:	1c07      	adds	r7, r0, #0
1000b958:	f7ff fc7e 	bl	1000b258 <optiga_shell_crypt_ecdh>
1000b95c:	f7f5 feb0 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b960:	1c31      	adds	r1, r6, #0
1000b962:	1bc2      	subs	r2, r0, r7
1000b964:	4668      	mov	r0, sp
1000b966:	f000 fd31 	bl	1000c3cc <siprintf>
1000b96a:	1c29      	adds	r1, r5, #0
1000b96c:	1c22      	adds	r2, r4, #0
1000b96e:	4668      	mov	r0, sp
1000b970:	f7f8 fcee 	bl	10004350 <optiga_lib_print_message>
1000b974:	485b      	ldr	r0, [pc, #364]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b976:	f7f8 fccf 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b97a:	20fa      	movs	r0, #250	; 0xfa
1000b97c:	00c0      	lsls	r0, r0, #3
1000b97e:	f7f5 fea5 	bl	100016cc <pal_os_timer_delay_in_milliseconds>

	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_generate_keypair);
1000b982:	f7f5 fe9d 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b986:	1c07      	adds	r7, r0, #0
1000b988:	f7ff fc4e 	bl	1000b228 <optiga_shell_crypt_generate_keypair>
1000b98c:	f7f5 fe98 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b990:	1c31      	adds	r1, r6, #0
1000b992:	1bc2      	subs	r2, r0, r7
1000b994:	4668      	mov	r0, sp
1000b996:	f000 fd19 	bl	1000c3cc <siprintf>
1000b99a:	1c29      	adds	r1, r5, #0
1000b99c:	1c22      	adds	r2, r4, #0
1000b99e:	4668      	mov	r0, sp
1000b9a0:	f7f8 fcd6 	bl	10004350 <optiga_lib_print_message>
1000b9a4:	484f      	ldr	r0, [pc, #316]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b9a6:	f7f8 fcb7 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b9aa:	20fa      	movs	r0, #250	; 0xfa
1000b9ac:	00c0      	lsls	r0, r0, #3
1000b9ae:	f7f5 fe8d 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_sign);
1000b9b2:	f7f5 fe85 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b9b6:	1c07      	adds	r7, r0, #0
1000b9b8:	f7ff fc1e 	bl	1000b1f8 <optiga_shell_crypt_rsa_sign>
1000b9bc:	f7f5 fe80 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b9c0:	1c31      	adds	r1, r6, #0
1000b9c2:	1bc2      	subs	r2, r0, r7
1000b9c4:	4668      	mov	r0, sp
1000b9c6:	f000 fd01 	bl	1000c3cc <siprintf>
1000b9ca:	1c29      	adds	r1, r5, #0
1000b9cc:	1c22      	adds	r2, r4, #0
1000b9ce:	4668      	mov	r0, sp
1000b9d0:	f7f8 fcbe 	bl	10004350 <optiga_lib_print_message>
1000b9d4:	4843      	ldr	r0, [pc, #268]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000b9d6:	f7f8 fc9f 	bl	10004318 <optiga_lib_print_string_with_newline>
1000b9da:	20fa      	movs	r0, #250	; 0xfa
1000b9dc:	00c0      	lsls	r0, r0, #3
1000b9de:	f7f5 fe75 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_verify);
1000b9e2:	f7f5 fe6d 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b9e6:	1c07      	adds	r7, r0, #0
1000b9e8:	f7ff fbee 	bl	1000b1c8 <optiga_shell_crypt_rsa_verify>
1000b9ec:	f7f5 fe68 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000b9f0:	1c31      	adds	r1, r6, #0
1000b9f2:	1bc2      	subs	r2, r0, r7
1000b9f4:	4668      	mov	r0, sp
1000b9f6:	f000 fce9 	bl	1000c3cc <siprintf>
1000b9fa:	1c29      	adds	r1, r5, #0
1000b9fc:	1c22      	adds	r2, r4, #0
1000b9fe:	4668      	mov	r0, sp
1000ba00:	f7f8 fca6 	bl	10004350 <optiga_lib_print_message>
1000ba04:	4837      	ldr	r0, [pc, #220]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000ba06:	f7f8 fc87 	bl	10004318 <optiga_lib_print_string_with_newline>
1000ba0a:	20fa      	movs	r0, #250	; 0xfa
1000ba0c:	00c0      	lsls	r0, r0, #3
1000ba0e:	f7f5 fe5d 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_encrypt_message);
1000ba12:	f7f5 fe55 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000ba16:	1c07      	adds	r7, r0, #0
1000ba18:	f7ff fbbe 	bl	1000b198 <optiga_shell_crypt_rsa_encrypt_message>
1000ba1c:	f7f5 fe50 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000ba20:	1c31      	adds	r1, r6, #0
1000ba22:	1bc2      	subs	r2, r0, r7
1000ba24:	4668      	mov	r0, sp
1000ba26:	f000 fcd1 	bl	1000c3cc <siprintf>
1000ba2a:	1c29      	adds	r1, r5, #0
1000ba2c:	1c22      	adds	r2, r4, #0
1000ba2e:	4668      	mov	r0, sp
1000ba30:	f7f8 fc8e 	bl	10004350 <optiga_lib_print_message>
1000ba34:	482b      	ldr	r0, [pc, #172]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000ba36:	f7f8 fc6f 	bl	10004318 <optiga_lib_print_string_with_newline>
1000ba3a:	20fa      	movs	r0, #250	; 0xfa
1000ba3c:	00c0      	lsls	r0, r0, #3
1000ba3e:	f7f5 fe45 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_encrypt_session);
1000ba42:	f7f5 fe3d 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000ba46:	1c07      	adds	r7, r0, #0
1000ba48:	f7ff fb8e 	bl	1000b168 <optiga_shell_crypt_rsa_encrypt_session>
1000ba4c:	f7f5 fe38 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000ba50:	1c31      	adds	r1, r6, #0
1000ba52:	1bc2      	subs	r2, r0, r7
1000ba54:	4668      	mov	r0, sp
1000ba56:	f000 fcb9 	bl	1000c3cc <siprintf>
1000ba5a:	1c29      	adds	r1, r5, #0
1000ba5c:	1c22      	adds	r2, r4, #0
1000ba5e:	4668      	mov	r0, sp
1000ba60:	f7f8 fc76 	bl	10004350 <optiga_lib_print_message>
1000ba64:	481f      	ldr	r0, [pc, #124]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000ba66:	f7f8 fc57 	bl	10004318 <optiga_lib_print_string_with_newline>
1000ba6a:	20fa      	movs	r0, #250	; 0xfa
1000ba6c:	00c0      	lsls	r0, r0, #3
1000ba6e:	f7f5 fe2d 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_decrypt_and_store);
1000ba72:	f7f5 fe25 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000ba76:	1c07      	adds	r7, r0, #0
1000ba78:	f7ff fb42 	bl	1000b100 <optiga_shell_crypt_rsa_decrypt_and_store>
1000ba7c:	f7f5 fe20 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000ba80:	1c31      	adds	r1, r6, #0
1000ba82:	1bc2      	subs	r2, r0, r7
1000ba84:	4668      	mov	r0, sp
1000ba86:	f000 fca1 	bl	1000c3cc <siprintf>
1000ba8a:	1c29      	adds	r1, r5, #0
1000ba8c:	1c22      	adds	r2, r4, #0
1000ba8e:	4668      	mov	r0, sp
1000ba90:	f7f8 fc5e 	bl	10004350 <optiga_lib_print_message>
1000ba94:	4813      	ldr	r0, [pc, #76]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000ba96:	f7f8 fc3f 	bl	10004318 <optiga_lib_print_string_with_newline>
1000ba9a:	20fa      	movs	r0, #250	; 0xfa
1000ba9c:	00c0      	lsls	r0, r0, #3
1000ba9e:	f7f5 fe15 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_decrypt_and_export);
1000baa2:	f7f5 fe0d 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000baa6:	1c07      	adds	r7, r0, #0
1000baa8:	f7ff fafc 	bl	1000b0a4 <optiga_shell_crypt_rsa_decrypt_and_export>
1000baac:	f7f5 fe08 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000bab0:	1c31      	adds	r1, r6, #0
1000bab2:	1bc2      	subs	r2, r0, r7
1000bab4:	4668      	mov	r0, sp
1000bab6:	f000 fc89 	bl	1000c3cc <siprintf>
1000baba:	1c29      	adds	r1, r5, #0
1000babc:	1c22      	adds	r2, r4, #0
1000babe:	4668      	mov	r0, sp
1000bac0:	f7f8 fc46 	bl	10004350 <optiga_lib_print_message>
1000bac4:	4807      	ldr	r0, [pc, #28]	; (1000bae4 <optiga_shell_selftest+0x3e0>)
1000bac6:	f7f8 fc27 	bl	10004318 <optiga_lib_print_string_with_newline>
1000baca:	20fa      	movs	r0, #250	; 0xfa
1000bacc:	00c0      	lsls	r0, r0, #3
1000bace:	f7f5 fdfd 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
}
1000bad2:	b009      	add	sp, #36	; 0x24
1000bad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bad6:	46c0      	nop			; (mov r8, r8)
1000bad8:	100103e8 	.word	0x100103e8
1000badc:	1000f50e 	.word	0x1000f50e
1000bae0:	1000f521 	.word	0x1000f521
1000bae4:	10010349 	.word	0x10010349

1000bae8 <optiga_shell_show_usage>:
};

#define OPTIGA_SIZE_OF_CMDS			(sizeof(optiga_cmds)/sizeof(optiga_example_cmd_t))

static void optiga_shell_show_usage()
{
1000bae8:	b538      	push	{r3, r4, r5, lr}
	uint8_t number_of_cmds = OPTIGA_SIZE_OF_CMDS;
	uint8_t index = 0;
	optiga_example_cmd_t * current_cmd;
	optiga_lib_print_string_with_newline("");
1000baea:	480e      	ldr	r0, [pc, #56]	; (1000bb24 <optiga_shell_show_usage+0x3c>)
1000baec:	f7f8 fc14 	bl	10004318 <optiga_lib_print_string_with_newline>
	optiga_lib_print_string_with_newline("    usage                : optiga -<cmd>");
1000baf0:	480d      	ldr	r0, [pc, #52]	; (1000bb28 <optiga_shell_show_usage+0x40>)
1000baf2:	f7f8 fc11 	bl	10004318 <optiga_lib_print_string_with_newline>
1000baf6:	4b0d      	ldr	r3, [pc, #52]	; (1000bb2c <optiga_shell_show_usage+0x44>)
1000baf8:	1d1c      	adds	r4, r3, #4
1000bafa:	3325      	adds	r3, #37	; 0x25
1000bafc:	33ff      	adds	r3, #255	; 0xff
1000bafe:	1c1d      	adds	r5, r3, #0
	for(index = 0; index < number_of_cmds; index++)
	{
		current_cmd = &optiga_cmds[index];
		if(0 != strcmp("help",current_cmd->cmd_options))
1000bb00:	480b      	ldr	r0, [pc, #44]	; (1000bb30 <optiga_shell_show_usage+0x48>)
1000bb02:	6821      	ldr	r1, [r4, #0]
1000bb04:	f000 fc91 	bl	1000c42a <strcmp>
1000bb08:	2800      	cmp	r0, #0
1000bb0a:	d006      	beq.n	1000bb1a <optiga_shell_show_usage+0x32>
1000bb0c:	1f23      	subs	r3, r4, #4
		{
			optiga_lib_print_string(current_cmd->cmd_description);
1000bb0e:	6818      	ldr	r0, [r3, #0]
1000bb10:	f7f8 fbf4 	bl	100042fc <optiga_lib_print_string>
			optiga_lib_print_string_with_newline(current_cmd->cmd_options);
1000bb14:	6820      	ldr	r0, [r4, #0]
1000bb16:	f7f8 fbff 	bl	10004318 <optiga_lib_print_string_with_newline>
1000bb1a:	340c      	adds	r4, #12
	uint8_t number_of_cmds = OPTIGA_SIZE_OF_CMDS;
	uint8_t index = 0;
	optiga_example_cmd_t * current_cmd;
	optiga_lib_print_string_with_newline("");
	optiga_lib_print_string_with_newline("    usage                : optiga -<cmd>");
	for(index = 0; index < number_of_cmds; index++)
1000bb1c:	42ac      	cmp	r4, r5
1000bb1e:	d1ef      	bne.n	1000bb00 <optiga_shell_show_usage+0x18>
		{
			optiga_lib_print_string(current_cmd->cmd_description);
			optiga_lib_print_string_with_newline(current_cmd->cmd_options);
		}
	}
}
1000bb20:	bd38      	pop	{r3, r4, r5, pc}
1000bb22:	46c0      	nop			; (mov r8, r8)
1000bb24:	10010349 	.word	0x10010349
1000bb28:	100103fe 	.word	0x100103fe
1000bb2c:	20002718 	.word	0x20002718
1000bb30:	10010427 	.word	0x10010427

1000bb34 <optiga_shell_deinit>:
        OPTIGA_SHELL_LOG_MESSAGE("Starting OPTIGA example demonstration..\n");
	}while(FALSE);
}

static void optiga_shell_deinit()
{
1000bb34:	b538      	push	{r3, r4, r5, lr}
	{
		/**
		 * Close the application on OPTIGA after all the operations are executed
		 * using optiga_util_close_application
		 */
		optiga_lib_status = OPTIGA_LIB_BUSY;
1000bb36:	2301      	movs	r3, #1
		return_status = optiga_util_close_application(me_util, 0);
1000bb38:	4d09      	ldr	r5, [pc, #36]	; (1000bb60 <optiga_shell_deinit+0x2c>)
	{
		/**
		 * Close the application on OPTIGA after all the operations are executed
		 * using optiga_util_close_application
		 */
		optiga_lib_status = OPTIGA_LIB_BUSY;
1000bb3a:	4c0a      	ldr	r4, [pc, #40]	; (1000bb64 <optiga_shell_deinit+0x30>)
		return_status = optiga_util_close_application(me_util, 0);
1000bb3c:	6828      	ldr	r0, [r5, #0]
1000bb3e:	2100      	movs	r1, #0
	{
		/**
		 * Close the application on OPTIGA after all the operations are executed
		 * using optiga_util_close_application
		 */
		optiga_lib_status = OPTIGA_LIB_BUSY;
1000bb40:	8023      	strh	r3, [r4, #0]
		return_status = optiga_util_close_application(me_util, 0);
1000bb42:	f7f5 feb1 	bl	100018a8 <optiga_util_close_application>

		if (OPTIGA_LIB_SUCCESS != return_status)
1000bb46:	2800      	cmp	r0, #0
1000bb48:	d108      	bne.n	1000bb5c <optiga_shell_deinit+0x28>
		{
			break;
		}

		while (optiga_lib_status == OPTIGA_LIB_BUSY)
1000bb4a:	8823      	ldrh	r3, [r4, #0]
1000bb4c:	2b01      	cmp	r3, #1
1000bb4e:	d0fc      	beq.n	1000bb4a <optiga_shell_deinit+0x16>
		{
			//Wait until the optiga_util_close_application is completed
		}

		if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000bb50:	8823      	ldrh	r3, [r4, #0]
1000bb52:	2b00      	cmp	r3, #0
1000bb54:	d102      	bne.n	1000bb5c <optiga_shell_deinit+0x28>
			//optiga util close application failed
			break;
		}

		// destroy util and crypt instances
		optiga_util_destroy(me_util);
1000bb56:	6828      	ldr	r0, [r5, #0]
1000bb58:	f7f5 fe58 	bl	1000180c <optiga_util_destroy>
	}while(FALSE);
}
1000bb5c:	bd38      	pop	{r3, r4, r5, pc}
1000bb5e:	46c0      	nop			; (mov r8, r8)
1000bb60:	20002ffc 	.word	0x20002ffc
1000bb64:	20003000 	.word	0x20003000

1000bb68 <optiga_shell_begin>:
{
	optiga_lib_print_string("$");
}

void optiga_shell_begin(void)
{
1000bb68:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ch = 0;
1000bb6a:	2500      	movs	r5, #0
{
	optiga_lib_print_string("$");
}

void optiga_shell_begin(void)
{
1000bb6c:	b099      	sub	sp, #100	; 0x64

}

static void optiga_shell_show_prompt()
{
	optiga_lib_print_string("$");
1000bb6e:	4c38      	ldr	r4, [pc, #224]	; (1000bc50 <optiga_shell_begin+0xe8>)
}

void optiga_shell_begin(void)
{
	uint8_t ch = 0;
1000bb70:	ab02      	add	r3, sp, #8
1000bb72:	1cde      	adds	r6, r3, #3

}

static void optiga_shell_show_prompt()
{
	optiga_lib_print_string("$");
1000bb74:	1c20      	adds	r0, r4, #0
}

void optiga_shell_begin(void)
{
	uint8_t ch = 0;
1000bb76:	7035      	strb	r5, [r6, #0]

}

static void optiga_shell_show_prompt()
{
	optiga_lib_print_string("$");
1000bb78:	f7f8 fbc0 	bl	100042fc <optiga_lib_print_string>
	uint8_t ch = 0;
	char_t user_cmd[50];
	uint8_t index = 0;

	optiga_shell_show_prompt();
	optiga_shell_show_usage();
1000bb7c:	f7ff ffb4 	bl	1000bae8 <optiga_shell_show_usage>

}

static void optiga_shell_show_prompt()
{
	optiga_lib_print_string("$");
1000bb80:	1c20      	adds	r0, r4, #0
1000bb82:	f7f8 fbbb 	bl	100042fc <optiga_lib_print_string>
1000bb86:	9400      	str	r4, [sp, #0]
	optiga_shell_show_usage();
	optiga_shell_show_prompt();

	while(TRUE)
	{
		if (0 == pal_logger_read(&cunit_console,&ch,1))
1000bb88:	4f32      	ldr	r7, [pc, #200]	; (1000bc54 <optiga_shell_begin+0xec>)
1000bb8a:	1c31      	adds	r1, r6, #0
1000bb8c:	1c38      	adds	r0, r7, #0
1000bb8e:	2201      	movs	r2, #1
1000bb90:	f7f5 fcdc 	bl	1000154c <pal_logger_read>
1000bb94:	2800      	cmp	r0, #0
1000bb96:	d1f7      	bne.n	1000bb88 <optiga_shell_begin+0x20>
		{

			if(ch == 0x0d || ch == 0x0a)
1000bb98:	7833      	ldrb	r3, [r6, #0]
1000bb9a:	ac0b      	add	r4, sp, #44	; 0x2c
1000bb9c:	2b0d      	cmp	r3, #13
1000bb9e:	d001      	beq.n	1000bba4 <optiga_shell_begin+0x3c>
1000bba0:	2b0a      	cmp	r3, #10
1000bba2:	d14b      	bne.n	1000bc3c <optiga_shell_begin+0xd4>
			{
				user_cmd[index++] = 0;
1000bba4:	2700      	movs	r7, #0
1000bba6:	5567      	strb	r7, [r4, r5]
				index = 0;
				optiga_lib_print_string_with_newline("");
1000bba8:	4d2b      	ldr	r5, [pc, #172]	; (1000bc58 <optiga_shell_begin+0xf0>)
1000bbaa:	1c28      	adds	r0, r5, #0
1000bbac:	f7f8 fbb4 	bl	10004318 <optiga_lib_print_string_with_newline>
	}
}

static void optiga_shell_trim_cmd(char_t * user_cmd)
{
	char_t* i = user_cmd;
1000bbb0:	1c22      	adds	r2, r4, #0
1000bbb2:	9501      	str	r5, [sp, #4]
	char_t* j = user_cmd;
	while(*j != 0)
1000bbb4:	5de3      	ldrb	r3, [r4, r7]
	{
		*i = *j++;
1000bbb6:	7013      	strb	r3, [r2, #0]

static void optiga_shell_trim_cmd(char_t * user_cmd)
{
	char_t* i = user_cmd;
	char_t* j = user_cmd;
	while(*j != 0)
1000bbb8:	2b00      	cmp	r3, #0
1000bbba:	d005      	beq.n	1000bbc8 <optiga_shell_begin+0x60>
	{
		*i = *j++;
		if(*i != ' ')
			i++;
1000bbbc:	3b20      	subs	r3, #32
1000bbbe:	1e59      	subs	r1, r3, #1
1000bbc0:	418b      	sbcs	r3, r1
1000bbc2:	3701      	adds	r7, #1
1000bbc4:	18d2      	adds	r2, r2, r3
1000bbc6:	e7f5      	b.n	1000bbb4 <optiga_shell_begin+0x4c>
	}
	*i = 0;
	if(strlen(user_cmd)>strlen(OPTIGA_SHELL))
1000bbc8:	1c20      	adds	r0, r4, #0
1000bbca:	f000 fc40 	bl	1000c44e <strlen>
1000bbce:	2809      	cmp	r0, #9
1000bbd0:	d903      	bls.n	1000bbda <optiga_shell_begin+0x72>
	{
		strcpy(user_cmd,user_cmd+strlen(OPTIGA_SHELL)-1);
1000bbd2:	1c20      	adds	r0, r4, #0
1000bbd4:	a90d      	add	r1, sp, #52	; 0x34
1000bbd6:	f000 fc32 	bl	1000c43e <strcpy>
	}
}

static void optiga_shell_trim_cmd(char_t * user_cmd)
{
	char_t* i = user_cmd;
1000bbda:	2700      	movs	r7, #0
1000bbdc:	250c      	movs	r5, #12
1000bbde:	437d      	muls	r5, r7
1000bbe0:	4b1e      	ldr	r3, [pc, #120]	; (1000bc5c <optiga_shell_begin+0xf4>)
	optiga_shell_trim_cmd(user_cmd);

	for(index = 0; index < number_of_cmds; index++)
	{
		current_cmd = &optiga_cmds[index];
		if((0 == strcmp(user_cmd,current_cmd->cmd_options)))
1000bbe2:	1c20      	adds	r0, r4, #0
1000bbe4:	195d      	adds	r5, r3, r5
1000bbe6:	6869      	ldr	r1, [r5, #4]
1000bbe8:	f000 fc1f 	bl	1000c42a <strcmp>
1000bbec:	2800      	cmp	r0, #0
1000bbee:	d11b      	bne.n	1000bc28 <optiga_shell_begin+0xc0>
		{
			if(NULL != current_cmd->cmd_handler)
1000bbf0:	68ab      	ldr	r3, [r5, #8]
1000bbf2:	2b00      	cmp	r3, #0
1000bbf4:	d014      	beq.n	1000bc20 <optiga_shell_begin+0xb8>
			{
				int timestamp = pal_os_timer_get_time_in_milliseconds();
1000bbf6:	f7f5 fd63 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
				current_cmd->cmd_handler();
1000bbfa:	68ab      	ldr	r3, [r5, #8]
		current_cmd = &optiga_cmds[index];
		if((0 == strcmp(user_cmd,current_cmd->cmd_options)))
		{
			if(NULL != current_cmd->cmd_handler)
			{
				int timestamp = pal_os_timer_get_time_in_milliseconds();
1000bbfc:	1c04      	adds	r4, r0, #0
				current_cmd->cmd_handler();
1000bbfe:	4798      	blx	r3
				char buffer_string[30];
				sprintf(buffer_string, "Example takes %d msec", (int) pal_os_timer_get_time_in_milliseconds() - timestamp);
1000bc00:	f7f5 fd5e 	bl	100016c0 <pal_os_timer_get_time_in_milliseconds>
1000bc04:	4916      	ldr	r1, [pc, #88]	; (1000bc60 <optiga_shell_begin+0xf8>)
1000bc06:	1b02      	subs	r2, r0, r4
1000bc08:	a803      	add	r0, sp, #12
1000bc0a:	f000 fbdf 	bl	1000c3cc <siprintf>
				OPTIGA_EXAMPLE_LOG_MESSAGE(buffer_string);
1000bc0e:	a803      	add	r0, sp, #12
1000bc10:	4914      	ldr	r1, [pc, #80]	; (1000bc64 <optiga_shell_begin+0xfc>)
1000bc12:	4a15      	ldr	r2, [pc, #84]	; (1000bc68 <optiga_shell_begin+0x100>)
1000bc14:	f7f8 fb9c 	bl	10004350 <optiga_lib_print_message>
				optiga_lib_print_string_with_newline("");
1000bc18:	9801      	ldr	r0, [sp, #4]
1000bc1a:	f7f8 fb7d 	bl	10004318 <optiga_lib_print_string_with_newline>
1000bc1e:	e008      	b.n	1000bc32 <optiga_shell_begin+0xca>
				cmd_found = 1;
				break;
			}
			else
			{
				optiga_lib_print_string_with_newline("No example exists for this request");
1000bc20:	4812      	ldr	r0, [pc, #72]	; (1000bc6c <optiga_shell_begin+0x104>)
1000bc22:	f7f8 fb79 	bl	10004318 <optiga_lib_print_string_with_newline>
1000bc26:	e002      	b.n	1000bc2e <optiga_shell_begin+0xc6>
1000bc28:	3701      	adds	r7, #1
	uint8_t index = 0,cmd_found = 0;
	optiga_example_cmd_t * current_cmd;

	optiga_shell_trim_cmd(user_cmd);

	for(index = 0; index < number_of_cmds; index++)
1000bc2a:	2f18      	cmp	r7, #24
1000bc2c:	d1d6      	bne.n	1000bbdc <optiga_shell_begin+0x74>
			}
		}
	}
	if(!cmd_found)
	{
		optiga_shell_show_usage();
1000bc2e:	f7ff ff5b 	bl	1000bae8 <optiga_shell_show_usage>

}

static void optiga_shell_show_prompt()
{
	optiga_lib_print_string("$");
1000bc32:	9800      	ldr	r0, [sp, #0]
1000bc34:	f7f8 fb62 	bl	100042fc <optiga_lib_print_string>
		{

			if(ch == 0x0d || ch == 0x0a)
			{
				user_cmd[index++] = 0;
				index = 0;
1000bc38:	2500      	movs	r5, #0
1000bc3a:	e7a5      	b.n	1000bb88 <optiga_shell_begin+0x20>
				optiga_shell_show_prompt();
			}
			else
			{
				//keep adding
				pal_logger_write(&cunit_console, &ch, 1);
1000bc3c:	2201      	movs	r2, #1
1000bc3e:	1c38      	adds	r0, r7, #0
1000bc40:	1c31      	adds	r1, r6, #0
1000bc42:	f7f5 fc6f 	bl	10001524 <pal_logger_write>
				user_cmd[index++] = ch;
1000bc46:	7832      	ldrb	r2, [r6, #0]
1000bc48:	1c6b      	adds	r3, r5, #1
1000bc4a:	5562      	strb	r2, [r4, r5]
1000bc4c:	b2dd      	uxtb	r5, r3
1000bc4e:	e79b      	b.n	1000bb88 <optiga_shell_begin+0x20>
1000bc50:	1001042c 	.word	0x1001042c
1000bc54:	20001564 	.word	0x20001564
1000bc58:	10010349 	.word	0x10010349
1000bc5c:	20002718 	.word	0x20002718
1000bc60:	100103e8 	.word	0x100103e8
1000bc64:	1000f028 	.word	0x1000f028
1000bc68:	1000cae0 	.word	0x1000cae0
1000bc6c:	1001042e 	.word	0x1001042e

1000bc70 <optiga_shell_wait_for_user>:
		}
	}
}

void optiga_shell_wait_for_user(void)
{
1000bc70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t ch = 0;
1000bc72:	466b      	mov	r3, sp
1000bc74:	1ddd      	adds	r5, r3, #7
1000bc76:	2300      	movs	r3, #0

	optiga_lib_print_string_with_newline("Press any key to start optiga mini shell");
1000bc78:	4c0a      	ldr	r4, [pc, #40]	; (1000bca4 <optiga_shell_wait_for_user+0x34>)
	}
}

void optiga_shell_wait_for_user(void)
{
	uint8_t ch = 0;
1000bc7a:	702b      	strb	r3, [r5, #0]

	optiga_lib_print_string_with_newline("Press any key to start optiga mini shell");
1000bc7c:	1c20      	adds	r0, r4, #0
1000bc7e:	f7f8 fb4b 	bl	10004318 <optiga_lib_print_string_with_newline>
	while(1U)
	{
		pal_logger_read(&cunit_console,&ch,1);
1000bc82:	4809      	ldr	r0, [pc, #36]	; (1000bca8 <optiga_shell_wait_for_user+0x38>)
1000bc84:	1c29      	adds	r1, r5, #0
1000bc86:	2201      	movs	r2, #1
1000bc88:	f7f5 fc60 	bl	1000154c <pal_logger_read>
		if (ch != 0)
1000bc8c:	782b      	ldrb	r3, [r5, #0]
1000bc8e:	2b00      	cmp	r3, #0
1000bc90:	d107      	bne.n	1000bca2 <optiga_shell_wait_for_user+0x32>
		{
			break;
		}
		else
		{
			optiga_lib_print_string_with_newline("Press any key to start optiga mini shell");
1000bc92:	1c20      	adds	r0, r4, #0
1000bc94:	f7f8 fb40 	bl	10004318 <optiga_lib_print_string_with_newline>
			pal_os_timer_delay_in_milliseconds(2000);
1000bc98:	20fa      	movs	r0, #250	; 0xfa
1000bc9a:	00c0      	lsls	r0, r0, #3
1000bc9c:	f7f5 fd16 	bl	100016cc <pal_os_timer_delay_in_milliseconds>
		}
	}
1000bca0:	e7ef      	b.n	1000bc82 <optiga_shell_wait_for_user+0x12>
}
1000bca2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
1000bca4:	10010451 	.word	0x10010451
1000bca8:	20001564 	.word	0x20001564

1000bcac <__gnu_thumb1_case_uqi>:
1000bcac:	b402      	push	{r1}
1000bcae:	4671      	mov	r1, lr
1000bcb0:	0849      	lsrs	r1, r1, #1
1000bcb2:	0049      	lsls	r1, r1, #1
1000bcb4:	5c09      	ldrb	r1, [r1, r0]
1000bcb6:	0049      	lsls	r1, r1, #1
1000bcb8:	448e      	add	lr, r1
1000bcba:	bc02      	pop	{r1}
1000bcbc:	4770      	bx	lr
1000bcbe:	46c0      	nop			; (mov r8, r8)

1000bcc0 <__gnu_thumb1_case_uhi>:
1000bcc0:	b403      	push	{r0, r1}
1000bcc2:	4671      	mov	r1, lr
1000bcc4:	0849      	lsrs	r1, r1, #1
1000bcc6:	0040      	lsls	r0, r0, #1
1000bcc8:	0049      	lsls	r1, r1, #1
1000bcca:	5a09      	ldrh	r1, [r1, r0]
1000bccc:	0049      	lsls	r1, r1, #1
1000bcce:	448e      	add	lr, r1
1000bcd0:	bc03      	pop	{r0, r1}
1000bcd2:	4770      	bx	lr

1000bcd4 <__aeabi_llsr>:
1000bcd4:	40d0      	lsrs	r0, r2
1000bcd6:	1c0b      	adds	r3, r1, #0
1000bcd8:	40d1      	lsrs	r1, r2
1000bcda:	469c      	mov	ip, r3
1000bcdc:	3a20      	subs	r2, #32
1000bcde:	40d3      	lsrs	r3, r2
1000bce0:	4318      	orrs	r0, r3
1000bce2:	4252      	negs	r2, r2
1000bce4:	4663      	mov	r3, ip
1000bce6:	4093      	lsls	r3, r2
1000bce8:	4318      	orrs	r0, r3
1000bcea:	4770      	bx	lr

1000bcec <__aeabi_uldivmod>:
1000bcec:	2b00      	cmp	r3, #0
1000bcee:	d111      	bne.n	1000bd14 <__aeabi_uldivmod+0x28>
1000bcf0:	2a00      	cmp	r2, #0
1000bcf2:	d10f      	bne.n	1000bd14 <__aeabi_uldivmod+0x28>
1000bcf4:	2900      	cmp	r1, #0
1000bcf6:	d100      	bne.n	1000bcfa <__aeabi_uldivmod+0xe>
1000bcf8:	2800      	cmp	r0, #0
1000bcfa:	d002      	beq.n	1000bd02 <__aeabi_uldivmod+0x16>
1000bcfc:	2100      	movs	r1, #0
1000bcfe:	43c9      	mvns	r1, r1
1000bd00:	1c08      	adds	r0, r1, #0
1000bd02:	b407      	push	{r0, r1, r2}
1000bd04:	4802      	ldr	r0, [pc, #8]	; (1000bd10 <__aeabi_uldivmod+0x24>)
1000bd06:	a102      	add	r1, pc, #8	; (adr r1, 1000bd10 <__aeabi_uldivmod+0x24>)
1000bd08:	1840      	adds	r0, r0, r1
1000bd0a:	9002      	str	r0, [sp, #8]
1000bd0c:	bd03      	pop	{r0, r1, pc}
1000bd0e:	46c0      	nop			; (mov r8, r8)
1000bd10:	000000dd 	.word	0x000000dd
1000bd14:	b403      	push	{r0, r1}
1000bd16:	4668      	mov	r0, sp
1000bd18:	b501      	push	{r0, lr}
1000bd1a:	9802      	ldr	r0, [sp, #8]
1000bd1c:	f000 f84c 	bl	1000bdb8 <__gnu_uldivmod_helper>
1000bd20:	9b01      	ldr	r3, [sp, #4]
1000bd22:	469e      	mov	lr, r3
1000bd24:	b002      	add	sp, #8
1000bd26:	bc0c      	pop	{r2, r3}
1000bd28:	4770      	bx	lr
1000bd2a:	46c0      	nop			; (mov r8, r8)

1000bd2c <__aeabi_lmul>:
1000bd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bd2e:	464f      	mov	r7, r9
1000bd30:	4646      	mov	r6, r8
1000bd32:	0405      	lsls	r5, r0, #16
1000bd34:	0c2d      	lsrs	r5, r5, #16
1000bd36:	1c2c      	adds	r4, r5, #0
1000bd38:	b4c0      	push	{r6, r7}
1000bd3a:	0417      	lsls	r7, r2, #16
1000bd3c:	0c16      	lsrs	r6, r2, #16
1000bd3e:	0c3f      	lsrs	r7, r7, #16
1000bd40:	4699      	mov	r9, r3
1000bd42:	0c03      	lsrs	r3, r0, #16
1000bd44:	437c      	muls	r4, r7
1000bd46:	4375      	muls	r5, r6
1000bd48:	435f      	muls	r7, r3
1000bd4a:	4373      	muls	r3, r6
1000bd4c:	197d      	adds	r5, r7, r5
1000bd4e:	0c26      	lsrs	r6, r4, #16
1000bd50:	19ad      	adds	r5, r5, r6
1000bd52:	469c      	mov	ip, r3
1000bd54:	42af      	cmp	r7, r5
1000bd56:	d903      	bls.n	1000bd60 <__aeabi_lmul+0x34>
1000bd58:	2380      	movs	r3, #128	; 0x80
1000bd5a:	025b      	lsls	r3, r3, #9
1000bd5c:	4698      	mov	r8, r3
1000bd5e:	44c4      	add	ip, r8
1000bd60:	464b      	mov	r3, r9
1000bd62:	4351      	muls	r1, r2
1000bd64:	4343      	muls	r3, r0
1000bd66:	0424      	lsls	r4, r4, #16
1000bd68:	0c2e      	lsrs	r6, r5, #16
1000bd6a:	0c24      	lsrs	r4, r4, #16
1000bd6c:	042d      	lsls	r5, r5, #16
1000bd6e:	4466      	add	r6, ip
1000bd70:	192c      	adds	r4, r5, r4
1000bd72:	1859      	adds	r1, r3, r1
1000bd74:	1989      	adds	r1, r1, r6
1000bd76:	1c20      	adds	r0, r4, #0
1000bd78:	bc0c      	pop	{r2, r3}
1000bd7a:	4690      	mov	r8, r2
1000bd7c:	4699      	mov	r9, r3
1000bd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000bd80 <__gnu_ldivmod_helper>:
1000bd80:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bd82:	b083      	sub	sp, #12
1000bd84:	1c16      	adds	r6, r2, #0
1000bd86:	1c1f      	adds	r7, r3, #0
1000bd88:	9000      	str	r0, [sp, #0]
1000bd8a:	9101      	str	r1, [sp, #4]
1000bd8c:	f000 f84e 	bl	1000be2c <__divdi3>
1000bd90:	1c04      	adds	r4, r0, #0
1000bd92:	1c0d      	adds	r5, r1, #0
1000bd94:	1c22      	adds	r2, r4, #0
1000bd96:	1c2b      	adds	r3, r5, #0
1000bd98:	1c30      	adds	r0, r6, #0
1000bd9a:	1c39      	adds	r1, r7, #0
1000bd9c:	f7ff ffc6 	bl	1000bd2c <__aeabi_lmul>
1000bda0:	9a00      	ldr	r2, [sp, #0]
1000bda2:	9b01      	ldr	r3, [sp, #4]
1000bda4:	1a12      	subs	r2, r2, r0
1000bda6:	418b      	sbcs	r3, r1
1000bda8:	9908      	ldr	r1, [sp, #32]
1000bdaa:	1c20      	adds	r0, r4, #0
1000bdac:	600a      	str	r2, [r1, #0]
1000bdae:	604b      	str	r3, [r1, #4]
1000bdb0:	1c29      	adds	r1, r5, #0
1000bdb2:	b003      	add	sp, #12
1000bdb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bdb6:	46c0      	nop			; (mov r8, r8)

1000bdb8 <__gnu_uldivmod_helper>:
1000bdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bdba:	1c14      	adds	r4, r2, #0
1000bdbc:	b083      	sub	sp, #12
1000bdbe:	1c1d      	adds	r5, r3, #0
1000bdc0:	9000      	str	r0, [sp, #0]
1000bdc2:	9101      	str	r1, [sp, #4]
1000bdc4:	f000 f92a 	bl	1000c01c <__udivdi3>
1000bdc8:	1c22      	adds	r2, r4, #0
1000bdca:	1c2b      	adds	r3, r5, #0
1000bdcc:	1c06      	adds	r6, r0, #0
1000bdce:	1c0f      	adds	r7, r1, #0
1000bdd0:	f7ff ffac 	bl	1000bd2c <__aeabi_lmul>
1000bdd4:	9a00      	ldr	r2, [sp, #0]
1000bdd6:	9b01      	ldr	r3, [sp, #4]
1000bdd8:	1a12      	subs	r2, r2, r0
1000bdda:	418b      	sbcs	r3, r1
1000bddc:	9908      	ldr	r1, [sp, #32]
1000bdde:	1c30      	adds	r0, r6, #0
1000bde0:	600a      	str	r2, [r1, #0]
1000bde2:	604b      	str	r3, [r1, #4]
1000bde4:	1c39      	adds	r1, r7, #0
1000bde6:	b003      	add	sp, #12
1000bde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bdea:	46c0      	nop			; (mov r8, r8)

1000bdec <__aeabi_idiv0>:
1000bdec:	4770      	bx	lr
1000bdee:	46c0      	nop			; (mov r8, r8)

1000bdf0 <__clzsi2>:
1000bdf0:	211c      	movs	r1, #28
1000bdf2:	2301      	movs	r3, #1
1000bdf4:	041b      	lsls	r3, r3, #16
1000bdf6:	4298      	cmp	r0, r3
1000bdf8:	d301      	bcc.n	1000bdfe <__clzsi2+0xe>
1000bdfa:	0c00      	lsrs	r0, r0, #16
1000bdfc:	3910      	subs	r1, #16
1000bdfe:	0a1b      	lsrs	r3, r3, #8
1000be00:	4298      	cmp	r0, r3
1000be02:	d301      	bcc.n	1000be08 <__clzsi2+0x18>
1000be04:	0a00      	lsrs	r0, r0, #8
1000be06:	3908      	subs	r1, #8
1000be08:	091b      	lsrs	r3, r3, #4
1000be0a:	4298      	cmp	r0, r3
1000be0c:	d301      	bcc.n	1000be12 <__clzsi2+0x22>
1000be0e:	0900      	lsrs	r0, r0, #4
1000be10:	3904      	subs	r1, #4
1000be12:	a202      	add	r2, pc, #8	; (adr r2, 1000be1c <__clzsi2+0x2c>)
1000be14:	5c10      	ldrb	r0, [r2, r0]
1000be16:	1840      	adds	r0, r0, r1
1000be18:	4770      	bx	lr
1000be1a:	46c0      	nop			; (mov r8, r8)
1000be1c:	02020304 	.word	0x02020304
1000be20:	01010101 	.word	0x01010101
	...

1000be2c <__divdi3>:
1000be2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be2e:	4644      	mov	r4, r8
1000be30:	465f      	mov	r7, fp
1000be32:	4656      	mov	r6, sl
1000be34:	464d      	mov	r5, r9
1000be36:	b4f0      	push	{r4, r5, r6, r7}
1000be38:	1c1c      	adds	r4, r3, #0
1000be3a:	b085      	sub	sp, #20
1000be3c:	2900      	cmp	r1, #0
1000be3e:	da00      	bge.n	1000be42 <__divdi3+0x16>
1000be40:	e0a9      	b.n	1000bf96 <__divdi3+0x16a>
1000be42:	1c0f      	adds	r7, r1, #0
1000be44:	2100      	movs	r1, #0
1000be46:	1c06      	adds	r6, r0, #0
1000be48:	4688      	mov	r8, r1
1000be4a:	1c10      	adds	r0, r2, #0
1000be4c:	1c19      	adds	r1, r3, #0
1000be4e:	2c00      	cmp	r4, #0
1000be50:	da00      	bge.n	1000be54 <__divdi3+0x28>
1000be52:	e097      	b.n	1000bf84 <__divdi3+0x158>
1000be54:	1c34      	adds	r4, r6, #0
1000be56:	1c3d      	adds	r5, r7, #0
1000be58:	4682      	mov	sl, r0
1000be5a:	4689      	mov	r9, r1
1000be5c:	42b9      	cmp	r1, r7
1000be5e:	d873      	bhi.n	1000bf48 <__divdi3+0x11c>
1000be60:	d070      	beq.n	1000bf44 <__divdi3+0x118>
1000be62:	4649      	mov	r1, r9
1000be64:	4650      	mov	r0, sl
1000be66:	f000 f985 	bl	1000c174 <__clzdi2>
1000be6a:	4683      	mov	fp, r0
1000be6c:	1c39      	adds	r1, r7, #0
1000be6e:	1c30      	adds	r0, r6, #0
1000be70:	f000 f980 	bl	1000c174 <__clzdi2>
1000be74:	465b      	mov	r3, fp
1000be76:	1a18      	subs	r0, r3, r0
1000be78:	1c03      	adds	r3, r0, #0
1000be7a:	4683      	mov	fp, r0
1000be7c:	3b20      	subs	r3, #32
1000be7e:	469c      	mov	ip, r3
1000be80:	d500      	bpl.n	1000be84 <__divdi3+0x58>
1000be82:	e09c      	b.n	1000bfbe <__divdi3+0x192>
1000be84:	2300      	movs	r3, #0
1000be86:	2200      	movs	r2, #0
1000be88:	4651      	mov	r1, sl
1000be8a:	9200      	str	r2, [sp, #0]
1000be8c:	9301      	str	r3, [sp, #4]
1000be8e:	4663      	mov	r3, ip
1000be90:	4099      	lsls	r1, r3
1000be92:	9101      	str	r1, [sp, #4]
1000be94:	4651      	mov	r1, sl
1000be96:	4081      	lsls	r1, r0
1000be98:	9b01      	ldr	r3, [sp, #4]
1000be9a:	9100      	str	r1, [sp, #0]
1000be9c:	42bb      	cmp	r3, r7
1000be9e:	d900      	bls.n	1000bea2 <__divdi3+0x76>
1000bea0:	e083      	b.n	1000bfaa <__divdi3+0x17e>
1000bea2:	d100      	bne.n	1000bea6 <__divdi3+0x7a>
1000bea4:	e07e      	b.n	1000bfa4 <__divdi3+0x178>
1000bea6:	9a00      	ldr	r2, [sp, #0]
1000bea8:	9b01      	ldr	r3, [sp, #4]
1000beaa:	1c34      	adds	r4, r6, #0
1000beac:	1c3d      	adds	r5, r7, #0
1000beae:	1aa4      	subs	r4, r4, r2
1000beb0:	419d      	sbcs	r5, r3
1000beb2:	4663      	mov	r3, ip
1000beb4:	2b00      	cmp	r3, #0
1000beb6:	da00      	bge.n	1000beba <__divdi3+0x8e>
1000beb8:	e09a      	b.n	1000bff0 <__divdi3+0x1c4>
1000beba:	2600      	movs	r6, #0
1000bebc:	2700      	movs	r7, #0
1000bebe:	9602      	str	r6, [sp, #8]
1000bec0:	9703      	str	r7, [sp, #12]
1000bec2:	3601      	adds	r6, #1
1000bec4:	409e      	lsls	r6, r3
1000bec6:	9603      	str	r6, [sp, #12]
1000bec8:	2601      	movs	r6, #1
1000beca:	4086      	lsls	r6, r0
1000becc:	9602      	str	r6, [sp, #8]
1000bece:	2800      	cmp	r0, #0
1000bed0:	d100      	bne.n	1000bed4 <__divdi3+0xa8>
1000bed2:	e071      	b.n	1000bfb8 <__divdi3+0x18c>
1000bed4:	9900      	ldr	r1, [sp, #0]
1000bed6:	9a01      	ldr	r2, [sp, #4]
1000bed8:	07d3      	lsls	r3, r2, #31
1000beda:	4699      	mov	r9, r3
1000bedc:	464b      	mov	r3, r9
1000bede:	084e      	lsrs	r6, r1, #1
1000bee0:	431e      	orrs	r6, r3
1000bee2:	0857      	lsrs	r7, r2, #1
1000bee4:	2300      	movs	r3, #0
1000bee6:	2201      	movs	r2, #1
1000bee8:	e00c      	b.n	1000bf04 <__divdi3+0xd8>
1000beea:	42af      	cmp	r7, r5
1000beec:	d101      	bne.n	1000bef2 <__divdi3+0xc6>
1000beee:	42a6      	cmp	r6, r4
1000bef0:	d80a      	bhi.n	1000bf08 <__divdi3+0xdc>
1000bef2:	1ba4      	subs	r4, r4, r6
1000bef4:	41bd      	sbcs	r5, r7
1000bef6:	1924      	adds	r4, r4, r4
1000bef8:	416d      	adcs	r5, r5
1000befa:	3801      	subs	r0, #1
1000befc:	18a4      	adds	r4, r4, r2
1000befe:	415d      	adcs	r5, r3
1000bf00:	2800      	cmp	r0, #0
1000bf02:	d006      	beq.n	1000bf12 <__divdi3+0xe6>
1000bf04:	42af      	cmp	r7, r5
1000bf06:	d9f0      	bls.n	1000beea <__divdi3+0xbe>
1000bf08:	3801      	subs	r0, #1
1000bf0a:	1924      	adds	r4, r4, r4
1000bf0c:	416d      	adcs	r5, r5
1000bf0e:	2800      	cmp	r0, #0
1000bf10:	d1f8      	bne.n	1000bf04 <__divdi3+0xd8>
1000bf12:	2220      	movs	r2, #32
1000bf14:	9e02      	ldr	r6, [sp, #8]
1000bf16:	9f03      	ldr	r7, [sp, #12]
1000bf18:	465b      	mov	r3, fp
1000bf1a:	4252      	negs	r2, r2
1000bf1c:	1936      	adds	r6, r6, r4
1000bf1e:	416f      	adcs	r7, r5
1000bf20:	1899      	adds	r1, r3, r2
1000bf22:	d45a      	bmi.n	1000bfda <__divdi3+0x1ae>
1000bf24:	1c28      	adds	r0, r5, #0
1000bf26:	40c8      	lsrs	r0, r1
1000bf28:	1c2c      	adds	r4, r5, #0
1000bf2a:	465b      	mov	r3, fp
1000bf2c:	40dc      	lsrs	r4, r3
1000bf2e:	2900      	cmp	r1, #0
1000bf30:	db68      	blt.n	1000c004 <__divdi3+0x1d8>
1000bf32:	1c04      	adds	r4, r0, #0
1000bf34:	408c      	lsls	r4, r1
1000bf36:	1c23      	adds	r3, r4, #0
1000bf38:	4659      	mov	r1, fp
1000bf3a:	4088      	lsls	r0, r1
1000bf3c:	1c02      	adds	r2, r0, #0
1000bf3e:	1ab6      	subs	r6, r6, r2
1000bf40:	419f      	sbcs	r7, r3
1000bf42:	e003      	b.n	1000bf4c <__divdi3+0x120>
1000bf44:	42b0      	cmp	r0, r6
1000bf46:	d98c      	bls.n	1000be62 <__divdi3+0x36>
1000bf48:	2600      	movs	r6, #0
1000bf4a:	2700      	movs	r7, #0
1000bf4c:	4641      	mov	r1, r8
1000bf4e:	1e4b      	subs	r3, r1, #1
1000bf50:	4199      	sbcs	r1, r3
1000bf52:	2300      	movs	r3, #0
1000bf54:	9100      	str	r1, [sp, #0]
1000bf56:	9301      	str	r3, [sp, #4]
1000bf58:	9a00      	ldr	r2, [sp, #0]
1000bf5a:	9b01      	ldr	r3, [sp, #4]
1000bf5c:	2500      	movs	r5, #0
1000bf5e:	4254      	negs	r4, r2
1000bf60:	419d      	sbcs	r5, r3
1000bf62:	1c33      	adds	r3, r6, #0
1000bf64:	4063      	eors	r3, r4
1000bf66:	1c18      	adds	r0, r3, #0
1000bf68:	1c3b      	adds	r3, r7, #0
1000bf6a:	406b      	eors	r3, r5
1000bf6c:	1c19      	adds	r1, r3, #0
1000bf6e:	9b00      	ldr	r3, [sp, #0]
1000bf70:	9c01      	ldr	r4, [sp, #4]
1000bf72:	18c0      	adds	r0, r0, r3
1000bf74:	4161      	adcs	r1, r4
1000bf76:	b005      	add	sp, #20
1000bf78:	bc3c      	pop	{r2, r3, r4, r5}
1000bf7a:	4690      	mov	r8, r2
1000bf7c:	4699      	mov	r9, r3
1000bf7e:	46a2      	mov	sl, r4
1000bf80:	46ab      	mov	fp, r5
1000bf82:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bf84:	4643      	mov	r3, r8
1000bf86:	43db      	mvns	r3, r3
1000bf88:	1c0c      	adds	r4, r1, #0
1000bf8a:	4698      	mov	r8, r3
1000bf8c:	1c13      	adds	r3, r2, #0
1000bf8e:	2100      	movs	r1, #0
1000bf90:	4258      	negs	r0, r3
1000bf92:	41a1      	sbcs	r1, r4
1000bf94:	e75e      	b.n	1000be54 <__divdi3+0x28>
1000bf96:	2700      	movs	r7, #0
1000bf98:	4246      	negs	r6, r0
1000bf9a:	418f      	sbcs	r7, r1
1000bf9c:	2101      	movs	r1, #1
1000bf9e:	4249      	negs	r1, r1
1000bfa0:	4688      	mov	r8, r1
1000bfa2:	e752      	b.n	1000be4a <__divdi3+0x1e>
1000bfa4:	42b1      	cmp	r1, r6
1000bfa6:	d800      	bhi.n	1000bfaa <__divdi3+0x17e>
1000bfa8:	e77d      	b.n	1000bea6 <__divdi3+0x7a>
1000bfaa:	2600      	movs	r6, #0
1000bfac:	2700      	movs	r7, #0
1000bfae:	9602      	str	r6, [sp, #8]
1000bfb0:	9703      	str	r7, [sp, #12]
1000bfb2:	2800      	cmp	r0, #0
1000bfb4:	d000      	beq.n	1000bfb8 <__divdi3+0x18c>
1000bfb6:	e78d      	b.n	1000bed4 <__divdi3+0xa8>
1000bfb8:	9e02      	ldr	r6, [sp, #8]
1000bfba:	9f03      	ldr	r7, [sp, #12]
1000bfbc:	e7c6      	b.n	1000bf4c <__divdi3+0x120>
1000bfbe:	2120      	movs	r1, #32
1000bfc0:	4653      	mov	r3, sl
1000bfc2:	1a09      	subs	r1, r1, r0
1000bfc4:	40cb      	lsrs	r3, r1
1000bfc6:	2200      	movs	r2, #0
1000bfc8:	1c19      	adds	r1, r3, #0
1000bfca:	2300      	movs	r3, #0
1000bfcc:	9200      	str	r2, [sp, #0]
1000bfce:	9301      	str	r3, [sp, #4]
1000bfd0:	464b      	mov	r3, r9
1000bfd2:	4083      	lsls	r3, r0
1000bfd4:	430b      	orrs	r3, r1
1000bfd6:	9301      	str	r3, [sp, #4]
1000bfd8:	e75c      	b.n	1000be94 <__divdi3+0x68>
1000bfda:	465a      	mov	r2, fp
1000bfdc:	2320      	movs	r3, #32
1000bfde:	1a9b      	subs	r3, r3, r2
1000bfe0:	1c2a      	adds	r2, r5, #0
1000bfe2:	409a      	lsls	r2, r3
1000bfe4:	1c20      	adds	r0, r4, #0
1000bfe6:	1c13      	adds	r3, r2, #0
1000bfe8:	465a      	mov	r2, fp
1000bfea:	40d0      	lsrs	r0, r2
1000bfec:	4318      	orrs	r0, r3
1000bfee:	e79b      	b.n	1000bf28 <__divdi3+0xfc>
1000bff0:	2620      	movs	r6, #32
1000bff2:	2700      	movs	r7, #0
1000bff4:	1a33      	subs	r3, r6, r0
1000bff6:	2600      	movs	r6, #0
1000bff8:	9602      	str	r6, [sp, #8]
1000bffa:	9703      	str	r7, [sp, #12]
1000bffc:	2701      	movs	r7, #1
1000bffe:	40df      	lsrs	r7, r3
1000c000:	9703      	str	r7, [sp, #12]
1000c002:	e761      	b.n	1000bec8 <__divdi3+0x9c>
1000c004:	465b      	mov	r3, fp
1000c006:	2120      	movs	r1, #32
1000c008:	465d      	mov	r5, fp
1000c00a:	1ac9      	subs	r1, r1, r3
1000c00c:	1c03      	adds	r3, r0, #0
1000c00e:	40ac      	lsls	r4, r5
1000c010:	40cb      	lsrs	r3, r1
1000c012:	1c19      	adds	r1, r3, #0
1000c014:	1c23      	adds	r3, r4, #0
1000c016:	430b      	orrs	r3, r1
1000c018:	e78e      	b.n	1000bf38 <__divdi3+0x10c>
1000c01a:	46c0      	nop			; (mov r8, r8)

1000c01c <__udivdi3>:
1000c01c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c01e:	4645      	mov	r5, r8
1000c020:	464e      	mov	r6, r9
1000c022:	4657      	mov	r7, sl
1000c024:	b4e0      	push	{r5, r6, r7}
1000c026:	1c04      	adds	r4, r0, #0
1000c028:	b082      	sub	sp, #8
1000c02a:	1c0d      	adds	r5, r1, #0
1000c02c:	4691      	mov	r9, r2
1000c02e:	4698      	mov	r8, r3
1000c030:	428b      	cmp	r3, r1
1000c032:	d862      	bhi.n	1000c0fa <__udivdi3+0xde>
1000c034:	d05f      	beq.n	1000c0f6 <__udivdi3+0xda>
1000c036:	4641      	mov	r1, r8
1000c038:	4648      	mov	r0, r9
1000c03a:	f000 f89b 	bl	1000c174 <__clzdi2>
1000c03e:	1c29      	adds	r1, r5, #0
1000c040:	1c06      	adds	r6, r0, #0
1000c042:	1c20      	adds	r0, r4, #0
1000c044:	f000 f896 	bl	1000c174 <__clzdi2>
1000c048:	2320      	movs	r3, #32
1000c04a:	1a31      	subs	r1, r6, r0
1000c04c:	425b      	negs	r3, r3
1000c04e:	468a      	mov	sl, r1
1000c050:	18c8      	adds	r0, r1, r3
1000c052:	d465      	bmi.n	1000c120 <__udivdi3+0x104>
1000c054:	464b      	mov	r3, r9
1000c056:	4083      	lsls	r3, r0
1000c058:	1c1f      	adds	r7, r3, #0
1000c05a:	464b      	mov	r3, r9
1000c05c:	408b      	lsls	r3, r1
1000c05e:	1c1e      	adds	r6, r3, #0
1000c060:	42af      	cmp	r7, r5
1000c062:	d858      	bhi.n	1000c116 <__udivdi3+0xfa>
1000c064:	d055      	beq.n	1000c112 <__udivdi3+0xf6>
1000c066:	1ba4      	subs	r4, r4, r6
1000c068:	41bd      	sbcs	r5, r7
1000c06a:	2800      	cmp	r0, #0
1000c06c:	da00      	bge.n	1000c070 <__udivdi3+0x54>
1000c06e:	e077      	b.n	1000c160 <__udivdi3+0x144>
1000c070:	2200      	movs	r2, #0
1000c072:	2300      	movs	r3, #0
1000c074:	9200      	str	r2, [sp, #0]
1000c076:	9301      	str	r3, [sp, #4]
1000c078:	3201      	adds	r2, #1
1000c07a:	4082      	lsls	r2, r0
1000c07c:	9201      	str	r2, [sp, #4]
1000c07e:	2301      	movs	r3, #1
1000c080:	408b      	lsls	r3, r1
1000c082:	9300      	str	r3, [sp, #0]
1000c084:	2900      	cmp	r1, #0
1000c086:	d03c      	beq.n	1000c102 <__udivdi3+0xe6>
1000c088:	07fb      	lsls	r3, r7, #31
1000c08a:	4698      	mov	r8, r3
1000c08c:	4640      	mov	r0, r8
1000c08e:	0872      	lsrs	r2, r6, #1
1000c090:	087b      	lsrs	r3, r7, #1
1000c092:	4302      	orrs	r2, r0
1000c094:	2601      	movs	r6, #1
1000c096:	2700      	movs	r7, #0
1000c098:	e00c      	b.n	1000c0b4 <__udivdi3+0x98>
1000c09a:	42ab      	cmp	r3, r5
1000c09c:	d101      	bne.n	1000c0a2 <__udivdi3+0x86>
1000c09e:	42a2      	cmp	r2, r4
1000c0a0:	d80a      	bhi.n	1000c0b8 <__udivdi3+0x9c>
1000c0a2:	1aa4      	subs	r4, r4, r2
1000c0a4:	419d      	sbcs	r5, r3
1000c0a6:	1924      	adds	r4, r4, r4
1000c0a8:	416d      	adcs	r5, r5
1000c0aa:	3901      	subs	r1, #1
1000c0ac:	19a4      	adds	r4, r4, r6
1000c0ae:	417d      	adcs	r5, r7
1000c0b0:	2900      	cmp	r1, #0
1000c0b2:	d006      	beq.n	1000c0c2 <__udivdi3+0xa6>
1000c0b4:	42ab      	cmp	r3, r5
1000c0b6:	d9f0      	bls.n	1000c09a <__udivdi3+0x7e>
1000c0b8:	3901      	subs	r1, #1
1000c0ba:	1924      	adds	r4, r4, r4
1000c0bc:	416d      	adcs	r5, r5
1000c0be:	2900      	cmp	r1, #0
1000c0c0:	d1f8      	bne.n	1000c0b4 <__udivdi3+0x98>
1000c0c2:	2220      	movs	r2, #32
1000c0c4:	9800      	ldr	r0, [sp, #0]
1000c0c6:	9901      	ldr	r1, [sp, #4]
1000c0c8:	4653      	mov	r3, sl
1000c0ca:	4252      	negs	r2, r2
1000c0cc:	1900      	adds	r0, r0, r4
1000c0ce:	4169      	adcs	r1, r5
1000c0d0:	189e      	adds	r6, r3, r2
1000c0d2:	d43a      	bmi.n	1000c14a <__udivdi3+0x12e>
1000c0d4:	1c2f      	adds	r7, r5, #0
1000c0d6:	40f7      	lsrs	r7, r6
1000c0d8:	4653      	mov	r3, sl
1000c0da:	40dd      	lsrs	r5, r3
1000c0dc:	2e00      	cmp	r6, #0
1000c0de:	db29      	blt.n	1000c134 <__udivdi3+0x118>
1000c0e0:	1c3c      	adds	r4, r7, #0
1000c0e2:	40b4      	lsls	r4, r6
1000c0e4:	1c23      	adds	r3, r4, #0
1000c0e6:	4654      	mov	r4, sl
1000c0e8:	40a7      	lsls	r7, r4
1000c0ea:	1c3a      	adds	r2, r7, #0
1000c0ec:	1a80      	subs	r0, r0, r2
1000c0ee:	4199      	sbcs	r1, r3
1000c0f0:	9000      	str	r0, [sp, #0]
1000c0f2:	9101      	str	r1, [sp, #4]
1000c0f4:	e005      	b.n	1000c102 <__udivdi3+0xe6>
1000c0f6:	4282      	cmp	r2, r0
1000c0f8:	d99d      	bls.n	1000c036 <__udivdi3+0x1a>
1000c0fa:	2300      	movs	r3, #0
1000c0fc:	2400      	movs	r4, #0
1000c0fe:	9300      	str	r3, [sp, #0]
1000c100:	9401      	str	r4, [sp, #4]
1000c102:	9800      	ldr	r0, [sp, #0]
1000c104:	9901      	ldr	r1, [sp, #4]
1000c106:	b002      	add	sp, #8
1000c108:	bc1c      	pop	{r2, r3, r4}
1000c10a:	4690      	mov	r8, r2
1000c10c:	4699      	mov	r9, r3
1000c10e:	46a2      	mov	sl, r4
1000c110:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c112:	42a3      	cmp	r3, r4
1000c114:	d9a7      	bls.n	1000c066 <__udivdi3+0x4a>
1000c116:	2200      	movs	r2, #0
1000c118:	2300      	movs	r3, #0
1000c11a:	9200      	str	r2, [sp, #0]
1000c11c:	9301      	str	r3, [sp, #4]
1000c11e:	e7b1      	b.n	1000c084 <__udivdi3+0x68>
1000c120:	2220      	movs	r2, #32
1000c122:	464b      	mov	r3, r9
1000c124:	1a52      	subs	r2, r2, r1
1000c126:	40d3      	lsrs	r3, r2
1000c128:	1c1a      	adds	r2, r3, #0
1000c12a:	4643      	mov	r3, r8
1000c12c:	408b      	lsls	r3, r1
1000c12e:	1c1f      	adds	r7, r3, #0
1000c130:	4317      	orrs	r7, r2
1000c132:	e792      	b.n	1000c05a <__udivdi3+0x3e>
1000c134:	4653      	mov	r3, sl
1000c136:	2420      	movs	r4, #32
1000c138:	4656      	mov	r6, sl
1000c13a:	1ae4      	subs	r4, r4, r3
1000c13c:	1c3b      	adds	r3, r7, #0
1000c13e:	40b5      	lsls	r5, r6
1000c140:	40e3      	lsrs	r3, r4
1000c142:	1c1c      	adds	r4, r3, #0
1000c144:	1c2b      	adds	r3, r5, #0
1000c146:	4323      	orrs	r3, r4
1000c148:	e7cd      	b.n	1000c0e6 <__udivdi3+0xca>
1000c14a:	4652      	mov	r2, sl
1000c14c:	2320      	movs	r3, #32
1000c14e:	1a9b      	subs	r3, r3, r2
1000c150:	1c2a      	adds	r2, r5, #0
1000c152:	409a      	lsls	r2, r3
1000c154:	1c27      	adds	r7, r4, #0
1000c156:	1c13      	adds	r3, r2, #0
1000c158:	4652      	mov	r2, sl
1000c15a:	40d7      	lsrs	r7, r2
1000c15c:	431f      	orrs	r7, r3
1000c15e:	e7bb      	b.n	1000c0d8 <__udivdi3+0xbc>
1000c160:	2320      	movs	r3, #32
1000c162:	2200      	movs	r2, #0
1000c164:	1a58      	subs	r0, r3, r1
1000c166:	2300      	movs	r3, #0
1000c168:	9200      	str	r2, [sp, #0]
1000c16a:	9301      	str	r3, [sp, #4]
1000c16c:	3201      	adds	r2, #1
1000c16e:	40c2      	lsrs	r2, r0
1000c170:	9201      	str	r2, [sp, #4]
1000c172:	e784      	b.n	1000c07e <__udivdi3+0x62>

1000c174 <__clzdi2>:
1000c174:	b510      	push	{r4, lr}
1000c176:	2900      	cmp	r1, #0
1000c178:	d103      	bne.n	1000c182 <__clzdi2+0xe>
1000c17a:	f7ff fe39 	bl	1000bdf0 <__clzsi2>
1000c17e:	3020      	adds	r0, #32
1000c180:	e002      	b.n	1000c188 <__clzdi2+0x14>
1000c182:	1c08      	adds	r0, r1, #0
1000c184:	f7ff fe34 	bl	1000bdf0 <__clzsi2>
1000c188:	bd10      	pop	{r4, pc}
1000c18a:	46c0      	nop			; (mov r8, r8)

1000c18c <calloc>:
1000c18c:	b508      	push	{r3, lr}
1000c18e:	1c03      	adds	r3, r0, #0
1000c190:	1c0a      	adds	r2, r1, #0
1000c192:	4903      	ldr	r1, [pc, #12]	; (1000c1a0 <calloc+0x14>)
1000c194:	6808      	ldr	r0, [r1, #0]
1000c196:	1c19      	adds	r1, r3, #0
1000c198:	f000 f85a 	bl	1000c250 <_calloc_r>
1000c19c:	bd08      	pop	{r3, pc}
1000c19e:	46c0      	nop			; (mov r8, r8)
1000c1a0:	20002898 	.word	0x20002898

1000c1a4 <__errno>:
1000c1a4:	4b01      	ldr	r3, [pc, #4]	; (1000c1ac <__errno+0x8>)
1000c1a6:	6818      	ldr	r0, [r3, #0]
1000c1a8:	4770      	bx	lr
1000c1aa:	46c0      	nop			; (mov r8, r8)
1000c1ac:	20002898 	.word	0x20002898

1000c1b0 <__libc_init_array>:
1000c1b0:	4b0e      	ldr	r3, [pc, #56]	; (1000c1ec <__libc_init_array+0x3c>)
1000c1b2:	b570      	push	{r4, r5, r6, lr}
1000c1b4:	2500      	movs	r5, #0
1000c1b6:	1c1e      	adds	r6, r3, #0
1000c1b8:	4c0d      	ldr	r4, [pc, #52]	; (1000c1f0 <__libc_init_array+0x40>)
1000c1ba:	1ae4      	subs	r4, r4, r3
1000c1bc:	10a4      	asrs	r4, r4, #2
1000c1be:	42a5      	cmp	r5, r4
1000c1c0:	d004      	beq.n	1000c1cc <__libc_init_array+0x1c>
1000c1c2:	00ab      	lsls	r3, r5, #2
1000c1c4:	58f3      	ldr	r3, [r6, r3]
1000c1c6:	4798      	blx	r3
1000c1c8:	3501      	adds	r5, #1
1000c1ca:	e7f8      	b.n	1000c1be <__libc_init_array+0xe>
1000c1cc:	f7fd fe6e 	bl	10009eac <_init>
1000c1d0:	4b08      	ldr	r3, [pc, #32]	; (1000c1f4 <__libc_init_array+0x44>)
1000c1d2:	2500      	movs	r5, #0
1000c1d4:	1c1e      	adds	r6, r3, #0
1000c1d6:	4c08      	ldr	r4, [pc, #32]	; (1000c1f8 <__libc_init_array+0x48>)
1000c1d8:	1ae4      	subs	r4, r4, r3
1000c1da:	10a4      	asrs	r4, r4, #2
1000c1dc:	42a5      	cmp	r5, r4
1000c1de:	d004      	beq.n	1000c1ea <__libc_init_array+0x3a>
1000c1e0:	00ab      	lsls	r3, r5, #2
1000c1e2:	58f3      	ldr	r3, [r6, r3]
1000c1e4:	4798      	blx	r3
1000c1e6:	3501      	adds	r5, #1
1000c1e8:	e7f8      	b.n	1000c1dc <__libc_init_array+0x2c>
1000c1ea:	bd70      	pop	{r4, r5, r6, pc}
1000c1ec:	2000289c 	.word	0x2000289c
1000c1f0:	2000289c 	.word	0x2000289c
1000c1f4:	2000289c 	.word	0x2000289c
1000c1f8:	2000289c 	.word	0x2000289c

1000c1fc <free>:
1000c1fc:	b508      	push	{r3, lr}
1000c1fe:	4b03      	ldr	r3, [pc, #12]	; (1000c20c <free+0x10>)
1000c200:	1c01      	adds	r1, r0, #0
1000c202:	6818      	ldr	r0, [r3, #0]
1000c204:	f000 f832 	bl	1000c26c <_free_r>
1000c208:	bd08      	pop	{r3, pc}
1000c20a:	46c0      	nop			; (mov r8, r8)
1000c20c:	20002898 	.word	0x20002898

1000c210 <memcmp>:
1000c210:	b530      	push	{r4, r5, lr}
1000c212:	2400      	movs	r4, #0
1000c214:	4294      	cmp	r4, r2
1000c216:	d008      	beq.n	1000c22a <memcmp+0x1a>
1000c218:	5d03      	ldrb	r3, [r0, r4]
1000c21a:	1c65      	adds	r5, r4, #1
1000c21c:	5d0c      	ldrb	r4, [r1, r4]
1000c21e:	42a3      	cmp	r3, r4
1000c220:	d001      	beq.n	1000c226 <memcmp+0x16>
1000c222:	1b18      	subs	r0, r3, r4
1000c224:	e002      	b.n	1000c22c <memcmp+0x1c>
1000c226:	1c2c      	adds	r4, r5, #0
1000c228:	e7f4      	b.n	1000c214 <memcmp+0x4>
1000c22a:	2000      	movs	r0, #0
1000c22c:	bd30      	pop	{r4, r5, pc}

1000c22e <memcpy>:
1000c22e:	2300      	movs	r3, #0
1000c230:	b510      	push	{r4, lr}
1000c232:	4293      	cmp	r3, r2
1000c234:	d003      	beq.n	1000c23e <memcpy+0x10>
1000c236:	5ccc      	ldrb	r4, [r1, r3]
1000c238:	54c4      	strb	r4, [r0, r3]
1000c23a:	3301      	adds	r3, #1
1000c23c:	e7f9      	b.n	1000c232 <memcpy+0x4>
1000c23e:	bd10      	pop	{r4, pc}

1000c240 <memset>:
1000c240:	1c03      	adds	r3, r0, #0
1000c242:	1882      	adds	r2, r0, r2
1000c244:	4293      	cmp	r3, r2
1000c246:	d002      	beq.n	1000c24e <memset+0xe>
1000c248:	7019      	strb	r1, [r3, #0]
1000c24a:	3301      	adds	r3, #1
1000c24c:	e7fa      	b.n	1000c244 <memset+0x4>
1000c24e:	4770      	bx	lr

1000c250 <_calloc_r>:
1000c250:	434a      	muls	r2, r1
1000c252:	b538      	push	{r3, r4, r5, lr}
1000c254:	1c11      	adds	r1, r2, #0
1000c256:	1c14      	adds	r4, r2, #0
1000c258:	f000 f84e 	bl	1000c2f8 <_malloc_r>
1000c25c:	1e05      	subs	r5, r0, #0
1000c25e:	d003      	beq.n	1000c268 <_calloc_r+0x18>
1000c260:	2100      	movs	r1, #0
1000c262:	1c22      	adds	r2, r4, #0
1000c264:	f7ff ffec 	bl	1000c240 <memset>
1000c268:	1c28      	adds	r0, r5, #0
1000c26a:	bd38      	pop	{r3, r4, r5, pc}

1000c26c <_free_r>:
1000c26c:	b530      	push	{r4, r5, lr}
1000c26e:	2900      	cmp	r1, #0
1000c270:	d03e      	beq.n	1000c2f0 <_free_r+0x84>
1000c272:	3904      	subs	r1, #4
1000c274:	680b      	ldr	r3, [r1, #0]
1000c276:	2b00      	cmp	r3, #0
1000c278:	da00      	bge.n	1000c27c <_free_r+0x10>
1000c27a:	18c9      	adds	r1, r1, r3
1000c27c:	4a1d      	ldr	r2, [pc, #116]	; (1000c2f4 <_free_r+0x88>)
1000c27e:	6813      	ldr	r3, [r2, #0]
1000c280:	1c14      	adds	r4, r2, #0
1000c282:	2b00      	cmp	r3, #0
1000c284:	d102      	bne.n	1000c28c <_free_r+0x20>
1000c286:	604b      	str	r3, [r1, #4]
1000c288:	6011      	str	r1, [r2, #0]
1000c28a:	e031      	b.n	1000c2f0 <_free_r+0x84>
1000c28c:	4299      	cmp	r1, r3
1000c28e:	d20d      	bcs.n	1000c2ac <_free_r+0x40>
1000c290:	6808      	ldr	r0, [r1, #0]
1000c292:	180a      	adds	r2, r1, r0
1000c294:	429a      	cmp	r2, r3
1000c296:	d103      	bne.n	1000c2a0 <_free_r+0x34>
1000c298:	6813      	ldr	r3, [r2, #0]
1000c29a:	18c3      	adds	r3, r0, r3
1000c29c:	600b      	str	r3, [r1, #0]
1000c29e:	6853      	ldr	r3, [r2, #4]
1000c2a0:	604b      	str	r3, [r1, #4]
1000c2a2:	6021      	str	r1, [r4, #0]
1000c2a4:	e024      	b.n	1000c2f0 <_free_r+0x84>
1000c2a6:	428a      	cmp	r2, r1
1000c2a8:	d803      	bhi.n	1000c2b2 <_free_r+0x46>
1000c2aa:	1c13      	adds	r3, r2, #0
1000c2ac:	685a      	ldr	r2, [r3, #4]
1000c2ae:	2a00      	cmp	r2, #0
1000c2b0:	d1f9      	bne.n	1000c2a6 <_free_r+0x3a>
1000c2b2:	681d      	ldr	r5, [r3, #0]
1000c2b4:	195c      	adds	r4, r3, r5
1000c2b6:	428c      	cmp	r4, r1
1000c2b8:	d10b      	bne.n	1000c2d2 <_free_r+0x66>
1000c2ba:	6809      	ldr	r1, [r1, #0]
1000c2bc:	1869      	adds	r1, r5, r1
1000c2be:	1858      	adds	r0, r3, r1
1000c2c0:	6019      	str	r1, [r3, #0]
1000c2c2:	4290      	cmp	r0, r2
1000c2c4:	d114      	bne.n	1000c2f0 <_free_r+0x84>
1000c2c6:	6810      	ldr	r0, [r2, #0]
1000c2c8:	6852      	ldr	r2, [r2, #4]
1000c2ca:	1809      	adds	r1, r1, r0
1000c2cc:	6019      	str	r1, [r3, #0]
1000c2ce:	605a      	str	r2, [r3, #4]
1000c2d0:	e00e      	b.n	1000c2f0 <_free_r+0x84>
1000c2d2:	428c      	cmp	r4, r1
1000c2d4:	d902      	bls.n	1000c2dc <_free_r+0x70>
1000c2d6:	230c      	movs	r3, #12
1000c2d8:	6003      	str	r3, [r0, #0]
1000c2da:	e009      	b.n	1000c2f0 <_free_r+0x84>
1000c2dc:	6808      	ldr	r0, [r1, #0]
1000c2de:	180c      	adds	r4, r1, r0
1000c2e0:	4294      	cmp	r4, r2
1000c2e2:	d103      	bne.n	1000c2ec <_free_r+0x80>
1000c2e4:	6814      	ldr	r4, [r2, #0]
1000c2e6:	6852      	ldr	r2, [r2, #4]
1000c2e8:	1900      	adds	r0, r0, r4
1000c2ea:	6008      	str	r0, [r1, #0]
1000c2ec:	604a      	str	r2, [r1, #4]
1000c2ee:	6059      	str	r1, [r3, #4]
1000c2f0:	bd30      	pop	{r4, r5, pc}
1000c2f2:	46c0      	nop			; (mov r8, r8)
1000c2f4:	20003008 	.word	0x20003008

1000c2f8 <_malloc_r>:
1000c2f8:	2303      	movs	r3, #3
1000c2fa:	b570      	push	{r4, r5, r6, lr}
1000c2fc:	1ccc      	adds	r4, r1, #3
1000c2fe:	439c      	bics	r4, r3
1000c300:	3408      	adds	r4, #8
1000c302:	1c05      	adds	r5, r0, #0
1000c304:	2c0c      	cmp	r4, #12
1000c306:	d201      	bcs.n	1000c30c <_malloc_r+0x14>
1000c308:	240c      	movs	r4, #12
1000c30a:	e005      	b.n	1000c318 <_malloc_r+0x20>
1000c30c:	2c00      	cmp	r4, #0
1000c30e:	da03      	bge.n	1000c318 <_malloc_r+0x20>
1000c310:	230c      	movs	r3, #12
1000c312:	2000      	movs	r0, #0
1000c314:	602b      	str	r3, [r5, #0]
1000c316:	e042      	b.n	1000c39e <_malloc_r+0xa6>
1000c318:	428c      	cmp	r4, r1
1000c31a:	d3f9      	bcc.n	1000c310 <_malloc_r+0x18>
1000c31c:	4a20      	ldr	r2, [pc, #128]	; (1000c3a0 <_malloc_r+0xa8>)
1000c31e:	6813      	ldr	r3, [r2, #0]
1000c320:	1c10      	adds	r0, r2, #0
1000c322:	1c19      	adds	r1, r3, #0
1000c324:	2900      	cmp	r1, #0
1000c326:	d013      	beq.n	1000c350 <_malloc_r+0x58>
1000c328:	680a      	ldr	r2, [r1, #0]
1000c32a:	1b12      	subs	r2, r2, r4
1000c32c:	d40d      	bmi.n	1000c34a <_malloc_r+0x52>
1000c32e:	2a0b      	cmp	r2, #11
1000c330:	d902      	bls.n	1000c338 <_malloc_r+0x40>
1000c332:	600a      	str	r2, [r1, #0]
1000c334:	188b      	adds	r3, r1, r2
1000c336:	e01f      	b.n	1000c378 <_malloc_r+0x80>
1000c338:	428b      	cmp	r3, r1
1000c33a:	d102      	bne.n	1000c342 <_malloc_r+0x4a>
1000c33c:	685a      	ldr	r2, [r3, #4]
1000c33e:	6002      	str	r2, [r0, #0]
1000c340:	e01b      	b.n	1000c37a <_malloc_r+0x82>
1000c342:	684a      	ldr	r2, [r1, #4]
1000c344:	605a      	str	r2, [r3, #4]
1000c346:	1c0b      	adds	r3, r1, #0
1000c348:	e017      	b.n	1000c37a <_malloc_r+0x82>
1000c34a:	1c0b      	adds	r3, r1, #0
1000c34c:	6849      	ldr	r1, [r1, #4]
1000c34e:	e7e9      	b.n	1000c324 <_malloc_r+0x2c>
1000c350:	4e14      	ldr	r6, [pc, #80]	; (1000c3a4 <_malloc_r+0xac>)
1000c352:	6833      	ldr	r3, [r6, #0]
1000c354:	2b00      	cmp	r3, #0
1000c356:	d103      	bne.n	1000c360 <_malloc_r+0x68>
1000c358:	1c28      	adds	r0, r5, #0
1000c35a:	f000 f825 	bl	1000c3a8 <_sbrk_r>
1000c35e:	6030      	str	r0, [r6, #0]
1000c360:	1c28      	adds	r0, r5, #0
1000c362:	1c21      	adds	r1, r4, #0
1000c364:	f000 f820 	bl	1000c3a8 <_sbrk_r>
1000c368:	1c03      	adds	r3, r0, #0
1000c36a:	1c42      	adds	r2, r0, #1
1000c36c:	d0d0      	beq.n	1000c310 <_malloc_r+0x18>
1000c36e:	2203      	movs	r2, #3
1000c370:	1cc6      	adds	r6, r0, #3
1000c372:	4396      	bics	r6, r2
1000c374:	4286      	cmp	r6, r0
1000c376:	d10a      	bne.n	1000c38e <_malloc_r+0x96>
1000c378:	601c      	str	r4, [r3, #0]
1000c37a:	1c18      	adds	r0, r3, #0
1000c37c:	2107      	movs	r1, #7
1000c37e:	300b      	adds	r0, #11
1000c380:	1d1a      	adds	r2, r3, #4
1000c382:	4388      	bics	r0, r1
1000c384:	1a82      	subs	r2, r0, r2
1000c386:	d00a      	beq.n	1000c39e <_malloc_r+0xa6>
1000c388:	4251      	negs	r1, r2
1000c38a:	5099      	str	r1, [r3, r2]
1000c38c:	e007      	b.n	1000c39e <_malloc_r+0xa6>
1000c38e:	1a31      	subs	r1, r6, r0
1000c390:	1c28      	adds	r0, r5, #0
1000c392:	f000 f809 	bl	1000c3a8 <_sbrk_r>
1000c396:	1c43      	adds	r3, r0, #1
1000c398:	d0ba      	beq.n	1000c310 <_malloc_r+0x18>
1000c39a:	1c33      	adds	r3, r6, #0
1000c39c:	e7ec      	b.n	1000c378 <_malloc_r+0x80>
1000c39e:	bd70      	pop	{r4, r5, r6, pc}
1000c3a0:	20003008 	.word	0x20003008
1000c3a4:	20003004 	.word	0x20003004

1000c3a8 <_sbrk_r>:
1000c3a8:	b538      	push	{r3, r4, r5, lr}
1000c3aa:	2300      	movs	r3, #0
1000c3ac:	4c06      	ldr	r4, [pc, #24]	; (1000c3c8 <_sbrk_r+0x20>)
1000c3ae:	1c05      	adds	r5, r0, #0
1000c3b0:	1c08      	adds	r0, r1, #0
1000c3b2:	6023      	str	r3, [r4, #0]
1000c3b4:	f7fd fd5a 	bl	10009e6c <_sbrk>
1000c3b8:	1c43      	adds	r3, r0, #1
1000c3ba:	d103      	bne.n	1000c3c4 <_sbrk_r+0x1c>
1000c3bc:	6823      	ldr	r3, [r4, #0]
1000c3be:	2b00      	cmp	r3, #0
1000c3c0:	d000      	beq.n	1000c3c4 <_sbrk_r+0x1c>
1000c3c2:	602b      	str	r3, [r5, #0]
1000c3c4:	bd38      	pop	{r3, r4, r5, pc}
1000c3c6:	46c0      	nop			; (mov r8, r8)
1000c3c8:	20003058 	.word	0x20003058

1000c3cc <siprintf>:
1000c3cc:	b40e      	push	{r1, r2, r3}
1000c3ce:	b510      	push	{r4, lr}
1000c3d0:	b09d      	sub	sp, #116	; 0x74
1000c3d2:	a902      	add	r1, sp, #8
1000c3d4:	9002      	str	r0, [sp, #8]
1000c3d6:	6108      	str	r0, [r1, #16]
1000c3d8:	480b      	ldr	r0, [pc, #44]	; (1000c408 <siprintf+0x3c>)
1000c3da:	2482      	movs	r4, #130	; 0x82
1000c3dc:	6088      	str	r0, [r1, #8]
1000c3de:	6148      	str	r0, [r1, #20]
1000c3e0:	2001      	movs	r0, #1
1000c3e2:	4240      	negs	r0, r0
1000c3e4:	ab1f      	add	r3, sp, #124	; 0x7c
1000c3e6:	81c8      	strh	r0, [r1, #14]
1000c3e8:	4808      	ldr	r0, [pc, #32]	; (1000c40c <siprintf+0x40>)
1000c3ea:	cb04      	ldmia	r3!, {r2}
1000c3ec:	00a4      	lsls	r4, r4, #2
1000c3ee:	6800      	ldr	r0, [r0, #0]
1000c3f0:	9301      	str	r3, [sp, #4]
1000c3f2:	818c      	strh	r4, [r1, #12]
1000c3f4:	f000 f892 	bl	1000c51c <_svfiprintf_r>
1000c3f8:	2300      	movs	r3, #0
1000c3fa:	9a02      	ldr	r2, [sp, #8]
1000c3fc:	7013      	strb	r3, [r2, #0]
1000c3fe:	b01d      	add	sp, #116	; 0x74
1000c400:	bc10      	pop	{r4}
1000c402:	bc08      	pop	{r3}
1000c404:	b003      	add	sp, #12
1000c406:	4718      	bx	r3
1000c408:	7fffffff 	.word	0x7fffffff
1000c40c:	20002898 	.word	0x20002898

1000c410 <strcat>:
1000c410:	1c02      	adds	r2, r0, #0
1000c412:	b510      	push	{r4, lr}
1000c414:	7813      	ldrb	r3, [r2, #0]
1000c416:	2b00      	cmp	r3, #0
1000c418:	d001      	beq.n	1000c41e <strcat+0xe>
1000c41a:	3201      	adds	r2, #1
1000c41c:	e7fa      	b.n	1000c414 <strcat+0x4>
1000c41e:	5ccc      	ldrb	r4, [r1, r3]
1000c420:	54d4      	strb	r4, [r2, r3]
1000c422:	3301      	adds	r3, #1
1000c424:	2c00      	cmp	r4, #0
1000c426:	d1fa      	bne.n	1000c41e <strcat+0xe>
1000c428:	bd10      	pop	{r4, pc}

1000c42a <strcmp>:
1000c42a:	7802      	ldrb	r2, [r0, #0]
1000c42c:	780b      	ldrb	r3, [r1, #0]
1000c42e:	2a00      	cmp	r2, #0
1000c430:	d003      	beq.n	1000c43a <strcmp+0x10>
1000c432:	3001      	adds	r0, #1
1000c434:	3101      	adds	r1, #1
1000c436:	429a      	cmp	r2, r3
1000c438:	d0f7      	beq.n	1000c42a <strcmp>
1000c43a:	1ad0      	subs	r0, r2, r3
1000c43c:	4770      	bx	lr

1000c43e <strcpy>:
1000c43e:	1c03      	adds	r3, r0, #0
1000c440:	780a      	ldrb	r2, [r1, #0]
1000c442:	3101      	adds	r1, #1
1000c444:	701a      	strb	r2, [r3, #0]
1000c446:	3301      	adds	r3, #1
1000c448:	2a00      	cmp	r2, #0
1000c44a:	d1f9      	bne.n	1000c440 <strcpy+0x2>
1000c44c:	4770      	bx	lr

1000c44e <strlen>:
1000c44e:	2300      	movs	r3, #0
1000c450:	5cc2      	ldrb	r2, [r0, r3]
1000c452:	3301      	adds	r3, #1
1000c454:	2a00      	cmp	r2, #0
1000c456:	d1fb      	bne.n	1000c450 <strlen+0x2>
1000c458:	1e58      	subs	r0, r3, #1
1000c45a:	4770      	bx	lr

1000c45c <__ssputs_r>:
1000c45c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c45e:	688e      	ldr	r6, [r1, #8]
1000c460:	b085      	sub	sp, #20
1000c462:	1c07      	adds	r7, r0, #0
1000c464:	1c0c      	adds	r4, r1, #0
1000c466:	9203      	str	r2, [sp, #12]
1000c468:	9301      	str	r3, [sp, #4]
1000c46a:	42b3      	cmp	r3, r6
1000c46c:	d345      	bcc.n	1000c4fa <__ssputs_r+0x9e>
1000c46e:	2390      	movs	r3, #144	; 0x90
1000c470:	898a      	ldrh	r2, [r1, #12]
1000c472:	00db      	lsls	r3, r3, #3
1000c474:	421a      	tst	r2, r3
1000c476:	d03d      	beq.n	1000c4f4 <__ssputs_r+0x98>
1000c478:	2503      	movs	r5, #3
1000c47a:	6909      	ldr	r1, [r1, #16]
1000c47c:	6823      	ldr	r3, [r4, #0]
1000c47e:	9801      	ldr	r0, [sp, #4]
1000c480:	1a5b      	subs	r3, r3, r1
1000c482:	9302      	str	r3, [sp, #8]
1000c484:	6963      	ldr	r3, [r4, #20]
1000c486:	435d      	muls	r5, r3
1000c488:	0feb      	lsrs	r3, r5, #31
1000c48a:	195d      	adds	r5, r3, r5
1000c48c:	9b02      	ldr	r3, [sp, #8]
1000c48e:	106d      	asrs	r5, r5, #1
1000c490:	3301      	adds	r3, #1
1000c492:	181b      	adds	r3, r3, r0
1000c494:	429d      	cmp	r5, r3
1000c496:	d200      	bcs.n	1000c49a <__ssputs_r+0x3e>
1000c498:	1c1d      	adds	r5, r3, #0
1000c49a:	1c38      	adds	r0, r7, #0
1000c49c:	0553      	lsls	r3, r2, #21
1000c49e:	d50f      	bpl.n	1000c4c0 <__ssputs_r+0x64>
1000c4a0:	1c29      	adds	r1, r5, #0
1000c4a2:	f7ff ff29 	bl	1000c2f8 <_malloc_r>
1000c4a6:	1e06      	subs	r6, r0, #0
1000c4a8:	d013      	beq.n	1000c4d2 <__ssputs_r+0x76>
1000c4aa:	9a02      	ldr	r2, [sp, #8]
1000c4ac:	6921      	ldr	r1, [r4, #16]
1000c4ae:	f7ff febe 	bl	1000c22e <memcpy>
1000c4b2:	89a2      	ldrh	r2, [r4, #12]
1000c4b4:	4b18      	ldr	r3, [pc, #96]	; (1000c518 <__ssputs_r+0xbc>)
1000c4b6:	4013      	ands	r3, r2
1000c4b8:	2280      	movs	r2, #128	; 0x80
1000c4ba:	4313      	orrs	r3, r2
1000c4bc:	81a3      	strh	r3, [r4, #12]
1000c4be:	e011      	b.n	1000c4e4 <__ssputs_r+0x88>
1000c4c0:	1c2a      	adds	r2, r5, #0
1000c4c2:	f000 fac6 	bl	1000ca52 <_realloc_r>
1000c4c6:	1e06      	subs	r6, r0, #0
1000c4c8:	d10c      	bne.n	1000c4e4 <__ssputs_r+0x88>
1000c4ca:	1c38      	adds	r0, r7, #0
1000c4cc:	6921      	ldr	r1, [r4, #16]
1000c4ce:	f7ff fecd 	bl	1000c26c <_free_r>
1000c4d2:	230c      	movs	r3, #12
1000c4d4:	2240      	movs	r2, #64	; 0x40
1000c4d6:	2001      	movs	r0, #1
1000c4d8:	603b      	str	r3, [r7, #0]
1000c4da:	89a3      	ldrh	r3, [r4, #12]
1000c4dc:	4240      	negs	r0, r0
1000c4de:	4313      	orrs	r3, r2
1000c4e0:	81a3      	strh	r3, [r4, #12]
1000c4e2:	e017      	b.n	1000c514 <__ssputs_r+0xb8>
1000c4e4:	9b02      	ldr	r3, [sp, #8]
1000c4e6:	6126      	str	r6, [r4, #16]
1000c4e8:	18f6      	adds	r6, r6, r3
1000c4ea:	6026      	str	r6, [r4, #0]
1000c4ec:	6165      	str	r5, [r4, #20]
1000c4ee:	9e01      	ldr	r6, [sp, #4]
1000c4f0:	1aed      	subs	r5, r5, r3
1000c4f2:	60a5      	str	r5, [r4, #8]
1000c4f4:	9b01      	ldr	r3, [sp, #4]
1000c4f6:	42b3      	cmp	r3, r6
1000c4f8:	d200      	bcs.n	1000c4fc <__ssputs_r+0xa0>
1000c4fa:	9e01      	ldr	r6, [sp, #4]
1000c4fc:	1c32      	adds	r2, r6, #0
1000c4fe:	6820      	ldr	r0, [r4, #0]
1000c500:	9903      	ldr	r1, [sp, #12]
1000c502:	f000 fa92 	bl	1000ca2a <memmove>
1000c506:	2000      	movs	r0, #0
1000c508:	68a3      	ldr	r3, [r4, #8]
1000c50a:	1b9b      	subs	r3, r3, r6
1000c50c:	60a3      	str	r3, [r4, #8]
1000c50e:	6823      	ldr	r3, [r4, #0]
1000c510:	199e      	adds	r6, r3, r6
1000c512:	6026      	str	r6, [r4, #0]
1000c514:	b005      	add	sp, #20
1000c516:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c518:	fffffb7f 	.word	0xfffffb7f

1000c51c <_svfiprintf_r>:
1000c51c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c51e:	b09f      	sub	sp, #124	; 0x7c
1000c520:	9002      	str	r0, [sp, #8]
1000c522:	9305      	str	r3, [sp, #20]
1000c524:	898b      	ldrh	r3, [r1, #12]
1000c526:	1c0e      	adds	r6, r1, #0
1000c528:	1c17      	adds	r7, r2, #0
1000c52a:	061b      	lsls	r3, r3, #24
1000c52c:	d510      	bpl.n	1000c550 <_svfiprintf_r+0x34>
1000c52e:	690b      	ldr	r3, [r1, #16]
1000c530:	2b00      	cmp	r3, #0
1000c532:	d10d      	bne.n	1000c550 <_svfiprintf_r+0x34>
1000c534:	2140      	movs	r1, #64	; 0x40
1000c536:	f7ff fedf 	bl	1000c2f8 <_malloc_r>
1000c53a:	6030      	str	r0, [r6, #0]
1000c53c:	6130      	str	r0, [r6, #16]
1000c53e:	2800      	cmp	r0, #0
1000c540:	d104      	bne.n	1000c54c <_svfiprintf_r+0x30>
1000c542:	230c      	movs	r3, #12
1000c544:	9a02      	ldr	r2, [sp, #8]
1000c546:	3801      	subs	r0, #1
1000c548:	6013      	str	r3, [r2, #0]
1000c54a:	e0d0      	b.n	1000c6ee <_svfiprintf_r+0x1d2>
1000c54c:	2340      	movs	r3, #64	; 0x40
1000c54e:	6173      	str	r3, [r6, #20]
1000c550:	2300      	movs	r3, #0
1000c552:	ad06      	add	r5, sp, #24
1000c554:	616b      	str	r3, [r5, #20]
1000c556:	3320      	adds	r3, #32
1000c558:	766b      	strb	r3, [r5, #25]
1000c55a:	3310      	adds	r3, #16
1000c55c:	76ab      	strb	r3, [r5, #26]
1000c55e:	1c3c      	adds	r4, r7, #0
1000c560:	7823      	ldrb	r3, [r4, #0]
1000c562:	2b00      	cmp	r3, #0
1000c564:	d103      	bne.n	1000c56e <_svfiprintf_r+0x52>
1000c566:	1be3      	subs	r3, r4, r7
1000c568:	9304      	str	r3, [sp, #16]
1000c56a:	d012      	beq.n	1000c592 <_svfiprintf_r+0x76>
1000c56c:	e003      	b.n	1000c576 <_svfiprintf_r+0x5a>
1000c56e:	2b25      	cmp	r3, #37	; 0x25
1000c570:	d0f9      	beq.n	1000c566 <_svfiprintf_r+0x4a>
1000c572:	3401      	adds	r4, #1
1000c574:	e7f4      	b.n	1000c560 <_svfiprintf_r+0x44>
1000c576:	9b04      	ldr	r3, [sp, #16]
1000c578:	9802      	ldr	r0, [sp, #8]
1000c57a:	1c31      	adds	r1, r6, #0
1000c57c:	1c3a      	adds	r2, r7, #0
1000c57e:	f7ff ff6d 	bl	1000c45c <__ssputs_r>
1000c582:	1c43      	adds	r3, r0, #1
1000c584:	d100      	bne.n	1000c588 <_svfiprintf_r+0x6c>
1000c586:	e0ac      	b.n	1000c6e2 <_svfiprintf_r+0x1c6>
1000c588:	696a      	ldr	r2, [r5, #20]
1000c58a:	9b04      	ldr	r3, [sp, #16]
1000c58c:	4694      	mov	ip, r2
1000c58e:	4463      	add	r3, ip
1000c590:	616b      	str	r3, [r5, #20]
1000c592:	7823      	ldrb	r3, [r4, #0]
1000c594:	2b00      	cmp	r3, #0
1000c596:	d100      	bne.n	1000c59a <_svfiprintf_r+0x7e>
1000c598:	e0a3      	b.n	1000c6e2 <_svfiprintf_r+0x1c6>
1000c59a:	2201      	movs	r2, #1
1000c59c:	2300      	movs	r3, #0
1000c59e:	4252      	negs	r2, r2
1000c5a0:	606a      	str	r2, [r5, #4]
1000c5a2:	a902      	add	r1, sp, #8
1000c5a4:	3254      	adds	r2, #84	; 0x54
1000c5a6:	1852      	adds	r2, r2, r1
1000c5a8:	3401      	adds	r4, #1
1000c5aa:	602b      	str	r3, [r5, #0]
1000c5ac:	60eb      	str	r3, [r5, #12]
1000c5ae:	60ab      	str	r3, [r5, #8]
1000c5b0:	7013      	strb	r3, [r2, #0]
1000c5b2:	65ab      	str	r3, [r5, #88]	; 0x58
1000c5b4:	4f4f      	ldr	r7, [pc, #316]	; (1000c6f4 <_svfiprintf_r+0x1d8>)
1000c5b6:	7821      	ldrb	r1, [r4, #0]
1000c5b8:	1c38      	adds	r0, r7, #0
1000c5ba:	2205      	movs	r2, #5
1000c5bc:	f000 fa2a 	bl	1000ca14 <memchr>
1000c5c0:	2800      	cmp	r0, #0
1000c5c2:	d008      	beq.n	1000c5d6 <_svfiprintf_r+0xba>
1000c5c4:	1bc0      	subs	r0, r0, r7
1000c5c6:	2701      	movs	r7, #1
1000c5c8:	4087      	lsls	r7, r0
1000c5ca:	1c38      	adds	r0, r7, #0
1000c5cc:	682b      	ldr	r3, [r5, #0]
1000c5ce:	3401      	adds	r4, #1
1000c5d0:	4318      	orrs	r0, r3
1000c5d2:	6028      	str	r0, [r5, #0]
1000c5d4:	e7ee      	b.n	1000c5b4 <_svfiprintf_r+0x98>
1000c5d6:	682b      	ldr	r3, [r5, #0]
1000c5d8:	06da      	lsls	r2, r3, #27
1000c5da:	d504      	bpl.n	1000c5e6 <_svfiprintf_r+0xca>
1000c5dc:	2253      	movs	r2, #83	; 0x53
1000c5de:	2120      	movs	r1, #32
1000c5e0:	a802      	add	r0, sp, #8
1000c5e2:	1812      	adds	r2, r2, r0
1000c5e4:	7011      	strb	r1, [r2, #0]
1000c5e6:	071a      	lsls	r2, r3, #28
1000c5e8:	d504      	bpl.n	1000c5f4 <_svfiprintf_r+0xd8>
1000c5ea:	2253      	movs	r2, #83	; 0x53
1000c5ec:	212b      	movs	r1, #43	; 0x2b
1000c5ee:	a802      	add	r0, sp, #8
1000c5f0:	1812      	adds	r2, r2, r0
1000c5f2:	7011      	strb	r1, [r2, #0]
1000c5f4:	7822      	ldrb	r2, [r4, #0]
1000c5f6:	2a2a      	cmp	r2, #42	; 0x2a
1000c5f8:	d001      	beq.n	1000c5fe <_svfiprintf_r+0xe2>
1000c5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c5fc:	e00e      	b.n	1000c61c <_svfiprintf_r+0x100>
1000c5fe:	9a05      	ldr	r2, [sp, #20]
1000c600:	1d11      	adds	r1, r2, #4
1000c602:	6812      	ldr	r2, [r2, #0]
1000c604:	9105      	str	r1, [sp, #20]
1000c606:	2a00      	cmp	r2, #0
1000c608:	db01      	blt.n	1000c60e <_svfiprintf_r+0xf2>
1000c60a:	9209      	str	r2, [sp, #36]	; 0x24
1000c60c:	e004      	b.n	1000c618 <_svfiprintf_r+0xfc>
1000c60e:	4252      	negs	r2, r2
1000c610:	60ea      	str	r2, [r5, #12]
1000c612:	2202      	movs	r2, #2
1000c614:	4313      	orrs	r3, r2
1000c616:	602b      	str	r3, [r5, #0]
1000c618:	3401      	adds	r4, #1
1000c61a:	e009      	b.n	1000c630 <_svfiprintf_r+0x114>
1000c61c:	7822      	ldrb	r2, [r4, #0]
1000c61e:	3a30      	subs	r2, #48	; 0x30
1000c620:	2a09      	cmp	r2, #9
1000c622:	d804      	bhi.n	1000c62e <_svfiprintf_r+0x112>
1000c624:	210a      	movs	r1, #10
1000c626:	434b      	muls	r3, r1
1000c628:	3401      	adds	r4, #1
1000c62a:	189b      	adds	r3, r3, r2
1000c62c:	e7f6      	b.n	1000c61c <_svfiprintf_r+0x100>
1000c62e:	9309      	str	r3, [sp, #36]	; 0x24
1000c630:	7823      	ldrb	r3, [r4, #0]
1000c632:	2b2e      	cmp	r3, #46	; 0x2e
1000c634:	d118      	bne.n	1000c668 <_svfiprintf_r+0x14c>
1000c636:	7863      	ldrb	r3, [r4, #1]
1000c638:	2b2a      	cmp	r3, #42	; 0x2a
1000c63a:	d109      	bne.n	1000c650 <_svfiprintf_r+0x134>
1000c63c:	9b05      	ldr	r3, [sp, #20]
1000c63e:	3402      	adds	r4, #2
1000c640:	1d1a      	adds	r2, r3, #4
1000c642:	681b      	ldr	r3, [r3, #0]
1000c644:	9205      	str	r2, [sp, #20]
1000c646:	2b00      	cmp	r3, #0
1000c648:	da0d      	bge.n	1000c666 <_svfiprintf_r+0x14a>
1000c64a:	2301      	movs	r3, #1
1000c64c:	425b      	negs	r3, r3
1000c64e:	e00a      	b.n	1000c666 <_svfiprintf_r+0x14a>
1000c650:	2300      	movs	r3, #0
1000c652:	3401      	adds	r4, #1
1000c654:	7822      	ldrb	r2, [r4, #0]
1000c656:	3a30      	subs	r2, #48	; 0x30
1000c658:	2a09      	cmp	r2, #9
1000c65a:	d804      	bhi.n	1000c666 <_svfiprintf_r+0x14a>
1000c65c:	210a      	movs	r1, #10
1000c65e:	434b      	muls	r3, r1
1000c660:	3401      	adds	r4, #1
1000c662:	189b      	adds	r3, r3, r2
1000c664:	e7f6      	b.n	1000c654 <_svfiprintf_r+0x138>
1000c666:	9307      	str	r3, [sp, #28]
1000c668:	4f23      	ldr	r7, [pc, #140]	; (1000c6f8 <_svfiprintf_r+0x1dc>)
1000c66a:	7821      	ldrb	r1, [r4, #0]
1000c66c:	1c38      	adds	r0, r7, #0
1000c66e:	2203      	movs	r2, #3
1000c670:	f000 f9d0 	bl	1000ca14 <memchr>
1000c674:	2800      	cmp	r0, #0
1000c676:	d007      	beq.n	1000c688 <_svfiprintf_r+0x16c>
1000c678:	1bc0      	subs	r0, r0, r7
1000c67a:	2740      	movs	r7, #64	; 0x40
1000c67c:	4087      	lsls	r7, r0
1000c67e:	1c38      	adds	r0, r7, #0
1000c680:	682b      	ldr	r3, [r5, #0]
1000c682:	3401      	adds	r4, #1
1000c684:	4318      	orrs	r0, r3
1000c686:	6028      	str	r0, [r5, #0]
1000c688:	7821      	ldrb	r1, [r4, #0]
1000c68a:	481c      	ldr	r0, [pc, #112]	; (1000c6fc <_svfiprintf_r+0x1e0>)
1000c68c:	2206      	movs	r2, #6
1000c68e:	1c67      	adds	r7, r4, #1
1000c690:	7629      	strb	r1, [r5, #24]
1000c692:	f000 f9bf 	bl	1000ca14 <memchr>
1000c696:	2800      	cmp	r0, #0
1000c698:	d012      	beq.n	1000c6c0 <_svfiprintf_r+0x1a4>
1000c69a:	4b19      	ldr	r3, [pc, #100]	; (1000c700 <_svfiprintf_r+0x1e4>)
1000c69c:	2b00      	cmp	r3, #0
1000c69e:	d106      	bne.n	1000c6ae <_svfiprintf_r+0x192>
1000c6a0:	2207      	movs	r2, #7
1000c6a2:	9b05      	ldr	r3, [sp, #20]
1000c6a4:	3307      	adds	r3, #7
1000c6a6:	4393      	bics	r3, r2
1000c6a8:	3308      	adds	r3, #8
1000c6aa:	9305      	str	r3, [sp, #20]
1000c6ac:	e014      	b.n	1000c6d8 <_svfiprintf_r+0x1bc>
1000c6ae:	ab05      	add	r3, sp, #20
1000c6b0:	9300      	str	r3, [sp, #0]
1000c6b2:	9802      	ldr	r0, [sp, #8]
1000c6b4:	1c29      	adds	r1, r5, #0
1000c6b6:	1c32      	adds	r2, r6, #0
1000c6b8:	4b12      	ldr	r3, [pc, #72]	; (1000c704 <_svfiprintf_r+0x1e8>)
1000c6ba:	e000      	b.n	1000c6be <_svfiprintf_r+0x1a2>
1000c6bc:	bf00      	nop
1000c6be:	e007      	b.n	1000c6d0 <_svfiprintf_r+0x1b4>
1000c6c0:	ab05      	add	r3, sp, #20
1000c6c2:	9300      	str	r3, [sp, #0]
1000c6c4:	9802      	ldr	r0, [sp, #8]
1000c6c6:	1c29      	adds	r1, r5, #0
1000c6c8:	1c32      	adds	r2, r6, #0
1000c6ca:	4b0e      	ldr	r3, [pc, #56]	; (1000c704 <_svfiprintf_r+0x1e8>)
1000c6cc:	f000 f88a 	bl	1000c7e4 <_printf_i>
1000c6d0:	9003      	str	r0, [sp, #12]
1000c6d2:	9b03      	ldr	r3, [sp, #12]
1000c6d4:	3301      	adds	r3, #1
1000c6d6:	d004      	beq.n	1000c6e2 <_svfiprintf_r+0x1c6>
1000c6d8:	696b      	ldr	r3, [r5, #20]
1000c6da:	9a03      	ldr	r2, [sp, #12]
1000c6dc:	189b      	adds	r3, r3, r2
1000c6de:	616b      	str	r3, [r5, #20]
1000c6e0:	e73d      	b.n	1000c55e <_svfiprintf_r+0x42>
1000c6e2:	89b3      	ldrh	r3, [r6, #12]
1000c6e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000c6e6:	065b      	lsls	r3, r3, #25
1000c6e8:	d501      	bpl.n	1000c6ee <_svfiprintf_r+0x1d2>
1000c6ea:	2001      	movs	r0, #1
1000c6ec:	4240      	negs	r0, r0
1000c6ee:	b01f      	add	sp, #124	; 0x7c
1000c6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c6f2:	46c0      	nop			; (mov r8, r8)
1000c6f4:	1001079d 	.word	0x1001079d
1000c6f8:	100107a3 	.word	0x100107a3
1000c6fc:	100107a7 	.word	0x100107a7
1000c700:	00000000 	.word	0x00000000
1000c704:	1000c45d 	.word	0x1000c45d

1000c708 <_printf_common>:
1000c708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c70a:	1c17      	adds	r7, r2, #0
1000c70c:	9301      	str	r3, [sp, #4]
1000c70e:	690a      	ldr	r2, [r1, #16]
1000c710:	688b      	ldr	r3, [r1, #8]
1000c712:	9000      	str	r0, [sp, #0]
1000c714:	1c0c      	adds	r4, r1, #0
1000c716:	4293      	cmp	r3, r2
1000c718:	da00      	bge.n	1000c71c <_printf_common+0x14>
1000c71a:	1c13      	adds	r3, r2, #0
1000c71c:	1c22      	adds	r2, r4, #0
1000c71e:	603b      	str	r3, [r7, #0]
1000c720:	3243      	adds	r2, #67	; 0x43
1000c722:	7812      	ldrb	r2, [r2, #0]
1000c724:	2a00      	cmp	r2, #0
1000c726:	d001      	beq.n	1000c72c <_printf_common+0x24>
1000c728:	3301      	adds	r3, #1
1000c72a:	603b      	str	r3, [r7, #0]
1000c72c:	6823      	ldr	r3, [r4, #0]
1000c72e:	069b      	lsls	r3, r3, #26
1000c730:	d502      	bpl.n	1000c738 <_printf_common+0x30>
1000c732:	683b      	ldr	r3, [r7, #0]
1000c734:	3302      	adds	r3, #2
1000c736:	603b      	str	r3, [r7, #0]
1000c738:	2506      	movs	r5, #6
1000c73a:	6823      	ldr	r3, [r4, #0]
1000c73c:	401d      	ands	r5, r3
1000c73e:	d01e      	beq.n	1000c77e <_printf_common+0x76>
1000c740:	1c23      	adds	r3, r4, #0
1000c742:	3343      	adds	r3, #67	; 0x43
1000c744:	781b      	ldrb	r3, [r3, #0]
1000c746:	1e5a      	subs	r2, r3, #1
1000c748:	4193      	sbcs	r3, r2
1000c74a:	6822      	ldr	r2, [r4, #0]
1000c74c:	0692      	lsls	r2, r2, #26
1000c74e:	d51c      	bpl.n	1000c78a <_printf_common+0x82>
1000c750:	2030      	movs	r0, #48	; 0x30
1000c752:	18e1      	adds	r1, r4, r3
1000c754:	3140      	adds	r1, #64	; 0x40
1000c756:	70c8      	strb	r0, [r1, #3]
1000c758:	1c21      	adds	r1, r4, #0
1000c75a:	1c5a      	adds	r2, r3, #1
1000c75c:	3145      	adds	r1, #69	; 0x45
1000c75e:	7809      	ldrb	r1, [r1, #0]
1000c760:	18a2      	adds	r2, r4, r2
1000c762:	3240      	adds	r2, #64	; 0x40
1000c764:	3302      	adds	r3, #2
1000c766:	70d1      	strb	r1, [r2, #3]
1000c768:	e00f      	b.n	1000c78a <_printf_common+0x82>
1000c76a:	1c22      	adds	r2, r4, #0
1000c76c:	2301      	movs	r3, #1
1000c76e:	9800      	ldr	r0, [sp, #0]
1000c770:	9901      	ldr	r1, [sp, #4]
1000c772:	3219      	adds	r2, #25
1000c774:	9e08      	ldr	r6, [sp, #32]
1000c776:	47b0      	blx	r6
1000c778:	1c43      	adds	r3, r0, #1
1000c77a:	d00e      	beq.n	1000c79a <_printf_common+0x92>
1000c77c:	3501      	adds	r5, #1
1000c77e:	68e3      	ldr	r3, [r4, #12]
1000c780:	683a      	ldr	r2, [r7, #0]
1000c782:	1a9b      	subs	r3, r3, r2
1000c784:	429d      	cmp	r5, r3
1000c786:	dbf0      	blt.n	1000c76a <_printf_common+0x62>
1000c788:	e7da      	b.n	1000c740 <_printf_common+0x38>
1000c78a:	1c22      	adds	r2, r4, #0
1000c78c:	9800      	ldr	r0, [sp, #0]
1000c78e:	9901      	ldr	r1, [sp, #4]
1000c790:	3243      	adds	r2, #67	; 0x43
1000c792:	9d08      	ldr	r5, [sp, #32]
1000c794:	47a8      	blx	r5
1000c796:	1c43      	adds	r3, r0, #1
1000c798:	d102      	bne.n	1000c7a0 <_printf_common+0x98>
1000c79a:	2001      	movs	r0, #1
1000c79c:	4240      	negs	r0, r0
1000c79e:	e020      	b.n	1000c7e2 <_printf_common+0xda>
1000c7a0:	2306      	movs	r3, #6
1000c7a2:	6820      	ldr	r0, [r4, #0]
1000c7a4:	68e1      	ldr	r1, [r4, #12]
1000c7a6:	683a      	ldr	r2, [r7, #0]
1000c7a8:	4003      	ands	r3, r0
1000c7aa:	2500      	movs	r5, #0
1000c7ac:	2b04      	cmp	r3, #4
1000c7ae:	d103      	bne.n	1000c7b8 <_printf_common+0xb0>
1000c7b0:	1a8d      	subs	r5, r1, r2
1000c7b2:	43eb      	mvns	r3, r5
1000c7b4:	17db      	asrs	r3, r3, #31
1000c7b6:	401d      	ands	r5, r3
1000c7b8:	68a3      	ldr	r3, [r4, #8]
1000c7ba:	6922      	ldr	r2, [r4, #16]
1000c7bc:	4293      	cmp	r3, r2
1000c7be:	dd01      	ble.n	1000c7c4 <_printf_common+0xbc>
1000c7c0:	1a9b      	subs	r3, r3, r2
1000c7c2:	18ed      	adds	r5, r5, r3
1000c7c4:	2700      	movs	r7, #0
1000c7c6:	42af      	cmp	r7, r5
1000c7c8:	da0a      	bge.n	1000c7e0 <_printf_common+0xd8>
1000c7ca:	1c22      	adds	r2, r4, #0
1000c7cc:	2301      	movs	r3, #1
1000c7ce:	9800      	ldr	r0, [sp, #0]
1000c7d0:	9901      	ldr	r1, [sp, #4]
1000c7d2:	321a      	adds	r2, #26
1000c7d4:	9e08      	ldr	r6, [sp, #32]
1000c7d6:	47b0      	blx	r6
1000c7d8:	1c43      	adds	r3, r0, #1
1000c7da:	d0de      	beq.n	1000c79a <_printf_common+0x92>
1000c7dc:	3701      	adds	r7, #1
1000c7de:	e7f2      	b.n	1000c7c6 <_printf_common+0xbe>
1000c7e0:	2000      	movs	r0, #0
1000c7e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000c7e4 <_printf_i>:
1000c7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c7e6:	b08b      	sub	sp, #44	; 0x2c
1000c7e8:	9206      	str	r2, [sp, #24]
1000c7ea:	1c0a      	adds	r2, r1, #0
1000c7ec:	3243      	adds	r2, #67	; 0x43
1000c7ee:	9307      	str	r3, [sp, #28]
1000c7f0:	9005      	str	r0, [sp, #20]
1000c7f2:	9204      	str	r2, [sp, #16]
1000c7f4:	7e0a      	ldrb	r2, [r1, #24]
1000c7f6:	1c0c      	adds	r4, r1, #0
1000c7f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000c7fa:	2a6e      	cmp	r2, #110	; 0x6e
1000c7fc:	d100      	bne.n	1000c800 <_printf_i+0x1c>
1000c7fe:	e0a8      	b.n	1000c952 <_printf_i+0x16e>
1000c800:	d811      	bhi.n	1000c826 <_printf_i+0x42>
1000c802:	2a63      	cmp	r2, #99	; 0x63
1000c804:	d022      	beq.n	1000c84c <_printf_i+0x68>
1000c806:	d809      	bhi.n	1000c81c <_printf_i+0x38>
1000c808:	2a00      	cmp	r2, #0
1000c80a:	d100      	bne.n	1000c80e <_printf_i+0x2a>
1000c80c:	e0b2      	b.n	1000c974 <_printf_i+0x190>
1000c80e:	2a58      	cmp	r2, #88	; 0x58
1000c810:	d000      	beq.n	1000c814 <_printf_i+0x30>
1000c812:	e0c2      	b.n	1000c99a <_printf_i+0x1b6>
1000c814:	3145      	adds	r1, #69	; 0x45
1000c816:	700a      	strb	r2, [r1, #0]
1000c818:	4a7c      	ldr	r2, [pc, #496]	; (1000ca0c <_printf_i+0x228>)
1000c81a:	e04f      	b.n	1000c8bc <_printf_i+0xd8>
1000c81c:	2a64      	cmp	r2, #100	; 0x64
1000c81e:	d01d      	beq.n	1000c85c <_printf_i+0x78>
1000c820:	2a69      	cmp	r2, #105	; 0x69
1000c822:	d01b      	beq.n	1000c85c <_printf_i+0x78>
1000c824:	e0b9      	b.n	1000c99a <_printf_i+0x1b6>
1000c826:	2a73      	cmp	r2, #115	; 0x73
1000c828:	d100      	bne.n	1000c82c <_printf_i+0x48>
1000c82a:	e0a7      	b.n	1000c97c <_printf_i+0x198>
1000c82c:	d809      	bhi.n	1000c842 <_printf_i+0x5e>
1000c82e:	2a6f      	cmp	r2, #111	; 0x6f
1000c830:	d029      	beq.n	1000c886 <_printf_i+0xa2>
1000c832:	2a70      	cmp	r2, #112	; 0x70
1000c834:	d000      	beq.n	1000c838 <_printf_i+0x54>
1000c836:	e0b0      	b.n	1000c99a <_printf_i+0x1b6>
1000c838:	2220      	movs	r2, #32
1000c83a:	6809      	ldr	r1, [r1, #0]
1000c83c:	430a      	orrs	r2, r1
1000c83e:	6022      	str	r2, [r4, #0]
1000c840:	e037      	b.n	1000c8b2 <_printf_i+0xce>
1000c842:	2a75      	cmp	r2, #117	; 0x75
1000c844:	d01f      	beq.n	1000c886 <_printf_i+0xa2>
1000c846:	2a78      	cmp	r2, #120	; 0x78
1000c848:	d033      	beq.n	1000c8b2 <_printf_i+0xce>
1000c84a:	e0a6      	b.n	1000c99a <_printf_i+0x1b6>
1000c84c:	1c0d      	adds	r5, r1, #0
1000c84e:	681a      	ldr	r2, [r3, #0]
1000c850:	3542      	adds	r5, #66	; 0x42
1000c852:	1d11      	adds	r1, r2, #4
1000c854:	6019      	str	r1, [r3, #0]
1000c856:	6813      	ldr	r3, [r2, #0]
1000c858:	702b      	strb	r3, [r5, #0]
1000c85a:	e0a1      	b.n	1000c9a0 <_printf_i+0x1bc>
1000c85c:	6821      	ldr	r1, [r4, #0]
1000c85e:	681a      	ldr	r2, [r3, #0]
1000c860:	0608      	lsls	r0, r1, #24
1000c862:	d503      	bpl.n	1000c86c <_printf_i+0x88>
1000c864:	1d11      	adds	r1, r2, #4
1000c866:	6019      	str	r1, [r3, #0]
1000c868:	6816      	ldr	r6, [r2, #0]
1000c86a:	e005      	b.n	1000c878 <_printf_i+0x94>
1000c86c:	0649      	lsls	r1, r1, #25
1000c86e:	d5f9      	bpl.n	1000c864 <_printf_i+0x80>
1000c870:	1d11      	adds	r1, r2, #4
1000c872:	6019      	str	r1, [r3, #0]
1000c874:	2300      	movs	r3, #0
1000c876:	5ed6      	ldrsh	r6, [r2, r3]
1000c878:	2e00      	cmp	r6, #0
1000c87a:	da3b      	bge.n	1000c8f4 <_printf_i+0x110>
1000c87c:	232d      	movs	r3, #45	; 0x2d
1000c87e:	9a04      	ldr	r2, [sp, #16]
1000c880:	4276      	negs	r6, r6
1000c882:	7013      	strb	r3, [r2, #0]
1000c884:	e036      	b.n	1000c8f4 <_printf_i+0x110>
1000c886:	6821      	ldr	r1, [r4, #0]
1000c888:	681a      	ldr	r2, [r3, #0]
1000c88a:	0608      	lsls	r0, r1, #24
1000c88c:	d503      	bpl.n	1000c896 <_printf_i+0xb2>
1000c88e:	1d11      	adds	r1, r2, #4
1000c890:	6019      	str	r1, [r3, #0]
1000c892:	6816      	ldr	r6, [r2, #0]
1000c894:	e005      	b.n	1000c8a2 <_printf_i+0xbe>
1000c896:	0649      	lsls	r1, r1, #25
1000c898:	d5f9      	bpl.n	1000c88e <_printf_i+0xaa>
1000c89a:	1d11      	adds	r1, r2, #4
1000c89c:	6019      	str	r1, [r3, #0]
1000c89e:	6816      	ldr	r6, [r2, #0]
1000c8a0:	b2b6      	uxth	r6, r6
1000c8a2:	4b5a      	ldr	r3, [pc, #360]	; (1000ca0c <_printf_i+0x228>)
1000c8a4:	7e22      	ldrb	r2, [r4, #24]
1000c8a6:	9303      	str	r3, [sp, #12]
1000c8a8:	270a      	movs	r7, #10
1000c8aa:	2a6f      	cmp	r2, #111	; 0x6f
1000c8ac:	d11d      	bne.n	1000c8ea <_printf_i+0x106>
1000c8ae:	2708      	movs	r7, #8
1000c8b0:	e01b      	b.n	1000c8ea <_printf_i+0x106>
1000c8b2:	1c22      	adds	r2, r4, #0
1000c8b4:	2178      	movs	r1, #120	; 0x78
1000c8b6:	3245      	adds	r2, #69	; 0x45
1000c8b8:	7011      	strb	r1, [r2, #0]
1000c8ba:	4a55      	ldr	r2, [pc, #340]	; (1000ca10 <_printf_i+0x22c>)
1000c8bc:	6819      	ldr	r1, [r3, #0]
1000c8be:	9203      	str	r2, [sp, #12]
1000c8c0:	1d08      	adds	r0, r1, #4
1000c8c2:	6822      	ldr	r2, [r4, #0]
1000c8c4:	6018      	str	r0, [r3, #0]
1000c8c6:	680e      	ldr	r6, [r1, #0]
1000c8c8:	0610      	lsls	r0, r2, #24
1000c8ca:	d402      	bmi.n	1000c8d2 <_printf_i+0xee>
1000c8cc:	0650      	lsls	r0, r2, #25
1000c8ce:	d500      	bpl.n	1000c8d2 <_printf_i+0xee>
1000c8d0:	b2b6      	uxth	r6, r6
1000c8d2:	07d3      	lsls	r3, r2, #31
1000c8d4:	d502      	bpl.n	1000c8dc <_printf_i+0xf8>
1000c8d6:	2320      	movs	r3, #32
1000c8d8:	431a      	orrs	r2, r3
1000c8da:	6022      	str	r2, [r4, #0]
1000c8dc:	2710      	movs	r7, #16
1000c8de:	2e00      	cmp	r6, #0
1000c8e0:	d103      	bne.n	1000c8ea <_printf_i+0x106>
1000c8e2:	2320      	movs	r3, #32
1000c8e4:	6822      	ldr	r2, [r4, #0]
1000c8e6:	439a      	bics	r2, r3
1000c8e8:	6022      	str	r2, [r4, #0]
1000c8ea:	1c23      	adds	r3, r4, #0
1000c8ec:	2200      	movs	r2, #0
1000c8ee:	3343      	adds	r3, #67	; 0x43
1000c8f0:	701a      	strb	r2, [r3, #0]
1000c8f2:	e002      	b.n	1000c8fa <_printf_i+0x116>
1000c8f4:	270a      	movs	r7, #10
1000c8f6:	4b45      	ldr	r3, [pc, #276]	; (1000ca0c <_printf_i+0x228>)
1000c8f8:	9303      	str	r3, [sp, #12]
1000c8fa:	6863      	ldr	r3, [r4, #4]
1000c8fc:	60a3      	str	r3, [r4, #8]
1000c8fe:	2b00      	cmp	r3, #0
1000c900:	db03      	blt.n	1000c90a <_printf_i+0x126>
1000c902:	2204      	movs	r2, #4
1000c904:	6821      	ldr	r1, [r4, #0]
1000c906:	4391      	bics	r1, r2
1000c908:	6021      	str	r1, [r4, #0]
1000c90a:	2e00      	cmp	r6, #0
1000c90c:	d102      	bne.n	1000c914 <_printf_i+0x130>
1000c90e:	9d04      	ldr	r5, [sp, #16]
1000c910:	2b00      	cmp	r3, #0
1000c912:	d00e      	beq.n	1000c932 <_printf_i+0x14e>
1000c914:	9d04      	ldr	r5, [sp, #16]
1000c916:	1c30      	adds	r0, r6, #0
1000c918:	1c39      	adds	r1, r7, #0
1000c91a:	f7fd f8e1 	bl	10009ae0 <__aeabi_uidivmod>
1000c91e:	9b03      	ldr	r3, [sp, #12]
1000c920:	3d01      	subs	r5, #1
1000c922:	5c5b      	ldrb	r3, [r3, r1]
1000c924:	1c30      	adds	r0, r6, #0
1000c926:	702b      	strb	r3, [r5, #0]
1000c928:	1c39      	adds	r1, r7, #0
1000c92a:	f7fd f8b9 	bl	10009aa0 <__aeabi_uidiv>
1000c92e:	1e06      	subs	r6, r0, #0
1000c930:	d1f1      	bne.n	1000c916 <_printf_i+0x132>
1000c932:	2f08      	cmp	r7, #8
1000c934:	d109      	bne.n	1000c94a <_printf_i+0x166>
1000c936:	6823      	ldr	r3, [r4, #0]
1000c938:	07db      	lsls	r3, r3, #31
1000c93a:	d506      	bpl.n	1000c94a <_printf_i+0x166>
1000c93c:	6863      	ldr	r3, [r4, #4]
1000c93e:	6922      	ldr	r2, [r4, #16]
1000c940:	4293      	cmp	r3, r2
1000c942:	dc02      	bgt.n	1000c94a <_printf_i+0x166>
1000c944:	2330      	movs	r3, #48	; 0x30
1000c946:	3d01      	subs	r5, #1
1000c948:	702b      	strb	r3, [r5, #0]
1000c94a:	9b04      	ldr	r3, [sp, #16]
1000c94c:	1b5b      	subs	r3, r3, r5
1000c94e:	6123      	str	r3, [r4, #16]
1000c950:	e02b      	b.n	1000c9aa <_printf_i+0x1c6>
1000c952:	6809      	ldr	r1, [r1, #0]
1000c954:	681a      	ldr	r2, [r3, #0]
1000c956:	0608      	lsls	r0, r1, #24
1000c958:	d407      	bmi.n	1000c96a <_printf_i+0x186>
1000c95a:	0649      	lsls	r1, r1, #25
1000c95c:	d505      	bpl.n	1000c96a <_printf_i+0x186>
1000c95e:	1d11      	adds	r1, r2, #4
1000c960:	6019      	str	r1, [r3, #0]
1000c962:	6813      	ldr	r3, [r2, #0]
1000c964:	8aa2      	ldrh	r2, [r4, #20]
1000c966:	801a      	strh	r2, [r3, #0]
1000c968:	e004      	b.n	1000c974 <_printf_i+0x190>
1000c96a:	1d11      	adds	r1, r2, #4
1000c96c:	6019      	str	r1, [r3, #0]
1000c96e:	6813      	ldr	r3, [r2, #0]
1000c970:	6962      	ldr	r2, [r4, #20]
1000c972:	601a      	str	r2, [r3, #0]
1000c974:	2300      	movs	r3, #0
1000c976:	9d04      	ldr	r5, [sp, #16]
1000c978:	6123      	str	r3, [r4, #16]
1000c97a:	e016      	b.n	1000c9aa <_printf_i+0x1c6>
1000c97c:	681a      	ldr	r2, [r3, #0]
1000c97e:	1d11      	adds	r1, r2, #4
1000c980:	6019      	str	r1, [r3, #0]
1000c982:	6815      	ldr	r5, [r2, #0]
1000c984:	2100      	movs	r1, #0
1000c986:	1c28      	adds	r0, r5, #0
1000c988:	6862      	ldr	r2, [r4, #4]
1000c98a:	f000 f843 	bl	1000ca14 <memchr>
1000c98e:	2800      	cmp	r0, #0
1000c990:	d001      	beq.n	1000c996 <_printf_i+0x1b2>
1000c992:	1b40      	subs	r0, r0, r5
1000c994:	6060      	str	r0, [r4, #4]
1000c996:	6863      	ldr	r3, [r4, #4]
1000c998:	e003      	b.n	1000c9a2 <_printf_i+0x1be>
1000c99a:	1c25      	adds	r5, r4, #0
1000c99c:	3542      	adds	r5, #66	; 0x42
1000c99e:	702a      	strb	r2, [r5, #0]
1000c9a0:	2301      	movs	r3, #1
1000c9a2:	6123      	str	r3, [r4, #16]
1000c9a4:	2300      	movs	r3, #0
1000c9a6:	9a04      	ldr	r2, [sp, #16]
1000c9a8:	7013      	strb	r3, [r2, #0]
1000c9aa:	9b07      	ldr	r3, [sp, #28]
1000c9ac:	9805      	ldr	r0, [sp, #20]
1000c9ae:	9300      	str	r3, [sp, #0]
1000c9b0:	1c21      	adds	r1, r4, #0
1000c9b2:	9b06      	ldr	r3, [sp, #24]
1000c9b4:	aa09      	add	r2, sp, #36	; 0x24
1000c9b6:	f7ff fea7 	bl	1000c708 <_printf_common>
1000c9ba:	1c43      	adds	r3, r0, #1
1000c9bc:	d102      	bne.n	1000c9c4 <_printf_i+0x1e0>
1000c9be:	2001      	movs	r0, #1
1000c9c0:	4240      	negs	r0, r0
1000c9c2:	e021      	b.n	1000ca08 <_printf_i+0x224>
1000c9c4:	1c2a      	adds	r2, r5, #0
1000c9c6:	6923      	ldr	r3, [r4, #16]
1000c9c8:	9805      	ldr	r0, [sp, #20]
1000c9ca:	9906      	ldr	r1, [sp, #24]
1000c9cc:	9d07      	ldr	r5, [sp, #28]
1000c9ce:	47a8      	blx	r5
1000c9d0:	1c43      	adds	r3, r0, #1
1000c9d2:	d0f4      	beq.n	1000c9be <_printf_i+0x1da>
1000c9d4:	6823      	ldr	r3, [r4, #0]
1000c9d6:	079b      	lsls	r3, r3, #30
1000c9d8:	d405      	bmi.n	1000c9e6 <_printf_i+0x202>
1000c9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c9dc:	68e0      	ldr	r0, [r4, #12]
1000c9de:	4298      	cmp	r0, r3
1000c9e0:	da12      	bge.n	1000ca08 <_printf_i+0x224>
1000c9e2:	1c18      	adds	r0, r3, #0
1000c9e4:	e010      	b.n	1000ca08 <_printf_i+0x224>
1000c9e6:	2500      	movs	r5, #0
1000c9e8:	68e3      	ldr	r3, [r4, #12]
1000c9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000c9ec:	1a9b      	subs	r3, r3, r2
1000c9ee:	429d      	cmp	r5, r3
1000c9f0:	daf3      	bge.n	1000c9da <_printf_i+0x1f6>
1000c9f2:	1c22      	adds	r2, r4, #0
1000c9f4:	2301      	movs	r3, #1
1000c9f6:	9805      	ldr	r0, [sp, #20]
1000c9f8:	9906      	ldr	r1, [sp, #24]
1000c9fa:	3219      	adds	r2, #25
1000c9fc:	9e07      	ldr	r6, [sp, #28]
1000c9fe:	47b0      	blx	r6
1000ca00:	1c43      	adds	r3, r0, #1
1000ca02:	d0dc      	beq.n	1000c9be <_printf_i+0x1da>
1000ca04:	3501      	adds	r5, #1
1000ca06:	e7ef      	b.n	1000c9e8 <_printf_i+0x204>
1000ca08:	b00b      	add	sp, #44	; 0x2c
1000ca0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca0c:	100107ae 	.word	0x100107ae
1000ca10:	100107bf 	.word	0x100107bf

1000ca14 <memchr>:
1000ca14:	b2c9      	uxtb	r1, r1
1000ca16:	1882      	adds	r2, r0, r2
1000ca18:	4290      	cmp	r0, r2
1000ca1a:	d004      	beq.n	1000ca26 <memchr+0x12>
1000ca1c:	7803      	ldrb	r3, [r0, #0]
1000ca1e:	428b      	cmp	r3, r1
1000ca20:	d002      	beq.n	1000ca28 <memchr+0x14>
1000ca22:	3001      	adds	r0, #1
1000ca24:	e7f8      	b.n	1000ca18 <memchr+0x4>
1000ca26:	2000      	movs	r0, #0
1000ca28:	4770      	bx	lr

1000ca2a <memmove>:
1000ca2a:	b510      	push	{r4, lr}
1000ca2c:	4281      	cmp	r1, r0
1000ca2e:	d208      	bcs.n	1000ca42 <memmove+0x18>
1000ca30:	188b      	adds	r3, r1, r2
1000ca32:	4298      	cmp	r0, r3
1000ca34:	d205      	bcs.n	1000ca42 <memmove+0x18>
1000ca36:	1a9b      	subs	r3, r3, r2
1000ca38:	3a01      	subs	r2, #1
1000ca3a:	d309      	bcc.n	1000ca50 <memmove+0x26>
1000ca3c:	5c99      	ldrb	r1, [r3, r2]
1000ca3e:	5481      	strb	r1, [r0, r2]
1000ca40:	e7fa      	b.n	1000ca38 <memmove+0xe>
1000ca42:	2300      	movs	r3, #0
1000ca44:	4293      	cmp	r3, r2
1000ca46:	d003      	beq.n	1000ca50 <memmove+0x26>
1000ca48:	5ccc      	ldrb	r4, [r1, r3]
1000ca4a:	54c4      	strb	r4, [r0, r3]
1000ca4c:	3301      	adds	r3, #1
1000ca4e:	e7f9      	b.n	1000ca44 <memmove+0x1a>
1000ca50:	bd10      	pop	{r4, pc}

1000ca52 <_realloc_r>:
1000ca52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ca54:	1c06      	adds	r6, r0, #0
1000ca56:	1c0c      	adds	r4, r1, #0
1000ca58:	1c15      	adds	r5, r2, #0
1000ca5a:	2900      	cmp	r1, #0
1000ca5c:	d104      	bne.n	1000ca68 <_realloc_r+0x16>
1000ca5e:	1c11      	adds	r1, r2, #0
1000ca60:	f7ff fc4a 	bl	1000c2f8 <_malloc_r>
1000ca64:	1c04      	adds	r4, r0, #0
1000ca66:	e018      	b.n	1000ca9a <_realloc_r+0x48>
1000ca68:	2a00      	cmp	r2, #0
1000ca6a:	d103      	bne.n	1000ca74 <_realloc_r+0x22>
1000ca6c:	f7ff fbfe 	bl	1000c26c <_free_r>
1000ca70:	1c2c      	adds	r4, r5, #0
1000ca72:	e012      	b.n	1000ca9a <_realloc_r+0x48>
1000ca74:	f000 f813 	bl	1000ca9e <_malloc_usable_size_r>
1000ca78:	42a8      	cmp	r0, r5
1000ca7a:	d20e      	bcs.n	1000ca9a <_realloc_r+0x48>
1000ca7c:	1c30      	adds	r0, r6, #0
1000ca7e:	1c29      	adds	r1, r5, #0
1000ca80:	f7ff fc3a 	bl	1000c2f8 <_malloc_r>
1000ca84:	1e07      	subs	r7, r0, #0
1000ca86:	d007      	beq.n	1000ca98 <_realloc_r+0x46>
1000ca88:	1c21      	adds	r1, r4, #0
1000ca8a:	1c2a      	adds	r2, r5, #0
1000ca8c:	f7ff fbcf 	bl	1000c22e <memcpy>
1000ca90:	1c30      	adds	r0, r6, #0
1000ca92:	1c21      	adds	r1, r4, #0
1000ca94:	f7ff fbea 	bl	1000c26c <_free_r>
1000ca98:	1c3c      	adds	r4, r7, #0
1000ca9a:	1c20      	adds	r0, r4, #0
1000ca9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000ca9e <_malloc_usable_size_r>:
1000ca9e:	1f0b      	subs	r3, r1, #4
1000caa0:	681a      	ldr	r2, [r3, #0]
1000caa2:	1f10      	subs	r0, r2, #4
1000caa4:	2a00      	cmp	r2, #0
1000caa6:	da04      	bge.n	1000cab2 <_malloc_usable_size_r+0x14>
1000caa8:	1889      	adds	r1, r1, r2
1000caaa:	3904      	subs	r1, #4
1000caac:	680b      	ldr	r3, [r1, #0]
1000caae:	18d0      	adds	r0, r2, r3
1000cab0:	3804      	subs	r0, #4
1000cab2:	4770      	bx	lr
1000cab4:	74616c50 	.word	0x74616c50
1000cab8:	6d726f66 	.word	0x6d726f66
1000cabc:	6e694220 	.word	0x6e694220
1000cac0:	676e6964 	.word	0x676e6964
	...

1000cac5 <g_pctr_states_table>:
1000cac5:	04000400 ffff0201 ffff0201 0707ffff     ................
1000cad5:	73250a0d 73257325 1b007325 006d305b     ..%s%s%s%s..[0m.
1000cae5:	73736150 46006465 656c6961 69772064     Passed.Failed wi
1000caf5:	72206874 72757465 6176206e 2065756c     th return value 
1000cb05:	2500202d 00733733 676e654c 6f206874     - .%37s.Length o
1000cb15:	61642066 2d206174 32250020 73257335     f data - .%25s%s
1000cb25:	d2007325                                         %s.

1000cb28 <g_optiga_unique_application_identifier>:
1000cb28:	000076d2 6e654704 68747541 6c707041     .v...GenAuthAppl

1000cb38 <FSb>:
1000cb38:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
1000cb48:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
1000cb58:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
1000cb68:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
1000cb78:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
1000cb88:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
1000cb98:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
1000cba8:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
1000cbb8:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
1000cbc8:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
1000cbd8:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
1000cbe8:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
1000cbf8:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
1000cc08:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
1000cc18:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
1000cc28:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

1000cc38 <RT0>:
1000cc38:	50a7f451 5365417e c3a4171a 965e273a     Q..P~AeS....:'^.
1000cc48:	cb6bab3b f1459d1f ab58faac 9303e34b     ;.k...E...X.K...
1000cc58:	55fa3020 f66d76ad 9176cc88 254c02f5      0.U.vm...v...L%
1000cc68:	fcd7e54f d7cb2ac5 80443526 8fa362b5     O....*..&5D..b..
1000cc78:	495ab1de 671bba25 980eea45 e1c0fe5d     ..ZI%..gE...]...
1000cc88:	02752fc3 12f04c81 a397468d c6f9d36b     ./u..L...F..k...
1000cc98:	e75f8f03 959c9215 eb7a6dbf da595295     .._......mz..RY.
1000cca8:	2d83bed4 d3217458 2969e049 44c8c98e     ...-Xt!.I.i)...D
1000ccb8:	6a89c275 78798ef4 6b3e5899 dd71b927     u..j..yx.X>k'.q.
1000ccc8:	b64fe1be 17ad88f0 66ac20c9 b43ace7d     ..O...... .f}.:.
1000ccd8:	184adf63 82311ae5 60335197 457f5362     c.J...1..Q3`bS.E
1000cce8:	e07764b1 84ae6bbb 1ca081fe 942b08f9     .dw..k........+.
1000ccf8:	58684870 19fd458f 876cde94 b7f87b52     pHhX.E....l.R{..
1000cd08:	23d373ab e2024b72 578f1fe3 2aab5566     .s.#rK.....WfU.*
1000cd18:	0728ebb2 03c2b52f 9a7bc586 a50837d3     ..(./.....{..7..
1000cd28:	f2872830 b2a5bf23 ba6a0302 5c8216ed     0(..#.....j....\
1000cd38:	2b1ccf8a 92b479a7 f0f207f3 a1e2694e     ...+.y......Ni..
1000cd48:	cdf4da65 d5be0506 1f6234d1 8afea6c4     e........4b.....
1000cd58:	9d532e34 a055f3a2 32e18a05 75ebf6a4     4.S...U....2...u
1000cd68:	39ec830b aaef6040 069f715e 51106ebd     ...9@`..^q...n.Q
1000cd78:	f98a213e 3d06dd96 ae053edd 46bde64d     >!.....=.>..M..F
1000cd88:	b58d5491 055dc471 6fd40604 ff155060     .T..q.]....o`P..
1000cd98:	24fb9819 97e9bdd6 cc434089 779ed967     ...$.....@C.g..w
1000cda8:	bd42e8b0 888b8907 385b19e7 dbeec879     ..B.......[8y...
1000cdb8:	470a7ca1 e90f427c c91e84f8 00000000     .|.G|B..........
1000cdc8:	83868009 48ed2b32 ac70111e 4e725a6c     ....2+.H..p.lZrN
1000cdd8:	fbff0efd 5638850f 1ed5ae3d 27392d36     ......8V=...6-9'
1000cde8:	64d90f0a 21a65c68 d1545b9b 3a2e3624     ...dh\.!.[T.$6.:
1000cdf8:	b1670a0c 0fe75793 d296eeb4 9e919b1b     ..g..W..........
1000ce08:	4fc5c080 a220dc61 694b775a 161a121c     ...Oa. .ZwKi....
1000ce18:	0aba93e2 e52aa0c0 43e0223c 1d171b12     ......*.<".C....
1000ce28:	0b0d090e adc78bf2 b9a8b62d c8a91e14     ........-.......
1000ce38:	8519f157 4c0775af bbdd99ee fd607fa3     W....u.L......`.
1000ce48:	9f2601f7 bcf5725c c53b6644 347efb5b     ..&.\r..Df;.[.~4
1000ce58:	7629438b dcc623cb 68fcedb6 63f1e4b8     .C)v.#.....h...c
1000ce68:	cadc31d7 10856342 40229713 2011c684     .1..Bc...."@... 
1000ce78:	7d244a85 f83dbbd2 1132f9ae 6da129c7     .J$}..=...2..).m
1000ce88:	4b2f9e1d f330b2dc ec52860d d0e3c177     ../K..0...R.w...
1000ce98:	6c16b32b 99b970a9 fa489411 2264e947     +..l.p....H.G.d"
1000cea8:	c48cfca8 1a3ff0a0 d82c7d56 ef903322     ......?.V},."3..
1000ceb8:	c74e4987 c1d138d9 fea2ca8c 360bd498     .IN..8.........6
1000cec8:	cf81f5a6 28de7aa5 268eb7da a4bfad3f     .....z.(...&?...
1000ced8:	e49d3a2c 0d927850 9bcc5f6a 62467e54     ,:..Px..j_..T~Fb
1000cee8:	c2138df6 e8b8d890 5ef7392e f5afc382     .........9.^....
1000cef8:	be805d9f 7c93d069 a92dd56f b31225cf     .]..i..|o.-..%..
1000cf08:	3b99acc8 a77d1810 6e639ce8 7bbb3bdb     ...;..}...cn.;.{
1000cf18:	097826cd f418596e 01b79aec a89a4f83     .&x.nY.......O..
1000cf28:	656e95e6 7ee6ffaa 08cfbc21 e6e815ef     ..ne...~!.......
1000cf38:	d99be7ba ce366f4a d4099fea d67cb029     ....Jo6.....).|.
1000cf48:	afb2a431 31233f2a 3094a5c6 c066a235     1...*?#1...05.f.
1000cf58:	37bc4e74 a6ca82fc b0d090e0 15d8a733     tN.7........3...
1000cf68:	4a9804f1 f7daec41 0e50cd7f 2ff69117     ...JA.....P..../
1000cf78:	8dd64d76 4db0ef43 544daacc df0496e4     vM..C..M..MT....
1000cf88:	e3b5d19e 1b886a4c b81f2cc1 7f516546     ....Lj...,..FeQ.
1000cf98:	04ea5e9d 5d358c01 737487fa 2e410bfb     .^....5]..ts..A.
1000cfa8:	5a1d67b3 52d2db92 335610e9 1347d66d     .g.Z...R..V3m.G.
1000cfb8:	8c61d79a 7a0ca137 8e14f859 893c13eb     ..a.7..zY.....<.
1000cfc8:	ee27a9ce 35c961b7 ede51ce1 3cb1477a     ..'..a.5....zG.<
1000cfd8:	59dfd29c 3f73f255 79ce1418 bf37c773     ...YU.s?...ys.7.
1000cfe8:	eacdf753 5baafd5f 146f3ddf 86db4478     S..._..[.=o.xD..
1000cff8:	81f3afca 3ec468b9 2c342438 5f40a3c2     .....h.>8$4,..@_
1000d008:	72c31d16 0c25e2bc 8b493c28 41950dff     ...r..%.(<I....A
1000d018:	7101a839 deb30c08 9ce4b4d8 90c15664     9..q........dV..
1000d028:	6184cb7b 70b632d5 745c6c48 4257b8d0     {..a.2.pHl\t..WB

1000d038 <RT1>:
1000d038:	a7f45150 65417e53 a4171ac3 5e273a96     PQ..S~Ae.....:'^
1000d048:	6bab3bcb 459d1ff1 58faacab 03e34b93     .;.k...E...X.K..
1000d058:	fa302055 6d76adf6 76cc8891 4c02f525     U 0...vm...v%..L
1000d068:	d7e54ffc cb2ac5d7 44352680 a362b58f     .O....*..&5D..b.
1000d078:	5ab1de49 1bba2567 0eea4598 c0fe5de1     I..Zg%...E...]..
1000d088:	752fc302 f04c8112 97468da3 f9d36bc6     ../u..L...F..k..
1000d098:	5f8f03e7 9c921595 7a6dbfeb 595295da     ..._......mz..RY
1000d0a8:	83bed42d 217458d3 69e04929 c8c98e44     -....Xt!)I.iD...
1000d0b8:	89c2756a 798ef478 3e58996b 71b927dd     ju..x..yk.X>.'.q
1000d0c8:	4fe1beb6 ad88f017 ac20c966 3ace7db4     ...O....f. ..}.:
1000d0d8:	4adf6318 311ae582 33519760 7f536245     .c.J...1`.Q3EbS.
1000d0e8:	7764b1e0 ae6bbb84 a081fe1c 2b08f994     ..dw..k........+
1000d0f8:	68487058 fd458f19 6cde9487 f87b52b7     XpHh..E....l.R{.
1000d108:	d373ab23 024b72e2 8f1fe357 ab55662a     #.s..rK.W...*fU.
1000d118:	28ebb207 c2b52f03 7bc5869a 0837d3a5     ...(./.....{..7.
1000d128:	872830f2 a5bf23b2 6a0302ba 8216ed5c     .0(..#.....j\...
1000d138:	1ccf8a2b b479a792 f207f3f0 e2694ea1     +.....y......Ni.
1000d148:	f4da65cd be0506d5 6234d11f fea6c48a     .e........4b....
1000d158:	532e349d 55f3a2a0 e18a0532 ebf6a475     .4.S...U2...u...
1000d168:	ec830b39 ef6040aa 9f715e06 106ebd51     9....@`..^q.Q.n.
1000d178:	8a213ef9 06dd963d 053eddae bde64d46     .>!.=.....>.FM..
1000d188:	8d5491b5 5dc47105 d406046f 155060ff     ..T..q.]o....`P.
1000d198:	fb981924 e9bdd697 434089cc 9ed96777     $.........@Cwg..
1000d1a8:	42e8b0bd 8b890788 5b19e738 eec879db     ...B....8..[.y..
1000d1b8:	0a7ca147 0f427ce9 1e84f8c9 00000000     G.|..|B.........
1000d1c8:	86800983 ed2b3248 70111eac 725a6c4e     ....H2+....pNlZr
1000d1d8:	ff0efdfb 38850f56 d5ae3d1e 392d3627     ....V..8.=..'6-9
1000d1e8:	d90f0a64 a65c6821 545b9bd1 2e36243a     d...!h\...[T:$6.
1000d1f8:	670a0cb1 e757930f 96eeb4d2 919b1b9e     ...g..W.........
1000d208:	c5c0804f 20dc61a2 4b775a69 1a121c16     O....a. iZwK....
1000d218:	ba93e20a 2aa0c0e5 e0223c43 171b121d     .......*C<".....
1000d228:	0d090e0b c78bf2ad a8b62db9 a91e14c8     .........-......
1000d238:	19f15785 0775af4c dd99eebb 607fa3fd     .W..L.u........`
1000d248:	2601f79f f5725cbc 3b6644c5 7efb5b34     ...&.\r..Df;4[.~
1000d258:	29438b76 c623cbdc fcedb668 f1e4b863     v.C)..#.h...c...
1000d268:	dc31d7ca 85634210 22971340 11c68420     ..1..Bc.@.." ...
1000d278:	244a857d 3dbbd2f8 32f9ae11 a129c76d     }.J$...=...2m.).
1000d288:	2f9e1d4b 30b2dcf3 52860dec e3c177d0     K../...0...R.w..
1000d298:	16b32b6c b970a999 489411fa 64e94722     l+....p....H"G.d
1000d2a8:	8cfca8c4 3ff0a01a 2c7d56d8 903322ef     .......?.V},."3.
1000d2b8:	4e4987c7 d138d9c1 a2ca8cfe 0bd49836     ..IN..8.....6...
1000d2c8:	81f5a6cf de7aa528 8eb7da26 bfad3fa4     ....(.z.&....?..
1000d2d8:	9d3a2ce4 9278500d cc5f6a9b 467e5462     .,:..Px..j_.bT~F
1000d2e8:	138df6c2 b8d890e8 f7392e5e afc382f5     ........^.9.....
1000d2f8:	805d9fbe 93d0697c 2dd56fa9 1225cfb3     ..].|i...o.-..%.
1000d308:	99acc83b 7d1810a7 639ce86e bb3bdb7b     ;......}n..c{.;.
1000d318:	7826cd09 18596ef4 b79aec01 9a4f83a8     ..&x.nY.......O.
1000d328:	6e95e665 e6ffaa7e cfbc2108 e815efe6     e..n~....!......
1000d338:	9be7bad9 366f4ace 099fead4 7cb029d6     .....Jo6.....).|
1000d348:	b2a431af 233f2a31 94a5c630 66a235c0     .1..1*?#0....5.f
1000d358:	bc4e7437 ca82fca6 d090e0b0 d8a73315     7tN..........3..
1000d368:	9804f14a daec41f7 50cd7f0e f691172f     J....A.....P/...
1000d378:	d64d768d b0ef434d 4daacc54 0496e4df     .vM.MC..T..M....
1000d388:	b5d19ee3 886a4c1b 1f2cc1b8 5165467f     .....Lj...,..FeQ
1000d398:	ea5e9d04 358c015d 7487fa73 410bfb2e     ..^.]..5s..t...A
1000d3a8:	1d67b35a d2db9252 5610e933 47d66d13     Z.g.R...3..V.m.G
1000d3b8:	61d79a8c 0ca1377a 14f8598e 3c13eb89     ...az7...Y.....<
1000d3c8:	27a9ceee c961b735 e51ce1ed b1477a3c     ...'5.a.....<zG.
1000d3d8:	dfd29c59 73f2553f ce141879 37c773bf     Y...?U.sy....s.7
1000d3e8:	cdf753ea aafd5f5b 6f3ddf14 db447886     .S..[_....=o.xD.
1000d3f8:	f3afca81 c468b93e 3424382c 40a3c25f     ....>.h.,8$4_..@
1000d408:	c31d1672 25e2bc0c 493c288b 950dff41     r......%.(<IA...
1000d418:	01a83971 b30c08de e4b4d89c c1566490     q9...........dV.
1000d428:	84cb7b61 b632d570 5c6c4874 57b8d042     a{..p.2.tHl\B..W

1000d438 <RT2>:
1000d438:	f45150a7 417e5365 171ac3a4 273a965e     .PQ.eS~A....^.:'
1000d448:	ab3bcb6b 9d1ff145 faacab58 e34b9303     k.;.E...X.....K.
1000d458:	302055fa 76adf66d cc889176 02f5254c     .U 0m..vv...L%..
1000d468:	e54ffcd7 2ac5d7cb 35268044 62b58fa3     ..O....*D.&5...b
1000d478:	b1de495a ba25671b ea45980e fe5de1c0     ZI...g%...E...].
1000d488:	2fc30275 4c8112f0 468da397 d36bc6f9     u../...L...F..k.
1000d498:	8f03e75f 9215959c 6dbfeb7a 5295da59     _.......z..mY..R
1000d4a8:	bed42d83 7458d321 e0492969 c98e44c8     .-..!.Xti)I..D..
1000d4b8:	c2756a89 8ef47879 58996b3e b927dd71     .ju.yx..>k.Xq.'.
1000d4c8:	e1beb64f 88f017ad 20c966ac ce7db43a     O........f. :.}.
1000d4d8:	df63184a 1ae58231 51976033 5362457f     J.c.1...3`.Q.EbS
1000d4e8:	64b1e077 6bbb84ae 81fe1ca0 08f9942b     w..d...k....+...
1000d4f8:	48705868 458f19fd de94876c 7b52b7f8     hXpH...El.....R{
1000d508:	73ab23d3 4b72e202 1fe3578f 55662aab     .#.s..rK.W...*fU
1000d518:	ebb20728 b52f03c2 c5869a7b 37d3a508     (...../.{......7
1000d528:	2830f287 bf23b2a5 0302ba6a 16ed5c82     ..0(..#.j....\..
1000d538:	cf8a2b1c 79a792b4 07f3f0f2 694ea1e2     .+.....y......Ni
1000d548:	da65cdf4 0506d5be 34d11f62 a6c48afe     ..e.....b..4....
1000d558:	2e349d53 f3a2a055 8a0532e1 f6a475eb     S.4.U....2...u..
1000d568:	830b39ec 6040aaef 715e069f 6ebd5110     .9....@`..^q.Q.n
1000d578:	213ef98a dd963d06 3eddae05 e64d46bd     ..>!.=.....>.FM.
1000d588:	5491b58d c471055d 06046fd4 5060ff15     ...T].q..o....`P
1000d598:	981924fb bdd697e9 4089cc43 d967779e     .$......C..@.wg.
1000d5a8:	e8b0bd42 8907888b 19e7385b c879dbee     B.......[8....y.
1000d5b8:	7ca1470a 427ce90f 84f8c91e 00000000     .G.|..|B........
1000d5c8:	80098386 2b3248ed 111eac70 5a6c4e72     .....H2+p...rNlZ
1000d5d8:	0efdfbff 850f5638 ae3d1ed5 2d362739     ....8V....=.9'6-
1000d5e8:	0f0a64d9 5c6821a6 5b9bd154 36243a2e     .d...!h\T..[.:$6
1000d5f8:	0a0cb167 57930fe7 eeb4d296 9b1b9e91     g......W........
1000d608:	c0804fc5 dc61a220 775a694b 121c161a     .O.. .a.KiZw....
1000d618:	93e20aba a0c0e52a 223c43e0 1b121d17     ....*....C<"....
1000d628:	090e0b0d 8bf2adc7 b62db9a8 1e14c8a9     ..........-.....
1000d638:	f1578519 75af4c07 99eebbdd 7fa3fd60     ..W..L.u....`...
1000d648:	01f79f26 725cbcf5 6644c53b fb5b347e     &.....\r;.Df~4[.
1000d658:	438b7629 23cbdcc6 edb668fc e4b863f1     )v.C...#.h...c..
1000d668:	31d7cadc 63421085 97134022 c6842011     ...1..Bc"@... ..
1000d678:	4a857d24 bbd2f83d f9ae1132 29c76da1     $}.J=...2....m.)
1000d688:	9e1d4b2f b2dcf330 860dec52 c177d0e3     /K..0...R.....w.
1000d698:	b32b6c16 70a999b9 9411fa48 e9472264     .l+....pH...d"G.
1000d6a8:	fca8c48c f0a01a3f 7d56d82c 3322ef90     ....?...,.V}.."3
1000d6b8:	4987c74e 38d9c1d1 ca8cfea2 d498360b     N..I...8.....6..
1000d6c8:	f5a6cf81 7aa528de b7da268e ad3fa4bf     .....(.z.&....?.
1000d6d8:	3a2ce49d 78500d92 5f6a9bcc 7e546246     ..,:..Px..j_FbT~
1000d6e8:	8df6c213 d890e8b8 392e5ef7 c382f5af     .........^.9....
1000d6f8:	5d9fbe80 d0697c93 d56fa92d 25cfb312     ...].|i.-.o....%
1000d708:	acc83b99 1810a77d 9ce86e63 3bdb7bbb     .;..}...cn...{.;
1000d718:	26cd0978 596ef418 9aec01b7 4f83a89a     x..&..nY.......O
1000d728:	95e6656e ffaa7ee6 bc2108cf 15efe6e8     ne...~....!.....
1000d738:	e7bad99b 6f4ace36 9fead409 b029d67c     ....6.Jo....|.).
1000d748:	a431afb2 3f2a3123 a5c63094 a235c066     ..1.#1*?.0..f.5.
1000d758:	4e7437bc 82fca6ca 90e0b0d0 a73315d8     .7tN..........3.
1000d768:	04f14a98 ec41f7da cd7f0e50 91172ff6     .J....A.P..../..
1000d778:	4d768dd6 ef434db0 aacc544d 96e4df04     ..vM.MC.MT......
1000d788:	d19ee3b5 6a4c1b88 2cc1b81f 65467f51     ......Lj...,Q.Fe
1000d798:	5e9d04ea 8c015d35 87fa7374 0bfb2e41     ...^5]..ts..A...
1000d7a8:	67b35a1d db9252d2 10e93356 d66d1347     .Z.g.R..V3..G.m.
1000d7b8:	d79a8c61 a1377a0c f8598e14 13eb893c     a....z7...Y.<...
1000d7c8:	a9ceee27 61b735c9 1ce1ede5 477a3cb1     '....5.a.....<zG
1000d7d8:	d29c59df f2553f73 141879ce c773bf37     .Y..s?U..y..7.s.
1000d7e8:	f753eacd fd5f5baa 3ddf146f 447886db     ..S..[_.o..=..xD
1000d7f8:	afca81f3 68b93ec4 24382c34 a3c25f40     .....>.h4,8$@_..
1000d808:	1d1672c3 e2bc0c25 3c288b49 0dff4195     .r..%...I.(<.A..
1000d818:	a8397101 0c08deb3 b4d89ce4 566490c1     .q9...........dV
1000d828:	cb7b6184 32d570b6 6c48745c b8d04257     .a{..p.2\tHlWB..

1000d838 <RT3>:
1000d838:	5150a7f4 7e536541 1ac3a417 3a965e27     ..PQAeS~....'^.:
1000d848:	3bcb6bab 1ff1459d acab58fa 4b9303e3     .k.;.E...X.....K
1000d858:	2055fa30 adf66d76 889176cc f5254c02     0.U vm...v...L%.
1000d868:	4ffcd7e5 c5d7cb2a 26804435 b58fa362     ...O*...5D.&b...
1000d878:	de495ab1 25671bba 45980eea 5de1c0fe     .ZI...g%...E...]
1000d888:	c302752f 8112f04c 8da39746 6bc6f9d3     /u..L...F......k
1000d898:	03e75f8f 15959c92 bfeb7a6d 95da5952     ._......mz..RY..
1000d8a8:	d42d83be 58d32174 492969e0 8e44c8c9     ..-.t!.X.i)I..D.
1000d8b8:	756a89c2 f478798e 996b3e58 27dd71b9     ..ju.yx.X>k..q.'
1000d8c8:	beb64fe1 f017ad88 c966ac20 7db43ace     .O...... .f..:.}
1000d8d8:	63184adf e582311a 97603351 62457f53     .J.c.1..Q3`.S.Eb
1000d8e8:	b1e07764 bb84ae6b fe1ca081 f9942b08     dw..k........+..
1000d8f8:	70586848 8f19fd45 94876cde 52b7f87b     HhXpE....l..{..R
1000d908:	ab23d373 72e2024b e3578f1f 662aab55     s.#.K..r..W.U.*f
1000d918:	b20728eb 2f03c2b5 869a7bc5 d3a50837     .(...../.{..7...
1000d928:	30f28728 23b2a5bf 02ba6a03 ed5c8216     (..0...#.j....\.
1000d938:	8a2b1ccf a792b479 f3f0f207 4ea1e269     ..+.y.......i..N
1000d948:	65cdf4da 06d5be05 d11f6234 c48afea6     ...e....4b......
1000d958:	349d532e a2a055f3 0532e18a a475ebf6     .S.4.U....2...u.
1000d968:	0b39ec83 40aaef60 5e069f71 bd51106e     ..9.`..@q..^n.Q.
1000d978:	3ef98a21 963d06dd ddae053e 4d46bde6     !..>..=.>.....FM
1000d988:	91b58d54 71055dc4 046fd406 60ff1550     T....].q..o.P..`
1000d998:	1924fb98 d697e9bd 89cc4340 67779ed9     ..$.....@C....wg
1000d9a8:	b0bd42e8 07888b89 e7385b19 79dbeec8     .B.......[8....y
1000d9b8:	a1470a7c 7ce90f42 f8c91e84 00000000     |.G.B..|........
1000d9c8:	09838680 3248ed2b 1eac7011 6c4e725a     ....+.H2.p..ZrNl
1000d9d8:	fdfbff0e 0f563885 3d1ed5ae 3627392d     .....8V....=-9'6
1000d9e8:	0a64d90f 6821a65c 9bd1545b 243a2e36     ..d.\.!h[T..6.:$
1000d9f8:	0cb1670a 930fe757 b4d296ee 1b9e919b     .g..W...........
1000da08:	804fc5c0 61a220dc 5a694b77 1c161a12     ..O.. .awKiZ....
1000da18:	e20aba93 c0e52aa0 3c43e022 121d171b     .....*..".C<....
1000da28:	0e0b0d09 f2adc78b 2db9a8b6 14c8a91e     ...........-....
1000da38:	578519f1 af4c0775 eebbdd99 a3fd607f     ...Wu.L......`..
1000da48:	f79f2601 5cbcf572 44c53b66 5b347efb     .&..r..\f;.D.~4[
1000da58:	8b762943 cbdcc623 b668fced b863f1e4     C)v.#.....h...c.
1000da68:	d7cadc31 42108563 13402297 842011c6     1...c..B."@... .
1000da78:	857d244a d2f83dbb ae1132f9 c76da129     J$}..=...2..).m.
1000da88:	1d4b2f9e dcf330b2 0dec5286 77d0e3c1     ./K..0...R.....w
1000da98:	2b6c16b3 a999b970 11fa4894 472264e9     ..l+p....H...d"G
1000daa8:	a8c48cfc a01a3ff0 56d82c7d 22ef9033     .....?..},.V3.."
1000dab8:	87c74e49 d9c1d138 8cfea2ca 98360bd4     IN..8.........6.
1000dac8:	a6cf81f5 a528de7a da268eb7 3fa4bfad     ....z.(...&....?
1000dad8:	2ce49d3a 500d9278 6a9bcc5f 5462467e     :..,x..P_..j~FbT
1000dae8:	f6c2138d 90e8b8d8 2e5ef739 82f5afc3     ........9.^.....
1000daf8:	9fbe805d 697c93d0 6fa92dd5 cfb31225     ].....|i.-.o%...
1000db08:	c83b99ac 10a77d18 e86e639c db7bbb3b     ..;..}...cn.;.{.
1000db18:	cd097826 6ef41859 ec01b79a 83a89a4f     &x..Y..n....O...
1000db28:	e6656e95 aa7ee6ff 2108cfbc efe6e815     .ne...~....!....
1000db38:	bad99be7 4ace366f ead4099f 29d67cb0     ....o6.J.....|.)
1000db48:	31afb2a4 2a31233f c63094a5 35c066a2     ...1?#1*..0..f.5
1000db58:	7437bc4e fca6ca82 e0b0d090 3315d8a7     N.7t...........3
1000db68:	f14a9804 41f7daec 7f0e50cd 172ff691     ..J....A.P..../.
1000db78:	768dd64d 434db0ef cc544daa e4df0496     M..v..MC.MT.....
1000db88:	9ee3b5d1 4c1b886a c1b81f2c 467f5165     ....j..L,...eQ.F
1000db98:	9d04ea5e 015d358c fa737487 fb2e410b     ^....5]..ts..A..
1000dba8:	b35a1d67 9252d2db e9335610 6d1347d6     g.Z...R..V3..G.m
1000dbb8:	9a8c61d7 377a0ca1 598e14f8 eb893c13     .a....z7...Y.<..
1000dbc8:	ceee27a9 b735c961 e1ede51c 7a3cb147     .'..a.5.....G.<z
1000dbd8:	9c59dfd2 553f73f2 1879ce14 73bf37c7     ..Y..s?U..y..7.s
1000dbe8:	53eacdf7 5f5baafd df146f3d 7886db44     ...S..[_=o..D..x
1000dbf8:	ca81f3af b93ec468 382c3424 c25f40a3     ....h.>.$4,8.@_.
1000dc08:	1672c31d bc0c25e2 288b493c ff41950d     ..r..%..<I.(..A.
1000dc18:	397101a8 08deb30c d89ce4b4 6490c156     ..q9........V..d
1000dc28:	7b6184cb d570b632 48745c6c d04257b8     ..a{2.p.l\tH.WB.

1000dc38 <RCON>:
1000dc38:	00000001 00000002 00000004 00000008     ................
1000dc48:	00000010 00000020 00000040 00000080     .... ...@.......
1000dc58:	0000001b 00000036                       ....6...

1000dc60 <FT0>:
1000dc60:	a56363c6 847c7cf8 997777ee 8d7b7bf6     .cc..||..ww..{{.
1000dc70:	0df2f2ff bd6b6bd6 b16f6fde 54c5c591     .....kk..oo....T
1000dc80:	50303060 03010102 a96767ce 7d2b2b56     `00P.....gg.V++}
1000dc90:	19fefee7 62d7d7b5 e6abab4d 9a7676ec     .......bM....vv.
1000dca0:	45caca8f 9d82821f 40c9c989 877d7dfa     ...E.......@.}}.
1000dcb0:	15fafaef eb5959b2 c947478e 0bf0f0fb     .....YY..GG.....
1000dcc0:	ecadad41 67d4d4b3 fda2a25f eaafaf45     A......g_...E...
1000dcd0:	bf9c9c23 f7a4a453 967272e4 5bc0c09b     #...S....rr....[
1000dce0:	c2b7b775 1cfdfde1 ae93933d 6a26264c     u.......=...L&&j
1000dcf0:	5a36366c 413f3f7e 02f7f7f5 4fcccc83     l66Z~??A.......O
1000dd00:	5c343468 f4a5a551 34e5e5d1 08f1f1f9     h44\Q......4....
1000dd10:	937171e2 73d8d8ab 53313162 3f15152a     .qq....sb11S*..?
1000dd20:	0c040408 52c7c795 65232346 5ec3c39d     .......RF##e...^
1000dd30:	28181830 a1969637 0f05050a b59a9a2f     0..(7......./...
1000dd40:	0907070e 36121224 9b80801b 3de2e2df     ....$..6.......=
1000dd50:	26ebebcd 6927274e cdb2b27f 9f7575ea     ...&N''i.....uu.
1000dd60:	1b090912 9e83831d 742c2c58 2e1a1a34     ........X,,t4...
1000dd70:	2d1b1b36 b26e6edc ee5a5ab4 fba0a05b     6..-.nn..ZZ.[...
1000dd80:	f65252a4 4d3b3b76 61d6d6b7 ceb3b37d     .RR.v;;M...a}...
1000dd90:	7b292952 3ee3e3dd 712f2f5e 97848413     R)){...>^//q....
1000dda0:	f55353a6 68d1d1b9 00000000 2cededc1     .SS....h.......,
1000ddb0:	60202040 1ffcfce3 c8b1b179 ed5b5bb6     @  `....y....[[.
1000ddc0:	be6a6ad4 46cbcb8d d9bebe67 4b393972     .jj....Fg...r99K
1000ddd0:	de4a4a94 d44c4c98 e85858b0 4acfcf85     .JJ..LL..XX....J
1000dde0:	6bd0d0bb 2aefefc5 e5aaaa4f 16fbfbed     ...k...*O.......
1000ddf0:	c5434386 d74d4d9a 55333366 94858511     .CC..MM.f33U....
1000de00:	cf45458a 10f9f9e9 06020204 817f7ffe     .EE.............
1000de10:	f05050a0 443c3c78 ba9f9f25 e3a8a84b     .PP.x<<D%...K...
1000de20:	f35151a2 fea3a35d c0404080 8a8f8f05     .QQ.]....@@.....
1000de30:	ad92923f bc9d9d21 48383870 04f5f5f1     ?...!...p88H....
1000de40:	dfbcbc63 c1b6b677 75dadaaf 63212142     c...w......uB!!c
1000de50:	30101020 1affffe5 0ef3f3fd 6dd2d2bf      ..0...........m
1000de60:	4ccdcd81 140c0c18 35131326 2fececc3     ...L....&..5.../
1000de70:	e15f5fbe a2979735 cc444488 3917172e     .__.5....DD....9
1000de80:	57c4c493 f2a7a755 827e7efc 473d3d7a     ...WU....~~.z==G
1000de90:	ac6464c8 e75d5dba 2b191932 957373e6     .dd..]].2..+.ss.
1000dea0:	a06060c0 98818119 d14f4f9e 7fdcdca3     .``......OO.....
1000deb0:	66222244 7e2a2a54 ab90903b 8388880b     D""fT**~;.......
1000dec0:	ca46468c 29eeeec7 d3b8b86b 3c141428     .FF....)k...(..<
1000ded0:	79dedea7 e25e5ebc 1d0b0b16 76dbdbad     ...y.^^........v
1000dee0:	3be0e0db 56323264 4e3a3a74 1e0a0a14     ...;d22Vt::N....
1000def0:	db494992 0a06060c 6c242448 e45c5cb8     .II.....H$$l.\\.
1000df00:	5dc2c29f 6ed3d3bd efacac43 a66262c4     ...]...nC....bb.
1000df10:	a8919139 a4959531 37e4e4d3 8b7979f2     9...1......7.yy.
1000df20:	32e7e7d5 43c8c88b 5937376e b76d6dda     ...2...Cn77Y.mm.
1000df30:	8c8d8d01 64d5d5b1 d24e4e9c e0a9a949     .......d.NN.I...
1000df40:	b46c6cd8 fa5656ac 07f4f4f3 25eaeacf     .ll..VV........%
1000df50:	af6565ca 8e7a7af4 e9aeae47 18080810     .ee..zz.G.......
1000df60:	d5baba6f 887878f0 6f25254a 722e2e5c     o....xx.J%%o\..r
1000df70:	241c1c38 f1a6a657 c7b4b473 51c6c697     8..$W...s......Q
1000df80:	23e8e8cb 7cdddda1 9c7474e8 211f1f3e     ...#...|.tt.>..!
1000df90:	dd4b4b96 dcbdbd61 868b8b0d 858a8a0f     .KK.a...........
1000dfa0:	907070e0 423e3e7c c4b5b571 aa6666cc     .pp.|>>Bq....ff.
1000dfb0:	d8484890 05030306 01f6f6f7 120e0e1c     .HH.............
1000dfc0:	a36161c2 5f35356a f95757ae d0b9b969     .aa.j55_.WW.i...
1000dfd0:	91868617 58c1c199 271d1d3a b99e9e27     .......X:..''...
1000dfe0:	38e1e1d9 13f8f8eb b398982b 33111122     ...8....+..."..3
1000dff0:	bb6969d2 70d9d9a9 898e8e07 a7949433     .ii....p....3...
1000e000:	b69b9b2d 221e1e3c 92878715 20e9e9c9     -...<.."....... 
1000e010:	49cece87 ff5555aa 78282850 7adfdfa5     ...I.UU.P((x...z
1000e020:	8f8c8c03 f8a1a159 80898909 170d0d1a     ....Y...........
1000e030:	dabfbf65 31e6e6d7 c6424284 b86868d0     e......1.BB..hh.
1000e040:	c3414182 b0999929 772d2d5a 110f0f1e     .AA.)...Z--w....
1000e050:	cbb0b07b fc5454a8 d6bbbb6d 3a16162c     {....TT.m...,..:

1000e060 <FT1>:
1000e060:	6363c6a5 7c7cf884 7777ee99 7b7bf68d     ..cc..||..ww..{{
1000e070:	f2f2ff0d 6b6bd6bd 6f6fdeb1 c5c59154     ......kk..ooT...
1000e080:	30306050 01010203 6767cea9 2b2b567d     P`00......gg}V++
1000e090:	fefee719 d7d7b562 abab4de6 7676ec9a     ....b....M....vv
1000e0a0:	caca8f45 82821f9d c9c98940 7d7dfa87     E.......@.....}}
1000e0b0:	fafaef15 5959b2eb 47478ec9 f0f0fb0b     ......YY..GG....
1000e0c0:	adad41ec d4d4b367 a2a25ffd afaf45ea     .A..g...._...E..
1000e0d0:	9c9c23bf a4a453f7 7272e496 c0c09b5b     .#...S....rr[...
1000e0e0:	b7b775c2 fdfde11c 93933dae 26264c6a     .u.......=..jL&&
1000e0f0:	36366c5a 3f3f7e41 f7f7f502 cccc834f     Zl66A~??....O...
1000e100:	3434685c a5a551f4 e5e5d134 f1f1f908     \h44.Q..4.......
1000e110:	7171e293 d8d8ab73 31316253 15152a3f     ..qqs...Sb11?*..
1000e120:	0404080c c7c79552 23234665 c3c39d5e     ....R...eF##^...
1000e130:	18183028 969637a1 05050a0f 9a9a2fb5     (0...7......./..
1000e140:	07070e09 12122436 80801b9b e2e2df3d     ....6$......=...
1000e150:	ebebcd26 27274e69 b2b27fcd 7575ea9f     &...iN''......uu
1000e160:	0909121b 83831d9e 2c2c5874 1a1a342e     ........tX,,.4..
1000e170:	1b1b362d 6e6edcb2 5a5ab4ee a0a05bfb     -6....nn..ZZ.[..
1000e180:	5252a4f6 3b3b764d d6d6b761 b3b37dce     ..RRMv;;a....}..
1000e190:	2929527b e3e3dd3e 2f2f5e71 84841397     {R))>...q^//....
1000e1a0:	5353a6f5 d1d1b968 00000000 ededc12c     ..SSh.......,...
1000e1b0:	20204060 fcfce31f b1b179c8 5b5bb6ed     `@  .....y....[[
1000e1c0:	6a6ad4be cbcb8d46 bebe67d9 3939724b     ..jjF....g..Kr99
1000e1d0:	4a4a94de 4c4c98d4 5858b0e8 cfcf854a     ..JJ..LL..XXJ...
1000e1e0:	d0d0bb6b efefc52a aaaa4fe5 fbfbed16     k...*....O......
1000e1f0:	434386c5 4d4d9ad7 33336655 85851194     ..CC..MMUf33....
1000e200:	45458acf f9f9e910 02020406 7f7ffe81     ..EE............
1000e210:	5050a0f0 3c3c7844 9f9f25ba a8a84be3     ..PPDx<<.%...K..
1000e220:	5151a2f3 a3a35dfe 404080c0 8f8f058a     ..QQ.]....@@....
1000e230:	92923fad 9d9d21bc 38387048 f5f5f104     .?...!..Hp88....
1000e240:	bcbc63df b6b677c1 dadaaf75 21214263     .c...w..u...cB!!
1000e250:	10102030 ffffe51a f3f3fd0e d2d2bf6d     0 ..........m...
1000e260:	cdcd814c 0c0c1814 13132635 ececc32f     L.......5&../...
1000e270:	5f5fbee1 979735a2 444488cc 17172e39     ..__.5....DD9...
1000e280:	c4c49357 a7a755f2 7e7efc82 3d3d7a47     W....U....~~Gz==
1000e290:	6464c8ac 5d5dbae7 1919322b 7373e695     ..dd..]]+2....ss
1000e2a0:	6060c0a0 81811998 4f4f9ed1 dcdca37f     ..``......OO....
1000e2b0:	22224466 2a2a547e 90903bab 88880b83     fD""~T**.;......
1000e2c0:	46468cca eeeec729 b8b86bd3 1414283c     ..FF)....k..<(..
1000e2d0:	dedea779 5e5ebce2 0b0b161d dbdbad76     y.....^^....v...
1000e2e0:	e0e0db3b 32326456 3a3a744e 0a0a141e     ;...Vd22Nt::....
1000e2f0:	494992db 06060c0a 2424486c 5c5cb8e4     ..II....lH$$..\\
1000e300:	c2c29f5d d3d3bd6e acac43ef 6262c4a6     ]...n....C....bb
1000e310:	919139a8 959531a4 e4e4d337 7979f28b     .9...1..7.....yy
1000e320:	e7e7d532 c8c88b43 37376e59 6d6ddab7     2...C...Yn77..mm
1000e330:	8d8d018c d5d5b164 4e4e9cd2 a9a949e0     ....d.....NN.I..
1000e340:	6c6cd8b4 5656acfa f4f4f307 eaeacf25     ..ll..VV....%...
1000e350:	6565caaf 7a7af48e aeae47e9 08081018     ..ee..zz.G......
1000e360:	baba6fd5 7878f088 25254a6f 2e2e5c72     .o....xxoJ%%r\..
1000e370:	1c1c3824 a6a657f1 b4b473c7 c6c69751     $8...W...s..Q...
1000e380:	e8e8cb23 dddda17c 7474e89c 1f1f3e21     #...|.....tt!>..
1000e390:	4b4b96dd bdbd61dc 8b8b0d86 8a8a0f85     ..KK.a..........
1000e3a0:	7070e090 3e3e7c42 b5b571c4 6666ccaa     ..ppB|>>.q....ff
1000e3b0:	484890d8 03030605 f6f6f701 0e0e1c12     ..HH............
1000e3c0:	6161c2a3 35356a5f 5757aef9 b9b969d0     ..aa_j55..WW.i..
1000e3d0:	86861791 c1c19958 1d1d3a27 9e9e27b9     ....X...':...'..
1000e3e0:	e1e1d938 f8f8eb13 98982bb3 11112233     8........+..3"..
1000e3f0:	6969d2bb d9d9a970 8e8e0789 949433a7     ..iip........3..
1000e400:	9b9b2db6 1e1e3c22 87871592 e9e9c920     .-.."<...... ...
1000e410:	cece8749 5555aaff 28285078 dfdfa57a     I.....UUxP((z...
1000e420:	8c8c038f a1a159f8 89890980 0d0d1a17     .....Y..........
1000e430:	bfbf65da e6e6d731 424284c6 6868d0b8     .e..1.....BB..hh
1000e440:	414182c3 999929b0 2d2d5a77 0f0f1e11     ..AA.)..wZ--....
1000e450:	b0b07bcb 5454a8fc bbbb6dd6 16162c3a     .{....TT.m..:,..

1000e460 <FT2>:
1000e460:	63c6a563 7cf8847c 77ee9977 7bf68d7b     c..c|..|w..w{..{
1000e470:	f2ff0df2 6bd6bd6b 6fdeb16f c59154c5     ....k..ko..o.T..
1000e480:	30605030 01020301 67cea967 2b567d2b     0P`0....g..g+}V+
1000e490:	fee719fe d7b562d7 ab4de6ab 76ec9a76     .....b....M.v..v
1000e4a0:	ca8f45ca 821f9d82 c98940c9 7dfa877d     .E.......@..}..}
1000e4b0:	faef15fa 59b2eb59 478ec947 f0fb0bf0     ....Y..YG..G....
1000e4c0:	ad41ecad d4b367d4 a25ffda2 af45eaaf     ..A..g...._...E.
1000e4d0:	9c23bf9c a453f7a4 72e49672 c09b5bc0     ..#...S.r..r.[..
1000e4e0:	b775c2b7 fde11cfd 933dae93 264c6a26     ..u.......=.&jL&
1000e4f0:	366c5a36 3f7e413f f7f502f7 cc834fcc     6Zl6?A~?.....O..
1000e500:	34685c34 a551f4a5 e5d134e5 f1f908f1     4\h4..Q..4......
1000e510:	71e29371 d8ab73d8 31625331 152a3f15     q..q.s..1Sb1.?*.
1000e520:	04080c04 c79552c7 23466523 c39d5ec3     .....R..#eF#.^..
1000e530:	18302818 9637a196 050a0f05 9a2fb59a     .(0...7......./.
1000e540:	070e0907 12243612 801b9b80 e2df3de2     .....6$......=..
1000e550:	ebcd26eb 274e6927 b27fcdb2 75ea9f75     .&..'iN'....u..u
1000e560:	09121b09 831d9e83 2c58742c 1a342e1a     ........,tX,..4.
1000e570:	1b362d1b 6edcb26e 5ab4ee5a a05bfba0     .-6.n..nZ..Z..[.
1000e580:	52a4f652 3b764d3b d6b761d6 b37dceb3     R..R;Mv;.a....}.
1000e590:	29527b29 e3dd3ee3 2f5e712f 84139784     ){R).>../q^/....
1000e5a0:	53a6f553 d1b968d1 00000000 edc12ced     S..S.h.......,..
1000e5b0:	20406020 fce31ffc b179c8b1 5bb6ed5b      `@ ......y.[..[
1000e5c0:	6ad4be6a cb8d46cb be67d9be 39724b39     j..j.F....g.9Kr9
1000e5d0:	4a94de4a 4c98d44c 58b0e858 cf854acf     J..JL..LX..X.J..
1000e5e0:	d0bb6bd0 efc52aef aa4fe5aa fbed16fb     .k...*....O.....
1000e5f0:	4386c543 4d9ad74d 33665533 85119485     C..CM..M3Uf3....
1000e600:	458acf45 f9e910f9 02040602 7ffe817f     E..E............
1000e610:	50a0f050 3c78443c 9f25ba9f a84be3a8     P..P<Dx<..%...K.
1000e620:	51a2f351 a35dfea3 4080c040 8f058a8f     Q..Q..].@..@....
1000e630:	923fad92 9d21bc9d 38704838 f5f104f5     ..?...!.8Hp8....
1000e640:	bc63dfbc b677c1b6 daaf75da 21426321     ..c...w..u..!cB!
1000e650:	10203010 ffe51aff f3fd0ef3 d2bf6dd2     .0 ..........m..
1000e660:	cd814ccd 0c18140c 13263513 ecc32fec     .L.......5&../..
1000e670:	5fbee15f 9735a297 4488cc44 172e3917     _.._..5.D..D.9..
1000e680:	c49357c4 a755f2a7 7efc827e 3d7a473d     .W....U.~..~=Gz=
1000e690:	64c8ac64 5dbae75d 19322b19 73e69573     d..d]..].+2.s..s
1000e6a0:	60c0a060 81199881 4f9ed14f dca37fdc     `..`....O..O....
1000e6b0:	22446622 2a547e2a 903bab90 880b8388     "fD"*~T*..;.....
1000e6c0:	468cca46 eec729ee b86bd3b8 14283c14     F..F.)....k..<(.
1000e6d0:	dea779de 5ebce25e 0b161d0b dbad76db     .y..^..^.....v..
1000e6e0:	e0db3be0 32645632 3a744e3a 0a141e0a     .;..2Vd2:Nt:....
1000e6f0:	4992db49 060c0a06 24486c24 5cb8e45c     I..I....$lH$\..\
1000e700:	c29f5dc2 d3bd6ed3 ac43efac 62c4a662     .]...n....C.b..b
1000e710:	9139a891 9531a495 e4d337e4 79f28b79     ..9...1..7..y..y
1000e720:	e7d532e7 c88b43c8 376e5937 6ddab76d     .2...C..7Yn7m..m
1000e730:	8d018c8d d5b164d5 4e9cd24e a949e0a9     .....d..N..N..I.
1000e740:	6cd8b46c 56acfa56 f4f307f4 eacf25ea     l..lV..V.....%..
1000e750:	65caaf65 7af48e7a ae47e9ae 08101808     e..ez..z..G.....
1000e760:	ba6fd5ba 78f08878 254a6f25 2e5c722e     ..o.x..x%oJ%.r\.
1000e770:	1c38241c a657f1a6 b473c7b4 c69751c6     .$8...W...s..Q..
1000e780:	e8cb23e8 dda17cdd 74e89c74 1f3e211f     .#...|..t..t.!>.
1000e790:	4b96dd4b bd61dcbd 8b0d868b 8a0f858a     K..K..a.........
1000e7a0:	70e09070 3e7c423e b571c4b5 66ccaa66     p..p>B|>..q.f..f
1000e7b0:	4890d848 03060503 f6f701f6 0e1c120e     H..H............
1000e7c0:	61c2a361 356a5f35 57aef957 b969d0b9     a..a5_j5W..W..i.
1000e7d0:	86179186 c19958c1 1d3a271d 9e27b99e     .....X...':...'.
1000e7e0:	e1d938e1 f8eb13f8 982bb398 11223311     .8........+..3".
1000e7f0:	69d2bb69 d9a970d9 8e07898e 9433a794     i..i.p........3.
1000e800:	9b2db69b 1e3c221e 87159287 e9c920e9     ..-.."<...... ..
1000e810:	ce8749ce 55aaff55 28507828 dfa57adf     .I..U..U(xP(.z..
1000e820:	8c038f8c a159f8a1 89098089 0d1a170d     ......Y.........
1000e830:	bf65dabf e6d731e6 4284c642 68d0b868     ..e..1..B..Bh..h
1000e840:	4182c341 9929b099 2d5a772d 0f1e110f     A..A..).-wZ-....
1000e850:	b07bcbb0 54a8fc54 bb6dd6bb 162c3a16     ..{.T..T..m..:,.

1000e860 <FT3>:
1000e860:	c6a56363 f8847c7c ee997777 f68d7b7b     cc..||..ww..{{..
1000e870:	ff0df2f2 d6bd6b6b deb16f6f 9154c5c5     ....kk..oo....T.
1000e880:	60503030 02030101 cea96767 567d2b2b     00P`....gg..++}V
1000e890:	e719fefe b562d7d7 4de6abab ec9a7676     ......b....Mvv..
1000e8a0:	8f45caca 1f9d8282 8940c9c9 fa877d7d     ..E.......@.}}..
1000e8b0:	ef15fafa b2eb5959 8ec94747 fb0bf0f0     ....YY..GG......
1000e8c0:	41ecadad b367d4d4 5ffda2a2 45eaafaf     ...A..g...._...E
1000e8d0:	23bf9c9c 53f7a4a4 e4967272 9b5bc0c0     ...#...Srr....[.
1000e8e0:	75c2b7b7 e11cfdfd 3dae9393 4c6a2626     ...u.......=&&jL
1000e8f0:	6c5a3636 7e413f3f f502f7f7 834fcccc     66Zl??A~......O.
1000e900:	685c3434 51f4a5a5 d134e5e5 f908f1f1     44\h...Q..4.....
1000e910:	e2937171 ab73d8d8 62533131 2a3f1515     qq....s.11Sb..?*
1000e920:	080c0404 9552c7c7 46652323 9d5ec3c3     ......R.##eF..^.
1000e930:	30281818 37a19696 0a0f0505 2fb59a9a     ..(0...7......./
1000e940:	0e090707 24361212 1b9b8080 df3de2e2     ......6$......=.
1000e950:	cd26ebeb 4e692727 7fcdb2b2 ea9f7575     ..&.''iN....uu..
1000e960:	121b0909 1d9e8383 58742c2c 342e1a1a     ........,,tX...4
1000e970:	362d1b1b dcb26e6e b4ee5a5a 5bfba0a0     ..-6nn..ZZ.....[
1000e980:	a4f65252 764d3b3b b761d6d6 7dceb3b3     RR..;;Mv..a....}
1000e990:	527b2929 dd3ee3e3 5e712f2f 13978484     )){R..>.//q^....
1000e9a0:	a6f55353 b968d1d1 00000000 c12ceded     SS....h.......,.
1000e9b0:	40602020 e31ffcfc 79c8b1b1 b6ed5b5b       `@.......y[[..
1000e9c0:	d4be6a6a 8d46cbcb 67d9bebe 724b3939     jj....F....g99Kr
1000e9d0:	94de4a4a 98d44c4c b0e85858 854acfcf     JJ..LL..XX....J.
1000e9e0:	bb6bd0d0 c52aefef 4fe5aaaa ed16fbfb     ..k...*....O....
1000e9f0:	86c54343 9ad74d4d 66553333 11948585     CC..MM..33Uf....
1000ea00:	8acf4545 e910f9f9 04060202 fe817f7f     EE..............
1000ea10:	a0f05050 78443c3c 25ba9f9f 4be3a8a8     PP..<<Dx...%...K
1000ea20:	a2f35151 5dfea3a3 80c04040 058a8f8f     QQ.....]@@......
1000ea30:	3fad9292 21bc9d9d 70483838 f104f5f5     ...?...!88Hp....
1000ea40:	63dfbcbc 77c1b6b6 af75dada 42632121     ...c...w..u.!!cB
1000ea50:	20301010 e51affff fd0ef3f3 bf6dd2d2     ..0 ..........m.
1000ea60:	814ccdcd 18140c0c 26351313 c32fecec     ..L.......5&../.
1000ea70:	bee15f5f 35a29797 88cc4444 2e391717     __.....5DD....9.
1000ea80:	9357c4c4 55f2a7a7 fc827e7e 7a473d3d     ..W....U~~..==Gz
1000ea90:	c8ac6464 bae75d5d 322b1919 e6957373     dd..]]....+2ss..
1000eaa0:	c0a06060 19988181 9ed14f4f a37fdcdc     ``......OO......
1000eab0:	44662222 547e2a2a 3bab9090 0b838888     ""fD**~T...;....
1000eac0:	8cca4646 c729eeee 6bd3b8b8 283c1414     FF....)....k..<(
1000ead0:	a779dede bce25e5e 161d0b0b ad76dbdb     ..y.^^........v.
1000eae0:	db3be0e0 64563232 744e3a3a 141e0a0a     ..;.22Vd::Nt....
1000eaf0:	92db4949 0c0a0606 486c2424 b8e45c5c     II......$$lH\\..
1000eb00:	9f5dc2c2 bd6ed3d3 43efacac c4a66262     ..]...n....Cbb..
1000eb10:	39a89191 31a49595 d337e4e4 f28b7979     ...9...1..7.yy..
1000eb20:	d532e7e7 8b43c8c8 6e593737 dab76d6d     ..2...C.77Ynmm..
1000eb30:	018c8d8d b164d5d5 9cd24e4e 49e0a9a9     ......d.NN.....I
1000eb40:	d8b46c6c acfa5656 f307f4f4 cf25eaea     ll..VV........%.
1000eb50:	caaf6565 f48e7a7a 47e9aeae 10180808     ee..zz.....G....
1000eb60:	6fd5baba f0887878 4a6f2525 5c722e2e     ...oxx..%%oJ..r\
1000eb70:	38241c1c 57f1a6a6 73c7b4b4 9751c6c6     ..$8...W...s..Q.
1000eb80:	cb23e8e8 a17cdddd e89c7474 3e211f1f     ..#...|.tt....!>
1000eb90:	96dd4b4b 61dcbdbd 0d868b8b 0f858a8a     KK.....a........
1000eba0:	e0907070 7c423e3e 71c4b5b5 ccaa6666     pp..>>B|...qff..
1000ebb0:	90d84848 06050303 f701f6f6 1c120e0e     HH..............
1000ebc0:	c2a36161 6a5f3535 aef95757 69d0b9b9     aa..55_jWW.....i
1000ebd0:	17918686 9958c1c1 3a271d1d 27b99e9e     ......X...':...'
1000ebe0:	d938e1e1 eb13f8f8 2bb39898 22331111     ..8........+..3"
1000ebf0:	d2bb6969 a970d9d9 07898e8e 33a79494     ii....p........3
1000ec00:	2db69b9b 3c221e1e 15928787 c920e9e9     ...-.."<...... .
1000ec10:	8749cece aaff5555 50782828 a57adfdf     ..I.UU..((xP..z.
1000ec20:	038f8c8c 59f8a1a1 09808989 1a170d0d     .......Y........
1000ec30:	65dabfbf d731e6e6 84c64242 d0b86868     ...e..1.BB..hh..
1000ec40:	82c34141 29b09999 5a772d2d 1e110f0f     AA.....)--wZ....
1000ec50:	7bcbb0b0 a8fc5454 6dd6bbbb 2c3a1616     ...{TT.....m..:,

1000ec60 <RSb>:
1000ec60:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
1000ec70:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
1000ec80:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
1000ec90:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
1000eca0:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
1000ecb0:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
1000ecc0:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
1000ecd0:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
1000ece0:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
1000ecf0:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
1000ed00:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
1000ed10:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
1000ed20:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
1000ed30:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
1000ed40:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
1000ed50:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

1000ed60 <aes_info>:
1000ed60:	00000002 10007003 10006ffb 10006ff3     .....p...o...o..
1000ed70:	10006fdb 10006fcb                       .o...o..

1000ed78 <aes_192_ccm_info>:
1000ed78:	0000082c 000000c0 1000edf4 0000000c     ,...............
1000ed88:	00000001 00000010 1000ee30              ........0...

1000ed94 <mbedtls_cipher_definitions>:
1000ed94:	00000002 1000ee9c 00000003 1000ee64     ............d...
1000eda4:	00000004 1000ee80 0000002b 1000edcc     ........+.......
1000edb4:	0000002c 1000ed78 0000002d 1000ee48     ,...x...-...H...
	...

1000edcc <aes_128_ccm_info>:
1000edcc:	0000082b 00000080 1000ee00 0000000c     +...............
1000eddc:	00000001 00000010 1000ee30 2d534541     ........0...AES-
1000edec:	2d363532 004d4343 2d534541 2d323931     256-CCM.AES-192-
1000edfc:	004d4343 2d534541 2d383231 004d4343     CCM.AES-128-CCM.
1000ee0c:	2d534541 2d363532 00424345 2d534541     AES-256-ECB.AES-
1000ee1c:	2d323931 00424345 2d534541 2d383231     192-ECB.AES-128-
1000ee2c:	00424345                                ECB.

1000ee30 <ccm_aes_info>:
1000ee30:	00000002 00000000 10006fbb 10006fbb     .........o...o..
1000ee40:	10006fa5 10006f95                       .o...o..

1000ee48 <aes_256_ccm_info>:
1000ee48:	0000082d 00000100 1000ede8 0000000c     -...............
1000ee58:	00000001 00000010 1000ee30              ........0...

1000ee64 <aes_192_ecb_info>:
1000ee64:	00000103 000000c0 1000ee18 00000000     ................
1000ee74:	00000000 00000010 1000ed60              ........`...

1000ee80 <aes_256_ecb_info>:
1000ee80:	00000104 00000100 1000ee0c 00000000     ................
1000ee90:	00000000 00000010 1000ed60              ........`...

1000ee9c <aes_128_ecb_info>:
1000ee9c:	00000102 00000080 1000ee24 00000000     ........$.......
1000eeac:	00000000 00000010 1000ed60              ........`...

1000eeb8 <mbedtls_sha224_info>:
1000eeb8:	00000005 1000eeef 0000001c 00000040     ............@...
1000eec8:	10007293 1000728b 10007283 1000726f     .r...r...r..or..
1000eed8:	10007259 10007249 10007241 10007239     Yr..Ir..Ar..9r..
1000eee8:	32414853 53003635 32324148 00000034     SHA256.SHA224...

1000eef8 <mbedtls_sha256_info>:
1000eef8:	00000006 1000eee8 00000020 00000040     ........ ...@...
1000ef08:	1000729d 1000728b 10007283 10007279     .r...r...r..yr..
1000ef18:	10007259 10007249 10007241 10007239     Yr..Ir..Ar..9r..

1000ef28 <K>:
1000ef28:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
1000ef38:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
1000ef48:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
1000ef58:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
1000ef68:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
1000ef78:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
1000ef88:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
1000ef98:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
1000efa8:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
1000efb8:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
1000efc8:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
1000efd8:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
1000efe8:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
1000eff8:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
1000f008:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
1000f018:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
1000f028:	74706f5b 20616769 6d617865 5d656c70     [optiga example]
1000f038:	203a2020 335b1b00 65006d31                         : ..[31m.

1000f043 <__FUNCTION__.6003>:
1000f043:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f053:	74707972 6363655f 6e65675f 74617265     rypt_ecc_generat
1000f063:	656b5f65 69617079 78650072                       e_keypair.

1000f06d <__FUNCTION__.6006>:
1000f06d:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f07d:	74707972 6463655f 78650068                       rypt_ecdh.

1000f087 <__FUNCTION__.6003>:
1000f087:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f097:	74707972 6463655f 735f6173 006e6769     rypt_ecdsa_sign.
1000f0a7:	001b1200 03004420 61786500                       .... D...

1000f0b0 <__FUNCTION__.6004>:
1000f0b0:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f0c0:	74707972 6463655f 765f6173 66697265     rypt_ecdsa_verif
1000f0d0:	504f0079 41475449 6e49202c 656e6966     y.OPITGA, Infine
1000f0e0:	54206e6f 6e686365 676f6c6f 20736569     on Technologies 
1000f0f0:	65004741                                         AG.

1000f0f3 <__FUNCTION__.6005>:
1000f0f3:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f103:	74707972 7361685f 5b1b0068 006d3639     rypt_hash..[96m.

1000f113 <__FUNCTION__.6001>:
1000f113:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f123:	74707972 6e61725f 006d6f64 78650201              rypt_random...

1000f131 <__FUNCTION__.6035>:
1000f131:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f141:	74707972 6173725f 6365645f 74707972     rypt_rsa_decrypt
1000f151:	646e615f 6f74735f 52006572 50204153     _and_store.RSA P
1000f161:	3153434b 2e31765f 6e452035 70797263     KCS1_v1.5 Encryp
1000f171:	6e6f6974 20666f20 72657375 73656d20     tion of user mes
1000f181:	65676173 61786500                                sage.

1000f186 <__FUNCTION__.6011>:
1000f186:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f196:	74707972 6173725f 6365645f 74707972     rypt_rsa_decrypt
1000f1a6:	646e615f 7078655f 0074726f              _and_export.

1000f1b2 <__FUNCTION__.6006>:
1000f1b2:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f1c2:	74707972 6173725f 636e655f 74707972     rypt_rsa_encrypt
1000f1d2:	73656d5f 65676173 65020100                       _message...

1000f1dd <__FUNCTION__.6009>:
1000f1dd:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f1ed:	74707972 6173725f 636e655f 74707972     rypt_rsa_encrypt
1000f1fd:	7365735f 6e6f6973 61786500                       _session.

1000f206 <__FUNCTION__.6003>:
1000f206:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f216:	74707972 6173725f 6e65675f 74617265     rypt_rsa_generat
1000f226:	656b5f65 69617079 78650072                       e_keypair.

1000f230 <__FUNCTION__.6003>:
1000f230:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f240:	74707972 6173725f 6769735f 0000006e     rypt_rsa_sign...
1000f250:	20001cd1 00410091                       ... ..A.

1000f258 <__FUNCTION__.6004>:
1000f258:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f268:	74707972 6173725f 7265765f 00796669     rypt_rsa_verify.

1000f278 <__FUNCTION__.6077>:
1000f278:	6d617865 5f656c70 6974706f 635f6167     example_optiga_c
1000f288:	74707972 736c745f 6672705f 6168735f     rypt_tls_prf_sha
1000f298:	00363532                                256.

1000f29c <__FUNCTION__.6097>:
1000f29c:	6d617865 5f656c70 6974706f 755f6167     example_optiga_u
1000f2ac:	5f6c6974 65626968 74616e72 65725f65     til_hibernate_re
1000f2bc:	726f7473 78650065                                store.

1000f2c2 <__FUNCTION__.5925>:
1000f2c2:	6d617865 5f656c70 6974706f 755f6167     example_optiga_u
1000f2d2:	5f6c6974 746f7270 65746365 70755f64     til_protected_up
1000f2e2:	65746164 61786500                                date.

1000f2e7 <__FUNCTION__.5919>:
1000f2e7:	6d617865 5f656c70 6974706f 755f6167     example_optiga_u
1000f2f7:	5f6c6974 64616572 7461645f 78650061              til_read_data.

1000f305 <__FUNCTION__.5918>:
1000f305:	6d617865 5f656c70 6974706f 755f6167     example_optiga_u
1000f315:	5f6c6974 61647075 635f6574 746e756f     til_update_count
	...

1000f326 <__FUNCTION__.5919>:
1000f326:	6d617865 5f656c70 6974706f 755f6167     example_optiga_u
1000f336:	5f6c6974 74697277 61645f65 65006174              til_write_data.

1000f345 <__FUNCTION__.6089>:
1000f345:	6d617865 5f656c70 72696170 736f685f     example_pair_hos
1000f355:	6e615f74 706f5f64 61676974 6973755f     t_and_optiga_usi
1000f365:	705f676e 735f6572 65726168 65735f64     ng_pre_shared_se
1000f375:	74657263 03000300                                cret.

1000f37a <CSWTCH.36>:
1000f37a:	00030003 000c000c 30003000 30003000     .........0.0.0.0
1000f38a:	0c000300                                ....

1000f38e <CSWTCH.35>:
1000f38e:	02020000 0c0c0c0c 4b000a08                       ..........

1000f398 <esWiFi_com_channel_config>:
1000f398:	00004b00 01080800 00000010              .K..........

1000f3a4 <cunit_logger_config>:
1000f3a4:	1000f3d4 1000a211 100014fd 10001509     ................
	...
1000f3c8:	1000f3ec 04000000 00000504              ............

1000f3d4 <cunit_logger_channel_config>:
1000f3d4:	0001c200 01080800 00000010              ............

1000f3e0 <esWiFi_com_tx_pin>:
1000f3e0:	40040400 00000005 1000f3f8              ...@........

1000f3ec <cunit_logger_tx_pin>:
1000f3ec:	40040100 00000002 1000f400              ...@........

1000f3f8 <esWiFi_com_tx_pin_config>:
1000f3f8:	00000098 00000001                       ........

1000f400 <cunit_logger_tx_pin_config>:
1000f400:	0000009c 00000001                       ........

1000f408 <esWiFi_com_config>:
1000f408:	1000f398 1000a125 00000000 00000000     ....%...........
	...
1000f42c:	1000f3e0 04000000 00000204              ............

1000f438 <esWiFi_com_rx_pin_config>:
1000f438:	00000000 00000001                       ........

1000f440 <cunit_logger_rx_pin_config>:
1000f440:	00000000 00000001                       ........

1000f448 <scheduler_timer_intr>:
1000f448:	03070002 00020001                                ......

1000f44e <tick_timer_intr>:
1000f44e:	03000002 00dc0001                                ......

1000f454 <i2c_master_0_sda_pin_config>:
1000f454:	000000dc 00000001                       ........

1000f45c <i2c_master_0_scl_pin_config>:
1000f45c:	000000e0 00000001                       ........

1000f464 <i2c_master_0_config>:
1000f464:	1000f490 1000ae19 1000adf9 1000add9     ................
1000f474:	10001361 10001375 100013dd 100013e5     a...u...........
1000f484:	10001389 04040000 00000a0c              ............

1000f490 <i2c_master_0_channel_config>:
1000f490:	00061a80 00000000                       ........

1000f498 <io_test>:
1000f498:	40040200 00000000 00000000 00000009     ...@............

1000f4a8 <reset_pin>:
1000f4a8:	40040300 00000080 00000001 00000002     ...@............

1000f4b8 <vdd_pin>:
1000f4b8:	40040200 00000080 00010000 0000000a     ...@............
1000f4c8:	00010000 03300000 00010000 00000000     ......0.........
1000f4d8:	72617453 676e6974 63654420 74707972     Starting Decrypt
1000f4e8:	646e6120 70784520 2074726f 61746144      and Export Data
1000f4f8:	74697720 53522068 654b2041 78452079      with RSA Key Ex
1000f508:	6c706d61 6f5b0065 67697470 68732061     ample.[optiga sh
1000f518:	5d6c6c65 203a2020 395b1b00 31006d32     ell]  : ..[92m.1
1000f528:	65745320 47203a70 72656e65 20657461      Step: Generate 
1000f538:	20415352 34323031 79654b20 69615020     RSA 1024 Key Pai
1000f548:	6e612072 78652064 74726f70 65687420     r and export the
1000f558:	62757020 2063696c 0079656b 74532032      public key.2 St
1000f568:	203a7065 72636e45 20747079 656d2061     ep: Encrypt a me
1000f578:	67617373 69772065 52206874 53454153     ssage with RSAES
1000f588:	434b5020 20312353 31726556 5320352e      PKCS#1 Ver1.5 S
1000f598:	6d656863 20330065 70657453 6553203a     cheme.3 Step: Se
1000f5a8:	7463656c 6f725020 74636574 49206465     lect Protected I
1000f5b8:	43204332 656e6e6f 6f697463 2034006e     2C Connection.4 
1000f5c8:	70657453 6544203a 70797263 68742074     Step: Decrypt th
1000f5d8:	656d2065 67617373 69772065 52206874     e message with R
1000f5e8:	53454153 434b5020 20312353 31726556     SAES PKCS#1 Ver1
1000f5f8:	5320352e 6d656863 6e612065 78652064     .5 Scheme and ex
1000f608:	74726f70 00746920 72617453 676e6974     port it.Starting
1000f618:	63654420 74707972 646e6120 6f745320      Decrypt and Sto
1000f628:	44206572 20617461 74206e6f 63206568     re Data on the c
1000f638:	20706968 68746977 41535220 79654b20     hip with RSA Key
1000f648:	61784520 656c706d 53203200 3a706574      Example.2 Step:
1000f658:	6e654720 74617265 30372065 74796220      Generate 70 byt
1000f668:	52207365 50204153 6d206572 65747361     es RSA Pre maste
1000f678:	65732072 74657263 69687720 69206863     r secret which i
1000f688:	74732073 6465726f 206e6920 75716361     s stored in acqu
1000f698:	64657269 73657320 6e6f6973 44494f20     ired session OID
1000f6a8:	53203400 3a706574 636e4520 74707972     .4 Step: Encrypt
1000f6b8:	73655320 6e6f6973 74614420 69772061      Session Data wi
1000f6c8:	52206874 50204153 696c6275 654b2063     th RSA Public Ke
1000f6d8:	20350079 70657453 6544203a 70797263     y.5 Step: Decryp
1000f6e8:	68742074 656d2065 67617373 69772065     t the message wi
1000f6f8:	52206874 53454153 434b5020 20312353     th RSAES PKCS#1 
1000f708:	31726556 5320352e 6d656863 6e612065     Ver1.5 Scheme an
1000f718:	74732064 2065726f 6f207469 6863206e     d store it on ch
1000f728:	53007069 74726174 20676e69 72636e45     ip.Starting Encr
1000f738:	20747079 61746144 206e6920 73736553     ypt Data in Sess
1000f748:	206e6f69 656a624f 6f207463 6863206e     ion Object on ch
1000f758:	77207069 20687469 20415352 2079654b     ip with RSA Key 
1000f768:	6d617845 00656c70 74532031 203a7065     Example.1 Step: 
1000f778:	72636e45 20747079 656d2061 67617373     Encrypt a messag
1000f788:	69772065 52206874 53454153 434b5020     e with RSAES PKC
1000f798:	20312353 31726556 5320352e 6d656863     S#1 Ver1.5 Schem
1000f7a8:	74732065 6465726f 206e6f20 70696863     e stored on chip
1000f7b8:	206e6920 73736553 206e6f69 656a624f      in Session Obje
1000f7c8:	53007463 74726174 20676e69 72636e45     ct.Starting Encr
1000f7d8:	20747079 61746144 74697720 53522068     ypt Data with RS
1000f7e8:	654b2041 78452079 6c706d61 20310065     A Key Example.1 
1000f7f8:	70657453 6e45203a 70797263 20612074     Step: Encrypt a 
1000f808:	7373656d 20656761 68746977 41535220     message with RSA
1000f818:	50205345 2353434b 65562031 352e3172     ES PKCS#1 Ver1.5
1000f828:	68635320 00656d65 72617453 676e6974      Scheme.Starting
1000f838:	67697320 676e696e 61786520 656c706d      signing example
1000f848:	726f6620 434b5020 20312353 31726556      for PKCS#1 Ver1
1000f858:	5320352e 35324148 69532036 74616e67     .5 SHA256 Signat
1000f868:	20657275 65686373 2820656d 29415352     ure scheme (RSA)
1000f878:	53203100 3a706574 72655620 20796669     .1 Step: Verify 
1000f888:	70657270 64657261 67697320 7574616e     prepared signatu
1000f898:	202c6572 68746977 65727020 65726170     re, with prepare
1000f8a8:	75702064 63696c62 79656b20 646e6120     d public key and
1000f8b8:	67696420 00747365 74532031 203a7065      digest.1 Step: 
1000f8c8:	6e676953 65727020 65726170 61442064     Sign prepared Da
1000f8d8:	61206174 6520646e 726f7078 68742074     ta and export th
1000f8e8:	69732065 74616e67 00657275 72617453     e signature.Star
1000f8f8:	676e6974 6e656720 74617265 53522065     ting generate RS
1000f908:	654b2041 78452079 6c706d61 74530065     A Key Example.St
1000f918:	69747261 4520676e 70696c6c 2d636974     arting Elliptic-
1000f928:	76727563 69442065 65696666 489380e2     curve Diffie...H
1000f938:	6d6c6c65 28206e61 48444345 654b2029     ellman (ECDH) Ke
1000f948:	67412079 6d656572 20746e65 746f7250     y Agreement Prot
1000f958:	6c6f636f 61784520 656c706d 53203100     ocol Example.1 S
1000f968:	3a706574 6c655320 20746365 746f7250     tep: Select Prot
1000f978:	65746365 32492064 6f432043 63656e6e     ected I2C Connec
1000f988:	6e6f6974 53203200 3a706574 6e654720     tion.2 Step: Gen
1000f998:	74617265 656e2065 43452077 494e2043     erate new ECC NI
1000f9a8:	50205453 3635322d 79654b20 69615020     ST P-256 Key Pai
1000f9b8:	20340072 70657453 6547203a 6172656e     r.4 Step: Genera
1000f9c8:	53206574 65726168 65532064 74657263     te Shared Secret
1000f9d8:	646e6120 70786520 2074726f 53007469      and export it.S
1000f9e8:	74726174 20676e69 69726576 61636966     tarting verifica
1000f9f8:	6e6f6974 61786520 656c706d 726f6620     tion example for
1000fa08:	6c6c4520 69747069 75632d63 20657672      Elliptic-curve 
1000fa18:	69676944 206c6174 6e676953 72757461     Digital Signatur
1000fa28:	6c412065 69726f67 206d6874 44434528     e Algorithm (ECD
1000fa38:	00294153 72617453 676e6974 67697320     SA).Starting sig
1000fa48:	676e696e 61786520 656c706d 726f6620     ning example for
1000fa58:	6c6c4520 69747069 75632d63 20657672      Elliptic-curve 
1000fa68:	69676944 206c6174 6e676953 72757461     Digital Signatur
1000fa78:	6c412065 69726f67 206d6874 44434528     e Algorithm (ECD
1000fa88:	00294153 72617453 676e6974 6e656720     SA).Starting gen
1000fa98:	74617265 43452065 654b2043 78452079     erate ECC Key Ex
1000faa8:	6c706d61 20310065 70657453 6547203a     ample.1 Step: Ge
1000fab8:	6172656e 45206574 4e204343 20545349     nerate ECC NIST 
1000fac8:	35322d50 654b2036 61502079 61207269     P-256 Key Pair a
1000fad8:	6520646e 726f7078 68742074 75702065     nd export the pu
1000fae8:	63696c62 79656b20 61745300 6e697472     blic key.Startin
1000faf8:	65472067 6172656e 52206574 6f646e61     g Generate Rando
1000fb08:	7845206d 6c706d61 20310065 70657453     m Example.1 Step
1000fb18:	6547203a 6172656e 33206574 79622032     : Generate 32 by
1000fb28:	20736574 646e6172 53006d6f 74726174     tes random.Start
1000fb38:	20676e69 20534c54 20465250 32414853     ing TLS PRF SHA2
1000fb48:	28203635 2079654b 69726544 74616976     56 (Key Deriviat
1000fb58:	296e6f69 61784520 656c706d 53203100     ion) Example.1 S
1000fb68:	3a706574 69725720 70206574 61706572     tep: Write prepa
1000fb78:	20646572 72616853 53206465 65726365     red Shared Secre
1000fb88:	6e692074 61206f74 7241206e 72746962     t into an Arbitr
1000fb98:	20797261 61746144 6a624f20 00746365     ary Data Object.
1000fba8:	74532032 203a7065 61647055 4d206574     2 Step: Update M
1000fbb8:	64617465 20617461 7420666f 4f206568     etadata of the O
1000fbc8:	63656a62 6f742074 65737520 65687420     bject to use the
1000fbd8:	62724120 61727469 44207972 20617461      Arbitrary Data 
1000fbe8:	656a624f 6f207463 20796c6e 20616976     Object only via 
1000fbf8:	65696853 6465646c 43324920 6e6f4320     Shielded I2C Con
1000fc08:	7463656e 006e6f69 74532033 203a7065     nection.3 Step: 
1000fc18:	656e6547 65746172 61685320 20646572     Generate Shared 
1000fc28:	72636553 75207465 676e6973 65687420     Secret using the
1000fc38:	61685320 20646572 72636553 66207465      Shared Secret f
1000fc48:	206d6f72 20656874 69627241 72617274     rom the Arbitrar
1000fc58:	61442079 4f206174 63656a62 20340074     y Data Object.4 
1000fc68:	70657453 6552203a 726f7473 654d2065     Step: Restore Me
1000fc78:	61646174 6f206174 68742066 72412065     tadata of the Ar
1000fc88:	72746962 20797261 61746144 6a624f20     bitrary Data Obj
1000fc98:	00746365 72617453 676e6974 73614820     ect.Starting Has
1000fca8:	78452068 6c706d61 20310065 70657453     h Example.1 Step
1000fcb8:	6148203a 67206873 6e657669 74616420     : Hash given dat
1000fcc8:	69772061 53206874 74726174 7055202c     a with Start, Up
1000fcd8:	65746164 646e6120 6e694620 7a696c61     date and Finaliz
1000fce8:	61632065 00736c6c 72617453 676e6974     e calls.Starting
1000fcf8:	6f725020 74636574 55206465 74616470      Protected Updat
1000fd08:	78452065 6c706d61 20310065 70657453     e Example.1 Step
1000fd18:	7055203a 65746164 74654d20 74616461     : Update Metadat
1000fd28:	6f662061 68742072 624f2065 7463656a     a for the Object
1000fd38:	206f7420 75206562 74616470 61206465      to be updated a
1000fd48:	7420646e 54206568 74737572 636e4120     nd the Trust Anc
1000fd58:	20726f68 64657375 206f7420 69726576     hor used to veri
1000fd68:	74207966 75206568 74616470 20320065     fy the update.2 
1000fd78:	70657453 7257203a 20657469 73757254     Step: Write Trus
1000fd88:	6e412074 726f6863 65737520 79622064     t Anchor used by
1000fd98:	65687420 75725420 4d207473 206f7420      the Trust M to 
1000fda8:	69726576 74207966 75206568 74616470     verify the updat
1000fdb8:	20330065 70657453 7453203a 20747261     e.3 Step: Start 
1000fdc8:	746f7250 65746365 70752064 65746164     Protected update
1000fdd8:	74697720 72702068 72617065 6d206465      with prepared m
1000fde8:	66696e61 20747365 20646e61 67617266     anifest and frag
1000fdf8:	746e656d 74530073 69747261 5520676e     ments.Starting U
1000fe08:	74616470 6f432065 65746e75 78452072     pdate Counter Ex
1000fe18:	6c706d61 20310065 70657453 7257203a     ample.1 Step: Wr
1000fe28:	20657469 74696e49 206c6169 6e756f43     ite Initial Coun
1000fe38:	20726574 756c6156 20320065 70657453     ter Value.2 Step
1000fe48:	6e49203a 61657263 43206573 746e756f     : Increase Count
1000fe58:	4f207265 63656a62 74530074 69747261     er Object.Starti
1000fe68:	4820676e 72656269 6574616e 646e6120     ng Hibernate and
1000fe78:	73655220 65726f74 61784520 656c706d      Restore Example
1000fe88:	53203100 3a706574 65704f20 7041206e     .1 Step: Open Ap
1000fe98:	63696c70 6f697461 6e6f206e 65687420     plication on the
1000fea8:	63657320 74697275 68632079 32007069      security chip.2
1000feb8:	65745320 50203a70 20726961 20656874      Step: Pair the 
1000fec8:	74736f68 646e6120 65687420 63657320     host and the sec
1000fed8:	74697275 68632079 34007069 65745320     urity chip.4 Ste
1000fee8:	47203a70 72656e65 20657461 20434345     p: Generate ECC 
1000fef8:	5453494e 322d5020 4b203635 70207965     NIST P-256 Key p
1000ff08:	20726961 20646e61 726f7473 74692065     air and store it
1000ff18:	206e6920 73736553 206e6f69 61746144      in Session Data
1000ff28:	6a624f20 2c746365 70786520 2074726f      Object, export 
1000ff38:	20656874 6c627570 6b206369 35007965     the public key.5
1000ff48:	65745320 43203a70 6b636568 63655320      Step: Check Sec
1000ff58:	74697275 76452079 20746e65 6e756f43     urity Event Coun
1000ff68:	20726574 20646e61 74696177 6c697420     ter and wait til
1000ff78:	7469206c 61657220 73656863 36003020     l it reaches 0.6
1000ff88:	65745320 50203a70 6f667265 43206d72      Step: Perform C
1000ff98:	65736f6c 70706120 6163696c 6e6f6974     lose application
1000ffa8:	74697720 69482068 6e726562 20657461      with Hibernate 
1000ffb8:	61726170 6574656d 65732072 6f742074     parameter set to
1000ffc8:	75725420 20370065 70657453 704f203a      True.7 Step: Op
1000ffd8:	41206e65 696c7070 69746163 6f206e6f     en Application o
1000ffe8:	6874206e 65732065 69727563 63207974     n the security c
1000fff8:	00706968 74532038 203a7065 6e676953     hip.8 Step: Sign
10010008:	65727020 65726170 61642064 77206174      prepared data w
10010018:	20687469 76697270 20657461 2079656b     ith private key 
10010028:	726f7473 69206465 6553206e 6f697373     stored in Sessio
10010038:	6144206e 4f206174 63656a62 20390074     n Data Object.9 
10010048:	70657453 6556203a 79666972 65687420     Step: Verify the
10010058:	67697320 7574616e 77206572 20687469      signature with 
10010068:	20656874 6c627570 6b206369 67207965     the public key g
10010078:	72656e65 64657461 65727020 756f6976     enerated previou
10010088:	00796c73 53203031 3a706574 6f6c4320     sly.10 Step: Clo
10010098:	41206573 696c7070 74696163 6f206e6f     se Applicaiton o
100100a8:	6874206e 68632065 49007069 726f706d     n the chip.Impor
100100b8:	746e6174 746f6e20 54203a65 6f63206f     tant note: To co
100100c8:	6e69746e 77206575 20687469 6568746f     ntinue with othe
100100d8:	78652072 6c706d61 79207365 6e20756f     r examples you n
100100e8:	20646565 63206f74 206c6c61 20656874     eed to call the 
100100f8:	74696e69 72617020 74656d61 6f207265     init parameter o
10010108:	2065636e 69616761 7453006e 69747261     nce again.Starti
10010118:	5020676e 69726961 6f20676e 6f482066     ng Pairing of Ho
10010128:	61207473 5420646e 74737572 45204d20     st and Trust M E
10010138:	706d6178 3100656c 65745320 52203a70     xample.1 Step: R
10010148:	20646165 20646e61 63656843 7865206b     ead and Check ex
10010158:	69747369 4d20676e 64617465 20617461     isting Metadata 
10010168:	20726f66 20656874 646e6942 20676e69     for the Binding 
10010178:	72636553 32007465 65745320 47203a70     Secret.2 Step: G
10010188:	72656e65 20657461 646e6152 66206d6f     enerate Random f
10010198:	7420726f 6e206568 42207765 69646e69     or the new Bindi
100101a8:	5320676e 65726365 20330074 70657453     ng Secret.3 Step
100101b8:	7257203a 20657469 2077656e 646e6942     : Write new Bind
100101c8:	20676e69 72636553 34007465 65745320     ing Secret.4 Ste
100101d8:	53203a70 65726f74 77656e20 6e694220     p: Store new Bin
100101e8:	676e6964 63655320 20746572 74206e6f     ding Secret on t
100101f8:	48206568 0074736f 72617453 676e6974     he Host.Starting
10010208:	69725720 44206574 2f617461 6174654d      Write Data/Meta
10010218:	61746164 61784520 656c706d 53203100     data Example.1 S
10010228:	3a706574 69725720 53206574 6c706d61     tep: Write Sampl
10010238:	65432065 66697472 74616369 6e692065     e Certificate in
10010248:	75725420 41207473 6f68636e 61442072      Trust Anchor Da
10010258:	4f206174 63656a62 36282074 62203034     ta Object (640 b
10010268:	73657479 20320029 70657453 7257203a     ytes).2 Step: Wr
10010278:	20657469 2077656e 6174654d 61746164     ite new Metadata
10010288:	61745300 6e697472 65522067 44206461     .Starting Read D
10010298:	2f617461 6174654d 61746164 61784520     ata/Metadata Exa
100102a8:	656c706d 53203100 3a706574 61655220     mple.1 Step: Rea
100102b8:	65432064 66697472 74616369 7e282065     d Certificate (~
100102c8:	20303035 65747962 32002973 65745320     500 bytes).2 Ste
100102d8:	52203a70 20646165 74726543 63696669     p: Read Certific
100102e8:	20657461 6174654d 61746164 696e4900     ate Metadata.Ini
100102f8:	6c616974 6e697a69 504f2067 41474954     tializing OPTIGA
10010308:	726f6620 61786520 656c706d 6d656420      for example dem
10010318:	74736e6f 69746172 2e2e6e6f 49000a2e     onstration.....I
10010328:	6974696e 7a696c61 20676e69 4954504f     nitializing OPTI
10010338:	63204147 6c706d6f 64657465 0a2e2e2e     GA completed....
10010348:	6542000a 206e6967 72696170 20676e69     ..Begin pairing 
10010358:	6820666f 2074736f 20646e61 4954504f     of host and OPTI
10010368:	2e2e4147 6150002e 6e697269 666f2067     GA....Pairing of
10010378:	736f6820 6e612074 504f2064 41474954      host and OPTIGA
10010388:	6d6f6320 74656c70 2e2e6465 6553002e      completed....Se
10010398:	6e697474 75632067 6e657272 696c2074     tting current li
100103a8:	6174696d 6e6f6974 206f7420 696e696d     mitation to mini
100103b8:	2e6d756d 53002e2e 74726174 20676e69     mum....Starting 
100103c8:	4954504f 65204147 706d6178 6420656c     OPTIGA example d
100103d8:	6e6f6d65 61727473 6e6f6974 000a2e2e     emonstration....
100103e8:	6d617845 20656c70 656b6174 64252073     Example takes %d
100103f8:	65736d20 20200063 73752020 20656761      msec.    usage 
10010408:	20202020 20202020 20202020 3a202020                    :
10010418:	74706f20 20616769 6d633c2d 68003e64      optiga -<cmd>.h
10010428:	00706c65 6f4e0024 61786520 656c706d     elp.$.No example
10010438:	69786520 20737473 20726f66 73696874      exists for this
10010448:	71657220 74736575 65725000 61207373      request.Press a
10010458:	6b20796e 74207965 7473206f 20747261     ny key to start 
10010468:	6974706f 6d206167 20696e69 6c656873     optiga mini shel
10010478:	2020006c 6e692020 61697469 657a696c     l.    initialize
10010488:	74706f20 20616769 20202020 20202020      optiga         
10010498:	2000203a 64202020 6e692d65 61697469     : .    de-initia
100104a8:	657a696c 74706f20 20616769 20202020     lize optiga     
100104b8:	00203a20 20202020 206e7572 206c6c61      : .    run all 
100104c8:	74736574 74612073 636e6f20 20202065     tests at once   
100104d8:	203a2020 20202000 61657220 61642064       : .    read da
100104e8:	20206174 20202020 20202020 20202020     ta              
100104f8:	3a202020 20200020 72772020 20657469        : .    write 
10010508:	61746164 20202020 20202020 20202020     data            
10010518:	20202020 2000203a 62202020 69646e69         : .    bindi
10010528:	6820676e 2074736f 68746977 74706f20     ng host with opt
10010538:	20616769 00203a20 20202020 65626968     iga  : .    hibe
10010548:	74616e72 6e612065 65722064 726f7473     rnate and restor
10010558:	20202065 203a2020 20202000 64707520     e     : .    upd
10010568:	20657461 6e756f63 20726574 20202020     ate counter     
10010578:	20202020 3a202020 20200020 72702020            : .    pr
10010588:	6365746f 20646574 61647075 20206574     otected update  
10010598:	20202020 20202020 2000203a 68202020             : .    h
100105a8:	69687361 6f20676e 61642066 20206174     ashing of data  
100105b8:	20202020 20202020 00203a20 20003031              : .10. 
100105c8:	74202020 7020736c 73207266 35326168        tls pfr sha25
100105d8:	20202036 20202020 20202020 00203a20     6            : .
100105e8:	20003131 72202020 6f646e61 756e206d     11.    random nu
100105f8:	7265626d 6e656720 74617265 206e6f69     mber generation 
10010608:	00203a20 20003231 65202020 6b206363      : .12.    ecc k
10010618:	70207965 20726961 656e6567 69746172     ey pair generati
10010628:	20206e6f 00203a20 20003331 65202020     on   : .13.    e
10010638:	61736463 67697320 2020206e 20202020     cdsa sign       
10010648:	20202020 20202020 00203a20 20003431              : .14. 
10010658:	65202020 61736463 72657620 20796669        ecdsa verify 
10010668:	6e676973 20202020 20202020 00203a20     sign         : .
10010678:	20003531 65202020 64206363 69666669     15.    ecc diffi
10010688:	65682065 616d6c6c 2020206e 20202020     e hellman       
10010698:	00203a20 20003631 72202020 6b206173      : .16.    rsa k
100106a8:	70207965 20726961 656e6567 69746172     ey pair generati
100106b8:	20206e6f 00203a20 20003731 72202020     on   : .17.    r
100106c8:	73206173 206e6769 20202020 20202020     sa sign         
100106d8:	20202020 20202020 00203a20 20003831              : .18. 
100106e8:	72202020 76206173 66697265 69732079        rsa verify si
100106f8:	20206e67 20202020 20202020 00203a20     gn           : .
10010708:	20003931 72202020 65206173 7972636e     19.    rsa encry
10010718:	6d207470 61737365 20206567 20202020     pt message      
10010728:	00203a20 20003032 72202020 65206173      : .20.    rsa e
10010738:	7972636e 73207470 69737365 20206e6f     ncrypt session  
10010748:	20202020 00203a20 20003132 72202020          : .21.    r
10010758:	64206173 79726365 61207470 7320646e     sa decrypt and s
10010768:	65726f74 20202020 00203a20 20003232     tore     : .22. 
10010778:	72202020 64206173 79726365 61207470        rsa decrypt a
10010788:	6520646e 726f7078 20202074 00203a20     nd export    : .
10010798:	43003332 302d2300 6800202b 65004c6c     23.C.#-0+ .hlL.e
100107a8:	46456766 31300047 35343332 39383736     fgEFG.0123456789
100107b8:	44434241 30004645 34333231 38373635     ABCDEF.012345678
100107c8:	63626139 00666564                       9abcdef.

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	1000168d 	.word	0x1000168d
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	10001605 	.word	0x10001605
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	1000a329 	.word	0x1000a329
	Insert_InterruptVeener IRQ10	
200000f8:	1000af41 	.word	0x1000af41
	Insert_InterruptVeener IRQ11	
200000fc:	1000a319 	.word	0x1000a319
	Insert_InterruptVeener IRQ12	
20000100:	1000af31 	.word	0x1000af31
	Insert_InterruptVeener IRQ13	
20000104:	1000a309 	.word	0x1000a309
	Insert_InterruptVeener IRQ14	
20000108:	1000a2f9 	.word	0x1000a2f9
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
