
xmc1400-getstarted-optiga-trust-m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010d88  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000028  10011d88  10011d88  00011d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  10011db0  10011db0  00011db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000144  2000000c  10011db8  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 Stack         00001400  20000150  00000000  00000150  2**0
                  ALLOC
  5 .data         00001348  20001550  10011efc  00019550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007b0  20002898  00002748  0001a898  2**2
                  ALLOC
  7 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  8 .debug_aranges 00001890  00000000  00000000  0001a898  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003f18c  00000000  00000000  0001c128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aabf  00000000  00000000  0005b2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00012630  00000000  00000000  00065d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00004680  00000000  00000000  000783a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ee7d  00000000  00000000  0007ca24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017d92  00000000  00000000  0008b8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd0  00000000  00000000  000a3638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00001470  00000000  00000000  000a5208  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 15 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10011db8 	.word	0x10011db8
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	10009e05 	.word	0x10009e05
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	10011efc 	.word	0x10011efc
	ldr	r2, =__data_start
10001078:	20001550 	.word	0x20001550
	ldr	r3, =__data_end
1000107c:	20002898 	.word	0x20002898
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	10013244 	.word	0x10013244
	ldr	r2, =__ram_code_start
10001084:	20002898 	.word	0x20002898
	ldr	r3, =__ram_code_end
10001088:	20002898 	.word	0x20002898
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	20002898 	.word	0x20002898
	ldr	r2, =__bss_end
10001090:	20003044 	.word	0x20003044
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	1000c92d 	.word	0x1000c92d
    blx  r0
#endif

    ldr  r0, =main
10001098:	1000b7a9 	.word	0x1000b7a9

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <pal_init>:


pal_status_t pal_init(void)
{
    return PAL_STATUS_SUCCESS;
}
100010a0:	2000      	movs	r0, #0
100010a2:	4770      	bx	lr

100010a4 <pal_crypt_tls_prf_sha256>:
                                      uint16_t label_length,
                                      const uint8_t * p_seed,
                                      uint16_t seed_length,
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
100010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100010a6:	b0b1      	sub	sp, #196	; 0xc4
100010a8:	1c1d      	adds	r5, r3, #0
100010aa:	ab36      	add	r3, sp, #216	; 0xd8
100010ac:	881c      	ldrh	r4, [r3, #0]
100010ae:	ab38      	add	r3, sp, #224	; 0xe0
100010b0:	881f      	ldrh	r7, [r3, #0]
    uint8_t hmac_checksum_result[PAL_CRYPT_DIGEST_MAX_SIZE];
    const mbedtls_md_info_t *message_digest_info;
    mbedtls_md_context_t message_digest_context;
    uint16_t final_seed_length = 0;
       
    mbedtls_md_init(&message_digest_context);
100010b2:	a805      	add	r0, sp, #20
                                      uint16_t label_length,
                                      const uint8_t * p_seed,
                                      uint16_t seed_length,
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
100010b4:	ab3a      	add	r3, sp, #232	; 0xe8
100010b6:	881e      	ldrh	r6, [r3, #0]
100010b8:	9100      	str	r1, [sp, #0]
100010ba:	9203      	str	r2, [sp, #12]
    uint8_t hmac_checksum_result[PAL_CRYPT_DIGEST_MAX_SIZE];
    const mbedtls_md_info_t *message_digest_info;
    mbedtls_md_context_t message_digest_context;
    uint16_t final_seed_length = 0;
       
    mbedtls_md_init(&message_digest_context);
100010bc:	f006 fc94 	bl	100079e8 <mbedtls_md_init>
    
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_secret) || (NULL == p_label) || (NULL == p_seed) || (NULL == p_derived_key))
100010c0:	9b00      	ldr	r3, [sp, #0]
100010c2:	2b00      	cmp	r3, #0
100010c4:	d101      	bne.n	100010ca <pal_crypt_tls_prf_sha256+0x26>
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
    #define PAL_CRYPT_DIGEST_MAX_SIZE    (32U)

    pal_status_t return_value = PAL_STATUS_FAILURE;
100010c6:	2401      	movs	r4, #1
100010c8:	e081      	b.n	100011ce <pal_crypt_tls_prf_sha256+0x12a>
    mbedtls_md_init(&message_digest_context);
    
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_secret) || (NULL == p_label) || (NULL == p_seed) || (NULL == p_derived_key))
100010ca:	2d00      	cmp	r5, #0
100010cc:	d0fb      	beq.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>
100010ce:	9b37      	ldr	r3, [sp, #220]	; 0xdc
100010d0:	2b00      	cmp	r3, #0
100010d2:	d0f8      	beq.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>
100010d4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
100010d6:	2b00      	cmp	r3, #0
100010d8:	d0f5      	beq.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>
        {
            break;
        }
#endif  //OPTIGA_LIB_DEBUG_NULL_CHECK

        if (sizeof(md_hmac_temp_array ) < (uint32_t)(message_digest_length + label_length + seed_length))
100010da:	1c23      	adds	r3, r4, #0
100010dc:	3320      	adds	r3, #32
100010de:	9301      	str	r3, [sp, #4]
100010e0:	19db      	adds	r3, r3, r7
100010e2:	2b80      	cmp	r3, #128	; 0x80
100010e4:	dd01      	ble.n	100010ea <pal_crypt_tls_prf_sha256+0x46>
        {
            return_value = PAL_STATUS_INVALID_INPUT;
100010e6:	2404      	movs	r4, #4
100010e8:	e071      	b.n	100011ce <pal_crypt_tls_prf_sha256+0x12a>
            break;
        }

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
100010ea:	2006      	movs	r0, #6
100010ec:	f006 fc6c 	bl	100079c8 <mbedtls_md_info_from_type>

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
100010f0:	1c29      	adds	r1, r5, #0
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
100010f2:	9002      	str	r0, [sp, #8]

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
100010f4:	1c22      	adds	r2, r4, #0
100010f6:	a818      	add	r0, sp, #96	; 0x60
100010f8:	f00b fc57 	bl	1000c9aa <memcpy>
        memcpy(md_hmac_temp_array + message_digest_length + label_length, p_seed, seed_length);
100010fc:	aa10      	add	r2, sp, #64	; 0x40
100010fe:	4694      	mov	ip, r2
10001100:	9b01      	ldr	r3, [sp, #4]
10001102:	9937      	ldr	r1, [sp, #220]	; 0xdc
10001104:	4463      	add	r3, ip
10001106:	1c3a      	adds	r2, r7, #0
10001108:	1c18      	adds	r0, r3, #0
1000110a:	f00b fc4e 	bl	1000c9aa <memcpy>
        final_seed_length = label_length + seed_length;

        if (0 != (mbedtls_md_setup(&message_digest_context,message_digest_info,1)))
1000110e:	a805      	add	r0, sp, #20
10001110:	9902      	ldr	r1, [sp, #8]
10001112:	2201      	movs	r2, #1
10001114:	f006 fc8a 	bl	10007a2c <mbedtls_md_setup>
10001118:	2800      	cmp	r0, #0
1000111a:	d1e4      	bne.n	100010e6 <pal_crypt_tls_prf_sha256+0x42>
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        if (0 != mbedtls_md_hmac_starts(&message_digest_context, p_secret, secret_length))
1000111c:	a805      	add	r0, sp, #20
1000111e:	9900      	ldr	r1, [sp, #0]
10001120:	9a03      	ldr	r2, [sp, #12]
10001122:	f006 fca9 	bl	10007a78 <mbedtls_md_hmac_starts>
10001126:	2800      	cmp	r0, #0
10001128:	d1cd      	bne.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
        memcpy(md_hmac_temp_array + message_digest_length + label_length, p_seed, seed_length);
        final_seed_length = label_length + seed_length;
1000112a:	19e5      	adds	r5, r4, r7
1000112c:	b2ad      	uxth	r5, r5
        if (0 != mbedtls_md_hmac_starts(&message_digest_context, p_secret, secret_length))
        {
            break;
        }
       
        if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array + message_digest_length, final_seed_length))
1000112e:	a805      	add	r0, sp, #20
10001130:	a918      	add	r1, sp, #96	; 0x60
10001132:	1c2a      	adds	r2, r5, #0
10001134:	f006 fcfe 	bl	10007b34 <mbedtls_md_hmac_update>
10001138:	2800      	cmp	r0, #0
1000113a:	d1c4      	bne.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>
        {
            break;
        }
        
        if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
1000113c:	a805      	add	r0, sp, #20
1000113e:	a910      	add	r1, sp, #64	; 0x40
10001140:	f006 fd0a 	bl	10007b58 <mbedtls_md_hmac_finish>
10001144:	1e04      	subs	r4, r0, #0
10001146:	d1be      	bne.n	100010c6 <pal_crypt_tls_prf_sha256+0x22>
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
10001148:	42b4      	cmp	r4, r6
1000114a:	d23b      	bcs.n	100011c4 <pal_crypt_tls_prf_sha256+0x120>
             derive_key_len_index += message_digest_length)
        {
            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
1000114c:	a805      	add	r0, sp, #20
1000114e:	f006 fd37 	bl	10007bc0 <mbedtls_md_hmac_reset>
10001152:	2800      	cmp	r0, #0
10001154:	d138      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
            {
                break;
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, 
10001156:	1c2a      	adds	r2, r5, #0
10001158:	a805      	add	r0, sp, #20
1000115a:	a910      	add	r1, sp, #64	; 0x40
1000115c:	3220      	adds	r2, #32
1000115e:	f006 fce9 	bl	10007b34 <mbedtls_md_hmac_update>
10001162:	2800      	cmp	r0, #0
10001164:	d130      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
                            message_digest_length + final_seed_length))
            {
                break;                
            }
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, hmac_checksum_result))
10001166:	af08      	add	r7, sp, #32
10001168:	a805      	add	r0, sp, #20
1000116a:	1c39      	adds	r1, r7, #0
1000116c:	f006 fcf4 	bl	10007b58 <mbedtls_md_hmac_finish>
10001170:	2800      	cmp	r0, #0
10001172:	d129      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
            {
                break;                                
            }

            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
10001174:	a805      	add	r0, sp, #20
10001176:	f006 fd23 	bl	10007bc0 <mbedtls_md_hmac_reset>
1000117a:	2800      	cmp	r0, #0
1000117c:	d124      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
            {
                break;                
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, message_digest_length))
1000117e:	a805      	add	r0, sp, #20
10001180:	a910      	add	r1, sp, #64	; 0x40
10001182:	2220      	movs	r2, #32
10001184:	f006 fcd6 	bl	10007b34 <mbedtls_md_hmac_update>
10001188:	2800      	cmp	r0, #0
1000118a:	d11d      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
            {
                break;                                
            }
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
1000118c:	a805      	add	r0, sp, #20
1000118e:	a910      	add	r1, sp, #64	; 0x40
10001190:	f006 fce2 	bl	10007b58 <mbedtls_md_hmac_finish>
10001194:	2800      	cmp	r0, #0
10001196:	d117      	bne.n	100011c8 <pal_crypt_tls_prf_sha256+0x124>
            {
                break;                                
            }

            hmac_result_length = ((derive_key_len_index + message_digest_length) > derived_key_length) ? 
10001198:	1c21      	adds	r1, r4, #0
1000119a:	2320      	movs	r3, #32
1000119c:	3120      	adds	r1, #32
1000119e:	9300      	str	r3, [sp, #0]
100011a0:	42b1      	cmp	r1, r6
100011a2:	dd02      	ble.n	100011aa <pal_crypt_tls_prf_sha256+0x106>
                                  (derived_key_length % message_digest_length) : (message_digest_length);
100011a4:	221f      	movs	r2, #31
100011a6:	4032      	ands	r2, r6
100011a8:	9200      	str	r2, [sp, #0]

            for (hmac_checksum_result_index = 0; hmac_checksum_result_index < hmac_result_length; 
100011aa:	2300      	movs	r3, #0
100011ac:	9a00      	ldr	r2, [sp, #0]
100011ae:	b298      	uxth	r0, r3
100011b0:	4290      	cmp	r0, r2
100011b2:	d205      	bcs.n	100011c0 <pal_crypt_tls_prf_sha256+0x11c>
100011b4:	9839      	ldr	r0, [sp, #228]	; 0xe4
100011b6:	1902      	adds	r2, r0, r4
                 hmac_checksum_result_index++)
            {
                p_derived_key[derive_key_len_index + hmac_checksum_result_index] = 
100011b8:	5cf8      	ldrb	r0, [r7, r3]
100011ba:	54d0      	strb	r0, [r2, r3]
100011bc:	3301      	adds	r3, #1
100011be:	e7f5      	b.n	100011ac <pal_crypt_tls_prf_sha256+0x108>
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
             derive_key_len_index += message_digest_length)
100011c0:	b28c      	uxth	r4, r1
100011c2:	e7c1      	b.n	10001148 <pal_crypt_tls_prf_sha256+0xa4>
                                                                    hmac_checksum_result[hmac_checksum_result_index];
            }
        }
        if (derive_key_len_index >= derived_key_length)
        {
            return_value = PAL_STATUS_SUCCESS;
100011c4:	2400      	movs	r4, #0
100011c6:	e002      	b.n	100011ce <pal_crypt_tls_prf_sha256+0x12a>
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
    #define PAL_CRYPT_DIGEST_MAX_SIZE    (32U)

    pal_status_t return_value = PAL_STATUS_FAILURE;
100011c8:	42b4      	cmp	r4, r6
100011ca:	41a4      	sbcs	r4, r4
100011cc:	4264      	negs	r4, r4
        {
            return_value = PAL_STATUS_SUCCESS;
        }
    } while (FALSE);
    
    mbedtls_md_free(&message_digest_context);
100011ce:	a805      	add	r0, sp, #20
100011d0:	f006 fc10 	bl	100079f4 <mbedtls_md_free>

    memset(md_hmac_temp_array, 0x00, sizeof(md_hmac_temp_array));
100011d4:	a810      	add	r0, sp, #64	; 0x40
100011d6:	2100      	movs	r1, #0
100011d8:	2280      	movs	r2, #128	; 0x80
100011da:	f00b fbef 	bl	1000c9bc <memset>
    memset(hmac_checksum_result, 0x00, sizeof(hmac_checksum_result));    
100011de:	a808      	add	r0, sp, #32
100011e0:	2100      	movs	r1, #0
100011e2:	2220      	movs	r2, #32
100011e4:	f00b fbea 	bl	1000c9bc <memset>
    #undef PAL_CRYPT_DIGEST_MAX_SIZE
    return return_value;
}
100011e8:	1c20      	adds	r0, r4, #0
100011ea:	b031      	add	sp, #196	; 0xc4
100011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

100011ee <pal_crypt_encrypt_aes128_ccm>:
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_cipher_text)
{
100011ee:	b5f0      	push	{r4, r5, r6, r7, lr}
100011f0:	b09d      	sub	sp, #116	; 0x74
100011f2:	1c1f      	adds	r7, r3, #0
100011f4:	ab22      	add	r3, sp, #136	; 0x88
100011f6:	cb20      	ldmia	r3!, {r5}
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t mac_output[MAC_TAG_BUFFER_SIZE];
    mbedtls_ccm_context sEncrypt;

    mbedtls_ccm_init(&sEncrypt);
100011f8:	a80e      	add	r0, sp, #56	; 0x38
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_cipher_text)
{
100011fa:	881b      	ldrh	r3, [r3, #0]
100011fc:	1c0e      	adds	r6, r1, #0
100011fe:	9308      	str	r3, [sp, #32]
10001200:	ab25      	add	r3, sp, #148	; 0x94
10001202:	881b      	ldrh	r3, [r3, #0]
10001204:	1c14      	adds	r4, r2, #0
10001206:	9309      	str	r3, [sp, #36]	; 0x24
10001208:	ab26      	add	r3, sp, #152	; 0x98
1000120a:	781b      	ldrb	r3, [r3, #0]
1000120c:	9307      	str	r3, [sp, #28]
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t mac_output[MAC_TAG_BUFFER_SIZE];
    mbedtls_ccm_context sEncrypt;

    mbedtls_ccm_init(&sEncrypt);
1000120e:	f006 fa61 	bl	100076d4 <mbedtls_ccm_init>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_cipher_text) || (NULL == p_plain_text) ||
10001212:	9b27      	ldr	r3, [sp, #156]	; 0x9c
10001214:	2b00      	cmp	r3, #0
10001216:	d101      	bne.n	1000121c <pal_crypt_encrypt_aes128_ccm+0x2e>
                                          uint8_t * p_cipher_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    #define MAC_TAG_BUFFER_SIZE     (16U)
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
10001218:	2501      	movs	r5, #1
1000121a:	e029      	b.n	10001270 <pal_crypt_encrypt_aes128_ccm+0x82>
    mbedtls_ccm_init(&sEncrypt);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_cipher_text) || (NULL == p_plain_text) ||
1000121c:	2e00      	cmp	r6, #0
1000121e:	d0fb      	beq.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
10001220:	2d00      	cmp	r5, #0
10001222:	d0f9      	beq.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
            (NULL == p_nonce) || (NULL == p_associated_data) || (NULL == p_encrypt_key))
10001224:	9b24      	ldr	r3, [sp, #144]	; 0x90
10001226:	2b00      	cmp	r3, #0
10001228:	d0f6      	beq.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
1000122a:	2f00      	cmp	r7, #0
1000122c:	d0f4      	beq.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
        {
            break;
        }
#endif

        if (0 != mbedtls_ccm_setkey(&sEncrypt, MBEDTLS_CIPHER_ID_AES, p_encrypt_key, 8 * AES128_KEY_BITS_SIZE))
1000122e:	a80e      	add	r0, sp, #56	; 0x38
10001230:	2102      	movs	r1, #2
10001232:	1c3a      	adds	r2, r7, #0
10001234:	2380      	movs	r3, #128	; 0x80
10001236:	f006 fa53 	bl	100076e0 <mbedtls_ccm_setkey>
1000123a:	2800      	cmp	r0, #0
1000123c:	d1ec      	bne.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
        {
            break;
        }
        
        if (0 != mbedtls_ccm_encrypt_and_tag(&sEncrypt,
1000123e:	9b24      	ldr	r3, [sp, #144]	; 0x90
10001240:	9602      	str	r6, [sp, #8]
10001242:	9300      	str	r3, [sp, #0]
10001244:	9b09      	ldr	r3, [sp, #36]	; 0x24
10001246:	ae0a      	add	r6, sp, #40	; 0x28
10001248:	9301      	str	r3, [sp, #4]
1000124a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
1000124c:	1c2a      	adds	r2, r5, #0
1000124e:	9303      	str	r3, [sp, #12]
10001250:	9b07      	ldr	r3, [sp, #28]
10001252:	9604      	str	r6, [sp, #16]
10001254:	9305      	str	r3, [sp, #20]
10001256:	a80e      	add	r0, sp, #56	; 0x38
10001258:	1c21      	adds	r1, r4, #0
1000125a:	9b08      	ldr	r3, [sp, #32]
1000125c:	f006 fa84 	bl	10007768 <mbedtls_ccm_encrypt_and_tag>
10001260:	1e05      	subs	r5, r0, #0
10001262:	d1d9      	bne.n	10001218 <pal_crypt_encrypt_aes128_ccm+0x2a>
        
        {
            break;
        }

        memcpy((p_cipher_text + plain_text_length), mac_output, mac_size);
10001264:	9b27      	ldr	r3, [sp, #156]	; 0x9c
10001266:	1c31      	adds	r1, r6, #0
10001268:	1918      	adds	r0, r3, r4
1000126a:	9a07      	ldr	r2, [sp, #28]
1000126c:	f00b fb9d 	bl	1000c9aa <memcpy>
        return_status = PAL_STATUS_SUCCESS;
    } while (FALSE);
    mbedtls_ccm_free(&sEncrypt);
10001270:	a80e      	add	r0, sp, #56	; 0x38
10001272:	f006 fa56 	bl	10007722 <mbedtls_ccm_free>
    #undef AES128_KEY_BITS_SIZE
    #undef MAC_TAG_BUFFER_SIZE    
    return return_status;
}
10001276:	1c28      	adds	r0, r5, #0
10001278:	b01d      	add	sp, #116	; 0x74
1000127a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000127c <pal_crypt_decrypt_aes128_ccm>:
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
1000127c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000127e:	b099      	sub	sp, #100	; 0x64
10001280:	1c1f      	adds	r7, r3, #0
10001282:	ab1e      	add	r3, sp, #120	; 0x78
10001284:	cb20      	ldmia	r3!, {r5}
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
    mbedtls_ccm_context sDecrypt;

    mbedtls_ccm_init(&sDecrypt);
10001286:	a80a      	add	r0, sp, #40	; 0x28
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
10001288:	881b      	ldrh	r3, [r3, #0]
1000128a:	1c0c      	adds	r4, r1, #0
1000128c:	9308      	str	r3, [sp, #32]
1000128e:	ab21      	add	r3, sp, #132	; 0x84
10001290:	881b      	ldrh	r3, [r3, #0]
10001292:	9207      	str	r2, [sp, #28]
10001294:	9309      	str	r3, [sp, #36]	; 0x24
10001296:	ab22      	add	r3, sp, #136	; 0x88
10001298:	781e      	ldrb	r6, [r3, #0]
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
    mbedtls_ccm_context sDecrypt;

    mbedtls_ccm_init(&sDecrypt);
1000129a:	f006 fa1b 	bl	100076d4 <mbedtls_ccm_init>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_plain_text) || (NULL == p_cipher_text) ||
1000129e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
100012a0:	2b00      	cmp	r3, #0
100012a2:	d101      	bne.n	100012a8 <pal_crypt_decrypt_aes128_ccm+0x2c>
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
100012a4:	2401      	movs	r4, #1
100012a6:	e024      	b.n	100012f2 <pal_crypt_decrypt_aes128_ccm+0x76>
    mbedtls_ccm_init(&sDecrypt);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_plain_text) || (NULL == p_cipher_text) ||
100012a8:	2c00      	cmp	r4, #0
100012aa:	d0fb      	beq.n	100012a4 <pal_crypt_decrypt_aes128_ccm+0x28>
100012ac:	2d00      	cmp	r5, #0
100012ae:	d0f9      	beq.n	100012a4 <pal_crypt_decrypt_aes128_ccm+0x28>
            (NULL == p_nonce) || (NULL == p_associated_data) || (NULL == p_decrypt_key))
100012b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
100012b2:	2b00      	cmp	r3, #0
100012b4:	d0f6      	beq.n	100012a4 <pal_crypt_decrypt_aes128_ccm+0x28>
100012b6:	2f00      	cmp	r7, #0
100012b8:	d0f4      	beq.n	100012a4 <pal_crypt_decrypt_aes128_ccm+0x28>
        {
            break;
        }
#endif

        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
100012ba:	a80a      	add	r0, sp, #40	; 0x28
100012bc:	2102      	movs	r1, #2
100012be:	1c3a      	adds	r2, r7, #0
100012c0:	2380      	movs	r3, #128	; 0x80
100012c2:	f006 fa0d 	bl	100076e0 <mbedtls_ccm_setkey>
100012c6:	2800      	cmp	r0, #0
100012c8:	d1ec      	bne.n	100012a4 <pal_crypt_decrypt_aes128_ccm+0x28>
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
                                          (cipher_text_length - mac_size),
100012ca:	9b07      	ldr	r3, [sp, #28]
        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
100012cc:	9402      	str	r4, [sp, #8]
                                          (cipher_text_length - mac_size),
100012ce:	1b99      	subs	r1, r3, r6
        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
100012d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
100012d2:	1864      	adds	r4, r4, r1
100012d4:	9300      	str	r3, [sp, #0]
100012d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100012d8:	9404      	str	r4, [sp, #16]
100012da:	9301      	str	r3, [sp, #4]
100012dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
100012de:	9605      	str	r6, [sp, #20]
100012e0:	9303      	str	r3, [sp, #12]
100012e2:	a80a      	add	r0, sp, #40	; 0x28
100012e4:	1c2a      	adds	r2, r5, #0
100012e6:	9b08      	ldr	r3, [sp, #32]
100012e8:	f006 fa84 	bl	100077f4 <mbedtls_ccm_auth_decrypt>
100012ec:	1e44      	subs	r4, r0, #1
100012ee:	41a0      	sbcs	r0, r4
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
100012f0:	b284      	uxth	r4, r0
        {
            break;
        }
        return_status = PAL_STATUS_SUCCESS;
    } while (FALSE);
    mbedtls_ccm_free(&sDecrypt);
100012f2:	a80a      	add	r0, sp, #40	; 0x28
100012f4:	f006 fa15 	bl	10007722 <mbedtls_ccm_free>
    #undef AES128_KEY_BITS_SIZE
    return return_status;
}
100012f8:	1c20      	adds	r0, r4, #0
100012fa:	b019      	add	sp, #100	; 0x64
100012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

100012fe <pal_gpio_set_high>:
    return PAL_STATUS_SUCCESS;
}

void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
100012fe:	2800      	cmp	r0, #0
10001300:	d007      	beq.n	10001312 <pal_gpio_set_high+0x14>
10001302:	6803      	ldr	r3, [r0, #0]
10001304:	2b00      	cmp	r3, #0
10001306:	d004      	beq.n	10001312 <pal_gpio_set_high+0x14>

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10001308:	7b19      	ldrb	r1, [r3, #12]
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
1000130a:	681a      	ldr	r2, [r3, #0]
1000130c:	2301      	movs	r3, #1
1000130e:	408b      	lsls	r3, r1
10001310:	6053      	str	r3, [r2, #4]
    {
        DIGITAL_IO_SetOutputHigh(p_gpio_context->p_gpio_hw);
    }
}
10001312:	4770      	bx	lr

10001314 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
10001314:	2800      	cmp	r0, #0
10001316:	d008      	beq.n	1000132a <pal_gpio_set_low+0x16>
10001318:	6803      	ldr	r3, [r0, #0]
1000131a:	2b00      	cmp	r3, #0
1000131c:	d005      	beq.n	1000132a <pal_gpio_set_low+0x16>

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
1000131e:	7b19      	ldrb	r1, [r3, #12]
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10001320:	681a      	ldr	r2, [r3, #0]
10001322:	2380      	movs	r3, #128	; 0x80
10001324:	025b      	lsls	r3, r3, #9
10001326:	408b      	lsls	r3, r1
10001328:	6053      	str	r3, [r2, #4]
    {
        DIGITAL_IO_SetOutputLow(p_gpio_context->p_gpio_hw);
    }
}
1000132a:	4770      	bx	lr

1000132c <pal_i2c_acquire.isra.2>:
_STATIC_H pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
1000132c:	4b06      	ldr	r3, [pc, #24]	; (10001348 <pal_i2c_acquire.isra.2+0x1c>)
        if (1 == g_entry_count)
        {
            return PAL_STATUS_SUCCESS;
        }
    }
    return PAL_STATUS_FAILURE;
1000132e:	2001      	movs	r0, #1
_STATIC_H pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
10001330:	681a      	ldr	r2, [r3, #0]
10001332:	2a00      	cmp	r2, #0
10001334:	d107      	bne.n	10001346 <pal_i2c_acquire.isra.2+0x1a>
    {
        g_entry_count++;
10001336:	681a      	ldr	r2, [r3, #0]
10001338:	1812      	adds	r2, r2, r0
1000133a:	601a      	str	r2, [r3, #0]
        if (1 == g_entry_count)
1000133c:	6818      	ldr	r0, [r3, #0]
1000133e:	3801      	subs	r0, #1
10001340:	1e43      	subs	r3, r0, #1
10001342:	4198      	sbcs	r0, r3
        {
            return PAL_STATUS_SUCCESS;
        }
    }
    return PAL_STATUS_FAILURE;
10001344:	b280      	uxth	r0, r0
}
10001346:	4770      	bx	lr
10001348:	2000289c 	.word	0x2000289c

1000134c <invoke_upper_layer_callback>:
    g_entry_count = 0;
}
/// @endcond

void invoke_upper_layer_callback (const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
1000134c:	b508      	push	{r3, lr}
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
1000134e:	68c3      	ldr	r3, [r0, #12]
10001350:	6880      	ldr	r0, [r0, #8]
10001352:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
10001354:	2200      	movs	r2, #0
10001356:	4b01      	ldr	r3, [pc, #4]	; (1000135c <invoke_upper_layer_callback+0x10>)
10001358:	601a      	str	r2, [r3, #0]

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);

    //Release I2C Bus
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
}
1000135a:	bd08      	pop	{r3, pc}
1000135c:	2000289c 	.word	0x2000289c

10001360 <i2c_master_end_of_transmit_callback>:

/// @cond hidden
void i2c_master_end_of_transmit_callback(void)
{
10001360:	b508      	push	{r3, lr}
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
10001362:	4b03      	ldr	r3, [pc, #12]	; (10001370 <i2c_master_end_of_transmit_callback+0x10>)
10001364:	2100      	movs	r1, #0
10001366:	6818      	ldr	r0, [r3, #0]
10001368:	f7ff fff0 	bl	1000134c <invoke_upper_layer_callback>
}
1000136c:	bd08      	pop	{r3, pc}
1000136e:	46c0      	nop			; (mov r8, r8)
10001370:	20002898 	.word	0x20002898

10001374 <i2c_master_end_of_receive_callback>:

void i2c_master_end_of_receive_callback(void)
{
10001374:	b508      	push	{r3, lr}
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
10001376:	4b03      	ldr	r3, [pc, #12]	; (10001384 <i2c_master_end_of_receive_callback+0x10>)
10001378:	2100      	movs	r1, #0
1000137a:	6818      	ldr	r0, [r3, #0]
1000137c:	f7ff ffe6 	bl	1000134c <invoke_upper_layer_callback>
}
10001380:	bd08      	pop	{r3, pc}
10001382:	46c0      	nop			; (mov r8, r8)
10001384:	20002898 	.word	0x20002898

10001388 <i2c_master_error_detected_callback>:

void i2c_master_error_detected_callback(void)
{
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
10001388:	4a13      	ldr	r2, [pc, #76]	; (100013d8 <i2c_master_error_detected_callback+0x50>)
{
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
}

void i2c_master_error_detected_callback(void)
{
1000138a:	b538      	push	{r3, r4, r5, lr}
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
1000138c:	6813      	ldr	r3, [r2, #0]
1000138e:	1c15      	adds	r5, r2, #0
10001390:	681c      	ldr	r4, [r3, #0]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
10001392:	68a3      	ldr	r3, [r4, #8]
10001394:	3307      	adds	r3, #7
10001396:	7fdb      	ldrb	r3, [r3, #31]
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
10001398:	2b00      	cmp	r3, #0
1000139a:	d105      	bne.n	100013a8 <i2c_master_error_detected_callback+0x20>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
1000139c:	68a3      	ldr	r3, [r4, #8]
1000139e:	3308      	adds	r3, #8
100013a0:	7fdb      	ldrb	r3, [r3, #31]
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
100013a2:	2b00      	cmp	r3, #0
100013a4:	d012      	beq.n	100013cc <i2c_master_error_detected_callback+0x44>
100013a6:	e008      	b.n	100013ba <i2c_master_error_detected_callback+0x32>

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
100013a8:	1c20      	adds	r0, r4, #0
100013aa:	f00a f85d 	bl	1000b468 <I2C_MASTER_AbortTransmit>
100013ae:	68a2      	ldr	r2, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
100013b0:	1dd3      	adds	r3, r2, #7
100013b2:	7fdb      	ldrb	r3, [r3, #31]
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
100013b4:	2b00      	cmp	r3, #0
100013b6:	d1fb      	bne.n	100013b0 <i2c_master_error_detected_callback+0x28>
100013b8:	e7f0      	b.n	1000139c <i2c_master_error_detected_callback+0x14>
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
100013ba:	1c20      	adds	r0, r4, #0
100013bc:	f00a f882 	bl	1000b4c4 <I2C_MASTER_AbortReceive>
100013c0:	68a2      	ldr	r2, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
100013c2:	1c13      	adds	r3, r2, #0
100013c4:	3308      	adds	r3, #8
100013c6:	7fdb      	ldrb	r3, [r3, #31]
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
100013c8:	2b00      	cmp	r3, #0
100013ca:	d1fa      	bne.n	100013c2 <i2c_master_error_detected_callback+0x3a>
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
100013cc:	6828      	ldr	r0, [r5, #0]
100013ce:	2101      	movs	r1, #1
100013d0:	f7ff ffbc 	bl	1000134c <invoke_upper_layer_callback>
}
100013d4:	bd38      	pop	{r3, r4, r5, pc}
100013d6:	46c0      	nop			; (mov r8, r8)
100013d8:	20002898 	.word	0x20002898

100013dc <i2c_master_nack_received_callback>:

void i2c_master_nack_received_callback(void)
{
100013dc:	b508      	push	{r3, lr}
    i2c_master_error_detected_callback();
100013de:	f7ff ffd3 	bl	10001388 <i2c_master_error_detected_callback>
}
100013e2:	bd08      	pop	{r3, pc}

100013e4 <i2c_master_arbitration_lost_callback>:

void i2c_master_arbitration_lost_callback(void)
{
100013e4:	b508      	push	{r3, lr}
    i2c_master_error_detected_callback();
100013e6:	f7ff ffcf 	bl	10001388 <i2c_master_error_detected_callback>
}
100013ea:	bd08      	pop	{r3, pc}

100013ec <pal_i2c_init>:
/// @endcond

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
100013ec:	b508      	push	{r3, lr}
	DAVE_STATUS_t status;

	status = (DAVE_STATUS_t)I2C_MASTER_Init(&i2c_master_0);
100013ee:	4802      	ldr	r0, [pc, #8]	; (100013f8 <pal_i2c_init+0xc>)
100013f0:	f009 fcf7 	bl	1000ade2 <I2C_MASTER_Init>

	return PAL_STATUS_SUCCESS;
}
100013f4:	2000      	movs	r0, #0
100013f6:	bd08      	pop	{r3, pc}
100013f8:	200026f8 	.word	0x200026f8

100013fc <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
    return PAL_STATUS_SUCCESS;
}
100013fc:	2000      	movs	r0, #0
100013fe:	4770      	bx	lr

10001400 <pal_i2c_write>:

pal_status_t pal_i2c_write(pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
10001400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001402:	1c05      	adds	r5, r0, #0
10001404:	1c0f      	adds	r7, r1, #0
10001406:	1c16      	adds	r6, r2, #0
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
10001408:	f7ff ff90 	bl	1000132c <pal_i2c_acquire.isra.2>
1000140c:	1e04      	subs	r4, r0, #0
1000140e:	d115      	bne.n	1000143c <pal_i2c_write+0x3c>
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
10001410:	4b0e      	ldr	r3, [pc, #56]	; (1000144c <pal_i2c_write+0x4c>)

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
10001412:	6828      	ldr	r0, [r5, #0]
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
10001414:	601d      	str	r5, [r3, #0]

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
10001416:	9600      	str	r6, [sp, #0]
10001418:	2601      	movs	r6, #1
                                                             (bool)TRUE,
                                                             (p_i2c_context->slave_address << 1),
1000141a:	792a      	ldrb	r2, [r5, #4]
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
1000141c:	9601      	str	r6, [sp, #4]
                                                             (bool)TRUE,
                                                             (p_i2c_context->slave_address << 1),
1000141e:	0052      	lsls	r2, r2, #1
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
10001420:	1c31      	adds	r1, r6, #0
10001422:	1c3b      	adds	r3, r7, #0
10001424:	f009 fd2d 	bl	1000ae82 <I2C_MASTER_Transmit>
10001428:	2800      	cmp	r0, #0
1000142a:	d00c      	beq.n	10001446 <pal_i2c_write+0x46>
                                                             (bool)TRUE))
        {
            //If I2C Master fails to invoke the write operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
1000142c:	68eb      	ldr	r3, [r5, #12]
1000142e:	68a8      	ldr	r0, [r5, #8]
10001430:	1c31      	adds	r1, r6, #0
10001432:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
10001434:	4b06      	ldr	r3, [pc, #24]	; (10001450 <pal_i2c_write+0x50>)
10001436:	601c      	str	r4, [r3, #0]
    return PAL_STATUS_SUCCESS;
}

pal_status_t pal_i2c_write(pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
    pal_status_t status = PAL_STATUS_FAILURE;
10001438:	1c34      	adds	r4, r6, #0
1000143a:	e004      	b.n	10001446 <pal_i2c_write+0x46>
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
1000143c:	68eb      	ldr	r3, [r5, #12]
1000143e:	68a8      	ldr	r0, [r5, #8]
10001440:	2102      	movs	r1, #2
10001442:	4798      	blx	r3
            status = PAL_STATUS_SUCCESS;
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
10001444:	2402      	movs	r4, #2
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    return status;
}
10001446:	1c20      	adds	r0, r4, #0
10001448:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000144a:	46c0      	nop			; (mov r8, r8)
1000144c:	20002898 	.word	0x20002898
10001450:	2000289c 	.word	0x2000289c

10001454 <pal_i2c_read>:

pal_status_t pal_i2c_read(pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
10001454:	b5f0      	push	{r4, r5, r6, r7, lr}
10001456:	b085      	sub	sp, #20
10001458:	1c05      	adds	r5, r0, #0
1000145a:	1c0f      	adds	r7, r1, #0
1000145c:	1c16      	adds	r6, r2, #0
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
1000145e:	f7ff ff65 	bl	1000132c <pal_i2c_acquire.isra.2>
10001462:	1e04      	subs	r4, r0, #0
10001464:	d116      	bne.n	10001494 <pal_i2c_read+0x40>
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
10001466:	4b0f      	ldr	r3, [pc, #60]	; (100014a4 <pal_i2c_read+0x50>)

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
10001468:	6828      	ldr	r0, [r5, #0]
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
1000146a:	601d      	str	r5, [r3, #0]

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
1000146c:	9600      	str	r6, [sp, #0]
1000146e:	2601      	movs	r6, #1
                                                            (bool)TRUE,
                                                            (p_i2c_context->slave_address << 1),
10001470:	792a      	ldrb	r2, [r5, #4]
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
10001472:	9601      	str	r6, [sp, #4]
                                                            (bool)TRUE,
                                                            (p_i2c_context->slave_address << 1),
10001474:	0052      	lsls	r2, r2, #1
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
10001476:	9602      	str	r6, [sp, #8]
10001478:	1c31      	adds	r1, r6, #0
1000147a:	1c3b      	adds	r3, r7, #0
1000147c:	f009 fe32 	bl	1000b0e4 <I2C_MASTER_Receive>
10001480:	2800      	cmp	r0, #0
10001482:	d00c      	beq.n	1000149e <pal_i2c_read+0x4a>
                                                            (bool)TRUE))
        {
            //If I2C Master fails to invoke the read operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
10001484:	68eb      	ldr	r3, [r5, #12]
10001486:	68a8      	ldr	r0, [r5, #8]
10001488:	1c31      	adds	r1, r6, #0
1000148a:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
1000148c:	4b06      	ldr	r3, [pc, #24]	; (100014a8 <pal_i2c_read+0x54>)
1000148e:	601c      	str	r4, [r3, #0]
    return status;
}

pal_status_t pal_i2c_read(pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
    pal_status_t status = PAL_STATUS_FAILURE;
10001490:	1c34      	adds	r4, r6, #0
10001492:	e004      	b.n	1000149e <pal_i2c_read+0x4a>
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
10001494:	68eb      	ldr	r3, [r5, #12]
10001496:	68a8      	ldr	r0, [r5, #8]
10001498:	2102      	movs	r1, #2
1000149a:	4798      	blx	r3
            status = PAL_STATUS_SUCCESS;
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
1000149c:	2402      	movs	r4, #2
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    return status;
}
1000149e:	1c20      	adds	r0, r4, #0
100014a0:	b005      	add	sp, #20
100014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100014a4:	20002898 	.word	0x20002898
100014a8:	2000289c 	.word	0x2000289c

100014ac <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
100014ac:	b570      	push	{r4, r5, r6, lr}
100014ae:	1c05      	adds	r5, r0, #0
100014b0:	1c0e      	adds	r6, r1, #0
    pal_status_t return_status = PAL_STATUS_FAILURE;
    optiga_lib_status_t event = PAL_I2C_EVENT_ERROR;

    //Acquire the I2C bus before setting the bitrate
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
100014b2:	f7ff ff3b 	bl	1000132c <pal_i2c_acquire.isra.2>
            event = PAL_I2C_EVENT_SUCCESS;
        }
    }
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
100014b6:	2402      	movs	r4, #2
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
    optiga_lib_status_t event = PAL_I2C_EVENT_ERROR;

    //Acquire the I2C bus before setting the bitrate
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
100014b8:	2800      	cmp	r0, #0
100014ba:	d110      	bne.n	100014de <pal_i2c_set_bitrate+0x32>
100014bc:	23c8      	movs	r3, #200	; 0xc8
        // set the I2C master to its maximum supported value.
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
100014be:	682a      	ldr	r2, [r5, #0]
100014c0:	1c31      	adds	r1, r6, #0
100014c2:	005b      	lsls	r3, r3, #1
100014c4:	429e      	cmp	r6, r3
100014c6:	d900      	bls.n	100014ca <pal_i2c_set_bitrate+0x1e>
100014c8:	1c19      	adds	r1, r3, #0
                                                            bitrate * 1000))
100014ca:	23fa      	movs	r3, #250	; 0xfa
100014cc:	b289      	uxth	r1, r1
100014ce:	009b      	lsls	r3, r3, #2
100014d0:	4359      	muls	r1, r3
        // set the I2C master to its maximum supported value.
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
100014d2:	6810      	ldr	r0, [r2, #0]
100014d4:	f008 fe7e 	bl	1000a1d4 <XMC_I2C_CH_SetBaudrate>
100014d8:	1e44      	subs	r4, r0, #1
100014da:	41a0      	sbcs	r0, r4
        {
            return_status = PAL_STATUS_FAILURE;
        }
        else
        {
            return_status = PAL_STATUS_SUCCESS;
100014dc:	b284      	uxth	r4, r0
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
        event = PAL_I2C_EVENT_BUSY;
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
100014de:	68eb      	ldr	r3, [r5, #12]
100014e0:	2b00      	cmp	r3, #0
100014e2:	d002      	beq.n	100014ea <pal_i2c_set_bitrate+0x3e>
    {
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((callback_handler_t)(p_i2c_context->upper_layer_event_handler))(p_i2c_context->p_upper_layer_ctx , event);
100014e4:	68a8      	ldr	r0, [r5, #8]
100014e6:	1c21      	adds	r1, r4, #0
100014e8:	4798      	blx	r3
    }
    //Release I2C Bus if its acquired 
    if (PAL_STATUS_I2C_BUSY != return_status)
100014ea:	2c02      	cmp	r4, #2
100014ec:	d002      	beq.n	100014f4 <pal_i2c_set_bitrate+0x48>
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
100014ee:	2200      	movs	r2, #0
100014f0:	4b01      	ldr	r3, [pc, #4]	; (100014f8 <pal_i2c_set_bitrate+0x4c>)
100014f2:	601a      	str	r2, [r3, #0]
    if (PAL_STATUS_I2C_BUSY != return_status)
    {
        pal_i2c_release((void * )p_i2c_context);
    }
    return return_status;
}
100014f4:	1c20      	adds	r0, r4, #0
100014f6:	bd70      	pop	{r4, r5, r6, pc}
100014f8:	2000289c 	.word	0x2000289c

100014fc <cunit_console_uart_end_of_receive_callback>:
	logger_console.logger_tx_flag = 0;
}

void cunit_console_uart_end_of_receive_callback(void)
{
	logger_console.logger_rx_flag = 0;
100014fc:	2200      	movs	r2, #0
100014fe:	4b01      	ldr	r3, [pc, #4]	; (10001504 <cunit_console_uart_end_of_receive_callback+0x8>)
10001500:	711a      	strb	r2, [r3, #4]
}
10001502:	4770      	bx	lr
10001504:	2000156c 	.word	0x2000156c

10001508 <pal_logger_init>:

/// @endcond


pal_status_t pal_logger_init(void * p_logger_context)
{
10001508:	b508      	push	{r3, lr}
    pal_logger_t * p_log_context = p_logger_context;
    DAVE_STATUS_t status;

    do
    {
    	status = (DAVE_STATUS_t)UART_Init(&cunit_logger);
1000150a:	4802      	ldr	r0, [pc, #8]	; (10001514 <pal_logger_init+0xc>)
1000150c:	f009 f9bc 	bl	1000a888 <UART_Init>
		return_status = PAL_STATUS_SUCCESS;
    }while(FALSE);

    return return_status;
}
10001510:	2000      	movs	r0, #0
10001512:	bd08      	pop	{r3, pc}
10001514:	20002660 	.word	0x20002660

10001518 <pal_logger_write>:
pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{

    int32_t return_status = PAL_STATUS_FAILURE;
    pal_logger_t * p_log_context = p_logger_context;
    volatile uint32_t time_out = 0;
10001518:	2300      	movs	r3, #0
    return return_status;
}


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{
1000151a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    int32_t return_status = PAL_STATUS_FAILURE;
    pal_logger_t * p_log_context = p_logger_context;
    volatile uint32_t time_out = 0;
    static uint32_t len = 0;
    len = log_data_length;
1000151c:	4c0e      	ldr	r4, [pc, #56]	; (10001558 <pal_logger_write+0x40>)

    UART_t  * UART;

    UART = p_log_context->logger_config_ptr;
1000151e:	6807      	ldr	r7, [r0, #0]
    return return_status;
}


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{
10001520:	1c0e      	adds	r6, r1, #0

    int32_t return_status = PAL_STATUS_FAILURE;
    pal_logger_t * p_log_context = p_logger_context;
    volatile uint32_t time_out = 0;
10001522:	9301      	str	r3, [sp, #4]
    static uint32_t len = 0;
    len = log_data_length;
10001524:	6022      	str	r2, [r4, #0]
10001526:	1c0d      	adds	r5, r1, #0
    UART = p_log_context->logger_config_ptr;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
10001528:	429f      	cmp	r7, r3
1000152a:	d012      	beq.n	10001552 <pal_logger_write+0x3a>

            return_status = PAL_STATUS_SUCCESS;
        }
        else
        {
			for (size_t i = 0; i < len; ++i)
1000152c:	6822      	ldr	r2, [r4, #0]
1000152e:	1bab      	subs	r3, r5, r6
10001530:	4293      	cmp	r3, r2
10001532:	d20e      	bcs.n	10001552 <pal_logger_write+0x3a>
			{
				time_out = 0;
10001534:	2300      	movs	r3, #0
				XMC_UART_CH_Transmit(UART->channel, *(const uint8_t *)p_log_data);
10001536:	7829      	ldrb	r1, [r5, #0]
10001538:	6838      	ldr	r0, [r7, #0]
        }
        else
        {
			for (size_t i = 0; i < len; ++i)
			{
				time_out = 0;
1000153a:	9301      	str	r3, [sp, #4]
				XMC_UART_CH_Transmit(UART->channel, *(const uint8_t *)p_log_data);
1000153c:	f008 fffe 	bl	1000a53c <XMC_UART_CH_Transmit>
				p_log_data++;
10001540:	3501      	adds	r5, #1
				while(time_out++ < 0x1f5);
10001542:	9b01      	ldr	r3, [sp, #4]
10001544:	1c5a      	adds	r2, r3, #1
10001546:	9201      	str	r2, [sp, #4]
10001548:	22fa      	movs	r2, #250	; 0xfa
1000154a:	0052      	lsls	r2, r2, #1
1000154c:	4293      	cmp	r3, r2
1000154e:	d9f8      	bls.n	10001542 <pal_logger_write+0x2a>
10001550:	e7ec      	b.n	1000152c <pal_logger_write+0x14>
			}
			return_status = PAL_STATUS_SUCCESS;
        }
    } while(0);
    time_out = 0;
10001552:	2000      	movs	r0, #0
10001554:	9001      	str	r0, [sp, #4]
    return ((pal_status_t)return_status);
}
10001556:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001558:	200028a4 	.word	0x200028a4

1000155c <pal_logger_read>:
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
1000155c:	6803      	ldr	r3, [r0, #0]
    time_out = 0;
    return ((pal_status_t)return_status);
}

pal_status_t pal_logger_read(void * p_logger_context, uint8_t * p_log_data, uint32_t log_data_length)
{
1000155e:	b510      	push	{r4, lr}
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
10001560:	2b00      	cmp	r3, #0
10001562:	d101      	bne.n	10001568 <pal_logger_read+0xc>
        {

            return_status = PAL_STATUS_SUCCESS;
10001564:	2000      	movs	r0, #0
10001566:	e00b      	b.n	10001580 <pal_logger_read+0x24>
10001568:	1c04      	adds	r4, r0, #0
        }
        else
        {
            p_log_context->logger_rx_flag = 1U;
1000156a:	2001      	movs	r0, #1
1000156c:	7120      	strb	r0, [r4, #4]
            return_status = (int32_t)UART_Receive(p_log_context->logger_config_ptr, p_log_data, log_data_length);
1000156e:	1c18      	adds	r0, r3, #0
10001570:	f009 f9c3 	bl	1000a8fa <UART_Receive>
            if (return_status != PAL_STATUS_SUCCESS)
10001574:	2800      	cmp	r0, #0
10001576:	d103      	bne.n	10001580 <pal_logger_read+0x24>
            {
                break;
            }
            while (p_log_context->logger_rx_flag)
10001578:	7923      	ldrb	r3, [r4, #4]
1000157a:	2b00      	cmp	r3, #0
1000157c:	d1fc      	bne.n	10001578 <pal_logger_read+0x1c>
1000157e:	e7f1      	b.n	10001564 <pal_logger_read+0x8>
            {
            }
            return_status = PAL_STATUS_SUCCESS;
        }
    } while(0);
    return ((pal_status_t)return_status);
10001580:	b280      	uxth	r0, r0
}
10001582:	bd10      	pop	{r4, pc}

10001584 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
10001584:	b508      	push	{r3, lr}
    pal_status_t return_status = PAL_STATUS_FAILURE;

    switch(datastore_id)
10001586:	2822      	cmp	r0, #34	; 0x22
10001588:	d008      	beq.n	1000159c <pal_os_datastore_write+0x18>
1000158a:	2833      	cmp	r0, #51	; 0x33
1000158c:	d00b      	beq.n	100015a6 <pal_os_datastore_write+0x22>
1000158e:	2811      	cmp	r0, #17
10001590:	d10b      	bne.n	100015aa <pal_os_datastore_write+0x26>

pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
10001592:	3810      	subs	r0, #16
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of updating
            // the platform binding shared secret during the runtime into NVM.
            // In current implementation, platform binding shared secret is
            // stored in RAM.
            if (length <= sizeof(optiga_platform_binding_shared_secret))
10001594:	2a40      	cmp	r2, #64	; 0x40
10001596:	d809      	bhi.n	100015ac <pal_os_datastore_write+0x28>
            {
                memcpy(optiga_platform_binding_shared_secret, p_buffer, length);
10001598:	4805      	ldr	r0, [pc, #20]	; (100015b0 <pal_os_datastore_write+0x2c>)
1000159a:	e000      	b.n	1000159e <pal_os_datastore_write+0x1a>
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the manage context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            memcpy(data_store_buffer,p_buffer,length);
1000159c:	4805      	ldr	r0, [pc, #20]	; (100015b4 <pal_os_datastore_write+0x30>)
1000159e:	f00b fa04 	bl	1000c9aa <memcpy>
            return_status = PAL_STATUS_SUCCESS;
100015a2:	2000      	movs	r0, #0
            break;
100015a4:	e002      	b.n	100015ac <pal_os_datastore_write+0x28>
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the application context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            memcpy(data_store_app_context_buffer,p_buffer,length);
100015a6:	4804      	ldr	r0, [pc, #16]	; (100015b8 <pal_os_datastore_write+0x34>)
100015a8:	e7f9      	b.n	1000159e <pal_os_datastore_write+0x1a>

pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
100015aa:	2001      	movs	r0, #1
        {
            break;
        }
    }
    return return_status;
}
100015ac:	bd08      	pop	{r3, pc}
100015ae:	46c0      	nop			; (mov r8, r8)
100015b0:	200028a8 	.word	0x200028a8
100015b4:	20002ff4 	.word	0x20002ff4
100015b8:	20003036 	.word	0x20003036

100015bc <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
100015bc:	b538      	push	{r3, r4, r5, lr}
100015be:	1c03      	adds	r3, r0, #0
100015c0:	1c14      	adds	r4, r2, #0
100015c2:	1c08      	adds	r0, r1, #0
    pal_status_t return_status = PAL_STATUS_FAILURE;

    switch(datastore_id)
100015c4:	2b22      	cmp	r3, #34	; 0x22
100015c6:	d00e      	beq.n	100015e6 <pal_os_datastore_read+0x2a>
100015c8:	2b33      	cmp	r3, #51	; 0x33
100015ca:	d012      	beq.n	100015f2 <pal_os_datastore_read+0x36>
100015cc:	2b11      	cmp	r3, #17
100015ce:	d113      	bne.n	100015f8 <pal_os_datastore_read+0x3c>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a const text segement 
            // else updating the share secret content is good enough.

            if (*p_buffer_length >= sizeof(optiga_platform_binding_shared_secret))
100015d0:	8812      	ldrh	r2, [r2, #0]

pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
100015d2:	3b10      	subs	r3, #16
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a const text segement 
            // else updating the share secret content is good enough.

            if (*p_buffer_length >= sizeof(optiga_platform_binding_shared_secret))
100015d4:	2a3f      	cmp	r2, #63	; 0x3f
100015d6:	d910      	bls.n	100015fa <pal_os_datastore_read+0x3e>
            {
                memcpy(p_buffer,optiga_platform_binding_shared_secret, 
100015d8:	2540      	movs	r5, #64	; 0x40
100015da:	4909      	ldr	r1, [pc, #36]	; (10001600 <pal_os_datastore_read+0x44>)
100015dc:	1c2a      	adds	r2, r5, #0
100015de:	f00b f9e4 	bl	1000c9aa <memcpy>
                       sizeof(optiga_platform_binding_shared_secret));
                *p_buffer_length = sizeof(optiga_platform_binding_shared_secret);
100015e2:	8025      	strh	r5, [r4, #0]
100015e4:	e003      	b.n	100015ee <pal_os_datastore_read+0x32>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            memcpy(p_buffer,data_store_buffer,*p_buffer_length);
100015e6:	8812      	ldrh	r2, [r2, #0]
100015e8:	4906      	ldr	r1, [pc, #24]	; (10001604 <pal_os_datastore_read+0x48>)
100015ea:	f00b f9de 	bl	1000c9aa <memcpy>
            return_status = PAL_STATUS_SUCCESS;
100015ee:	2300      	movs	r3, #0
            break;
100015f0:	e003      	b.n	100015fa <pal_os_datastore_read+0x3e>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            memcpy(p_buffer,data_store_app_context_buffer,*p_buffer_length);
100015f2:	8812      	ldrh	r2, [r2, #0]
100015f4:	4904      	ldr	r1, [pc, #16]	; (10001608 <pal_os_datastore_read+0x4c>)
100015f6:	e7f8      	b.n	100015ea <pal_os_datastore_read+0x2e>

pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
100015f8:	2301      	movs	r3, #1
            break;
        }
    }

    return return_status;
}
100015fa:	1c18      	adds	r0, r3, #0
100015fc:	bd38      	pop	{r3, r4, r5, pc}
100015fe:	46c0      	nop			; (mov r8, r8)
10001600:	200028a8 	.word	0x200028a8
10001604:	20002ff4 	.word	0x20002ff4
10001608:	20003036 	.word	0x20003036

1000160c <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
    //lint --e{714} suppress "The API pal_os_event_stop is not exposed in header file but used as extern in 
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
1000160c:	2300      	movs	r3, #0
1000160e:	7003      	strb	r3, [r0, #0]
}
10001610:	4770      	bx	lr
	...

10001614 <IRQ7_Handler>:
    }
    return (&pal_os_event_0);
}

void pal_os_event_trigger_registered_callback(void)
{
10001614:	b510      	push	{r4, lr}
    register_callback callback;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    TIMER_ClearEvent(&scheduler_timer);
10001616:	4c08      	ldr	r4, [pc, #32]	; (10001638 <IRQ7_Handler+0x24>)
10001618:	1c20      	adds	r0, r4, #0
1000161a:	f009 fa62 	bl	1000aae2 <TIMER_ClearEvent>
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_Stop(&scheduler_timer);
1000161e:	1c20      	adds	r0, r4, #0
10001620:	f009 fa4a 	bl	1000aab8 <TIMER_Stop>
    TIMER_Clear(&scheduler_timer);
10001624:	1c20      	adds	r0, r4, #0
10001626:	f009 fa65 	bl	1000aaf4 <TIMER_Clear>

    if (pal_os_event_0.callback_registered)
1000162a:	4a04      	ldr	r2, [pc, #16]	; (1000163c <IRQ7_Handler+0x28>)
1000162c:	6853      	ldr	r3, [r2, #4]
1000162e:	2b00      	cmp	r3, #0
10001630:	d001      	beq.n	10001636 <IRQ7_Handler+0x22>
    {
        callback = pal_os_event_0.callback_registered;
        callback((void * )pal_os_event_0.callback_ctx);
10001632:	6890      	ldr	r0, [r2, #8]
10001634:	4798      	blx	r3
    }
}
10001636:	bd10      	pop	{r4, pc}
10001638:	20002694 	.word	0x20002694
1000163c:	200028e8 	.word	0x200028e8

10001640 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
10001640:	b510      	push	{r4, lr}
    p_pal_os_event->callback_registered = callback;
    p_pal_os_event->callback_ctx = callback_args;
10001642:	6082      	str	r2, [r0, #8]

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
10001644:	2264      	movs	r2, #100	; 0x64
10001646:	435a      	muls	r2, r3
10001648:	4c04      	ldr	r4, [pc, #16]	; (1000165c <pal_os_event_register_callback_oneshot+0x1c>)
void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
1000164a:	6041      	str	r1, [r0, #4]
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
1000164c:	1c11      	adds	r1, r2, #0
1000164e:	1c20      	adds	r0, r4, #0
10001650:	f009 fa6a 	bl	1000ab28 <TIMER_SetTimeInterval>
    TIMER_Start(&scheduler_timer);
10001654:	1c20      	adds	r0, r4, #0
10001656:	f009 fa15 	bl	1000aa84 <TIMER_Start>
}
1000165a:	bd10      	pop	{r4, pc}
1000165c:	20002694 	.word	0x20002694

10001660 <pal_os_event_start>:
/// @cond hidden

static pal_os_event_t pal_os_event_0 = {0};

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
10001660:	b508      	push	{r3, lr}
    if (FALSE == p_pal_os_event->is_event_triggered)
10001662:	7803      	ldrb	r3, [r0, #0]
10001664:	2b00      	cmp	r3, #0
10001666:	d105      	bne.n	10001674 <pal_os_event_start+0x14>
    {
        p_pal_os_event->is_event_triggered = TRUE;
10001668:	3301      	adds	r3, #1
1000166a:	7003      	strb	r3, [r0, #0]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
1000166c:	23fa      	movs	r3, #250	; 0xfa
1000166e:	009b      	lsls	r3, r3, #2
10001670:	f7ff ffe6 	bl	10001640 <pal_os_event_register_callback_oneshot>
    }
}
10001674:	bd08      	pop	{r3, pc}
	...

10001678 <pal_os_event_create>:
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
}

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
10001678:	b510      	push	{r4, lr}
1000167a:	4c06      	ldr	r4, [pc, #24]	; (10001694 <pal_os_event_create+0x1c>)
    if (( NULL != callback )&&( NULL != callback_args ))
1000167c:	2800      	cmp	r0, #0
1000167e:	d006      	beq.n	1000168e <pal_os_event_create+0x16>
10001680:	2900      	cmp	r1, #0
10001682:	d004      	beq.n	1000168e <pal_os_event_create+0x16>
10001684:	1c0a      	adds	r2, r1, #0
10001686:	1c01      	adds	r1, r0, #0
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
10001688:	1c20      	adds	r0, r4, #0
1000168a:	f7ff ffe9 	bl	10001660 <pal_os_event_start>
    }
    return (&pal_os_event_0);
}
1000168e:	1c20      	adds	r0, r4, #0
10001690:	bd10      	pop	{r4, pc}
10001692:	46c0      	nop			; (mov r8, r8)
10001694:	200028e8 	.word	0x200028e8

10001698 <pal_os_lock_enter_critical_section>:
    }
}

void pal_os_lock_enter_critical_section()
{
}
10001698:	4770      	bx	lr

1000169a <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
}
1000169a:	4770      	bx	lr

1000169c <SysTick_Handler>:

static volatile uint32_t sys_tick_ms = 0;

void SysTick_Handler(void)
{
	sys_tick_ms++;
1000169c:	4a02      	ldr	r2, [pc, #8]	; (100016a8 <SysTick_Handler+0xc>)
1000169e:	6813      	ldr	r3, [r2, #0]
100016a0:	3301      	adds	r3, #1
100016a2:	6013      	str	r3, [r2, #0]
}
100016a4:	4770      	bx	lr
100016a6:	46c0      	nop			; (mov r8, r8)
100016a8:	20002900 	.word	0x20002900

100016ac <IRQ0_Handler>:
{
	return 	sys_tick_ms;
}

void delay_timer_isr(void)
{
100016ac:	b510      	push	{r4, lr}
    TIMER_ClearEvent(&tick_timer);
100016ae:	4c06      	ldr	r4, [pc, #24]	; (100016c8 <IRQ0_Handler+0x1c>)
100016b0:	1c20      	adds	r0, r4, #0
100016b2:	f009 fa16 	bl	1000aae2 <TIMER_ClearEvent>
    (void)TIMER_Clear(&tick_timer);
100016b6:	1c20      	adds	r0, r4, #0
100016b8:	f009 fa1c 	bl	1000aaf4 <TIMER_Clear>
    g_tick_count += 1U;
100016bc:	4a03      	ldr	r2, [pc, #12]	; (100016cc <IRQ0_Handler+0x20>)
100016be:	6813      	ldr	r3, [r2, #0]
100016c0:	3301      	adds	r3, #1
100016c2:	6013      	str	r3, [r2, #0]
}
100016c4:	bd10      	pop	{r4, pc}
100016c6:	46c0      	nop			; (mov r8, r8)
100016c8:	2000266c 	.word	0x2000266c
100016cc:	200028f8 	.word	0x200028f8

100016d0 <pal_os_timer_get_time_in_microseconds>:
{
    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // This API is needed to support optiga cmd scheduler. 
    static uint32_t count = 0;
    // The implementation must ensure that every invocation of this API returns a unique value.
    return (count++);
100016d0:	4b02      	ldr	r3, [pc, #8]	; (100016dc <pal_os_timer_get_time_in_microseconds+0xc>)
100016d2:	6818      	ldr	r0, [r3, #0]
100016d4:	1c42      	adds	r2, r0, #1
100016d6:	601a      	str	r2, [r3, #0]
}
100016d8:	4770      	bx	lr
100016da:	46c0      	nop			; (mov r8, r8)
100016dc:	200028fc 	.word	0x200028fc

100016e0 <pal_os_timer_get_time_in_milliseconds>:

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
100016e0:	4b01      	ldr	r3, [pc, #4]	; (100016e8 <pal_os_timer_get_time_in_milliseconds+0x8>)
100016e2:	6818      	ldr	r0, [r3, #0]
}
100016e4:	4770      	bx	lr
100016e6:	46c0      	nop			; (mov r8, r8)
100016e8:	200028f8 	.word	0x200028f8

100016ec <pal_os_timer_delay_in_milliseconds>:
    uint32_t current_time;
    uint32_t time_stamp_diff;

    start_time = pal_os_timer_get_time_in_milliseconds();
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
100016ec:	2300      	movs	r3, #0
    return (count++);
}

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
100016ee:	4a04      	ldr	r2, [pc, #16]	; (10001700 <pal_os_timer_delay_in_milliseconds+0x14>)
100016f0:	6811      	ldr	r1, [r2, #0]
    uint32_t time_stamp_diff;

    start_time = pal_os_timer_get_time_in_milliseconds();
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
    while (time_stamp_diff <= (uint32_t)milliseconds)
100016f2:	4283      	cmp	r3, r0
100016f4:	d802      	bhi.n	100016fc <pal_os_timer_delay_in_milliseconds+0x10>
    return (count++);
}

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
100016f6:	6813      	ldr	r3, [r2, #0]
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
    while (time_stamp_diff <= (uint32_t)milliseconds)
    {
        current_time = pal_os_timer_get_time_in_milliseconds();
        time_stamp_diff = current_time - start_time;
100016f8:	1a5b      	subs	r3, r3, r1
100016fa:	e7fa      	b.n	100016f2 <pal_os_timer_delay_in_milliseconds+0x6>
        if (start_time > current_time)
        {
            time_stamp_diff = (0xFFFFFFFF + (current_time - start_time)) + 0x01;
        }        
    }
}
100016fc:	4770      	bx	lr
100016fe:	46c0      	nop			; (mov r8, r8)
10001700:	200028f8 	.word	0x200028f8

10001704 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
10001704:	b510      	push	{r4, lr}
10001706:	1c04      	adds	r4, r0, #0
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;

    p_optiga_util->handler(p_optiga_util->caller_context, event);
10001708:	6980      	ldr	r0, [r0, #24]
1000170a:	69e3      	ldr	r3, [r4, #28]
1000170c:	4798      	blx	r3
    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
1000170e:	2300      	movs	r3, #0
10001710:	8423      	strh	r3, [r4, #32]
}
10001712:	bd10      	pop	{r4, pc}

10001714 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
10001714:	2800      	cmp	r0, #0
10001716:	d002      	beq.n	1000171e <optiga_util_reset_protection_level+0xa>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
10001718:	2300      	movs	r3, #0
1000171a:	3003      	adds	r0, #3
1000171c:	77c3      	strb	r3, [r0, #31]
    if (NULL != me)
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
    }
}
1000171e:	4770      	bx	lr

10001720 <optiga_util_write_data_wrapper>:
                                                             uint16_t optiga_oid,
                                                             uint8_t write_type,
                                                             uint16_t offset,
                                                             const uint8_t * p_buffer,
                                                             uint16_t length)
{
10001720:	b5f0      	push	{r4, r5, r6, r7, lr}
10001722:	b085      	sub	sp, #20
10001724:	9302      	str	r3, [sp, #8]
10001726:	ab0a      	add	r3, sp, #40	; 0x28
10001728:	cb40      	ldmia	r3!, {r6}
1000172a:	1c04      	adds	r4, r0, #0
1000172c:	881b      	ldrh	r3, [r3, #0]
1000172e:	9101      	str	r1, [sp, #4]
10001730:	1c15      	adds	r5, r2, #0
10001732:	9303      	str	r3, [sp, #12]
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
10001734:	2800      	cmp	r0, #0
10001736:	d039      	beq.n	100017ac <optiga_util_write_data_wrapper+0x8c>
10001738:	6947      	ldr	r7, [r0, #20]
1000173a:	2f00      	cmp	r7, #0
1000173c:	d036      	beq.n	100017ac <optiga_util_write_data_wrapper+0x8c>
1000173e:	2e00      	cmp	r6, #0
10001740:	d034      	beq.n	100017ac <optiga_util_write_data_wrapper+0x8c>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001742:	8c03      	ldrh	r3, [r0, #32]
10001744:	2b01      	cmp	r3, #1
10001746:	d033      	beq.n	100017b0 <optiga_util_write_data_wrapper+0x90>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001748:	2301      	movs	r3, #1
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
1000174a:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
1000174c:	8403      	strh	r3, [r0, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
1000174e:	2214      	movs	r2, #20
10001750:	f00b f934 	bl	1000c9bc <memset>
10001754:	2300      	movs	r3, #0

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
10001756:	2d02      	cmp	r5, #2
10001758:	d103      	bne.n	10001762 <optiga_util_write_data_wrapper+0x42>
        {
            p_params->count = p_buffer[0];
1000175a:	7832      	ldrb	r2, [r6, #0]
            p_params->buffer = NULL;
1000175c:	60a3      	str	r3, [r4, #8]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
1000175e:	73a2      	strb	r2, [r4, #14]
10001760:	e001      	b.n	10001766 <optiga_util_write_data_wrapper+0x46>
            p_params->buffer = NULL;
        }
        else
        {
            p_params->count = 0;
10001762:	73a3      	strb	r3, [r4, #14]
            p_params->buffer = p_buffer;
10001764:	60a6      	str	r6, [r4, #8]
        }
        p_params->oid = optiga_oid;
10001766:	466b      	mov	r3, sp
10001768:	889b      	ldrh	r3, [r3, #4]
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
1000176a:	2600      	movs	r6, #0
        else
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
1000176c:	8023      	strh	r3, [r4, #0]
        p_params->offset = offset;
1000176e:	466b      	mov	r3, sp
10001770:	891b      	ldrh	r3, [r3, #8]
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;
10001772:	7365      	strb	r5, [r4, #13]
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
10001774:	8063      	strh	r3, [r4, #2]
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
10001776:	466b      	mov	r3, sp
10001778:	899b      	ldrh	r3, [r3, #12]
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
1000177a:	7326      	strb	r6, [r4, #12]
        p_params->size = length;
1000177c:	80a3      	strh	r3, [r4, #4]
        p_params->written_size = 0;
1000177e:	80e6      	strh	r6, [r4, #6]
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001780:	1ce3      	adds	r3, r4, #3
10001782:	7fd9      	ldrb	r1, [r3, #31]
10001784:	1c38      	adds	r0, r7, #0
10001786:	1c32      	adds	r2, r6, #0
10001788:	f004 fe32 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
1000178c:	1d23      	adds	r3, r4, #4
1000178e:	7fd9      	ldrb	r1, [r3, #31]
10001790:	6960      	ldr	r0, [r4, #20]
10001792:	2201      	movs	r2, #1
10001794:	f004 fe2c 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, write_type, (optiga_set_data_object_params_t *)p_params);
10001798:	1c29      	adds	r1, r5, #0
1000179a:	6960      	ldr	r0, [r4, #20]
1000179c:	1c22      	adds	r2, r4, #0
1000179e:	f004 ff11 	bl	100065c4 <optiga_cmd_set_data_object>
100017a2:	1e05      	subs	r5, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_value)
100017a4:	42b5      	cmp	r5, r6
100017a6:	d004      	beq.n	100017b2 <optiga_util_write_data_wrapper+0x92>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
100017a8:	8426      	strh	r6, [r4, #32]
100017aa:	e002      	b.n	100017b2 <optiga_util_write_data_wrapper+0x92>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
100017ac:	4d04      	ldr	r5, [pc, #16]	; (100017c0 <optiga_util_write_data_wrapper+0xa0>)
100017ae:	e000      	b.n	100017b2 <optiga_util_write_data_wrapper+0x92>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
100017b0:	4d04      	ldr	r5, [pc, #16]	; (100017c4 <optiga_util_write_data_wrapper+0xa4>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
100017b2:	1c20      	adds	r0, r4, #0
100017b4:	f7ff ffae 	bl	10001714 <optiga_util_reset_protection_level>

    return (return_value);
}
100017b8:	1c28      	adds	r0, r5, #0
100017ba:	b005      	add	sp, #20
100017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100017be:	46c0      	nop			; (mov r8, r8)
100017c0:	00000303 	.word	0x00000303
100017c4:	00000305 	.word	0x00000305

100017c8 <optiga_util_set_comms_params>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
    switch (parameter_type)
100017c8:	2901      	cmp	r1, #1
100017ca:	d003      	beq.n	100017d4 <optiga_util_set_comms_params+0xc>
100017cc:	2902      	cmp	r1, #2
100017ce:	d103      	bne.n	100017d8 <optiga_util_set_comms_params+0x10>
            me->protection_level = value;
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
100017d0:	3004      	adds	r0, #4
100017d2:	e000      	b.n	100017d6 <optiga_util_set_comms_params+0xe>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
100017d4:	3003      	adds	r0, #3
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
100017d6:	77c2      	strb	r2, [r0, #31]
        default:
        {
            break;
        }
    }
}
100017d8:	4770      	bx	lr
	...

100017dc <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
100017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_util_t * me = NULL;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
100017de:	2900      	cmp	r1, #0
100017e0:	d101      	bne.n	100017e6 <optiga_util_create+0xa>

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
    optiga_util_t * me = NULL;
100017e2:	2400      	movs	r4, #0
100017e4:	e01d      	b.n	10001822 <optiga_util_create+0x46>
100017e6:	1c0f      	adds	r7, r1, #0
100017e8:	1c05      	adds	r5, r0, #0
        if (NULL == handler)
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
100017ea:	2124      	movs	r1, #36	; 0x24
100017ec:	2001      	movs	r0, #1
100017ee:	1c16      	adds	r6, r2, #0
100017f0:	f00b f88a 	bl	1000c908 <calloc>
100017f4:	1e04      	subs	r4, r0, #0
        if (NULL == me)
100017f6:	d0f4      	beq.n	100017e2 <optiga_util_create+0x6>
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
100017f8:	2200      	movs	r2, #0
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
100017fa:	2101      	movs	r1, #1
100017fc:	1d03      	adds	r3, r0, #4
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
100017fe:	8402      	strh	r2, [r0, #32]
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
10001800:	61c7      	str	r7, [r0, #28]
        me->caller_context = caller_context;
10001802:	6186      	str	r6, [r0, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
10001804:	77d9      	strb	r1, [r3, #31]
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
10001806:	1cc3      	adds	r3, r0, #3
10001808:	77da      	strb	r2, [r3, #31]
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
1000180a:	1c28      	adds	r0, r5, #0
1000180c:	4906      	ldr	r1, [pc, #24]	; (10001828 <optiga_util_create+0x4c>)
1000180e:	1c22      	adds	r2, r4, #0
10001810:	f004 fdfa 	bl	10006408 <optiga_cmd_create>
10001814:	1e05      	subs	r5, r0, #0
10001816:	6160      	str	r0, [r4, #20]
        if (NULL == me->my_cmd)
10001818:	d103      	bne.n	10001822 <optiga_util_create+0x46>
        {
            pal_os_free(me);
1000181a:	1c20      	adds	r0, r4, #0
1000181c:	f00b f8ac 	bl	1000c978 <free>
            me = NULL;
10001820:	1c2c      	adds	r4, r5, #0
        }
    } while (FALSE);

    return (me);
}
10001822:	1c20      	adds	r0, r4, #0
10001824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001826:	46c0      	nop			; (mov r8, r8)
10001828:	10001705 	.word	0x10001705

1000182c <optiga_util_destroy>:

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
1000182c:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
1000182e:	2800      	cmp	r0, #0
10001830:	d00b      	beq.n	1000184a <optiga_util_destroy+0x1e>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001832:	8c03      	ldrh	r3, [r0, #32]
10001834:	2b01      	cmp	r3, #1
10001836:	d00a      	beq.n	1000184e <optiga_util_destroy+0x22>
10001838:	1c04      	adds	r4, r0, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
1000183a:	6940      	ldr	r0, [r0, #20]
1000183c:	f004 fe3e 	bl	100064bc <optiga_cmd_destroy>
10001840:	1c05      	adds	r5, r0, #0
        pal_os_free(me);
10001842:	1c20      	adds	r0, r4, #0
10001844:	f00b f898 	bl	1000c978 <free>
10001848:	e002      	b.n	10001850 <optiga_util_destroy+0x24>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
1000184a:	4d02      	ldr	r5, [pc, #8]	; (10001854 <optiga_util_destroy+0x28>)
1000184c:	e000      	b.n	10001850 <optiga_util_destroy+0x24>
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
1000184e:	4d02      	ldr	r5, [pc, #8]	; (10001858 <optiga_util_destroy+0x2c>)
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);
    } while (FALSE);
    return (return_value);
}
10001850:	1c28      	adds	r0, r5, #0
10001852:	bd38      	pop	{r3, r4, r5, pc}
10001854:	00000303 	.word	0x00000303
10001858:	00000305 	.word	0x00000305

1000185c <optiga_util_open_application>:

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
1000185c:	b570      	push	{r4, r5, r6, lr}
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
1000185e:	4a1b      	ldr	r2, [pc, #108]	; (100018cc <optiga_util_open_application+0x70>)
    return (return_value);
}

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
10001860:	1c04      	adds	r4, r0, #0
10001862:	1c0d      	adds	r5, r1, #0
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001864:	481a      	ldr	r0, [pc, #104]	; (100018d0 <optiga_util_open_application+0x74>)
10001866:	491b      	ldr	r1, [pc, #108]	; (100018d4 <optiga_util_open_application+0x78>)
10001868:	f002 ff66 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
1000186c:	2c00      	cmp	r4, #0
1000186e:	d024      	beq.n	100018ba <optiga_util_open_application+0x5e>
10001870:	6960      	ldr	r0, [r4, #20]
10001872:	2800      	cmp	r0, #0
10001874:	d021      	beq.n	100018ba <optiga_util_open_application+0x5e>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001876:	8c23      	ldrh	r3, [r4, #32]
10001878:	2b01      	cmp	r3, #1
1000187a:	d020      	beq.n	100018be <optiga_util_open_application+0x62>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
1000187c:	2601      	movs	r6, #1
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
1000187e:	1ce3      	adds	r3, r4, #3
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001880:	8426      	strh	r6, [r4, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001882:	7fd9      	ldrb	r1, [r3, #31]
10001884:	2200      	movs	r2, #0
10001886:	f004 fdb3 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
1000188a:	1d23      	adds	r3, r4, #4
1000188c:	7fd9      	ldrb	r1, [r3, #31]
1000188e:	6960      	ldr	r0, [r4, #20]
10001890:	1c32      	adds	r2, r6, #0
10001892:	f004 fdad 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
10001896:	6960      	ldr	r0, [r4, #20]
10001898:	2133      	movs	r1, #51	; 0x33

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
1000189a:	2d00      	cmp	r5, #0
1000189c:	d000      	beq.n	100018a0 <optiga_util_open_application+0x44>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
1000189e:	2111      	movs	r1, #17
100018a0:	2202      	movs	r2, #2
100018a2:	f004 fda5 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
100018a6:	1c29      	adds	r1, r5, #0
100018a8:	6960      	ldr	r0, [r4, #20]
100018aa:	2200      	movs	r2, #0
100018ac:	f004 fe2c 	bl	10006508 <optiga_cmd_open_application>
100018b0:	1e05      	subs	r5, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_value)
100018b2:	d005      	beq.n	100018c0 <optiga_util_open_application+0x64>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
100018b4:	2300      	movs	r3, #0
100018b6:	8423      	strh	r3, [r4, #32]
100018b8:	e002      	b.n	100018c0 <optiga_util_open_application+0x64>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
100018ba:	4d07      	ldr	r5, [pc, #28]	; (100018d8 <optiga_util_open_application+0x7c>)
100018bc:	e000      	b.n	100018c0 <optiga_util_open_application+0x64>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
100018be:	4d07      	ldr	r5, [pc, #28]	; (100018dc <optiga_util_open_application+0x80>)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
100018c0:	1c20      	adds	r0, r4, #0
100018c2:	f7ff ff27 	bl	10001714 <optiga_util_reset_protection_level>

    return (return_value);
}
100018c6:	1c28      	adds	r0, r5, #0
100018c8:	bd70      	pop	{r4, r5, r6, pc}
100018ca:	46c0      	nop			; (mov r8, r8)
100018cc:	1000d2dc 	.word	0x1000d2dc
100018d0:	1000d34f 	.word	0x1000d34f
100018d4:	1000d2c7 	.word	0x1000d2c7
100018d8:	00000303 	.word	0x00000303
100018dc:	00000305 	.word	0x00000305

100018e0 <optiga_util_close_application>:

optiga_lib_status_t optiga_util_close_application(optiga_util_t * me,
                                                  bool_t perform_hibernate)
{
100018e0:	b570      	push	{r4, r5, r6, lr}
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
100018e2:	4a1b      	ldr	r2, [pc, #108]	; (10001950 <optiga_util_close_application+0x70>)
    return (return_value);
}

optiga_lib_status_t optiga_util_close_application(optiga_util_t * me,
                                                  bool_t perform_hibernate)
{
100018e4:	1c04      	adds	r4, r0, #0
100018e6:	1c0d      	adds	r5, r1, #0
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
100018e8:	481a      	ldr	r0, [pc, #104]	; (10001954 <optiga_util_close_application+0x74>)
100018ea:	491b      	ldr	r1, [pc, #108]	; (10001958 <optiga_util_close_application+0x78>)
100018ec:	f002 ff24 	bl	10004738 <optiga_lib_print_message>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
100018f0:	2c00      	cmp	r4, #0
100018f2:	d024      	beq.n	1000193e <optiga_util_close_application+0x5e>
100018f4:	6960      	ldr	r0, [r4, #20]
100018f6:	2800      	cmp	r0, #0
100018f8:	d021      	beq.n	1000193e <optiga_util_close_application+0x5e>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
100018fa:	8c23      	ldrh	r3, [r4, #32]
100018fc:	2b01      	cmp	r3, #1
100018fe:	d020      	beq.n	10001942 <optiga_util_close_application+0x62>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001900:	2601      	movs	r6, #1
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001902:	1ce3      	adds	r3, r4, #3
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001904:	8426      	strh	r6, [r4, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001906:	7fd9      	ldrb	r1, [r3, #31]
10001908:	2200      	movs	r2, #0
1000190a:	f004 fd71 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
1000190e:	1d23      	adds	r3, r4, #4
10001910:	7fd9      	ldrb	r1, [r3, #31]
10001912:	6960      	ldr	r0, [r4, #20]
10001914:	1c32      	adds	r2, r6, #0
10001916:	f004 fd6b 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_hibernate)
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
1000191a:	6960      	ldr	r0, [r4, #20]
1000191c:	2133      	movs	r1, #51	; 0x33
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_hibernate)
1000191e:	2d00      	cmp	r5, #0
10001920:	d000      	beq.n	10001924 <optiga_util_close_application+0x44>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
        }
        else
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_SAVE);
10001922:	2122      	movs	r1, #34	; 0x22
10001924:	2202      	movs	r2, #2
10001926:	f004 fd63 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_close_application(me->my_cmd, perform_hibernate, NULL);
1000192a:	1c29      	adds	r1, r5, #0
1000192c:	6960      	ldr	r0, [r4, #20]
1000192e:	2200      	movs	r2, #0
10001930:	f004 fe08 	bl	10006544 <optiga_cmd_close_application>
10001934:	1e05      	subs	r5, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_value)
10001936:	d005      	beq.n	10001944 <optiga_util_close_application+0x64>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001938:	2300      	movs	r3, #0
1000193a:	8423      	strh	r3, [r4, #32]
1000193c:	e002      	b.n	10001944 <optiga_util_close_application+0x64>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
1000193e:	4d07      	ldr	r5, [pc, #28]	; (1000195c <optiga_util_close_application+0x7c>)
10001940:	e000      	b.n	10001944 <optiga_util_close_application+0x64>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001942:	4d07      	ldr	r5, [pc, #28]	; (10001960 <optiga_util_close_application+0x80>)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001944:	1c20      	adds	r0, r4, #0
10001946:	f7ff fee5 	bl	10001714 <optiga_util_reset_protection_level>

    return (return_value);
}
1000194a:	1c28      	adds	r0, r5, #0
1000194c:	bd70      	pop	{r4, r5, r6, pc}
1000194e:	46c0      	nop			; (mov r8, r8)
10001950:	1000d2dc 	.word	0x1000d2dc
10001954:	1000d230 	.word	0x1000d230
10001958:	1000d2c7 	.word	0x1000d2c7
1000195c:	00000303 	.word	0x00000303
10001960:	00000305 	.word	0x00000305

10001964 <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
10001964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001966:	1c04      	adds	r4, r0, #0
10001968:	1c0d      	adds	r5, r1, #0
1000196a:	9201      	str	r2, [sp, #4]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
1000196c:	4823      	ldr	r0, [pc, #140]	; (100019fc <optiga_util_read_data+0x98>)
1000196e:	4924      	ldr	r1, [pc, #144]	; (10001a00 <optiga_util_read_data+0x9c>)
10001970:	4a24      	ldr	r2, [pc, #144]	; (10001a04 <optiga_util_read_data+0xa0>)
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
10001972:	9300      	str	r3, [sp, #0]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001974:	f002 fee0 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
10001978:	2c00      	cmp	r4, #0
1000197a:	d037      	beq.n	100019ec <optiga_util_read_data+0x88>
1000197c:	6967      	ldr	r7, [r4, #20]
1000197e:	2f00      	cmp	r7, #0
10001980:	d034      	beq.n	100019ec <optiga_util_read_data+0x88>
10001982:	9b00      	ldr	r3, [sp, #0]
10001984:	2b00      	cmp	r3, #0
10001986:	d031      	beq.n	100019ec <optiga_util_read_data+0x88>
            (NULL == buffer) || (NULL == length))
10001988:	9b08      	ldr	r3, [sp, #32]
1000198a:	2b00      	cmp	r3, #0
1000198c:	d02e      	beq.n	100019ec <optiga_util_read_data+0x88>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
1000198e:	8c23      	ldrh	r3, [r4, #32]
10001990:	2b01      	cmp	r3, #1
10001992:	d02d      	beq.n	100019f0 <optiga_util_read_data+0x8c>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001994:	2601      	movs	r6, #1
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001996:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001998:	8426      	strh	r6, [r4, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
1000199a:	2214      	movs	r2, #20
1000199c:	1c20      	adds	r0, r4, #0
1000199e:	f00b f80d 	bl	1000c9bc <memset>

        p_params->oid = optiga_oid;
        p_params->offset = offset;
100019a2:	466b      	mov	r3, sp

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
100019a4:	8025      	strh	r5, [r4, #0]
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
100019a6:	2500      	movs	r5, #0
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = offset;
100019a8:	889b      	ldrh	r3, [r3, #4]
        // set option to read data
        p_params->data_or_metadata = 0;
100019aa:	72a5      	strb	r5, [r4, #10]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = offset;
100019ac:	8063      	strh	r3, [r4, #2]
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
100019ae:	9b00      	ldr	r3, [sp, #0]
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100019b0:	1c38      	adds	r0, r7, #0

        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
100019b2:	6123      	str	r3, [r4, #16]
        p_params->bytes_to_read = *length;
100019b4:	9b08      	ldr	r3, [sp, #32]
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100019b6:	1c2a      	adds	r2, r5, #0
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
100019b8:	881b      	ldrh	r3, [r3, #0]
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
100019ba:	80e5      	strh	r5, [r4, #6]
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
100019bc:	80a3      	strh	r3, [r4, #4]
        p_params->ref_bytes_to_read = length;
100019be:	9b08      	ldr	r3, [sp, #32]
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;
100019c0:	8125      	strh	r5, [r4, #8]
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
100019c2:	60e3      	str	r3, [r4, #12]
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100019c4:	1ce3      	adds	r3, r4, #3
100019c6:	7fd9      	ldrb	r1, [r3, #31]
100019c8:	f004 fd12 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
100019cc:	1d23      	adds	r3, r4, #4
100019ce:	7fd9      	ldrb	r1, [r3, #31]
100019d0:	1c32      	adds	r2, r6, #0
100019d2:	6960      	ldr	r0, [r4, #20]
100019d4:	f004 fd0c 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
100019d8:	7aa1      	ldrb	r1, [r4, #10]
100019da:	6960      	ldr	r0, [r4, #20]
100019dc:	1c22      	adds	r2, r4, #0
100019de:	f004 fdd1 	bl	10006584 <optiga_cmd_get_data_object>
100019e2:	1e06      	subs	r6, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_value)
100019e4:	42ae      	cmp	r6, r5
100019e6:	d004      	beq.n	100019f2 <optiga_util_read_data+0x8e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
100019e8:	8425      	strh	r5, [r4, #32]
100019ea:	e002      	b.n	100019f2 <optiga_util_read_data+0x8e>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
100019ec:	4e06      	ldr	r6, [pc, #24]	; (10001a08 <optiga_util_read_data+0xa4>)
100019ee:	e000      	b.n	100019f2 <optiga_util_read_data+0x8e>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
100019f0:	4e06      	ldr	r6, [pc, #24]	; (10001a0c <optiga_util_read_data+0xa8>)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
100019f2:	1c20      	adds	r0, r4, #0
100019f4:	f7ff fe8e 	bl	10001714 <optiga_util_reset_protection_level>

    return (return_value);
}
100019f8:	1c30      	adds	r0, r6, #0
100019fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100019fc:	1000d271 	.word	0x1000d271
10001a00:	1000d2c7 	.word	0x1000d2c7
10001a04:	1000d2dc 	.word	0x1000d2dc
10001a08:	00000303 	.word	0x00000303
10001a0c:	00000305 	.word	0x00000305

10001a10 <optiga_util_read_metadata>:

optiga_lib_status_t optiga_util_read_metadata(optiga_util_t * me,
                                              uint16_t optiga_oid,
                                              uint8_t * buffer,
                                              uint16_t * length)
{
10001a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001a12:	1c04      	adds	r4, r0, #0
10001a14:	1c0d      	adds	r5, r1, #0
10001a16:	9201      	str	r2, [sp, #4]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001a18:	4821      	ldr	r0, [pc, #132]	; (10001aa0 <optiga_util_read_metadata+0x90>)
10001a1a:	4922      	ldr	r1, [pc, #136]	; (10001aa4 <optiga_util_read_metadata+0x94>)
10001a1c:	4a22      	ldr	r2, [pc, #136]	; (10001aa8 <optiga_util_read_metadata+0x98>)

optiga_lib_status_t optiga_util_read_metadata(optiga_util_t * me,
                                              uint16_t optiga_oid,
                                              uint8_t * buffer,
                                              uint16_t * length)
{
10001a1e:	1c1f      	adds	r7, r3, #0
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001a20:	f002 fe8a 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
10001a24:	2c00      	cmp	r4, #0
10001a26:	d033      	beq.n	10001a90 <optiga_util_read_metadata+0x80>
10001a28:	6963      	ldr	r3, [r4, #20]
10001a2a:	9300      	str	r3, [sp, #0]
10001a2c:	2b00      	cmp	r3, #0
10001a2e:	d02f      	beq.n	10001a90 <optiga_util_read_metadata+0x80>
10001a30:	9b01      	ldr	r3, [sp, #4]
10001a32:	2b00      	cmp	r3, #0
10001a34:	d02c      	beq.n	10001a90 <optiga_util_read_metadata+0x80>
            (NULL == buffer) || (NULL == length))
10001a36:	2f00      	cmp	r7, #0
10001a38:	d02a      	beq.n	10001a90 <optiga_util_read_metadata+0x80>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001a3a:	8c23      	ldrh	r3, [r4, #32]
10001a3c:	2b01      	cmp	r3, #1
10001a3e:	d029      	beq.n	10001a94 <optiga_util_read_metadata+0x84>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001a40:	2601      	movs	r6, #1
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001a42:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001a44:	8426      	strh	r6, [r4, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001a46:	2214      	movs	r2, #20
10001a48:	1c20      	adds	r0, r4, #0
10001a4a:	f00a ffb7 	bl	1000c9bc <memset>

        p_params->oid = optiga_oid;
10001a4e:	8025      	strh	r5, [r4, #0]
        p_params->offset = 0;
10001a50:	2500      	movs	r5, #0
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
10001a52:	9b01      	ldr	r3, [sp, #4]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
10001a54:	72a6      	strb	r6, [r4, #10]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
10001a56:	8065      	strh	r5, [r4, #2]
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
10001a58:	6123      	str	r3, [r4, #16]
        p_params->bytes_to_read = *length;
10001a5a:	883b      	ldrh	r3, [r7, #0]
        p_params->ref_bytes_to_read = length;
10001a5c:	60e7      	str	r7, [r4, #12]
        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
10001a5e:	80a3      	strh	r3, [r4, #4]
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
10001a60:	80e5      	strh	r5, [r4, #6]
        p_params->last_read_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001a62:	1ce3      	adds	r3, r4, #3
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;
10001a64:	8125      	strh	r5, [r4, #8]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001a66:	7fd9      	ldrb	r1, [r3, #31]
10001a68:	9800      	ldr	r0, [sp, #0]
10001a6a:	1c2a      	adds	r2, r5, #0
10001a6c:	f004 fcc0 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001a70:	1d23      	adds	r3, r4, #4
10001a72:	7fd9      	ldrb	r1, [r3, #31]
10001a74:	1c32      	adds	r2, r6, #0
10001a76:	6960      	ldr	r0, [r4, #20]
10001a78:	f004 fcba 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata,
10001a7c:	7aa1      	ldrb	r1, [r4, #10]
10001a7e:	6960      	ldr	r0, [r4, #20]
10001a80:	1c22      	adds	r2, r4, #0
10001a82:	f004 fd7f 	bl	10006584 <optiga_cmd_get_data_object>
10001a86:	1e06      	subs	r6, r0, #0
                                                  (optiga_get_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10001a88:	42ae      	cmp	r6, r5
10001a8a:	d004      	beq.n	10001a96 <optiga_util_read_metadata+0x86>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001a8c:	8425      	strh	r5, [r4, #32]
10001a8e:	e002      	b.n	10001a96 <optiga_util_read_metadata+0x86>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001a90:	4e06      	ldr	r6, [pc, #24]	; (10001aac <optiga_util_read_metadata+0x9c>)
10001a92:	e000      	b.n	10001a96 <optiga_util_read_metadata+0x86>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001a94:	4e06      	ldr	r6, [pc, #24]	; (10001ab0 <optiga_util_read_metadata+0xa0>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001a96:	1c20      	adds	r0, r4, #0
10001a98:	f7ff fe3c 	bl	10001714 <optiga_util_reset_protection_level>

    return (return_value);
}
10001a9c:	1c30      	adds	r0, r6, #0
10001a9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001aa0:	1000d2ad 	.word	0x1000d2ad
10001aa4:	1000d2c7 	.word	0x1000d2c7
10001aa8:	1000d2dc 	.word	0x1000d2dc
10001aac:	00000303 	.word	0x00000303
10001ab0:	00000305 	.word	0x00000305

10001ab4 <optiga_util_write_data>:
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
10001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
10001ab6:	1c14      	adds	r4, r2, #0
10001ab8:	b085      	sub	sp, #20
10001aba:	9302      	str	r3, [sp, #8]
10001abc:	ab0a      	add	r3, sp, #40	; 0x28
10001abe:	cb80      	ldmia	r3!, {r7}
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001ac0:	4a0c      	ldr	r2, [pc, #48]	; (10001af4 <optiga_util_write_data+0x40>)
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
10001ac2:	881b      	ldrh	r3, [r3, #0]
10001ac4:	1c06      	adds	r6, r0, #0
10001ac6:	1c0d      	adds	r5, r1, #0
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001ac8:	480b      	ldr	r0, [pc, #44]	; (10001af8 <optiga_util_write_data+0x44>)
10001aca:	490c      	ldr	r1, [pc, #48]	; (10001afc <optiga_util_write_data+0x48>)
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
10001acc:	9303      	str	r3, [sp, #12]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001ace:	f002 fe33 	bl	10004738 <optiga_lib_print_message>
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
10001ad2:	2340      	movs	r3, #64	; 0x40
10001ad4:	1c22      	adds	r2, r4, #0
10001ad6:	439a      	bics	r2, r3
10001ad8:	d109      	bne.n	10001aee <optiga_util_write_data+0x3a>
        {
            break;
        }
        return_value =  optiga_util_write_data_wrapper(me,
10001ada:	9b03      	ldr	r3, [sp, #12]
10001adc:	9700      	str	r7, [sp, #0]
10001ade:	9301      	str	r3, [sp, #4]
10001ae0:	1c30      	adds	r0, r6, #0
10001ae2:	1c29      	adds	r1, r5, #0
10001ae4:	1c22      	adds	r2, r4, #0
10001ae6:	9b02      	ldr	r3, [sp, #8]
10001ae8:	f7ff fe1a 	bl	10001720 <optiga_util_write_data_wrapper>
10001aec:	e000      	b.n	10001af0 <optiga_util_write_data+0x3c>
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001aee:	4804      	ldr	r0, [pc, #16]	; (10001b00 <optiga_util_write_data+0x4c>)
                                                       offset,
                                                       buffer,
                                                       length);
    } while (FALSE);
    return (return_value);
}
10001af0:	b005      	add	sp, #20
10001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001af4:	1000d2dc 	.word	0x1000d2dc
10001af8:	1000d304 	.word	0x1000d304
10001afc:	1000d2c7 	.word	0x1000d2c7
10001b00:	00000303 	.word	0x00000303

10001b04 <optiga_util_write_metadata>:

optiga_lib_status_t optiga_util_write_metadata(optiga_util_t * me,
                                               uint16_t optiga_oid,
                                               const uint8_t * buffer,
                                               uint8_t length)
{
10001b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001b06:	1c04      	adds	r4, r0, #0
10001b08:	1c0d      	adds	r5, r1, #0
10001b0a:	1c17      	adds	r7, r2, #0
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001b0c:	481f      	ldr	r0, [pc, #124]	; (10001b8c <optiga_util_write_metadata+0x88>)
10001b0e:	4920      	ldr	r1, [pc, #128]	; (10001b90 <optiga_util_write_metadata+0x8c>)
10001b10:	4a20      	ldr	r2, [pc, #128]	; (10001b94 <optiga_util_write_metadata+0x90>)

optiga_lib_status_t optiga_util_write_metadata(optiga_util_t * me,
                                               uint16_t optiga_oid,
                                               const uint8_t * buffer,
                                               uint8_t length)
{
10001b12:	9301      	str	r3, [sp, #4]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001b14:	f002 fe10 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
10001b18:	2c00      	cmp	r4, #0
10001b1a:	d02f      	beq.n	10001b7c <optiga_util_write_metadata+0x78>
10001b1c:	6963      	ldr	r3, [r4, #20]
10001b1e:	9300      	str	r3, [sp, #0]
10001b20:	2b00      	cmp	r3, #0
10001b22:	d02b      	beq.n	10001b7c <optiga_util_write_metadata+0x78>
10001b24:	2f00      	cmp	r7, #0
10001b26:	d029      	beq.n	10001b7c <optiga_util_write_metadata+0x78>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001b28:	8c23      	ldrh	r3, [r4, #32]
10001b2a:	2b01      	cmp	r3, #1
10001b2c:	d028      	beq.n	10001b80 <optiga_util_write_metadata+0x7c>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001b2e:	2601      	movs	r6, #1
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001b30:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001b32:	8426      	strh	r6, [r4, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001b34:	2214      	movs	r2, #20
10001b36:	1c20      	adds	r0, r4, #0
10001b38:	f00a ff40 	bl	1000c9bc <memset>
        p_params->oid = optiga_oid;
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
        p_params->size = length;
10001b3c:	466b      	mov	r3, sp

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
10001b3e:	8025      	strh	r5, [r4, #0]
        p_params->offset = 0;
10001b40:	2500      	movs	r5, #0
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
        p_params->size = length;
10001b42:	889b      	ldrh	r3, [r3, #4]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
10001b44:	7326      	strb	r6, [r4, #12]
        p_params->buffer = buffer;
        p_params->size = length;
10001b46:	80a3      	strh	r3, [r4, #4]
        p_params->write_type = 1;
10001b48:	7366      	strb	r6, [r4, #13]
        p_params->written_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001b4a:	1ce3      	adds	r3, r4, #3
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
10001b4c:	8065      	strh	r5, [r4, #2]
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
10001b4e:	60a7      	str	r7, [r4, #8]
        p_params->size = length;
        p_params->write_type = 1;
        p_params->written_size = 0;
10001b50:	80e5      	strh	r5, [r4, #6]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001b52:	7fd9      	ldrb	r1, [r3, #31]
10001b54:	9800      	ldr	r0, [sp, #0]
10001b56:	1c2a      	adds	r2, r5, #0
10001b58:	f004 fc4a 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001b5c:	1d23      	adds	r3, r4, #4
10001b5e:	7fd9      	ldrb	r1, [r3, #31]
10001b60:	1c32      	adds	r2, r6, #0
10001b62:	6960      	ldr	r0, [r4, #20]
10001b64:	f004 fc44 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, p_params->write_type,
10001b68:	7b61      	ldrb	r1, [r4, #13]
10001b6a:	6960      	ldr	r0, [r4, #20]
10001b6c:	1c22      	adds	r2, r4, #0
10001b6e:	f004 fd29 	bl	100065c4 <optiga_cmd_set_data_object>
10001b72:	1e06      	subs	r6, r0, #0
                                                  (optiga_set_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10001b74:	42ae      	cmp	r6, r5
10001b76:	d004      	beq.n	10001b82 <optiga_util_write_metadata+0x7e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001b78:	8425      	strh	r5, [r4, #32]
10001b7a:	e002      	b.n	10001b82 <optiga_util_write_metadata+0x7e>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001b7c:	4e06      	ldr	r6, [pc, #24]	; (10001b98 <optiga_util_write_metadata+0x94>)
10001b7e:	e000      	b.n	10001b82 <optiga_util_write_metadata+0x7e>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001b80:	4e06      	ldr	r6, [pc, #24]	; (10001b9c <optiga_util_write_metadata+0x98>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001b82:	1c20      	adds	r0, r4, #0
10001b84:	f7ff fdc6 	bl	10001714 <optiga_util_reset_protection_level>

    return (return_value);
}
10001b88:	1c30      	adds	r0, r6, #0
10001b8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001b8c:	1000d334 	.word	0x1000d334
10001b90:	1000d2c7 	.word	0x1000d2c7
10001b94:	1000d2dc 	.word	0x1000d2dc
10001b98:	00000303 	.word	0x00000303
10001b9c:	00000305 	.word	0x00000305

10001ba0 <optiga_util_protected_update_start>:

optiga_lib_status_t optiga_util_protected_update_start(optiga_util_t * me,
                                                       uint8_t manifest_version,
                                                       const uint8_t * manifest,
                                                       uint16_t manifest_length)
{
10001ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001ba2:	1c04      	adds	r4, r0, #0
10001ba4:	9100      	str	r1, [sp, #0]
10001ba6:	1c15      	adds	r5, r2, #0
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001ba8:	481e      	ldr	r0, [pc, #120]	; (10001c24 <optiga_util_protected_update_start+0x84>)
10001baa:	491f      	ldr	r1, [pc, #124]	; (10001c28 <optiga_util_protected_update_start+0x88>)
10001bac:	4a1f      	ldr	r2, [pc, #124]	; (10001c2c <optiga_util_protected_update_start+0x8c>)

optiga_lib_status_t optiga_util_protected_update_start(optiga_util_t * me,
                                                       uint8_t manifest_version,
                                                       const uint8_t * manifest,
                                                       uint16_t manifest_length)
{
10001bae:	9301      	str	r3, [sp, #4]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001bb0:	f002 fdc2 	bl	10004738 <optiga_lib_print_message>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == manifest))
10001bb4:	2c00      	cmp	r4, #0
10001bb6:	d02d      	beq.n	10001c14 <optiga_util_protected_update_start+0x74>
10001bb8:	6967      	ldr	r7, [r4, #20]
10001bba:	2f00      	cmp	r7, #0
10001bbc:	d02a      	beq.n	10001c14 <optiga_util_protected_update_start+0x74>
10001bbe:	2d00      	cmp	r5, #0
10001bc0:	d028      	beq.n	10001c14 <optiga_util_protected_update_start+0x74>
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_object_protected_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001bc2:	8c23      	ldrh	r3, [r4, #32]
10001bc4:	2b01      	cmp	r3, #1
10001bc6:	d027      	beq.n	10001c18 <optiga_util_protected_update_start+0x78>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001bc8:	2601      	movs	r6, #1
        p_params = (optiga_set_object_protected_params_t *)&(me->params.optiga_set_object_protected_params);

        if(OPTIGA_SET_PROTECTED_UPDATE_START == set_obj_tag)
        {
            pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001bca:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001bcc:	8426      	strh	r6, [r4, #32]
        p_params = (optiga_set_object_protected_params_t *)&(me->params.optiga_set_object_protected_params);

        if(OPTIGA_SET_PROTECTED_UPDATE_START == set_obj_tag)
        {
            pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
10001bce:	2214      	movs	r2, #20
10001bd0:	1c20      	adds	r0, r4, #0
10001bd2:	f00a fef3 	bl	1000c9bc <memset>
            p_params->manifest_version = manifest_version;
10001bd6:	466b      	mov	r3, sp
10001bd8:	781b      	ldrb	r3, [r3, #0]
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001bda:	1c38      	adds	r0, r7, #0
        p_params = (optiga_set_object_protected_params_t *)&(me->params.optiga_set_object_protected_params);

        if(OPTIGA_SET_PROTECTED_UPDATE_START == set_obj_tag)
        {
            pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
            p_params->manifest_version = manifest_version;
10001bdc:	71e3      	strb	r3, [r4, #7]
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001bde:	1ce3      	adds	r3, r4, #3
10001be0:	7fd9      	ldrb	r1, [r3, #31]
10001be2:	2200      	movs	r2, #0
10001be4:	f004 fc04 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001be8:	1d23      	adds	r3, r4, #4
10001bea:	7fd9      	ldrb	r1, [r3, #31]
10001bec:	1c32      	adds	r2, r6, #0
10001bee:	6960      	ldr	r0, [r4, #20]
10001bf0:	f004 fbfe 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
10001bf4:	466b      	mov	r3, sp
        p_params->set_obj_protected_tag = set_obj_tag;
10001bf6:	2600      	movs	r6, #0
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
10001bf8:	889b      	ldrh	r3, [r3, #4]
            p_params->manifest_version = manifest_version;
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
10001bfa:	6025      	str	r5, [r4, #0]
        p_params->p_protected_update_buffer_length = buffer_length;
10001bfc:	80a3      	strh	r3, [r4, #4]
        p_params->set_obj_protected_tag = set_obj_tag;
10001bfe:	71a6      	strb	r6, [r4, #6]

        return_value = optiga_cmd_set_object_protected(me->my_cmd, p_params->manifest_version,p_params);
10001c00:	79e1      	ldrb	r1, [r4, #7]
10001c02:	6960      	ldr	r0, [r4, #20]
10001c04:	1c22      	adds	r2, r4, #0
10001c06:	f004 fe65 	bl	100068d4 <optiga_cmd_set_object_protected>
10001c0a:	1e05      	subs	r5, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_value)
10001c0c:	42b5      	cmp	r5, r6
10001c0e:	d004      	beq.n	10001c1a <optiga_util_protected_update_start+0x7a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001c10:	8426      	strh	r6, [r4, #32]
10001c12:	e002      	b.n	10001c1a <optiga_util_protected_update_start+0x7a>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == manifest))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001c14:	4d06      	ldr	r5, [pc, #24]	; (10001c30 <optiga_util_protected_update_start+0x90>)
10001c16:	e000      	b.n	10001c1a <optiga_util_protected_update_start+0x7a>

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001c18:	4d06      	ldr	r5, [pc, #24]	; (10001c34 <optiga_util_protected_update_start+0x94>)
                                                    manifest,
                                                    manifest_length,
                                                    OPTIGA_SET_PROTECTED_UPDATE_START
                                                    );
    } while (FALSE);
    optiga_util_reset_protection_level(me);
10001c1a:	1c20      	adds	r0, r4, #0
10001c1c:	f7ff fd7a 	bl	10001714 <optiga_util_reset_protection_level>
    return (return_value);
}
10001c20:	1c28      	adds	r0, r5, #0
10001c22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001c24:	1000d24e 	.word	0x1000d24e
10001c28:	1000d2c7 	.word	0x1000d2c7
10001c2c:	1000d2dc 	.word	0x1000d2dc
10001c30:	00000303 	.word	0x00000303
10001c34:	00000305 	.word	0x00000305

10001c38 <optiga_util_protected_update_continue>:

optiga_lib_status_t optiga_util_protected_update_continue(optiga_util_t * me,
                                                          const uint8_t * fragment,
                                                          uint16_t fragment_length)
{
10001c38:	b570      	push	{r4, r5, r6, lr}
10001c3a:	1c04      	adds	r4, r0, #0
10001c3c:	1c0d      	adds	r5, r1, #0
10001c3e:	1c16      	adds	r6, r2, #0
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001c40:	4810      	ldr	r0, [pc, #64]	; (10001c84 <optiga_util_protected_update_continue+0x4c>)
10001c42:	4911      	ldr	r1, [pc, #68]	; (10001c88 <optiga_util_protected_update_continue+0x50>)
10001c44:	4a11      	ldr	r2, [pc, #68]	; (10001c8c <optiga_util_protected_update_continue+0x54>)
10001c46:	f002 fd77 	bl	10004738 <optiga_lib_print_message>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == fragment))
10001c4a:	2c00      	cmp	r4, #0
10001c4c:	d016      	beq.n	10001c7c <optiga_util_protected_update_continue+0x44>
10001c4e:	6960      	ldr	r0, [r4, #20]
10001c50:	2800      	cmp	r0, #0
10001c52:	d013      	beq.n	10001c7c <optiga_util_protected_update_continue+0x44>
10001c54:	2d00      	cmp	r5, #0
10001c56:	d011      	beq.n	10001c7c <optiga_util_protected_update_continue+0x44>
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_object_protected_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001c58:	8c23      	ldrh	r3, [r4, #32]
10001c5a:	2b01      	cmp	r3, #1
10001c5c:	d010      	beq.n	10001c80 <optiga_util_protected_update_continue+0x48>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001c5e:	2301      	movs	r3, #1
10001c60:	8423      	strh	r3, [r4, #32]
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
        p_params->set_obj_protected_tag = set_obj_tag;
10001c62:	18db      	adds	r3, r3, r3
            p_params->manifest_version = manifest_version;
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
10001c64:	6025      	str	r5, [r4, #0]
        p_params->p_protected_update_buffer_length = buffer_length;
10001c66:	80a6      	strh	r6, [r4, #4]
        p_params->set_obj_protected_tag = set_obj_tag;
10001c68:	71a3      	strb	r3, [r4, #6]

        return_value = optiga_cmd_set_object_protected(me->my_cmd, p_params->manifest_version,p_params);
10001c6a:	79e1      	ldrb	r1, [r4, #7]
10001c6c:	1c22      	adds	r2, r4, #0
10001c6e:	f004 fe31 	bl	100068d4 <optiga_cmd_set_object_protected>
        if (OPTIGA_LIB_SUCCESS != return_value)
10001c72:	2800      	cmp	r0, #0
10001c74:	d005      	beq.n	10001c82 <optiga_util_protected_update_continue+0x4a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001c76:	2300      	movs	r3, #0
10001c78:	8423      	strh	r3, [r4, #32]
10001c7a:	e002      	b.n	10001c82 <optiga_util_protected_update_continue+0x4a>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == fragment))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001c7c:	4804      	ldr	r0, [pc, #16]	; (10001c90 <optiga_util_protected_update_continue+0x58>)
10001c7e:	e000      	b.n	10001c82 <optiga_util_protected_update_continue+0x4a>

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001c80:	4804      	ldr	r0, [pc, #16]	; (10001c94 <optiga_util_protected_update_continue+0x5c>)
                                                    fragment,
                                                    fragment_length,
                                                    OPTIGA_SET_PROTECTED_UPDATE_CONTINUE);
    } while (FALSE);
    return (return_value);
}
10001c82:	bd70      	pop	{r4, r5, r6, pc}
10001c84:	1000d287 	.word	0x1000d287
10001c88:	1000d2c7 	.word	0x1000d2c7
10001c8c:	1000d2dc 	.word	0x1000d2dc
10001c90:	00000303 	.word	0x00000303
10001c94:	00000305 	.word	0x00000305

10001c98 <optiga_util_protected_update_final>:

optiga_lib_status_t optiga_util_protected_update_final(optiga_util_t * me,
                                                       const uint8_t * fragment,
                                                       uint16_t fragment_length)
{
10001c98:	b570      	push	{r4, r5, r6, lr}
10001c9a:	1c04      	adds	r4, r0, #0
10001c9c:	1c0e      	adds	r6, r1, #0
10001c9e:	1c15      	adds	r5, r2, #0
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001ca0:	480f      	ldr	r0, [pc, #60]	; (10001ce0 <optiga_util_protected_update_final+0x48>)
10001ca2:	4910      	ldr	r1, [pc, #64]	; (10001ce4 <optiga_util_protected_update_final+0x4c>)
10001ca4:	4a10      	ldr	r2, [pc, #64]	; (10001ce8 <optiga_util_protected_update_final+0x50>)
10001ca6:	f002 fd47 	bl	10004738 <optiga_lib_print_message>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
10001caa:	2c00      	cmp	r4, #0
10001cac:	d013      	beq.n	10001cd6 <optiga_util_protected_update_final+0x3e>
10001cae:	6960      	ldr	r0, [r4, #20]
10001cb0:	2800      	cmp	r0, #0
10001cb2:	d010      	beq.n	10001cd6 <optiga_util_protected_update_final+0x3e>
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_object_protected_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001cb4:	8c23      	ldrh	r3, [r4, #32]
10001cb6:	2b01      	cmp	r3, #1
10001cb8:	d00f      	beq.n	10001cda <optiga_util_protected_update_final+0x42>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001cba:	2301      	movs	r3, #1
            p_params->manifest_version = manifest_version;
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
10001cbc:	6026      	str	r6, [r4, #0]
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001cbe:	8423      	strh	r3, [r4, #32]
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
10001cc0:	80a5      	strh	r5, [r4, #4]
        p_params->set_obj_protected_tag = set_obj_tag;
10001cc2:	71a3      	strb	r3, [r4, #6]

        return_value = optiga_cmd_set_object_protected(me->my_cmd, p_params->manifest_version,p_params);
10001cc4:	79e1      	ldrb	r1, [r4, #7]
10001cc6:	1c22      	adds	r2, r4, #0
10001cc8:	f004 fe04 	bl	100068d4 <optiga_cmd_set_object_protected>
        if (OPTIGA_LIB_SUCCESS != return_value)
10001ccc:	2800      	cmp	r0, #0
10001cce:	d005      	beq.n	10001cdc <optiga_util_protected_update_final+0x44>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001cd0:	2300      	movs	r3, #0
10001cd2:	8423      	strh	r3, [r4, #32]
10001cd4:	e002      	b.n	10001cdc <optiga_util_protected_update_final+0x44>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
10001cd6:	4805      	ldr	r0, [pc, #20]	; (10001cec <optiga_util_protected_update_final+0x54>)
10001cd8:	e000      	b.n	10001cdc <optiga_util_protected_update_final+0x44>

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
10001cda:	4805      	ldr	r0, [pc, #20]	; (10001cf0 <optiga_util_protected_update_final+0x58>)
                                                    fragment,
                                                    fragment_length,
                                                    OPTIGA_SET_PROTECTED_UPDATE_FINAL);
    } while (FALSE);
    return (return_value);
}
10001cdc:	bd70      	pop	{r4, r5, r6, pc}
10001cde:	46c0      	nop			; (mov r8, r8)
10001ce0:	1000d2e1 	.word	0x1000d2e1
10001ce4:	1000d2c7 	.word	0x1000d2c7
10001ce8:	1000d2dc 	.word	0x1000d2dc
10001cec:	00000303 	.word	0x00000303
10001cf0:	00000305 	.word	0x00000305

10001cf4 <optiga_util_update_count>:

optiga_lib_status_t optiga_util_update_count(optiga_util_t * me,
                                             uint16_t optiga_counter_oid,
                                             uint8_t count)
{
10001cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    const uint8_t count_value[] = {count};
10001cf6:	ac03      	add	r4, sp, #12
}

optiga_lib_status_t optiga_util_update_count(optiga_util_t * me,
                                             uint16_t optiga_counter_oid,
                                             uint8_t count)
{
10001cf8:	1c06      	adds	r6, r0, #0
10001cfa:	1c0d      	adds	r5, r1, #0
    const uint8_t count_value[] = {count};
10001cfc:	7022      	strb	r2, [r4, #0]
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
10001cfe:	4808      	ldr	r0, [pc, #32]	; (10001d20 <optiga_util_update_count+0x2c>)
10001d00:	4908      	ldr	r1, [pc, #32]	; (10001d24 <optiga_util_update_count+0x30>)
10001d02:	4a09      	ldr	r2, [pc, #36]	; (10001d28 <optiga_util_update_count+0x34>)
10001d04:	f002 fd18 	bl	10004738 <optiga_lib_print_message>
    return (optiga_util_write_data_wrapper(me,
10001d08:	2301      	movs	r3, #1
10001d0a:	9400      	str	r4, [sp, #0]
10001d0c:	9301      	str	r3, [sp, #4]
10001d0e:	1c30      	adds	r0, r6, #0
10001d10:	1c29      	adds	r1, r5, #0
10001d12:	2202      	movs	r2, #2
10001d14:	2300      	movs	r3, #0
10001d16:	f7ff fd03 	bl	10001720 <optiga_util_write_data_wrapper>
                                          optiga_counter_oid,
                                          OPTIGA_UTIL_COUNT_DATA_OBJECT,
                                          0x0000,
                                          count_value,
                                          sizeof(count_value)));
}
10001d1a:	b004      	add	sp, #16
10001d1c:	bd70      	pop	{r4, r5, r6, pc}
10001d1e:	46c0      	nop			; (mov r8, r8)
10001d20:	1000d31b 	.word	0x1000d31b
10001d24:	1000d2c7 	.word	0x1000d2c7
10001d28:	1000d2dc 	.word	0x1000d2dc

10001d2c <optiga_crypt_generic_event_handler>:
/// Minimum optional data length
#define OPTIGA_CRYTP_MINIMUM_OPTIONAL_DATA_LENGTH                   (0x28)

_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
10001d2c:	b510      	push	{r4, lr}
10001d2e:	1c04      	adds	r4, r0, #0
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;

    me->handler(me->caller_context, event);
10001d30:	6a40      	ldr	r0, [r0, #36]	; 0x24
10001d32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10001d34:	4798      	blx	r3
    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001d36:	2300      	movs	r3, #0
10001d38:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
10001d3a:	bd10      	pop	{r4, pc}

10001d3c <optiga_crypt_reset_protection_level>:

_STATIC_H void optiga_crypt_reset_protection_level(optiga_crypt_t * me)
{
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
10001d3c:	2800      	cmp	r0, #0
10001d3e:	d002      	beq.n	10001d46 <optiga_crypt_reset_protection_level+0xa>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
10001d40:	2300      	movs	r3, #0
10001d42:	302e      	adds	r0, #46	; 0x2e
10001d44:	7003      	strb	r3, [r0, #0]
    if (NULL != me)
#endif
    {
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
    }
}
10001d46:	4770      	bx	lr

10001d48 <optiga_crypt_get_random>:
                                                      uint8_t cmd_param,
                                                      uint8_t * p_random_data,
                                                      uint16_t random_data_length,
                                                      const uint8_t * p_optional_data,
                                                      uint16_t optional_data_length)
{
10001d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001d4a:	9300      	str	r3, [sp, #0]
10001d4c:	ab08      	add	r3, sp, #32
10001d4e:	1c17      	adds	r7, r2, #0
10001d50:	cb04      	ldmia	r3!, {r2}
10001d52:	1c04      	adds	r4, r0, #0
10001d54:	881b      	ldrh	r3, [r3, #0]
10001d56:	1c0e      	adds	r6, r1, #0
10001d58:	9301      	str	r3, [sp, #4]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_get_random_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001d5a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10001d5c:	2b01      	cmp	r3, #1
10001d5e:	d026      	beq.n	10001dae <optiga_crypt_get_random+0x66>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001d60:	2501      	movs	r5, #1
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001d62:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001d64:	8585      	strh	r5, [r0, #44]	; 0x2c
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001d66:	2220      	movs	r2, #32
10001d68:	f00a fe28 	bl	1000c9bc <memset>

        p_params->optional_data = p_optional_data;
10001d6c:	9b08      	ldr	r3, [sp, #32]
        p_params->optional_data_length = optional_data_length;
        p_params->random_data = p_random_data;
10001d6e:	6067      	str	r7, [r4, #4]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
10001d70:	60a3      	str	r3, [r4, #8]
        p_params->optional_data_length = optional_data_length;
10001d72:	466b      	mov	r3, sp
10001d74:	889b      	ldrh	r3, [r3, #4]
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001d76:	6a20      	ldr	r0, [r4, #32]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
        p_params->optional_data_length = optional_data_length;
10001d78:	8063      	strh	r3, [r4, #2]
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
10001d7a:	466b      	mov	r3, sp
10001d7c:	881b      	ldrh	r3, [r3, #0]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001d7e:	2200      	movs	r2, #0
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
        p_params->optional_data_length = optional_data_length;
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
10001d80:	8023      	strh	r3, [r4, #0]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001d82:	1c23      	adds	r3, r4, #0
10001d84:	332e      	adds	r3, #46	; 0x2e
10001d86:	7819      	ldrb	r1, [r3, #0]
10001d88:	f004 fb32 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001d8c:	1c23      	adds	r3, r4, #0
10001d8e:	332f      	adds	r3, #47	; 0x2f
10001d90:	7819      	ldrb	r1, [r3, #0]
10001d92:	1c2a      	adds	r2, r5, #0
10001d94:	6a20      	ldr	r0, [r4, #32]
10001d96:	f004 fb2b 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_random(me->my_cmd,
10001d9a:	6a20      	ldr	r0, [r4, #32]
10001d9c:	1c31      	adds	r1, r6, #0
10001d9e:	1c22      	adds	r2, r4, #0
10001da0:	f004 fc30 	bl	10006604 <optiga_cmd_get_random>
10001da4:	1e05      	subs	r5, r0, #0
                                             (uint8_t)cmd_param,
                                              (optiga_get_random_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10001da6:	d003      	beq.n	10001db0 <optiga_crypt_get_random+0x68>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001da8:	2300      	movs	r3, #0
10001daa:	85a3      	strh	r3, [r4, #44]	; 0x2c
10001dac:	e000      	b.n	10001db0 <optiga_crypt_get_random+0x68>
    optiga_get_random_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10001dae:	4d03      	ldr	r5, [pc, #12]	; (10001dbc <optiga_crypt_get_random+0x74>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10001db0:	1c20      	adds	r0, r4, #0
10001db2:	f7ff ffc3 	bl	10001d3c <optiga_crypt_reset_protection_level>

    return (return_value);
}
10001db6:	1c28      	adds	r0, r5, #0
10001db8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001dba:	46c0      	nop			; (mov r8, r8)
10001dbc:	00000405 	.word	0x00000405

10001dc0 <optiga_crypt_generate_keypair>:
                                                            uint8_t key_usage,
                                                            bool_t export_private_key,
                                                            void * p_private_key,
                                                            uint8_t * p_public_key,
                                                            uint16_t * p_public_key_length)
{
10001dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10001dc2:	1c04      	adds	r4, r0, #0
10001dc4:	9100      	str	r1, [sp, #0]
10001dc6:	9201      	str	r2, [sp, #4]
10001dc8:	1c1d      	adds	r5, r3, #0
    optiga_gen_keypair_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
10001dca:	2800      	cmp	r0, #0
10001dcc:	d03a      	beq.n	10001e44 <optiga_crypt_generate_keypair+0x84>
10001dce:	6a07      	ldr	r7, [r0, #32]
10001dd0:	2f00      	cmp	r7, #0
10001dd2:	d037      	beq.n	10001e44 <optiga_crypt_generate_keypair+0x84>
10001dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
10001dd6:	2b00      	cmp	r3, #0
10001dd8:	d034      	beq.n	10001e44 <optiga_crypt_generate_keypair+0x84>
            (NULL == p_public_key) || (NULL == p_private_key) || (NULL == p_public_key_length))
10001dda:	9b08      	ldr	r3, [sp, #32]
10001ddc:	2b00      	cmp	r3, #0
10001dde:	d031      	beq.n	10001e44 <optiga_crypt_generate_keypair+0x84>
10001de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001de2:	2b00      	cmp	r3, #0
10001de4:	d02e      	beq.n	10001e44 <optiga_crypt_generate_keypair+0x84>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001de6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10001de8:	2b01      	cmp	r3, #1
10001dea:	d02d      	beq.n	10001e48 <optiga_crypt_generate_keypair+0x88>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001dec:	2601      	movs	r6, #1
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001dee:	2100      	movs	r1, #0
10001df0:	2220      	movs	r2, #32
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001df2:	8586      	strh	r6, [r0, #44]	; 0x2c
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001df4:	f00a fde2 	bl	1000c9bc <memset>

        p_params->key_usage = key_usage;
10001df8:	466b      	mov	r3, sp
10001dfa:	791b      	ldrb	r3, [r3, #4]
        p_params->export_private_key = export_private_key;
10001dfc:	7065      	strb	r5, [r4, #1]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->key_usage = key_usage;
10001dfe:	7023      	strb	r3, [r4, #0]
        p_params->export_private_key = export_private_key;
        p_params->public_key_length = p_public_key_length;
10001e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001e02:	1c38      	adds	r0, r7, #0
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->key_usage = key_usage;
        p_params->export_private_key = export_private_key;
        p_params->public_key_length = p_public_key_length;
10001e04:	6123      	str	r3, [r4, #16]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001e06:	1c23      	adds	r3, r4, #0
10001e08:	332e      	adds	r3, #46	; 0x2e
10001e0a:	7819      	ldrb	r1, [r3, #0]
10001e0c:	2200      	movs	r2, #0
10001e0e:	f004 faef 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001e12:	1c23      	adds	r3, r4, #0
10001e14:	332f      	adds	r3, #47	; 0x2f
10001e16:	7819      	ldrb	r1, [r3, #0]
10001e18:	6a20      	ldr	r0, [r4, #32]
10001e1a:	1c32      	adds	r2, r6, #0
10001e1c:	f004 fae8 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>

        if (export_private_key)
        {
            p_params->private_key = (uint8_t *)p_private_key;
10001e20:	9b08      	ldr	r3, [sp, #32]
        p_params->export_private_key = export_private_key;
        p_params->public_key_length = p_public_key_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

        if (export_private_key)
10001e22:	2d00      	cmp	r5, #0
10001e24:	d001      	beq.n	10001e2a <optiga_crypt_generate_keypair+0x6a>
        {
            p_params->private_key = (uint8_t *)p_private_key;
10001e26:	6063      	str	r3, [r4, #4]
10001e28:	e001      	b.n	10001e2e <optiga_crypt_generate_keypair+0x6e>
        }
        else
        {
            p_params->private_key_oid = (optiga_key_id_t)(* ((uint16_t* )p_private_key));
10001e2a:	881b      	ldrh	r3, [r3, #0]
10001e2c:	8063      	strh	r3, [r4, #2]
        }

        p_params->public_key = p_public_key;
10001e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
        p_params->public_key_length = p_public_key_length;

        return_value = optiga_cmd_gen_keypair(me->my_cmd,
10001e30:	6a20      	ldr	r0, [r4, #32]
        else
        {
            p_params->private_key_oid = (optiga_key_id_t)(* ((uint16_t* )p_private_key));
        }

        p_params->public_key = p_public_key;
10001e32:	60e3      	str	r3, [r4, #12]
        p_params->public_key_length = p_public_key_length;
10001e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28

        return_value = optiga_cmd_gen_keypair(me->my_cmd,
10001e36:	9900      	ldr	r1, [sp, #0]
        {
            p_params->private_key_oid = (optiga_key_id_t)(* ((uint16_t* )p_private_key));
        }

        p_params->public_key = p_public_key;
        p_params->public_key_length = p_public_key_length;
10001e38:	6123      	str	r3, [r4, #16]

        return_value = optiga_cmd_gen_keypair(me->my_cmd,
10001e3a:	1c22      	adds	r2, r4, #0
10001e3c:	f004 fcb2 	bl	100067a4 <optiga_cmd_gen_keypair>
10001e40:	1c05      	adds	r5, r0, #0
10001e42:	e002      	b.n	10001e4a <optiga_crypt_generate_keypair+0x8a>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == p_public_key) || (NULL == p_private_key) || (NULL == p_public_key_length))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10001e44:	4d03      	ldr	r5, [pc, #12]	; (10001e54 <optiga_crypt_generate_keypair+0x94>)
10001e46:	e000      	b.n	10001e4a <optiga_crypt_generate_keypair+0x8a>
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10001e48:	4d03      	ldr	r5, [pc, #12]	; (10001e58 <optiga_crypt_generate_keypair+0x98>)

        return_value = optiga_cmd_gen_keypair(me->my_cmd,
                                              (uint8_t )cmd_param,
                                              (optiga_gen_keypair_params_t *)p_params);
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10001e4a:	1c20      	adds	r0, r4, #0
10001e4c:	f7ff ff76 	bl	10001d3c <optiga_crypt_reset_protection_level>

    return (return_value);
}
10001e50:	1c28      	adds	r0, r5, #0
10001e52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10001e54:	00000403 	.word	0x00000403
10001e58:	00000405 	.word	0x00000405

10001e5c <optiga_crypt_sign.isra.0>:
#endif // (OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED) || (OPTIGA_CRYPT_RSA_GENERATE_KEYPAIR_ENABLED)

#if defined (OPTIGA_CRYPT_ECDSA_SIGN_ENABLED) || defined (OPTIGA_CRYPT_RSA_SIGN_ENABLED)
//lint --e{715} suppress "The salt_length argument is kept for future use"
_STATIC_H optiga_lib_status_t optiga_crypt_sign(optiga_crypt_t * me,
10001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e5e:	b085      	sub	sp, #20
10001e60:	9302      	str	r3, [sp, #8]
10001e62:	ab0a      	add	r3, sp, #40	; 0x28
10001e64:	881b      	ldrh	r3, [r3, #0]
10001e66:	1c04      	adds	r4, r0, #0
10001e68:	9101      	str	r1, [sp, #4]
10001e6a:	1c17      	adds	r7, r2, #0
10001e6c:	9303      	str	r3, [sp, #12]
    optiga_calc_sign_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_digest) ||
10001e6e:	2800      	cmp	r0, #0
10001e70:	d036      	beq.n	10001ee0 <optiga_crypt_sign.isra.0+0x84>
10001e72:	6a05      	ldr	r5, [r0, #32]
10001e74:	2d00      	cmp	r5, #0
10001e76:	d033      	beq.n	10001ee0 <optiga_crypt_sign.isra.0+0x84>
10001e78:	2a00      	cmp	r2, #0
10001e7a:	d031      	beq.n	10001ee0 <optiga_crypt_sign.isra.0+0x84>
10001e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10001e7e:	2b00      	cmp	r3, #0
10001e80:	d02e      	beq.n	10001ee0 <optiga_crypt_sign.isra.0+0x84>
            (NULL == p_signature) || (NULL == p_signature_length))
10001e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10001e84:	2b00      	cmp	r3, #0
10001e86:	d02b      	beq.n	10001ee0 <optiga_crypt_sign.isra.0+0x84>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001e88:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10001e8a:	2b01      	cmp	r3, #1
10001e8c:	d02a      	beq.n	10001ee4 <optiga_crypt_sign.isra.0+0x88>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001e8e:	2601      	movs	r6, #1

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001e90:	2100      	movs	r1, #0
10001e92:	2220      	movs	r2, #32
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001e94:	8586      	strh	r6, [r0, #44]	; 0x2c

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001e96:	f00a fd91 	bl	1000c9bc <memset>

        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
10001e9a:	466b      	mov	r3, sp
10001e9c:	7a1b      	ldrb	r3, [r3, #8]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->p_digest = p_digest;
10001e9e:	6027      	str	r7, [r4, #0]
        p_params->digest_length = digest_length;
10001ea0:	73a3      	strb	r3, [r4, #14]
        p_params->private_key_oid = private_key;
10001ea2:	466b      	mov	r3, sp
10001ea4:	899b      	ldrh	r3, [r3, #12]
        p_params->p_signature = p_signature;
        p_params->p_signature_length = p_signature_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001ea6:	1c28      	adds	r0, r5, #0
        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
        p_params->private_key_oid = private_key;
10001ea8:	81a3      	strh	r3, [r4, #12]
        p_params->p_signature = p_signature;
10001eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        p_params->p_signature_length = p_signature_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001eac:	2200      	movs	r2, #0
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
        p_params->private_key_oid = private_key;
        p_params->p_signature = p_signature;
10001eae:	6063      	str	r3, [r4, #4]
        p_params->p_signature_length = p_signature_length;
10001eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10001eb2:	60a3      	str	r3, [r4, #8]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001eb4:	1c23      	adds	r3, r4, #0
10001eb6:	332e      	adds	r3, #46	; 0x2e
10001eb8:	7819      	ldrb	r1, [r3, #0]
10001eba:	f004 fa99 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001ebe:	1c23      	adds	r3, r4, #0
10001ec0:	332f      	adds	r3, #47	; 0x2f
10001ec2:	7819      	ldrb	r1, [r3, #0]
10001ec4:	6a20      	ldr	r0, [r4, #32]
10001ec6:	1c32      	adds	r2, r6, #0
10001ec8:	f004 fa92 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_calc_sign(me->my_cmd,
10001ecc:	6a20      	ldr	r0, [r4, #32]
10001ece:	9901      	ldr	r1, [sp, #4]
10001ed0:	1c22      	adds	r2, r4, #0
10001ed2:	f004 fbb9 	bl	10006648 <optiga_cmd_calc_sign>
10001ed6:	1e05      	subs	r5, r0, #0
                                            signature_scheme,
                                            (optiga_calc_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10001ed8:	d005      	beq.n	10001ee6 <optiga_crypt_sign.isra.0+0x8a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001eda:	2300      	movs	r3, #0
10001edc:	85a3      	strh	r3, [r4, #44]	; 0x2c
10001ede:	e002      	b.n	10001ee6 <optiga_crypt_sign.isra.0+0x8a>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_digest) ||
            (NULL == p_signature) || (NULL == p_signature_length))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10001ee0:	4d04      	ldr	r5, [pc, #16]	; (10001ef4 <optiga_crypt_sign.isra.0+0x98>)
10001ee2:	e000      	b.n	10001ee6 <optiga_crypt_sign.isra.0+0x8a>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10001ee4:	4d04      	ldr	r5, [pc, #16]	; (10001ef8 <optiga_crypt_sign.isra.0+0x9c>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10001ee6:	1c20      	adds	r0, r4, #0
10001ee8:	f7ff ff28 	bl	10001d3c <optiga_crypt_reset_protection_level>

    return (return_value);
}
10001eec:	1c28      	adds	r0, r5, #0
10001eee:	b005      	add	sp, #20
10001ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001ef2:	46c0      	nop			; (mov r8, r8)
10001ef4:	00000403 	.word	0x00000403
10001ef8:	00000405 	.word	0x00000405

10001efc <optiga_crypt_verify.isra.1>:
#endif // (OPTIGA_CRYPT_ECDSA_SIGN_ENABLED) || (OPTIGA_CRYPT_RSA_SIGN_ENABLED)

#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
//lint --e{715} suppress "The salt_length argument is kept for future use"
_STATIC_H optiga_lib_status_t optiga_crypt_verify(optiga_crypt_t * me,
10001efc:	b5f0      	push	{r4, r5, r6, r7, lr}
10001efe:	b085      	sub	sp, #20
10001f00:	9302      	str	r3, [sp, #8]
10001f02:	ab0a      	add	r3, sp, #40	; 0x28
10001f04:	9200      	str	r2, [sp, #0]
10001f06:	cb04      	ldmia	r3!, {r2}
10001f08:	1c04      	adds	r4, r0, #0
10001f0a:	881b      	ldrh	r3, [r3, #0]
10001f0c:	9101      	str	r1, [sp, #4]
10001f0e:	9303      	str	r3, [sp, #12]
10001f10:	ab0c      	add	r3, sp, #48	; 0x30
10001f12:	781d      	ldrb	r5, [r3, #0]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
10001f14:	2800      	cmp	r0, #0
10001f16:	d03d      	beq.n	10001f94 <optiga_crypt_verify.isra.1+0x98>
10001f18:	6a07      	ldr	r7, [r0, #32]
10001f1a:	2f00      	cmp	r7, #0
10001f1c:	d03a      	beq.n	10001f94 <optiga_crypt_verify.isra.1+0x98>
10001f1e:	9b00      	ldr	r3, [sp, #0]
10001f20:	2b00      	cmp	r3, #0
10001f22:	d037      	beq.n	10001f94 <optiga_crypt_verify.isra.1+0x98>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
10001f24:	2a00      	cmp	r2, #0
10001f26:	d035      	beq.n	10001f94 <optiga_crypt_verify.isra.1+0x98>
10001f28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10001f2a:	2b00      	cmp	r3, #0
10001f2c:	d032      	beq.n	10001f94 <optiga_crypt_verify.isra.1+0x98>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001f2e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
10001f30:	2b01      	cmp	r3, #1
10001f32:	d031      	beq.n	10001f98 <optiga_crypt_verify.isra.1+0x9c>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001f34:	2601      	movs	r6, #1
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001f36:	2100      	movs	r1, #0
10001f38:	2220      	movs	r2, #32
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10001f3a:	8586      	strh	r6, [r0, #44]	; 0x2c
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001f3c:	f00a fd3e 	bl	1000c9bc <memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001f40:	1c23      	adds	r3, r4, #0
10001f42:	332e      	adds	r3, #46	; 0x2e
10001f44:	7819      	ldrb	r1, [r3, #0]
10001f46:	1c38      	adds	r0, r7, #0
10001f48:	2200      	movs	r2, #0
10001f4a:	f004 fa51 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001f4e:	1c23      	adds	r3, r4, #0
10001f50:	332f      	adds	r3, #47	; 0x2f
10001f52:	7819      	ldrb	r1, [r3, #0]
10001f54:	6a20      	ldr	r0, [r4, #32]
10001f56:	1c32      	adds	r2, r6, #0
10001f58:	f004 fa4a 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
10001f5c:	9b00      	ldr	r3, [sp, #0]
        p_params->digest_length = digest_length;
        p_params->p_signature = p_signature;
        p_params->signature_length = signature_length;
        p_params->public_key_source_type = public_key_source_type;
10001f5e:	73a5      	strb	r5, [r4, #14]
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_digest = p_digest;
10001f60:	6023      	str	r3, [r4, #0]
        p_params->digest_length = digest_length;
10001f62:	466b      	mov	r3, sp
10001f64:	7a1b      	ldrb	r3, [r3, #8]
10001f66:	7123      	strb	r3, [r4, #4]
        p_params->p_signature = p_signature;
10001f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001f6a:	60a3      	str	r3, [r4, #8]
        p_params->signature_length = signature_length;
10001f6c:	466b      	mov	r3, sp
10001f6e:	899b      	ldrh	r3, [r3, #12]
10001f70:	81a3      	strh	r3, [r4, #12]
        p_params->public_key_source_type = public_key_source_type;

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
10001f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        p_params->digest_length = digest_length;
        p_params->p_signature = p_signature;
        p_params->signature_length = signature_length;
        p_params->public_key_source_type = public_key_source_type;

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
10001f74:	2d00      	cmp	r5, #0
10001f76:	d102      	bne.n	10001f7e <optiga_crypt_verify.isra.1+0x82>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
10001f78:	881b      	ldrh	r3, [r3, #0]
10001f7a:	82a3      	strh	r3, [r4, #20]
10001f7c:	e000      	b.n	10001f80 <optiga_crypt_verify.isra.1+0x84>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
10001f7e:	6123      	str	r3, [r4, #16]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
10001f80:	6a20      	ldr	r0, [r4, #32]
10001f82:	9901      	ldr	r1, [sp, #4]
10001f84:	1c22      	adds	r2, r4, #0
10001f86:	f004 fb8b 	bl	100066a0 <optiga_cmd_verify_sign>
10001f8a:	1e05      	subs	r5, r0, #0
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10001f8c:	d005      	beq.n	10001f9a <optiga_crypt_verify.isra.1+0x9e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10001f8e:	2300      	movs	r3, #0
10001f90:	85a3      	strh	r3, [r4, #44]	; 0x2c
10001f92:	e002      	b.n	10001f9a <optiga_crypt_verify.isra.1+0x9e>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10001f94:	4d04      	ldr	r5, [pc, #16]	; (10001fa8 <optiga_crypt_verify.isra.1+0xac>)
10001f96:	e000      	b.n	10001f9a <optiga_crypt_verify.isra.1+0x9e>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10001f98:	4d04      	ldr	r5, [pc, #16]	; (10001fac <optiga_crypt_verify.isra.1+0xb0>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10001f9a:	1c20      	adds	r0, r4, #0
10001f9c:	f7ff fece 	bl	10001d3c <optiga_crypt_reset_protection_level>

    return (return_value);
}
10001fa0:	1c28      	adds	r0, r5, #0
10001fa2:	b005      	add	sp, #20
10001fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001fa6:	46c0      	nop			; (mov r8, r8)
10001fa8:	00000403 	.word	0x00000403
10001fac:	00000405 	.word	0x00000405

10001fb0 <optiga_crypt_rsa_enc_dec.isra.2>:
#endif //(OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)

#if defined (OPTIGA_CRYPT_RSA_DECRYPT_ENABLED) || defined (OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED)
//lint --e{715} suppress "label and label_length is RFU hence not used"
_STATIC_H optiga_lib_status_t optiga_crypt_rsa_enc_dec(optiga_crypt_t * me,
10001fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10001fb2:	b085      	sub	sp, #20
10001fb4:	9302      	str	r3, [sp, #8]
10001fb6:	ab0a      	add	r3, sp, #40	; 0x28
10001fb8:	781b      	ldrb	r3, [r3, #0]
10001fba:	9201      	str	r2, [sp, #4]
10001fbc:	9303      	str	r3, [sp, #12]
10001fbe:	ab0e      	add	r3, sp, #56	; 0x38
10001fc0:	781e      	ldrb	r6, [r3, #0]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_encrypt_asym_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001fc2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
}
#endif //(OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)

#if defined (OPTIGA_CRYPT_RSA_DECRYPT_ENABLED) || defined (OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED)
//lint --e{715} suppress "label and label_length is RFU hence not used"
_STATIC_H optiga_lib_status_t optiga_crypt_rsa_enc_dec(optiga_crypt_t * me,
10001fc4:	1c04      	adds	r4, r0, #0
10001fc6:	1c0d      	adds	r5, r1, #0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_encrypt_asym_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10001fc8:	2b01      	cmp	r3, #1
10001fca:	d039      	beq.n	10002040 <optiga_crypt_rsa_enc_dec.isra.2+0x90>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;
10001fcc:	2701      	movs	r7, #1

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001fce:	2100      	movs	r1, #0
10001fd0:	2220      	movs	r2, #32
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;
10001fd2:	8587      	strh	r7, [r0, #44]	; 0x2c

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10001fd4:	f00a fcf2 	bl	1000c9bc <memset>

        p_params->message = p_message;
10001fd8:	9b01      	ldr	r3, [sp, #4]
        p_params->message_length = message_length;
        p_params->processed_message = p_processed_message;
        p_params->processed_message_length = p_processed_message_length;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001fda:	6a20      	ldr	r0, [r4, #32]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->message = p_message;
10001fdc:	60a3      	str	r3, [r4, #8]
        p_params->message_length = message_length;
10001fde:	466b      	mov	r3, sp
10001fe0:	891b      	ldrh	r3, [r3, #8]
        p_params->processed_message = p_processed_message;
        p_params->processed_message_length = p_processed_message_length;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001fe2:	2200      	movs	r2, #0

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->message = p_message;
        p_params->message_length = message_length;
10001fe4:	8023      	strh	r3, [r4, #0]
        p_params->processed_message = p_processed_message;
10001fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10001fe8:	6163      	str	r3, [r4, #20]
        p_params->processed_message_length = p_processed_message_length;
10001fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10001fec:	6063      	str	r3, [r4, #4]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10001fee:	1c23      	adds	r3, r4, #0
10001ff0:	332e      	adds	r3, #46	; 0x2e
10001ff2:	7819      	ldrb	r1, [r3, #0]
10001ff4:	f004 f9fc 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10001ff8:	1c23      	adds	r3, r4, #0
10001ffa:	332f      	adds	r3, #47	; 0x2f
10001ffc:	7819      	ldrb	r1, [r3, #0]
10001ffe:	6a20      	ldr	r0, [r4, #32]
10002000:	1c3a      	adds	r2, r7, #0
10002002:	f004 f9f5 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>


        if (is_enc)
        {
            p_params->key = p_key;
10002006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);


        if (is_enc)
10002008:	2e00      	cmp	r6, #0
1000200a:	d009      	beq.n	10002020 <optiga_crypt_rsa_enc_dec.isra.2+0x70>
        {
            p_params->key = p_key;
1000200c:	6123      	str	r3, [r4, #16]
            p_params->public_key_source_type = public_key_source_type;
1000200e:	466b      	mov	r3, sp
10002010:	7b1b      	ldrb	r3, [r3, #12]
#ifdef OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED
            return_value = optiga_cmd_encrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
10002012:	6a20      	ldr	r0, [r4, #32]


        if (is_enc)
        {
            p_params->key = p_key;
            p_params->public_key_source_type = public_key_source_type;
10002014:	7323      	strb	r3, [r4, #12]
#ifdef OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED
            return_value = optiga_cmd_encrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
10002016:	1c29      	adds	r1, r5, #0
10002018:	1c22      	adds	r2, r4, #0
1000201a:	f004 fbe9 	bl	100067f0 <optiga_cmd_encrypt_asym>
1000201e:	e00a      	b.n	10002036 <optiga_crypt_rsa_enc_dec.isra.2+0x86>
                                                   (optiga_encrypt_asym_params_t *)p_params);
#endif
        }
        else
        {
            p_params->private_key_id = (optiga_key_id_t)*(optiga_key_id_t *)p_key;
10002020:	881b      	ldrh	r3, [r3, #0]
            p_params->key = &p_params->private_key_id;
            p_params->public_key_source_type = 0;
#ifdef OPTIGA_CRYPT_RSA_DECRYPT_ENABLED
            return_value = optiga_cmd_decrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
10002022:	6a20      	ldr	r0, [r4, #32]
                                                   (optiga_encrypt_asym_params_t *)p_params);
#endif
        }
        else
        {
            p_params->private_key_id = (optiga_key_id_t)*(optiga_key_id_t *)p_key;
10002024:	8323      	strh	r3, [r4, #24]
            p_params->key = &p_params->private_key_id;
10002026:	1c23      	adds	r3, r4, #0
10002028:	3318      	adds	r3, #24
1000202a:	6123      	str	r3, [r4, #16]
            p_params->public_key_source_type = 0;
1000202c:	7326      	strb	r6, [r4, #12]
#ifdef OPTIGA_CRYPT_RSA_DECRYPT_ENABLED
            return_value = optiga_cmd_decrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
1000202e:	1c29      	adds	r1, r5, #0
10002030:	1c22      	adds	r2, r4, #0
10002032:	f004 fc09 	bl	10006848 <optiga_cmd_decrypt_asym>
10002036:	1e05      	subs	r5, r0, #0
                                                   (optiga_encrypt_asym_params_t *)p_params);
#endif
        }
        if (OPTIGA_LIB_SUCCESS != return_value)
10002038:	d003      	beq.n	10002042 <optiga_crypt_rsa_enc_dec.isra.2+0x92>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
1000203a:	2300      	movs	r3, #0
1000203c:	85a3      	strh	r3, [r4, #44]	; 0x2c
1000203e:	e000      	b.n	10002042 <optiga_crypt_rsa_enc_dec.isra.2+0x92>

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10002040:	4d03      	ldr	r5, [pc, #12]	; (10002050 <optiga_crypt_rsa_enc_dec.isra.2+0xa0>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10002042:	1c20      	adds	r0, r4, #0
10002044:	f7ff fe7a 	bl	10001d3c <optiga_crypt_reset_protection_level>

    return (return_value);
}
10002048:	1c28      	adds	r0, r5, #0
1000204a:	b005      	add	sp, #20
1000204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000204e:	46c0      	nop			; (mov r8, r8)
10002050:	00000405 	.word	0x00000405

10002054 <optiga_crypt_set_comms_params>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
    switch (parameter_type)
10002054:	2901      	cmp	r1, #1
10002056:	d003      	beq.n	10002060 <optiga_crypt_set_comms_params+0xc>
10002058:	2902      	cmp	r1, #2
1000205a:	d103      	bne.n	10002064 <optiga_crypt_set_comms_params+0x10>
            me->protection_level = value;
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
1000205c:	302f      	adds	r0, #47	; 0x2f
1000205e:	e000      	b.n	10002062 <optiga_crypt_set_comms_params+0xe>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
10002060:	302e      	adds	r0, #46	; 0x2e
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
10002062:	7002      	strb	r2, [r0, #0]
        default:
        {
            break;
        }
    }
}
10002064:	4770      	bx	lr
	...

10002068 <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
10002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_crypt_t * me = NULL;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
1000206a:	2900      	cmp	r1, #0
1000206c:	d101      	bne.n	10002072 <optiga_crypt_create+0xa>

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
    optiga_crypt_t * me = NULL;
1000206e:	2400      	movs	r4, #0
10002070:	e01e      	b.n	100020b0 <optiga_crypt_create+0x48>
10002072:	1c0f      	adds	r7, r1, #0
10002074:	1c05      	adds	r5, r0, #0
        if (NULL == handler)
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
10002076:	2130      	movs	r1, #48	; 0x30
10002078:	2001      	movs	r0, #1
1000207a:	1c16      	adds	r6, r2, #0
1000207c:	f00a fc44 	bl	1000c908 <calloc>
10002080:	1e04      	subs	r4, r0, #0
        if (NULL == me)
10002082:	d0f4      	beq.n	1000206e <optiga_crypt_create+0x6>

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
10002084:	1c03      	adds	r3, r0, #0
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
10002086:	2200      	movs	r2, #0
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
10002088:	2101      	movs	r1, #1
1000208a:	332f      	adds	r3, #47	; 0x2f
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
1000208c:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
1000208e:	6287      	str	r7, [r0, #40]	; 0x28
        me->caller_context = caller_context;
10002090:	6246      	str	r6, [r0, #36]	; 0x24
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
10002092:	3b01      	subs	r3, #1

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
10002094:	7059      	strb	r1, [r3, #1]
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
10002096:	1c28      	adds	r0, r5, #0
        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
10002098:	701a      	strb	r2, [r3, #0]
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
1000209a:	4906      	ldr	r1, [pc, #24]	; (100020b4 <optiga_crypt_create+0x4c>)
1000209c:	1c22      	adds	r2, r4, #0
1000209e:	f004 f9b3 	bl	10006408 <optiga_cmd_create>
100020a2:	1e05      	subs	r5, r0, #0
100020a4:	6220      	str	r0, [r4, #32]
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
100020a6:	d103      	bne.n	100020b0 <optiga_crypt_create+0x48>
        {
            pal_os_free(me);
100020a8:	1c20      	adds	r0, r4, #0
100020aa:	f00a fc65 	bl	1000c978 <free>
            me = NULL;
100020ae:	1c2c      	adds	r4, r5, #0
        }

    } while (FALSE);

    return (me);
}
100020b0:	1c20      	adds	r0, r4, #0
100020b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100020b4:	10001d2d 	.word	0x10001d2d

100020b8 <optiga_crypt_destroy>:

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
100020b8:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
100020ba:	2800      	cmp	r0, #0
100020bc:	d00b      	beq.n	100020d6 <optiga_crypt_destroy+0x1e>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
100020be:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
100020c0:	2b01      	cmp	r3, #1
100020c2:	d00a      	beq.n	100020da <optiga_crypt_destroy+0x22>
100020c4:	1c04      	adds	r4, r0, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
100020c6:	6a00      	ldr	r0, [r0, #32]
100020c8:	f004 f9f8 	bl	100064bc <optiga_cmd_destroy>
100020cc:	1c05      	adds	r5, r0, #0
        pal_os_free(me);
100020ce:	1c20      	adds	r0, r4, #0
100020d0:	f00a fc52 	bl	1000c978 <free>
100020d4:	e002      	b.n	100020dc <optiga_crypt_destroy+0x24>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
100020d6:	4d02      	ldr	r5, [pc, #8]	; (100020e0 <optiga_crypt_destroy+0x28>)
100020d8:	e000      	b.n	100020dc <optiga_crypt_destroy+0x24>
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
100020da:	4d02      	ldr	r5, [pc, #8]	; (100020e4 <optiga_crypt_destroy+0x2c>)
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);

    } while (FALSE);
    return (return_value);
}
100020dc:	1c28      	adds	r0, r5, #0
100020de:	bd38      	pop	{r3, r4, r5, pc}
100020e0:	00000403 	.word	0x00000403
100020e4:	00000405 	.word	0x00000405

100020e8 <optiga_crypt_random>:
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
optiga_lib_status_t optiga_crypt_random(optiga_crypt_t * me,
                                        optiga_rng_type_t rng_type,
                                        uint8_t * random_data,
                                        uint16_t random_data_length)
{
100020e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100020ea:	1c04      	adds	r4, r0, #0
100020ec:	1c0f      	adds	r7, r1, #0
100020ee:	1c15      	adds	r5, r2, #0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100020f0:	480c      	ldr	r0, [pc, #48]	; (10002124 <optiga_crypt_random+0x3c>)
100020f2:	490d      	ldr	r1, [pc, #52]	; (10002128 <optiga_crypt_random+0x40>)
100020f4:	4a0d      	ldr	r2, [pc, #52]	; (1000212c <optiga_crypt_random+0x44>)
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
optiga_lib_status_t optiga_crypt_random(optiga_crypt_t * me,
                                        optiga_rng_type_t rng_type,
                                        uint8_t * random_data,
                                        uint16_t random_data_length)
{
100020f6:	1c1e      	adds	r6, r3, #0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100020f8:	f002 fb1e 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
100020fc:	2c00      	cmp	r4, #0
100020fe:	d00e      	beq.n	1000211e <optiga_crypt_random+0x36>
10002100:	6a23      	ldr	r3, [r4, #32]
10002102:	2b00      	cmp	r3, #0
10002104:	d00b      	beq.n	1000211e <optiga_crypt_random+0x36>
10002106:	2d00      	cmp	r5, #0
10002108:	d009      	beq.n	1000211e <optiga_crypt_random+0x36>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        return_value = optiga_crypt_get_random(me,
1000210a:	2300      	movs	r3, #0
1000210c:	1c20      	adds	r0, r4, #0
1000210e:	9300      	str	r3, [sp, #0]
10002110:	9301      	str	r3, [sp, #4]
10002112:	1c39      	adds	r1, r7, #0
10002114:	1c2a      	adds	r2, r5, #0
10002116:	1c33      	adds	r3, r6, #0
10002118:	f7ff fe16 	bl	10001d48 <optiga_crypt_get_random>
1000211c:	e000      	b.n	10002120 <optiga_crypt_random+0x38>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
1000211e:	4804      	ldr	r0, [pc, #16]	; (10002130 <optiga_crypt_random+0x48>)
                                               NULL,
                                               0x00);
    } while (FALSE);

    return (return_value);
}
10002120:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10002122:	46c0      	nop			; (mov r8, r8)
10002124:	1000d43e 	.word	0x1000d43e
10002128:	1000d452 	.word	0x1000d452
1000212c:	1000d2dc 	.word	0x1000d2dc
10002130:	00000403 	.word	0x00000403

10002134 <optiga_crypt_hash_start>:
#endif //OPTIGA_CRYPT_RANDOM_ENABLED

#ifdef OPTIGA_CRYPT_HASH_ENABLED
optiga_lib_status_t optiga_crypt_hash_start(optiga_crypt_t * me,
                                            optiga_hash_context_t * hash_ctx)
{
10002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_hash_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002136:	4a1f      	ldr	r2, [pc, #124]	; (100021b4 <optiga_crypt_hash_start+0x80>)
#endif //OPTIGA_CRYPT_RANDOM_ENABLED

#ifdef OPTIGA_CRYPT_HASH_ENABLED
optiga_lib_status_t optiga_crypt_hash_start(optiga_crypt_t * me,
                                            optiga_hash_context_t * hash_ctx)
{
10002138:	1c04      	adds	r4, r0, #0
1000213a:	1c0d      	adds	r5, r1, #0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_hash_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
1000213c:	481e      	ldr	r0, [pc, #120]	; (100021b8 <optiga_crypt_hash_start+0x84>)
1000213e:	491f      	ldr	r1, [pc, #124]	; (100021bc <optiga_crypt_hash_start+0x88>)
10002140:	f002 fafa 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == hash_ctx))
10002144:	2c00      	cmp	r4, #0
10002146:	d02c      	beq.n	100021a2 <optiga_crypt_hash_start+0x6e>
10002148:	6a27      	ldr	r7, [r4, #32]
1000214a:	2f00      	cmp	r7, #0
1000214c:	d029      	beq.n	100021a2 <optiga_crypt_hash_start+0x6e>
1000214e:	2d00      	cmp	r5, #0
10002150:	d027      	beq.n	100021a2 <optiga_crypt_hash_start+0x6e>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
10002152:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
10002154:	2b01      	cmp	r3, #1
10002156:	d026      	beq.n	100021a6 <optiga_crypt_hash_start+0x72>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10002158:	2601      	movs	r6, #1
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
1000215a:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
1000215c:	85a6      	strh	r6, [r4, #44]	; 0x2c
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
1000215e:	2220      	movs	r2, #32
10002160:	1c20      	adds	r0, r4, #0
10002162:	f00a fc2b 	bl	1000c9bc <memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10002166:	1c23      	adds	r3, r4, #0
10002168:	332e      	adds	r3, #46	; 0x2e
1000216a:	7819      	ldrb	r1, [r3, #0]
1000216c:	1c38      	adds	r0, r7, #0
1000216e:	2200      	movs	r2, #0
10002170:	f004 f93e 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10002174:	1c23      	adds	r3, r4, #0
10002176:	1c32      	adds	r2, r6, #0
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_START;
10002178:	2600      	movs	r6, #0
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
1000217a:	332f      	adds	r3, #47	; 0x2f
1000217c:	7819      	ldrb	r1, [r3, #0]
1000217e:	6a20      	ldr	r0, [r4, #32]
10002180:	f004 f936 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_START;
        p_params->p_hash_context = hash_ctx;
10002184:	60a5      	str	r5, [r4, #8]
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_START;
10002186:	7326      	strb	r6, [r4, #12]
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = 0;
10002188:	61e6      	str	r6, [r4, #28]
        p_params->p_hash_data = NULL;
1000218a:	6066      	str	r6, [r4, #4]
        p_params->p_hash_oid = NULL;
1000218c:	6026      	str	r6, [r4, #0]

        return_value = optiga_cmd_calc_hash(me->my_cmd,
1000218e:	79a9      	ldrb	r1, [r5, #6]
10002190:	6a20      	ldr	r0, [r4, #32]
10002192:	1c22      	adds	r2, r4, #0
10002194:	f004 fb7e 	bl	10006894 <optiga_cmd_calc_hash>
10002198:	1e05      	subs	r5, r0, #0
                                            hash_ctx->hash_algo,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
1000219a:	42b5      	cmp	r5, r6
1000219c:	d004      	beq.n	100021a8 <optiga_crypt_hash_start+0x74>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
1000219e:	85a6      	strh	r6, [r4, #44]	; 0x2c
100021a0:	e002      	b.n	100021a8 <optiga_crypt_hash_start+0x74>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == hash_ctx))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
100021a2:	4d07      	ldr	r5, [pc, #28]	; (100021c0 <optiga_crypt_hash_start+0x8c>)
100021a4:	e000      	b.n	100021a8 <optiga_crypt_hash_start+0x74>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
100021a6:	4d07      	ldr	r5, [pc, #28]	; (100021c4 <optiga_crypt_hash_start+0x90>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
100021a8:	1c20      	adds	r0, r4, #0
100021aa:	f7ff fdc7 	bl	10001d3c <optiga_crypt_reset_protection_level>

    return (return_value);
}
100021ae:	1c28      	adds	r0, r5, #0
100021b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100021b2:	46c0      	nop			; (mov r8, r8)
100021b4:	1000d2dc 	.word	0x1000d2dc
100021b8:	1000d4ce 	.word	0x1000d4ce
100021bc:	1000d452 	.word	0x1000d452
100021c0:	00000403 	.word	0x00000403
100021c4:	00000405 	.word	0x00000405

100021c8 <optiga_crypt_hash_update>:

optiga_lib_status_t optiga_crypt_hash_update(optiga_crypt_t * me,
                                             optiga_hash_context_t * hash_ctx,
                                             uint8_t source_of_data_to_hash,
                                             const void * data_to_hash)
{
100021c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100021ca:	1c04      	adds	r4, r0, #0
100021cc:	1c0d      	adds	r5, r1, #0
100021ce:	9201      	str	r2, [sp, #4]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_hash_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100021d0:	4825      	ldr	r0, [pc, #148]	; (10002268 <optiga_crypt_hash_update+0xa0>)
100021d2:	4926      	ldr	r1, [pc, #152]	; (1000226c <optiga_crypt_hash_update+0xa4>)
100021d4:	4a26      	ldr	r2, [pc, #152]	; (10002270 <optiga_crypt_hash_update+0xa8>)

optiga_lib_status_t optiga_crypt_hash_update(optiga_crypt_t * me,
                                             optiga_hash_context_t * hash_ctx,
                                             uint8_t source_of_data_to_hash,
                                             const void * data_to_hash)
{
100021d6:	1c1e      	adds	r6, r3, #0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_hash_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100021d8:	f002 faae 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
100021dc:	2c00      	cmp	r4, #0
100021de:	d03b      	beq.n	10002258 <optiga_crypt_hash_update+0x90>
100021e0:	6a27      	ldr	r7, [r4, #32]
100021e2:	2f00      	cmp	r7, #0
100021e4:	d038      	beq.n	10002258 <optiga_crypt_hash_update+0x90>
100021e6:	2d00      	cmp	r5, #0
100021e8:	d036      	beq.n	10002258 <optiga_crypt_hash_update+0x90>
            (NULL == hash_ctx) || (NULL == data_to_hash))
100021ea:	2e00      	cmp	r6, #0
100021ec:	d034      	beq.n	10002258 <optiga_crypt_hash_update+0x90>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
100021ee:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
100021f0:	2b01      	cmp	r3, #1
100021f2:	d033      	beq.n	1000225c <optiga_crypt_hash_update+0x94>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100021f4:	2301      	movs	r3, #1
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
100021f6:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100021f8:	85a3      	strh	r3, [r4, #44]	; 0x2c
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
100021fa:	2220      	movs	r2, #32
100021fc:	1c20      	adds	r0, r4, #0
100021fe:	f00a fbdd 	bl	1000c9bc <memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10002202:	1c23      	adds	r3, r4, #0
10002204:	332e      	adds	r3, #46	; 0x2e
10002206:	7819      	ldrb	r1, [r3, #0]
10002208:	1c38      	adds	r0, r7, #0
1000220a:	2200      	movs	r2, #0
1000220c:	f004 f8f0 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10002210:	1c23      	adds	r3, r4, #0
10002212:	332f      	adds	r3, #47	; 0x2f
10002214:	7819      	ldrb	r1, [r3, #0]
10002216:	6a20      	ldr	r0, [r4, #32]
10002218:	2201      	movs	r2, #1
1000221a:	f004 f8e9 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        p_params->source_of_data_to_hash = source_of_data_to_hash;
1000221e:	466b      	mov	r3, sp
10002220:	791b      	ldrb	r3, [r3, #4]
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_CONTINUE;
        p_params->p_hash_context = hash_ctx;
10002222:	60a5      	str	r5, [r4, #8]
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->source_of_data_to_hash = source_of_data_to_hash;
10002224:	7363      	strb	r3, [r4, #13]
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_CONTINUE;
10002226:	2302      	movs	r3, #2
10002228:	7323      	strb	r3, [r4, #12]
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = p_params->p_hash_context->context_buffer_length;
1000222a:	88ab      	ldrh	r3, [r5, #4]
1000222c:	61e3      	str	r3, [r4, #28]
        p_params->p_hash_data = NULL;
1000222e:	2300      	movs	r3, #0
10002230:	6063      	str	r3, [r4, #4]
        p_params->p_hash_oid = NULL;
10002232:	6023      	str	r3, [r4, #0]

        if (source_of_data_to_hash)
10002234:	9b01      	ldr	r3, [sp, #4]
10002236:	2b00      	cmp	r3, #0
10002238:	d001      	beq.n	1000223e <optiga_crypt_hash_update+0x76>
        {
            p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
1000223a:	6066      	str	r6, [r4, #4]
1000223c:	e002      	b.n	10002244 <optiga_crypt_hash_update+0x7c>
        }
        else
        {
            p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
1000223e:	2312      	movs	r3, #18
            p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
10002240:	6026      	str	r6, [r4, #0]
        {
            p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
        }
        else
        {
            p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
10002242:	7323      	strb	r3, [r4, #12]
            p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
        }

        return_value = optiga_cmd_calc_hash(me->my_cmd,
10002244:	79a9      	ldrb	r1, [r5, #6]
10002246:	6a20      	ldr	r0, [r4, #32]
10002248:	1c22      	adds	r2, r4, #0
1000224a:	f004 fb23 	bl	10006894 <optiga_cmd_calc_hash>
1000224e:	1e05      	subs	r5, r0, #0
                                            hash_ctx->hash_algo,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10002250:	d005      	beq.n	1000225e <optiga_crypt_hash_update+0x96>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10002252:	2300      	movs	r3, #0
10002254:	85a3      	strh	r3, [r4, #44]	; 0x2c
10002256:	e002      	b.n	1000225e <optiga_crypt_hash_update+0x96>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == hash_ctx) || (NULL == data_to_hash))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10002258:	4d06      	ldr	r5, [pc, #24]	; (10002274 <optiga_crypt_hash_update+0xac>)
1000225a:	e000      	b.n	1000225e <optiga_crypt_hash_update+0x96>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
1000225c:	4d06      	ldr	r5, [pc, #24]	; (10002278 <optiga_crypt_hash_update+0xb0>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
1000225e:	1c20      	adds	r0, r4, #0
10002260:	f7ff fd6c 	bl	10001d3c <optiga_crypt_reset_protection_level>

    return (return_value);
}
10002264:	1c28      	adds	r0, r5, #0
10002266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10002268:	1000d4e6 	.word	0x1000d4e6
1000226c:	1000d452 	.word	0x1000d452
10002270:	1000d2dc 	.word	0x1000d2dc
10002274:	00000403 	.word	0x00000403
10002278:	00000405 	.word	0x00000405

1000227c <optiga_crypt_hash_finalize>:

optiga_lib_status_t optiga_crypt_hash_finalize(optiga_crypt_t * me,
                                               optiga_hash_context_t * hash_ctx,
                                               uint8_t * hash_output)
{
1000227c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000227e:	1c04      	adds	r4, r0, #0
10002280:	1c0d      	adds	r5, r1, #0
10002282:	9201      	str	r2, [sp, #4]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_hash_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002284:	4821      	ldr	r0, [pc, #132]	; (1000230c <optiga_crypt_hash_finalize+0x90>)
10002286:	4922      	ldr	r1, [pc, #136]	; (10002310 <optiga_crypt_hash_finalize+0x94>)
10002288:	4a22      	ldr	r2, [pc, #136]	; (10002314 <optiga_crypt_hash_finalize+0x98>)
1000228a:	f002 fa55 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
1000228e:	2c00      	cmp	r4, #0
10002290:	d033      	beq.n	100022fa <optiga_crypt_hash_finalize+0x7e>
10002292:	6a27      	ldr	r7, [r4, #32]
10002294:	2f00      	cmp	r7, #0
10002296:	d030      	beq.n	100022fa <optiga_crypt_hash_finalize+0x7e>
10002298:	2d00      	cmp	r5, #0
1000229a:	d02e      	beq.n	100022fa <optiga_crypt_hash_finalize+0x7e>
            (NULL == hash_ctx) || (NULL == hash_output))
1000229c:	9b01      	ldr	r3, [sp, #4]
1000229e:	2b00      	cmp	r3, #0
100022a0:	d02b      	beq.n	100022fa <optiga_crypt_hash_finalize+0x7e>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
100022a2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
100022a4:	2b01      	cmp	r3, #1
100022a6:	d02a      	beq.n	100022fe <optiga_crypt_hash_finalize+0x82>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100022a8:	2601      	movs	r6, #1
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
100022aa:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100022ac:	85a6      	strh	r6, [r4, #44]	; 0x2c
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
100022ae:	2220      	movs	r2, #32
100022b0:	1c20      	adds	r0, r4, #0
100022b2:	f00a fb83 	bl	1000c9bc <memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100022b6:	1c23      	adds	r3, r4, #0
100022b8:	332e      	adds	r3, #46	; 0x2e
100022ba:	7819      	ldrb	r1, [r3, #0]
100022bc:	1c38      	adds	r0, r7, #0
100022be:	2200      	movs	r2, #0
100022c0:	f004 f896 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
100022c4:	1c23      	adds	r3, r4, #0
100022c6:	332f      	adds	r3, #47	; 0x2f
100022c8:	7819      	ldrb	r1, [r3, #0]
100022ca:	1c32      	adds	r2, r6, #0
100022cc:	6a20      	ldr	r0, [r4, #32]
100022ce:	f004 f88f 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        p_params->p_out_digest = hash_output;
100022d2:	9b01      	ldr	r3, [sp, #4]
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = p_params->p_hash_context->context_buffer_length;
        p_params->p_hash_data = NULL;
100022d4:	2600      	movs	r6, #0
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_out_digest = hash_output;
100022d6:	6163      	str	r3, [r4, #20]
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
100022d8:	2303      	movs	r3, #3
        p_params->p_hash_context = hash_ctx;
100022da:	60a5      	str	r5, [r4, #8]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_out_digest = hash_output;
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
100022dc:	7323      	strb	r3, [r4, #12]
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = p_params->p_hash_context->context_buffer_length;
100022de:	88ab      	ldrh	r3, [r5, #4]
        p_params->p_hash_data = NULL;
100022e0:	6066      	str	r6, [r4, #4]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_out_digest = hash_output;
        p_params->hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = p_params->p_hash_context->context_buffer_length;
100022e2:	61e3      	str	r3, [r4, #28]
        p_params->p_hash_data = NULL;
        p_params->p_hash_oid = NULL;
100022e4:	6026      	str	r6, [r4, #0]

        return_value = optiga_cmd_calc_hash(me->my_cmd,
100022e6:	79a9      	ldrb	r1, [r5, #6]
100022e8:	6a20      	ldr	r0, [r4, #32]
100022ea:	1c22      	adds	r2, r4, #0
100022ec:	f004 fad2 	bl	10006894 <optiga_cmd_calc_hash>
100022f0:	1e05      	subs	r5, r0, #0
                                            hash_ctx->hash_algo,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
100022f2:	42b5      	cmp	r5, r6
100022f4:	d004      	beq.n	10002300 <optiga_crypt_hash_finalize+0x84>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
100022f6:	85a6      	strh	r6, [r4, #44]	; 0x2c
100022f8:	e002      	b.n	10002300 <optiga_crypt_hash_finalize+0x84>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == hash_ctx) || (NULL == hash_output))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
100022fa:	4d07      	ldr	r5, [pc, #28]	; (10002318 <optiga_crypt_hash_finalize+0x9c>)
100022fc:	e000      	b.n	10002300 <optiga_crypt_hash_finalize+0x84>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
100022fe:	4d07      	ldr	r5, [pc, #28]	; (1000231c <optiga_crypt_hash_finalize+0xa0>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10002300:	1c20      	adds	r0, r4, #0
10002302:	f7ff fd1b 	bl	10001d3c <optiga_crypt_reset_protection_level>

    return (return_value);
}
10002306:	1c28      	adds	r0, r5, #0
10002308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000230a:	46c0      	nop			; (mov r8, r8)
1000230c:	1000d36c 	.word	0x1000d36c
10002310:	1000d452 	.word	0x1000d452
10002314:	1000d2dc 	.word	0x1000d2dc
10002318:	00000403 	.word	0x00000403
1000231c:	00000405 	.word	0x00000405

10002320 <optiga_crypt_ecc_generate_keypair>:
                                                      uint8_t key_usage,
                                                      bool_t export_private_key,
                                                      void * private_key,
                                                      uint8_t * public_key,
                                                      uint16_t * public_key_length)
{
10002320:	b5f0      	push	{r4, r5, r6, r7, lr}
10002322:	1c1c      	adds	r4, r3, #0
10002324:	1c07      	adds	r7, r0, #0
10002326:	1c0e      	adds	r6, r1, #0
10002328:	1c15      	adds	r5, r2, #0
1000232a:	b085      	sub	sp, #20
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
1000232c:	4809      	ldr	r0, [pc, #36]	; (10002354 <optiga_crypt_ecc_generate_keypair+0x34>)
1000232e:	490a      	ldr	r1, [pc, #40]	; (10002358 <optiga_crypt_ecc_generate_keypair+0x38>)
10002330:	4a0a      	ldr	r2, [pc, #40]	; (1000235c <optiga_crypt_ecc_generate_keypair+0x3c>)
10002332:	f002 fa01 	bl	10004738 <optiga_lib_print_message>
    return (optiga_crypt_generate_keypair(me,
10002336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002338:	1c38      	adds	r0, r7, #0
1000233a:	9300      	str	r3, [sp, #0]
1000233c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000233e:	1c31      	adds	r1, r6, #0
10002340:	9301      	str	r3, [sp, #4]
10002342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002344:	1c2a      	adds	r2, r5, #0
10002346:	9302      	str	r3, [sp, #8]
10002348:	1c23      	adds	r3, r4, #0
1000234a:	f7ff fd39 	bl	10001dc0 <optiga_crypt_generate_keypair>
                                         key_usage,
                                         export_private_key,
                                         private_key,
                                         public_key,
                                         public_key_length));
}
1000234e:	b005      	add	sp, #20
10002350:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002352:	46c0      	nop			; (mov r8, r8)
10002354:	1000d3ca 	.word	0x1000d3ca
10002358:	1000d452 	.word	0x1000d452
1000235c:	1000d2dc 	.word	0x1000d2dc

10002360 <optiga_crypt_ecdsa_sign>:
                                            const uint8_t * digest,
                                            uint8_t digest_length,
                                            optiga_key_id_t private_key,
                                            uint8_t * signature,
                                            uint16_t * signature_length)
{
10002360:	b5f0      	push	{r4, r5, r6, r7, lr}
10002362:	1c1f      	adds	r7, r3, #0
10002364:	1c06      	adds	r6, r0, #0
10002366:	1c0d      	adds	r5, r1, #0
10002368:	1c14      	adds	r4, r2, #0
1000236a:	b085      	sub	sp, #20
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
1000236c:	4808      	ldr	r0, [pc, #32]	; (10002390 <optiga_crypt_ecdsa_sign+0x30>)
1000236e:	4909      	ldr	r1, [pc, #36]	; (10002394 <optiga_crypt_ecdsa_sign+0x34>)
10002370:	4a09      	ldr	r2, [pc, #36]	; (10002398 <optiga_crypt_ecdsa_sign+0x38>)
10002372:	f002 f9e1 	bl	10004738 <optiga_lib_print_message>
    return (optiga_crypt_sign(me,
10002376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002378:	9700      	str	r7, [sp, #0]
1000237a:	9301      	str	r3, [sp, #4]
1000237c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000237e:	1c30      	adds	r0, r6, #0
10002380:	9302      	str	r3, [sp, #8]
10002382:	2111      	movs	r1, #17
10002384:	1c2a      	adds	r2, r5, #0
10002386:	1c23      	adds	r3, r4, #0
10002388:	f7ff fd68 	bl	10001e5c <optiga_crypt_sign.isra.0>
                              digest_length,
                              private_key,
                              signature,
                              signature_length,
                              0x0000));
}
1000238c:	b005      	add	sp, #20
1000238e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002390:	1000d410 	.word	0x1000d410
10002394:	1000d452 	.word	0x1000d452
10002398:	1000d2dc 	.word	0x1000d2dc

1000239c <optiga_crypt_ecdsa_verify>:
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
1000239c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000239e:	1c06      	adds	r6, r0, #0
100023a0:	1c0d      	adds	r5, r1, #0
100023a2:	1c14      	adds	r4, r2, #0
100023a4:	b087      	sub	sp, #28
100023a6:	9304      	str	r3, [sp, #16]
100023a8:	ab0c      	add	r3, sp, #48	; 0x30
100023aa:	881b      	ldrh	r3, [r3, #0]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100023ac:	480b      	ldr	r0, [pc, #44]	; (100023dc <optiga_crypt_ecdsa_verify+0x40>)
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
100023ae:	9305      	str	r3, [sp, #20]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100023b0:	490b      	ldr	r1, [pc, #44]	; (100023e0 <optiga_crypt_ecdsa_verify+0x44>)
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
100023b2:	ab0d      	add	r3, sp, #52	; 0x34
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100023b4:	4a0b      	ldr	r2, [pc, #44]	; (100023e4 <optiga_crypt_ecdsa_verify+0x48>)
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
100023b6:	781f      	ldrb	r7, [r3, #0]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100023b8:	f002 f9be 	bl	10004738 <optiga_lib_print_message>
    return (optiga_crypt_verify(me,
100023bc:	9b04      	ldr	r3, [sp, #16]
100023be:	9702      	str	r7, [sp, #8]
100023c0:	9300      	str	r3, [sp, #0]
100023c2:	9b05      	ldr	r3, [sp, #20]
100023c4:	1c30      	adds	r0, r6, #0
100023c6:	9301      	str	r3, [sp, #4]
100023c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100023ca:	2111      	movs	r1, #17
100023cc:	9303      	str	r3, [sp, #12]
100023ce:	1c2a      	adds	r2, r5, #0
100023d0:	1c23      	adds	r3, r4, #0
100023d2:	f7ff fd93 	bl	10001efc <optiga_crypt_verify.isra.1>
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                0x0000));
}
100023d6:	b007      	add	sp, #28
100023d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100023da:	46c0      	nop			; (mov r8, r8)
100023dc:	1000d467 	.word	0x1000d467
100023e0:	1000d452 	.word	0x1000d452
100023e4:	1000d2dc 	.word	0x1000d2dc

100023e8 <optiga_crypt_ecdh>:
optiga_lib_status_t optiga_crypt_ecdh(optiga_crypt_t * me,
                                      optiga_key_id_t private_key,
                                      public_key_from_host_t * public_key,
                                      bool_t export_to_host,
                                      uint8_t * shared_secret)
{
100023e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100023ea:	1c04      	adds	r4, r0, #0
100023ec:	9101      	str	r1, [sp, #4]
100023ee:	1c16      	adds	r6, r2, #0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_ssec_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100023f0:	4824      	ldr	r0, [pc, #144]	; (10002484 <optiga_crypt_ecdh+0x9c>)
100023f2:	4925      	ldr	r1, [pc, #148]	; (10002488 <optiga_crypt_ecdh+0xa0>)
100023f4:	4a25      	ldr	r2, [pc, #148]	; (1000248c <optiga_crypt_ecdh+0xa4>)
optiga_lib_status_t optiga_crypt_ecdh(optiga_crypt_t * me,
                                      optiga_key_id_t private_key,
                                      public_key_from_host_t * public_key,
                                      bool_t export_to_host,
                                      uint8_t * shared_secret)
{
100023f6:	9300      	str	r3, [sp, #0]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_ssec_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100023f8:	f002 f99e 	bl	10004738 <optiga_lib_print_message>

    do
    {

#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == public_key) ||
100023fc:	2c00      	cmp	r4, #0
100023fe:	d038      	beq.n	10002472 <optiga_crypt_ecdh+0x8a>
10002400:	6a27      	ldr	r7, [r4, #32]
10002402:	2f00      	cmp	r7, #0
10002404:	d035      	beq.n	10002472 <optiga_crypt_ecdh+0x8a>
10002406:	2e00      	cmp	r6, #0
10002408:	d033      	beq.n	10002472 <optiga_crypt_ecdh+0x8a>
1000240a:	6833      	ldr	r3, [r6, #0]
1000240c:	2b00      	cmp	r3, #0
1000240e:	d030      	beq.n	10002472 <optiga_crypt_ecdh+0x8a>
            (NULL == public_key->public_key) ||
10002410:	9b00      	ldr	r3, [sp, #0]
10002412:	2b01      	cmp	r3, #1
10002414:	d102      	bne.n	1000241c <optiga_crypt_ecdh+0x34>
            ((TRUE == export_to_host) && (NULL == shared_secret)))
10002416:	9b08      	ldr	r3, [sp, #32]
10002418:	2b00      	cmp	r3, #0
1000241a:	d02a      	beq.n	10002472 <optiga_crypt_ecdh+0x8a>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
1000241c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
1000241e:	2b01      	cmp	r3, #1
10002420:	d029      	beq.n	10002476 <optiga_crypt_ecdh+0x8e>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10002422:	2501      	movs	r5, #1

        p_params = (optiga_calc_ssec_params_t *)&(me->params.optiga_calc_ssec_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10002424:	2100      	movs	r1, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
10002426:	85a5      	strh	r5, [r4, #44]	; 0x2c

        p_params = (optiga_calc_ssec_params_t *)&(me->params.optiga_calc_ssec_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
10002428:	2220      	movs	r2, #32
1000242a:	1c20      	adds	r0, r4, #0
1000242c:	f00a fac6 	bl	1000c9bc <memset>

        p_params->private_key = private_key;
10002430:	466b      	mov	r3, sp
10002432:	889b      	ldrh	r3, [r3, #4]
        p_params->public_key = public_key;
10002434:	6026      	str	r6, [r4, #0]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;

        p_params = (optiga_calc_ssec_params_t *)&(me->params.optiga_calc_ssec_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->private_key = private_key;
10002436:	8123      	strh	r3, [r4, #8]
        p_params->public_key = public_key;
        p_params->export_to_host = export_to_host;
10002438:	466b      	mov	r3, sp
1000243a:	781b      	ldrb	r3, [r3, #0]
        p_params->shared_secret = shared_secret;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
1000243c:	1c38      	adds	r0, r7, #0
        p_params = (optiga_calc_ssec_params_t *)&(me->params.optiga_calc_ssec_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->private_key = private_key;
        p_params->public_key = public_key;
        p_params->export_to_host = export_to_host;
1000243e:	72a3      	strb	r3, [r4, #10]
        p_params->shared_secret = shared_secret;
10002440:	9b08      	ldr	r3, [sp, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10002442:	2200      	movs	r2, #0
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->private_key = private_key;
        p_params->public_key = public_key;
        p_params->export_to_host = export_to_host;
        p_params->shared_secret = shared_secret;
10002444:	6063      	str	r3, [r4, #4]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10002446:	1c23      	adds	r3, r4, #0
10002448:	332e      	adds	r3, #46	; 0x2e
1000244a:	7819      	ldrb	r1, [r3, #0]
1000244c:	f003 ffd0 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
10002450:	1c23      	adds	r3, r4, #0
10002452:	332f      	adds	r3, #47	; 0x2f
10002454:	7819      	ldrb	r1, [r3, #0]
10002456:	1c2a      	adds	r2, r5, #0
10002458:	6a20      	ldr	r0, [r4, #32]
1000245a:	f003 ffc9 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_calc_ssec(me->my_cmd, OPTIGA_CRYPT_ECDH_KEY_AGREEMENT_ALGORITHM,
1000245e:	1c29      	adds	r1, r5, #0
10002460:	6a20      	ldr	r0, [r4, #32]
10002462:	1c22      	adds	r2, r4, #0
10002464:	f004 f93c 	bl	100066e0 <optiga_cmd_calc_ssec>
10002468:	1e05      	subs	r5, r0, #0
                                            (optiga_calc_ssec_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
1000246a:	d005      	beq.n	10002478 <optiga_crypt_ecdh+0x90>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
1000246c:	2300      	movs	r3, #0
1000246e:	85a3      	strh	r3, [r4, #44]	; 0x2c
10002470:	e002      	b.n	10002478 <optiga_crypt_ecdh+0x90>
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == public_key) ||
            (NULL == public_key->public_key) ||
            ((TRUE == export_to_host) && (NULL == shared_secret)))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10002472:	4d07      	ldr	r5, [pc, #28]	; (10002490 <optiga_crypt_ecdh+0xa8>)
10002474:	e000      	b.n	10002478 <optiga_crypt_ecdh+0x90>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
10002476:	4d07      	ldr	r5, [pc, #28]	; (10002494 <optiga_crypt_ecdh+0xac>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10002478:	1c20      	adds	r0, r4, #0
1000247a:	f7ff fc5f 	bl	10001d3c <optiga_crypt_reset_protection_level>

    return (return_value);
}
1000247e:	1c28      	adds	r0, r5, #0
10002480:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10002482:	46c0      	nop			; (mov r8, r8)
10002484:	1000d4bc 	.word	0x1000d4bc
10002488:	1000d452 	.word	0x1000d452
1000248c:	1000d2dc 	.word	0x1000d2dc
10002490:	00000403 	.word	0x00000403
10002494:	00000405 	.word	0x00000405

10002498 <optiga_crypt_tls_prf_sha256>:
                                                const uint8_t * seed,
                                                uint16_t seed_length,
                                                uint16_t derived_key_length,
                                                bool_t export_to_host,
                                                uint8_t * derived_key)
{
10002498:	b5f0      	push	{r4, r5, r6, r7, lr}
1000249a:	b087      	sub	sp, #28
1000249c:	9303      	str	r3, [sp, #12]
1000249e:	ab0c      	add	r3, sp, #48	; 0x30
100024a0:	9202      	str	r2, [sp, #8]
100024a2:	cb04      	ldmia	r3!, {r2}
100024a4:	1c04      	adds	r4, r0, #0
100024a6:	881b      	ldrh	r3, [r3, #0]
100024a8:	9101      	str	r1, [sp, #4]
100024aa:	9304      	str	r3, [sp, #16]
100024ac:	ab0e      	add	r3, sp, #56	; 0x38
100024ae:	881b      	ldrh	r3, [r3, #0]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_derive_key_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100024b0:	482a      	ldr	r0, [pc, #168]	; (1000255c <optiga_crypt_tls_prf_sha256+0xc4>)
                                                const uint8_t * seed,
                                                uint16_t seed_length,
                                                uint16_t derived_key_length,
                                                bool_t export_to_host,
                                                uint8_t * derived_key)
{
100024b2:	9305      	str	r3, [sp, #20]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_derive_key_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100024b4:	492a      	ldr	r1, [pc, #168]	; (10002560 <optiga_crypt_tls_prf_sha256+0xc8>)
                                                const uint8_t * seed,
                                                uint16_t seed_length,
                                                uint16_t derived_key_length,
                                                bool_t export_to_host,
                                                uint8_t * derived_key)
{
100024b6:	ab0f      	add	r3, sp, #60	; 0x3c
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_derive_key_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100024b8:	4a2a      	ldr	r2, [pc, #168]	; (10002564 <optiga_crypt_tls_prf_sha256+0xcc>)
                                                const uint8_t * seed,
                                                uint16_t seed_length,
                                                uint16_t derived_key_length,
                                                bool_t export_to_host,
                                                uint8_t * derived_key)
{
100024ba:	781e      	ldrb	r6, [r3, #0]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_derive_key_params_t * p_params;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100024bc:	f002 f93c 	bl	10004738 <optiga_lib_print_message>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == seed) ||
100024c0:	2c00      	cmp	r4, #0
100024c2:	d042      	beq.n	1000254a <optiga_crypt_tls_prf_sha256+0xb2>
100024c4:	6a27      	ldr	r7, [r4, #32]
100024c6:	2f00      	cmp	r7, #0
100024c8:	d03f      	beq.n	1000254a <optiga_crypt_tls_prf_sha256+0xb2>
100024ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100024cc:	2b00      	cmp	r3, #0
100024ce:	d03c      	beq.n	1000254a <optiga_crypt_tls_prf_sha256+0xb2>
100024d0:	2e01      	cmp	r6, #1
100024d2:	d102      	bne.n	100024da <optiga_crypt_tls_prf_sha256+0x42>
           ((TRUE == export_to_host) && (NULL == derived_key)))
100024d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
100024d6:	2b00      	cmp	r3, #0
100024d8:	d037      	beq.n	1000254a <optiga_crypt_tls_prf_sha256+0xb2>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
100024da:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
100024dc:	2b01      	cmp	r3, #1
100024de:	d036      	beq.n	1000254e <optiga_crypt_tls_prf_sha256+0xb6>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100024e0:	2501      	movs	r5, #1

        p_params = (optiga_derive_key_params_t *)&(me->params.optiga_derive_key_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
100024e2:	2100      	movs	r1, #0
100024e4:	2220      	movs	r2, #32
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
100024e6:	85a5      	strh	r5, [r4, #44]	; 0x2c

        p_params = (optiga_derive_key_params_t *)&(me->params.optiga_derive_key_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
100024e8:	1c20      	adds	r0, r4, #0
100024ea:	f00a fa67 	bl	1000c9bc <memset>

        p_params->input_shared_secret_oid = secret;
100024ee:	466b      	mov	r3, sp
100024f0:	889b      	ldrh	r3, [r3, #4]
        p_params->seed = (const uint8_t *)seed;
        p_params->seed_length = seed_length;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_COMMAND_PROTECTION;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100024f2:	1c38      	adds	r0, r7, #0
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;

        p_params = (optiga_derive_key_params_t *)&(me->params.optiga_derive_key_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->input_shared_secret_oid = secret;
100024f4:	8023      	strh	r3, [r4, #0]
        p_params->label = label;
100024f6:	9b02      	ldr	r3, [sp, #8]
        p_params->seed = (const uint8_t *)seed;
        p_params->seed_length = seed_length;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_COMMAND_PROTECTION;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
100024f8:	2200      	movs	r2, #0

        p_params = (optiga_derive_key_params_t *)&(me->params.optiga_derive_key_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->input_shared_secret_oid = secret;
        p_params->label = label;
100024fa:	60e3      	str	r3, [r4, #12]
        p_params->label_length = label_length;
100024fc:	466b      	mov	r3, sp
100024fe:	899b      	ldrh	r3, [r3, #12]
10002500:	8063      	strh	r3, [r4, #2]
        p_params->seed = (const uint8_t *)seed;
10002502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002504:	60a3      	str	r3, [r4, #8]
        p_params->seed_length = seed_length;
10002506:	466b      	mov	r3, sp
10002508:	8a1b      	ldrh	r3, [r3, #16]
1000250a:	80a3      	strh	r3, [r4, #4]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_COMMAND_PROTECTION;
1000250c:	1c23      	adds	r3, r4, #0
1000250e:	332e      	adds	r3, #46	; 0x2e
10002510:	7819      	ldrb	r1, [r3, #0]
10002512:	4329      	orrs	r1, r5
10002514:	7019      	strb	r1, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
10002516:	f003 ff6b 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
1000251a:	1c23      	adds	r3, r4, #0
1000251c:	332f      	adds	r3, #47	; 0x2f
1000251e:	7819      	ldrb	r1, [r3, #0]
10002520:	6a20      	ldr	r0, [r4, #32]
10002522:	1c2a      	adds	r2, r5, #0
10002524:	f003 ff64 	bl	100063f0 <optiga_cmd_set_shielded_connection_option>
        p_params->derived_key_length = derived_key_length;
10002528:	466b      	mov	r3, sp
1000252a:	8a9b      	ldrh	r3, [r3, #20]
1000252c:	80e3      	strh	r3, [r4, #6]
        if (FALSE != export_to_host)
1000252e:	2e00      	cmp	r6, #0
10002530:	d001      	beq.n	10002536 <optiga_crypt_tls_prf_sha256+0x9e>
        {
            p_params->derived_key = (uint8_t *)derived_key;
10002532:	9b10      	ldr	r3, [sp, #64]	; 0x40
10002534:	6123      	str	r3, [r4, #16]
        }

        return_value = optiga_cmd_derive_key(me->my_cmd,
10002536:	6a20      	ldr	r0, [r4, #32]
10002538:	2101      	movs	r1, #1
1000253a:	1c22      	adds	r2, r4, #0
1000253c:	f004 f900 	bl	10006740 <optiga_cmd_derive_key>
10002540:	1e05      	subs	r5, r0, #0
                                             0x01,
                                             (optiga_derive_key_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
10002542:	d005      	beq.n	10002550 <optiga_crypt_tls_prf_sha256+0xb8>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
10002544:	2300      	movs	r3, #0
10002546:	85a3      	strh	r3, [r4, #44]	; 0x2c
10002548:	e002      	b.n	10002550 <optiga_crypt_tls_prf_sha256+0xb8>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == seed) ||
           ((TRUE == export_to_host) && (NULL == derived_key)))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
1000254a:	4d07      	ldr	r5, [pc, #28]	; (10002568 <optiga_crypt_tls_prf_sha256+0xd0>)
1000254c:	e000      	b.n	10002550 <optiga_crypt_tls_prf_sha256+0xb8>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
1000254e:	4d07      	ldr	r5, [pc, #28]	; (1000256c <optiga_crypt_tls_prf_sha256+0xd4>)
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
10002550:	1c20      	adds	r0, r4, #0
10002552:	f7ff fbf3 	bl	10001d3c <optiga_crypt_reset_protection_level>

    return (return_value);
}
10002556:	1c28      	adds	r0, r5, #0
10002558:	b007      	add	sp, #28
1000255a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000255c:	1000d54c 	.word	0x1000d54c
10002560:	1000d452 	.word	0x1000d452
10002564:	1000d2dc 	.word	0x1000d2dc
10002568:	00000403 	.word	0x00000403
1000256c:	00000405 	.word	0x00000405

10002570 <optiga_crypt_rsa_generate_keypair>:
                                                      uint8_t key_usage,
                                                      bool_t export_private_key,
                                                      void * private_key,
                                                      uint8_t * public_key,
                                                      uint16_t * public_key_length)
{
10002570:	b5f0      	push	{r4, r5, r6, r7, lr}
10002572:	1c1c      	adds	r4, r3, #0
10002574:	1c07      	adds	r7, r0, #0
10002576:	1c0e      	adds	r6, r1, #0
10002578:	1c15      	adds	r5, r2, #0
1000257a:	b085      	sub	sp, #20
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
1000257c:	4809      	ldr	r0, [pc, #36]	; (100025a4 <optiga_crypt_rsa_generate_keypair+0x34>)
1000257e:	490a      	ldr	r1, [pc, #40]	; (100025a8 <optiga_crypt_rsa_generate_keypair+0x38>)
10002580:	4a0a      	ldr	r2, [pc, #40]	; (100025ac <optiga_crypt_rsa_generate_keypair+0x3c>)
10002582:	f002 f8d9 	bl	10004738 <optiga_lib_print_message>
    return (optiga_crypt_generate_keypair(me,
10002586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002588:	1c38      	adds	r0, r7, #0
1000258a:	9300      	str	r3, [sp, #0]
1000258c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000258e:	1c31      	adds	r1, r6, #0
10002590:	9301      	str	r3, [sp, #4]
10002592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002594:	1c2a      	adds	r2, r5, #0
10002596:	9302      	str	r3, [sp, #8]
10002598:	1c23      	adds	r3, r4, #0
1000259a:	f7ff fc11 	bl	10001dc0 <optiga_crypt_generate_keypair>
                                         key_usage,
                                         export_private_key,
                                         private_key,
                                         public_key,
                                         public_key_length));
}
1000259e:	b005      	add	sp, #20
100025a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100025a2:	46c0      	nop			; (mov r8, r8)
100025a4:	1000d3a8 	.word	0x1000d3a8
100025a8:	1000d452 	.word	0x1000d452
100025ac:	1000d2dc 	.word	0x1000d2dc

100025b0 <optiga_crypt_rsa_sign>:
                                          uint8_t digest_length,
                                          optiga_key_id_t private_key,
                                          uint8_t * signature,
                                          uint16_t * signature_length,
                                          uint16_t salt_length)
{
100025b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100025b2:	1c06      	adds	r6, r0, #0
100025b4:	1c0d      	adds	r5, r1, #0
100025b6:	1c14      	adds	r4, r2, #0
100025b8:	b087      	sub	sp, #28
100025ba:	9305      	str	r3, [sp, #20]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100025bc:	4809      	ldr	r0, [pc, #36]	; (100025e4 <optiga_crypt_rsa_sign+0x34>)
                                          uint8_t digest_length,
                                          optiga_key_id_t private_key,
                                          uint8_t * signature,
                                          uint16_t * signature_length,
                                          uint16_t salt_length)
{
100025be:	ab0c      	add	r3, sp, #48	; 0x30
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100025c0:	4909      	ldr	r1, [pc, #36]	; (100025e8 <optiga_crypt_rsa_sign+0x38>)
100025c2:	4a0a      	ldr	r2, [pc, #40]	; (100025ec <optiga_crypt_rsa_sign+0x3c>)
                                          uint8_t digest_length,
                                          optiga_key_id_t private_key,
                                          uint8_t * signature,
                                          uint16_t * signature_length,
                                          uint16_t salt_length)
{
100025c4:	881f      	ldrh	r7, [r3, #0]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100025c6:	f002 f8b7 	bl	10004738 <optiga_lib_print_message>
    return (optiga_crypt_sign(me,
100025ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100025cc:	9700      	str	r7, [sp, #0]
100025ce:	9301      	str	r3, [sp, #4]
100025d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100025d2:	1c30      	adds	r0, r6, #0
100025d4:	9302      	str	r3, [sp, #8]
100025d6:	1c29      	adds	r1, r5, #0
100025d8:	1c22      	adds	r2, r4, #0
100025da:	9b05      	ldr	r3, [sp, #20]
100025dc:	f7ff fc3e 	bl	10001e5c <optiga_crypt_sign.isra.0>
                             digest_length,
                             private_key,
                             signature,
                             signature_length,
                             salt_length));
}
100025e0:	b007      	add	sp, #28
100025e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100025e4:	1000d428 	.word	0x1000d428
100025e8:	1000d452 	.word	0x1000d452
100025ec:	1000d2dc 	.word	0x1000d2dc

100025f0 <optiga_crypt_rsa_verify>:
                                            const uint8_t * signature,
                                            uint16_t signature_length,
                                            uint8_t public_key_source_type,
                                            const void * public_key,
                                            uint16_t salt_length)
{
100025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100025f2:	1c06      	adds	r6, r0, #0
100025f4:	1c0d      	adds	r5, r1, #0
100025f6:	1c14      	adds	r4, r2, #0
100025f8:	b087      	sub	sp, #28
100025fa:	9304      	str	r3, [sp, #16]
100025fc:	ab0c      	add	r3, sp, #48	; 0x30
100025fe:	cb04      	ldmia	r3!, {r2}
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002600:	480b      	ldr	r0, [pc, #44]	; (10002630 <optiga_crypt_rsa_verify+0x40>)
                                            const uint8_t * signature,
                                            uint16_t signature_length,
                                            uint8_t public_key_source_type,
                                            const void * public_key,
                                            uint16_t salt_length)
{
10002602:	881b      	ldrh	r3, [r3, #0]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002604:	490b      	ldr	r1, [pc, #44]	; (10002634 <optiga_crypt_rsa_verify+0x44>)
                                            const uint8_t * signature,
                                            uint16_t signature_length,
                                            uint8_t public_key_source_type,
                                            const void * public_key,
                                            uint16_t salt_length)
{
10002606:	9305      	str	r3, [sp, #20]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002608:	4a0b      	ldr	r2, [pc, #44]	; (10002638 <optiga_crypt_rsa_verify+0x48>)
                                            const uint8_t * signature,
                                            uint16_t signature_length,
                                            uint8_t public_key_source_type,
                                            const void * public_key,
                                            uint16_t salt_length)
{
1000260a:	ab0e      	add	r3, sp, #56	; 0x38
1000260c:	781f      	ldrb	r7, [r3, #0]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
1000260e:	f002 f893 	bl	10004738 <optiga_lib_print_message>
    return (optiga_crypt_verify(me,
10002612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002614:	9702      	str	r7, [sp, #8]
10002616:	9300      	str	r3, [sp, #0]
10002618:	9b05      	ldr	r3, [sp, #20]
1000261a:	1c30      	adds	r0, r6, #0
1000261c:	9301      	str	r3, [sp, #4]
1000261e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10002620:	1c29      	adds	r1, r5, #0
10002622:	9303      	str	r3, [sp, #12]
10002624:	1c22      	adds	r2, r4, #0
10002626:	9b04      	ldr	r3, [sp, #16]
10002628:	f7ff fc68 	bl	10001efc <optiga_crypt_verify.isra.1>
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                salt_length));
}
1000262c:	b007      	add	sp, #28
1000262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002630:	1000d4a4 	.word	0x1000d4a4
10002634:	1000d452 	.word	0x1000d452
10002638:	1000d2dc 	.word	0x1000d2dc

1000263c <optiga_crypt_rsa_encrypt_message>:
                                                     uint16_t label_length,
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
1000263c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000263e:	b089      	sub	sp, #36	; 0x24
10002640:	1c04      	adds	r4, r0, #0
10002642:	1c0e      	adds	r6, r1, #0
10002644:	1c15      	adds	r5, r2, #0
10002646:	9307      	str	r3, [sp, #28]

    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002648:	4814      	ldr	r0, [pc, #80]	; (1000269c <optiga_crypt_rsa_encrypt_message+0x60>)
                                                     uint16_t label_length,
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
1000264a:	ab10      	add	r3, sp, #64	; 0x40

    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
1000264c:	4914      	ldr	r1, [pc, #80]	; (100026a0 <optiga_crypt_rsa_encrypt_message+0x64>)
1000264e:	4a15      	ldr	r2, [pc, #84]	; (100026a4 <optiga_crypt_rsa_encrypt_message+0x68>)
                                                     uint16_t label_length,
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
10002650:	781f      	ldrb	r7, [r3, #0]

    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002652:	f002 f871 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == message)||
10002656:	2c00      	cmp	r4, #0
10002658:	d01d      	beq.n	10002696 <optiga_crypt_rsa_encrypt_message+0x5a>
1000265a:	6a23      	ldr	r3, [r4, #32]
1000265c:	2b00      	cmp	r3, #0
1000265e:	d01a      	beq.n	10002696 <optiga_crypt_rsa_encrypt_message+0x5a>
10002660:	2d00      	cmp	r5, #0
10002662:	d018      	beq.n	10002696 <optiga_crypt_rsa_encrypt_message+0x5a>
10002664:	9b11      	ldr	r3, [sp, #68]	; 0x44
10002666:	2b00      	cmp	r3, #0
10002668:	d015      	beq.n	10002696 <optiga_crypt_rsa_encrypt_message+0x5a>
            (NULL == public_key) || (NULL == encrypted_message) || (NULL == encrypted_message_length))
1000266a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000266c:	2b00      	cmp	r3, #0
1000266e:	d012      	beq.n	10002696 <optiga_crypt_rsa_encrypt_message+0x5a>
10002670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10002672:	2b00      	cmp	r3, #0
10002674:	d00f      	beq.n	10002696 <optiga_crypt_rsa_encrypt_message+0x5a>
        {
            break;
        }
#endif
        return_value =  optiga_crypt_rsa_enc_dec(me,
10002676:	9b11      	ldr	r3, [sp, #68]	; 0x44
10002678:	9700      	str	r7, [sp, #0]
1000267a:	9301      	str	r3, [sp, #4]
1000267c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000267e:	1c20      	adds	r0, r4, #0
10002680:	9302      	str	r3, [sp, #8]
10002682:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10002684:	1c31      	adds	r1, r6, #0
10002686:	9303      	str	r3, [sp, #12]
10002688:	2301      	movs	r3, #1
1000268a:	1c2a      	adds	r2, r5, #0
1000268c:	9304      	str	r3, [sp, #16]
1000268e:	9b07      	ldr	r3, [sp, #28]
10002690:	f7ff fc8e 	bl	10001fb0 <optiga_crypt_rsa_enc_dec.isra.2>
10002694:	e000      	b.n	10002698 <optiga_crypt_rsa_encrypt_message+0x5c>
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{

    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10002696:	4804      	ldr	r0, [pc, #16]	; (100026a8 <optiga_crypt_rsa_encrypt_message+0x6c>)
                                                 encrypted_message,
                                                 encrypted_message_length,
                                                 TRUE);
    } while (FALSE);
    return (return_value);
}
10002698:	b009      	add	sp, #36	; 0x24
1000269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000269c:	1000d4ff 	.word	0x1000d4ff
100026a0:	1000d452 	.word	0x1000d452
100026a4:	1000d2dc 	.word	0x1000d2dc
100026a8:	00000403 	.word	0x00000403

100026ac <optiga_crypt_rsa_encrypt_session>:
                                                     uint16_t label_length,
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
100026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100026ae:	b087      	sub	sp, #28
100026b0:	1c04      	adds	r4, r0, #0
100026b2:	1c0d      	adds	r5, r1, #0
100026b4:	ab0c      	add	r3, sp, #48	; 0x30
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100026b6:	4815      	ldr	r0, [pc, #84]	; (1000270c <optiga_crypt_rsa_encrypt_session+0x60>)
100026b8:	4915      	ldr	r1, [pc, #84]	; (10002710 <optiga_crypt_rsa_encrypt_session+0x64>)
100026ba:	4a16      	ldr	r2, [pc, #88]	; (10002714 <optiga_crypt_rsa_encrypt_session+0x68>)
                                                     uint16_t label_length,
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
100026bc:	781e      	ldrb	r6, [r3, #0]
100026be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100026c0:	f002 f83a 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == encrypted_message)|| (NULL == encrypted_message_length) ||
100026c4:	2c00      	cmp	r4, #0
100026c6:	d01e      	beq.n	10002706 <optiga_crypt_rsa_encrypt_session+0x5a>
100026c8:	6a23      	ldr	r3, [r4, #32]
100026ca:	2b00      	cmp	r3, #0
100026cc:	d01b      	beq.n	10002706 <optiga_crypt_rsa_encrypt_session+0x5a>
100026ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100026d0:	2b00      	cmp	r3, #0
100026d2:	d018      	beq.n	10002706 <optiga_crypt_rsa_encrypt_session+0x5a>
100026d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100026d6:	2b00      	cmp	r3, #0
100026d8:	d015      	beq.n	10002706 <optiga_crypt_rsa_encrypt_session+0x5a>
100026da:	2f00      	cmp	r7, #0
100026dc:	d013      	beq.n	10002706 <optiga_crypt_rsa_encrypt_session+0x5a>
        {
            break;
        }
#endif
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_COMMAND_PROTECTION;
100026de:	1c21      	adds	r1, r4, #0
100026e0:	2201      	movs	r2, #1
100026e2:	312e      	adds	r1, #46	; 0x2e
100026e4:	780b      	ldrb	r3, [r1, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        return_value =  optiga_crypt_rsa_enc_dec(me,
100026e6:	1c20      	adds	r0, r4, #0
        {
            break;
        }
#endif
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_COMMAND_PROTECTION;
100026e8:	4313      	orrs	r3, r2
100026ea:	700b      	strb	r3, [r1, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        return_value =  optiga_crypt_rsa_enc_dec(me,
100026ec:	9204      	str	r2, [sp, #16]
100026ee:	2200      	movs	r2, #0
100026f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100026f2:	9600      	str	r6, [sp, #0]
100026f4:	9302      	str	r3, [sp, #8]
100026f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100026f8:	9701      	str	r7, [sp, #4]
100026fa:	9303      	str	r3, [sp, #12]
100026fc:	1c29      	adds	r1, r5, #0
100026fe:	1c13      	adds	r3, r2, #0
10002700:	f7ff fc56 	bl	10001fb0 <optiga_crypt_rsa_enc_dec.isra.2>
10002704:	e000      	b.n	10002708 <optiga_crypt_rsa_encrypt_session+0x5c>
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10002706:	4804      	ldr	r0, [pc, #16]	; (10002718 <optiga_crypt_rsa_encrypt_session+0x6c>)
                                                 encrypted_message,
                                                 encrypted_message_length,
                                                 TRUE);
    } while (FALSE);
    return (return_value);
}
10002708:	b007      	add	sp, #28
1000270a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000270c:	1000d387 	.word	0x1000d387
10002710:	1000d452 	.word	0x1000d452
10002714:	1000d2dc 	.word	0x1000d2dc
10002718:	00000403 	.word	0x00000403

1000271c <optiga_crypt_rsa_decrypt_and_export>:
                                                        const uint8_t * label,
                                                        uint16_t label_length,
                                                        optiga_key_id_t private_key,
                                                        uint8_t * message,
                                                        uint16_t * message_length)
{
1000271c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000271e:	b08b      	sub	sp, #44	; 0x2c
10002720:	1c04      	adds	r4, r0, #0
10002722:	1c0e      	adds	r6, r1, #0
10002724:	1c15      	adds	r5, r2, #0
10002726:	9307      	str	r3, [sp, #28]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    optiga_key_id_t private_key_id;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002728:	4817      	ldr	r0, [pc, #92]	; (10002788 <optiga_crypt_rsa_decrypt_and_export+0x6c>)
                                                        const uint8_t * label,
                                                        uint16_t label_length,
                                                        optiga_key_id_t private_key,
                                                        uint8_t * message,
                                                        uint16_t * message_length)
{
1000272a:	ab12      	add	r3, sp, #72	; 0x48
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    optiga_key_id_t private_key_id;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
1000272c:	4917      	ldr	r1, [pc, #92]	; (1000278c <optiga_crypt_rsa_decrypt_and_export+0x70>)
1000272e:	4a18      	ldr	r2, [pc, #96]	; (10002790 <optiga_crypt_rsa_decrypt_and_export+0x74>)
                                                        const uint8_t * label,
                                                        uint16_t label_length,
                                                        optiga_key_id_t private_key,
                                                        uint8_t * message,
                                                        uint16_t * message_length)
{
10002730:	881f      	ldrh	r7, [r3, #0]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    optiga_key_id_t private_key_id;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002732:	f002 f801 	bl	10004738 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == message) || (NULL == message_length)||
10002736:	2c00      	cmp	r4, #0
10002738:	d023      	beq.n	10002782 <optiga_crypt_rsa_decrypt_and_export+0x66>
1000273a:	6a23      	ldr	r3, [r4, #32]
1000273c:	2b00      	cmp	r3, #0
1000273e:	d020      	beq.n	10002782 <optiga_crypt_rsa_decrypt_and_export+0x66>
10002740:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10002742:	2b00      	cmp	r3, #0
10002744:	d01d      	beq.n	10002782 <optiga_crypt_rsa_decrypt_and_export+0x66>
10002746:	9b14      	ldr	r3, [sp, #80]	; 0x50
10002748:	2b00      	cmp	r3, #0
1000274a:	d01a      	beq.n	10002782 <optiga_crypt_rsa_decrypt_and_export+0x66>
1000274c:	2d00      	cmp	r5, #0
1000274e:	d018      	beq.n	10002782 <optiga_crypt_rsa_decrypt_and_export+0x66>
        {
            break;
        }
#endif
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_RESPONSE_PROTECTION;
10002750:	1c22      	adds	r2, r4, #0
10002752:	2102      	movs	r1, #2
10002754:	322e      	adds	r2, #46	; 0x2e
10002756:	7813      	ldrb	r3, [r2, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        private_key_id = private_key;
        return_value = optiga_crypt_rsa_enc_dec(me,
10002758:	1c20      	adds	r0, r4, #0
        {
            break;
        }
#endif
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_RESPONSE_PROTECTION;
1000275a:	430b      	orrs	r3, r1
1000275c:	7013      	strb	r3, [r2, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        private_key_id = private_key;
1000275e:	221e      	movs	r2, #30
10002760:	ab02      	add	r3, sp, #8
10002762:	18d2      	adds	r2, r2, r3
        return_value = optiga_crypt_rsa_enc_dec(me,
10002764:	2300      	movs	r3, #0
        }
#endif
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_RESPONSE_PROTECTION;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        private_key_id = private_key;
10002766:	8017      	strh	r7, [r2, #0]
        return_value = optiga_crypt_rsa_enc_dec(me,
10002768:	9201      	str	r2, [sp, #4]
1000276a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000276c:	9300      	str	r3, [sp, #0]
1000276e:	9202      	str	r2, [sp, #8]
10002770:	9a14      	ldr	r2, [sp, #80]	; 0x50
10002772:	9304      	str	r3, [sp, #16]
10002774:	9203      	str	r2, [sp, #12]
10002776:	1c31      	adds	r1, r6, #0
10002778:	1c2a      	adds	r2, r5, #0
1000277a:	9b07      	ldr	r3, [sp, #28]
1000277c:	f7ff fc18 	bl	10001fb0 <optiga_crypt_rsa_enc_dec.isra.2>
10002780:	e000      	b.n	10002784 <optiga_crypt_rsa_decrypt_and_export+0x68>
                                                        uint16_t label_length,
                                                        optiga_key_id_t private_key,
                                                        uint8_t * message,
                                                        uint16_t * message_length)
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10002782:	4804      	ldr	r0, [pc, #16]	; (10002794 <optiga_crypt_rsa_decrypt_and_export+0x78>)
                                                message_length,
                                                FALSE);
    } while (FALSE);

    return (return_value);
}
10002784:	b00b      	add	sp, #44	; 0x2c
10002786:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002788:	1000d3ec 	.word	0x1000d3ec
1000278c:	1000d452 	.word	0x1000d452
10002790:	1000d2dc 	.word	0x1000d2dc
10002794:	00000403 	.word	0x00000403

10002798 <optiga_crypt_rsa_decrypt_and_store>:
                                                       const uint8_t * encrypted_message,
                                                       uint16_t encrypted_message_length,
                                                       const uint8_t * label,
                                                       uint16_t label_length,
                                                       optiga_key_id_t private_key)
{
10002798:	b5f0      	push	{r4, r5, r6, r7, lr}
1000279a:	b08b      	sub	sp, #44	; 0x2c
1000279c:	1c04      	adds	r4, r0, #0
1000279e:	1c0e      	adds	r6, r1, #0
100027a0:	1c15      	adds	r5, r2, #0
100027a2:	9307      	str	r3, [sp, #28]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    optiga_key_id_t private_key_id;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100027a4:	4810      	ldr	r0, [pc, #64]	; (100027e8 <optiga_crypt_rsa_decrypt_and_store+0x50>)
                                                       const uint8_t * encrypted_message,
                                                       uint16_t encrypted_message_length,
                                                       const uint8_t * label,
                                                       uint16_t label_length,
                                                       optiga_key_id_t private_key)
{
100027a6:	ab12      	add	r3, sp, #72	; 0x48
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    optiga_key_id_t private_key_id;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100027a8:	4910      	ldr	r1, [pc, #64]	; (100027ec <optiga_crypt_rsa_decrypt_and_store+0x54>)
100027aa:	4a11      	ldr	r2, [pc, #68]	; (100027f0 <optiga_crypt_rsa_decrypt_and_store+0x58>)
                                                       const uint8_t * encrypted_message,
                                                       uint16_t encrypted_message_length,
                                                       const uint8_t * label,
                                                       uint16_t label_length,
                                                       optiga_key_id_t private_key)
{
100027ac:	881f      	ldrh	r7, [r3, #0]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    optiga_key_id_t private_key_id;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
100027ae:	f001 ffc3 	bl	10004738 <optiga_lib_print_message>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == encrypted_message))
100027b2:	2c00      	cmp	r4, #0
100027b4:	d015      	beq.n	100027e2 <optiga_crypt_rsa_decrypt_and_store+0x4a>
100027b6:	6a23      	ldr	r3, [r4, #32]
100027b8:	2b00      	cmp	r3, #0
100027ba:	d012      	beq.n	100027e2 <optiga_crypt_rsa_decrypt_and_store+0x4a>
100027bc:	2d00      	cmp	r5, #0
100027be:	d010      	beq.n	100027e2 <optiga_crypt_rsa_decrypt_and_store+0x4a>
        {
           break;
        }
#endif
        private_key_id = private_key;
100027c0:	221e      	movs	r2, #30
100027c2:	ab02      	add	r3, sp, #8
100027c4:	18d2      	adds	r2, r2, r3
        return_value = optiga_crypt_rsa_enc_dec(me,
100027c6:	2300      	movs	r3, #0
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == encrypted_message))
        {
           break;
        }
#endif
        private_key_id = private_key;
100027c8:	8017      	strh	r7, [r2, #0]
        return_value = optiga_crypt_rsa_enc_dec(me,
100027ca:	1c20      	adds	r0, r4, #0
100027cc:	9300      	str	r3, [sp, #0]
100027ce:	9201      	str	r2, [sp, #4]
100027d0:	9302      	str	r3, [sp, #8]
100027d2:	9303      	str	r3, [sp, #12]
100027d4:	9304      	str	r3, [sp, #16]
100027d6:	1c31      	adds	r1, r6, #0
100027d8:	1c2a      	adds	r2, r5, #0
100027da:	9b07      	ldr	r3, [sp, #28]
100027dc:	f7ff fbe8 	bl	10001fb0 <optiga_crypt_rsa_enc_dec.isra.2>
100027e0:	e000      	b.n	100027e4 <optiga_crypt_rsa_decrypt_and_store+0x4c>
                                                       uint16_t encrypted_message_length,
                                                       const uint8_t * label,
                                                       uint16_t label_length,
                                                       optiga_key_id_t private_key)
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
100027e2:	4804      	ldr	r0, [pc, #16]	; (100027f4 <optiga_crypt_rsa_decrypt_and_store+0x5c>)
                                                NULL,
                                                FALSE);
    } while (FALSE);

    return (return_value);
}
100027e4:	b00b      	add	sp, #44	; 0x2c
100027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100027e8:	1000d481 	.word	0x1000d481
100027ec:	1000d452 	.word	0x1000d452
100027f0:	1000d2dc 	.word	0x1000d2dc
100027f4:	00000403 	.word	0x00000403

100027f8 <optiga_crypt_rsa_generate_pre_master_secret>:
#ifdef OPTIGA_CRYPT_RSA_PRE_MASTER_SECRET_ENABLED
optiga_lib_status_t optiga_crypt_rsa_generate_pre_master_secret(optiga_crypt_t * me,
                                                                const uint8_t * optional_data,
                                                                uint16_t optional_data_length,
                                                                uint16_t pre_master_secret_length)
{
100027f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100027fa:	1c06      	adds	r6, r0, #0
100027fc:	1c0f      	adds	r7, r1, #0
100027fe:	1c15      	adds	r5, r2, #0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002800:	480d      	ldr	r0, [pc, #52]	; (10002838 <optiga_crypt_rsa_generate_pre_master_secret+0x40>)
10002802:	490e      	ldr	r1, [pc, #56]	; (1000283c <optiga_crypt_rsa_generate_pre_master_secret+0x44>)
10002804:	4a0e      	ldr	r2, [pc, #56]	; (10002840 <optiga_crypt_rsa_generate_pre_master_secret+0x48>)
#ifdef OPTIGA_CRYPT_RSA_PRE_MASTER_SECRET_ENABLED
optiga_lib_status_t optiga_crypt_rsa_generate_pre_master_secret(optiga_crypt_t * me,
                                                                const uint8_t * optional_data,
                                                                uint16_t optional_data_length,
                                                                uint16_t pre_master_secret_length)
{
10002806:	1c1c      	adds	r4, r3, #0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
10002808:	f001 ff96 	bl	10004738 <optiga_lib_print_message>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        /// Maximum length of shared secret supported by OPTIGA is 48 bytes, minimum is 8 bytes.
        if ((NULL == me) || (NULL == me->my_cmd))
1000280c:	2e00      	cmp	r6, #0
1000280e:	d011      	beq.n	10002834 <optiga_crypt_rsa_generate_pre_master_secret+0x3c>
10002810:	6a33      	ldr	r3, [r6, #32]
10002812:	2b00      	cmp	r3, #0
10002814:	d00e      	beq.n	10002834 <optiga_crypt_rsa_generate_pre_master_secret+0x3c>
        }
#endif

        /// The minimum difference between shared secret length and optional data length should be 8 bytes,
        /// since the minimum random length OPTIGA expects is 8 bytes (optional_data_length <= shared_length � 8 bytes).
        if (((optional_data_length + OPTIGA_CRYPT_MINIMUM_RANDOM_DATA_LENGTH) > pre_master_secret_length) ||
10002816:	1deb      	adds	r3, r5, #7
10002818:	42a3      	cmp	r3, r4
1000281a:	da0b      	bge.n	10002834 <optiga_crypt_rsa_generate_pre_master_secret+0x3c>
1000281c:	2d28      	cmp	r5, #40	; 0x28
1000281e:	d809      	bhi.n	10002834 <optiga_crypt_rsa_generate_pre_master_secret+0x3c>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }

        return_value = optiga_crypt_get_random(me,
10002820:	1b63      	subs	r3, r4, r5
10002822:	b29b      	uxth	r3, r3
10002824:	9700      	str	r7, [sp, #0]
10002826:	9501      	str	r5, [sp, #4]
10002828:	1c30      	adds	r0, r6, #0
1000282a:	2104      	movs	r1, #4
1000282c:	2200      	movs	r2, #0
1000282e:	f7ff fa8b 	bl	10001d48 <optiga_crypt_get_random>
10002832:	e000      	b.n	10002836 <optiga_crypt_rsa_generate_pre_master_secret+0x3e>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        /// Maximum length of shared secret supported by OPTIGA is 48 bytes, minimum is 8 bytes.
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
10002834:	4803      	ldr	r0, [pc, #12]	; (10002844 <optiga_crypt_rsa_generate_pre_master_secret+0x4c>)
                                               optional_data,
                                               optional_data_length);
    } while (FALSE);

    return (return_value);
}
10002836:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10002838:	1000d520 	.word	0x1000d520
1000283c:	1000d452 	.word	0x1000d452
10002840:	1000d2dc 	.word	0x1000d2dc
10002844:	00000403 	.word	0x00000403

10002848 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
10002848:	b538      	push	{r3, r4, r5, lr}
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
1000284a:	6983      	ldr	r3, [r0, #24]
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
1000284c:	1c04      	adds	r4, r0, #0
1000284e:	1c0d      	adds	r5, r1, #0
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
10002850:	2b00      	cmp	r3, #0
10002852:	d001      	beq.n	10002858 <ifx_i2c_tl_event_handler+0x10>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
10002854:	69c0      	ldr	r0, [r0, #28]
10002856:	4798      	blx	r3
    }
    p_ctx->close_state = event;
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
10002858:	1c23      	adds	r3, r4, #0
1000285a:	2204      	movs	r2, #4
1000285c:	3329      	adds	r3, #41	; 0x29
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
    p_ctx->close_state = event;
1000285e:	85a5      	strh	r5, [r4, #44]	; 0x2c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
10002860:	701a      	strb	r2, [r3, #0]
    switch (p_ctx->state)
10002862:	3428      	adds	r4, #40	; 0x28
10002864:	7823      	ldrb	r3, [r4, #0]
10002866:	2b01      	cmp	r3, #1
10002868:	d103      	bne.n	10002872 <ifx_i2c_tl_event_handler+0x2a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
1000286a:	2d00      	cmp	r5, #0
1000286c:	d101      	bne.n	10002872 <ifx_i2c_tl_event_handler+0x2a>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
1000286e:	3301      	adds	r3, #1
10002870:	7023      	strb	r3, [r4, #0]
            break;
        }
        default:
            break;
    }
}
10002872:	bd38      	pop	{r3, r4, r5, pc}

10002874 <ifx_i2c_init>:
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}

_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
10002874:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
10002876:	1c03      	adds	r3, r0, #0
10002878:	332e      	adds	r3, #46	; 0x2e
1000287a:	781b      	ldrb	r3, [r3, #0]
1000287c:	2202      	movs	r2, #2
1000287e:	1c19      	adds	r1, r3, #0
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}

_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
10002880:	1c04      	adds	r4, r0, #0
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
10002882:	4391      	bics	r1, r2
10002884:	d12e      	bne.n	100028e4 <ifx_i2c_init+0x70>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
    {
        switch (p_ifx_i2c_context->reset_state)
10002886:	1c05      	adds	r5, r0, #0
10002888:	352a      	adds	r5, #42	; 0x2a
1000288a:	782a      	ldrb	r2, [r5, #0]
1000288c:	2ab2      	cmp	r2, #178	; 0xb2
1000288e:	d015      	beq.n	100028bc <ifx_i2c_init+0x48>
10002890:	2ab3      	cmp	r2, #179	; 0xb3
10002892:	d02b      	beq.n	100028ec <ifx_i2c_init+0x78>
10002894:	2ab1      	cmp	r2, #177	; 0xb1
10002896:	d12e      	bne.n	100028f6 <ifx_i2c_init+0x82>
        {
            case IFX_I2C_STATE_RESET_PIN_LOW:
            {
                // Setting the Vdd & Reset pin to low
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
10002898:	2b00      	cmp	r3, #0
1000289a:	d102      	bne.n	100028a2 <ifx_i2c_init+0x2e>
                {
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
1000289c:	6880      	ldr	r0, [r0, #8]
1000289e:	f7fe fd39 	bl	10001314 <pal_gpio_set_low>
                }
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
100028a2:	68e0      	ldr	r0, [r4, #12]
100028a4:	f7fe fd36 	bl	10001314 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
100028a8:	23b2      	movs	r3, #178	; 0xb2
100028aa:	702b      	strb	r3, [r5, #0]
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
100028ac:	239a      	movs	r3, #154	; 0x9a
100028ae:	00db      	lsls	r3, r3, #3
100028b0:	58e0      	ldr	r0, [r4, r3]
100028b2:	23fa      	movs	r3, #250	; 0xfa
100028b4:	4911      	ldr	r1, [pc, #68]	; (100028fc <ifx_i2c_init+0x88>)
100028b6:	1c22      	adds	r2, r4, #0
100028b8:	00db      	lsls	r3, r3, #3
100028ba:	e00f      	b.n	100028dc <ifx_i2c_init+0x68>
                break;
            }
            case IFX_I2C_STATE_RESET_PIN_HIGH:
            {
                // Setting the Vdd & Reset pin to high
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
100028bc:	2b00      	cmp	r3, #0
100028be:	d102      	bne.n	100028c6 <ifx_i2c_init+0x52>
                {
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
100028c0:	6880      	ldr	r0, [r0, #8]
100028c2:	f7fe fd1c 	bl	100012fe <pal_gpio_set_high>
                }
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
100028c6:	68e0      	ldr	r0, [r4, #12]
100028c8:	f7fe fd19 	bl	100012fe <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
100028cc:	23b3      	movs	r3, #179	; 0xb3
100028ce:	702b      	strb	r3, [r5, #0]
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
100028d0:	239a      	movs	r3, #154	; 0x9a
100028d2:	1c22      	adds	r2, r4, #0
100028d4:	00db      	lsls	r3, r3, #3
100028d6:	58e0      	ldr	r0, [r4, r3]
100028d8:	4908      	ldr	r1, [pc, #32]	; (100028fc <ifx_i2c_init+0x88>)
100028da:	4b09      	ldr	r3, [pc, #36]	; (10002900 <ifx_i2c_init+0x8c>)
100028dc:	f7fe feb0 	bl	10001640 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)ifx_i2c_init,
                                                       (void * )p_ifx_i2c_context,
                                                       STARTUP_TIME_MSEC);
                api_status = IFX_I2C_STACK_SUCCESS;
100028e0:	2000      	movs	r0, #0
                break;
100028e2:	e00a      	b.n	100028fa <ifx_i2c_init+0x86>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
100028e4:	23ae      	movs	r3, #174	; 0xae
100028e6:	2201      	movs	r2, #1
100028e8:	33ff      	adds	r3, #255	; 0xff
100028ea:	54c2      	strb	r2, [r0, r3]
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
100028ec:	1c20      	adds	r0, r4, #0
100028ee:	4905      	ldr	r1, [pc, #20]	; (10002904 <ifx_i2c_init+0x90>)
100028f0:	f001 fbbc 	bl	1000406c <ifx_i2c_prl_init>
100028f4:	e001      	b.n	100028fa <ifx_i2c_init+0x86>
    }
}

_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
100028f6:	2081      	movs	r0, #129	; 0x81
100028f8:	0040      	lsls	r0, r0, #1
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
    }

    return (api_status);
}
100028fa:	bd38      	pop	{r3, r4, r5, pc}
100028fc:	10002875 	.word	0x10002875
10002900:	00002ee0 	.word	0x00002ee0
10002904:	10002849 	.word	0x10002849

10002908 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                     optiga_lib_status_t event,
                                     const uint8_t * p_data,
                                     uint16_t data_len)
{
10002908:	b538      	push	{r3, r4, r5, lr}
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
1000290a:	1c03      	adds	r3, r0, #0
1000290c:	2204      	movs	r2, #4
1000290e:	3329      	adds	r3, #41	; 0x29
10002910:	701a      	strb	r2, [r3, #0]
    switch (p_ctx->state)
10002912:	3b01      	subs	r3, #1
10002914:	781b      	ldrb	r3, [r3, #0]
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                     optiga_lib_status_t event,
                                     const uint8_t * p_data,
                                     uint16_t data_len)
{
10002916:	1c04      	adds	r4, r0, #0
10002918:	1c0d      	adds	r5, r1, #0
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
    switch (p_ctx->state)
1000291a:	2b01      	cmp	r3, #1
1000291c:	d108      	bne.n	10002930 <ifx_i2c_prl_close_event_handler+0x28>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
1000291e:	6900      	ldr	r0, [r0, #16]
10002920:	f7fe fd6c 	bl	100013fc <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
10002924:	68a0      	ldr	r0, [r4, #8]
10002926:	f7fe fcf5 	bl	10001314 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
1000292a:	68e0      	ldr	r0, [r4, #12]
1000292c:	f7fe fcf2 	bl	10001314 <pal_gpio_set_low>
        }
        default:
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
10002930:	69a3      	ldr	r3, [r4, #24]
10002932:	2b00      	cmp	r3, #0
10002934:	d002      	beq.n	1000293c <ifx_i2c_prl_close_event_handler+0x34>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
10002936:	69e0      	ldr	r0, [r4, #28]
10002938:	1c29      	adds	r1, r5, #0
1000293a:	4798      	blx	r3
    }
}
1000293c:	bd38      	pop	{r3, r4, r5, pc}

1000293e <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
1000293e:	b510      	push	{r4, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
10002940:	1c04      	adds	r4, r0, #0
10002942:	3429      	adds	r4, #41	; 0x29
10002944:	7823      	ldrb	r3, [r4, #0]
10002946:	2b03      	cmp	r3, #3
10002948:	d015      	beq.n	10002976 <ifx_i2c_open+0x38>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
1000294a:	6903      	ldr	r3, [r0, #16]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
1000294c:	2200      	movs	r2, #0
    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
1000294e:	6098      	str	r0, [r3, #8]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
10002950:	1c03      	adds	r3, r0, #0
10002952:	332e      	adds	r3, #46	; 0x2e
10002954:	701a      	strb	r2, [r3, #0]
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
10002956:	3b04      	subs	r3, #4
10002958:	32b1      	adds	r2, #177	; 0xb1
1000295a:	701a      	strb	r2, [r3, #0]
            p_ctx->do_pal_init = TRUE;
1000295c:	1c02      	adds	r2, r0, #0
1000295e:	2301      	movs	r3, #1
10002960:	322f      	adds	r2, #47	; 0x2f
10002962:	7013      	strb	r3, [r2, #0]
            p_ctx->state = IFX_I2C_STATE_UNINIT;
10002964:	3a07      	subs	r2, #7
10002966:	7013      	strb	r3, [r2, #0]

            api_status = ifx_i2c_init(p_ctx);
10002968:	f7ff ff84 	bl	10002874 <ifx_i2c_init>
            if (IFX_I2C_STACK_SUCCESS == api_status)
1000296c:	2800      	cmp	r0, #0
1000296e:	d104      	bne.n	1000297a <ifx_i2c_open+0x3c>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
10002970:	2303      	movs	r3, #3
10002972:	7023      	strb	r3, [r4, #0]
10002974:	e001      	b.n	1000297a <ifx_i2c_open+0x3c>
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
10002976:	2081      	movs	r0, #129	; 0x81
10002978:	0040      	lsls	r0, r0, #1
                p_ctx->status = IFX_I2C_STATUS_BUSY;
            }
        }while(FALSE);
    }
    return (api_status);
}
1000297a:	bd10      	pop	{r4, pc}

1000297c <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
1000297c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
1000297e:	1c04      	adds	r4, r0, #0
10002980:	3428      	adds	r4, #40	; 0x28
10002982:	7824      	ldrb	r4, [r4, #0]
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
10002984:	9e06      	ldr	r6, [sp, #24]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
10002986:	2c02      	cmp	r4, #2
10002988:	d112      	bne.n	100029b0 <ifx_i2c_transceive+0x34>
1000298a:	1c05      	adds	r5, r0, #0
1000298c:	3529      	adds	r5, #41	; 0x29
1000298e:	782c      	ldrb	r4, [r5, #0]
10002990:	2c03      	cmp	r4, #3
10002992:	d00d      	beq.n	100029b0 <ifx_i2c_transceive+0x34>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
10002994:	6203      	str	r3, [r0, #32]
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
10002996:	6246      	str	r6, [r0, #36]	; 0x24
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
10002998:	9600      	str	r6, [sp, #0]
1000299a:	1c04      	adds	r4, r0, #0
1000299c:	f001 fbc4 	bl	10004128 <ifx_i2c_prl_transceive>
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
100029a0:	2800      	cmp	r0, #0
100029a2:	d107      	bne.n	100029b4 <ifx_i2c_transceive+0x38>
100029a4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
100029a6:	2b00      	cmp	r3, #0
100029a8:	d104      	bne.n	100029b4 <ifx_i2c_transceive+0x38>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
100029aa:	3303      	adds	r3, #3
100029ac:	702b      	strb	r3, [r5, #0]
100029ae:	e001      	b.n	100029b4 <ifx_i2c_transceive+0x38>
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
100029b0:	2081      	movs	r0, #129	; 0x81
100029b2:	0040      	lsls	r0, r0, #1
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
    }
    return (api_status);
}
100029b4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

100029b8 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
100029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
100029ba:	1c07      	adds	r7, r0, #0
100029bc:	2681      	movs	r6, #129	; 0x81
100029be:	3729      	adds	r7, #41	; 0x29
100029c0:	783b      	ldrb	r3, [r7, #0]
100029c2:	0076      	lsls	r6, r6, #1
}


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
100029c4:	1c35      	adds	r5, r6, #0
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
100029c6:	2b03      	cmp	r3, #3
100029c8:	d016      	beq.n	100029f8 <ifx_i2c_close+0x40>
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
        p_ctx->state = IFX_I2C_STATE_UNINIT;
100029ca:	1c03      	adds	r3, r0, #0
100029cc:	2201      	movs	r2, #1
100029ce:	3328      	adds	r3, #40	; 0x28
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
100029d0:	8586      	strh	r6, [r0, #44]	; 0x2c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
100029d2:	490a      	ldr	r1, [pc, #40]	; (100029fc <ifx_i2c_close+0x44>)
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
        p_ctx->state = IFX_I2C_STATE_UNINIT;
100029d4:	701a      	strb	r2, [r3, #0]
100029d6:	1c04      	adds	r4, r0, #0
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
100029d8:	f001 fb7c 	bl	100040d4 <ifx_i2c_prl_close>
100029dc:	1e05      	subs	r5, r0, #0
        if (IFX_I2C_STACK_ERROR == api_status)
100029de:	42b5      	cmp	r5, r6
100029e0:	d10a      	bne.n	100029f8 <ifx_i2c_close+0x40>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
100029e2:	6920      	ldr	r0, [r4, #16]
100029e4:	f7fe fd0a 	bl	100013fc <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
100029e8:	68a0      	ldr	r0, [r4, #8]
100029ea:	f7fe fc93 	bl	10001314 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
100029ee:	68e0      	ldr	r0, [r4, #12]
100029f0:	f7fe fc90 	bl	10001314 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
100029f4:	2304      	movs	r3, #4
100029f6:	703b      	strb	r3, [r7, #0]
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
}
100029f8:	1c28      	adds	r0, r5, #0
100029fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100029fc:	10002909 	.word	0x10002909

10002a00 <ifx_i2c_dl_calc_crc>:

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
}

_STATIC_H optiga_lib_status_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
10002a00:	b570      	push	{r4, r5, r6, lr}
10002a02:	1c05      	adds	r5, r0, #0
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
10002a04:	1c04      	adds	r4, r0, #0
}

_STATIC_H optiga_lib_status_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;
10002a06:	2000      	movs	r0, #0
10002a08:	1b63      	subs	r3, r4, r5

    for (i = 0; i < data_len; i++)
10002a0a:	b29b      	uxth	r3, r3
10002a0c:	428b      	cmp	r3, r1
10002a0e:	d213      	bcs.n	10002a38 <ifx_i2c_dl_calc_crc+0x38>
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
10002a10:	230f      	movs	r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
10002a12:	7822      	ldrb	r2, [r4, #0]
10002a14:	3401      	adds	r4, #1
10002a16:	4042      	eors	r2, r0
    h2 = h1 & 0x0F;
10002a18:	4013      	ands	r3, r2
10002a1a:	1c1e      	adds	r6, r3, #0
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
10002a1c:	b2d2      	uxtb	r2, r2
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
10002a1e:	011b      	lsls	r3, r3, #4
10002a20:	4053      	eors	r3, r2
    h4 = h3 >> 4;
10002a22:	091a      	lsrs	r2, r3, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
10002a24:	0a00      	lsrs	r0, r0, #8
10002a26:	005b      	lsls	r3, r3, #1
10002a28:	4050      	eors	r0, r2
10002a2a:	405a      	eors	r2, r3
10002a2c:	1c33      	adds	r3, r6, #0
10002a2e:	0112      	lsls	r2, r2, #4
10002a30:	4053      	eors	r3, r2
10002a32:	00db      	lsls	r3, r3, #3
10002a34:	4058      	eors	r0, r3
10002a36:	e7e7      	b.n	10002a08 <ifx_i2c_dl_calc_crc+0x8>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
    }

    return (crc);
}
10002a38:	bd70      	pop	{r4, r5, r6, pc}
	...

10002a3c <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
10002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002a3e:	1c0e      	adds	r6, r1, #0
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
10002a40:	1c01      	adds	r1, r0, #0
10002a42:	3162      	adds	r1, #98	; 0x62

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
10002a44:	1c05      	adds	r5, r0, #0
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
10002a46:	7809      	ldrb	r1, [r1, #0]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
10002a48:	2a01      	cmp	r2, #1
10002a4a:	d102      	bne.n	10002a52 <ifx_i2c_dl_send_frame_internal+0x16>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
10002a4c:	2003      	movs	r0, #3
10002a4e:	3101      	adds	r1, #1
10002a50:	4001      	ands	r1, r0
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
10002a52:	6f2c      	ldr	r4, [r5, #112]	; 0x70
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
10002a54:	2a02      	cmp	r2, #2
10002a56:	d102      	bne.n	10002a5e <ifx_i2c_dl_send_frame_internal+0x22>
    {
        ack_nr = 0;
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
10002a58:	6f6c      	ldr	r4, [r5, #116]	; 0x74
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
    {
        ack_nr = 0;
10002a5a:	2100      	movs	r1, #0
10002a5c:	e007      	b.n	10002a6e <ifx_i2c_dl_send_frame_internal+0x32>
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
10002a5e:	2a00      	cmp	r2, #0
10002a60:	d105      	bne.n	10002a6e <ifx_i2c_dl_send_frame_internal+0x32>
10002a62:	1c28      	adds	r0, r5, #0
10002a64:	3060      	adds	r0, #96	; 0x60
10002a66:	7800      	ldrb	r0, [r0, #0]
10002a68:	2809      	cmp	r0, #9
10002a6a:	d100      	bne.n	10002a6e <ifx_i2c_dl_send_frame_internal+0x32>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
10002a6c:	6f6c      	ldr	r4, [r5, #116]	; 0x74
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
10002a6e:	0152      	lsls	r2, r2, #5
10002a70:	430a      	orrs	r2, r1
10002a72:	b2d2      	uxtb	r2, r2
10002a74:	7022      	strb	r2, [r4, #0]

    if (0 != frame_len) // Data frame
10002a76:	2e00      	cmp	r6, #0
10002a78:	d01a      	beq.n	10002ab0 <ifx_i2c_dl_send_frame_internal+0x74>
10002a7a:	1c29      	adds	r1, r5, #0
10002a7c:	1c2a      	adds	r2, r5, #0
10002a7e:	3166      	adds	r1, #102	; 0x66
10002a80:	3261      	adds	r2, #97	; 0x61
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
10002a82:	2b00      	cmp	r3, #0
10002a84:	d002      	beq.n	10002a8c <ifx_i2c_dl_send_frame_internal+0x50>
10002a86:	780b      	ldrb	r3, [r1, #0]
10002a88:	2b00      	cmp	r3, #0
10002a8a:	d004      	beq.n	10002a96 <ifx_i2c_dl_send_frame_internal+0x5a>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
10002a8c:	2003      	movs	r0, #3
10002a8e:	7813      	ldrb	r3, [r2, #0]
10002a90:	3301      	adds	r3, #1
10002a92:	4003      	ands	r3, r0
10002a94:	7013      	strb	r3, [r2, #0]
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
10002a96:	7813      	ldrb	r3, [r2, #0]
10002a98:	7822      	ldrb	r2, [r4, #0]
10002a9a:	009b      	lsls	r3, r3, #2
10002a9c:	4313      	orrs	r3, r2
10002a9e:	7023      	strb	r3, [r4, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
10002aa0:	2300      	movs	r3, #0
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
10002aa2:	4816      	ldr	r0, [pc, #88]	; (10002afc <ifx_i2c_dl_send_frame_internal+0xc0>)
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
        // Reset resync received
        p_ctx->dl.resynced = 0;
10002aa4:	700b      	strb	r3, [r1, #0]
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
10002aa6:	4a16      	ldr	r2, [pc, #88]	; (10002b00 <ifx_i2c_dl_send_frame_internal+0xc4>)
10002aa8:	4916      	ldr	r1, [pc, #88]	; (10002b04 <ifx_i2c_dl_send_frame_internal+0xc8>)
10002aaa:	f001 fe45 	bl	10004738 <optiga_lib_print_message>
10002aae:	e003      	b.n	10002ab8 <ifx_i2c_dl_send_frame_internal+0x7c>
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
10002ab0:	2380      	movs	r3, #128	; 0x80
10002ab2:	425b      	negs	r3, r3
10002ab4:	431a      	orrs	r2, r3
10002ab6:	7022      	strb	r2, [r4, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
10002ab8:	0a33      	lsrs	r3, r6, #8
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
10002aba:	1cf1      	adds	r1, r6, #3
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
10002abc:	7063      	strb	r3, [r4, #1]
    p_buffer[2] = (uint8_t)frame_len;
10002abe:	70a6      	strb	r6, [r4, #2]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
10002ac0:	b289      	uxth	r1, r1
10002ac2:	1c20      	adds	r0, r4, #0
10002ac4:	f7ff ff9c 	bl	10002a00 <ifx_i2c_dl_calc_crc>
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
10002ac8:	19a3      	adds	r3, r4, r6
10002aca:	0a02      	lsrs	r2, r0, #8
10002acc:	70da      	strb	r2, [r3, #3]
    p_buffer[4 + frame_len] = (uint8_t)crc;
10002ace:	7118      	strb	r0, [r3, #4]
10002ad0:	1d77      	adds	r7, r6, #5

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
10002ad2:	2e00      	cmp	r6, #0
10002ad4:	d00c      	beq.n	10002af0 <ifx_i2c_dl_send_frame_internal+0xb4>
10002ad6:	1c2b      	adds	r3, r5, #0
10002ad8:	3330      	adds	r3, #48	; 0x30
10002ada:	781a      	ldrb	r2, [r3, #0]
10002adc:	230d      	movs	r3, #13
10002ade:	b2b9      	uxth	r1, r7
10002ae0:	4013      	ands	r3, r2
10002ae2:	1c20      	adds	r0, r4, #0
10002ae4:	4a08      	ldr	r2, [pc, #32]	; (10002b08 <ifx_i2c_dl_send_frame_internal+0xcc>)
10002ae6:	2b01      	cmp	r3, #1
10002ae8:	d000      	beq.n	10002aec <ifx_i2c_dl_send_frame_internal+0xb0>
10002aea:	4a08      	ldr	r2, [pc, #32]	; (10002b0c <ifx_i2c_dl_send_frame_internal+0xd0>)
10002aec:	f001 feb6 	bl	1000485c <optiga_lib_print_array_hex_format>
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
10002af0:	b2ba      	uxth	r2, r7
10002af2:	1c28      	adds	r0, r5, #0
10002af4:	1c21      	adds	r1, r4, #0
10002af6:	f000 fcaf 	bl	10003458 <ifx_i2c_pl_send_frame>
}
10002afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002afc:	1000d568 	.word	0x1000d568
10002b00:	1000d2dc 	.word	0x1000d2dc
10002b04:	1000d56d 	.word	0x1000d56d
10002b08:	1000d582 	.word	0x1000d582
10002b0c:	1000d588 	.word	0x1000d588

10002b10 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
10002b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t current_event;
    uint8_t ftype;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
10002b12:	2500      	movs	r5, #0

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
10002b14:	1c04      	adds	r4, r0, #0
    uint8_t seqctr = 0;
    uint8_t current_event;
    uint8_t ftype;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
    uint16_t crc_received = 0;
10002b16:	1c2f      	adds	r7, r5, #0

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
10002b18:	b089      	sub	sp, #36	; 0x24
10002b1a:	9104      	str	r1, [sp, #16]
10002b1c:	9201      	str	r2, [sp, #4]
10002b1e:	9300      	str	r3, [sp, #0]
    uint8_t ack_nr = 0;
    uint8_t seqctr = 0;
    uint8_t current_event;
    uint8_t ftype;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
10002b20:	9505      	str	r5, [sp, #20]
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
    uint8_t ack_nr = 0;
    uint8_t seqctr = 0;
10002b22:	9502      	str	r5, [sp, #8]
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
    uint8_t ack_nr = 0;
10002b24:	9506      	str	r5, [sp, #24]
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
10002b26:	9503      	str	r5, [sp, #12]
10002b28:	1c26      	adds	r6, r4, #0
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
10002b2a:	2383      	movs	r3, #131	; 0x83
10002b2c:	9a04      	ldr	r2, [sp, #16]
10002b2e:	3660      	adds	r6, #96	; 0x60
10002b30:	005b      	lsls	r3, r3, #1
10002b32:	429a      	cmp	r2, r3
10002b34:	d104      	bne.n	10002b40 <ifx_i2c_pl_event_handler+0x30>
10002b36:	7833      	ldrb	r3, [r6, #0]
10002b38:	2b01      	cmp	r3, #1
10002b3a:	d001      	beq.n	10002b40 <ifx_i2c_pl_event_handler+0x30>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
10002b3c:	2308      	movs	r3, #8
10002b3e:	7033      	strb	r3, [r6, #0]
        }
        switch (p_ctx->dl.state)
10002b40:	7830      	ldrb	r0, [r6, #0]
10002b42:	3801      	subs	r0, #1
10002b44:	280a      	cmp	r0, #10
10002b46:	d900      	bls.n	10002b4a <ifx_i2c_pl_event_handler+0x3a>
10002b48:	e184      	b.n	10002e54 <ifx_i2c_pl_event_handler+0x344>
10002b4a:	f009 fc77 	bl	1000c43c <__gnu_thumb1_case_uhi>
10002b4e:	000b      	.short	0x000b
10002b50:	00290012 	.word	0x00290012
10002b54:	01270101 	.word	0x01270101
10002b58:	0183011e 	.word	0x0183011e
10002b5c:	00f9015d 	.word	0x00f9015d
10002b60:	00b90062 	.word	0x00b90062
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
10002b64:	9904      	ldr	r1, [sp, #16]
10002b66:	1e4b      	subs	r3, r1, #1
10002b68:	4199      	sbcs	r1, r3
10002b6a:	2302      	movs	r3, #2
10002b6c:	1a59      	subs	r1, r3, r1
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
10002b6e:	b289      	uxth	r1, r1
10002b70:	e172      	b.n	10002e58 <ifx_i2c_pl_event_handler+0x348>
10002b72:	1c26      	adds	r6, r4, #0
            }
            break;
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
10002b74:	2381      	movs	r3, #129	; 0x81
10002b76:	9a04      	ldr	r2, [sp, #16]
10002b78:	3660      	adds	r6, #96	; 0x60
10002b7a:	005b      	lsls	r3, r3, #1
10002b7c:	429a      	cmp	r2, r3
10002b7e:	d101      	bne.n	10002b84 <ifx_i2c_pl_event_handler+0x74>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
10002b80:	3bfd      	subs	r3, #253	; 0xfd
10002b82:	e00b      	b.n	10002b9c <ifx_i2c_pl_event_handler+0x8c>
                    break;
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
10002b84:	f7fe fdac 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
                p_ctx->dl.state = DL_STATE_RX;
10002b88:	2303      	movs	r3, #3
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
10002b8a:	67a0      	str	r0, [r4, #120]	; 0x78
                p_ctx->dl.state = DL_STATE_RX;
10002b8c:	7033      	strb	r3, [r6, #0]
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
10002b8e:	1c20      	adds	r0, r4, #0
10002b90:	f000 fc7a 	bl	10003488 <ifx_i2c_pl_receive_frame>
10002b94:	2800      	cmp	r0, #0
10002b96:	d100      	bne.n	10002b9a <ifx_i2c_pl_event_handler+0x8a>
10002b98:	e163      	b.n	10002e62 <ifx_i2c_pl_event_handler+0x352>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
10002b9a:	2306      	movs	r3, #6
10002b9c:	7033      	strb	r3, [r6, #0]
10002b9e:	e7c3      	b.n	10002b28 <ifx_i2c_pl_event_handler+0x18>
10002ba0:	1c23      	adds	r3, r4, #0
10002ba2:	3360      	adds	r3, #96	; 0x60
10002ba4:	9307      	str	r3, [sp, #28]
                }
            }
            break;
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
10002ba6:	2381      	movs	r3, #129	; 0x81
10002ba8:	9a04      	ldr	r2, [sp, #16]
10002baa:	005b      	lsls	r3, r3, #1
10002bac:	429a      	cmp	r2, r3
10002bae:	d101      	bne.n	10002bb4 <ifx_i2c_pl_event_handler+0xa4>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
10002bb0:	3bfd      	subs	r3, #253	; 0xfd
10002bb2:	e003      	b.n	10002bbc <ifx_i2c_pl_event_handler+0xac>
                    break;
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
10002bb4:	9b00      	ldr	r3, [sp, #0]
10002bb6:	2b04      	cmp	r3, #4
10002bb8:	d803      	bhi.n	10002bc2 <ifx_i2c_pl_event_handler+0xb2>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
10002bba:	2306      	movs	r3, #6
10002bbc:	9a07      	ldr	r2, [sp, #28]
10002bbe:	7013      	strb	r3, [r2, #0]
                    break;
10002bc0:	e7b2      	b.n	10002b28 <ifx_i2c_pl_event_handler+0x18>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
10002bc2:	9b01      	ldr	r3, [sp, #4]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
10002bc4:	9a01      	ldr	r2, [sp, #4]
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
10002bc6:	781e      	ldrb	r6, [r3, #0]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
10002bc8:	7892      	ldrb	r2, [r2, #2]
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
10002bca:	0673      	lsls	r3, r6, #25
10002bcc:	0f9b      	lsrs	r3, r3, #30
10002bce:	9302      	str	r3, [sp, #8]
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
10002bd0:	2303      	movs	r3, #3
10002bd2:	4033      	ands	r3, r6
10002bd4:	9306      	str	r3, [sp, #24]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
10002bd6:	0733      	lsls	r3, r6, #28
10002bd8:	0f9b      	lsrs	r3, r3, #30
10002bda:	9303      	str	r3, [sp, #12]
                packet_len = (p_data[1] << 8) | p_data[2];
10002bdc:	9b01      	ldr	r3, [sp, #4]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
10002bde:	9801      	ldr	r0, [sp, #4]
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
10002be0:	785b      	ldrb	r3, [r3, #1]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
10002be2:	09f6      	lsrs	r6, r6, #7
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
10002be4:	021b      	lsls	r3, r3, #8
10002be6:	431a      	orrs	r2, r3
10002be8:	9205      	str	r2, [sp, #20]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
10002bea:	9b01      	ldr	r3, [sp, #4]
10002bec:	9a00      	ldr	r2, [sp, #0]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
10002bee:	360a      	adds	r6, #10
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
10002bf0:	189b      	adds	r3, r3, r2
10002bf2:	1e9a      	subs	r2, r3, #2
10002bf4:	7812      	ldrb	r2, [r2, #0]
10002bf6:	3b01      	subs	r3, #1
10002bf8:	781b      	ldrb	r3, [r3, #0]
10002bfa:	0212      	lsls	r2, r2, #8
10002bfc:	4313      	orrs	r3, r2
10002bfe:	1c1f      	adds	r7, r3, #0
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
10002c00:	9b00      	ldr	r3, [sp, #0]
10002c02:	1e99      	subs	r1, r3, #2
10002c04:	b289      	uxth	r1, r1
10002c06:	f7ff fefb 	bl	10002a00 <ifx_i2c_dl_calc_crc>
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
10002c0a:	9b07      	ldr	r3, [sp, #28]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
10002c0c:	1c05      	adds	r5, r0, #0
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
10002c0e:	701e      	strb	r6, [r3, #0]
            }
            break;
10002c10:	e78a      	b.n	10002b28 <ifx_i2c_pl_event_handler+0x18>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
10002c12:	42af      	cmp	r7, r5
10002c14:	d10a      	bne.n	10002c2c <ifx_i2c_pl_event_handler+0x11c>
10002c16:	9b05      	ldr	r3, [sp, #20]
10002c18:	2b00      	cmp	r3, #0
10002c1a:	d007      	beq.n	10002c2c <ifx_i2c_pl_event_handler+0x11c>
10002c1c:	9a00      	ldr	r2, [sp, #0]
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
10002c1e:	3305      	adds	r3, #5
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
10002c20:	429a      	cmp	r2, r3
10002c22:	d103      	bne.n	10002c2c <ifx_i2c_pl_event_handler+0x11c>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
10002c24:	9b02      	ldr	r3, [sp, #8]
10002c26:	3b02      	subs	r3, #2
10002c28:	2b01      	cmp	r3, #1
10002c2a:	d803      	bhi.n	10002c34 <ifx_i2c_pl_event_handler+0x124>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
10002c2c:	1c23      	adds	r3, r4, #0
10002c2e:	2206      	movs	r2, #6
10002c30:	3360      	adds	r3, #96	; 0x60
10002c32:	e095      	b.n	10002d60 <ifx_i2c_pl_event_handler+0x250>
                    break;
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
10002c34:	1c21      	adds	r1, r4, #0
10002c36:	2203      	movs	r2, #3
10002c38:	1c25      	adds	r5, r4, #0
10002c3a:	3162      	adds	r1, #98	; 0x62
10002c3c:	780b      	ldrb	r3, [r1, #0]
10002c3e:	3560      	adds	r5, #96	; 0x60
10002c40:	3301      	adds	r3, #1
10002c42:	4013      	ands	r3, r2
10002c44:	9a03      	ldr	r2, [sp, #12]
10002c46:	429a      	cmp	r2, r3
10002c48:	d002      	beq.n	10002c50 <ifx_i2c_pl_event_handler+0x140>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
10002c4a:	2309      	movs	r3, #9
10002c4c:	702b      	strb	r3, [r5, #0]
10002c4e:	e032      	b.n	10002cb6 <ifx_i2c_pl_event_handler+0x1a6>
                    continue_state_machine = FALSE;
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
                    break;
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
10002c50:	1c23      	adds	r3, r4, #0
10002c52:	3361      	adds	r3, #97	; 0x61
10002c54:	781b      	ldrb	r3, [r3, #0]
10002c56:	9a06      	ldr	r2, [sp, #24]
10002c58:	4293      	cmp	r3, r2
10002c5a:	d001      	beq.n	10002c60 <ifx_i2c_pl_event_handler+0x150>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
10002c5c:	2309      	movs	r3, #9
10002c5e:	e003      	b.n	10002c68 <ifx_i2c_pl_event_handler+0x158>
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
10002c60:	9b02      	ldr	r3, [sp, #8]
10002c62:	2b01      	cmp	r3, #1
10002c64:	d102      	bne.n	10002c6c <ifx_i2c_pl_event_handler+0x15c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
10002c66:	3304      	adds	r3, #4
10002c68:	702b      	strb	r3, [r5, #0]
10002c6a:	e060      	b.n	10002d2e <ifx_i2c_pl_event_handler+0x21e>
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
10002c6c:	466b      	mov	r3, sp
10002c6e:	7b1b      	ldrb	r3, [r3, #12]
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
10002c70:	9a00      	ldr	r2, [sp, #0]
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
10002c72:	700b      	strb	r3, [r1, #0]
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
10002c74:	6f60      	ldr	r0, [r4, #116]	; 0x74
10002c76:	9901      	ldr	r1, [sp, #4]
10002c78:	f009 fe97 	bl	1000c9aa <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
10002c7c:	466a      	mov	r2, sp
10002c7e:	1c23      	adds	r3, r4, #0
10002c80:	8812      	ldrh	r2, [r2, #0]
10002c82:	336e      	adds	r3, #110	; 0x6e
10002c84:	801a      	strh	r2, [r3, #0]

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
10002c86:	2200      	movs	r2, #0
10002c88:	3b0a      	subs	r3, #10
10002c8a:	701a      	strb	r2, [r3, #0]
                p_ctx->dl.state = DL_STATE_ACK;
10002c8c:	2304      	movs	r3, #4
                continue_state_machine = FALSE;

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
10002c8e:	4876      	ldr	r0, [pc, #472]	; (10002e68 <ifx_i2c_pl_event_handler+0x358>)
                p_ctx->dl.rx_buffer_size = data_len;

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
                p_ctx->dl.state = DL_STATE_ACK;
10002c90:	702b      	strb	r3, [r5, #0]
                continue_state_machine = FALSE;

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
10002c92:	4976      	ldr	r1, [pc, #472]	; (10002e6c <ifx_i2c_pl_event_handler+0x35c>)
10002c94:	4a76      	ldr	r2, [pc, #472]	; (10002e70 <ifx_i2c_pl_event_handler+0x360>)
10002c96:	f001 fd4f 	bl	10004738 <optiga_lib_print_message>
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
10002c9a:	1c23      	adds	r3, r4, #0
10002c9c:	3330      	adds	r3, #48	; 0x30
10002c9e:	781a      	ldrb	r2, [r3, #0]
10002ca0:	230f      	movs	r3, #15
10002ca2:	4013      	ands	r3, r2
10002ca4:	3b02      	subs	r3, #2
10002ca6:	9801      	ldr	r0, [sp, #4]
10002ca8:	9900      	ldr	r1, [sp, #0]
10002caa:	4a72      	ldr	r2, [pc, #456]	; (10002e74 <ifx_i2c_pl_event_handler+0x364>)
10002cac:	2b01      	cmp	r3, #1
10002cae:	d900      	bls.n	10002cb2 <ifx_i2c_pl_event_handler+0x1a2>
10002cb0:	4a71      	ldr	r2, [pc, #452]	; (10002e78 <ifx_i2c_pl_event_handler+0x368>)
10002cb2:	f001 fdd3 	bl	1000485c <optiga_lib_print_array_hex_format>
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
10002cb6:	2100      	movs	r1, #0
10002cb8:	1c20      	adds	r0, r4, #0
10002cba:	1c0a      	adds	r2, r1, #0
10002cbc:	1c0b      	adds	r3, r1, #0
10002cbe:	e06a      	b.n	10002d96 <ifx_i2c_pl_event_handler+0x286>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
10002cc0:	9b02      	ldr	r3, [sp, #8]
10002cc2:	1e9a      	subs	r2, r3, #2
10002cc4:	4250      	negs	r0, r2
10002cc6:	4150      	adcs	r0, r2
10002cc8:	1c23      	adds	r3, r4, #0
10002cca:	3363      	adds	r3, #99	; 0x63
10002ccc:	7819      	ldrb	r1, [r3, #0]
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
10002cce:	2209      	movs	r2, #9
10002cd0:	3b03      	subs	r3, #3
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
10002cd2:	4281      	cmp	r1, r0
10002cd4:	d144      	bne.n	10002d60 <ifx_i2c_pl_event_handler+0x250>
                }
                if (crc_received != crc_calculated)
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
10002cd6:	2205      	movs	r2, #5
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (crc_received != crc_calculated)
10002cd8:	42af      	cmp	r7, r5
10002cda:	d141      	bne.n	10002d60 <ifx_i2c_pl_event_handler+0x250>
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
10002cdc:	9a00      	ldr	r2, [sp, #0]
10002cde:	2a05      	cmp	r2, #5
10002ce0:	d81e      	bhi.n	10002d20 <ifx_i2c_pl_event_handler+0x210>
10002ce2:	9a05      	ldr	r2, [sp, #20]
10002ce4:	2a00      	cmp	r2, #0
10002ce6:	d11b      	bne.n	10002d20 <ifx_i2c_pl_event_handler+0x210>
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
10002ce8:	2900      	cmp	r1, #0
10002cea:	d00d      	beq.n	10002d08 <ifx_i2c_pl_event_handler+0x1f8>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
10002cec:	2209      	movs	r2, #9
10002cee:	701a      	strb	r2, [r3, #0]
                    p_ctx->dl.resynced = 1;
10002cf0:	1c23      	adds	r3, r4, #0
10002cf2:	3a08      	subs	r2, #8
10002cf4:	3366      	adds	r3, #102	; 0x66
10002cf6:	701a      	strb	r2, [r3, #0]
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002cf8:	3b05      	subs	r3, #5
10002cfa:	3202      	adds	r2, #2
10002cfc:	701a      	strb	r2, [r3, #0]
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
10002cfe:	705a      	strb	r2, [r3, #1]
                    break;
10002d00:	2302      	movs	r3, #2
10002d02:	1c3d      	adds	r5, r7, #0
10002d04:	9302      	str	r3, [sp, #8]
10002d06:	e70f      	b.n	10002b28 <ifx_i2c_pl_event_handler+0x18>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
10002d08:	9a03      	ldr	r2, [sp, #12]
10002d0a:	2a00      	cmp	r2, #0
10002d0c:	d108      	bne.n	10002d20 <ifx_i2c_pl_event_handler+0x210>
10002d0e:	9a02      	ldr	r2, [sp, #8]
10002d10:	2a03      	cmp	r2, #3
10002d12:	d005      	beq.n	10002d20 <ifx_i2c_pl_event_handler+0x210>
10002d14:	1c22      	adds	r2, r4, #0
10002d16:	3261      	adds	r2, #97	; 0x61
10002d18:	7812      	ldrb	r2, [r2, #0]
10002d1a:	9906      	ldr	r1, [sp, #24]
10002d1c:	428a      	cmp	r2, r1
10002d1e:	d001      	beq.n	10002d24 <ifx_i2c_pl_event_handler+0x214>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
10002d20:	2209      	movs	r2, #9
10002d22:	e003      	b.n	10002d2c <ifx_i2c_pl_event_handler+0x21c>
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
10002d24:	9a02      	ldr	r2, [sp, #8]
10002d26:	2a01      	cmp	r2, #1
10002d28:	d103      	bne.n	10002d32 <ifx_i2c_pl_event_handler+0x222>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
10002d2a:	3204      	adds	r2, #4
10002d2c:	701a      	strb	r2, [r3, #0]
                    break;
10002d2e:	1c3d      	adds	r5, r7, #0
10002d30:	e6fa      	b.n	10002b28 <ifx_i2c_pl_event_handler+0x18>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
10002d32:	2201      	movs	r2, #1
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
10002d34:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
                    break;
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
10002d36:	701a      	strb	r2, [r3, #0]
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
10002d38:	1c20      	adds	r0, r4, #0
10002d3a:	2102      	movs	r1, #2
10002d3c:	9a03      	ldr	r2, [sp, #12]
10002d3e:	e08e      	b.n	10002e5e <ifx_i2c_pl_event_handler+0x34e>
            }
            break;
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
10002d40:	1c23      	adds	r3, r4, #0
10002d42:	2203      	movs	r2, #3
10002d44:	3360      	adds	r3, #96	; 0x60
10002d46:	701a      	strb	r2, [r3, #0]
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
10002d48:	1c20      	adds	r0, r4, #0
10002d4a:	f000 fb9d 	bl	10003488 <ifx_i2c_pl_receive_frame>
            }
            break;
10002d4e:	e088      	b.n	10002e62 <ifx_i2c_pl_event_handler+0x352>
10002d50:	1c23      	adds	r3, r4, #0
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
10002d52:	2281      	movs	r2, #129	; 0x81
10002d54:	9904      	ldr	r1, [sp, #16]
10002d56:	3360      	adds	r3, #96	; 0x60
10002d58:	0052      	lsls	r2, r2, #1
10002d5a:	4291      	cmp	r1, r2
10002d5c:	d102      	bne.n	10002d64 <ifx_i2c_pl_event_handler+0x254>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
10002d5e:	3afd      	subs	r2, #253	; 0xfd
10002d60:	701a      	strb	r2, [r3, #0]
                    break;
10002d62:	e6e1      	b.n	10002b28 <ifx_i2c_pl_event_handler+0x18>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
10002d64:	2201      	movs	r2, #1
10002d66:	701a      	strb	r2, [r3, #0]
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
10002d68:	1c23      	adds	r3, r4, #0
10002d6a:	3363      	adds	r3, #99	; 0x63
10002d6c:	7819      	ldrb	r1, [r3, #0]
10002d6e:	330b      	adds	r3, #11
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
10002d70:	881b      	ldrh	r3, [r3, #0]
10002d72:	6f62      	ldr	r2, [r4, #116]	; 0x74
10002d74:	3b05      	subs	r3, #5
10002d76:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
10002d78:	3203      	adds	r2, #3
10002d7a:	b29b      	uxth	r3, r3
10002d7c:	1c20      	adds	r0, r4, #0
                    break;
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
10002d7e:	2900      	cmp	r1, #0
10002d80:	d001      	beq.n	10002d86 <ifx_i2c_pl_event_handler+0x276>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
10002d82:	2104      	movs	r1, #4
10002d84:	e06c      	b.n	10002e60 <ifx_i2c_pl_event_handler+0x350>
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
                else
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
10002d86:	2106      	movs	r1, #6
10002d88:	e06a      	b.n	10002e60 <ifx_i2c_pl_event_handler+0x350>
            break;
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
10002d8a:	2302      	movs	r3, #2
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
10002d8c:	2100      	movs	r1, #0
            break;
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
10002d8e:	7033      	strb	r3, [r6, #0]
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
10002d90:	1c20      	adds	r0, r4, #0
10002d92:	2201      	movs	r2, #1
10002d94:	1c0b      	adds	r3, r1, #0
10002d96:	f7ff fe51 	bl	10002a3c <ifx_i2c_dl_send_frame_internal>
            }
            break;
10002d9a:	e062      	b.n	10002e62 <ifx_i2c_pl_event_handler+0x352>

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
10002d9c:	f7fe fca0 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
10002da0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
10002da2:	1ac0      	subs	r0, r0, r3

    if (p_ctx->tl.api_start_time > current_time_stamp)
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
10002da4:	4b35      	ldr	r3, [pc, #212]	; (10002e7c <ifx_i2c_pl_event_handler+0x36c>)
10002da6:	4298      	cmp	r0, r3
10002da8:	d824      	bhi.n	10002df4 <ifx_i2c_pl_event_handler+0x2e4>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
10002daa:	1c21      	adds	r1, r4, #0
10002dac:	3164      	adds	r1, #100	; 0x64
10002dae:	780a      	ldrb	r2, [r1, #0]
10002db0:	2a03      	cmp	r2, #3
10002db2:	d10f      	bne.n	10002dd4 <ifx_i2c_pl_event_handler+0x2c4>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
10002db4:	2300      	movs	r3, #0

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_SUCCESS;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002db6:	3903      	subs	r1, #3
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
10002db8:	70cb      	strb	r3, [r1, #3]

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_SUCCESS;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002dba:	700a      	strb	r2, [r1, #0]
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
10002dbc:	704a      	strb	r2, [r1, #1]
    p_ctx->dl.resynced = 1;
10002dbe:	1c22      	adds	r2, r4, #0
10002dc0:	2101      	movs	r1, #1
10002dc2:	3266      	adds	r2, #102	; 0x66
10002dc4:	7011      	strb	r1, [r2, #0]
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
10002dc6:	3104      	adds	r1, #4
10002dc8:	3a06      	subs	r2, #6
10002dca:	7011      	strb	r1, [r2, #0]
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
10002dcc:	1c20      	adds	r0, r4, #0
10002dce:	1c19      	adds	r1, r3, #0
10002dd0:	2202      	movs	r2, #2
10002dd2:	e009      	b.n	10002de8 <ifx_i2c_pl_event_handler+0x2d8>
            status = ifx_i2c_dl_resync(p_ctx);
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
10002dd4:	3201      	adds	r2, #1
            p_ctx->dl.state = DL_STATE_TX;
10002dd6:	1c23      	adds	r3, r4, #0
            status = ifx_i2c_dl_resync(p_ctx);
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
10002dd8:	700a      	strb	r2, [r1, #0]
            p_ctx->dl.state = DL_STATE_TX;
10002dda:	2202      	movs	r2, #2
10002ddc:	3360      	adds	r3, #96	; 0x60
10002dde:	701a      	strb	r2, [r3, #0]
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
10002de0:	8999      	ldrh	r1, [r3, #12]
10002de2:	1c20      	adds	r0, r4, #0
10002de4:	2200      	movs	r2, #0
10002de6:	2301      	movs	r3, #1
10002de8:	f7ff fe28 	bl	10002a3c <ifx_i2c_dl_send_frame_internal>
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
        {
            p_ctx->dl.state  = DL_STATE_NACK;
10002dec:	2206      	movs	r2, #6
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
10002dee:	2800      	cmp	r0, #0
10002df0:	d101      	bne.n	10002df6 <ifx_i2c_pl_event_handler+0x2e6>
10002df2:	e003      	b.n	10002dfc <ifx_i2c_pl_event_handler+0x2ec>
            p_ctx->dl.state  = DL_STATE_NACK;
        }
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
10002df4:	2208      	movs	r2, #8
10002df6:	1c23      	adds	r3, r4, #0
10002df8:	3360      	adds	r3, #96	; 0x60
10002dfa:	701a      	strb	r2, [r3, #0]
            break;
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
                if (DL_STATE_ERROR != p_ctx->dl.state)
10002dfc:	1c23      	adds	r3, r4, #0
10002dfe:	3360      	adds	r3, #96	; 0x60
10002e00:	781b      	ldrb	r3, [r3, #0]
10002e02:	2b08      	cmp	r3, #8
10002e04:	d12d      	bne.n	10002e62 <ifx_i2c_pl_event_handler+0x352>
10002e06:	e68f      	b.n	10002b28 <ifx_i2c_pl_event_handler+0x18>
                }
            }
            break;
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
10002e08:	1c22      	adds	r2, r4, #0
10002e0a:	1c25      	adds	r5, r4, #0
10002e0c:	3266      	adds	r2, #102	; 0x66
10002e0e:	7813      	ldrb	r3, [r2, #0]
10002e10:	3565      	adds	r5, #101	; 0x65
10002e12:	2b00      	cmp	r3, #0
10002e14:	d101      	bne.n	10002e1a <ifx_i2c_pl_event_handler+0x30a>
                {
                    p_ctx->dl.error = 1;
10002e16:	3301      	adds	r3, #1
10002e18:	702b      	strb	r3, [r5, #0]
                }
                if (0 == p_ctx->dl.error)
10002e1a:	782b      	ldrb	r3, [r5, #0]
10002e1c:	2b00      	cmp	r3, #0
10002e1e:	d105      	bne.n	10002e2c <ifx_i2c_pl_event_handler+0x31c>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
10002e20:	2101      	movs	r1, #1
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
10002e22:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
                }
                if (0 == p_ctx->dl.error)
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
10002e24:	7031      	strb	r1, [r6, #0]
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
10002e26:	1c20      	adds	r0, r4, #0
10002e28:	1c1a      	adds	r2, r3, #0
10002e2a:	e019      	b.n	10002e60 <ifx_i2c_pl_event_handler+0x350>

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_SUCCESS;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002e2c:	1c21      	adds	r1, r4, #0
10002e2e:	2303      	movs	r3, #3
10002e30:	3161      	adds	r1, #97	; 0x61
10002e32:	700b      	strb	r3, [r1, #0]
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
10002e34:	704b      	strb	r3, [r1, #1]
    p_ctx->dl.resynced = 1;
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
10002e36:	2100      	movs	r1, #0
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_SUCCESS;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
10002e38:	3b02      	subs	r3, #2
10002e3a:	7013      	strb	r3, [r2, #0]
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
10002e3c:	3304      	adds	r3, #4
10002e3e:	7033      	strb	r3, [r6, #0]
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
10002e40:	1c20      	adds	r0, r4, #0
10002e42:	1c0b      	adds	r3, r1, #0
10002e44:	2202      	movs	r2, #2
10002e46:	f7ff fdf9 	bl	10002a3c <ifx_i2c_dl_send_frame_internal>
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
                    p_ctx->dl.state = DL_STATE_ERROR;
10002e4a:	2308      	movs	r3, #8
10002e4c:	7033      	strb	r3, [r6, #0]
                    p_ctx->dl.error = 0;
10002e4e:	2300      	movs	r3, #0
10002e50:	702b      	strb	r3, [r5, #0]
10002e52:	e006      	b.n	10002e62 <ifx_i2c_pl_event_handler+0x352>
                continue_state_machine = FALSE;
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
10002e54:	2101      	movs	r1, #1
10002e56:	7031      	strb	r1, [r6, #0]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
10002e58:	1c20      	adds	r0, r4, #0
10002e5a:	2200      	movs	r2, #0
10002e5c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
10002e5e:	1c13      	adds	r3, r2, #0
10002e60:	47a8      	blx	r5
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
10002e62:	b009      	add	sp, #36	; 0x24
10002e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002e66:	46c0      	nop			; (mov r8, r8)
10002e68:	1000d58e 	.word	0x1000d58e
10002e6c:	1000d56d 	.word	0x1000d56d
10002e70:	1000d2dc 	.word	0x1000d2dc
10002e74:	1000d582 	.word	0x1000d582
10002e78:	1000d588 	.word	0x1000d588
10002e7c:	0002bf1f 	.word	0x0002bf1f

10002e80 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
10002e80:	b570      	push	{r4, r5, r6, lr}
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
10002e82:	1c05      	adds	r5, r0, #0
10002e84:	2300      	movs	r3, #0
10002e86:	3560      	adds	r5, #96	; 0x60
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
10002e88:	1c0e      	adds	r6, r1, #0
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
10002e8a:	702b      	strb	r3, [r5, #0]
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
10002e8c:	490e      	ldr	r1, [pc, #56]	; (10002ec8 <ifx_i2c_dl_init+0x48>)
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
10002e8e:	1c04      	adds	r4, r0, #0
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
10002e90:	f000 faac 	bl	100033ec <ifx_i2c_pl_init>
10002e94:	2800      	cmp	r0, #0
10002e96:	d114      	bne.n	10002ec2 <ifx_i2c_dl_init+0x42>
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
10002e98:	2301      	movs	r3, #1
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002e9a:	1c22      	adds	r2, r4, #0
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
10002e9c:	67e6      	str	r6, [r4, #124]	; 0x7c
    p_ctx->dl.state = DL_STATE_IDLE;
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002e9e:	3261      	adds	r2, #97	; 0x61
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
10002ea0:	702b      	strb	r3, [r5, #0]
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
10002ea2:	3302      	adds	r3, #2
10002ea4:	7013      	strb	r3, [r2, #0]
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
10002ea6:	7053      	strb	r3, [r2, #1]
    p_ctx->dl.resynced = 0;
10002ea8:	1c23      	adds	r3, r4, #0
10002eaa:	3366      	adds	r3, #102	; 0x66
10002eac:	7018      	strb	r0, [r3, #0]
    p_ctx->dl.error = 0;
10002eae:	3b01      	subs	r3, #1
10002eb0:	7018      	strb	r0, [r3, #0]
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
10002eb2:	23a9      	movs	r3, #169	; 0xa9
10002eb4:	009b      	lsls	r3, r3, #2
10002eb6:	18e3      	adds	r3, r4, r3
10002eb8:	6723      	str	r3, [r4, #112]	; 0x70
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
10002eba:	4b04      	ldr	r3, [pc, #16]	; (10002ecc <ifx_i2c_dl_init+0x4c>)
10002ebc:	18e3      	adds	r3, r4, r3
10002ebe:	6763      	str	r3, [r4, #116]	; 0x74

    return IFX_I2C_STACK_SUCCESS;
10002ec0:	e001      	b.n	10002ec6 <ifx_i2c_dl_init+0x46>

    p_ctx->dl.state = DL_STATE_UNINIT;
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
10002ec2:	2081      	movs	r0, #129	; 0x81
10002ec4:	0040      	lsls	r0, r0, #1
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;

    return IFX_I2C_STACK_SUCCESS;
}
10002ec6:	bd70      	pop	{r4, r5, r6, pc}
10002ec8:	10002b11 	.word	0x10002b11
10002ecc:	000003ba 	.word	0x000003ba

10002ed0 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
10002ed0:	b508      	push	{r3, lr}
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
10002ed2:	1c03      	adds	r3, r0, #0
10002ed4:	3360      	adds	r3, #96	; 0x60
10002ed6:	781a      	ldrb	r2, [r3, #0]
10002ed8:	2a01      	cmp	r2, #1
10002eda:	d111      	bne.n	10002f00 <ifx_i2c_dl_send_frame+0x30>
10002edc:	2900      	cmp	r1, #0
10002ede:	d00f      	beq.n	10002f00 <ifx_i2c_dl_send_frame+0x30>
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->dl.state = DL_STATE_TX;
10002ee0:	3201      	adds	r2, #1
10002ee2:	701a      	strb	r2, [r3, #0]
    p_ctx->dl.retransmit_counter = 0;
10002ee4:	1c02      	adds	r2, r0, #0
10002ee6:	2300      	movs	r3, #0
10002ee8:	3264      	adds	r2, #100	; 0x64
10002eea:	7013      	strb	r3, [r2, #0]
    p_ctx->dl.action_rx_only = 0;
10002eec:	3a01      	subs	r2, #1
10002eee:	7013      	strb	r3, [r2, #0]
    p_ctx->dl.tx_buffer_size = frame_len;
10002ef0:	3209      	adds	r2, #9
10002ef2:	8011      	strh	r1, [r2, #0]
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
10002ef4:	220a      	movs	r2, #10
10002ef6:	6682      	str	r2, [r0, #104]	; 0x68

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
10002ef8:	1c1a      	adds	r2, r3, #0
10002efa:	f7ff fd9f 	bl	10002a3c <ifx_i2c_dl_send_frame_internal>
10002efe:	e001      	b.n	10002f04 <ifx_i2c_dl_send_frame+0x34>
{
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
    {
        return (IFX_I2C_STACK_ERROR);
10002f00:	2081      	movs	r0, #129	; 0x81
10002f02:	0040      	lsls	r0, r0, #1
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}
10002f04:	bd08      	pop	{r3, pc}
	...

10002f08 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
10002f08:	1c02      	adds	r2, r0, #0

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
10002f0a:	b510      	push	{r4, lr}
10002f0c:	1c04      	adds	r4, r0, #0
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
    {
        return (IFX_I2C_STACK_ERROR);
10002f0e:	2081      	movs	r0, #129	; 0x81

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
10002f10:	3260      	adds	r2, #96	; 0x60
10002f12:	7813      	ldrb	r3, [r2, #0]
    {
        return (IFX_I2C_STACK_ERROR);
10002f14:	0040      	lsls	r0, r0, #1

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
10002f16:	2b01      	cmp	r3, #1
10002f18:	d10d      	bne.n	10002f36 <ifx_i2c_dl_receive_frame+0x2e>
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
10002f1a:	2103      	movs	r1, #3
10002f1c:	7011      	strb	r1, [r2, #0]
    p_ctx->dl.retransmit_counter = 0;
10002f1e:	2100      	movs	r1, #0
    p_ctx->dl.action_rx_only = 1;
10002f20:	3203      	adds	r2, #3
        return (IFX_I2C_STACK_ERROR);
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
    p_ctx->dl.retransmit_counter = 0;
10002f22:	7051      	strb	r1, [r2, #1]
    p_ctx->dl.action_rx_only = 1;
10002f24:	7013      	strb	r3, [r2, #0]
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
10002f26:	f7fe fbdb 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
10002f2a:	4b03      	ldr	r3, [pc, #12]	; (10002f38 <ifx_i2c_dl_receive_frame+0x30>)

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
10002f2c:	67a0      	str	r0, [r4, #120]	; 0x78
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
10002f2e:	66a3      	str	r3, [r4, #104]	; 0x68

    return (ifx_i2c_pl_receive_frame(p_ctx));
10002f30:	1c20      	adds	r0, r4, #0
10002f32:	f000 faa9 	bl	10003488 <ifx_i2c_pl_receive_frame>
}
10002f36:	bd10      	pop	{r4, pc}
10002f38:	0002bf20 	.word	0x0002bf20

10002f3c <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
10002f3c:	1c0b      	adds	r3, r1, #0
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
10002f3e:	1c01      	adds	r1, r0, #0

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
10002f40:	b510      	push	{r4, lr}
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
10002f42:	3180      	adds	r1, #128	; 0x80
    p_ctx->pl.buffer_tx_len = 1;
10002f44:	24cb      	movs	r4, #203	; 0xcb
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
10002f46:	700b      	strb	r3, [r1, #0]
    p_ctx->pl.buffer_tx_len = 1;
10002f48:	2301      	movs	r3, #1
10002f4a:	0064      	lsls	r4, r4, #1
10002f4c:	5303      	strh	r3, [r0, r4]

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
10002f4e:	3402      	adds	r4, #2
10002f50:	5302      	strh	r2, [r0, r4]
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
10002f52:	22cd      	movs	r2, #205	; 0xcd
10002f54:	0052      	lsls	r2, r2, #1
10002f56:	5483      	strb	r3, [r0, r2]
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
10002f58:	3cd0      	subs	r4, #208	; 0xd0
10002f5a:	3202      	adds	r2, #2
10002f5c:	5284      	strh	r4, [r0, r2]
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
10002f5e:	229c      	movs	r2, #156	; 0x9c
10002f60:	32ff      	adds	r2, #255	; 0xff
10002f62:	5483      	strb	r3, [r0, r2]

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
10002f64:	1c1a      	adds	r2, r3, #0
10002f66:	6900      	ldr	r0, [r0, #16]
10002f68:	f7fe fa4a 	bl	10001400 <pal_i2c_write>
}
10002f6c:	bd10      	pop	{r4, pc}

10002f6e <ifx_i2c_pl_status_poll_callback>:
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
}


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
10002f6e:	b508      	push	{r3, lr}
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
10002f70:	2182      	movs	r1, #130	; 0x82
10002f72:	2204      	movs	r2, #4
10002f74:	f7ff ffe2 	bl	10002f3c <ifx_i2c_pl_read_register>
}
10002f78:	bd08      	pop	{r3, pc}

10002f7a <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
10002f7a:	b570      	push	{r4, r5, r6, lr}
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
10002f7c:	1c06      	adds	r6, r0, #0
10002f7e:	3680      	adds	r6, #128	; 0x80

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
10002f80:	1c05      	adds	r5, r0, #0
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
10002f82:	7031      	strb	r1, [r6, #0]

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
10002f84:	1c14      	adds	r4, r2, #0
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
10002f86:	1c19      	adds	r1, r3, #0
10002f88:	3081      	adds	r0, #129	; 0x81
10002f8a:	f009 fd0e 	bl	1000c9aa <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
10002f8e:	23cb      	movs	r3, #203	; 0xcb

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
10002f90:	2102      	movs	r1, #2
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
10002f92:	3401      	adds	r4, #1
10002f94:	b2a2      	uxth	r2, r4
10002f96:	005b      	lsls	r3, r3, #1
10002f98:	52ea      	strh	r2, [r5, r3]

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
10002f9a:	3304      	adds	r3, #4
10002f9c:	54e9      	strb	r1, [r5, r3]
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
10002f9e:	31c6      	adds	r1, #198	; 0xc6
10002fa0:	3302      	adds	r3, #2
10002fa2:	52e9      	strh	r1, [r5, r3]
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
10002fa4:	239c      	movs	r3, #156	; 0x9c
10002fa6:	39c7      	subs	r1, #199	; 0xc7
10002fa8:	33ff      	adds	r3, #255	; 0xff
10002faa:	54e9      	strb	r1, [r5, r3]
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
10002fac:	6928      	ldr	r0, [r5, #16]
10002fae:	1c31      	adds	r1, r6, #0
10002fb0:	f7fe fa26 	bl	10001400 <pal_i2c_write>
}
10002fb4:	bd70      	pop	{r4, r5, r6, pc}

10002fb6 <ifx_i2c_pal_poll_callback>:
        }
    }
}

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
10002fb6:	b508      	push	{r3, lr}
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
10002fb8:	239c      	movs	r3, #156	; 0x9c
10002fba:	33ff      	adds	r3, #255	; 0xff
10002fbc:	5cc3      	ldrb	r3, [r0, r3]
10002fbe:	2b01      	cmp	r3, #1
10002fc0:	d108      	bne.n	10002fd4 <ifx_i2c_pal_poll_callback+0x1e>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
10002fc2:	1c01      	adds	r1, r0, #0
10002fc4:	3396      	adds	r3, #150	; 0x96
10002fc6:	33ff      	adds	r3, #255	; 0xff
10002fc8:	5ac2      	ldrh	r2, [r0, r3]
10002fca:	3180      	adds	r1, #128	; 0x80
10002fcc:	6900      	ldr	r0, [r0, #16]
10002fce:	f7fe fa17 	bl	10001400 <pal_i2c_write>
10002fd2:	e009      	b.n	10002fe8 <ifx_i2c_pal_poll_callback+0x32>
    }
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
10002fd4:	2b02      	cmp	r3, #2
10002fd6:	d107      	bne.n	10002fe8 <ifx_i2c_pal_poll_callback+0x32>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
10002fd8:	1c01      	adds	r1, r0, #0
10002fda:	3397      	adds	r3, #151	; 0x97
10002fdc:	33ff      	adds	r3, #255	; 0xff
10002fde:	5ac2      	ldrh	r2, [r0, r3]
10002fe0:	3180      	adds	r1, #128	; 0x80
10002fe2:	6900      	ldr	r0, [r0, #16]
10002fe4:	f7fe fa36 	bl	10001454 <pal_i2c_read>
    }
}
10002fe8:	bd08      	pop	{r3, pc}
	...

10002fec <ifx_i2c_pl_set_bit_rate>:
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
}

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
10002fec:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
10002fee:	2300      	movs	r3, #0
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
}

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
10002ff0:	1c04      	adds	r4, r0, #0
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
10002ff2:	6900      	ldr	r0, [r0, #16]
10002ff4:	68c5      	ldr	r5, [r0, #12]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
10002ff6:	60c3      	str	r3, [r0, #12]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
10002ff8:	f7fe fa58 	bl	100014ac <pal_i2c_set_bitrate>
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
10002ffc:	6923      	ldr	r3, [r4, #16]
10002ffe:	60dd      	str	r5, [r3, #12]
    if (PAL_I2C_EVENT_SUCCESS != status)
10003000:	2800      	cmp	r0, #0
10003002:	d012      	beq.n	1000302a <ifx_i2c_pl_set_bit_rate+0x3e>
    {
        if (0 != (p_ctx->pl.retry_counter--))
10003004:	22ce      	movs	r2, #206	; 0xce
10003006:	0052      	lsls	r2, r2, #1
10003008:	5aa3      	ldrh	r3, [r4, r2]
1000300a:	1e59      	subs	r1, r3, #1
1000300c:	52a1      	strh	r1, [r4, r2]
1000300e:	2b00      	cmp	r3, #0
10003010:	d009      	beq.n	10003026 <ifx_i2c_pl_set_bit_rate+0x3a>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
10003012:	239a      	movs	r3, #154	; 0x9a
10003014:	00db      	lsls	r3, r3, #3
10003016:	58e0      	ldr	r0, [r4, r3]
10003018:	4904      	ldr	r1, [pc, #16]	; (1000302c <ifx_i2c_pl_set_bit_rate+0x40>)
1000301a:	1c22      	adds	r2, r4, #0
1000301c:	3be8      	subs	r3, #232	; 0xe8
1000301e:	f7fe fb0f 	bl	10001640 <pal_os_event_register_callback_oneshot>
10003022:	2001      	movs	r0, #1
10003024:	e001      	b.n	1000302a <ifx_i2c_pl_set_bit_rate+0x3e>
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
10003026:	2081      	movs	r0, #129	; 0x81
10003028:	0040      	lsls	r0, r0, #1
        status = IFX_I2C_STACK_SUCCESS;
    }

    return (status);

}
1000302a:	bd38      	pop	{r3, r4, r5, pc}
1000302c:	10003031 	.word	0x10003031

10003030 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
10003030:	b573      	push	{r0, r1, r4, r5, r6, lr}
10003032:	1c04      	adds	r4, r0, #0
    optiga_lib_status_t event = (uint8_t)IFX_I2C_STACK_ERROR;
10003034:	2102      	movs	r1, #2
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
10003036:	8883      	ldrh	r3, [r0, #4]
10003038:	ae01      	add	r6, sp, #4
1000303a:	0a1a      	lsrs	r2, r3, #8
1000303c:	7032      	strb	r2, [r6, #0]
1000303e:	7073      	strb	r3, [r6, #1]

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
10003040:	25d6      	movs	r5, #214	; 0xd6
10003042:	006d      	lsls	r5, r5, #1
10003044:	5d63      	ldrb	r3, [r4, r5]
10003046:	2b55      	cmp	r3, #85	; 0x55
10003048:	d064      	beq.n	10003114 <ifx_i2c_pl_negotiation_event_handler+0xe4>
1000304a:	d812      	bhi.n	10003072 <ifx_i2c_pl_negotiation_event_handler+0x42>
1000304c:	2b22      	cmp	r3, #34	; 0x22
1000304e:	d100      	bne.n	10003052 <ifx_i2c_pl_negotiation_event_handler+0x22>
10003050:	e08a      	b.n	10003168 <ifx_i2c_pl_negotiation_event_handler+0x138>
10003052:	d809      	bhi.n	10003068 <ifx_i2c_pl_negotiation_event_handler+0x38>
10003054:	2b11      	cmp	r3, #17
10003056:	d000      	beq.n	1000305a <ifx_i2c_pl_negotiation_event_handler+0x2a>
10003058:	e0ab      	b.n	100031b2 <ifx_i2c_pl_negotiation_event_handler+0x182>
            }
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
1000305a:	2322      	movs	r3, #34	; 0x22
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
1000305c:	1c20      	adds	r0, r4, #0
            }
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
1000305e:	5563      	strb	r3, [r4, r5]
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
10003060:	2181      	movs	r1, #129	; 0x81
10003062:	2202      	movs	r2, #2
10003064:	1c33      	adds	r3, r6, #0
10003066:	e07c      	b.n	10003162 <ifx_i2c_pl_negotiation_event_handler+0x132>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
10003068:	2b33      	cmp	r3, #51	; 0x33
1000306a:	d029      	beq.n	100030c0 <ifx_i2c_pl_negotiation_event_handler+0x90>
1000306c:	2b44      	cmp	r3, #68	; 0x44
1000306e:	d029      	beq.n	100030c4 <ifx_i2c_pl_negotiation_event_handler+0x94>
10003070:	e09f      	b.n	100031b2 <ifx_i2c_pl_negotiation_event_handler+0x182>
10003072:	2b88      	cmp	r3, #136	; 0x88
10003074:	d100      	bne.n	10003078 <ifx_i2c_pl_negotiation_event_handler+0x48>
10003076:	e07d      	b.n	10003174 <ifx_i2c_pl_negotiation_event_handler+0x144>
10003078:	d804      	bhi.n	10003084 <ifx_i2c_pl_negotiation_event_handler+0x54>
1000307a:	2b66      	cmp	r3, #102	; 0x66
1000307c:	d052      	beq.n	10003124 <ifx_i2c_pl_negotiation_event_handler+0xf4>
1000307e:	2b77      	cmp	r3, #119	; 0x77
10003080:	d05f      	beq.n	10003142 <ifx_i2c_pl_negotiation_event_handler+0x112>
10003082:	e096      	b.n	100031b2 <ifx_i2c_pl_negotiation_event_handler+0x182>
10003084:	2baa      	cmp	r3, #170	; 0xaa
10003086:	d100      	bne.n	1000308a <ifx_i2c_pl_negotiation_event_handler+0x5a>
10003088:	e085      	b.n	10003196 <ifx_i2c_pl_negotiation_event_handler+0x166>
1000308a:	2bbb      	cmp	r3, #187	; 0xbb
1000308c:	d000      	beq.n	10003090 <ifx_i2c_pl_negotiation_event_handler+0x60>
1000308e:	e090      	b.n	100031b2 <ifx_i2c_pl_negotiation_event_handler+0x182>
        {
            // Set initial frequency to PL_DEFAULT_FREQUENCY to be able to negotiate with slave
            case PL_INIT_SET_FREQ_DEFAULT:
            {
                // Default frequency set to master
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
10003090:	2164      	movs	r1, #100	; 0x64
10003092:	1c20      	adds	r0, r4, #0
10003094:	f7ff ffaa 	bl	10002fec <ifx_i2c_pl_set_bit_rate>
10003098:	1e01      	subs	r1, r0, #0
                if (IFX_I2C_STACK_SUCCESS == event)
1000309a:	d101      	bne.n	100030a0 <ifx_i2c_pl_negotiation_event_handler+0x70>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
1000309c:	2333      	movs	r3, #51	; 0x33
1000309e:	e057      	b.n	10003150 <ifx_i2c_pl_negotiation_event_handler+0x120>
                    continue_negotiation = TRUE;
                }
                else if (IFX_I2C_STACK_ERROR == event)
100030a0:	2381      	movs	r3, #129	; 0x81
100030a2:	005b      	lsls	r3, r3, #1
100030a4:	4298      	cmp	r0, r3
100030a6:	d000      	beq.n	100030aa <ifx_i2c_pl_negotiation_event_handler+0x7a>
100030a8:	e083      	b.n	100031b2 <ifx_i2c_pl_negotiation_event_handler+0x182>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
100030aa:	3b58      	subs	r3, #88	; 0x58
100030ac:	5563      	strb	r3, [r4, r5]
                    p_buffer = NULL;
                    buffer_len = 0;
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
100030ae:	239a      	movs	r3, #154	; 0x9a
100030b0:	00db      	lsls	r3, r3, #3
100030b2:	58e0      	ldr	r0, [r4, r3]
100030b4:	493f      	ldr	r1, [pc, #252]	; (100031b4 <ifx_i2c_pl_negotiation_event_handler+0x184>)
100030b6:	1c22      	adds	r2, r4, #0
100030b8:	4b3f      	ldr	r3, [pc, #252]	; (100031b8 <ifx_i2c_pl_negotiation_event_handler+0x188>)
100030ba:	f7fe fac1 	bl	10001640 <pal_os_event_register_callback_oneshot>
100030be:	e078      	b.n	100031b2 <ifx_i2c_pl_negotiation_event_handler+0x182>
            }
            break;
            // Read the current Max frequency supported by slave
            case PL_INIT_GET_FREQ_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
100030c0:	2344      	movs	r3, #68	; 0x44
100030c2:	e028      	b.n	10003116 <ifx_i2c_pl_negotiation_event_handler+0xe6>
            }
            break;
            // Set the I2C mode register
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
100030c4:	1c23      	adds	r3, r4, #0
100030c6:	1c22      	adds	r2, r4, #0
100030c8:	3382      	adds	r3, #130	; 0x82
100030ca:	781b      	ldrb	r3, [r3, #0]
100030cc:	3283      	adds	r2, #131	; 0x83
100030ce:	7812      	ldrb	r2, [r2, #0]
100030d0:	021b      	lsls	r3, r3, #8

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
100030d2:	4668      	mov	r0, sp
            }
            break;
            // Set the I2C mode register
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
100030d4:	4313      	orrs	r3, r2

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
100030d6:	2280      	movs	r2, #128	; 0x80
100030d8:	7002      	strb	r2, [r0, #0]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
100030da:	8860      	ldrh	r0, [r4, #2]
100030dc:	3211      	adds	r2, #17
100030de:	32ff      	adds	r2, #255	; 0xff
100030e0:	4290      	cmp	r0, r2
100030e2:	d906      	bls.n	100030f2 <ifx_i2c_pl_negotiation_event_handler+0xc2>
100030e4:	4293      	cmp	r3, r2
100030e6:	d810      	bhi.n	1000310a <ifx_i2c_pl_negotiation_event_handler+0xda>
                {
                    //Change to FM+ mode if slave's current supported frequency is below user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
100030e8:	2304      	movs	r3, #4
100030ea:	466a      	mov	r2, sp
100030ec:	7053      	strb	r3, [r2, #1]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
100030ee:	3351      	adds	r3, #81	; 0x51
100030f0:	e005      	b.n	100030fe <ifx_i2c_pl_negotiation_event_handler+0xce>
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
                }
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
100030f2:	4293      	cmp	r3, r2
100030f4:	d909      	bls.n	1000310a <ifx_i2c_pl_negotiation_event_handler+0xda>
                {
                    //Change to SM&FM mode if slave's current supported frequency is above user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
100030f6:	2303      	movs	r3, #3
100030f8:	466a      	mov	r2, sp
100030fa:	7053      	strb	r3, [r2, #1]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
100030fc:	3352      	adds	r3, #82	; 0x52
100030fe:	5563      	strb	r3, [r4, r5]
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
10003100:	1c20      	adds	r0, r4, #0
10003102:	2189      	movs	r1, #137	; 0x89
10003104:	2202      	movs	r2, #2
10003106:	466b      	mov	r3, sp
10003108:	e02b      	b.n	10003162 <ifx_i2c_pl_negotiation_event_handler+0x132>
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
1000310a:	23d6      	movs	r3, #214	; 0xd6
1000310c:	2266      	movs	r2, #102	; 0x66
1000310e:	005b      	lsls	r3, r3, #1
10003110:	54e2      	strb	r2, [r4, r3]
10003112:	e795      	b.n	10003040 <ifx_i2c_pl_negotiation_event_handler+0x10>
            }
            break;
            // After setting I2C mode register, read the slave's supported frequency
            case PL_INIT_READ_FREQ:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
10003114:	2366      	movs	r3, #102	; 0x66
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
10003116:	1c20      	adds	r0, r4, #0
10003118:	2184      	movs	r1, #132	; 0x84
1000311a:	2204      	movs	r2, #4
            }
            break;
            // After setting I2C mode register, read the slave's supported frequency
            case PL_INIT_READ_FREQ:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
1000311c:	5563      	strb	r3, [r4, r5]
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
1000311e:	f7ff ff0d 	bl	10002f3c <ifx_i2c_pl_read_register>
            }
            break;
10003122:	e046      	b.n	100031b2 <ifx_i2c_pl_negotiation_event_handler+0x182>
            // Verify the requested frequency and slave's supported frequency
            case PL_INIT_VERIFY_FREQ:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
10003124:	1c23      	adds	r3, r4, #0
10003126:	1c22      	adds	r2, r4, #0
10003128:	3382      	adds	r3, #130	; 0x82
1000312a:	3283      	adds	r2, #131	; 0x83
1000312c:	781b      	ldrb	r3, [r3, #0]
1000312e:	7810      	ldrb	r0, [r2, #0]
                if (p_ctx->frequency > slave_frequency)
10003130:	8862      	ldrh	r2, [r4, #2]
            }
            break;
            // Verify the requested frequency and slave's supported frequency
            case PL_INIT_VERIFY_FREQ:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
10003132:	021b      	lsls	r3, r3, #8
                if (p_ctx->frequency > slave_frequency)
10003134:	4303      	orrs	r3, r0
10003136:	429a      	cmp	r2, r3
10003138:	d901      	bls.n	1000313e <ifx_i2c_pl_negotiation_event_handler+0x10e>
                {
                    LOG_PL("[IFX-PL]: Unexpected frequency in MAX_SCL_FREQU\n");
                    p_buffer = NULL;
                    buffer_len = 0;
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
1000313a:	23aa      	movs	r3, #170	; 0xaa
1000313c:	e008      	b.n	10003150 <ifx_i2c_pl_negotiation_event_handler+0x120>
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
1000313e:	2377      	movs	r3, #119	; 0x77
10003140:	e006      	b.n	10003150 <ifx_i2c_pl_negotiation_event_handler+0x120>
            break;
            // Frequency negotiated, Set frequency at master
            case PL_INIT_AGREE_FREQ:
            {
                // Frequency negotiation between master and slave is complete
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
10003142:	8861      	ldrh	r1, [r4, #2]
10003144:	1c20      	adds	r0, r4, #0
10003146:	f7ff ff51 	bl	10002fec <ifx_i2c_pl_set_bit_rate>
1000314a:	1e01      	subs	r1, r0, #0
                if (IFX_I2C_STACK_SUCCESS == event)
1000314c:	d102      	bne.n	10003154 <ifx_i2c_pl_negotiation_event_handler+0x124>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
1000314e:	2311      	movs	r3, #17
10003150:	5563      	strb	r3, [r4, r5]
10003152:	e775      	b.n	10003040 <ifx_i2c_pl_negotiation_event_handler+0x10>
                    continue_negotiation = TRUE;
                }
                else if (IFX_I2C_STACK_ERROR == event)
10003154:	2381      	movs	r3, #129	; 0x81
10003156:	005b      	lsls	r3, r3, #1
10003158:	4298      	cmp	r0, r3
1000315a:	d12a      	bne.n	100031b2 <ifx_i2c_pl_negotiation_event_handler+0x182>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
1000315c:	3b58      	subs	r3, #88	; 0x58
1000315e:	5563      	strb	r3, [r4, r5]
10003160:	e027      	b.n	100031b2 <ifx_i2c_pl_negotiation_event_handler+0x182>
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
10003162:	f7ff ff0a 	bl	10002f7a <ifx_i2c_pl_write_register>
            }
            break;
10003166:	e024      	b.n	100031b2 <ifx_i2c_pl_negotiation_event_handler+0x182>
            // Read the frame length to verify
            case PL_INIT_GET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
10003168:	2388      	movs	r3, #136	; 0x88
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
1000316a:	1c20      	adds	r0, r4, #0
            }
            break;
            // Read the frame length to verify
            case PL_INIT_GET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
1000316c:	5563      	strb	r3, [r4, r5]
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
1000316e:	2181      	movs	r1, #129	; 0x81
10003170:	2202      	movs	r2, #2
10003172:	e7d4      	b.n	1000311e <ifx_i2c_pl_negotiation_event_handler+0xee>
            }
            break;
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
10003174:	23aa      	movs	r3, #170	; 0xaa
10003176:	5563      	strb	r3, [r4, r5]
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
10003178:	1c23      	adds	r3, r4, #0
1000317a:	1c22      	adds	r2, r4, #0
1000317c:	3380      	adds	r3, #128	; 0x80
1000317e:	781b      	ldrb	r3, [r3, #0]
10003180:	3281      	adds	r2, #129	; 0x81
10003182:	7812      	ldrb	r2, [r2, #0]
10003184:	021b      	lsls	r3, r3, #8
10003186:	4313      	orrs	r3, r2
                // Error if slave's frame length is more than requested frame length
                if (p_ctx->frame_size >= slave_frame_len)
10003188:	88a2      	ldrh	r2, [r4, #4]
1000318a:	429a      	cmp	r2, r3
1000318c:	d200      	bcs.n	10003190 <ifx_i2c_pl_negotiation_event_handler+0x160>
1000318e:	e757      	b.n	10003040 <ifx_i2c_pl_negotiation_event_handler+0x10>
                {
                    p_ctx->frame_size = slave_frame_len;
10003190:	80a3      	strh	r3, [r4, #4]
                    event = IFX_I2C_STACK_SUCCESS;
10003192:	2100      	movs	r1, #0
10003194:	e754      	b.n	10003040 <ifx_i2c_pl_negotiation_event_handler+0x10>
10003196:	23a0      	movs	r3, #160	; 0xa0
            break;
            case PL_INIT_DONE:
            {
                if (IFX_I2C_STACK_SUCCESS == event)
                {
                    p_ctx->pl.frame_state = PL_STATE_READY;
10003198:	2202      	movs	r2, #2
1000319a:	33ff      	adds	r3, #255	; 0xff
                continue_negotiation = TRUE;
            }
            break;
            case PL_INIT_DONE:
            {
                if (IFX_I2C_STACK_SUCCESS == event)
1000319c:	2900      	cmp	r1, #0
1000319e:	d000      	beq.n	100031a2 <ifx_i2c_pl_negotiation_event_handler+0x172>
                {
                    p_ctx->pl.frame_state = PL_STATE_READY;
                }
                else
                {
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
100031a0:	2200      	movs	r2, #0
100031a2:	54e2      	strb	r2, [r4, r3]
                }
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
100031a4:	23d4      	movs	r3, #212	; 0xd4
100031a6:	2200      	movs	r2, #0
100031a8:	005b      	lsls	r3, r3, #1
100031aa:	58e5      	ldr	r5, [r4, r3]
100031ac:	1c20      	adds	r0, r4, #0
100031ae:	1c13      	adds	r3, r2, #0
100031b0:	47a8      	blx	r5
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
100031b2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
100031b4:	10003031 	.word	0x10003031
100031b8:	00002ee0 	.word	0x00002ee0

100031bc <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
100031bc:	b538      	push	{r3, r4, r5, lr}
100031be:	25a0      	movs	r5, #160	; 0xa0
100031c0:	1c04      	adds	r4, r0, #0
100031c2:	1c0b      	adds	r3, r1, #0
100031c4:	35ff      	adds	r5, #255	; 0xff
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
100031c6:	2900      	cmp	r1, #0
100031c8:	d005      	beq.n	100031d6 <ifx_i2c_pl_frame_event_handler+0x1a>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
100031ca:	2202      	movs	r2, #2
100031cc:	5542      	strb	r2, [r0, r5]
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
100031ce:	32a7      	adds	r2, #167	; 0xa7
100031d0:	32ff      	adds	r2, #255	; 0xff
100031d2:	5885      	ldr	r5, [r0, r2]
100031d4:	e05d      	b.n	10003292 <ifx_i2c_pl_frame_event_handler+0xd6>
    }
    else
    {
        switch (p_ctx->pl.frame_state)
100031d6:	5d40      	ldrb	r0, [r0, r5]
100031d8:	3801      	subs	r0, #1
100031da:	2804      	cmp	r0, #4
100031dc:	d869      	bhi.n	100032b2 <ifx_i2c_pl_frame_event_handler+0xf6>
100031de:	f009 f923 	bl	1000c428 <__gnu_thumb1_case_uqi>
100031e2:	0b07      	.short	0x0b07
100031e4:	5b16      	.short	0x5b16
100031e6:	03          	.byte	0x03
100031e7:	00          	.byte	0x00
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
100031e8:	1c20      	adds	r0, r4, #0
100031ea:	f000 f871 	bl	100032d0 <ifx_i2c_pl_soft_reset>
            }
            break;
100031ee:	e06a      	b.n	100032c6 <ifx_i2c_pl_frame_event_handler+0x10a>
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
100031f0:	1c20      	adds	r0, r4, #0
100031f2:	f7ff ff1d 	bl	10003030 <ifx_i2c_pl_negotiation_event_handler>
            }
            break;
100031f6:	e066      	b.n	100032c6 <ifx_i2c_pl_frame_event_handler+0x10a>
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
100031f8:	2303      	movs	r3, #3
100031fa:	5563      	strb	r3, [r4, r5]
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
100031fc:	339c      	adds	r3, #156	; 0x9c
100031fe:	33ff      	adds	r3, #255	; 0xff
10003200:	5ce3      	ldrb	r3, [r4, r3]
10003202:	2b02      	cmp	r3, #2
10003204:	d103      	bne.n	1000320e <ifx_i2c_pl_frame_event_handler+0x52>
                {
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
10003206:	1c20      	adds	r0, r4, #0
10003208:	2182      	movs	r1, #130	; 0x82
1000320a:	2204      	movs	r2, #4
1000320c:	e018      	b.n	10003240 <ifx_i2c_pl_frame_event_handler+0x84>
            //lint -fallthrough "For write frame, polling of i2c status register is skipped"
            // Do read/write frame
            case PL_STATE_DATA_AVAILABLE:
            {
                // Read frame, if response is ready. Ignore busy flag
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
1000320e:	23cf      	movs	r3, #207	; 0xcf
10003210:	005b      	lsls	r3, r3, #1
10003212:	5ce3      	ldrb	r3, [r4, r3]
10003214:	2b02      	cmp	r3, #2
10003216:	d116      	bne.n	10003246 <ifx_i2c_pl_frame_event_handler+0x8a>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
10003218:	1c23      	adds	r3, r4, #0
1000321a:	3380      	adds	r3, #128	; 0x80
1000321c:	781b      	ldrb	r3, [r3, #0]
1000321e:	065b      	lsls	r3, r3, #25
10003220:	d51f      	bpl.n	10003262 <ifx_i2c_pl_frame_event_handler+0xa6>
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
10003222:	1c23      	adds	r3, r4, #0
10003224:	3382      	adds	r3, #130	; 0x82
10003226:	781a      	ldrb	r2, [r3, #0]
10003228:	3301      	adds	r3, #1
1000322a:	781b      	ldrb	r3, [r3, #0]
1000322c:	0212      	lsls	r2, r2, #8
1000322e:	431a      	orrs	r2, r3
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
10003230:	d017      	beq.n	10003262 <ifx_i2c_pl_frame_event_handler+0xa6>
10003232:	88a3      	ldrh	r3, [r4, #4]
10003234:	4293      	cmp	r3, r2
10003236:	d314      	bcc.n	10003262 <ifx_i2c_pl_frame_event_handler+0xa6>
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
10003238:	2304      	movs	r3, #4
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
1000323a:	1c20      	adds	r0, r4, #0
1000323c:	2180      	movs	r1, #128	; 0x80
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
1000323e:	5563      	strb	r3, [r4, r5]
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
10003240:	f7ff fe7c 	bl	10002f3c <ifx_i2c_pl_read_register>
10003244:	e03f      	b.n	100032c6 <ifx_i2c_pl_frame_event_handler+0x10a>
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
                        }
                    }
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
10003246:	2b01      	cmp	r3, #1
10003248:	d10b      	bne.n	10003262 <ifx_i2c_pl_frame_event_handler+0xa6>
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
1000324a:	3303      	adds	r3, #3
1000324c:	5563      	strb	r3, [r4, r5]
                    ifx_i2c_pl_write_register(p_ctx,
1000324e:	33a1      	adds	r3, #161	; 0xa1
10003250:	33ff      	adds	r3, #255	; 0xff
10003252:	5ae2      	ldrh	r2, [r4, r3]
10003254:	3b04      	subs	r3, #4
10003256:	1c20      	adds	r0, r4, #0
10003258:	2180      	movs	r1, #128	; 0x80
1000325a:	58e3      	ldr	r3, [r4, r3]
1000325c:	f7ff fe8d 	bl	10002f7a <ifx_i2c_pl_write_register>
10003260:	e031      	b.n	100032c6 <ifx_i2c_pl_frame_event_handler+0x10a>
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
                }
                // Continue checking the slave status register
                else
                {
                    current_time = pal_os_timer_get_time_in_milliseconds();
10003262:	f7fe fa3d 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
10003266:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10003268:	1ac0      	subs	r0, r0, r3
                    {
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
1000326a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
1000326c:	4298      	cmp	r0, r3
1000326e:	d208      	bcs.n	10003282 <ifx_i2c_pl_frame_event_handler+0xc6>
                    {
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
10003270:	239a      	movs	r3, #154	; 0x9a
10003272:	00db      	lsls	r3, r3, #3
10003274:	58e0      	ldr	r0, [r4, r3]
10003276:	4914      	ldr	r1, [pc, #80]	; (100032c8 <ifx_i2c_pl_frame_event_handler+0x10c>)
10003278:	1c22      	adds	r2, r4, #0
1000327a:	4b14      	ldr	r3, [pc, #80]	; (100032cc <ifx_i2c_pl_frame_event_handler+0x110>)
1000327c:	f7fe f9e0 	bl	10001640 <pal_os_event_register_callback_oneshot>
10003280:	e021      	b.n	100032c6 <ifx_i2c_pl_frame_event_handler+0x10a>
                                                               (void * )p_ctx,
                                                               PL_DATA_POLLING_INVERVAL_US);
                    }
                    else
                    {
                        p_ctx->pl.frame_state = PL_STATE_READY;
10003282:	2302      	movs	r3, #2
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
10003284:	2181      	movs	r1, #129	; 0x81
10003286:	1c20      	adds	r0, r4, #0
                                                               (void * )p_ctx,
                                                               PL_DATA_POLLING_INVERVAL_US);
                    }
                    else
                    {
                        p_ctx->pl.frame_state = PL_STATE_READY;
10003288:	5563      	strb	r3, [r4, r5]
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
1000328a:	33a7      	adds	r3, #167	; 0xa7
1000328c:	33ff      	adds	r3, #255	; 0xff
1000328e:	58e5      	ldr	r5, [r4, r3]
10003290:	0049      	lsls	r1, r1, #1
10003292:	2200      	movs	r2, #0
10003294:	1c13      	adds	r3, r2, #0
10003296:	e015      	b.n	100032c4 <ifx_i2c_pl_frame_event_handler+0x108>
            break;
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
10003298:	2302      	movs	r3, #2
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
1000329a:	21d4      	movs	r1, #212	; 0xd4
                                                    p_ctx->pl.buffer,
1000329c:	1c22      	adds	r2, r4, #0
            break;
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
1000329e:	5563      	strb	r3, [r4, r5]
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
100032a0:	3397      	adds	r3, #151	; 0x97
100032a2:	0049      	lsls	r1, r1, #1
100032a4:	33ff      	adds	r3, #255	; 0xff
100032a6:	5865      	ldr	r5, [r4, r1]
                                                    p_ctx->pl.buffer,
100032a8:	3280      	adds	r2, #128	; 0x80
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
100032aa:	5ae3      	ldrh	r3, [r4, r3]
100032ac:	1c20      	adds	r0, r4, #0
100032ae:	2100      	movs	r1, #0
100032b0:	e008      	b.n	100032c4 <ifx_i2c_pl_frame_event_handler+0x108>
            }
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
100032b2:	2201      	movs	r2, #1
100032b4:	5562      	strb	r2, [r4, r5]
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
100032b6:	32a8      	adds	r2, #168	; 0xa8
100032b8:	32ff      	adds	r2, #255	; 0xff
100032ba:	2181      	movs	r1, #129	; 0x81
100032bc:	58a5      	ldr	r5, [r4, r2]
100032be:	1c20      	adds	r0, r4, #0
100032c0:	1c1a      	adds	r2, r3, #0
100032c2:	0049      	lsls	r1, r1, #1
100032c4:	47a8      	blx	r5
            }
            break;
        }
    }
}
100032c6:	bd38      	pop	{r3, r4, r5, pc}
100032c8:	10002f6f 	.word	0x10002f6f
100032cc:	00001388 	.word	0x00001388

100032d0 <ifx_i2c_pl_soft_reset>:
    }
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
100032d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t i2c_mode_value[2] = {0};
100032d2:	2200      	movs	r2, #0
    switch (p_ctx->pl.request_soft_reset)
100032d4:	21ae      	movs	r1, #174	; 0xae
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
    uint8_t i2c_mode_value[2] = {0};
100032d6:	ab01      	add	r3, sp, #4
100032d8:	801a      	strh	r2, [r3, #0]
    switch (p_ctx->pl.request_soft_reset)
100032da:	31ff      	adds	r1, #255	; 0xff
100032dc:	5c44      	ldrb	r4, [r0, r1]
100032de:	3c99      	subs	r4, #153	; 0x99
100032e0:	2c0a      	cmp	r4, #10
100032e2:	d83b      	bhi.n	1000335c <ifx_i2c_pl_soft_reset+0x8c>
100032e4:	1c02      	adds	r2, r0, #0
100032e6:	1c20      	adds	r0, r4, #0
100032e8:	f009 f89e 	bl	1000c428 <__gnu_thumb1_case_uqi>
100032ec:	38383806 	.word	0x38383806
100032f0:	38383838 	.word	0x38383838
100032f4:	0e30      	.short	0x0e30
100032f6:	26          	.byte	0x26
100032f7:	00          	.byte	0x00
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
100032f8:	23a2      	movs	r3, #162	; 0xa2
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
100032fa:	1c10      	adds	r0, r2, #0
    uint8_t i2c_mode_value[2] = {0};
    switch (p_ctx->pl.request_soft_reset)
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
100032fc:	5453      	strb	r3, [r2, r1]
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
100032fe:	2182      	movs	r1, #130	; 0x82
10003300:	2204      	movs	r2, #4
10003302:	f7ff fe1b 	bl	10002f3c <ifx_i2c_pl_read_register>
            break;
10003306:	e029      	b.n	1000335c <ifx_i2c_pl_soft_reset+0x8c>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
10003308:	1c14      	adds	r4, r2, #0
1000330a:	2008      	movs	r0, #8
1000330c:	3480      	adds	r4, #128	; 0x80
1000330e:	7825      	ldrb	r5, [r4, #0]
10003310:	4028      	ands	r0, r5
10003312:	7020      	strb	r0, [r4, #0]
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
10003314:	2808      	cmp	r0, #8
10003316:	d107      	bne.n	10003328 <ifx_i2c_pl_soft_reset+0x58>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
10003318:	309b      	adds	r0, #155	; 0x9b
1000331a:	5450      	strb	r0, [r2, r1]
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
1000331c:	1c10      	adds	r0, r2, #0
1000331e:	2188      	movs	r1, #136	; 0x88
10003320:	2202      	movs	r2, #2
10003322:	f7ff fe2a 	bl	10002f7a <ifx_i2c_pl_write_register>
10003326:	e019      	b.n	1000335c <ifx_i2c_pl_soft_reset+0x8c>
            }
            else
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
10003328:	23a0      	movs	r3, #160	; 0xa0
1000332a:	2100      	movs	r1, #0
1000332c:	33ff      	adds	r3, #255	; 0xff
1000332e:	54d1      	strb	r1, [r2, r3]
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
10003330:	3103      	adds	r1, #3
10003332:	1c10      	adds	r0, r2, #0
10003334:	31ff      	adds	r1, #255	; 0xff
10003336:	e00f      	b.n	10003358 <ifx_i2c_pl_soft_reset+0x88>
            }
            break;
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
10003338:	23a1      	movs	r3, #161	; 0xa1
1000333a:	5453      	strb	r3, [r2, r1]
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
1000333c:	239a      	movs	r3, #154	; 0x9a
1000333e:	00db      	lsls	r3, r3, #3
10003340:	58d0      	ldr	r0, [r2, r3]
10003342:	4907      	ldr	r1, [pc, #28]	; (10003360 <ifx_i2c_pl_soft_reset+0x90>)
10003344:	4b07      	ldr	r3, [pc, #28]	; (10003364 <ifx_i2c_pl_soft_reset+0x94>)
10003346:	f7fe f97b 	bl	10001640 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
1000334a:	e007      	b.n	1000335c <ifx_i2c_pl_soft_reset+0x8c>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
1000334c:	23a0      	movs	r3, #160	; 0xa0
1000334e:	2101      	movs	r1, #1
10003350:	33ff      	adds	r3, #255	; 0xff
10003352:	54d1      	strb	r1, [r2, r3]
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
10003354:	1c10      	adds	r0, r2, #0
10003356:	2100      	movs	r1, #0
10003358:	f7ff ff30 	bl	100031bc <ifx_i2c_pl_frame_event_handler>
            break;
        }
        default:
            break;
    }
}
1000335c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
1000335e:	46c0      	nop			; (mov r8, r8)
10003360:	100032d1 	.word	0x100032d1
10003364:	00002ee0 	.word	0x00002ee0

10003368 <ifx_i2c_pl_pal_event_handler>:
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
10003368:	b508      	push	{r3, lr}
1000336a:	1c02      	adds	r2, r0, #0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    switch (event)
1000336c:	2900      	cmp	r1, #0
1000336e:	d014      	beq.n	1000339a <ifx_i2c_pl_pal_event_handler+0x32>
10003370:	2902      	cmp	r1, #2
10003372:	d819      	bhi.n	100033a8 <ifx_i2c_pl_pal_event_handler+0x40>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
10003374:	21ce      	movs	r1, #206	; 0xce
10003376:	0049      	lsls	r1, r1, #1
10003378:	5a43      	ldrh	r3, [r0, r1]
1000337a:	1e58      	subs	r0, r3, #1
1000337c:	5250      	strh	r0, [r2, r1]
1000337e:	2b00      	cmp	r3, #0
10003380:	d005      	beq.n	1000338e <ifx_i2c_pl_pal_event_handler+0x26>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
10003382:	239a      	movs	r3, #154	; 0x9a
10003384:	00db      	lsls	r3, r3, #3
10003386:	58d0      	ldr	r0, [r2, r3]
10003388:	4908      	ldr	r1, [pc, #32]	; (100033ac <ifx_i2c_pl_pal_event_handler+0x44>)
1000338a:	3be8      	subs	r3, #232	; 0xe8
1000338c:	e00a      	b.n	100033a4 <ifx_i2c_pl_pal_event_handler+0x3c>
                                                        ifx_i2c_pal_poll_callback, p_local_ctx, PL_POLLING_INVERVAL_US);
            }
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
1000338e:	2183      	movs	r1, #131	; 0x83
10003390:	1c10      	adds	r0, r2, #0
10003392:	0049      	lsls	r1, r1, #1
10003394:	f7ff ff12 	bl	100031bc <ifx_i2c_pl_frame_event_handler>
10003398:	e006      	b.n	100033a8 <ifx_i2c_pl_pal_event_handler+0x40>
            }
            break;

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
1000339a:	239a      	movs	r3, #154	; 0x9a
1000339c:	00db      	lsls	r3, r3, #3
1000339e:	58c0      	ldr	r0, [r0, r3]
100033a0:	2332      	movs	r3, #50	; 0x32
100033a2:	4903      	ldr	r1, [pc, #12]	; (100033b0 <ifx_i2c_pl_pal_event_handler+0x48>)
100033a4:	f7fe f94c 	bl	10001640 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
        default:
            break;
    }
}
100033a8:	bd08      	pop	{r3, pc}
100033aa:	46c0      	nop			; (mov r8, r8)
100033ac:	10002fb7 	.word	0x10002fb7
100033b0:	100033b5 	.word	0x100033b5

100033b4 <ifx_i2c_pl_guard_time_callback>:
    }
}


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
100033b4:	b508      	push	{r3, lr}
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
100033b6:	23cd      	movs	r3, #205	; 0xcd
100033b8:	005b      	lsls	r3, r3, #1
100033ba:	5cc3      	ldrb	r3, [r0, r3]
100033bc:	2b01      	cmp	r3, #1
100033be:	d10f      	bne.n	100033e0 <ifx_i2c_pl_guard_time_callback+0x2c>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
100033c0:	229c      	movs	r2, #156	; 0x9c
100033c2:	32ff      	adds	r2, #255	; 0xff
100033c4:	5c83      	ldrb	r3, [r0, r2]
100033c6:	2b01      	cmp	r3, #1
100033c8:	d10a      	bne.n	100033e0 <ifx_i2c_pl_guard_time_callback+0x2c>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
100033ca:	1c01      	adds	r1, r0, #0
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
100033cc:	3301      	adds	r3, #1
100033ce:	5483      	strb	r3, [r0, r2]
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
100033d0:	3397      	adds	r3, #151	; 0x97
100033d2:	33ff      	adds	r3, #255	; 0xff
100033d4:	5ac2      	ldrh	r2, [r0, r3]
100033d6:	3180      	adds	r1, #128	; 0x80
100033d8:	6900      	ldr	r0, [r0, #16]
100033da:	f7fe f83b 	bl	10001454 <pal_i2c_read>
100033de:	e004      	b.n	100033ea <ifx_i2c_pl_guard_time_callback+0x36>
        }
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
100033e0:	2b02      	cmp	r3, #2
100033e2:	d102      	bne.n	100033ea <ifx_i2c_pl_guard_time_callback+0x36>
        {
            LOG_PL("[IFX-PL]: GT done -> REG is read\n");
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
100033e4:	2100      	movs	r1, #0
100033e6:	f7ff fee9 	bl	100031bc <ifx_i2c_pl_frame_event_handler>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
100033ea:	bd08      	pop	{r3, pc}

100033ec <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
100033ec:	b538      	push	{r3, r4, r5, lr}
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
100033ee:	23d4      	movs	r3, #212	; 0xd4
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
100033f0:	25a0      	movs	r5, #160	; 0xa0

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
100033f2:	005b      	lsls	r3, r3, #1
100033f4:	50c1      	str	r1, [r0, r3]
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
100033f6:	2300      	movs	r3, #0
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
100033f8:	22bb      	movs	r2, #187	; 0xbb
optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
100033fa:	35ff      	adds	r5, #255	; 0xff
100033fc:	5543      	strb	r3, [r0, r5]
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
100033fe:	33ad      	adds	r3, #173	; 0xad
10003400:	33ff      	adds	r3, #255	; 0xff
10003402:	54c2      	strb	r2, [r0, r3]
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
10003404:	7803      	ldrb	r3, [r0, #0]
10003406:	6902      	ldr	r2, [r0, #16]
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
10003408:	1c04      	adds	r4, r0, #0
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
1000340a:	7113      	strb	r3, [r2, #4]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
1000340c:	6900      	ldr	r0, [r0, #16]
1000340e:	4b11      	ldr	r3, [pc, #68]	; (10003454 <ifx_i2c_pl_init+0x68>)
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
10003410:	22c8      	movs	r2, #200	; 0xc8

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
10003412:	60c3      	str	r3, [r0, #12]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
10003414:	23ce      	movs	r3, #206	; 0xce
10003416:	005b      	lsls	r3, r3, #1
10003418:	52e2      	strh	r2, [r4, r3]
    if (TRUE == p_ctx->do_pal_init)
1000341a:	1c23      	adds	r3, r4, #0
1000341c:	332f      	adds	r3, #47	; 0x2f
1000341e:	781b      	ldrb	r3, [r3, #0]
10003420:	2b01      	cmp	r3, #1
10003422:	d008      	beq.n	10003436 <ifx_i2c_pl_init+0x4a>
        {
            return (IFX_I2C_STACK_ERROR);
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
10003424:	23ae      	movs	r3, #174	; 0xae
10003426:	33ff      	adds	r3, #255	; 0xff
10003428:	5ce2      	ldrb	r2, [r4, r3]
1000342a:	2a01      	cmp	r2, #1
1000342c:	d10a      	bne.n	10003444 <ifx_i2c_pl_init+0x58>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
1000342e:	2299      	movs	r2, #153	; 0x99
10003430:	54e2      	strb	r2, [r4, r3]
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
10003432:	2305      	movs	r3, #5
10003434:	e007      	b.n	10003446 <ifx_i2c_pl_init+0x5a>
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
    if (TRUE == p_ctx->do_pal_init)
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
10003436:	f7fd ffd9 	bl	100013ec <pal_i2c_init>
1000343a:	2800      	cmp	r0, #0
1000343c:	d0f2      	beq.n	10003424 <ifx_i2c_pl_init+0x38>
        {
            return (IFX_I2C_STACK_ERROR);
1000343e:	2081      	movs	r0, #129	; 0x81
10003440:	0040      	lsls	r0, r0, #1
10003442:	e006      	b.n	10003452 <ifx_i2c_pl_init+0x66>
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
10003444:	2301      	movs	r3, #1
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
10003446:	1c20      	adds	r0, r4, #0
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
10003448:	5563      	strb	r3, [r4, r5]
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
1000344a:	2100      	movs	r1, #0
1000344c:	f7ff feb6 	bl	100031bc <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
10003450:	2000      	movs	r0, #0
}
10003452:	bd38      	pop	{r3, r4, r5, pc}
10003454:	10003369 	.word	0x10003369

10003458 <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
10003458:	23a0      	movs	r3, #160	; 0xa0

    return (IFX_I2C_STACK_SUCCESS);
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
1000345a:	b510      	push	{r4, lr}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
1000345c:	2481      	movs	r4, #129	; 0x81
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
1000345e:	33ff      	adds	r3, #255	; 0xff
10003460:	5cc3      	ldrb	r3, [r0, r3]
    {
        return (IFX_I2C_STACK_ERROR);
10003462:	0064      	lsls	r4, r4, #1
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
10003464:	3b01      	subs	r3, #1
10003466:	2b01      	cmp	r3, #1
10003468:	d80c      	bhi.n	10003484 <ifx_i2c_pl_send_frame+0x2c>
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
1000346a:	23cf      	movs	r3, #207	; 0xcf
1000346c:	3c02      	subs	r4, #2
1000346e:	3cff      	subs	r4, #255	; 0xff
10003470:	005b      	lsls	r3, r3, #1
10003472:	54c4      	strb	r4, [r0, r3]

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
10003474:	3302      	adds	r3, #2
10003476:	50c1      	str	r1, [r0, r3]
    p_ctx->pl.tx_frame_len = frame_len;
10003478:	3304      	adds	r3, #4
1000347a:	52c2      	strh	r2, [r0, r3]

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
1000347c:	2100      	movs	r1, #0
1000347e:	f7ff fe9d 	bl	100031bc <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
10003482:	2400      	movs	r4, #0
}
10003484:	1c20      	adds	r0, r4, #0
10003486:	bd10      	pop	{r4, pc}

10003488 <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
10003488:	b508      	push	{r3, lr}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
1000348a:	23a0      	movs	r3, #160	; 0xa0
    {
        return (IFX_I2C_STACK_ERROR);
1000348c:	2281      	movs	r2, #129	; 0x81
}

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
1000348e:	33ff      	adds	r3, #255	; 0xff
10003490:	5cc3      	ldrb	r3, [r0, r3]
    {
        return (IFX_I2C_STACK_ERROR);
10003492:	0052      	lsls	r2, r2, #1
}

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
10003494:	3b01      	subs	r3, #1
10003496:	2b01      	cmp	r3, #1
10003498:	d808      	bhi.n	100034ac <ifx_i2c_pl_receive_frame+0x24>
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
1000349a:	23cf      	movs	r3, #207	; 0xcf
1000349c:	3a01      	subs	r2, #1
1000349e:	3aff      	subs	r2, #255	; 0xff
100034a0:	005b      	lsls	r3, r3, #1
100034a2:	54c2      	strb	r2, [r0, r3]

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
100034a4:	2100      	movs	r1, #0
100034a6:	f7ff fe89 	bl	100031bc <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
100034aa:	2200      	movs	r2, #0
}
100034ac:	1c10      	adds	r0, r2, #0
100034ae:	bd08      	pop	{r3, pc}

100034b0 <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
100034b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100034b2:	b08d      	sub	sp, #52	; 0x34
100034b4:	1c1f      	adds	r7, r3, #0
100034b6:	ab12      	add	r3, sp, #72	; 0x48
100034b8:	1c15      	adds	r5, r2, #0
100034ba:	cb04      	ldmia	r3!, {r2}
100034bc:	1c04      	adds	r4, r0, #0
100034be:	781b      	ldrb	r3, [r3, #0]
100034c0:	9107      	str	r1, [sp, #28]
100034c2:	9308      	str	r3, [sp, #32]
100034c4:	ab14      	add	r3, sp, #80	; 0x50
100034c6:	781b      	ldrb	r3, [r3, #0]
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
100034c8:	1c39      	adds	r1, r7, #0
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
100034ca:	9309      	str	r3, [sp, #36]	; 0x24
100034cc:	ab15      	add	r3, sp, #84	; 0x54
100034ce:	781a      	ldrb	r2, [r3, #0]
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
100034d0:	2396      	movs	r3, #150	; 0x96
100034d2:	009b      	lsls	r3, r3, #2
100034d4:	54c2      	strb	r2, [r0, r3]
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
100034d6:	4b1b      	ldr	r3, [pc, #108]	; (10003544 <ifx_i2c_prl_decrypt_msg+0x94>)
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
100034d8:	ae0a      	add	r6, sp, #40	; 0x28
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
100034da:	18c0      	adds	r0, r0, r3
100034dc:	f001 f8c6 	bl	1000466c <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
100034e0:	1c23      	adds	r3, r4, #0
100034e2:	3331      	adds	r3, #49	; 0x31
100034e4:	781a      	ldrb	r2, [r3, #0]
100034e6:	4b18      	ldr	r3, [pc, #96]	; (10003548 <ifx_i2c_prl_decrypt_msg+0x98>)
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
100034e8:	1c29      	adds	r1, r5, #0
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
100034ea:	54e2      	strb	r2, [r4, r3]
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
100034ec:	4b17      	ldr	r3, [pc, #92]	; (1000354c <ifx_i2c_prl_decrypt_msg+0x9c>)
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
100034ee:	3508      	adds	r5, #8
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
100034f0:	18e0      	adds	r0, r4, r3
100034f2:	f001 f8b7 	bl	10004664 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
100034f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100034f8:	2204      	movs	r2, #4
100034fa:	18e1      	adds	r1, r4, r3
100034fc:	31d5      	adds	r1, #213	; 0xd5
100034fe:	31ff      	adds	r1, #255	; 0xff
10003500:	1c30      	adds	r0, r6, #0
10003502:	f009 fa52 	bl	1000c9aa <memcpy>
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
10003506:	a80b      	add	r0, sp, #44	; 0x2c
10003508:	1c39      	adds	r1, r7, #0
1000350a:	f001 f8af 	bl	1000466c <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
1000350e:	2108      	movs	r1, #8
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
10003510:	2096      	movs	r0, #150	; 0x96
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
10003512:	9b08      	ldr	r3, [sp, #32]
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
10003514:	0080      	lsls	r0, r0, #2
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
10003516:	18e3      	adds	r3, r4, r3
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
10003518:	9101      	str	r1, [sp, #4]
1000351a:	9103      	str	r1, [sp, #12]
1000351c:	9104      	str	r1, [sp, #16]
1000351e:	9912      	ldr	r1, [sp, #72]	; 0x48
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
10003520:	1824      	adds	r4, r4, r0
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
10003522:	33d5      	adds	r3, #213	; 0xd5
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
10003524:	9105      	str	r1, [sp, #20]
10003526:	b2aa      	uxth	r2, r5
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
10003528:	33ff      	adds	r3, #255	; 0xff
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
1000352a:	9600      	str	r6, [sp, #0]
1000352c:	9402      	str	r4, [sp, #8]
1000352e:	2000      	movs	r0, #0
10003530:	9907      	ldr	r1, [sp, #28]
10003532:	f7fd fea3 	bl	1000127c <pal_crypt_decrypt_aes128_ccm>
10003536:	2800      	cmp	r0, #0
10003538:	d001      	beq.n	1000353e <ifx_i2c_prl_decrypt_msg+0x8e>
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
1000353a:	2081      	movs	r0, #129	; 0x81
1000353c:	0040      	lsls	r0, r0, #1
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    return (return_status);
}
1000353e:	b00d      	add	sp, #52	; 0x34
10003540:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003542:	46c0      	nop			; (mov r8, r8)
10003544:	00000259 	.word	0x00000259
10003548:	0000025d 	.word	0x0000025d
1000354c:	0000025e 	.word	0x0000025e

10003550 <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
10003550:	b5f0      	push	{r4, r5, r6, r7, lr}
10003552:	b089      	sub	sp, #36	; 0x24
10003554:	1c1f      	adds	r7, r3, #0
10003556:	ab0e      	add	r3, sp, #56	; 0x38
10003558:	1c15      	adds	r5, r2, #0
1000355a:	781a      	ldrb	r2, [r3, #0]
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
1000355c:	2396      	movs	r3, #150	; 0x96
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
1000355e:	1c04      	adds	r4, r0, #0
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
10003560:	009b      	lsls	r3, r3, #2
10003562:	54c2      	strb	r2, [r0, r3]
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
10003564:	4b19      	ldr	r3, [pc, #100]	; (100035cc <ifx_i2c_prl_encrypt_msg+0x7c>)
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
10003566:	1c0e      	adds	r6, r1, #0
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
10003568:	18c0      	adds	r0, r0, r3
1000356a:	1c39      	adds	r1, r7, #0
1000356c:	f001 f87e 	bl	1000466c <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
10003570:	1c23      	adds	r3, r4, #0
10003572:	3331      	adds	r3, #49	; 0x31
10003574:	781a      	ldrb	r2, [r3, #0]
10003576:	4b16      	ldr	r3, [pc, #88]	; (100035d0 <ifx_i2c_prl_encrypt_msg+0x80>)
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
10003578:	1c29      	adds	r1, r5, #0
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
1000357a:	54e2      	strb	r2, [r4, r3]
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
1000357c:	4b15      	ldr	r3, [pc, #84]	; (100035d4 <ifx_i2c_prl_encrypt_msg+0x84>)
1000357e:	18e0      	adds	r0, r4, r3
10003580:	f001 f870 	bl	10004664 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
10003584:	1c21      	adds	r1, r4, #0
10003586:	31f5      	adds	r1, #245	; 0xf5
10003588:	2204      	movs	r2, #4
1000358a:	31ff      	adds	r1, #255	; 0xff
1000358c:	a806      	add	r0, sp, #24
1000358e:	f009 fa0c 	bl	1000c9aa <memcpy>
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
10003592:	a807      	add	r0, sp, #28
10003594:	1c39      	adds	r1, r7, #0
10003596:	f001 f869 	bl	1000466c <optiga_common_set_uint32>
                                                                data_len,
                                                                &p_ctx->prl.
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
1000359a:	2196      	movs	r1, #150	; 0x96
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
1000359c:	1c23      	adds	r3, r4, #0
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
1000359e:	aa06      	add	r2, sp, #24
100035a0:	9200      	str	r2, [sp, #0]
100035a2:	2208      	movs	r2, #8
                                                                data_len,
                                                                &p_ctx->prl.
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
100035a4:	0089      	lsls	r1, r1, #2
100035a6:	1864      	adds	r4, r4, r1
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
100035a8:	33d5      	adds	r3, #213	; 0xd5
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
100035aa:	9201      	str	r2, [sp, #4]
100035ac:	9203      	str	r2, [sp, #12]
100035ae:	9204      	str	r2, [sp, #16]
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
100035b0:	33ff      	adds	r3, #255	; 0xff
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
100035b2:	9402      	str	r4, [sp, #8]
100035b4:	9605      	str	r6, [sp, #20]
100035b6:	2000      	movs	r0, #0
100035b8:	1c31      	adds	r1, r6, #0
100035ba:	1c2a      	adds	r2, r5, #0
100035bc:	f7fd fe17 	bl	100011ee <pal_crypt_encrypt_aes128_ccm>
100035c0:	2800      	cmp	r0, #0
100035c2:	d001      	beq.n	100035c8 <ifx_i2c_prl_encrypt_msg+0x78>
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
100035c4:	2081      	movs	r0, #129	; 0x81
100035c6:	0040      	lsls	r0, r0, #1
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    return (return_status);
}
100035c8:	b009      	add	sp, #36	; 0x24
100035ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100035cc:	00000259 	.word	0x00000259
100035d0:	0000025d 	.word	0x0000025d
100035d4:	0000025e 	.word	0x0000025e

100035d8 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
100035d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100035da:	b0af      	sub	sp, #188	; 0xbc
100035dc:	9308      	str	r3, [sp, #32]
    uint8_t exit_machine = TRUE;
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
100035de:	2383      	movs	r3, #131	; 0x83
100035e0:	005b      	lsls	r3, r3, #1

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
100035e2:	1c04      	adds	r4, r0, #0
100035e4:	9207      	str	r2, [sp, #28]
    uint8_t exit_machine = TRUE;
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
100035e6:	4219      	tst	r1, r3
100035e8:	d01f      	beq.n	1000362a <ifx_i2c_prl_event_handler+0x52>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
100035ea:	22ff      	movs	r2, #255	; 0xff
100035ec:	33cc      	adds	r3, #204	; 0xcc
100035ee:	54c2      	strb	r2, [r0, r3]
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
100035f0:	3b22      	subs	r3, #34	; 0x22
100035f2:	5cc2      	ldrb	r2, [r0, r3]
100035f4:	33b4      	adds	r3, #180	; 0xb4
100035f6:	2a05      	cmp	r2, #5
100035f8:	d103      	bne.n	10003602 <ifx_i2c_prl_event_handler+0x2a>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
100035fa:	2208      	movs	r2, #8
100035fc:	32ff      	adds	r2, #255	; 0xff
100035fe:	52c2      	strh	r2, [r0, r3]
10003600:	e00f      	b.n	10003622 <ifx_i2c_prl_event_handler+0x4a>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
10003602:	22d9      	movs	r2, #217	; 0xd9
10003604:	0052      	lsls	r2, r2, #1
10003606:	5c80      	ldrb	r0, [r0, r2]
10003608:	2801      	cmp	r0, #1
1000360a:	d109      	bne.n	10003620 <ifx_i2c_prl_event_handler+0x48>
1000360c:	3004      	adds	r0, #4
1000360e:	30ff      	adds	r0, #255	; 0xff
10003610:	4281      	cmp	r1, r0
10003612:	d005      	beq.n	10003620 <ifx_i2c_prl_event_handler+0x48>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10003614:	2184      	movs	r1, #132	; 0x84
10003616:	0049      	lsls	r1, r1, #1
10003618:	52e1      	strh	r1, [r4, r3]
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
1000361a:	2300      	movs	r3, #0
1000361c:	f000 fcd6 	bl	10003fcc <ifx_i2c_prl_event_handler+0x9f4>
        }
        else
        {
            p_ctx->prl.return_status = event;
10003620:	52e1      	strh	r1, [r4, r3]
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
10003622:	2207      	movs	r2, #7
10003624:	23d8      	movs	r3, #216	; 0xd8
10003626:	005b      	lsls	r3, r3, #1
10003628:	54e2      	strb	r2, [r4, r3]
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
1000362a:	23d8      	movs	r3, #216	; 0xd8
1000362c:	005b      	lsls	r3, r3, #1
1000362e:	5ce0      	ldrb	r0, [r4, r3]
10003630:	3801      	subs	r0, #1
10003632:	2807      	cmp	r0, #7
10003634:	d901      	bls.n	1000363a <ifx_i2c_prl_event_handler+0x62>
10003636:	f000 fd06 	bl	10004046 <ifx_i2c_prl_event_handler+0xa6e>
1000363a:	f008 feff 	bl	1000c43c <__gnu_thumb1_case_uhi>
1000363e:	0008      	.short	0x0008
10003640:	03e50171 	.word	0x03e50171
10003644:	01910314 	.word	0x01910314
10003648:	04ca048e 	.word	0x04ca048e
1000364c:	0010      	.short	0x0010
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
1000364e:	2399      	movs	r3, #153	; 0x99
10003650:	009b      	lsls	r3, r3, #2
10003652:	5ae1      	ldrh	r1, [r4, r3]
10003654:	3338      	adds	r3, #56	; 0x38
10003656:	58e5      	ldr	r5, [r4, r3]
10003658:	1c20      	adds	r0, r4, #0
1000365a:	f000 fcfc 	bl	10004056 <ifx_i2c_prl_event_handler+0xa7e>
{
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
1000365e:	25b4      	movs	r5, #180	; 0xb4
10003660:	35ff      	adds	r5, #255	; 0xff
10003662:	5d63      	ldrb	r3, [r4, r5]
10003664:	2b01      	cmp	r3, #1
10003666:	d003      	beq.n	10003670 <ifx_i2c_prl_event_handler+0x98>
10003668:	2b02      	cmp	r3, #2
1000366a:	d100      	bne.n	1000366e <ifx_i2c_prl_event_handler+0x96>
1000366c:	e088      	b.n	10003780 <ifx_i2c_prl_event_handler+0x1a8>
1000366e:	e131      	b.n	100038d4 <ifx_i2c_prl_event_handler+0x2fc>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
10003670:	1c22      	adds	r2, r4, #0
10003672:	3230      	adds	r2, #48	; 0x30
10003674:	7812      	ldrb	r2, [r2, #0]
10003676:	2a7f      	cmp	r2, #127	; 0x7f
10003678:	d901      	bls.n	1000367e <ifx_i2c_prl_event_handler+0xa6>
            {
                p_ctx->prl.state = PRL_STATE_START;
1000367a:	2202      	movs	r2, #2
1000367c:	e7d2      	b.n	10003624 <ifx_i2c_prl_event_handler+0x4c>
                return_status = IFX_I2C_STACK_SUCCESS;
                break;
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
1000367e:	1c22      	adds	r2, r4, #0
10003680:	3232      	adds	r2, #50	; 0x32
10003682:	7812      	ldrb	r2, [r2, #0]
10003684:	2a22      	cmp	r2, #34	; 0x22
10003686:	d108      	bne.n	1000369a <ifx_i2c_prl_event_handler+0xc2>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
10003688:	2160      	movs	r1, #96	; 0x60
1000368a:	32fb      	adds	r2, #251	; 0xfb
1000368c:	32ff      	adds	r2, #255	; 0xff
1000368e:	54a1      	strb	r1, [r4, r2]
                p_ctx->prl.prl_receive_length = 1;
10003690:	3244      	adds	r2, #68	; 0x44
10003692:	52a3      	strh	r3, [r4, r2]
                p_ctx->prl.prl_txrx_receive_length = 1;
10003694:	4ad8      	ldr	r2, [pc, #864]	; (100039f8 <ifx_i2c_prl_event_handler+0x420>)
10003696:	52a3      	strh	r3, [r4, r2]
10003698:	e05f      	b.n	1000375a <ifx_i2c_prl_event_handler+0x182>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
1000369a:	2a11      	cmp	r2, #17
1000369c:	d152      	bne.n	10003744 <ifx_i2c_prl_event_handler+0x16c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
1000369e:	6963      	ldr	r3, [r4, #20]
100036a0:	8898      	ldrh	r0, [r3, #4]
100036a2:	2800      	cmp	r0, #0
100036a4:	d01e      	beq.n	100036e4 <ifx_i2c_prl_event_handler+0x10c>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
100036a6:	2398      	movs	r3, #152	; 0x98
100036a8:	3223      	adds	r2, #35	; 0x23
100036aa:	009b      	lsls	r3, r3, #2
100036ac:	52e2      	strh	r2, [r4, r3]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
100036ae:	3308      	adds	r3, #8
100036b0:	18e1      	adds	r1, r4, r3
100036b2:	3b08      	subs	r3, #8
100036b4:	18e2      	adds	r2, r4, r3
100036b6:	f7fd ff81 	bl	100015bc <pal_os_datastore_read>
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
100036ba:	2801      	cmp	r0, #1
100036bc:	d100      	bne.n	100036c0 <ifx_i2c_prl_event_handler+0xe8>
100036be:	e11e      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
100036c0:	4bce      	ldr	r3, [pc, #824]	; (100039fc <ifx_i2c_prl_event_handler+0x424>)
100036c2:	5ce2      	ldrb	r2, [r4, r3]
100036c4:	3be0      	subs	r3, #224	; 0xe0
100036c6:	54e2      	strb	r2, [r4, r3]
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
100036c8:	4bcd      	ldr	r3, [pc, #820]	; (10003a00 <ifx_i2c_prl_event_handler+0x428>)
100036ca:	5ce3      	ldrb	r3, [r4, r3]
100036cc:	2b00      	cmp	r3, #0
100036ce:	d111      	bne.n	100036f4 <ifx_i2c_prl_event_handler+0x11c>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
100036d0:	23d8      	movs	r3, #216	; 0xd8
100036d2:	2202      	movs	r2, #2
100036d4:	005b      	lsls	r3, r3, #1
100036d6:	54e2      	strb	r2, [r4, r3]
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
100036d8:	2200      	movs	r2, #0
100036da:	3302      	adds	r3, #2
100036dc:	54e2      	strb	r2, [r4, r3]
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
100036de:	3201      	adds	r2, #1
100036e0:	4bc8      	ldr	r3, [pc, #800]	; (10003a04 <ifx_i2c_prl_event_handler+0x42c>)
100036e2:	e7a1      	b.n	10003628 <ifx_i2c_prl_event_handler+0x50>
                        break;
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
100036e4:	4bc6      	ldr	r3, [pc, #792]	; (10003a00 <ifx_i2c_prl_event_handler+0x428>)
100036e6:	5ce3      	ldrb	r3, [r4, r3]
100036e8:	2b00      	cmp	r3, #0
100036ea:	d0f1      	beq.n	100036d0 <ifx_i2c_prl_event_handler+0xf8>
                        return_status = IFX_I2C_STACK_SUCCESS;
                        break;
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
100036ec:	4bc3      	ldr	r3, [pc, #780]	; (100039fc <ifx_i2c_prl_event_handler+0x424>)
100036ee:	5ce2      	ldrb	r2, [r4, r3]
100036f0:	3be0      	subs	r3, #224	; 0xe0
100036f2:	54e2      	strb	r2, [r4, r3]
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
100036f4:	2387      	movs	r3, #135	; 0x87
100036f6:	2268      	movs	r2, #104	; 0x68
100036f8:	009b      	lsls	r3, r3, #2
100036fa:	54e2      	strb	r2, [r4, r3]
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
100036fc:	4bc2      	ldr	r3, [pc, #776]	; (10003a08 <ifx_i2c_prl_event_handler+0x430>)
100036fe:	18e0      	adds	r0, r4, r3
10003700:	337b      	adds	r3, #123	; 0x7b
10003702:	58e1      	ldr	r1, [r4, r3]
10003704:	f000 ffb2 	bl	1000466c <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
10003708:	2305      	movs	r3, #5
                prl_saved_ctx.stored_context_flag = FALSE;
1000370a:	2100      	movs	r1, #0
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
1000370c:	4aba      	ldr	r2, [pc, #744]	; (100039f8 <ifx_i2c_prl_event_handler+0x420>)
                prl_saved_ctx.stored_context_flag = FALSE;
1000370e:	a804      	add	r0, sp, #16
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
10003710:	52a3      	strh	r3, [r4, r2]
                prl_saved_ctx.stored_context_flag = FALSE;
10003712:	3ac4      	subs	r2, #196	; 0xc4
10003714:	3aff      	subs	r2, #255	; 0xff
10003716:	1812      	adds	r2, r2, r0
10003718:	7011      	strb	r1, [r2, #0]
                p_ctx->prl.prl_receive_length = 5;
1000371a:	2298      	movs	r2, #152	; 0x98
1000371c:	0092      	lsls	r2, r2, #2
1000371e:	52a3      	strh	r3, [r4, r2]
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
10003720:	4bb7      	ldr	r3, [pc, #732]	; (10003a00 <ifx_i2c_prl_event_handler+0x428>)
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
10003722:	6966      	ldr	r6, [r4, #20]
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
                prl_saved_ctx.stored_context_flag = FALSE;
                p_ctx->prl.prl_receive_length = 5;
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
10003724:	54e1      	strb	r1, [r4, r3]
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
10003726:	88b3      	ldrh	r3, [r6, #4]
10003728:	428b      	cmp	r3, r1
1000372a:	d016      	beq.n	1000375a <ifx_i2c_prl_event_handler+0x182>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
1000372c:	2234      	movs	r2, #52	; 0x34
1000372e:	a81e      	add	r0, sp, #120	; 0x78
10003730:	f009 f944 	bl	1000c9bc <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
10003734:	88b0      	ldrh	r0, [r6, #4]
10003736:	a91e      	add	r1, sp, #120	; 0x78
10003738:	2234      	movs	r2, #52	; 0x34
1000373a:	f7fd ff23 	bl	10001584 <pal_os_datastore_write>
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
1000373e:	2801      	cmp	r0, #1
10003740:	d10b      	bne.n	1000375a <ifx_i2c_prl_event_handler+0x182>
10003742:	e0dc      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
10003744:	23e9      	movs	r3, #233	; 0xe9
10003746:	22ff      	movs	r2, #255	; 0xff
10003748:	005b      	lsls	r3, r3, #1
1000374a:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.state = PRL_STATE_ERROR;
1000374c:	3af8      	subs	r2, #248	; 0xf8
1000374e:	3b22      	subs	r3, #34	; 0x22
10003750:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
10003752:	32fb      	adds	r2, #251	; 0xfb
10003754:	33b4      	adds	r3, #180	; 0xb4
10003756:	52e2      	strh	r2, [r4, r3]
10003758:	e0d1      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                break;
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
1000375a:	4ba7      	ldr	r3, [pc, #668]	; (100039f8 <ifx_i2c_prl_event_handler+0x420>)
1000375c:	1c20      	adds	r0, r4, #0
1000375e:	5ae2      	ldrh	r2, [r4, r3]
10003760:	330a      	adds	r3, #10
10003762:	18e3      	adds	r3, r4, r3
10003764:	9300      	str	r3, [sp, #0]
10003766:	2387      	movs	r3, #135	; 0x87
10003768:	009b      	lsls	r3, r3, #2
1000376a:	18e3      	adds	r3, r4, r3
1000376c:	1c19      	adds	r1, r3, #0
1000376e:	f000 feb9 	bl	100044e4 <ifx_i2c_tl_transceive>
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
10003772:	2800      	cmp	r0, #0
10003774:	d000      	beq.n	10003778 <ifx_i2c_prl_event_handler+0x1a0>
10003776:	e0bf      	b.n	100038f8 <ifx_i2c_prl_event_handler+0x320>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
10003778:	2302      	movs	r3, #2
1000377a:	5563      	strb	r3, [r4, r5]
1000377c:	f000 fc6e 	bl	1000405c <ifx_i2c_prl_event_handler+0xa84>
        }
        break;
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
10003780:	2203      	movs	r2, #3
10003782:	9b07      	ldr	r3, [sp, #28]
10003784:	781b      	ldrb	r3, [r3, #0]
10003786:	4393      	bics	r3, r2
10003788:	229a      	movs	r2, #154	; 0x9a
1000378a:	0092      	lsls	r2, r2, #2
1000378c:	18a5      	adds	r5, r4, r2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
1000378e:	2b6c      	cmp	r3, #108	; 0x6c
10003790:	d12b      	bne.n	100037ea <ifx_i2c_prl_event_handler+0x212>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
10003792:	1c23      	adds	r3, r4, #0
10003794:	3332      	adds	r3, #50	; 0x32
        break;
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
10003796:	781b      	ldrb	r3, [r3, #0]
10003798:	2b11      	cmp	r3, #17
1000379a:	d000      	beq.n	1000379e <ifx_i2c_prl_event_handler+0x1c6>
1000379c:	e08c      	b.n	100038b8 <ifx_i2c_prl_event_handler+0x2e0>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
1000379e:	9b08      	ldr	r3, [sp, #32]
100037a0:	2b05      	cmp	r3, #5
100037a2:	d000      	beq.n	100037a6 <ifx_i2c_prl_event_handler+0x1ce>
100037a4:	e088      	b.n	100038b8 <ifx_i2c_prl_event_handler+0x2e0>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
100037a6:	1c20      	adds	r0, r4, #0
100037a8:	30d5      	adds	r0, #213	; 0xd5
100037aa:	2228      	movs	r2, #40	; 0x28
100037ac:	30ff      	adds	r0, #255	; 0xff
100037ae:	1c29      	adds	r1, r5, #0
100037b0:	f009 f8fb 	bl	1000c9aa <memcpy>
100037b4:	23a5      	movs	r3, #165	; 0xa5
100037b6:	009b      	lsls	r3, r3, #2
100037b8:	58e2      	ldr	r2, [r4, r3]
100037ba:	3be0      	subs	r3, #224	; 0xe0
100037bc:	50e2      	str	r2, [r4, r3]
100037be:	33e4      	adds	r3, #228	; 0xe4
100037c0:	58e2      	ldr	r2, [r4, r3]
100037c2:	3bdc      	subs	r3, #220	; 0xdc
100037c4:	50e2      	str	r2, [r4, r3]
100037c6:	33d4      	adds	r3, #212	; 0xd4
100037c8:	5ce2      	ldrb	r2, [r4, r3]
100037ca:	4b90      	ldr	r3, [pc, #576]	; (10003a0c <ifx_i2c_prl_event_handler+0x434>)
100037cc:	54e2      	strb	r2, [r4, r3]
100037ce:	4b90      	ldr	r3, [pc, #576]	; (10003a10 <ifx_i2c_prl_event_handler+0x438>)
100037d0:	5ce2      	ldrb	r2, [r4, r3]
100037d2:	4b90      	ldr	r3, [pc, #576]	; (10003a14 <ifx_i2c_prl_event_handler+0x43c>)
100037d4:	54e2      	strb	r2, [r4, r3]
100037d6:	4b89      	ldr	r3, [pc, #548]	; (100039fc <ifx_i2c_prl_event_handler+0x424>)
100037d8:	5ce2      	ldrb	r2, [r4, r3]
100037da:	3be0      	subs	r3, #224	; 0xe0
100037dc:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
100037de:	2201      	movs	r2, #1
100037e0:	4b88      	ldr	r3, [pc, #544]	; (10003a04 <ifx_i2c_prl_event_handler+0x42c>)
100037e2:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.state = PRL_STATE_TXRX;
100037e4:	3203      	adds	r2, #3
100037e6:	3bb6      	subs	r3, #182	; 0xb6
100037e8:	e061      	b.n	100038ae <ifx_i2c_prl_event_handler+0x2d6>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
100037ea:	2b64      	cmp	r3, #100	; 0x64
100037ec:	d164      	bne.n	100038b8 <ifx_i2c_prl_event_handler+0x2e0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
100037ee:	1c23      	adds	r3, r4, #0
100037f0:	3332      	adds	r3, #50	; 0x32
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
100037f2:	781b      	ldrb	r3, [r3, #0]
100037f4:	2b22      	cmp	r3, #34	; 0x22
100037f6:	d15f      	bne.n	100038b8 <ifx_i2c_prl_event_handler+0x2e0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
100037f8:	9b08      	ldr	r3, [sp, #32]
100037fa:	2b01      	cmp	r3, #1
100037fc:	d15c      	bne.n	100038b8 <ifx_i2c_prl_event_handler+0x2e0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
100037fe:	2120      	movs	r1, #32
10003800:	466a      	mov	r2, sp
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
10003802:	1c26      	adds	r6, r4, #0
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
10003804:	1852      	adds	r2, r2, r1
10003806:	4b7e      	ldr	r3, [pc, #504]	; (10003a00 <ifx_i2c_prl_event_handler+0x428>)
10003808:	7812      	ldrb	r2, [r2, #0]
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
1000380a:	36d5      	adds	r6, #213	; 0xd5
1000380c:	36ff      	adds	r6, #255	; 0xff
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
1000380e:	54e2      	strb	r2, [r4, r3]
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
10003810:	1c28      	adds	r0, r5, #0
10003812:	2228      	movs	r2, #40	; 0x28
10003814:	1c31      	adds	r1, r6, #0
10003816:	f009 f8c8 	bl	1000c9aa <memcpy>
1000381a:	23da      	movs	r3, #218	; 0xda
1000381c:	27d9      	movs	r7, #217	; 0xd9
1000381e:	005b      	lsls	r3, r3, #1
10003820:	58e2      	ldr	r2, [r4, r3]
10003822:	33e0      	adds	r3, #224	; 0xe0
10003824:	50e2      	str	r2, [r4, r3]
10003826:	3bd8      	subs	r3, #216	; 0xd8
10003828:	58e2      	ldr	r2, [r4, r3]
1000382a:	33dc      	adds	r3, #220	; 0xdc
1000382c:	50e2      	str	r2, [r4, r3]
1000382e:	4b77      	ldr	r3, [pc, #476]	; (10003a0c <ifx_i2c_prl_event_handler+0x434>)
10003830:	007f      	lsls	r7, r7, #1
10003832:	5ce2      	ldrb	r2, [r4, r3]
10003834:	332e      	adds	r3, #46	; 0x2e
10003836:	54e2      	strb	r2, [r4, r3]
10003838:	4b76      	ldr	r3, [pc, #472]	; (10003a14 <ifx_i2c_prl_event_handler+0x43c>)
1000383a:	5ce2      	ldrb	r2, [r4, r3]
1000383c:	4b74      	ldr	r3, [pc, #464]	; (10003a10 <ifx_i2c_prl_event_handler+0x438>)
1000383e:	54e2      	strb	r2, [r4, r3]
10003840:	5de2      	ldrb	r2, [r4, r7]
10003842:	4b6e      	ldr	r3, [pc, #440]	; (100039fc <ifx_i2c_prl_event_handler+0x424>)
10003844:	54e2      	strb	r2, [r4, r3]
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
10003846:	6963      	ldr	r3, [r4, #20]
10003848:	8898      	ldrh	r0, [r3, #4]
1000384a:	2800      	cmp	r0, #0
1000384c:	d019      	beq.n	10003882 <ifx_i2c_prl_event_handler+0x2aa>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
1000384e:	2398      	movs	r3, #152	; 0x98
10003850:	2234      	movs	r2, #52	; 0x34
10003852:	009b      	lsls	r3, r3, #2
10003854:	52e2      	strh	r2, [r4, r3]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
10003856:	1c29      	adds	r1, r5, #0
10003858:	f7fd fe94 	bl	10001584 <pal_os_datastore_write>
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
1000385c:	2800      	cmp	r0, #0
1000385e:	d010      	beq.n	10003882 <ifx_i2c_prl_event_handler+0x2aa>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
10003860:	23e9      	movs	r3, #233	; 0xe9
10003862:	22ff      	movs	r2, #255	; 0xff
10003864:	005b      	lsls	r3, r3, #1
10003866:	54e2      	strb	r2, [r4, r3]
10003868:	3af8      	subs	r2, #248	; 0xf8
1000386a:	3b22      	subs	r3, #34	; 0x22
1000386c:	54e2      	strb	r2, [r4, r3]
1000386e:	2184      	movs	r1, #132	; 0x84
10003870:	2299      	movs	r2, #153	; 0x99
10003872:	2300      	movs	r3, #0
10003874:	0092      	lsls	r2, r2, #2
10003876:	0049      	lsls	r1, r1, #1
10003878:	55e3      	strb	r3, [r4, r7]
1000387a:	52a1      	strh	r1, [r4, r2]
1000387c:	323c      	adds	r2, #60	; 0x3c
1000387e:	54a3      	strb	r3, [r4, r2]
10003880:	e03a      	b.n	100038f8 <ifx_i2c_prl_event_handler+0x320>
                        break;
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
10003882:	2228      	movs	r2, #40	; 0x28
10003884:	1c30      	adds	r0, r6, #0
10003886:	2100      	movs	r1, #0
10003888:	f009 f898 	bl	1000c9bc <memset>
1000388c:	22da      	movs	r2, #218	; 0xda
1000388e:	2300      	movs	r3, #0
10003890:	0052      	lsls	r2, r2, #1
10003892:	50a3      	str	r3, [r4, r2]
10003894:	3204      	adds	r2, #4
10003896:	50a3      	str	r3, [r4, r2]
10003898:	3204      	adds	r2, #4
1000389a:	50a3      	str	r3, [r4, r2]
1000389c:	4a5b      	ldr	r2, [pc, #364]	; (10003a0c <ifx_i2c_prl_event_handler+0x434>)
1000389e:	54a3      	strb	r3, [r4, r2]
100038a0:	4a5c      	ldr	r2, [pc, #368]	; (10003a14 <ifx_i2c_prl_event_handler+0x43c>)
100038a2:	54a3      	strb	r3, [r4, r2]
100038a4:	323d      	adds	r2, #61	; 0x3d
100038a6:	54a3      	strb	r3, [r4, r2]
100038a8:	2201      	movs	r2, #1
100038aa:	33b1      	adds	r3, #177	; 0xb1
100038ac:	33ff      	adds	r3, #255	; 0xff
100038ae:	54e2      	strb	r2, [r4, r3]
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                return_status = IFX_I2C_STACK_ERROR;
                break;
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
100038b0:	2399      	movs	r3, #153	; 0x99
100038b2:	2200      	movs	r2, #0
100038b4:	009b      	lsls	r3, r3, #2
100038b6:	e085      	b.n	100039c4 <ifx_i2c_prl_event_handler+0x3ec>
                CLEAR_SESSION_CONTEXT(p_ctx);
                p_ctx->prl.state = PRL_STATE_IDLE;
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
100038b8:	1c28      	adds	r0, r5, #0
100038ba:	2100      	movs	r1, #0
100038bc:	2234      	movs	r2, #52	; 0x34
100038be:	f009 f87d 	bl	1000c9bc <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
100038c2:	6963      	ldr	r3, [r4, #20]
100038c4:	8898      	ldrh	r0, [r3, #4]
100038c6:	2800      	cmp	r0, #0
100038c8:	d019      	beq.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
100038ca:	1c29      	adds	r1, r5, #0
100038cc:	2234      	movs	r2, #52	; 0x34
100038ce:	f7fd fe59 	bl	10001584 <pal_os_datastore_write>
100038d2:	e014      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
            return_status = IFX_I2C_STACK_SUCCESS;
        }
        break;
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
100038d4:	23e9      	movs	r3, #233	; 0xe9
100038d6:	22ff      	movs	r2, #255	; 0xff
100038d8:	005b      	lsls	r3, r3, #1
100038da:	54e2      	strb	r2, [r4, r3]
100038dc:	3af8      	subs	r2, #248	; 0xf8
100038de:	3b22      	subs	r3, #34	; 0x22
100038e0:	54e2      	strb	r2, [r4, r3]
100038e2:	2184      	movs	r1, #132	; 0x84
100038e4:	2300      	movs	r3, #0
100038e6:	32ac      	adds	r2, #172	; 0xac
100038e8:	32ff      	adds	r2, #255	; 0xff
100038ea:	54a3      	strb	r3, [r4, r2]
100038ec:	0049      	lsls	r1, r1, #1
100038ee:	32b2      	adds	r2, #178	; 0xb2
100038f0:	52a1      	strh	r1, [r4, r2]
100038f2:	323c      	adds	r2, #60	; 0x3c
100038f4:	54a3      	strb	r3, [r4, r2]
100038f6:	e002      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
            break;
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
                if (IFX_I2C_STACK_SUCCESS != return_status)
100038f8:	2800      	cmp	r0, #0
100038fa:	d100      	bne.n	100038fe <ifx_i2c_prl_event_handler+0x326>
100038fc:	e695      	b.n	1000362a <ifx_i2c_prl_event_handler+0x52>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
100038fe:	23e9      	movs	r3, #233	; 0xe9
10003900:	22ff      	movs	r2, #255	; 0xff
10003902:	005b      	lsls	r3, r3, #1
10003904:	54e2      	strb	r2, [r4, r3]
10003906:	3af8      	subs	r2, #248	; 0xf8
10003908:	3b22      	subs	r3, #34	; 0x22
1000390a:	54e2      	strb	r2, [r4, r3]
1000390c:	2184      	movs	r1, #132	; 0x84
1000390e:	2300      	movs	r3, #0
10003910:	32ac      	adds	r2, #172	; 0xac
10003912:	32ff      	adds	r2, #255	; 0xff
10003914:	54a3      	strb	r3, [r4, r2]
10003916:	0049      	lsls	r1, r1, #1
10003918:	32b2      	adds	r2, #178	; 0xb2
1000391a:	52a1      	strh	r1, [r4, r2]
1000391c:	323c      	adds	r2, #60	; 0x3c
1000391e:	e340      	b.n	10003fa2 <ifx_i2c_prl_event_handler+0x9ca>
                }
            }
            break;
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
10003920:	1c23      	adds	r3, r4, #0
10003922:	3330      	adds	r3, #48	; 0x30
10003924:	781b      	ldrb	r3, [r3, #0]
10003926:	b25a      	sxtb	r2, r3
10003928:	2a00      	cmp	r2, #0
1000392a:	db06      	blt.n	1000393a <ifx_i2c_prl_event_handler+0x362>
1000392c:	2b00      	cmp	r3, #0
1000392e:	d015      	beq.n	1000395c <ifx_i2c_prl_event_handler+0x384>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
10003930:	23d9      	movs	r3, #217	; 0xd9
10003932:	005b      	lsls	r3, r3, #1
            }
            break;
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
10003934:	5ce3      	ldrb	r3, [r4, r3]
10003936:	2b00      	cmp	r3, #0
10003938:	d110      	bne.n	1000395c <ifx_i2c_prl_event_handler+0x384>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
1000393a:	23d8      	movs	r3, #216	; 0xd8
1000393c:	2205      	movs	r2, #5
1000393e:	005b      	lsls	r3, r3, #1
10003940:	54e2      	strb	r2, [r4, r3]
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
10003942:	23b2      	movs	r3, #178	; 0xb2
10003944:	320c      	adds	r2, #12
10003946:	33ff      	adds	r3, #255	; 0xff
10003948:	54e2      	strb	r2, [r4, r3]
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
1000394a:	2200      	movs	r2, #0
1000394c:	3301      	adds	r3, #1
1000394e:	e66b      	b.n	10003628 <ifx_i2c_prl_event_handler+0x50>
                    p_ctx->prl.return_status = return_status;
                    p_ctx->prl.state = PRL_STATE_ERROR;
                    break;
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
10003950:	23d9      	movs	r3, #217	; 0xd9
10003952:	005b      	lsls	r3, r3, #1
10003954:	5ce3      	ldrb	r3, [r4, r3]
10003956:	2b01      	cmp	r3, #1
10003958:	d000      	beq.n	1000395c <ifx_i2c_prl_event_handler+0x384>
1000395a:	e37f      	b.n	1000405c <ifx_i2c_prl_event_handler+0xa84>
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                }
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
1000395c:	2204      	movs	r2, #4
1000395e:	e661      	b.n	10003624 <ifx_i2c_prl_event_handler+0x4c>
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
10003960:	239a      	movs	r3, #154	; 0x9a
10003962:	009b      	lsls	r3, r3, #2
10003964:	18e0      	adds	r0, r4, r3
10003966:	2100      	movs	r1, #0
10003968:	2228      	movs	r2, #40	; 0x28
1000396a:	f009 f827 	bl	1000c9bc <memset>
1000396e:	23a5      	movs	r3, #165	; 0xa5
10003970:	2500      	movs	r5, #0
10003972:	009b      	lsls	r3, r3, #2
10003974:	50e5      	str	r5, [r4, r3]
10003976:	4b21      	ldr	r3, [pc, #132]	; (100039fc <ifx_i2c_prl_event_handler+0x424>)
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
10003978:	a811      	add	r0, sp, #68	; 0x44
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
1000397a:	54e5      	strb	r5, [r4, r3]
1000397c:	3306      	adds	r3, #6
1000397e:	50e5      	str	r5, [r4, r3]
10003980:	3b08      	subs	r3, #8
10003982:	54e5      	strb	r5, [r4, r3]
10003984:	4b22      	ldr	r3, [pc, #136]	; (10003a10 <ifx_i2c_prl_event_handler+0x438>)
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
10003986:	1c29      	adds	r1, r5, #0
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
10003988:	54e5      	strb	r5, [r4, r3]
1000398a:	4b1d      	ldr	r3, [pc, #116]	; (10003a00 <ifx_i2c_prl_event_handler+0x428>)
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
1000398c:	2234      	movs	r2, #52	; 0x34
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
1000398e:	54e5      	strb	r5, [r4, r3]
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
10003990:	f009 f814 	bl	1000c9bc <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
10003994:	6963      	ldr	r3, [r4, #20]
10003996:	8898      	ldrh	r0, [r3, #4]
10003998:	42a8      	cmp	r0, r5
1000399a:	d015      	beq.n	100039c8 <ifx_i2c_prl_event_handler+0x3f0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
1000399c:	a911      	add	r1, sp, #68	; 0x44
1000399e:	2234      	movs	r2, #52	; 0x34
100039a0:	f7fd fdf0 	bl	10001584 <pal_os_datastore_write>
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
100039a4:	42a8      	cmp	r0, r5
100039a6:	d00f      	beq.n	100039c8 <ifx_i2c_prl_event_handler+0x3f0>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
100039a8:	23e9      	movs	r3, #233	; 0xe9
100039aa:	22ff      	movs	r2, #255	; 0xff
100039ac:	005b      	lsls	r3, r3, #1
100039ae:	54e2      	strb	r2, [r4, r3]
100039b0:	3af8      	subs	r2, #248	; 0xf8
100039b2:	3b22      	subs	r3, #34	; 0x22
100039b4:	54e2      	strb	r2, [r4, r3]
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
100039b6:	2208      	movs	r2, #8
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
100039b8:	3302      	adds	r3, #2
100039ba:	54e5      	strb	r5, [r4, r3]
100039bc:	33ee      	adds	r3, #238	; 0xee
100039be:	54e5      	strb	r5, [r4, r3]
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
100039c0:	32ff      	adds	r2, #255	; 0xff
100039c2:	3b3c      	subs	r3, #60	; 0x3c
100039c4:	52e2      	strh	r2, [r4, r3]
                        break;
100039c6:	e630      	b.n	1000362a <ifx_i2c_prl_event_handler+0x52>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                return_status = IFX_I2C_STACK_ERROR;
100039c8:	2300      	movs	r3, #0
100039ca:	2581      	movs	r5, #129	; 0x81
100039cc:	9309      	str	r3, [sp, #36]	; 0x24
100039ce:	006d      	lsls	r5, r5, #1
    uint32_t exit_machine = FALSE;
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
100039d0:	23b2      	movs	r3, #178	; 0xb2
100039d2:	33ff      	adds	r3, #255	; 0xff
100039d4:	5ce3      	ldrb	r3, [r4, r3]
100039d6:	2b33      	cmp	r3, #51	; 0x33
100039d8:	d100      	bne.n	100039dc <ifx_i2c_prl_event_handler+0x404>
100039da:	e0a6      	b.n	10003b2a <ifx_i2c_prl_event_handler+0x552>
100039dc:	d804      	bhi.n	100039e8 <ifx_i2c_prl_event_handler+0x410>
100039de:	2b11      	cmp	r3, #17
100039e0:	d01a      	beq.n	10003a18 <ifx_i2c_prl_event_handler+0x440>
100039e2:	2b22      	cmp	r3, #34	; 0x22
100039e4:	d043      	beq.n	10003a6e <ifx_i2c_prl_event_handler+0x496>
100039e6:	e12f      	b.n	10003c48 <ifx_i2c_prl_event_handler+0x670>
100039e8:	2b44      	cmp	r3, #68	; 0x44
100039ea:	d100      	bne.n	100039ee <ifx_i2c_prl_event_handler+0x416>
100039ec:	e0db      	b.n	10003ba6 <ifx_i2c_prl_event_handler+0x5ce>
100039ee:	2b55      	cmp	r3, #85	; 0x55
100039f0:	d100      	bne.n	100039f4 <ifx_i2c_prl_event_handler+0x41c>
100039f2:	e122      	b.n	10003c3a <ifx_i2c_prl_event_handler+0x662>
100039f4:	e128      	b.n	10003c48 <ifx_i2c_prl_event_handler+0x670>
100039f6:	46c0      	nop			; (mov r8, r8)
100039f8:	00000256 	.word	0x00000256
100039fc:	00000292 	.word	0x00000292
10003a00:	00000293 	.word	0x00000293
10003a04:	00000266 	.word	0x00000266
10003a08:	0000021d 	.word	0x0000021d
10003a0c:	00000262 	.word	0x00000262
10003a10:	00000291 	.word	0x00000291
10003a14:	00000263 	.word	0x00000263
        {
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
10003a18:	22e8      	movs	r2, #232	; 0xe8
10003a1a:	2300      	movs	r3, #0
10003a1c:	0052      	lsls	r2, r2, #1
10003a1e:	54a3      	strb	r3, [r4, r2]
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
10003a20:	324c      	adds	r2, #76	; 0x4c
10003a22:	54a3      	strb	r3, [r4, r2]
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
10003a24:	1c23      	adds	r3, r4, #0
10003a26:	3331      	adds	r3, #49	; 0x31
10003a28:	781a      	ldrb	r2, [r3, #0]
10003a2a:	4bd7      	ldr	r3, [pc, #860]	; (10003d88 <ifx_i2c_prl_event_handler+0x7b0>)
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
10003a2c:	1c20      	adds	r0, r4, #0
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
10003a2e:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
10003a30:	2226      	movs	r2, #38	; 0x26
10003a32:	3343      	adds	r3, #67	; 0x43
10003a34:	52e2      	strh	r2, [r4, r3]
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
10003a36:	18e3      	adds	r3, r4, r3
10003a38:	9300      	str	r3, [sp, #0]
10003a3a:	2387      	movs	r3, #135	; 0x87
10003a3c:	009b      	lsls	r3, r3, #2
10003a3e:	18e3      	adds	r3, r4, r3
10003a40:	1c19      	adds	r1, r3, #0
10003a42:	3a24      	subs	r2, #36	; 0x24
10003a44:	f000 fd4e 	bl	100044e4 <ifx_i2c_tl_transceive>
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_ERROR == return_status)
10003a48:	2381      	movs	r3, #129	; 0x81
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
10003a4a:	1c05      	adds	r5, r0, #0
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_ERROR == return_status)
10003a4c:	005b      	lsls	r3, r3, #1
10003a4e:	4298      	cmp	r0, r3
10003a50:	d108      	bne.n	10003a64 <ifx_i2c_prl_event_handler+0x48c>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
10003a52:	22b2      	movs	r2, #178	; 0xb2
10003a54:	2355      	movs	r3, #85	; 0x55
10003a56:	2581      	movs	r5, #129	; 0x81
10003a58:	32ff      	adds	r2, #255	; 0xff
10003a5a:	54a3      	strb	r3, [r4, r2]
10003a5c:	006d      	lsls	r5, r5, #1
10003a5e:	2301      	movs	r3, #1
10003a60:	9309      	str	r3, [sp, #36]	; 0x24
10003a62:	e7b5      	b.n	100039d0 <ifx_i2c_prl_event_handler+0x3f8>
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
10003a64:	22b2      	movs	r2, #178	; 0xb2
10003a66:	2322      	movs	r3, #34	; 0x22
10003a68:	32ff      	adds	r2, #255	; 0xff
10003a6a:	54a3      	strb	r3, [r4, r2]
10003a6c:	e0ec      	b.n	10003c48 <ifx_i2c_prl_event_handler+0x670>
10003a6e:	2298      	movs	r2, #152	; 0x98
            }
            break;
            case PRL_HS_VERIFY_HELLO:
            {
                exit_machine = TRUE;
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
10003a70:	2144      	movs	r1, #68	; 0x44
10003a72:	9b07      	ldr	r3, [sp, #28]
10003a74:	0092      	lsls	r2, r2, #2
10003a76:	781b      	ldrb	r3, [r3, #0]
10003a78:	420b      	tst	r3, r1
10003a7a:	d003      	beq.n	10003a84 <ifx_i2c_prl_event_handler+0x4ac>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
10003a7c:	5aa1      	ldrh	r1, [r4, r2]
10003a7e:	2901      	cmp	r1, #1
10003a80:	d100      	bne.n	10003a84 <ifx_i2c_prl_event_handler+0x4ac>
10003a82:	e0da      	b.n	10003c3a <ifx_i2c_prl_event_handler+0x662>
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                    exit_machine = FALSE;
                    break;
                }
                //Check valid message type and protocol version
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
10003a84:	5aa2      	ldrh	r2, [r4, r2]
10003a86:	2a26      	cmp	r2, #38	; 0x26
10003a88:	d000      	beq.n	10003a8c <ifx_i2c_prl_event_handler+0x4b4>
10003a8a:	e095      	b.n	10003bb8 <ifx_i2c_prl_event_handler+0x5e0>
10003a8c:	2b00      	cmp	r3, #0
10003a8e:	d000      	beq.n	10003a92 <ifx_i2c_prl_event_handler+0x4ba>
10003a90:	e092      	b.n	10003bb8 <ifx_i2c_prl_event_handler+0x5e0>
10003a92:	9b07      	ldr	r3, [sp, #28]
10003a94:	785b      	ldrb	r3, [r3, #1]
10003a96:	2b01      	cmp	r3, #1
10003a98:	d000      	beq.n	10003a9c <ifx_i2c_prl_event_handler+0x4c4>
10003a9a:	e08d      	b.n	10003bb8 <ifx_i2c_prl_event_handler+0x5e0>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
10003a9c:	9807      	ldr	r0, [sp, #28]
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
10003a9e:	1c27      	adds	r7, r4, #0
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
10003aa0:	3022      	adds	r0, #34	; 0x22
10003aa2:	f000 fdd3 	bl	1000464c <optiga_common_get_uint32>
10003aa6:	23dc      	movs	r3, #220	; 0xdc
10003aa8:	005b      	lsls	r3, r3, #1
10003aaa:	50e0      	str	r0, [r4, r3]
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
10003aac:	3304      	adds	r3, #4
10003aae:	50e0      	str	r0, [r4, r3]
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
10003ab0:	37fd      	adds	r7, #253	; 0xfd
10003ab2:	9b07      	ldr	r3, [sp, #28]
10003ab4:	37ff      	adds	r7, #255	; 0xff
10003ab6:	1c99      	adds	r1, r3, #2
10003ab8:	2220      	movs	r2, #32
10003aba:	1c38      	adds	r0, r7, #0
10003abc:	f008 ff75 	bl	1000c9aa <memcpy>
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABLE;
10003ac0:	49b2      	ldr	r1, [pc, #712]	; (10003d8c <ifx_i2c_prl_event_handler+0x7b4>)
10003ac2:	2211      	movs	r2, #17
10003ac4:	a80c      	add	r0, sp, #48	; 0x30
10003ac6:	f008 ff70 	bl	1000c9aa <memcpy>
    uint8_t secret_input[SHARED_SECRET_LENGTH];
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
10003aca:	6962      	ldr	r2, [r4, #20]
10003acc:	a91e      	add	r1, sp, #120	; 0x78
10003ace:	8850      	ldrh	r0, [r2, #2]
10003ad0:	3206      	adds	r2, #6
10003ad2:	f7fd fd73 	bl	100015bc <pal_os_datastore_read>
10003ad6:	2608      	movs	r6, #8
10003ad8:	1c05      	adds	r5, r0, #0
10003ada:	36ff      	adds	r6, #255	; 0xff
                                              secret_input,
                                              &p_ctx->ifx_i2c_datastore_config->shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
10003adc:	2800      	cmp	r0, #0
10003ade:	d119      	bne.n	10003b14 <ifx_i2c_prl_event_handler+0x53c>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
            break;
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
10003ae0:	2310      	movs	r3, #16
10003ae2:	9300      	str	r3, [sp, #0]
10003ae4:	18db      	adds	r3, r3, r3
10003ae6:	9302      	str	r3, [sp, #8]
                                          sizeof(secret_input),
                                          label_input,
                                          sizeof(label_input) - 1,
                                          p_ctx->prl.random,
                                          sizeof(p_ctx->prl.random),
                                          p_ctx->prl.session_key,
10003ae8:	1c23      	adds	r3, r4, #0
10003aea:	33d5      	adds	r3, #213	; 0xd5
10003aec:	33ff      	adds	r3, #255	; 0xff
        if (PAL_STATUS_SUCCESS != return_status)
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
            break;
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
10003aee:	9303      	str	r3, [sp, #12]
10003af0:	2328      	movs	r3, #40	; 0x28
10003af2:	9701      	str	r7, [sp, #4]
10003af4:	9304      	str	r3, [sp, #16]
10003af6:	a91e      	add	r1, sp, #120	; 0x78
10003af8:	2240      	movs	r2, #64	; 0x40
10003afa:	ab0c      	add	r3, sp, #48	; 0x30
10003afc:	f7fd fad2 	bl	100010a4 <pal_crypt_tls_prf_sha256>
10003b00:	2800      	cmp	r0, #0
10003b02:	d000      	beq.n	10003b06 <ifx_i2c_prl_event_handler+0x52e>
                                          p_ctx->prl.random,
                                          sizeof(p_ctx->prl.random),
                                          p_ctx->prl.session_key,
                                          sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
10003b04:	1c35      	adds	r5, r6, #0
        }
        memset(secret_input, 0, p_ctx->ifx_i2c_datastore_config->shared_secret_length);
10003b06:	6963      	ldr	r3, [r4, #20]
10003b08:	a81e      	add	r0, sp, #120	; 0x78
10003b0a:	88da      	ldrh	r2, [r3, #6]
10003b0c:	2100      	movs	r1, #0
10003b0e:	f008 ff55 	bl	1000c9bc <memset>
10003b12:	e000      	b.n	10003b16 <ifx_i2c_prl_event_handler+0x53e>
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
                                              secret_input,
                                              &p_ctx->ifx_i2c_datastore_config->shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
10003b14:	1c35      	adds	r5, r6, #0
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
10003b16:	2333      	movs	r3, #51	; 0x33
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);

                //Generating session key
                return_status = ifx_i2c_prl_prf(p_ctx);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
10003b18:	42b5      	cmp	r5, r6
10003b1a:	d14e      	bne.n	10003bba <ifx_i2c_prl_event_handler+0x5e2>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
10003b1c:	22b2      	movs	r2, #178	; 0xb2
10003b1e:	2355      	movs	r3, #85	; 0x55
10003b20:	2508      	movs	r5, #8
10003b22:	32ff      	adds	r2, #255	; 0xff
10003b24:	54a3      	strb	r3, [r4, r2]
10003b26:	35ff      	adds	r5, #255	; 0xff
10003b28:	e799      	b.n	10003a5e <ifx_i2c_prl_event_handler+0x486>

            }
            break;
            case PRL_HS_SEND_FINISHED:
            {
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
10003b2a:	27e8      	movs	r7, #232	; 0xe8
10003b2c:	2308      	movs	r3, #8
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
10003b2e:	1c21      	adds	r1, r4, #0
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
10003b30:	26dc      	movs	r6, #220	; 0xdc

            }
            break;
            case PRL_HS_SEND_FINISHED:
            {
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
10003b32:	007f      	lsls	r7, r7, #1
10003b34:	55e3      	strb	r3, [r4, r7]
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
10003b36:	4b96      	ldr	r3, [pc, #600]	; (10003d90 <ifx_i2c_prl_event_handler+0x7b8>)
10003b38:	31fd      	adds	r1, #253	; 0xfd
10003b3a:	18e5      	adds	r5, r4, r3
10003b3c:	2220      	movs	r2, #32
10003b3e:	31ff      	adds	r1, #255	; 0xff
10003b40:	1c28      	adds	r0, r5, #0
10003b42:	f008 ff32 	bl	1000c9aa <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
10003b46:	4b93      	ldr	r3, [pc, #588]	; (10003d94 <ifx_i2c_prl_event_handler+0x7bc>)
10003b48:	0076      	lsls	r6, r6, #1
10003b4a:	18e0      	adds	r0, r4, r3
10003b4c:	59a1      	ldr	r1, [r4, r6]
10003b4e:	f000 fd8d 	bl	1000466c <optiga_common_set_uint32>
                                         p_ctx->prl.slave_sequence_number);

                //Preparing encryption data
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
10003b52:	5de3      	ldrb	r3, [r4, r7]
10003b54:	1c20      	adds	r0, r4, #0
10003b56:	9300      	str	r3, [sp, #0]
10003b58:	1c29      	adds	r1, r5, #0
10003b5a:	59a3      	ldr	r3, [r4, r6]
10003b5c:	2224      	movs	r2, #36	; 0x24
10003b5e:	f7ff fcf7 	bl	10003550 <ifx_i2c_prl_encrypt_msg>
                                                        &p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.slave_sequence_number,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
10003b62:	2381      	movs	r3, #129	; 0x81
10003b64:	005b      	lsls	r3, r3, #1
10003b66:	4298      	cmp	r0, r3
10003b68:	d100      	bne.n	10003b6c <ifx_i2c_prl_event_handler+0x594>
10003b6a:	e772      	b.n	10003a52 <ifx_i2c_prl_event_handler+0x47a>
                    exit_machine = TRUE;
                    break;
                }

                //Append presentation layer header
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
10003b6c:	5de2      	ldrb	r2, [r4, r7]
10003b6e:	331b      	adds	r3, #27
10003b70:	33ff      	adds	r3, #255	; 0xff
10003b72:	54e2      	strb	r2, [r4, r3]
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
10003b74:	4b84      	ldr	r3, [pc, #528]	; (10003d88 <ifx_i2c_prl_event_handler+0x7b0>)
10003b76:	59a1      	ldr	r1, [r4, r6]
10003b78:	18e0      	adds	r0, r4, r3
10003b7a:	f000 fd77 	bl	1000466c <optiga_common_set_uint32>

                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
10003b7e:	2398      	movs	r3, #152	; 0x98
10003b80:	2231      	movs	r2, #49	; 0x31
10003b82:	009b      	lsls	r3, r3, #2
10003b84:	52e2      	strh	r2, [r4, r3]
                return_status = ifx_i2c_tl_transceive(p_ctx,
10003b86:	18e3      	adds	r3, r4, r3
10003b88:	9300      	str	r3, [sp, #0]
10003b8a:	2387      	movs	r3, #135	; 0x87
10003b8c:	009b      	lsls	r3, r3, #2
10003b8e:	18e3      	adds	r3, r4, r3
10003b90:	1c20      	adds	r0, r4, #0
10003b92:	1c19      	adds	r1, r3, #0
10003b94:	f000 fca6 	bl	100044e4 <ifx_i2c_tl_transceive>
10003b98:	1e05      	subs	r5, r0, #0
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      PRL_FINISHED_DATA_LENGTH + 1,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_SUCCESS != return_status)
10003b9a:	d10d      	bne.n	10003bb8 <ifx_i2c_prl_event_handler+0x5e0>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
10003b9c:	22b2      	movs	r2, #178	; 0xb2
10003b9e:	2344      	movs	r3, #68	; 0x44
10003ba0:	32ff      	adds	r2, #255	; 0xff
10003ba2:	54a3      	strb	r3, [r4, r2]
10003ba4:	e054      	b.n	10003c50 <ifx_i2c_prl_event_handler+0x678>
            }
            break;
            case PRL_HS_VERIFY_FINISHED:
            {
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
10003ba6:	9b07      	ldr	r3, [sp, #28]
10003ba8:	781b      	ldrb	r3, [r3, #0]
10003baa:	2b08      	cmp	r3, #8
10003bac:	d104      	bne.n	10003bb8 <ifx_i2c_prl_event_handler+0x5e0>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
10003bae:	2398      	movs	r3, #152	; 0x98
10003bb0:	009b      	lsls	r3, r3, #2
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
            }
            break;
            case PRL_HS_VERIFY_FINISHED:
            {
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
10003bb2:	5ae3      	ldrh	r3, [r4, r3]
10003bb4:	2b31      	cmp	r3, #49	; 0x31
10003bb6:	d004      	beq.n	10003bc2 <ifx_i2c_prl_event_handler+0x5ea>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
10003bb8:	2355      	movs	r3, #85	; 0x55
10003bba:	22b2      	movs	r2, #178	; 0xb2
10003bbc:	32ff      	adds	r2, #255	; 0xff
10003bbe:	54a3      	strb	r3, [r4, r2]
10003bc0:	e74d      	b.n	10003a5e <ifx_i2c_prl_event_handler+0x486>
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
10003bc2:	9b07      	ldr	r3, [sp, #28]
10003bc4:	27da      	movs	r7, #218	; 0xda
10003bc6:	1c58      	adds	r0, r3, #1
10003bc8:	f000 fd40 	bl	1000464c <optiga_common_get_uint32>
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                        &p_data[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
10003bcc:	2287      	movs	r2, #135	; 0x87
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
10003bce:	007f      	lsls	r7, r7, #1
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                        &p_data[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
10003bd0:	0092      	lsls	r2, r2, #2
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
10003bd2:	1c03      	adds	r3, r0, #0
10003bd4:	51e0      	str	r0, [r4, r7]
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                        &p_data[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
10003bd6:	18a6      	adds	r6, r4, r2
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
10003bd8:	20e8      	movs	r0, #232	; 0xe8
10003bda:	9a07      	ldr	r2, [sp, #28]
10003bdc:	0040      	lsls	r0, r0, #1
10003bde:	1d51      	adds	r1, r2, #5
10003be0:	2210      	movs	r2, #16
10003be2:	5c20      	ldrb	r0, [r4, r0]
10003be4:	9201      	str	r2, [sp, #4]
10003be6:	3214      	adds	r2, #20
10003be8:	9003      	str	r0, [sp, #12]
10003bea:	9600      	str	r6, [sp, #0]
10003bec:	9202      	str	r2, [sp, #8]
10003bee:	1c20      	adds	r0, r4, #0
10003bf0:	f7ff fc5e 	bl	100034b0 <ifx_i2c_prl_decrypt_msg>
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
                                                        PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                        PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
10003bf4:	2381      	movs	r3, #129	; 0x81
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
10003bf6:	1c05      	adds	r5, r0, #0
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
                                                        PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                        PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
10003bf8:	005b      	lsls	r3, r3, #1
10003bfa:	4298      	cmp	r0, r3
10003bfc:	d100      	bne.n	10003c00 <ifx_i2c_prl_event_handler+0x628>
10003bfe:	e728      	b.n	10003a52 <ifx_i2c_prl_event_handler+0x47a>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
10003c00:	a80b      	add	r0, sp, #44	; 0x2c
10003c02:	59e1      	ldr	r1, [r4, r7]
10003c04:	f000 fd32 	bl	1000466c <optiga_common_set_uint32>
                ///Validating decrpt data
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
10003c08:	1c20      	adds	r0, r4, #0
10003c0a:	30fd      	adds	r0, #253	; 0xfd
10003c0c:	30ff      	adds	r0, #255	; 0xff
10003c0e:	1c31      	adds	r1, r6, #0
10003c10:	2220      	movs	r2, #32
10003c12:	f008 febb 	bl	1000c98c <memcmp>
10003c16:	2800      	cmp	r0, #0
10003c18:	d000      	beq.n	10003c1c <ifx_i2c_prl_event_handler+0x644>
10003c1a:	e77f      	b.n	10003b1c <ifx_i2c_prl_event_handler+0x544>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                ///Validating sequence number
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
10003c1c:	238f      	movs	r3, #143	; 0x8f
10003c1e:	009b      	lsls	r3, r3, #2
10003c20:	a80b      	add	r0, sp, #44	; 0x2c
10003c22:	18e1      	adds	r1, r4, r3
10003c24:	2204      	movs	r2, #4
10003c26:	f008 feb1 	bl	1000c98c <memcmp>
10003c2a:	2800      	cmp	r0, #0
10003c2c:	d000      	beq.n	10003c30 <ifx_i2c_prl_event_handler+0x658>
10003c2e:	e775      	b.n	10003b1c <ifx_i2c_prl_event_handler+0x544>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
10003c30:	23d9      	movs	r3, #217	; 0xd9
10003c32:	2201      	movs	r2, #1
10003c34:	005b      	lsls	r3, r3, #1
10003c36:	54e2      	strb	r2, [r4, r3]
10003c38:	e006      	b.n	10003c48 <ifx_i2c_prl_event_handler+0x670>
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
10003c3a:	23e9      	movs	r3, #233	; 0xe9
10003c3c:	22ff      	movs	r2, #255	; 0xff
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
10003c3e:	2508      	movs	r5, #8
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
10003c40:	005b      	lsls	r3, r3, #1
10003c42:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
10003c44:	35ff      	adds	r5, #255	; 0xff
10003c46:	e003      	b.n	10003c50 <ifx_i2c_prl_event_handler+0x678>
            break;
            default:
            break;
        }

    } while (TRUE == exit_machine);
10003c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003c4a:	2b01      	cmp	r3, #1
10003c4c:	d100      	bne.n	10003c50 <ifx_i2c_prl_event_handler+0x678>
10003c4e:	e706      	b.n	10003a5e <ifx_i2c_prl_event_handler+0x486>
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
                        break;
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
10003c50:	2308      	movs	r3, #8
10003c52:	33ff      	adds	r3, #255	; 0xff
10003c54:	429d      	cmp	r5, r3
10003c56:	d000      	beq.n	10003c5a <ifx_i2c_prl_event_handler+0x682>
10003c58:	e67a      	b.n	10003950 <ifx_i2c_prl_event_handler+0x378>
                {
                    p_ctx->prl.return_status = return_status;
10003c5a:	335e      	adds	r3, #94	; 0x5e
10003c5c:	33ff      	adds	r3, #255	; 0xff
10003c5e:	52e5      	strh	r5, [r4, r3]
                    p_ctx->prl.state = PRL_STATE_ERROR;
10003c60:	2207      	movs	r2, #7
10003c62:	3bb4      	subs	r3, #180	; 0xb4
10003c64:	e4e0      	b.n	10003628 <ifx_i2c_prl_event_handler+0x50>
                }
            }
            break;
            case PRL_STATE_TXRX:
            {
                FORM_SCTR_HEADER(p_ctx,
10003c66:	1c22      	adds	r2, r4, #0
10003c68:	2303      	movs	r3, #3
10003c6a:	3230      	adds	r2, #48	; 0x30
10003c6c:	7811      	ldrb	r1, [r2, #0]
10003c6e:	20e8      	movs	r0, #232	; 0xe8
10003c70:	400b      	ands	r3, r1
10003c72:	2120      	movs	r1, #32
10003c74:	0040      	lsls	r0, r0, #1
10003c76:	4319      	orrs	r1, r3
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
10003c78:	3b02      	subs	r3, #2
                }
            }
            break;
            case PRL_STATE_TXRX:
            {
                FORM_SCTR_HEADER(p_ctx,
10003c7a:	5421      	strb	r1, [r4, r0]
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
10003c7c:	2b01      	cmp	r3, #1
10003c7e:	d81b      	bhi.n	10003cb8 <ifx_i2c_prl_event_handler+0x6e0>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
10003c80:	23de      	movs	r3, #222	; 0xde
10003c82:	005b      	lsls	r3, r3, #1
10003c84:	58e3      	ldr	r3, [r4, r3]
10003c86:	3301      	adds	r3, #1
10003c88:	3310      	adds	r3, #16
10003c8a:	d90f      	bls.n	10003cac <ifx_i2c_prl_event_handler+0x6d4>
                        (FALSE == p_ctx->prl.trans_repeat_status))
10003c8c:	23a8      	movs	r3, #168	; 0xa8
10003c8e:	009b      	lsls	r3, r3, #2
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
10003c90:	5ce3      	ldrb	r3, [r4, r3]
10003c92:	2b00      	cmp	r3, #0
10003c94:	d10a      	bne.n	10003cac <ifx_i2c_prl_event_handler+0x6d4>
                        (FALSE == p_ctx->prl.trans_repeat_status))
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
10003c96:	23d9      	movs	r3, #217	; 0xd9
10003c98:	2200      	movs	r2, #0
10003c9a:	005b      	lsls	r3, r3, #1
10003c9c:	54e2      	strb	r2, [r4, r3]
10003c9e:	3205      	adds	r2, #5
10003ca0:	3b02      	subs	r3, #2
10003ca2:	54e2      	strb	r2, [r4, r3]
10003ca4:	23b2      	movs	r3, #178	; 0xb2
10003ca6:	320c      	adds	r2, #12
10003ca8:	33ff      	adds	r3, #255	; 0xff
10003caa:	e4bd      	b.n	10003628 <ifx_i2c_prl_event_handler+0x50>
                        break;
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
10003cac:	23e6      	movs	r3, #230	; 0xe6
10003cae:	005b      	lsls	r3, r3, #1
10003cb0:	58e1      	ldr	r1, [r4, r3]
10003cb2:	880b      	ldrh	r3, [r1, #0]
10003cb4:	330d      	adds	r3, #13
10003cb6:	800b      	strh	r3, [r1, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
10003cb8:	23e8      	movs	r3, #232	; 0xe8
10003cba:	27d2      	movs	r7, #210	; 0xd2
10003cbc:	005b      	lsls	r3, r3, #1
10003cbe:	5ce0      	ldrb	r0, [r4, r3]
10003cc0:	37ff      	adds	r7, #255	; 0xff
10003cc2:	55e0      	strb	r0, [r4, r7]

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
10003cc4:	7813      	ldrb	r3, [r2, #0]
10003cc6:	2201      	movs	r2, #1
10003cc8:	4213      	tst	r3, r2
10003cca:	d065      	beq.n	10003d98 <ifx_i2c_prl_event_handler+0x7c0>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
10003ccc:	23da      	movs	r3, #218	; 0xda
10003cce:	005b      	lsls	r3, r3, #1
10003cd0:	58e3      	ldr	r3, [r4, r3]
10003cd2:	189a      	adds	r2, r3, r2
10003cd4:	3210      	adds	r2, #16
10003cd6:	d904      	bls.n	10003ce2 <ifx_i2c_prl_event_handler+0x70a>
                        (FALSE == p_ctx->prl.trans_repeat_status))
10003cd8:	22a8      	movs	r2, #168	; 0xa8
10003cda:	0092      	lsls	r2, r2, #2
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
10003cdc:	5ca2      	ldrb	r2, [r4, r2]
10003cde:	2a00      	cmp	r2, #0
10003ce0:	d0d9      	beq.n	10003c96 <ifx_i2c_prl_event_handler+0x6be>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
10003ce2:	22e9      	movs	r2, #233	; 0xe9
10003ce4:	0052      	lsls	r2, r2, #1
10003ce6:	5ca2      	ldrb	r2, [r4, r2]
10003ce8:	2a04      	cmp	r2, #4
10003cea:	d119      	bne.n	10003d20 <ifx_i2c_prl_event_handler+0x748>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
10003cec:	2500      	movs	r5, #0
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
10003cee:	32bd      	adds	r2, #189	; 0xbd
10003cf0:	32ff      	adds	r2, #255	; 0xff
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
10003cf2:	58a1      	ldr	r1, [r4, r2]
10003cf4:	9501      	str	r5, [sp, #4]
10003cf6:	3105      	adds	r1, #5
10003cf8:	3204      	adds	r2, #4
10003cfa:	3520      	adds	r5, #32
10003cfc:	9003      	str	r0, [sp, #12]
10003cfe:	5aa2      	ldrh	r2, [r4, r2]
10003d00:	9100      	str	r1, [sp, #0]
10003d02:	9502      	str	r5, [sp, #8]
10003d04:	1c20      	adds	r0, r4, #0
10003d06:	f7ff fbd3 	bl	100034b0 <ifx_i2c_prl_decrypt_msg>
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
10003d0a:	2381      	movs	r3, #129	; 0x81
10003d0c:	005b      	lsls	r3, r3, #1
10003d0e:	4298      	cmp	r0, r3
10003d10:	d100      	bne.n	10003d14 <ifx_i2c_prl_event_handler+0x73c>
10003d12:	e5f4      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
10003d14:	335f      	adds	r3, #95	; 0x5f
10003d16:	33ff      	adds	r3, #255	; 0xff
10003d18:	5ae2      	ldrh	r2, [r4, r3]
10003d1a:	3b94      	subs	r3, #148	; 0x94
10003d1c:	58e3      	ldr	r3, [r4, r3]
10003d1e:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
10003d20:	26da      	movs	r6, #218	; 0xda
10003d22:	0076      	lsls	r6, r6, #1
10003d24:	59a3      	ldr	r3, [r4, r6]
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
10003d26:	22d4      	movs	r2, #212	; 0xd4
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
10003d28:	25e0      	movs	r5, #224	; 0xe0
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
10003d2a:	1c59      	adds	r1, r3, #1
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
10003d2c:	2305      	movs	r3, #5
10003d2e:	32ff      	adds	r2, #255	; 0xff
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
10003d30:	006d      	lsls	r5, r5, #1
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
10003d32:	51a1      	str	r1, [r4, r6]
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
10003d34:	54a3      	strb	r3, [r4, r2]
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
10003d36:	5963      	ldr	r3, [r4, r5]
10003d38:	1c58      	adds	r0, r3, #1
10003d3a:	f000 fc97 	bl	1000466c <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
10003d3e:	5963      	ldr	r3, [r4, r5]
10003d40:	1c20      	adds	r0, r4, #0
10003d42:	1d59      	adds	r1, r3, #5
10003d44:	23e2      	movs	r3, #226	; 0xe2
10003d46:	005b      	lsls	r3, r3, #1
10003d48:	5ae2      	ldrh	r2, [r4, r3]
10003d4a:	5de3      	ldrb	r3, [r4, r7]
10003d4c:	9300      	str	r3, [sp, #0]
10003d4e:	59a3      	ldr	r3, [r4, r6]
10003d50:	f7ff fbfe 	bl	10003550 <ifx_i2c_prl_encrypt_msg>
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
10003d54:	2381      	movs	r3, #129	; 0x81
10003d56:	005b      	lsls	r3, r3, #1
10003d58:	4298      	cmp	r0, r3
10003d5a:	d100      	bne.n	10003d5e <ifx_i2c_prl_event_handler+0x786>
10003d5c:	e5cf      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
10003d5e:	33ce      	adds	r3, #206	; 0xce
10003d60:	5ce3      	ldrb	r3, [r4, r3]
10003d62:	5962      	ldr	r2, [r4, r5]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
10003d64:	1c20      	adds	r0, r4, #0
                    if (IFX_I2C_STACK_ERROR == return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
10003d66:	7013      	strb	r3, [r2, #0]
10003d68:	23e2      	movs	r3, #226	; 0xe2
10003d6a:	005b      	lsls	r3, r3, #1
10003d6c:	5ae2      	ldrh	r2, [r4, r3]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
10003d6e:	23d4      	movs	r3, #212	; 0xd4
10003d70:	33ff      	adds	r3, #255	; 0xff
10003d72:	5ce3      	ldrb	r3, [r4, r3]
10003d74:	3208      	adds	r2, #8
10003d76:	189a      	adds	r2, r3, r2
10003d78:	23e6      	movs	r3, #230	; 0xe6
10003d7a:	005b      	lsls	r3, r3, #1
10003d7c:	58e3      	ldr	r3, [r4, r3]
10003d7e:	b292      	uxth	r2, r2
10003d80:	9300      	str	r3, [sp, #0]
10003d82:	5961      	ldr	r1, [r4, r5]
10003d84:	e01b      	b.n	10003dbe <ifx_i2c_prl_event_handler+0x7e6>
10003d86:	46c0      	nop			; (mov r8, r8)
10003d88:	0000021d 	.word	0x0000021d
10003d8c:	1000d593 	.word	0x1000d593
10003d90:	00000221 	.word	0x00000221
10003d94:	00000241 	.word	0x00000241
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
10003d98:	23d4      	movs	r3, #212	; 0xd4
10003d9a:	33ff      	adds	r3, #255	; 0xff
10003d9c:	54e2      	strb	r2, [r4, r3]
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
10003d9e:	22e0      	movs	r2, #224	; 0xe0
10003da0:	0052      	lsls	r2, r2, #1
10003da2:	58a1      	ldr	r1, [r4, r2]
10003da4:	7108      	strb	r0, [r1, #4]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
10003da6:	58a1      	ldr	r1, [r4, r2]
10003da8:	5ce2      	ldrb	r2, [r4, r3]
                                                          &p_ctx->prl.p_actual_payload[4],
                                                          p_ctx->prl.actual_payload_length + 
10003daa:	3b0f      	subs	r3, #15
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
                    return_status = ifx_i2c_tl_transceive(p_ctx,
10003dac:	5ae3      	ldrh	r3, [r4, r3]
10003dae:	1c20      	adds	r0, r4, #0
10003db0:	18d2      	adds	r2, r2, r3
10003db2:	23e6      	movs	r3, #230	; 0xe6
10003db4:	005b      	lsls	r3, r3, #1
10003db6:	58e3      	ldr	r3, [r4, r3]
10003db8:	3104      	adds	r1, #4
10003dba:	b292      	uxth	r2, r2
10003dbc:	9300      	str	r3, [sp, #0]
10003dbe:	23e4      	movs	r3, #228	; 0xe4
10003dc0:	005b      	lsls	r3, r3, #1
10003dc2:	58e3      	ldr	r3, [r4, r3]
10003dc4:	f000 fb8e 	bl	100044e4 <ifx_i2c_tl_transceive>
10003dc8:	23d8      	movs	r3, #216	; 0xd8
                                                          p_ctx->prl.actual_payload_length + 
                                                          p_ctx->prl.prl_header_offset,
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
10003dca:	2281      	movs	r2, #129	; 0x81
10003dcc:	005b      	lsls	r3, r3, #1
10003dce:	0052      	lsls	r2, r2, #1
10003dd0:	4290      	cmp	r0, r2
10003dd2:	d110      	bne.n	10003df6 <ifx_i2c_prl_event_handler+0x81e>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
10003dd4:	21ff      	movs	r1, #255	; 0xff
10003dd6:	32d0      	adds	r2, #208	; 0xd0
10003dd8:	54a1      	strb	r1, [r4, r2]
10003dda:	3acc      	subs	r2, #204	; 0xcc
10003ddc:	3aff      	subs	r2, #255	; 0xff
10003dde:	54e2      	strb	r2, [r4, r3]
10003de0:	2300      	movs	r3, #0
10003de2:	32ac      	adds	r2, #172	; 0xac
10003de4:	32ff      	adds	r2, #255	; 0xff
10003de6:	54a3      	strb	r3, [r4, r2]
10003de8:	32ee      	adds	r2, #238	; 0xee
10003dea:	54a3      	strb	r3, [r4, r2]
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
10003dec:	2399      	movs	r3, #153	; 0x99
10003dee:	009b      	lsls	r3, r3, #2
10003df0:	52e0      	strh	r0, [r4, r3]
                    break;
10003df2:	f7ff fc1a 	bl	1000362a <ifx_i2c_prl_event_handler+0x52>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
10003df6:	22e6      	movs	r2, #230	; 0xe6
10003df8:	0052      	lsls	r2, r2, #1
10003dfa:	58a2      	ldr	r2, [r4, r2]
10003dfc:	8811      	ldrh	r1, [r2, #0]
10003dfe:	2298      	movs	r2, #152	; 0x98
10003e00:	0092      	lsls	r2, r2, #2
10003e02:	52a1      	strh	r1, [r4, r2]
                p_ctx->prl.state = PRL_STATE_VERIFY;
10003e04:	2203      	movs	r2, #3
10003e06:	e11c      	b.n	10004042 <ifx_i2c_prl_event_handler+0xa6a>
                exit_machine = FALSE;
            }
            break;
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
10003e08:	26e4      	movs	r6, #228	; 0xe4
10003e0a:	0076      	lsls	r6, r6, #1
10003e0c:	59a3      	ldr	r3, [r4, r6]
10003e0e:	1c58      	adds	r0, r3, #1
10003e10:	f000 fc1c 	bl	1000464c <optiga_common_get_uint32>
10003e14:	22dc      	movs	r2, #220	; 0xdc
10003e16:	0052      	lsls	r2, r2, #1
10003e18:	50a0      	str	r0, [r4, r2]
                if (0 == data_len)
10003e1a:	9a08      	ldr	r2, [sp, #32]
                exit_machine = FALSE;
            }
            break;
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
10003e1c:	1c03      	adds	r3, r0, #0
                if (0 == data_len)
10003e1e:	2a00      	cmp	r2, #0
10003e20:	d100      	bne.n	10003e24 <ifx_i2c_prl_event_handler+0x84c>
10003e22:	e56c      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                    break;
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
10003e24:	2540      	movs	r5, #64	; 0x40
10003e26:	9a07      	ldr	r2, [sp, #28]
10003e28:	7811      	ldrb	r1, [r2, #0]
10003e2a:	400d      	ands	r5, r1
10003e2c:	d031      	beq.n	10003e92 <ifx_i2c_prl_event_handler+0x8ba>
                {
                    //Check invalid message
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
10003e2e:	2304      	movs	r3, #4
10003e30:	4399      	bics	r1, r3
10003e32:	2940      	cmp	r1, #64	; 0x40
10003e34:	d10b      	bne.n	10003e4e <ifx_i2c_prl_event_handler+0x876>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
10003e36:	9b08      	ldr	r3, [sp, #32]
10003e38:	2b01      	cmp	r3, #1
10003e3a:	d004      	beq.n	10003e46 <ifx_i2c_prl_event_handler+0x86e>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
10003e3c:	23d9      	movs	r3, #217	; 0xd9
10003e3e:	005b      	lsls	r3, r3, #1
10003e40:	5ce3      	ldrb	r3, [r4, r3]
10003e42:	2b01      	cmp	r3, #1
10003e44:	d003      	beq.n	10003e4e <ifx_i2c_prl_event_handler+0x876>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
10003e46:	4b86      	ldr	r3, [pc, #536]	; (10004060 <ifx_i2c_prl_event_handler+0xa88>)
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
                {
                    //Check invalid message
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
10003e48:	5ce3      	ldrb	r3, [r4, r3]
10003e4a:	2b03      	cmp	r3, #3
10003e4c:	d108      	bne.n	10003e60 <ifx_i2c_prl_event_handler+0x888>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10003e4e:	2284      	movs	r2, #132	; 0x84
10003e50:	2399      	movs	r3, #153	; 0x99
10003e52:	0052      	lsls	r2, r2, #1
10003e54:	009b      	lsls	r3, r3, #2
10003e56:	52e2      	strh	r2, [r4, r3]
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003e58:	2200      	movs	r2, #0
10003e5a:	3bb2      	subs	r3, #178	; 0xb2
10003e5c:	54e2      	strb	r2, [r4, r3]
10003e5e:	e012      	b.n	10003e86 <ifx_i2c_prl_event_handler+0x8ae>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
10003e60:	4b80      	ldr	r3, [pc, #512]	; (10004064 <ifx_i2c_prl_event_handler+0xa8c>)
10003e62:	5ce2      	ldrb	r2, [r4, r3]
10003e64:	3b02      	subs	r3, #2
10003e66:	2a01      	cmp	r2, #1
10003e68:	d10a      	bne.n	10003e80 <ifx_i2c_prl_event_handler+0x8a8>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
10003e6a:	1c22      	adds	r2, r4, #0
10003e6c:	3232      	adds	r2, #50	; 0x32
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
10003e6e:	7812      	ldrb	r2, [r2, #0]
10003e70:	2a11      	cmp	r2, #17
10003e72:	d105      	bne.n	10003e80 <ifx_i2c_prl_event_handler+0x8a8>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003e74:	2100      	movs	r1, #0
10003e76:	32a2      	adds	r2, #162	; 0xa2
10003e78:	32ff      	adds	r2, #255	; 0xff
10003e7a:	54a1      	strb	r1, [r4, r2]
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10003e7c:	3aaa      	subs	r2, #170	; 0xaa
10003e7e:	e001      	b.n	10003e84 <ifx_i2c_prl_event_handler+0x8ac>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
10003e80:	2281      	movs	r2, #129	; 0x81
10003e82:	0052      	lsls	r2, r2, #1
10003e84:	52e2      	strh	r2, [r4, r3]
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
10003e86:	23d8      	movs	r3, #216	; 0xd8
10003e88:	2206      	movs	r2, #6
10003e8a:	005b      	lsls	r3, r3, #1
10003e8c:	54e2      	strb	r2, [r4, r3]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
10003e8e:	32f9      	adds	r2, #249	; 0xf9
10003e90:	e034      	b.n	10003efc <ifx_i2c_prl_event_handler+0x924>
                }
                ///Sctr value mismatch
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
10003e92:	20d2      	movs	r0, #210	; 0xd2
10003e94:	30ff      	adds	r0, #255	; 0xff
10003e96:	5c27      	ldrb	r7, [r4, r0]
10003e98:	428f      	cmp	r7, r1
10003e9a:	d000      	beq.n	10003e9e <ifx_i2c_prl_event_handler+0x8c6>
10003e9c:	e52f      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                {
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    break;
                }
                ///For slave encrypted message
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
10003e9e:	2203      	movs	r2, #3
10003ea0:	403a      	ands	r2, r7
10003ea2:	3a02      	subs	r2, #2
10003ea4:	2a01      	cmp	r2, #1
10003ea6:	d832      	bhi.n	10003f0e <ifx_i2c_prl_event_handler+0x936>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
                {
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
10003ea8:	9a08      	ldr	r2, [sp, #32]
10003eaa:	2a0d      	cmp	r2, #13
10003eac:	d800      	bhi.n	10003eb0 <ifx_i2c_prl_event_handler+0x8d8>
10003eae:	e526      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                    {
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                        break;
                    }
                    //Check invalid sequence number
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
10003eb0:	22de      	movs	r2, #222	; 0xde
10003eb2:	0052      	lsls	r2, r2, #1
10003eb4:	58a1      	ldr	r1, [r4, r2]
10003eb6:	1ccf      	adds	r7, r1, #3
10003eb8:	42bb      	cmp	r3, r7
10003eba:	d900      	bls.n	10003ebe <ifx_i2c_prl_event_handler+0x8e6>
10003ebc:	e51f      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
10003ebe:	428b      	cmp	r3, r1
10003ec0:	d800      	bhi.n	10003ec4 <ifx_i2c_prl_event_handler+0x8ec>
10003ec2:	e51c      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
10003ec4:	50a3      	str	r3, [r4, r2]
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
10003ec6:	3210      	adds	r2, #16
10003ec8:	58a1      	ldr	r1, [r4, r2]
10003eca:	880a      	ldrh	r2, [r1, #0]
10003ecc:	3a0d      	subs	r2, #13
10003ece:	b292      	uxth	r2, r2
10003ed0:	800a      	strh	r2, [r1, #0]
                                                               (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
10003ed2:	59a1      	ldr	r1, [r4, r6]
10003ed4:	2610      	movs	r6, #16
10003ed6:	5c20      	ldrb	r0, [r4, r0]
10003ed8:	3105      	adds	r1, #5
10003eda:	9601      	str	r6, [sp, #4]
10003edc:	3614      	adds	r6, #20
10003ede:	9003      	str	r0, [sp, #12]
10003ee0:	9100      	str	r1, [sp, #0]
10003ee2:	9602      	str	r6, [sp, #8]
10003ee4:	1c20      	adds	r0, r4, #0
10003ee6:	f7ff fae3 	bl	100034b0 <ifx_i2c_prl_decrypt_msg>
10003eea:	23d8      	movs	r3, #216	; 0xd8
                                                            p_ctx->prl.slave_sequence_number,
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
                                                            PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                            PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
10003eec:	2281      	movs	r2, #129	; 0x81
10003eee:	005b      	lsls	r3, r3, #1
10003ef0:	0052      	lsls	r2, r2, #1
10003ef2:	4290      	cmp	r0, r2
10003ef4:	d105      	bne.n	10003f02 <ifx_i2c_prl_event_handler+0x92a>
                    {
                        p_ctx->prl.state = PRL_STATE_ALERT;
10003ef6:	3afc      	subs	r2, #252	; 0xfc
10003ef8:	54e2      	strb	r2, [r4, r3]
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
10003efa:	3a02      	subs	r2, #2
10003efc:	3322      	adds	r3, #34	; 0x22
10003efe:	f7ff fb93 	bl	10003628 <ifx_i2c_prl_event_handler+0x50>
                        break;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
10003f02:	2299      	movs	r2, #153	; 0x99
10003f04:	0092      	lsls	r2, r2, #2
10003f06:	52a5      	strh	r5, [r4, r2]
                        p_ctx->prl.state = PRL_STATE_IDLE;
10003f08:	2201      	movs	r2, #1
10003f0a:	f7ff fb8d 	bl	10003628 <ifx_i2c_prl_event_handler+0x50>
10003f0e:	22d8      	movs	r2, #216	; 0xd8
                    }
                }
                else if (data_len <= 1)
10003f10:	9b08      	ldr	r3, [sp, #32]
10003f12:	0052      	lsls	r2, r2, #1
10003f14:	2b01      	cmp	r3, #1
10003f16:	d815      	bhi.n	10003f44 <ifx_i2c_prl_event_handler+0x96c>
                {
                    p_ctx->prl.state = PRL_STATE_ERROR;
10003f18:	2307      	movs	r3, #7
10003f1a:	54a3      	strb	r3, [r4, r2]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
10003f1c:	33cc      	adds	r3, #204	; 0xcc
10003f1e:	3ab1      	subs	r2, #177	; 0xb1
10003f20:	33ff      	adds	r3, #255	; 0xff
10003f22:	54e2      	strb	r2, [r4, r3]
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
10003f24:	3b20      	subs	r3, #32
10003f26:	5ce1      	ldrb	r1, [r4, r3]
10003f28:	3266      	adds	r2, #102	; 0x66
10003f2a:	32ff      	adds	r2, #255	; 0xff
10003f2c:	2900      	cmp	r1, #0
10003f2e:	d103      	bne.n	10003f38 <ifx_i2c_prl_event_handler+0x960>
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
10003f30:	3bb0      	subs	r3, #176	; 0xb0
10003f32:	52a3      	strh	r3, [r4, r2]
10003f34:	f7ff fb79 	bl	1000362a <ifx_i2c_prl_event_handler+0x52>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10003f38:	2184      	movs	r1, #132	; 0x84
10003f3a:	0049      	lsls	r1, r1, #1
10003f3c:	52a1      	strh	r1, [r4, r2]
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10003f3e:	54e5      	strb	r5, [r4, r3]
10003f40:	f7ff fb73 	bl	1000362a <ifx_i2c_prl_event_handler+0x52>
                    }
                }
                else
                {
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
10003f44:	23e6      	movs	r3, #230	; 0xe6
10003f46:	005b      	lsls	r3, r3, #1
10003f48:	58e1      	ldr	r1, [r4, r3]
10003f4a:	880b      	ldrh	r3, [r1, #0]
10003f4c:	3b01      	subs	r3, #1
10003f4e:	800b      	strh	r3, [r1, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
10003f50:	2399      	movs	r3, #153	; 0x99
10003f52:	009b      	lsls	r3, r3, #2
10003f54:	52e5      	strh	r5, [r4, r3]
                    p_ctx->prl.state = PRL_STATE_IDLE;
10003f56:	2301      	movs	r3, #1
10003f58:	e023      	b.n	10003fa2 <ifx_i2c_prl_event_handler+0x9ca>
                }
            }
            break;
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
10003f5a:	9b07      	ldr	r3, [sp, #28]
10003f5c:	781b      	ldrb	r3, [r3, #0]
10003f5e:	2b44      	cmp	r3, #68	; 0x44
10003f60:	d122      	bne.n	10003fa8 <ifx_i2c_prl_event_handler+0x9d0>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
10003f62:	9b08      	ldr	r3, [sp, #32]
10003f64:	2b01      	cmp	r3, #1
10003f66:	d000      	beq.n	10003f6a <ifx_i2c_prl_event_handler+0x992>
10003f68:	e4c9      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
10003f6a:	493d      	ldr	r1, [pc, #244]	; (10004060 <ifx_i2c_prl_event_handler+0xa88>)
10003f6c:	5c63      	ldrb	r3, [r4, r1]
10003f6e:	2b02      	cmp	r3, #2
10003f70:	d900      	bls.n	10003f74 <ifx_i2c_prl_event_handler+0x99c>
10003f72:	e4c4      	b.n	100038fe <ifx_i2c_prl_event_handler+0x326>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
10003f74:	1c22      	adds	r2, r4, #0
10003f76:	2002      	movs	r0, #2
10003f78:	3230      	adds	r2, #48	; 0x30
10003f7a:	7812      	ldrb	r2, [r2, #0]
10003f7c:	4382      	bics	r2, r0
10003f7e:	2a01      	cmp	r2, #1
10003f80:	d001      	beq.n	10003f86 <ifx_i2c_prl_event_handler+0x9ae>
10003f82:	f7ff fb4e 	bl	10003622 <ifx_i2c_prl_event_handler+0x4a>
                             (FULL_PROTECTION == p_ctx->protection_level))
                    {
                        p_ctx->prl.data_retransmit_counter++;
10003f86:	3301      	adds	r3, #1
10003f88:	5463      	strb	r3, [r4, r1]
                        p_ctx->prl.trans_repeat_status = TRUE;
10003f8a:	466a      	mov	r2, sp
10003f8c:	2120      	movs	r1, #32
10003f8e:	23a8      	movs	r3, #168	; 0xa8
10003f90:	1852      	adds	r2, r2, r1
10003f92:	7812      	ldrb	r2, [r2, #0]
10003f94:	009b      	lsls	r3, r3, #2
10003f96:	54e2      	strb	r2, [r4, r3]
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                            p_ctx->prl.state = PRL_STATE_IDLE;
                            break;
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
10003f98:	22e9      	movs	r2, #233	; 0xe9
10003f9a:	2304      	movs	r3, #4
10003f9c:	0052      	lsls	r2, r2, #1
10003f9e:	54a3      	strb	r3, [r4, r2]
                        p_ctx->prl.state = PRL_STATE_TXRX;
10003fa0:	3a22      	subs	r2, #34	; 0x22
10003fa2:	54a3      	strb	r3, [r4, r2]
10003fa4:	f7ff fb41 	bl	1000362a <ifx_i2c_prl_event_handler+0x52>
                      p_ctx->prl.state = PRL_STATE_ERROR;
                    }
                }
                else
                {
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
10003fa8:	4b2f      	ldr	r3, [pc, #188]	; (10004068 <ifx_i2c_prl_event_handler+0xa90>)
10003faa:	5ce3      	ldrb	r3, [r4, r3]
10003fac:	2b03      	cmp	r3, #3
10003fae:	d001      	beq.n	10003fb4 <ifx_i2c_prl_event_handler+0x9dc>
10003fb0:	f7ff fb37 	bl	10003622 <ifx_i2c_prl_event_handler+0x4a>
                    {
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
10003fb4:	22ff      	movs	r2, #255	; 0xff
10003fb6:	33d0      	adds	r3, #208	; 0xd0
10003fb8:	33ff      	adds	r3, #255	; 0xff
10003fba:	54e2      	strb	r2, [r4, r3]
10003fbc:	2184      	movs	r1, #132	; 0x84
10003fbe:	2300      	movs	r3, #0
10003fc0:	32b3      	adds	r2, #179	; 0xb3
10003fc2:	54a3      	strb	r3, [r4, r2]
10003fc4:	0049      	lsls	r1, r1, #1
10003fc6:	32b2      	adds	r2, #178	; 0xb2
10003fc8:	52a1      	strh	r1, [r4, r2]
10003fca:	323c      	adds	r2, #60	; 0x3c
10003fcc:	54a3      	strb	r3, [r4, r2]
10003fce:	f7ff fb28 	bl	10003622 <ifx_i2c_prl_event_handler+0x4a>
                }
            }
            break;
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
10003fd2:	22e9      	movs	r2, #233	; 0xe9
10003fd4:	0052      	lsls	r2, r2, #1
10003fd6:	5ca0      	ldrb	r0, [r4, r2]
10003fd8:	3ad2      	subs	r2, #210	; 0xd2
10003fda:	3aff      	subs	r2, #255	; 0xff
10003fdc:	28ff      	cmp	r0, #255	; 0xff
10003fde:	d101      	bne.n	10003fe4 <ifx_i2c_prl_event_handler+0xa0c>
10003fe0:	f7ff fb22 	bl	10003628 <ifx_i2c_prl_event_handler+0x50>
10003fe4:	2199      	movs	r1, #153	; 0x99
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
10003fe6:	54e2      	strb	r2, [r4, r3]
10003fe8:	0089      	lsls	r1, r1, #2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
10003fea:	2804      	cmp	r0, #4
10003fec:	d120      	bne.n	10004030 <ifx_i2c_prl_event_handler+0xa58>
        {
            p_ctx->prl.decryption_failure_counter++;
10003fee:	481e      	ldr	r0, [pc, #120]	; (10004068 <ifx_i2c_prl_event_handler+0xa90>)
10003ff0:	5c23      	ldrb	r3, [r4, r0]
10003ff2:	189b      	adds	r3, r3, r2
10003ff4:	5423      	strb	r3, [r4, r0]
            p_ctx->prl.state = PRL_STATE_VERIFY;
10003ff6:	23d8      	movs	r3, #216	; 0xd8
10003ff8:	2003      	movs	r0, #3
10003ffa:	005b      	lsls	r3, r3, #1
10003ffc:	54e0      	strb	r0, [r4, r3]
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
10003ffe:	2300      	movs	r3, #0
10004000:	5263      	strh	r3, [r4, r1]
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
10004002:	3344      	adds	r3, #68	; 0x44
10004004:	3994      	subs	r1, #148	; 0x94
10004006:	5463      	strb	r3, [r4, r1]
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
10004008:	314c      	adds	r1, #76	; 0x4c
1000400a:	5463      	strb	r3, [r4, r1]
            return_status = ifx_i2c_tl_transceive(p_ctx,
1000400c:	2398      	movs	r3, #152	; 0x98
1000400e:	009b      	lsls	r3, r3, #2
10004010:	18e3      	adds	r3, r4, r3
10004012:	9300      	str	r3, [sp, #0]
10004014:	1c0b      	adds	r3, r1, #0
10004016:	3b54      	subs	r3, #84	; 0x54
10004018:	58e3      	ldr	r3, [r4, r3]
1000401a:	1c20      	adds	r0, r4, #0
1000401c:	1861      	adds	r1, r4, r1
1000401e:	f000 fa61 	bl	100044e4 <ifx_i2c_tl_transceive>
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
10004022:	2398      	movs	r3, #152	; 0x98
10004024:	009b      	lsls	r3, r3, #2
10004026:	5ae2      	ldrh	r2, [r4, r3]
10004028:	3b94      	subs	r3, #148	; 0x94
1000402a:	58e3      	ldr	r3, [r4, r3]
1000402c:	801a      	strh	r2, [r3, #0]
1000402e:	e005      	b.n	1000403c <ifx_i2c_prl_event_handler+0xa64>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10004030:	2384      	movs	r3, #132	; 0x84
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10004032:	2200      	movs	r2, #0
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
10004034:	005b      	lsls	r3, r3, #1
10004036:	5263      	strh	r3, [r4, r1]
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
10004038:	33aa      	adds	r3, #170	; 0xaa
1000403a:	54e2      	strb	r2, [r4, r3]
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
1000403c:	23e9      	movs	r3, #233	; 0xe9
1000403e:	22ff      	movs	r2, #255	; 0xff
10004040:	005b      	lsls	r3, r3, #1
10004042:	54e2      	strb	r2, [r4, r3]
10004044:	e00a      	b.n	1000405c <ifx_i2c_prl_event_handler+0xa84>
                }
            }
            break;
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
10004046:	2201      	movs	r2, #1
10004048:	54e2      	strb	r2, [r4, r3]
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
1000404a:	23a7      	movs	r3, #167	; 0xa7
1000404c:	2181      	movs	r1, #129	; 0x81
1000404e:	1c20      	adds	r0, r4, #0
10004050:	009b      	lsls	r3, r3, #2
10004052:	58e5      	ldr	r5, [r4, r3]
10004054:	0049      	lsls	r1, r1, #1
10004056:	2200      	movs	r2, #0
10004058:	1c13      	adds	r3, r2, #0
1000405a:	47a8      	blx	r5
                exit_machine = FALSE;
            }
            break;
        }
    } while (TRUE == exit_machine);
}
1000405c:	b02f      	add	sp, #188	; 0xbc
1000405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004060:	00000263 	.word	0x00000263
10004064:	00000266 	.word	0x00000266
10004068:	00000262 	.word	0x00000262

1000406c <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
1000406c:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
1000406e:	1c03      	adds	r3, r0, #0
10004070:	2200      	movs	r2, #0
10004072:	3334      	adds	r3, #52	; 0x34
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
10004074:	1c0d      	adds	r5, r1, #0
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
10004076:	701a      	strb	r2, [r3, #0]

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
10004078:	4914      	ldr	r1, [pc, #80]	; (100040cc <ifx_i2c_prl_init+0x60>)
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
1000407a:	1c04      	adds	r4, r0, #0
    p_ctx->tl.state = PRL_STATE_UNINIT;

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
1000407c:	f000 fa16 	bl	100044ac <ifx_i2c_tl_init>
10004080:	2800      	cmp	r0, #0
10004082:	d120      	bne.n	100040c6 <ifx_i2c_prl_init+0x5a>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
10004084:	23a7      	movs	r3, #167	; 0xa7
10004086:	009b      	lsls	r3, r3, #2
10004088:	50e5      	str	r5, [r4, r3]
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
1000408a:	1c23      	adds	r3, r4, #0
1000408c:	3332      	adds	r3, #50	; 0x32
1000408e:	781a      	ldrb	r2, [r3, #0]
10004090:	4b0f      	ldr	r3, [pc, #60]	; (100040d0 <ifx_i2c_prl_init+0x64>)
10004092:	2a11      	cmp	r2, #17
10004094:	d101      	bne.n	1000409a <ifx_i2c_prl_init+0x2e>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
10004096:	54e0      	strb	r0, [r4, r3]
10004098:	e001      	b.n	1000409e <ifx_i2c_prl_init+0x32>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
1000409a:	2201      	movs	r2, #1
1000409c:	54e2      	strb	r2, [r4, r3]
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
1000409e:	22d8      	movs	r2, #216	; 0xd8
100040a0:	2301      	movs	r3, #1
100040a2:	0052      	lsls	r2, r2, #1
100040a4:	54a3      	strb	r3, [r4, r2]

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
100040a6:	1c22      	adds	r2, r4, #0
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
100040a8:	2000      	movs	r0, #0
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
        }
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
100040aa:	3231      	adds	r2, #49	; 0x31
100040ac:	7013      	strb	r3, [r2, #0]
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
100040ae:	33b2      	adds	r3, #178	; 0xb2
100040b0:	33ff      	adds	r3, #255	; 0xff
100040b2:	54e0      	strb	r0, [r4, r3]
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
100040b4:	22b2      	movs	r2, #178	; 0xb2
        }
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
100040b6:	33b2      	adds	r3, #178	; 0xb2
100040b8:	52e0      	strh	r0, [r4, r3]
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
100040ba:	2311      	movs	r3, #17
100040bc:	32ff      	adds	r2, #255	; 0xff
100040be:	54a3      	strb	r3, [r4, r2]
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
100040c0:	3221      	adds	r2, #33	; 0x21
100040c2:	54a3      	strb	r3, [r4, r2]
100040c4:	e001      	b.n	100040ca <ifx_i2c_prl_init+0x5e>
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
100040c6:	2081      	movs	r0, #129	; 0x81
100040c8:	0040      	lsls	r0, r0, #1
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    
    return (return_status);
}
100040ca:	bd38      	pop	{r3, r4, r5, pc}
100040cc:	100035d9 	.word	0x100035d9
100040d0:	00000266 	.word	0x00000266

100040d4 <ifx_i2c_prl_close>:
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
100040d4:	22d8      	movs	r2, #216	; 0xd8
    
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
100040d6:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
100040d8:	0052      	lsls	r2, r2, #1
100040da:	5c83      	ldrb	r3, [r0, r2]
100040dc:	2b01      	cmp	r3, #1
100040de:	d002      	beq.n	100040e6 <ifx_i2c_prl_close+0x12>
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
100040e0:	2081      	movs	r0, #129	; 0x81
100040e2:	0040      	lsls	r0, r0, #1
100040e4:	e01f      	b.n	10004126 <ifx_i2c_prl_close+0x52>
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
100040e6:	23a7      	movs	r3, #167	; 0xa7
100040e8:	009b      	lsls	r3, r3, #2
100040ea:	50c1      	str	r1, [r0, r3]
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
100040ec:	1c03      	adds	r3, r0, #0
100040ee:	3332      	adds	r3, #50	; 0x32
100040f0:	781c      	ldrb	r4, [r3, #0]
100040f2:	1c0d      	adds	r5, r1, #0
100040f4:	2c33      	cmp	r4, #51	; 0x33
100040f6:	d104      	bne.n	10004102 <ifx_i2c_prl_close+0x2e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
100040f8:	2100      	movs	r1, #0
100040fa:	1c0a      	adds	r2, r1, #0
100040fc:	1c0b      	adds	r3, r1, #0
100040fe:	47a8      	blx	r5
10004100:	e010      	b.n	10004124 <ifx_i2c_prl_close+0x50>
            return_status = IFX_I2C_STACK_SUCCESS;
            break;
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
10004102:	23d9      	movs	r3, #217	; 0xd9
10004104:	005b      	lsls	r3, r3, #1
10004106:	5cc3      	ldrb	r3, [r0, r3]
10004108:	2b01      	cmp	r3, #1
1000410a:	d1e9      	bne.n	100040e0 <ifx_i2c_prl_close+0xc>
1000410c:	2c22      	cmp	r4, #34	; 0x22
1000410e:	d1e7      	bne.n	100040e0 <ifx_i2c_prl_close+0xc>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
10004110:	2108      	movs	r1, #8
10004112:	5481      	strb	r1, [r0, r2]
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
10004114:	22b4      	movs	r2, #180	; 0xb4
10004116:	32ff      	adds	r2, #255	; 0xff
10004118:	5483      	strb	r3, [r0, r2]
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
1000411a:	3269      	adds	r2, #105	; 0x69
1000411c:	1882      	adds	r2, r0, r2
1000411e:	2100      	movs	r1, #0
10004120:	f7ff fa5a 	bl	100035d8 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
10004124:	2000      	movs	r0, #0
            break;
        }
    } while (FALSE);
    return (return_status);
}
10004126:	bd38      	pop	{r3, r4, r5, pc}

10004128 <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
10004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000412a:	1c0e      	adds	r6, r1, #0
1000412c:	1c15      	adds	r5, r2, #0
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
1000412e:	2900      	cmp	r1, #0
10004130:	d041      	beq.n	100041b6 <ifx_i2c_prl_transceive+0x8e>
10004132:	2a00      	cmp	r2, #0
10004134:	d03f      	beq.n	100041b6 <ifx_i2c_prl_transceive+0x8e>
10004136:	22d8      	movs	r2, #216	; 0xd8
10004138:	0052      	lsls	r2, r2, #1
1000413a:	5c81      	ldrb	r1, [r0, r2]
1000413c:	1c14      	adds	r4, r2, #0
1000413e:	2901      	cmp	r1, #1
10004140:	d139      	bne.n	100041b6 <ifx_i2c_prl_transceive+0x8e>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
10004142:	1c07      	adds	r7, r0, #0
10004144:	3732      	adds	r7, #50	; 0x32
10004146:	783f      	ldrb	r7, [r7, #0]
10004148:	2f11      	cmp	r7, #17
1000414a:	d10a      	bne.n	10004162 <ifx_i2c_prl_transceive+0x3a>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
1000414c:	4f1b      	ldr	r7, [pc, #108]	; (100041bc <ifx_i2c_prl_transceive+0x94>)
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
1000414e:	5dc7      	ldrb	r7, [r0, r7]
10004150:	2f00      	cmp	r7, #0
10004152:	d106      	bne.n	10004162 <ifx_i2c_prl_transceive+0x3a>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
10004154:	3ca9      	subs	r4, #169	; 0xa9
10004156:	3cff      	subs	r4, #255	; 0xff
10004158:	5484      	strb	r4, [r0, r2]
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
1000415a:	22b4      	movs	r2, #180	; 0xb4
1000415c:	32ff      	adds	r2, #255	; 0xff
1000415e:	5481      	strb	r1, [r0, r2]
10004160:	e001      	b.n	10004166 <ifx_i2c_prl_transceive+0x3e>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
10004162:	2202      	movs	r2, #2
10004164:	5502      	strb	r2, [r0, r4]
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
10004166:	22e0      	movs	r2, #224	; 0xe0
10004168:	0052      	lsls	r2, r2, #1
1000416a:	5086      	str	r6, [r0, r2]
        p_ctx->prl.actual_payload_length = tx_data_len;
1000416c:	3204      	adds	r2, #4
1000416e:	5285      	strh	r5, [r0, r2]

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
10004170:	1c02      	adds	r2, r0, #0
10004172:	3230      	adds	r2, #48	; 0x30
10004174:	7811      	ldrb	r1, [r2, #0]
10004176:	2203      	movs	r2, #3
10004178:	400a      	ands	r2, r1
1000417a:	21e4      	movs	r1, #228	; 0xe4
1000417c:	3a02      	subs	r2, #2
1000417e:	0049      	lsls	r1, r1, #1
10004180:	2a01      	cmp	r2, #1
10004182:	d900      	bls.n	10004186 <ifx_i2c_prl_transceive+0x5e>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
10004184:	3304      	adds	r3, #4
10004186:	5043      	str	r3, [r0, r1]
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
10004188:	23e6      	movs	r3, #230	; 0xe6
        p_ctx->prl.data_retransmit_counter = 0;
1000418a:	2400      	movs	r4, #0
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
1000418c:	9a06      	ldr	r2, [sp, #24]
1000418e:	005b      	lsls	r3, r3, #1
10004190:	50c2      	str	r2, [r0, r3]
        p_ctx->prl.data_retransmit_counter = 0;
        p_ctx->prl.trans_repeat_status = FALSE;
        p_ctx->prl.decryption_failure_counter = 0;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
10004192:	2211      	movs	r2, #17
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
        p_ctx->prl.data_retransmit_counter = 0;
10004194:	4b0a      	ldr	r3, [pc, #40]	; (100041c0 <ifx_i2c_prl_transceive+0x98>)
        p_ctx->prl.trans_repeat_status = FALSE;
        p_ctx->prl.decryption_failure_counter = 0;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;

        ifx_i2c_prl_event_handler(p_ctx,
10004196:	1c21      	adds	r1, r4, #0
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
        p_ctx->prl.data_retransmit_counter = 0;
10004198:	54c4      	strb	r4, [r0, r3]
        p_ctx->prl.trans_repeat_status = FALSE;
1000419a:	333d      	adds	r3, #61	; 0x3d
1000419c:	54c4      	strb	r4, [r0, r3]
        p_ctx->prl.decryption_failure_counter = 0;
1000419e:	4b09      	ldr	r3, [pc, #36]	; (100041c4 <ifx_i2c_prl_transceive+0x9c>)
100041a0:	54c4      	strb	r4, [r0, r3]
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
100041a2:	3302      	adds	r3, #2
100041a4:	52c4      	strh	r4, [r0, r3]
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
100041a6:	3b92      	subs	r3, #146	; 0x92
100041a8:	54c2      	strb	r2, [r0, r3]

        ifx_i2c_prl_event_handler(p_ctx,
100041aa:	1c32      	adds	r2, r6, #0
100041ac:	1c2b      	adds	r3, r5, #0
100041ae:	f7ff fa13 	bl	100035d8 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
100041b2:	1c20      	adds	r0, r4, #0
100041b4:	e001      	b.n	100041ba <ifx_i2c_prl_transceive+0x92>
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
100041b6:	2081      	movs	r0, #129	; 0x81
100041b8:	0040      	lsls	r0, r0, #1
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;

    } while (FALSE);
    return (return_status);
}
100041ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100041bc:	00000266 	.word	0x00000266
100041c0:	00000263 	.word	0x00000263
100041c4:	00000262 	.word	0x00000262

100041c8 <ifx_i2c_tl_send_next_fragment>:
    }

    return (pctr);
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
100041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
100041ca:	1c87      	adds	r7, r0, #2
100041cc:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
100041ce:	8ffe      	ldrh	r6, [r7, #62]	; 0x3e
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr = 0;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
100041d0:	1d03      	adds	r3, r0, #4

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
100041d2:	1b92      	subs	r2, r2, r6
    }

    return (pctr);
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
100041d4:	1c05      	adds	r5, r0, #0
    uint8_t pctr = 0;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
100041d6:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
100041d8:	b291      	uxth	r1, r2
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
100041da:	2e00      	cmp	r6, #0
100041dc:	d103      	bne.n	100041e6 <ifx_i2c_tl_send_next_fragment+0x1e>
    {
        pctr = TL_CHAINING_NO;
100041de:	428c      	cmp	r4, r1
100041e0:	419b      	sbcs	r3, r3
100041e2:	425b      	negs	r3, r3
100041e4:	e003      	b.n	100041ee <ifx_i2c_tl_send_next_fragment+0x26>
        pctr = TL_CHAINING_INTERMEDIATE;
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
100041e6:	2304      	movs	r3, #4
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
    {
        pctr = TL_CHAINING_FIRST;
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
100041e8:	42a1      	cmp	r1, r4
100041ea:	d900      	bls.n	100041ee <ifx_i2c_tl_send_next_fragment+0x26>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
100041ec:	3b02      	subs	r3, #2
{
    uint8_t pctr = 0;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
100041ee:	42a2      	cmp	r2, r4
100041f0:	da00      	bge.n	100041f4 <ifx_i2c_tl_send_next_fragment+0x2c>

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
100041f2:	1c0c      	adds	r4, r1, #0
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
100041f4:	2208      	movs	r2, #8
100041f6:	4313      	orrs	r3, r2
100041f8:	4a08      	ldr	r2, [pc, #32]	; (1000421c <ifx_i2c_tl_send_next_fragment+0x54>)
100041fa:	54ab      	strb	r3, [r5, r2]
    //copy the data
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
100041fc:	23aa      	movs	r3, #170	; 0xaa
100041fe:	009b      	lsls	r3, r3, #2
10004200:	18e8      	adds	r0, r5, r3
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
10004202:	6bab      	ldr	r3, [r5, #56]	; 0x38
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
10004204:	1c22      	adds	r2, r4, #0
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
10004206:	1999      	adds	r1, r3, r6
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
10004208:	19a6      	adds	r6, r4, r6
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
1000420a:	3401      	adds	r4, #1
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
1000420c:	f008 fbcd 	bl	1000c9aa <memcpy>
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
10004210:	87fe      	strh	r6, [r7, #62]	; 0x3e
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
10004212:	1c28      	adds	r0, r5, #0
10004214:	b2a1      	uxth	r1, r4
10004216:	f7fe fe5b 	bl	10002ed0 <ifx_i2c_dl_send_frame>
}
1000421a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000421c:	000002a7 	.word	0x000002a7

10004220 <ifx_i2c_dl_event_handler>:
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
10004220:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t pctr = 0;
    uint8_t chaining = 0;
10004222:	2700      	movs	r7, #0
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
10004224:	1c04      	adds	r4, r0, #0
10004226:	1c1d      	adds	r5, r3, #0
10004228:	b085      	sub	sp, #20
1000422a:	9102      	str	r1, [sp, #8]
1000422c:	9200      	str	r2, [sp, #0]
    uint8_t pctr = 0;
1000422e:	9701      	str	r7, [sp, #4]
    uint8_t chaining = 0;
    uint8_t exit_machine = TRUE;
    do
    {
        if (NULL != p_data)
10004230:	9b00      	ldr	r3, [sp, #0]
10004232:	2b00      	cmp	r3, #0
10004234:	d004      	beq.n	10004240 <ifx_i2c_dl_event_handler+0x20>
        {
            pctr = p_data[0];
10004236:	781b      	ldrb	r3, [r3, #0]
10004238:	9301      	str	r3, [sp, #4]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
1000423a:	2307      	movs	r3, #7
1000423c:	9f01      	ldr	r7, [sp, #4]
1000423e:	401f      	ands	r7, r3
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
10004240:	2301      	movs	r3, #1
10004242:	9a02      	ldr	r2, [sp, #8]
10004244:	4013      	ands	r3, r2
10004246:	d005      	beq.n	10004254 <ifx_i2c_dl_event_handler+0x34>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
10004248:	1c22      	adds	r2, r4, #0
1000424a:	2106      	movs	r1, #6
1000424c:	3234      	adds	r2, #52	; 0x34
1000424e:	7011      	strb	r1, [r2, #0]
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
10004250:	31fc      	adds	r1, #252	; 0xfc
10004252:	8411      	strh	r1, [r2, #32]
        }
        if (0 != data_len)
10004254:	2d00      	cmp	r5, #0
10004256:	d00e      	beq.n	10004276 <ifx_i2c_dl_event_handler+0x56>
10004258:	1c22      	adds	r2, r4, #0
1000425a:	3258      	adds	r2, #88	; 0x58

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
1000425c:	7812      	ldrb	r2, [r2, #0]
1000425e:	2a00      	cmp	r2, #0
10004260:	d109      	bne.n	10004276 <ifx_i2c_dl_event_handler+0x56>
10004262:	9901      	ldr	r1, [sp, #4]
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
10004264:	3207      	adds	r2, #7

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
10004266:	4011      	ands	r1, r2
10004268:	2901      	cmp	r1, #1
1000426a:	d804      	bhi.n	10004276 <ifx_i2c_dl_event_handler+0x56>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
1000426c:	9901      	ldr	r1, [sp, #4]
1000426e:	4391      	bics	r1, r2
10004270:	2908      	cmp	r1, #8
10004272:	d000      	beq.n	10004276 <ifx_i2c_dl_event_handler+0x56>
10004274:	e0d4      	b.n	10004420 <ifx_i2c_dl_event_handler+0x200>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
            }
        }
        p_ctx->tl.initialization_state = FALSE;
10004276:	1c22      	adds	r2, r4, #0
10004278:	2100      	movs	r1, #0
        switch (p_ctx->tl.state)
1000427a:	1c26      	adds	r6, r4, #0
            {
                p_ctx->tl.state = TL_STATE_ERROR;
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
            }
        }
        p_ctx->tl.initialization_state = FALSE;
1000427c:	3258      	adds	r2, #88	; 0x58
1000427e:	7011      	strb	r1, [r2, #0]
        switch (p_ctx->tl.state)
10004280:	3634      	adds	r6, #52	; 0x34
10004282:	7830      	ldrb	r0, [r6, #0]
10004284:	3801      	subs	r0, #1
10004286:	2807      	cmp	r0, #7
10004288:	d900      	bls.n	1000428c <ifx_i2c_dl_event_handler+0x6c>
1000428a:	e0be      	b.n	1000440a <ifx_i2c_dl_event_handler+0x1ea>
1000428c:	f008 f8cc 	bl	1000c428 <__gnu_thumb1_case_uqi>
10004290:	34bd0904 	.word	0x34bd0904
10004294:	8ba3b95e 	.word	0x8ba3b95e
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
10004298:	2100      	movs	r1, #0
1000429a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
1000429c:	1c20      	adds	r0, r4, #0
1000429e:	1c0a      	adds	r2, r1, #0
100042a0:	e0bb      	b.n	1000441a <ifx_i2c_dl_event_handler+0x1fa>
            }
            break;
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
100042a2:	9b02      	ldr	r3, [sp, #8]
100042a4:	079b      	lsls	r3, r3, #30
100042a6:	d509      	bpl.n	100042bc <ifx_i2c_dl_event_handler+0x9c>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
100042a8:	1ca3      	adds	r3, r4, #2
100042aa:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
100042ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
100042ae:	429a      	cmp	r2, r3
100042b0:	d20a      	bcs.n	100042c8 <ifx_i2c_dl_event_handler+0xa8>
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
100042b2:	2308      	movs	r3, #8
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
100042b4:	2f07      	cmp	r7, #7
100042b6:	d05d      	beq.n	10004374 <ifx_i2c_dl_event_handler+0x154>
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
                            break;
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
100042b8:	2d00      	cmp	r5, #0
100042ba:	d001      	beq.n	100042c0 <ifx_i2c_dl_event_handler+0xa0>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
100042bc:	2206      	movs	r2, #6
100042be:	e0b7      	b.n	10004430 <ifx_i2c_dl_event_handler+0x210>
                            break;
                        }
                        exit_machine = FALSE;
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
100042c0:	1c20      	adds	r0, r4, #0
100042c2:	f7ff ff81 	bl	100041c8 <ifx_i2c_tl_send_next_fragment>
100042c6:	e0eb      	b.n	100044a0 <ifx_i2c_dl_event_handler+0x280>
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
                        p_ctx->tl.total_recv_length = 0;
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
100042c8:	1c21      	adds	r1, r4, #0
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
                        p_ctx->tl.total_recv_length = 0;
100042ca:	2300      	movs	r3, #0
                    }
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
100042cc:	2204      	movs	r2, #4
                        p_ctx->tl.total_recv_length = 0;
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
100042ce:	3152      	adds	r1, #82	; 0x52
                    }
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
100042d0:	7032      	strb	r2, [r6, #0]
                        p_ctx->tl.total_recv_length = 0;
100042d2:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
100042d4:	700b      	strb	r3, [r1, #0]
                        p_ctx->tl.transmission_completed = 1;
100042d6:	1c23      	adds	r3, r4, #0
100042d8:	2101      	movs	r1, #1
100042da:	3353      	adds	r3, #83	; 0x53
100042dc:	7019      	strb	r1, [r3, #0]
                        // if data is received after sending last frame
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
100042de:	9b02      	ldr	r3, [sp, #8]
100042e0:	4213      	tst	r3, r2
100042e2:	d1a5      	bne.n	10004230 <ifx_i2c_dl_event_handler+0x10>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data already received after Tx\n");
                            // Received CTRL frame, trigger reception in Data Link layer
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
100042e4:	1c20      	adds	r0, r4, #0
100042e6:	f7fe fe0f 	bl	10002f08 <ifx_i2c_dl_receive_frame>
100042ea:	2800      	cmp	r0, #0
100042ec:	d100      	bne.n	100042f0 <ifx_i2c_dl_event_handler+0xd0>
100042ee:	e0d7      	b.n	100044a0 <ifx_i2c_dl_event_handler+0x280>
                            {
                                LOG_TL("[IFX-TL]: Tx:RX Received CTRL frame fail -> Inform UL\n");
                                p_ctx->tl.state = TL_STATE_ERROR;
100042f0:	2306      	movs	r3, #6
100042f2:	3434      	adds	r4, #52	; 0x34
100042f4:	7023      	strb	r3, [r4, #0]
100042f6:	e0d3      	b.n	100044a0 <ifx_i2c_dl_event_handler+0x280>
            }
            break;
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
100042f8:	2204      	movs	r2, #4
100042fa:	9b02      	ldr	r3, [sp, #8]
100042fc:	4213      	tst	r3, r2
100042fe:	d0dd      	beq.n	100042bc <ifx_i2c_dl_event_handler+0x9c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
10004300:	2d00      	cmp	r5, #0
10004302:	d0db      	beq.n	100042bc <ifx_i2c_dl_event_handler+0x9c>
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
                        break;
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
10004304:	1c23      	adds	r3, r4, #0
10004306:	3354      	adds	r3, #84	; 0x54
10004308:	881a      	ldrh	r2, [r3, #0]
1000430a:	2382      	movs	r3, #130	; 0x82
1000430c:	005b      	lsls	r3, r3, #1
1000430e:	429a      	cmp	r2, r3
10004310:	d109      	bne.n	10004326 <ifx_i2c_dl_event_handler+0x106>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
10004312:	2f04      	cmp	r7, #4
10004314:	d0d2      	beq.n	100042bc <ifx_i2c_dl_event_handler+0x9c>
10004316:	1c20      	adds	r0, r4, #0
10004318:	f7fe fdf6 	bl	10002f08 <ifx_i2c_dl_receive_frame>
1000431c:	2800      	cmp	r0, #0
1000431e:	d1cd      	bne.n	100042bc <ifx_i2c_dl_event_handler+0x9c>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
                            break;
                        }
                        p_ctx->tl.state = TL_STATE_RX;
10004320:	2304      	movs	r3, #4
10004322:	7033      	strb	r3, [r6, #0]
                        exit_machine = FALSE;
                        break;
10004324:	e0bc      	b.n	100044a0 <ifx_i2c_dl_event_handler+0x280>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
10004326:	1c23      	adds	r3, r4, #0
10004328:	3352      	adds	r3, #82	; 0x52
1000432a:	781a      	ldrb	r2, [r3, #0]

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
1000432c:	2f07      	cmp	r7, #7
1000432e:	d003      	beq.n	10004338 <ifx_i2c_dl_event_handler+0x118>
10004330:	2f02      	cmp	r7, #2
10004332:	d901      	bls.n	10004338 <ifx_i2c_dl_event_handler+0x118>
10004334:	2f04      	cmp	r7, #4
10004336:	d17a      	bne.n	1000442e <ifx_i2c_dl_event_handler+0x20e>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
10004338:	495a      	ldr	r1, [pc, #360]	; (100044a4 <ifx_i2c_dl_event_handler+0x284>)
1000433a:	007b      	lsls	r3, r7, #1
1000433c:	5c58      	ldrb	r0, [r3, r1]
1000433e:	4290      	cmp	r0, r2
10004340:	d07a      	beq.n	10004438 <ifx_i2c_dl_event_handler+0x218>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
10004342:	18cb      	adds	r3, r1, r3
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
10004344:	785b      	ldrb	r3, [r3, #1]
10004346:	4293      	cmp	r3, r2
10004348:	d171      	bne.n	1000442e <ifx_i2c_dl_event_handler+0x20e>
1000434a:	e075      	b.n	10004438 <ifx_i2c_dl_event_handler+0x218>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
1000434c:	1d23      	adds	r3, r4, #4
1000434e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
10004350:	1c53      	adds	r3, r2, #1
10004352:	429d      	cmp	r5, r3
10004354:	d001      	beq.n	1000435a <ifx_i2c_dl_event_handler+0x13a>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
10004356:	2307      	movs	r3, #7
10004358:	e00c      	b.n	10004374 <ifx_i2c_dl_event_handler+0x154>
                    break;
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
1000435a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
1000435c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1000435e:	1943      	adds	r3, r0, r5
10004360:	8809      	ldrh	r1, [r1, #0]
10004362:	3b01      	subs	r3, #1
10004364:	428b      	cmp	r3, r1
10004366:	dd07      	ble.n	10004378 <ifx_i2c_dl_event_handler+0x158>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
10004368:	2282      	movs	r2, #130	; 0x82
1000436a:	1c23      	adds	r3, r4, #0
1000436c:	0052      	lsls	r2, r2, #1
1000436e:	3354      	adds	r3, #84	; 0x54
10004370:	801a      	strh	r2, [r3, #0]
                    p_ctx->tl.state = TL_STATE_RX;
10004372:	2304      	movs	r3, #4
10004374:	7033      	strb	r3, [r6, #0]
                    break;
10004376:	e75b      	b.n	10004230 <ifx_i2c_dl_event_handler+0x10>
                }
                if (NULL == p_data)
10004378:	9b00      	ldr	r3, [sp, #0]
1000437a:	2b00      	cmp	r3, #0
1000437c:	d09e      	beq.n	100042bc <ifx_i2c_dl_event_handler+0x9c>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
1000437e:	6c63      	ldr	r3, [r4, #68]	; 0x44
10004380:	9900      	ldr	r1, [sp, #0]
10004382:	1818      	adds	r0, r3, r0
10004384:	3101      	adds	r1, #1
10004386:	f008 fb10 	bl	1000c9aa <memcpy>
1000438a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
                p_ctx->tl.total_recv_length += (data_len - 1);

                p_ctx->tl.previous_chaining = pctr & 0x07;
1000438c:	9a01      	ldr	r2, [sp, #4]
1000438e:	3b01      	subs	r3, #1
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                p_ctx->tl.total_recv_length += (data_len - 1);
10004390:	18ed      	adds	r5, r5, r3

                p_ctx->tl.previous_chaining = pctr & 0x07;
10004392:	2307      	movs	r3, #7
10004394:	401a      	ands	r2, r3
10004396:	1c13      	adds	r3, r2, #0
10004398:	1c22      	adds	r2, r4, #0
1000439a:	3252      	adds	r2, #82	; 0x52
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                p_ctx->tl.total_recv_length += (data_len - 1);
1000439c:	87a5      	strh	r5, [r4, #60]	; 0x3c

                p_ctx->tl.previous_chaining = pctr & 0x07;
1000439e:	7013      	strb	r3, [r2, #0]
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
100043a0:	2304      	movs	r3, #4
100043a2:	7033      	strb	r3, [r6, #0]
100043a4:	e79e      	b.n	100042e4 <ifx_i2c_dl_event_handler+0xc4>
            break;
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
100043a6:	2d01      	cmp	r5, #1
100043a8:	d904      	bls.n	100043b4 <ifx_i2c_dl_event_handler+0x194>
100043aa:	1c23      	adds	r3, r4, #0
100043ac:	3353      	adds	r3, #83	; 0x53
100043ae:	781b      	ldrb	r3, [r3, #0]
100043b0:	2b01      	cmp	r3, #1
100043b2:	d0d0      	beq.n	10004356 <ifx_i2c_dl_event_handler+0x136>
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
                    break;
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
100043b4:	1c22      	adds	r2, r4, #0
100043b6:	3250      	adds	r2, #80	; 0x50
100043b8:	7813      	ldrb	r3, [r2, #0]
100043ba:	1c59      	adds	r1, r3, #1
100043bc:	7011      	strb	r1, [r2, #0]
100043be:	2b00      	cmp	r3, #0
100043c0:	d000      	beq.n	100043c4 <ifx_i2c_dl_event_handler+0x1a4>
100043c2:	e77b      	b.n	100042bc <ifx_i2c_dl_event_handler+0x9c>
    if (TL_STATE_IDLE != p_ctx->tl.state)
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
100043c4:	1ca2      	adds	r2, r4, #2
100043c6:	87d3      	strh	r3, [r2, #62]	; 0x3e
    p_ctx->tl.total_recv_length = 0;
100043c8:	87a3      	strh	r3, [r4, #60]	; 0x3c
    p_ctx->tl.state = TL_STATE_TX;
100043ca:	3302      	adds	r3, #2
100043cc:	7033      	strb	r3, [r6, #0]
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
100043ce:	1c20      	adds	r0, r4, #0
100043d0:	f7ff fefa 	bl	100041c8 <ifx_i2c_tl_send_next_fragment>
100043d4:	e011      	b.n	100043fa <ifx_i2c_dl_event_handler+0x1da>
            }
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
100043d6:	2302      	movs	r3, #2
                if (0 == (p_ctx->tl.master_chaining_error_count++))
100043d8:	1c22      	adds	r2, r4, #0
            }
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
100043da:	7033      	strb	r3, [r6, #0]
                if (0 == (p_ctx->tl.master_chaining_error_count++))
100043dc:	3251      	adds	r2, #81	; 0x51
100043de:	7813      	ldrb	r3, [r2, #0]
100043e0:	1c59      	adds	r1, r3, #1
100043e2:	7011      	strb	r1, [r2, #0]
100043e4:	2b00      	cmp	r3, #0
100043e6:	d000      	beq.n	100043ea <ifx_i2c_dl_event_handler+0x1ca>
100043e8:	e768      	b.n	100042bc <ifx_i2c_dl_event_handler+0x9c>
}

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
    uint16_t tl_fragment_size = 1;
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
100043ea:	2107      	movs	r1, #7
100043ec:	4a2e      	ldr	r2, [pc, #184]	; (100044a8 <ifx_i2c_dl_event_handler+0x288>)
    p_ctx->tl.total_recv_length = 0;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
100043ee:	1c20      	adds	r0, r4, #0
}

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
    uint16_t tl_fragment_size = 1;
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
100043f0:	54a1      	strb	r1, [r4, r2]
    p_ctx->tl.total_recv_length = 0;
100043f2:	87a3      	strh	r3, [r4, #60]	; 0x3c
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
100043f4:	3906      	subs	r1, #6
100043f6:	f7fe fd6b 	bl	10002ed0 <ifx_i2c_dl_send_frame>
                p_ctx->tl.state = TL_STATE_TX;
                if (0 == (p_ctx->tl.master_chaining_error_count++))
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
100043fa:	2800      	cmp	r0, #0
100043fc:	d000      	beq.n	10004400 <ifx_i2c_dl_event_handler+0x1e0>
100043fe:	e75d      	b.n	100042bc <ifx_i2c_dl_event_handler+0x9c>
10004400:	e04e      	b.n	100044a0 <ifx_i2c_dl_event_handler+0x280>
            break;
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
10004402:	2b00      	cmp	r3, #0
10004404:	d101      	bne.n	1000440a <ifx_i2c_dl_event_handler+0x1ea>
10004406:	2d00      	cmp	r5, #0
10004408:	d001      	beq.n	1000440e <ifx_i2c_dl_event_handler+0x1ee>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
1000440a:	2301      	movs	r3, #1
1000440c:	7033      	strb	r3, [r6, #0]
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
1000440e:	1c23      	adds	r3, r4, #0
10004410:	1c20      	adds	r0, r4, #0
10004412:	2200      	movs	r2, #0
10004414:	3354      	adds	r3, #84	; 0x54
10004416:	8819      	ldrh	r1, [r3, #0]
10004418:	6de5      	ldr	r5, [r4, #92]	; 0x5c
1000441a:	1c13      	adds	r3, r2, #0
1000441c:	47a8      	blx	r5
            }
            break;
1000441e:	e03f      	b.n	100044a0 <ifx_i2c_dl_event_handler+0x280>
        }
        if (0 != data_len)
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
            {
                p_ctx->tl.state = TL_STATE_ERROR;
10004420:	1c22      	adds	r2, r4, #0
10004422:	2106      	movs	r1, #6
10004424:	3234      	adds	r2, #52	; 0x34
10004426:	7011      	strb	r1, [r2, #0]
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
10004428:	31fc      	adds	r1, #252	; 0xfc
1000442a:	8411      	strh	r1, [r2, #32]
1000442c:	e723      	b.n	10004276 <ifx_i2c_dl_event_handler+0x56>

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
1000442e:	2208      	movs	r2, #8
10004430:	1c23      	adds	r3, r4, #0
10004432:	3334      	adds	r3, #52	; 0x34
10004434:	701a      	strb	r2, [r3, #0]
                        break;
10004436:	e6fb      	b.n	10004230 <ifx_i2c_dl_event_handler+0x10>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
10004438:	1c23      	adds	r3, r4, #0
1000443a:	3352      	adds	r3, #82	; 0x52
1000443c:	701f      	strb	r7, [r3, #0]
                    if (NULL == p_data)
1000443e:	9b00      	ldr	r3, [sp, #0]
10004440:	2b00      	cmp	r3, #0
10004442:	d100      	bne.n	10004446 <ifx_i2c_dl_event_handler+0x226>
10004444:	e73a      	b.n	100042bc <ifx_i2c_dl_event_handler+0x9c>
                        p_ctx->tl.state = TL_STATE_ERROR;
                        break;
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
10004446:	2304      	movs	r3, #4
10004448:	1c3a      	adds	r2, r7, #0
1000444a:	1c26      	adds	r6, r4, #0
1000444c:	439a      	bics	r2, r3
1000444e:	9203      	str	r2, [sp, #12]
10004450:	3634      	adds	r6, #52	; 0x34
10004452:	2a00      	cmp	r2, #0
10004454:	d122      	bne.n	1000449c <ifx_i2c_dl_event_handler+0x27c>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
10004456:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
10004458:	6ca2      	ldr	r2, [r4, #72]	; 0x48
1000445a:	1943      	adds	r3, r0, r5
1000445c:	8812      	ldrh	r2, [r2, #0]
1000445e:	3b01      	subs	r3, #1
10004460:	4293      	cmp	r3, r2
10004462:	dd06      	ble.n	10004472 <ifx_i2c_dl_event_handler+0x252>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
10004464:	2282      	movs	r2, #130	; 0x82
10004466:	1c23      	adds	r3, r4, #0
10004468:	0052      	lsls	r2, r2, #1
1000446a:	3354      	adds	r3, #84	; 0x54
1000446c:	801a      	strh	r2, [r3, #0]
                            p_ctx->tl.state = TL_STATE_ERROR;
1000446e:	2306      	movs	r3, #6
10004470:	e780      	b.n	10004374 <ifx_i2c_dl_event_handler+0x154>
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
10004472:	6c63      	ldr	r3, [r4, #68]	; 0x44
10004474:	9900      	ldr	r1, [sp, #0]
10004476:	1e6a      	subs	r2, r5, #1
10004478:	1818      	adds	r0, r3, r0
1000447a:	3101      	adds	r1, #1
1000447c:	f008 fa95 	bl	1000c9aa <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
10004480:	2201      	movs	r2, #1
10004482:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
10004484:	1c20      	adds	r0, r4, #0
10004486:	3b01      	subs	r3, #1
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
10004488:	18eb      	adds	r3, r5, r3
1000448a:	b29b      	uxth	r3, r3
1000448c:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
1000448e:	7032      	strb	r2, [r6, #0]
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
10004490:	6ca2      	ldr	r2, [r4, #72]	; 0x48
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
10004492:	6de5      	ldr	r5, [r4, #92]	; 0x5c
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
10004494:	8013      	strh	r3, [r2, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
10004496:	9903      	ldr	r1, [sp, #12]
10004498:	6c62      	ldr	r2, [r4, #68]	; 0x44
1000449a:	e7bf      	b.n	1000441c <ifx_i2c_dl_event_handler+0x1fc>
                                                            p_ctx->tl.p_recv_packet_buffer,
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
                    }
                    else
                    {
                        p_ctx->tl.state = TL_STATE_CHAINING;
1000449c:	2305      	movs	r3, #5
1000449e:	e769      	b.n	10004374 <ifx_i2c_dl_event_handler+0x154>
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
            }
            break;
        }
    } while (TRUE == exit_machine);
}
100044a0:	b005      	add	sp, #20
100044a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100044a4:	1000d5a4 	.word	0x1000d5a4
100044a8:	000002a7 	.word	0x000002a7

100044ac <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
100044ac:	b570      	push	{r4, r5, r6, lr}
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
100044ae:	1c05      	adds	r5, r0, #0
100044b0:	2300      	movs	r3, #0
100044b2:	3534      	adds	r5, #52	; 0x34
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
100044b4:	1c0e      	adds	r6, r1, #0
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
100044b6:	702b      	strb	r3, [r5, #0]

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
100044b8:	4909      	ldr	r1, [pc, #36]	; (100044e0 <ifx_i2c_tl_init+0x34>)
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
100044ba:	1c04      	adds	r4, r0, #0
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
100044bc:	f7fe fce0 	bl	10002e80 <ifx_i2c_dl_init>
100044c0:	2800      	cmp	r0, #0
100044c2:	d10a      	bne.n	100044da <ifx_i2c_tl_init+0x2e>
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
100044c4:	1c22      	adds	r2, r4, #0
100044c6:	2301      	movs	r3, #1
100044c8:	3258      	adds	r2, #88	; 0x58
100044ca:	7013      	strb	r3, [r2, #0]
    p_ctx->tl.upper_layer_event_handler = handler;
100044cc:	65e6      	str	r6, [r4, #92]	; 0x5c
    p_ctx->tl.state = TL_STATE_IDLE;
100044ce:	702b      	strb	r3, [r5, #0]
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
100044d0:	88a3      	ldrh	r3, [r4, #4]
100044d2:	3404      	adds	r4, #4
100044d4:	3b06      	subs	r3, #6
100044d6:	87e3      	strh	r3, [r4, #62]	; 0x3e

    return (IFX_I2C_STACK_SUCCESS);
100044d8:	e001      	b.n	100044de <ifx_i2c_tl_init+0x32>
    p_ctx->tl.state = TL_STATE_UNINIT;

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
100044da:	2081      	movs	r0, #129	; 0x81
100044dc:	0040      	lsls	r0, r0, #1
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);

    return (IFX_I2C_STACK_SUCCESS);
}
100044de:	bd70      	pop	{r4, r5, r6, pc}
100044e0:	10004221 	.word	0x10004221

100044e4 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
100044e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100044e6:	1c04      	adds	r4, r0, #0
100044e8:	1c0f      	adds	r7, r1, #0
100044ea:	1c16      	adds	r6, r2, #0
100044ec:	9301      	str	r3, [sp, #4]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
100044ee:	2900      	cmp	r1, #0
100044f0:	d024      	beq.n	1000453c <ifx_i2c_tl_transceive+0x58>
100044f2:	2a00      	cmp	r2, #0
100044f4:	d022      	beq.n	1000453c <ifx_i2c_tl_transceive+0x58>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
100044f6:	1c03      	adds	r3, r0, #0
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
100044f8:	2581      	movs	r5, #129	; 0x81
        if ((NULL == p_packet) || (0 == packet_len))
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
100044fa:	3334      	adds	r3, #52	; 0x34
100044fc:	781a      	ldrb	r2, [r3, #0]
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
100044fe:	006d      	lsls	r5, r5, #1
        if ((NULL == p_packet) || (0 == packet_len))
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
10004500:	2a01      	cmp	r2, #1
10004502:	d11d      	bne.n	10004540 <ifx_i2c_tl_transceive+0x5c>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
10004504:	3201      	adds	r2, #1
10004506:	701a      	strb	r2, [r3, #0]
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
10004508:	f7fd f8ea 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
1000450c:	2300      	movs	r3, #0
1000450e:	1ca2      	adds	r2, r4, #2
        if (TL_STATE_IDLE != p_ctx->tl.state)
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
10004510:	64e0      	str	r0, [r4, #76]	; 0x4c
        p_ctx->tl.p_actual_packet = p_packet;
10004512:	63a7      	str	r7, [r4, #56]	; 0x38
        p_ctx->tl.actual_packet_length = packet_len;
10004514:	87e6      	strh	r6, [r4, #62]	; 0x3e
        p_ctx->tl.packet_offset = 0;
10004516:	87d3      	strh	r3, [r2, #62]	; 0x3e
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
10004518:	9a01      	ldr	r2, [sp, #4]
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
        p_ctx->tl.total_recv_length = 0;
1000451a:	87a3      	strh	r3, [r4, #60]	; 0x3c
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
1000451c:	6462      	str	r2, [r4, #68]	; 0x44
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
1000451e:	9a08      	ldr	r2, [sp, #32]
        p_ctx->tl.total_recv_length = 0;
        p_ctx->tl.chaining_error_count = 0;
        p_ctx->tl.master_chaining_error_count = 0;
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
10004520:	1c20      	adds	r0, r4, #0
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
10004522:	64a2      	str	r2, [r4, #72]	; 0x48
        p_ctx->tl.total_recv_length = 0;
        p_ctx->tl.chaining_error_count = 0;
10004524:	1c22      	adds	r2, r4, #0
10004526:	3250      	adds	r2, #80	; 0x50
10004528:	7013      	strb	r3, [r2, #0]
        p_ctx->tl.master_chaining_error_count = 0;
1000452a:	7053      	strb	r3, [r2, #1]
        p_ctx->tl.transmission_completed = 0;
1000452c:	70d3      	strb	r3, [r2, #3]
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
1000452e:	1c23      	adds	r3, r4, #0
10004530:	3354      	adds	r3, #84	; 0x54
10004532:	801d      	strh	r5, [r3, #0]
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
10004534:	f7ff fe48 	bl	100041c8 <ifx_i2c_tl_send_next_fragment>
10004538:	1c05      	adds	r5, r0, #0
1000453a:	e001      	b.n	10004540 <ifx_i2c_tl_transceive+0x5c>
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
1000453c:	2581      	movs	r5, #129	; 0x81
1000453e:	006d      	lsls	r5, r5, #1
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
    } while (FALSE);
    return (status);
}
10004540:	1c28      	adds	r0, r5, #0
10004542:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10004544 <ifx_i2c_event_handler>:
    return (status);
}

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
10004544:	b510      	push	{r4, lr}
10004546:	1c04      	adds	r4, r0, #0
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
10004548:	6840      	ldr	r0, [r0, #4]
1000454a:	68a3      	ldr	r3, [r4, #8]
1000454c:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
1000454e:	2300      	movs	r3, #0
10004550:	7363      	strb	r3, [r4, #13]
}
10004552:	bd10      	pop	{r4, pc}

10004554 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
10004554:	b510      	push	{r4, lr}

    do
    {
        p_optiga_comms = &optiga_comms;

        if (FALSE == p_optiga_comms->instance_init_state)
10004556:	4b05      	ldr	r3, [pc, #20]	; (1000456c <optiga_comms_create+0x18>)

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
10004558:	1c02      	adds	r2, r0, #0

    do
    {
        p_optiga_comms = &optiga_comms;

        if (FALSE == p_optiga_comms->instance_init_state)
1000455a:	7b1c      	ldrb	r4, [r3, #12]
1000455c:	1c18      	adds	r0, r3, #0
1000455e:	2c00      	cmp	r4, #0
10004560:	d103      	bne.n	1000456a <optiga_comms_create+0x16>
        {
            p_optiga_comms->upper_layer_handler = callback;
10004562:	609a      	str	r2, [r3, #8]
            p_optiga_comms->p_upper_layer_ctx = context;
10004564:	6059      	str	r1, [r3, #4]
            p_optiga_comms->instance_init_state = TRUE;
10004566:	2301      	movs	r3, #1
10004568:	7303      	strb	r3, [r0, #12]
        }
    } while (FALSE);
    return (p_optiga_comms);
}
1000456a:	bd10      	pop	{r4, pc}
1000456c:	20001a50 	.word	0x20001a50

10004570 <optiga_comms_set_callback_context>:
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
    p_optiga_comms->p_upper_layer_ctx = context;
10004570:	6041      	str	r1, [r0, #4]
    return (0);
}
10004572:	2000      	movs	r0, #0
10004574:	4770      	bx	lr
	...

10004578 <optiga_comms_open>:
 * API IMPLEMENTATION
 *********************************************************************************************************************/


optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
10004578:	b538      	push	{r3, r4, r5, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
1000457a:	2800      	cmp	r0, #0
1000457c:	d102      	bne.n	10004584 <optiga_comms_open+0xc>
 *********************************************************************************************************************/


optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
1000457e:	2081      	movs	r0, #129	; 0x81
10004580:	0040      	lsls	r0, r0, #1
10004582:	e01a      	b.n	100045ba <optiga_comms_open+0x42>

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
10004584:	7b43      	ldrb	r3, [r0, #13]
10004586:	2b01      	cmp	r3, #1
10004588:	d0f9      	beq.n	1000457e <optiga_comms_open+0x6>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
1000458a:	2301      	movs	r3, #1
1000458c:	7343      	strb	r3, [r0, #13]
1000458e:	1c04      	adds	r4, r0, #0
optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        if (PAL_STATUS_SUCCESS == pal_init())
10004590:	f7fc fd86 	bl	100010a0 <pal_init>
10004594:	1e05      	subs	r5, r0, #0
10004596:	d1f2      	bne.n	1000457e <optiga_comms_open+0x6>
        {
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
10004598:	6823      	ldr	r3, [r4, #0]
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
1000459a:	4a08      	ldr	r2, [pc, #32]	; (100045bc <optiga_comms_open+0x44>)
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        if (PAL_STATUS_SUCCESS == pal_init())
        {
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
1000459c:	61dc      	str	r4, [r3, #28]
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
1000459e:	619a      	str	r2, [r3, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
100045a0:	7c22      	ldrb	r2, [r4, #16]
100045a2:	3332      	adds	r3, #50	; 0x32
100045a4:	701a      	strb	r2, [r3, #0]
#endif
            ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
100045a6:	239a      	movs	r3, #154	; 0x9a
100045a8:	6820      	ldr	r0, [r4, #0]
100045aa:	6962      	ldr	r2, [r4, #20]
100045ac:	00db      	lsls	r3, r3, #3
100045ae:	50c2      	str	r2, [r0, r3]

            status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
100045b0:	f7fe f9c5 	bl	1000293e <ifx_i2c_open>
            if (IFX_I2C_STACK_SUCCESS != status)
100045b4:	2800      	cmp	r0, #0
100045b6:	d000      	beq.n	100045ba <optiga_comms_open+0x42>
            {
                p_ctx->state = OPTIGA_COMMS_FREE;
100045b8:	7365      	strb	r5, [r4, #13]
            }
        }
    }
    return (status);
}
100045ba:	bd38      	pop	{r3, r4, r5, pc}
100045bc:	10004545 	.word	0x10004545

100045c0 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
100045c0:	b537      	push	{r0, r1, r2, r4, r5, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
100045c2:	2800      	cmp	r0, #0
100045c4:	d01e      	beq.n	10004604 <optiga_comms_transceive+0x44>
100045c6:	7b44      	ldrb	r4, [r0, #13]
100045c8:	2c01      	cmp	r4, #1
100045ca:	d01b      	beq.n	10004604 <optiga_comms_transceive+0x44>
100045cc:	1c04      	adds	r4, r0, #0
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
100045ce:	2001      	movs	r0, #1
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
100045d0:	4d0e      	ldr	r5, [pc, #56]	; (1000460c <optiga_comms_transceive+0x4c>)
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
100045d2:	7360      	strb	r0, [r4, #13]
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
100045d4:	6820      	ldr	r0, [r4, #0]
100045d6:	61c4      	str	r4, [r0, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
100045d8:	6185      	str	r5, [r0, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
100045da:	7ba5      	ldrb	r5, [r4, #14]
100045dc:	3030      	adds	r0, #48	; 0x30
100045de:	7005      	strb	r5, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
100045e0:	6820      	ldr	r0, [r4, #0]
100045e2:	7be5      	ldrb	r5, [r4, #15]
100045e4:	3031      	adds	r0, #49	; 0x31
100045e6:	7005      	strb	r5, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
100045e8:	6820      	ldr	r0, [r4, #0]
100045ea:	7c25      	ldrb	r5, [r4, #16]
100045ec:	3032      	adds	r0, #50	; 0x32
100045ee:	7005      	strb	r5, [r0, #0]
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
100045f0:	9806      	ldr	r0, [sp, #24]
100045f2:	9000      	str	r0, [sp, #0]
100045f4:	6820      	ldr	r0, [r4, #0]
100045f6:	f7fe f9c1 	bl	1000297c <ifx_i2c_transceive>
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
100045fa:	2800      	cmp	r0, #0
100045fc:	d004      	beq.n	10004608 <optiga_comms_transceive+0x48>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
100045fe:	2300      	movs	r3, #0
10004600:	7363      	strb	r3, [r4, #13]
10004602:	e001      	b.n	10004608 <optiga_comms_transceive+0x48>
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
10004604:	2081      	movs	r0, #129	; 0x81
10004606:	0040      	lsls	r0, r0, #1
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
10004608:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000460a:	46c0      	nop			; (mov r8, r8)
1000460c:	10004545 	.word	0x10004545

10004610 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
10004610:	b510      	push	{r4, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
10004612:	2800      	cmp	r0, #0
10004614:	d014      	beq.n	10004640 <optiga_comms_close+0x30>
10004616:	7b43      	ldrb	r3, [r0, #13]
10004618:	2b01      	cmp	r3, #1
1000461a:	d011      	beq.n	10004640 <optiga_comms_close+0x30>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
1000461c:	2301      	movs	r3, #1
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
1000461e:	4a0a      	ldr	r2, [pc, #40]	; (10004648 <optiga_comms_close+0x38>)
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
10004620:	7343      	strb	r3, [r0, #13]
optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
10004622:	6803      	ldr	r3, [r0, #0]
10004624:	1c04      	adds	r4, r0, #0
10004626:	61d8      	str	r0, [r3, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
10004628:	619a      	str	r2, [r3, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
1000462a:	7c02      	ldrb	r2, [r0, #16]
1000462c:	3332      	adds	r3, #50	; 0x32
1000462e:	701a      	strb	r2, [r3, #0]
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
10004630:	6800      	ldr	r0, [r0, #0]
10004632:	f7fe f9c1 	bl	100029b8 <ifx_i2c_close>
        if (IFX_I2C_STACK_SUCCESS != status)
10004636:	2800      	cmp	r0, #0
10004638:	d004      	beq.n	10004644 <optiga_comms_close+0x34>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
1000463a:	2300      	movs	r3, #0
1000463c:	7363      	strb	r3, [r4, #13]
1000463e:	e001      	b.n	10004644 <optiga_comms_close+0x34>
}


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
10004640:	2081      	movs	r0, #129	; 0x81
10004642:	0040      	lsls	r0, r0, #1
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
10004644:	bd10      	pop	{r4, pc}
10004646:	46c0      	nop			; (mov r8, r8)
10004648:	10004545 	.word	0x10004545

1000464c <optiga_common_get_uint32>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
1000464c:	1c02      	adds	r2, r0, #0
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 | 
1000464e:	7803      	ldrb	r3, [r0, #0]
10004650:	0618      	lsls	r0, r3, #24
10004652:	7853      	ldrb	r3, [r2, #1]
10004654:	041b      	lsls	r3, r3, #16
10004656:	4303      	orrs	r3, r0
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
10004658:	78d0      	ldrb	r0, [r2, #3]
1000465a:	4318      	orrs	r0, r3
1000465c:	7893      	ldrb	r3, [r2, #2]
1000465e:	021b      	lsls	r3, r3, #8
#include "optiga/common/optiga_lib_common.h"

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 | 
10004660:	4318      	orrs	r0, r3
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));

    return (four_byte_value);
}
10004662:	4770      	bx	lr

10004664 <optiga_common_set_uint16>:

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
10004664:	0a0b      	lsrs	r3, r1, #8
10004666:	7003      	strb	r3, [r0, #0]
    *(p_output_buffer+1) = (uint8_t)(two_byte_value);
10004668:	7041      	strb	r1, [r0, #1]
}
1000466a:	4770      	bx	lr

1000466c <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
1000466c:	0e0b      	lsrs	r3, r1, #24
1000466e:	7003      	strb	r3, [r0, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
10004670:	0c0b      	lsrs	r3, r1, #16
10004672:	7043      	strb	r3, [r0, #1]
    *(p_output_buffer+2) = (uint8_t)(four_byte_value>>8);
10004674:	0a0b      	lsrs	r3, r1, #8
10004676:	7083      	strb	r3, [r0, #2]
    *(p_output_buffer+3) = (uint8_t)(four_byte_value);
10004678:	70c1      	strb	r1, [r0, #3]
}
1000467a:	4770      	bx	lr

1000467c <optiga_common_get_uint16>:

void optiga_common_get_uint16 (const uint8_t * p_input_buffer,uint16_t* p_two_byte_value)
{
    *p_two_byte_value = (uint16_t)(*p_input_buffer << 8);
1000467c:	7803      	ldrb	r3, [r0, #0]
1000467e:	021b      	lsls	r3, r3, #8
10004680:	800b      	strh	r3, [r1, #0]
    *p_two_byte_value |= (uint16_t)(*(p_input_buffer+1));
10004682:	7842      	ldrb	r2, [r0, #1]
10004684:	4313      	orrs	r3, r2
10004686:	800b      	strh	r3, [r1, #0]
}
10004688:	4770      	bx	lr

1000468a <optiga_lib_word_to_hex_string>:
    } while(0);
}
/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_word_to_hex_string(uint16_t value,
                                                    uint8_t * p_buffer)
{
1000468a:	b082      	sub	sp, #8
    uint8_t array_buffer [5] = {0};   
    uint8_t loop = 0, hex_byte = 0, index = 0;
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
    array_buffer [1] = (uint8_t)((value & 0x00FF));
1000468c:	466b      	mov	r3, sp
1000468e:	7058      	strb	r0, [r3, #1]

    p_buffer [index++] = '0';
10004690:	2330      	movs	r3, #48	; 0x30
    p_buffer [index++] = 'x';
    
    for (loop = 0; loop < 2; loop++)
    {
        hex_byte = array_buffer[loop];
10004692:	0a00      	lsrs	r0, r0, #8
    uint8_t loop = 0, hex_byte = 0, index = 0;
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
    array_buffer [1] = (uint8_t)((value & 0x00FF));

    p_buffer [index++] = '0';
10004694:	700b      	strb	r3, [r1, #0]
    p_buffer [index++] = 'x';
10004696:	3348      	adds	r3, #72	; 0x48
10004698:	704b      	strb	r3, [r1, #1]
    for (loop = 0; loop < 2; loop++)
    {
        hex_byte = array_buffer[loop];

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
1000469a:	0903      	lsrs	r3, r0, #4
1000469c:	1c1a      	adds	r2, r3, #0
1000469e:	3237      	adds	r2, #55	; 0x37
100046a0:	2b09      	cmp	r3, #9
100046a2:	d801      	bhi.n	100046a8 <optiga_lib_word_to_hex_string+0x1e>
100046a4:	3330      	adds	r3, #48	; 0x30
100046a6:	1c1a      	adds	r2, r3, #0
100046a8:	230f      	movs	r3, #15
100046aa:	4018      	ands	r0, r3
100046ac:	1c03      	adds	r3, r0, #0
100046ae:	708a      	strb	r2, [r1, #2]
100046b0:	3337      	adds	r3, #55	; 0x37
100046b2:	2809      	cmp	r0, #9
100046b4:	d800      	bhi.n	100046b8 <optiga_lib_word_to_hex_string+0x2e>
100046b6:	3b07      	subs	r3, #7
100046b8:	70cb      	strb	r3, [r1, #3]
    p_buffer [index++] = '0';
    p_buffer [index++] = 'x';
    
    for (loop = 0; loop < 2; loop++)
    {
        hex_byte = array_buffer[loop];
100046ba:	466b      	mov	r3, sp
100046bc:	7858      	ldrb	r0, [r3, #1]

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
100046be:	0902      	lsrs	r2, r0, #4
100046c0:	1c13      	adds	r3, r2, #0
100046c2:	3330      	adds	r3, #48	; 0x30
100046c4:	2a09      	cmp	r2, #9
100046c6:	d900      	bls.n	100046ca <optiga_lib_word_to_hex_string+0x40>
100046c8:	3307      	adds	r3, #7
100046ca:	710b      	strb	r3, [r1, #4]
100046cc:	230f      	movs	r3, #15
100046ce:	4003      	ands	r3, r0
100046d0:	1c1a      	adds	r2, r3, #0
100046d2:	3230      	adds	r2, #48	; 0x30
100046d4:	2b09      	cmp	r3, #9
100046d6:	d901      	bls.n	100046dc <optiga_lib_word_to_hex_string+0x52>
100046d8:	3337      	adds	r3, #55	; 0x37
100046da:	1c1a      	adds	r2, r3, #0
100046dc:	714a      	strb	r2, [r1, #5]
    }    

}
100046de:	b002      	add	sp, #8
100046e0:	4770      	bx	lr
	...

100046e4 <optiga_lib_print_string>:
    
    optiga_lib_print_string_with_newline(print_buffer);
}

void optiga_lib_print_string(const char_t * p_log_string)
{
100046e4:	b510      	push	{r4, lr}
    if (NULL == p_log_string)
100046e6:	2800      	cmp	r0, #0
100046e8:	d007      	beq.n	100046fa <optiga_lib_print_string+0x16>
100046ea:	1c04      	adds	r4, r0, #0
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
100046ec:	f008 fa6d 	bl	1000cbca <strlen>
100046f0:	1c21      	adds	r1, r4, #0
100046f2:	1c02      	adds	r2, r0, #0
100046f4:	4801      	ldr	r0, [pc, #4]	; (100046fc <optiga_lib_print_string+0x18>)
100046f6:	f7fc ff0f 	bl	10001518 <pal_logger_write>
}
100046fa:	bd10      	pop	{r4, pc}
100046fc:	2000156c 	.word	0x2000156c

10004700 <optiga_lib_print_string_with_newline>:

void optiga_lib_print_string_with_newline(const char_t * p_log_string)
{
10004700:	b537      	push	{r0, r1, r2, r4, r5, lr}
10004702:	1c04      	adds	r4, r0, #0
    uint8_t new_line_characters [2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
10004704:	490a      	ldr	r1, [pc, #40]	; (10004730 <optiga_lib_print_string_with_newline+0x30>)
10004706:	a801      	add	r0, sp, #4
10004708:	2202      	movs	r2, #2
1000470a:	f008 f94e 	bl	1000c9aa <memcpy>

    if (NULL == p_log_string)
1000470e:	2c00      	cmp	r4, #0
10004710:	d00d      	beq.n	1000472e <optiga_lib_print_string_with_newline+0x2e>
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
10004712:	1c20      	adds	r0, r4, #0
10004714:	f008 fa59 	bl	1000cbca <strlen>
10004718:	4d06      	ldr	r5, [pc, #24]	; (10004734 <optiga_lib_print_string_with_newline+0x34>)
1000471a:	1c02      	adds	r2, r0, #0
1000471c:	1c21      	adds	r1, r4, #0
1000471e:	1c28      	adds	r0, r5, #0
10004720:	f7fc fefa 	bl	10001518 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
10004724:	1c28      	adds	r0, r5, #0
10004726:	a901      	add	r1, sp, #4
10004728:	2202      	movs	r2, #2
1000472a:	f7fc fef5 	bl	10001518 <pal_logger_write>

}
1000472e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
10004730:	1000d5b4 	.word	0x1000d5b4
10004734:	2000156c 	.word	0x2000156c

10004738 <optiga_lib_print_message>:

void optiga_lib_print_message(const char_t * p_log_string,
                              const char_t * p_log_layer,
                              const char_t * p_log_color)                                  
{
10004738:	b570      	push	{r4, r5, r6, lr}
1000473a:	b0e8      	sub	sp, #416	; 0x1a0
1000473c:	1c06      	adds	r6, r0, #0
1000473e:	1c0c      	adds	r4, r1, #0
10004740:	1c15      	adds	r5, r2, #0
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
10004742:	a803      	add	r0, sp, #12
10004744:	4911      	ldr	r1, [pc, #68]	; (1000478c <optiga_lib_print_message+0x54>)
10004746:	2202      	movs	r2, #2
10004748:	f008 f92f 	bl	1000c9aa <memcpy>
    char_t color_buffer[400];

    if ((NULL == p_log_string) || (NULL == p_log_layer) || (NULL == p_log_color))
1000474c:	2e00      	cmp	r6, #0
1000474e:	d01a      	beq.n	10004786 <optiga_lib_print_message+0x4e>
10004750:	2c00      	cmp	r4, #0
10004752:	d018      	beq.n	10004786 <optiga_lib_print_message+0x4e>
10004754:	2d00      	cmp	r5, #0
10004756:	d016      	beq.n	10004786 <optiga_lib_print_message+0x4e>
    {
        return;
    }

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, p_log_string, p_log_layer, p_log_color);
10004758:	4b0d      	ldr	r3, [pc, #52]	; (10004790 <optiga_lib_print_message+0x58>)
1000475a:	490e      	ldr	r1, [pc, #56]	; (10004794 <optiga_lib_print_message+0x5c>)
1000475c:	1c2a      	adds	r2, r5, #0
1000475e:	9301      	str	r3, [sp, #4]
10004760:	9600      	str	r6, [sp, #0]
10004762:	1c23      	adds	r3, r4, #0
10004764:	a804      	add	r0, sp, #16
10004766:	f008 f9ef 	bl	1000cb48 <siprintf>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)color_buffer, strlen(color_buffer));
1000476a:	a804      	add	r0, sp, #16
1000476c:	f008 fa2d 	bl	1000cbca <strlen>
10004770:	4c09      	ldr	r4, [pc, #36]	; (10004798 <optiga_lib_print_message+0x60>)
10004772:	1c02      	adds	r2, r0, #0
10004774:	a904      	add	r1, sp, #16
10004776:	1c20      	adds	r0, r4, #0
10004778:	f7fc fece 	bl	10001518 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
1000477c:	1c20      	adds	r0, r4, #0
1000477e:	a903      	add	r1, sp, #12
10004780:	2202      	movs	r2, #2
10004782:	f7fc fec9 	bl	10001518 <pal_logger_write>
}
10004786:	b068      	add	sp, #416	; 0x1a0
10004788:	bd70      	pop	{r4, r5, r6, pc}
1000478a:	46c0      	nop			; (mov r8, r8)
1000478c:	1000d5b4 	.word	0x1000d5b4
10004790:	1000d2dc 	.word	0x1000d2dc
10004794:	1000d5b6 	.word	0x1000d5b6
10004798:	2000156c 	.word	0x2000156c

1000479c <optiga_lib_print_status>:

void optiga_lib_print_status(const char_t * p_log_layer,
                             const char_t * p_log_color,
                             uint16_t return_value)
{
1000479c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000479e:	4c28      	ldr	r4, [pc, #160]	; (10004840 <optiga_lib_print_status+0xa4>)
100047a0:	1c05      	adds	r5, r0, #0
100047a2:	44a5      	add	sp, r4
100047a4:	1c0e      	adds	r6, r1, #0
100047a6:	1c17      	adds	r7, r2, #0
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
100047a8:	4926      	ldr	r1, [pc, #152]	; (10004844 <optiga_lib_print_status+0xa8>)
100047aa:	2202      	movs	r2, #2
100047ac:	a802      	add	r0, sp, #8
100047ae:	f008 f8fc 	bl	1000c9aa <memcpy>
    uint8_t uint16t_conv_buffer[10] = {0};
    char_t return_value_buffer[20] = {0};
100047b2:	ac06      	add	r4, sp, #24
void optiga_lib_print_status(const char_t * p_log_layer,
                             const char_t * p_log_color,
                             uint16_t return_value)
{
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
    uint8_t uint16t_conv_buffer[10] = {0};
100047b4:	2100      	movs	r1, #0
100047b6:	220a      	movs	r2, #10
100047b8:	a803      	add	r0, sp, #12
100047ba:	f008 f8ff 	bl	1000c9bc <memset>
    char_t return_value_buffer[20] = {0};
100047be:	2100      	movs	r1, #0
100047c0:	2214      	movs	r2, #20
100047c2:	1c20      	adds	r0, r4, #0
100047c4:	f008 f8fa 	bl	1000c9bc <memset>
    char_t string_buffer[100] = {0};
100047c8:	a80b      	add	r0, sp, #44	; 0x2c
100047ca:	2100      	movs	r1, #0
100047cc:	2264      	movs	r2, #100	; 0x64
100047ce:	f008 f8f5 	bl	1000c9bc <memset>
    char_t color_buffer[400];

    if ((NULL == p_log_layer) || (NULL == p_log_color))
100047d2:	2d00      	cmp	r5, #0
100047d4:	d02f      	beq.n	10004836 <optiga_lib_print_status+0x9a>
100047d6:	2e00      	cmp	r6, #0
100047d8:	d02d      	beq.n	10004836 <optiga_lib_print_status+0x9a>
    }

    // if return value is successful, log SUCCESS
    if (OPTIGA_LIB_SUCCESS == return_value)
    {
        strcat(string_buffer,p_log_layer);
100047da:	a80b      	add	r0, sp, #44	; 0x2c
100047dc:	1c29      	adds	r1, r5, #0
    {
        return;
    }

    // if return value is successful, log SUCCESS
    if (OPTIGA_LIB_SUCCESS == return_value)
100047de:	2f00      	cmp	r7, #0
100047e0:	d104      	bne.n	100047ec <optiga_lib_print_status+0x50>
    {
        strcat(string_buffer,p_log_layer);
100047e2:	f008 f9d3 	bl	1000cb8c <strcat>
        strcat(string_buffer,"Passed");
100047e6:	a80b      	add	r0, sp, #44	; 0x2c
100047e8:	4917      	ldr	r1, [pc, #92]	; (10004848 <optiga_lib_print_status+0xac>)
100047ea:	e00b      	b.n	10004804 <optiga_lib_print_status+0x68>
        strcat(return_value_buffer,"");
    }
    else
    {
        strcat(string_buffer,p_log_layer);
100047ec:	f008 f9ce 	bl	1000cb8c <strcat>
        strcat(string_buffer,"Failed with return value - ");
100047f0:	4916      	ldr	r1, [pc, #88]	; (1000484c <optiga_lib_print_status+0xb0>)
100047f2:	a80b      	add	r0, sp, #44	; 0x2c
100047f4:	f008 f9ca 	bl	1000cb8c <strcat>
        strcat(return_value_buffer,OPTIGA_HEX_BYTE_SEPERATOR);
        optiga_lib_word_to_hex_string(return_value,uint16t_conv_buffer);
100047f8:	1c38      	adds	r0, r7, #0
100047fa:	a903      	add	r1, sp, #12
100047fc:	f7ff ff45 	bl	1000468a <optiga_lib_word_to_hex_string>
        strcat(return_value_buffer,(char_t *)uint16t_conv_buffer);
10004800:	1c20      	adds	r0, r4, #0
10004802:	a903      	add	r1, sp, #12
10004804:	f008 f9c2 	bl	1000cb8c <strcat>
    }

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, (char_t *)return_value_buffer, string_buffer, p_log_color);
10004808:	4b11      	ldr	r3, [pc, #68]	; (10004850 <optiga_lib_print_status+0xb4>)
1000480a:	4912      	ldr	r1, [pc, #72]	; (10004854 <optiga_lib_print_status+0xb8>)
1000480c:	1c32      	adds	r2, r6, #0
1000480e:	9400      	str	r4, [sp, #0]
10004810:	9301      	str	r3, [sp, #4]
10004812:	a824      	add	r0, sp, #144	; 0x90
10004814:	ab0b      	add	r3, sp, #44	; 0x2c
10004816:	f008 f997 	bl	1000cb48 <siprintf>

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)color_buffer, strlen(color_buffer));
1000481a:	a824      	add	r0, sp, #144	; 0x90
1000481c:	f008 f9d5 	bl	1000cbca <strlen>
10004820:	4c0d      	ldr	r4, [pc, #52]	; (10004858 <optiga_lib_print_status+0xbc>)
10004822:	1c02      	adds	r2, r0, #0
10004824:	a924      	add	r1, sp, #144	; 0x90
10004826:	1c20      	adds	r0, r4, #0
10004828:	f7fc fe76 	bl	10001518 <pal_logger_write>
    //Print new line
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
1000482c:	1c20      	adds	r0, r4, #0
1000482e:	a902      	add	r1, sp, #8
10004830:	2202      	movs	r2, #2
10004832:	f7fc fe71 	bl	10001518 <pal_logger_write>
}
10004836:	2389      	movs	r3, #137	; 0x89
10004838:	009b      	lsls	r3, r3, #2
1000483a:	449d      	add	sp, r3
1000483c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000483e:	46c0      	nop			; (mov r8, r8)
10004840:	fffffddc 	.word	0xfffffddc
10004844:	1000d5b4 	.word	0x1000d5b4
10004848:	1000d5bf 	.word	0x1000d5bf
1000484c:	1000d5c6 	.word	0x1000d5c6
10004850:	1000d2dc 	.word	0x1000d2dc
10004854:	1000d5b6 	.word	0x1000d5b6
10004858:	2000156c 	.word	0x2000156c

1000485c <optiga_lib_print_array_hex_format>:

void optiga_lib_print_array_hex_format(const uint8_t * p_log_string,
                                       uint16_t length,
                                       const char_t * p_log_color)
{
1000485c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000485e:	4c41      	ldr	r4, [pc, #260]	; (10004964 <optiga_lib_print_array_hex_format+0x108>)
10004860:	44a5      	add	sp, r4
    uint16_t index = 0;
    uint16_t temp_length;
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
    uint8_t buffer_window = 32; // Alignment of 16 bytes per line

    if ((NULL == p_log_string) || (NULL == p_log_color))
10004862:	2800      	cmp	r0, #0
10004864:	d079      	beq.n	1000495a <optiga_lib_print_array_hex_format+0xfe>
10004866:	2a00      	cmp	r2, #0
10004868:	d077      	beq.n	1000495a <optiga_lib_print_array_hex_format+0xfe>
1000486a:	1c0d      	adds	r5, r1, #0
1000486c:	9205      	str	r2, [sp, #20]
1000486e:	9004      	str	r0, [sp, #16]
}

/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_print_length_of_data(uint16_t value)
{
    uint8_t uint16t_conv_buffer [10] = {0};
10004870:	2100      	movs	r1, #0
10004872:	220a      	movs	r2, #10
10004874:	a806      	add	r0, sp, #24
10004876:	f008 f8a1 	bl	1000c9bc <memset>
    char_t print_buffer[50];      

    sprintf((char_t *)print_buffer, "%37s", "Length of data - ");
1000487a:	4a3b      	ldr	r2, [pc, #236]	; (10004968 <optiga_lib_print_array_hex_format+0x10c>)
1000487c:	493b      	ldr	r1, [pc, #236]	; (1000496c <optiga_lib_print_array_hex_format+0x110>)
1000487e:	a85e      	add	r0, sp, #376	; 0x178
10004880:	f008 f962 	bl	1000cb48 <siprintf>
    strcat(print_buffer,OPTIGA_HEX_BYTE_SEPERATOR);
    optiga_lib_word_to_hex_string(value,uint16t_conv_buffer);
10004884:	1c28      	adds	r0, r5, #0
10004886:	a906      	add	r1, sp, #24
10004888:	f7ff feff 	bl	1000468a <optiga_lib_word_to_hex_string>
    strcat(print_buffer,(char_t *)uint16t_conv_buffer); 
1000488c:	a906      	add	r1, sp, #24
1000488e:	a85e      	add	r0, sp, #376	; 0x178
10004890:	f008 f97c 	bl	1000cb8c <strcat>
    
    optiga_lib_print_string_with_newline(print_buffer);
10004894:	a85e      	add	r0, sp, #376	; 0x178
10004896:	f7ff ff33 	bl	10004700 <optiga_lib_print_string_with_newline>
    }
    
    optiga_lib_print_length_of_data(length);
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
1000489a:	2400      	movs	r4, #0
1000489c:	42ac      	cmp	r4, r5
1000489e:	d25c      	bcs.n	1000495a <optiga_lib_print_array_hex_format+0xfe>
    {
        temp_length = buffer_window;
        if ((length - index) < buffer_window)
100048a0:	1b2b      	subs	r3, r5, r4
    optiga_lib_print_length_of_data(length);
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
    {
        temp_length = buffer_window;
100048a2:	2620      	movs	r6, #32
        if ((length - index) < buffer_window)
100048a4:	2b1f      	cmp	r3, #31
100048a6:	dc00      	bgt.n	100048aa <optiga_lib_print_array_hex_format+0x4e>
        {
            temp_length =  length - index;
100048a8:	b29e      	uxth	r6, r3
        }

        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
100048aa:	22af      	movs	r2, #175	; 0xaf
100048ac:	2100      	movs	r1, #0
100048ae:	0052      	lsls	r2, r2, #1
100048b0:	a806      	add	r0, sp, #24
100048b2:	f008 f883 	bl	1000c9bc <memset>
        pal_os_memset(output_buffer, 0x00, sizeof(output_buffer));
100048b6:	22af      	movs	r2, #175	; 0xaf
100048b8:	a85e      	add	r0, sp, #376	; 0x178
100048ba:	2100      	movs	r1, #0
100048bc:	0052      	lsls	r2, r2, #1
100048be:	f008 f87d 	bl	1000c9bc <memset>

        optiga_lib_byte_to_hex_string((uint8_t*)(p_log_string + index), temp_buffer, temp_length, FALSE);
100048c2:	9b04      	ldr	r3, [sp, #16]
100048c4:	191b      	adds	r3, r3, r4
100048c6:	9303      	str	r3, [sp, #12]
    uint32_t loop = 0;
    uint8_t hex_byte = 0, index = 0;

    do
    {
        if ((NULL == p_array_buffer) || (NULL == p_hex_string))
100048c8:	2b00      	cmp	r3, #0
100048ca:	d027      	beq.n	1000491c <optiga_lib_print_array_hex_format+0xc0>
100048cc:	2309      	movs	r3, #9
100048ce:	aa04      	add	r2, sp, #16
100048d0:	189b      	adds	r3, r3, r2
100048d2:	2200      	movs	r2, #0
        {
            return;
        }

        for (loop = 0; loop < length; loop++)
100048d4:	42b2      	cmp	r2, r6
100048d6:	d219      	bcs.n	1000490c <optiga_lib_print_array_hex_format+0xb0>
                p_hex_string [index++] = '0';
                p_hex_string [index++] = 'x';
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
100048d8:	2030      	movs	r0, #48	; 0x30
100048da:	4684      	mov	ip, r0
        }

        for (loop = 0; loop < length; loop++)
        {
            index = 0;
            hex_byte = p_array_buffer[loop];
100048dc:	9903      	ldr	r1, [sp, #12]
100048de:	5c8f      	ldrb	r7, [r1, r2]
                p_hex_string [index++] = '0';
                p_hex_string [index++] = 'x';
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
100048e0:	0939      	lsrs	r1, r7, #4
100048e2:	448c      	add	ip, r1
100048e4:	2909      	cmp	r1, #9
100048e6:	d901      	bls.n	100048ec <optiga_lib_print_array_hex_format+0x90>
100048e8:	3137      	adds	r1, #55	; 0x37
100048ea:	468c      	mov	ip, r1
100048ec:	4660      	mov	r0, ip
100048ee:	1e59      	subs	r1, r3, #1
100048f0:	7008      	strb	r0, [r1, #0]
100048f2:	210f      	movs	r1, #15
100048f4:	400f      	ands	r7, r1
100048f6:	1c39      	adds	r1, r7, #0
100048f8:	3130      	adds	r1, #48	; 0x30
100048fa:	2f09      	cmp	r7, #9
100048fc:	d900      	bls.n	10004900 <optiga_lib_print_array_hex_format+0xa4>
100048fe:	3107      	adds	r1, #7
10004900:	7019      	strb	r1, [r3, #0]
            
            p_hex_string [index++] = ' ';
10004902:	2120      	movs	r1, #32
        if ((NULL == p_array_buffer) || (NULL == p_hex_string))
        {
            return;
        }

        for (loop = 0; loop < length; loop++)
10004904:	3201      	adds	r2, #1
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
            
            p_hex_string [index++] = ' ';
10004906:	7059      	strb	r1, [r3, #1]
10004908:	3303      	adds	r3, #3
1000490a:	e7e3      	b.n	100048d4 <optiga_lib_print_array_hex_format+0x78>
            p_hex_string += index;
        }
        *p_hex_string = 0x00;
1000490c:	2303      	movs	r3, #3
1000490e:	435e      	muls	r6, r3
10004910:	abb6      	add	r3, sp, #728	; 0x2d8
10004912:	199e      	adds	r6, r3, r6
10004914:	4b16      	ldr	r3, [pc, #88]	; (10004970 <optiga_lib_print_array_hex_format+0x114>)
10004916:	18f6      	adds	r6, r6, r3
10004918:	2300      	movs	r3, #0
1000491a:	7033      	strb	r3, [r6, #0]
        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
        pal_os_memset(output_buffer, 0x00, sizeof(output_buffer));

        optiga_lib_byte_to_hex_string((uint8_t*)(p_log_string + index), temp_buffer, temp_length, FALSE);

        OPTIGA_LIB_LOGGER_PRINT_ARRAY(output_buffer,temp_buffer, p_log_color);
1000491c:	4b15      	ldr	r3, [pc, #84]	; (10004974 <optiga_lib_print_array_hex_format+0x118>)
1000491e:	ae5e      	add	r6, sp, #376	; 0x178
10004920:	4915      	ldr	r1, [pc, #84]	; (10004978 <optiga_lib_print_array_hex_format+0x11c>)
10004922:	9a05      	ldr	r2, [sp, #20]
10004924:	9300      	str	r3, [sp, #0]
10004926:	1c30      	adds	r0, r6, #0
10004928:	ab06      	add	r3, sp, #24
1000492a:	f008 f90d 	bl	1000cb48 <siprintf>

        // New line characted entered at the end of each segment
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
1000492e:	1c30      	adds	r0, r6, #0
10004930:	f008 f94b 	bl	1000cbca <strlen>
10004934:	230d      	movs	r3, #13
10004936:	5433      	strb	r3, [r6, r0]
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
10004938:	1c30      	adds	r0, r6, #0
1000493a:	f008 f946 	bl	1000cbca <strlen>
1000493e:	230a      	movs	r3, #10
10004940:	1830      	adds	r0, r6, r0
10004942:	7043      	strb	r3, [r0, #1]
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&logger_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
10004944:	1c30      	adds	r0, r6, #0
10004946:	f008 f940 	bl	1000cbca <strlen>
    }
    
    optiga_lib_print_length_of_data(length);
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
1000494a:	3420      	adds	r4, #32

        // New line characted entered at the end of each segment
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&logger_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
1000494c:	1c82      	adds	r2, r0, #2
1000494e:	1c31      	adds	r1, r6, #0
10004950:	480a      	ldr	r0, [pc, #40]	; (1000497c <optiga_lib_print_array_hex_format+0x120>)
10004952:	f7fc fde1 	bl	10001518 <pal_logger_write>
    }
    
    optiga_lib_print_length_of_data(length);
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
10004956:	b2a4      	uxth	r4, r4
10004958:	e7a0      	b.n	1000489c <optiga_lib_print_array_hex_format+0x40>
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&logger_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
    }
}
1000495a:	23b7      	movs	r3, #183	; 0xb7
1000495c:	009b      	lsls	r3, r3, #2
1000495e:	449d      	add	sp, r3
10004960:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004962:	46c0      	nop			; (mov r8, r8)
10004964:	fffffd24 	.word	0xfffffd24
10004968:	1000d5e7 	.word	0x1000d5e7
1000496c:	1000d5e2 	.word	0x1000d5e2
10004970:	fffffd40 	.word	0xfffffd40
10004974:	1000d2dc 	.word	0x1000d2dc
10004978:	1000d5f9 	.word	0x1000d5f9
1000497c:	2000156c 	.word	0x2000156c

10004980 <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
10004980:	b530      	push	{r4, r5, lr}
    uint16_t start_position = *position;
10004982:	881c      	ldrh	r4, [r3, #0]

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
10004984:	0a0d      	lsrs	r5, r1, #8
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
10004986:	5510      	strb	r0, [r2, r4]
10004988:	1c60      	adds	r0, r4, #1
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
1000498a:	b280      	uxth	r0, r0
1000498c:	5415      	strb	r5, [r2, r0]
1000498e:	1ca0      	adds	r0, r4, #2
    buffer[start_position++] = (uint8_t )(tag_length);
10004990:	b280      	uxth	r0, r0
10004992:	3403      	adds	r4, #3
10004994:	5411      	strb	r1, [r2, r0]

    *position = start_position;
10004996:	801c      	strh	r4, [r3, #0]
}
10004998:	bd30      	pop	{r4, r5, pc}

1000499a <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
1000499a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
1000499c:	220c      	movs	r2, #12
1000499e:	1c13      	adds	r3, r2, #0

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
100049a0:	1c0d      	adds	r5, r1, #0
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
100049a2:	21c7      	movs	r1, #199	; 0xc7
100049a4:	7f47      	ldrb	r7, [r0, #29]
100049a6:	6806      	ldr	r6, [r0, #0]
100049a8:	437b      	muls	r3, r7
100049aa:	00c9      	lsls	r1, r1, #3
100049ac:	18f3      	adds	r3, r6, r3
100049ae:	185b      	adds	r3, r3, r1
100049b0:	781b      	ldrb	r3, [r3, #0]

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
100049b2:	1c04      	adds	r4, r0, #0
100049b4:	9201      	str	r2, [sp, #4]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
100049b6:	2b23      	cmp	r3, #35	; 0x23
100049b8:	d101      	bne.n	100049be <optiga_cmd_queue_update_slot+0x24>
100049ba:	2d23      	cmp	r5, #35	; 0x23
100049bc:	d008      	beq.n	100049d0 <optiga_cmd_queue_update_slot+0x36>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
100049be:	f7fc fe87 	bl	100016d0 <pal_os_timer_get_time_in_microseconds>
100049c2:	9b01      	ldr	r3, [sp, #4]
100049c4:	437b      	muls	r3, r7
100049c6:	18f6      	adds	r6, r6, r3
100049c8:	23c6      	movs	r3, #198	; 0xc6
100049ca:	00db      	lsls	r3, r3, #3
100049cc:	18f6      	adds	r6, r6, r3
100049ce:	6070      	str	r0, [r6, #4]
    }
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
100049d0:	230c      	movs	r3, #12
100049d2:	20c6      	movs	r0, #198	; 0xc6
100049d4:	7f62      	ldrb	r2, [r4, #29]
100049d6:	6821      	ldr	r1, [r4, #0]
100049d8:	435a      	muls	r2, r3
100049da:	00c0      	lsls	r0, r0, #3
100049dc:	188a      	adds	r2, r1, r2
100049de:	1812      	adds	r2, r2, r0
100049e0:	6014      	str	r4, [r2, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
100049e2:	1c1a      	adds	r2, r3, #0
100049e4:	26c7      	movs	r6, #199	; 0xc7
100049e6:	7f60      	ldrb	r0, [r4, #29]
100049e8:	00f6      	lsls	r6, r6, #3
100049ea:	4342      	muls	r2, r0
100049ec:	188a      	adds	r2, r1, r2
100049ee:	1992      	adds	r2, r2, r6
100049f0:	7816      	ldrb	r6, [r2, #0]
100049f2:	2e23      	cmp	r6, #35	; 0x23
100049f4:	d104      	bne.n	10004a00 <optiga_cmd_queue_update_slot+0x66>
100049f6:	2d23      	cmp	r5, #35	; 0x23
100049f8:	d102      	bne.n	10004a00 <optiga_cmd_queue_update_slot+0x66>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
100049fa:	3b04      	subs	r3, #4
100049fc:	7053      	strb	r3, [r2, #1]
100049fe:	e006      	b.n	10004a0e <optiga_cmd_queue_update_slot+0x74>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
10004a00:	22c7      	movs	r2, #199	; 0xc7
10004a02:	4343      	muls	r3, r0
10004a04:	00d2      	lsls	r2, r2, #3
10004a06:	18cb      	adds	r3, r1, r3
10004a08:	189b      	adds	r3, r3, r2
10004a0a:	2202      	movs	r2, #2
10004a0c:	705a      	strb	r2, [r3, #1]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
10004a0e:	220c      	movs	r2, #12
10004a10:	7f63      	ldrb	r3, [r4, #29]
10004a12:	6821      	ldr	r1, [r4, #0]
10004a14:	4353      	muls	r3, r2
10004a16:	22c7      	movs	r2, #199	; 0xc7
10004a18:	18cb      	adds	r3, r1, r3
10004a1a:	00d2      	lsls	r2, r2, #3
10004a1c:	189b      	adds	r3, r3, r2
10004a1e:	701d      	strb	r5, [r3, #0]
}
10004a20:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

10004a24 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
10004a24:	b538      	push	{r3, r4, r5, lr}
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
10004a26:	230c      	movs	r3, #12
10004a28:	21c6      	movs	r1, #198	; 0xc6
10004a2a:	7f42      	ldrb	r2, [r0, #29]
10004a2c:	6804      	ldr	r4, [r0, #0]
10004a2e:	435a      	muls	r2, r3
10004a30:	00c9      	lsls	r1, r1, #3
10004a32:	18a2      	adds	r2, r4, r2
10004a34:	1852      	adds	r2, r2, r1
10004a36:	2101      	movs	r1, #1
10004a38:	4249      	negs	r1, r1
10004a3a:	6051      	str	r1, [r2, #4]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
10004a3c:	22c6      	movs	r2, #198	; 0xc6
10004a3e:	2500      	movs	r5, #0
10004a40:	7f41      	ldrb	r1, [r0, #29]
10004a42:	00d2      	lsls	r2, r2, #3
10004a44:	4359      	muls	r1, r3
10004a46:	1861      	adds	r1, r4, r1
10004a48:	1889      	adds	r1, r1, r2
10004a4a:	600d      	str	r5, [r1, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
10004a4c:	21c7      	movs	r1, #199	; 0xc7
10004a4e:	7f42      	ldrb	r2, [r0, #29]
10004a50:	00c9      	lsls	r1, r1, #3
10004a52:	435a      	muls	r2, r3
10004a54:	18a2      	adds	r2, r4, r2
10004a56:	1852      	adds	r2, r2, r1
10004a58:	7015      	strb	r5, [r2, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
10004a5a:	7f42      	ldrb	r2, [r0, #29]
10004a5c:	4353      	muls	r3, r2
10004a5e:	6802      	ldr	r2, [r0, #0]
10004a60:	18d3      	adds	r3, r2, r3
10004a62:	2201      	movs	r2, #1
10004a64:	185b      	adds	r3, r3, r1
10004a66:	705a      	strb	r2, [r3, #1]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
10004a68:	23cf      	movs	r3, #207	; 0xcf
10004a6a:	6802      	ldr	r2, [r0, #0]
10004a6c:	00db      	lsls	r3, r3, #3
10004a6e:	58d0      	ldr	r0, [r2, r3]
10004a70:	4901      	ldr	r1, [pc, #4]	; (10004a78 <optiga_cmd_queue_reset_slot+0x54>)
10004a72:	f7fc fdf5 	bl	10001660 <pal_os_event_start>
}
10004a76:	bd38      	pop	{r3, r4, r5, pc}
10004a78:	100061f1 	.word	0x100061f1

10004a7c <optiga_cmd_execute_handler>:
    } while (FALSE);
    return (return_status);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
10004a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_context_t * p_optiga;
    uint8_t exit_loop = TRUE;
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
10004a7e:	6843      	ldr	r3, [r0, #4]
    } while (FALSE);
    return (return_status);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
10004a80:	b085      	sub	sp, #20
10004a82:	1c04      	adds	r4, r0, #0
10004a84:	9102      	str	r1, [sp, #8]
    optiga_context_t * p_optiga;
    uint8_t exit_loop = TRUE;
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
10004a86:	9303      	str	r3, [sp, #12]
    p_optiga = me->p_optiga;
10004a88:	6807      	ldr	r7, [r0, #0]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
10004a8a:	2900      	cmp	r1, #0
10004a8c:	d01b      	beq.n	10004ac6 <optiga_cmd_execute_handler+0x4a>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        /*In the case of hibernate if any low level error occurs while performing
          close application this section clears the saved application context.*/
        if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
10004a8e:	7e03      	ldrb	r3, [r0, #24]
10004a90:	2b00      	cmp	r3, #0
10004a92:	d013      	beq.n	10004abc <optiga_cmd_execute_handler+0x40>
10004a94:	7ec3      	ldrb	r3, [r0, #27]
10004a96:	2b22      	cmp	r3, #34	; 0x22
10004a98:	d110      	bne.n	10004abc <optiga_cmd_execute_handler+0x40>
            (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
        {
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
10004a9a:	23d0      	movs	r3, #208	; 0xd0
10004a9c:	00db      	lsls	r3, r3, #3
10004a9e:	18f8      	adds	r0, r7, r3
10004aa0:	2100      	movs	r1, #0
10004aa2:	2208      	movs	r2, #8
10004aa4:	f007 ff8a 	bl	1000c9bc <memset>
                            sizeof(me->p_optiga->optiga_context_handle_buffer));
            if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
10004aa8:	8c20      	ldrh	r0, [r4, #32]
10004aaa:	2833      	cmp	r0, #51	; 0x33
10004aac:	d106      	bne.n	10004abc <optiga_cmd_execute_handler+0x40>
                (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
            {
                //Clearing context handle secret from datastore
                me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                         me->p_optiga->optiga_context_handle_buffer,
10004aae:	22d0      	movs	r2, #208	; 0xd0
10004ab0:	6823      	ldr	r3, [r4, #0]
10004ab2:	00d2      	lsls	r2, r2, #3
10004ab4:	1899      	adds	r1, r3, r2
                            sizeof(me->p_optiga->optiga_context_handle_buffer));
            if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
                (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
            {
                //Clearing context handle secret from datastore
                me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
10004ab6:	2208      	movs	r2, #8
10004ab8:	f7fc fd64 	bl	10001584 <pal_os_datastore_write>
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                }
            }
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
10004abc:	230b      	movs	r3, #11
10004abe:	75a3      	strb	r3, [r4, #22]
        me->exit_status = event;
10004ac0:	466b      	mov	r3, sp
10004ac2:	891b      	ldrh	r3, [r3, #8]
10004ac4:	83e3      	strh	r3, [r4, #30]
    } while (FALSE);
    return (return_status);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
10004ac6:	2601      	movs	r6, #1
        me->exit_status = event;
    }

    do
    {
        switch (me->cmd_next_execution_state)
10004ac8:	7da3      	ldrb	r3, [r4, #22]
10004aca:	2b0c      	cmp	r3, #12
10004acc:	d900      	bls.n	10004ad0 <optiga_cmd_execute_handler+0x54>
10004ace:	e186      	b.n	10004dde <optiga_cmd_execute_handler+0x362>
10004ad0:	1c18      	adds	r0, r3, #0
10004ad2:	f007 fcb3 	bl	1000c43c <__gnu_thumb1_case_uhi>
10004ad6:	000d      	.short	0x000d
10004ad8:	003a0015 	.word	0x003a0015
10004adc:	00770044 	.word	0x00770044
10004ae0:	00850085 	.word	0x00850085
10004ae4:	00980091 	.word	0x00980091
10004ae8:	010100c8 	.word	0x010100c8
10004aec:	017f0179 	.word	0x017f0179
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
    optiga_cmd_queue_update_slot(me , lock_type);
10004af0:	1c20      	adds	r0, r4, #0
10004af2:	2121      	movs	r1, #33	; 0x21
10004af4:	f7ff ff51 	bl	1000499a <optiga_cmd_queue_update_slot>
        switch (me->cmd_next_execution_state)
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
10004af8:	2300      	movs	r3, #0
10004afa:	83e3      	strh	r3, [r4, #30]
                {
                    EXIT_STATE_WITH_ERROR(me,exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
10004afc:	3301      	adds	r3, #1
10004afe:	e079      	b.n	10004bf4 <optiga_cmd_execute_handler+0x178>
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004b00:	21cf      	movs	r1, #207	; 0xcf
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
10004b02:	6823      	ldr	r3, [r4, #0]
10004b04:	7e62      	ldrb	r2, [r4, #25]
10004b06:	681b      	ldr	r3, [r3, #0]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004b08:	00c9      	lsls	r1, r1, #3
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
10004b0a:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
10004b0c:	6823      	ldr	r3, [r4, #0]
10004b0e:	7ea2      	ldrb	r2, [r4, #26]
10004b10:	681b      	ldr	r3, [r3, #0]
10004b12:	73da      	strb	r2, [r3, #15]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
10004b14:	6823      	ldr	r3, [r4, #0]
10004b16:	7ee2      	ldrb	r2, [r4, #27]
10004b18:	681b      	ldr	r3, [r3, #0]
10004b1a:	741a      	strb	r2, [r3, #16]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004b1c:	6823      	ldr	r3, [r4, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
10004b1e:	6838      	ldr	r0, [r7, #0]
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004b20:	681a      	ldr	r2, [r3, #0]
10004b22:	585b      	ldr	r3, [r3, r1]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
10004b24:	1c21      	adds	r1, r4, #0
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004b26:	6153      	str	r3, [r2, #20]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
10004b28:	f7ff fd22 	bl	10004570 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
10004b2c:	6823      	ldr	r3, [r4, #0]
10004b2e:	6818      	ldr	r0, [r3, #0]
10004b30:	f7ff fd22 	bl	10004578 <optiga_comms_open>
10004b34:	83e0      	strh	r0, [r4, #30]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
10004b36:	2800      	cmp	r0, #0
10004b38:	d005      	beq.n	10004b46 <optiga_cmd_execute_handler+0xca>
                {
                    EXIT_STATE_WITH_ERROR(me,exit_loop);
10004b3a:	230b      	movs	r3, #11
10004b3c:	75a3      	strb	r3, [r4, #22]
10004b3e:	4baa      	ldr	r3, [pc, #680]	; (10004de8 <optiga_cmd_execute_handler+0x36c>)
10004b40:	83e3      	strh	r3, [r4, #30]
10004b42:	2600      	movs	r6, #0
10004b44:	e7c0      	b.n	10004ac8 <optiga_cmd_execute_handler+0x4c>
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
10004b46:	2302      	movs	r3, #2
10004b48:	e054      	b.n	10004bf4 <optiga_cmd_execute_handler+0x178>
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
10004b4a:	23cf      	movs	r3, #207	; 0xcf
10004b4c:	6822      	ldr	r2, [r4, #0]
10004b4e:	00db      	lsls	r3, r3, #3
10004b50:	58d0      	ldr	r0, [r2, r3]
10004b52:	49a6      	ldr	r1, [pc, #664]	; (10004dec <optiga_cmd_execute_handler+0x370>)
10004b54:	1c22      	adds	r2, r4, #0
10004b56:	2332      	movs	r3, #50	; 0x32
10004b58:	f7fc fd72 	bl	10001640 <pal_os_event_register_callback_oneshot>
10004b5c:	e049      	b.n	10004bf2 <optiga_cmd_execute_handler+0x176>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
10004b5e:	7ee3      	ldrb	r3, [r4, #27]
10004b60:	2b22      	cmp	r3, #34	; 0x22
10004b62:	d001      	beq.n	10004b68 <optiga_cmd_execute_handler+0xec>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
10004b64:	2304      	movs	r3, #4
10004b66:	75a3      	strb	r3, [r4, #22]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
10004b68:	6823      	ldr	r3, [r4, #0]
10004b6a:	7e62      	ldrb	r2, [r4, #25]
10004b6c:	681b      	ldr	r3, [r3, #0]
10004b6e:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
10004b70:	6823      	ldr	r3, [r4, #0]
10004b72:	7ea2      	ldrb	r2, [r4, #26]
10004b74:	681b      	ldr	r3, [r3, #0]
10004b76:	73da      	strb	r2, [r3, #15]
                if (0 != me->p_optiga->protection_level_state)
10004b78:	23d1      	movs	r3, #209	; 0xd1
10004b7a:	6822      	ldr	r2, [r4, #0]
10004b7c:	00db      	lsls	r3, r3, #3
10004b7e:	5cd1      	ldrb	r1, [r2, r3]
10004b80:	6812      	ldr	r2, [r2, #0]
10004b82:	2900      	cmp	r1, #0
10004b84:	d001      	beq.n	10004b8a <optiga_cmd_execute_handler+0x10e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
10004b86:	7ee1      	ldrb	r1, [r4, #27]
10004b88:	e000      	b.n	10004b8c <optiga_cmd_execute_handler+0x110>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
10004b8a:	2133      	movs	r1, #51	; 0x33
10004b8c:	7411      	strb	r1, [r2, #16]
                }
                me->p_optiga->protection_level_state = 0;
10004b8e:	2200      	movs	r2, #0
10004b90:	6821      	ldr	r1, [r4, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
10004b92:	2504      	movs	r5, #4
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
10004b94:	54ca      	strb	r2, [r1, r3]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004b96:	21cf      	movs	r1, #207	; 0xcf
10004b98:	6823      	ldr	r3, [r4, #0]
10004b9a:	00c9      	lsls	r1, r1, #3
10004b9c:	681a      	ldr	r2, [r3, #0]
10004b9e:	585b      	ldr	r3, [r3, r1]
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
10004ba0:	75a5      	strb	r5, [r4, #22]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;

                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
10004ba2:	1c21      	adds	r1, r4, #0
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10004ba4:	6153      	str	r3, [r2, #20]

                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
10004ba6:	6838      	ldr	r0, [r7, #0]
10004ba8:	f7ff fce2 	bl	10004570 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
10004bac:	6823      	ldr	r3, [r4, #0]
10004bae:	6818      	ldr	r0, [r3, #0]
10004bb0:	f7ff fd2e 	bl	10004610 <optiga_comms_close>
10004bb4:	83e0      	strh	r0, [r4, #30]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
10004bb6:	2800      	cmp	r0, #0
10004bb8:	d1bf      	bne.n	10004b3a <optiga_cmd_execute_handler+0xbe>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
10004bba:	7ee3      	ldrb	r3, [r4, #27]
10004bbc:	2b22      	cmp	r3, #34	; 0x22
10004bbe:	d109      	bne.n	10004bd4 <optiga_cmd_execute_handler+0x158>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
10004bc0:	75a5      	strb	r5, [r4, #22]
10004bc2:	e10f      	b.n	10004de4 <optiga_cmd_execute_handler+0x368>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, event);
10004bc4:	6923      	ldr	r3, [r4, #16]
10004bc6:	68e0      	ldr	r0, [r4, #12]
10004bc8:	9902      	ldr	r1, [sp, #8]
10004bca:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
10004bcc:	7ee3      	ldrb	r3, [r4, #27]
10004bce:	2b22      	cmp	r3, #34	; 0x22
10004bd0:	d000      	beq.n	10004bd4 <optiga_cmd_execute_handler+0x158>
10004bd2:	e104      	b.n	10004dde <optiga_cmd_execute_handler+0x362>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
    optiga_cmd_queue_reset_slot(me);
10004bd4:	1c20      	adds	r0, r4, #0
10004bd6:	f7ff ff25 	bl	10004a24 <optiga_cmd_queue_reset_slot>
                    exit_loop = TRUE;
                }
                // For synchronous behavior: After exit from optiga_comms_close, release lock
                else
                {
                    me->exit_status = optiga_cmd_release_lock(me);
10004bda:	2300      	movs	r3, #0
10004bdc:	83e3      	strh	r3, [r4, #30]
10004bde:	e0fe      	b.n	10004dde <optiga_cmd_execute_handler+0x362>
10004be0:	2500      	movs	r5, #0
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
}

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
10004be2:	1c20      	adds	r0, r4, #0
10004be4:	2122      	movs	r1, #34	; 0x22
                break;
            }
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            {
                if (me->cmd_next_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
10004be6:	2b05      	cmp	r3, #5
10004be8:	d000      	beq.n	10004bec <optiga_cmd_execute_handler+0x170>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
    optiga_cmd_queue_update_slot(me , lock_type);
10004bea:	2121      	movs	r1, #33	; 0x21
10004bec:	f7ff fed5 	bl	1000499a <optiga_cmd_queue_update_slot>
                {
                    me->exit_status = optiga_cmd_request_session(me);
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
10004bf0:	83e5      	strh	r5, [r4, #30]
                {
                    EXIT_STATE_WITH_ERROR(me,exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
10004bf2:	2308      	movs	r3, #8
10004bf4:	75a3      	strb	r3, [r4, #22]
                break;
10004bf6:	e0f2      	b.n	10004dde <optiga_cmd_execute_handler+0x362>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
    optiga_cmd_queue_update_slot(me , lock_type);
10004bf8:	1c20      	adds	r0, r4, #0
10004bfa:	2123      	movs	r1, #35	; 0x23
10004bfc:	f7ff fecd 	bl	1000499a <optiga_cmd_queue_update_slot>
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                break;
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
10004c00:	2300      	movs	r3, #0
10004c02:	83e3      	strh	r3, [r4, #30]
10004c04:	e7f5      	b.n	10004bf2 <optiga_cmd_execute_handler+0x176>
            }

            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                exit_loop = TRUE;
                me->exit_status = optiga_cmd_handler(me);
10004c06:	1c20      	adds	r0, r4, #0
10004c08:	9b03      	ldr	r3, [sp, #12]
10004c0a:	4798      	blx	r3
10004c0c:	83e0      	strh	r0, [r4, #30]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
10004c0e:	2800      	cmp	r0, #0
10004c10:	d001      	beq.n	10004c16 <optiga_cmd_execute_handler+0x19a>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
10004c12:	230b      	movs	r3, #11
10004c14:	e0dc      	b.n	10004dd0 <optiga_cmd_execute_handler+0x354>
                    exit_loop = FALSE;
                    break;
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
10004c16:	6823      	ldr	r3, [r4, #0]
10004c18:	4a75      	ldr	r2, [pc, #468]	; (10004df0 <optiga_cmd_execute_handler+0x374>)
10004c1a:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
10004c1c:	7e62      	ldrb	r2, [r4, #25]
10004c1e:	681b      	ldr	r3, [r3, #0]
10004c20:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
10004c22:	6823      	ldr	r3, [r4, #0]
10004c24:	7ea2      	ldrb	r2, [r4, #26]
10004c26:	681b      	ldr	r3, [r3, #0]
10004c28:	73da      	strb	r2, [r3, #15]
                me->p_optiga->protection_level_state |= me->protection_level;
10004c2a:	22d1      	movs	r2, #209	; 0xd1
10004c2c:	6821      	ldr	r1, [r4, #0]
10004c2e:	00d2      	lsls	r2, r2, #3
10004c30:	5c8b      	ldrb	r3, [r1, r2]
10004c32:	7e60      	ldrb	r0, [r4, #25]
10004c34:	4303      	orrs	r3, r0
10004c36:	548b      	strb	r3, [r1, r2]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, me);
10004c38:	6838      	ldr	r0, [r7, #0]
10004c3a:	1c21      	adds	r1, r4, #0
10004c3c:	f7ff fc98 	bl	10004570 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
10004c40:	1dbb      	adds	r3, r7, #6
10004c42:	88ba      	ldrh	r2, [r7, #4]
10004c44:	9300      	str	r3, [sp, #0]
10004c46:	3307      	adds	r3, #7
10004c48:	6838      	ldr	r0, [r7, #0]
10004c4a:	1c19      	adds	r1, r3, #0
10004c4c:	f7ff fcb8 	bl	100045c0 <optiga_comms_transceive>
10004c50:	83e0      	strh	r0, [r4, #30]
                                                          p_optiga->optiga_comms_buffer,
                                                          p_optiga->comms_tx_size,
                                                          p_optiga->optiga_comms_buffer,
                                                          &p_optiga->comms_rx_size);

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
10004c52:	2800      	cmp	r0, #0
10004c54:	d000      	beq.n	10004c58 <optiga_cmd_execute_handler+0x1dc>
10004c56:	e770      	b.n	10004b3a <optiga_cmd_execute_handler+0xbe>
                {
                    EXIT_STATE_WITH_ERROR(me,exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10004c58:	2309      	movs	r3, #9
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
10004c5a:	7f22      	ldrb	r2, [r4, #28]
                {
                    EXIT_STATE_WITH_ERROR(me,exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10004c5c:	75a3      	strb	r3, [r4, #22]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
10004c5e:	3b89      	subs	r3, #137	; 0x89
10004c60:	4313      	orrs	r3, r2
10004c62:	7723      	strb	r3, [r4, #28]
                break;
10004c64:	e0be      	b.n	10004de4 <optiga_cmd_execute_handler+0x368>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
10004c66:	7f23      	ldrb	r3, [r4, #28]
10004c68:	2b7f      	cmp	r3, #127	; 0x7f
10004c6a:	d9d2      	bls.n	10004c12 <optiga_cmd_execute_handler+0x196>
                {
                    me->exit_status = optiga_cmd_handler(me);
10004c6c:	1c20      	adds	r0, r4, #0
10004c6e:	9b03      	ldr	r3, [sp, #12]
10004c70:	4798      	blx	r3
10004c72:	83e0      	strh	r0, [r4, #30]
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                    exit_loop = FALSE;
                    break;
                }
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
10004c74:	2800      	cmp	r0, #0
10004c76:	d121      	bne.n	10004cbc <optiga_cmd_execute_handler+0x240>
                {
                    if (FALSE == me->chaining_ongoing)
10004c78:	7de0      	ldrb	r0, [r4, #23]
10004c7a:	2800      	cmp	r0, #0
10004c7c:	d103      	bne.n	10004c86 <optiga_cmd_execute_handler+0x20a>
                    {
                        if (OPTIGA_CMD_STATE_EXIT != me->cmd_next_execution_state)
10004c7e:	7da3      	ldrb	r3, [r4, #22]
10004c80:	2b0c      	cmp	r3, #12
10004c82:	d1c6      	bne.n	10004c12 <optiga_cmd_execute_handler+0x196>
10004c84:	e75d      	b.n	10004b42 <optiga_cmd_execute_handler+0xc6>
10004c86:	23cf      	movs	r3, #207	; 0xcf
10004c88:	6822      	ldr	r2, [r4, #0]
10004c8a:	00db      	lsls	r3, r3, #3
10004c8c:	4957      	ldr	r1, [pc, #348]	; (10004dec <optiga_cmd_execute_handler+0x370>)
                        }
                        exit_loop = FALSE;
                        break;
                    }
                    // for chaining, trigger preparing of next command
                    else if (TRUE == me->chaining_ongoing)
10004c8e:	2801      	cmp	r0, #1
10004c90:	d10b      	bne.n	10004caa <optiga_cmd_execute_handler+0x22e>
                    {
                        pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
10004c92:	58d0      	ldr	r0, [r2, r3]
10004c94:	23fa      	movs	r3, #250	; 0xfa
10004c96:	1c22      	adds	r2, r4, #0
10004c98:	009b      	lsls	r3, r3, #2
10004c9a:	f7fc fcd1 	bl	10001640 <pal_os_event_register_callback_oneshot>
                                                               (void*)me,
                                                               OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                        exit_loop = TRUE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                        me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
10004c9e:	2303      	movs	r3, #3
10004ca0:	7e62      	ldrb	r2, [r4, #25]
10004ca2:	4013      	ands	r3, r2
10004ca4:	7663      	strb	r3, [r4, #25]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
10004ca6:	2308      	movs	r3, #8
10004ca8:	e006      	b.n	10004cb8 <optiga_cmd_execute_handler+0x23c>
                    }
                    // After successful Close Application, change state to invoke optiga_comms_close
                    else
                    {
                        pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
10004caa:	58d0      	ldr	r0, [r2, r3]
10004cac:	23fa      	movs	r3, #250	; 0xfa
10004cae:	1c22      	adds	r2, r4, #0
10004cb0:	009b      	lsls	r3, r3, #2
10004cb2:	f7fc fcc5 	bl	10001640 <pal_os_event_register_callback_oneshot>
                                                               (register_callback)optiga_cmd_event_trigger_execute,
                                                               me,
                                                               OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                        exit_loop=TRUE;
                        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
10004cb6:	2303      	movs	r3, #3
10004cb8:	75a3      	strb	r3, [r4, #22]
10004cba:	e093      	b.n	10004de4 <optiga_cmd_execute_handler+0x368>
                    }
                }
                else
                {
                    // After OPTIGA error is analyzed, invoke upper layer handler and release lock
                    if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
10004cbc:	2381      	movs	r3, #129	; 0x81
10004cbe:	009b      	lsls	r3, r3, #2
10004cc0:	4298      	cmp	r0, r3
10004cc2:	d0a6      	beq.n	10004c12 <optiga_cmd_execute_handler+0x196>
                    }
                    // After OPTIGA responds with failure, invoke the next state to check which error occurred
                    else
                    {
                        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
                        SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
10004cc4:	2203      	movs	r2, #3
                        break;
                    }
                    // After OPTIGA responds with failure, invoke the next state to check which error occurred
                    else
                    {
                        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
10004cc6:	3bfb      	subs	r3, #251	; 0xfb
10004cc8:	3bff      	subs	r3, #255	; 0xff
10004cca:	75a3      	strb	r3, [r4, #22]
                        SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
10004ccc:	7f23      	ldrb	r3, [r4, #28]
10004cce:	4393      	bics	r3, r2
10004cd0:	3a02      	subs	r2, #2
10004cd2:	4313      	orrs	r3, r2
10004cd4:	7723      	strb	r3, [r4, #28]
10004cd6:	e734      	b.n	10004b42 <optiga_cmd_execute_handler+0xc6>
#define GET_DATA_OBJECT_CMD        (0x01)
#define PARAM                      (0x00)

    p_optiga = me->p_optiga;

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
10004cd8:	2303      	movs	r3, #3
10004cda:	7f26      	ldrb	r6, [r4, #28]
#define OFFSET                     (0x0000)
#define BYTES_TO_READ              (0x0001)
#define GET_DATA_OBJECT_CMD        (0x01)
#define PARAM                      (0x00)

    p_optiga = me->p_optiga;
10004cdc:	6825      	ldr	r5, [r4, #0]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
10004cde:	401e      	ands	r6, r3
10004ce0:	2e02      	cmp	r6, #2
10004ce2:	d02c      	beq.n	10004d3e <optiga_cmd_execute_handler+0x2c2>
10004ce4:	429e      	cmp	r6, r3
10004ce6:	d048      	beq.n	10004d7a <optiga_cmd_execute_handler+0x2fe>
10004ce8:	2e01      	cmp	r6, #1
10004cea:	d15b      	bne.n	10004da4 <optiga_cmd_execute_handler+0x328>
    {
        case OPTIGA_CMD_ERROR_CODE_PREPARE:
        {
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
10004cec:	1c28      	adds	r0, r5, #0
10004cee:	4941      	ldr	r1, [pc, #260]	; (10004df4 <optiga_cmd_execute_handler+0x378>)
10004cf0:	3016      	adds	r0, #22
10004cf2:	f7ff fcb7 	bl	10004664 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OFFSET);
10004cf6:	6820      	ldr	r0, [r4, #0]
10004cf8:	2100      	movs	r1, #0
10004cfa:	3018      	adds	r0, #24
10004cfc:	f7ff fcb2 	bl	10004664 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), BYTES_TO_READ);
10004d00:	6820      	ldr	r0, [r4, #0]
10004d02:	1c31      	adds	r1, r6, #0
10004d04:	301a      	adds	r0, #26
10004d06:	f7ff fcad 	bl	10004664 <optiga_common_set_uint16>
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004d0a:	2200      	movs	r2, #0
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            optiga_cmd_prepare_apdu_header(GET_DATA_OBJECT_CMD,
                                           PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10004d0c:	6823      	ldr	r3, [r4, #0]

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
10004d0e:	2103      	movs	r1, #3
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004d10:	74da      	strb	r2, [r3, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004d12:	751a      	strb	r2, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004d14:	3206      	adds	r2, #6
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004d16:	749e      	strb	r6, [r3, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004d18:	755a      	strb	r2, [r3, #21]
            optiga_cmd_prepare_apdu_header(GET_DATA_OBJECT_CMD,
                                           PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10004d1a:	230a      	movs	r3, #10
10004d1c:	6822      	ldr	r2, [r4, #0]
10004d1e:	8093      	strh	r3, [r2, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
10004d20:	7f23      	ldrb	r3, [r4, #28]
10004d22:	438b      	bics	r3, r1
10004d24:	3901      	subs	r1, #1
10004d26:	430b      	orrs	r3, r1
10004d28:	7723      	strb	r3, [r4, #28]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
10004d2a:	23cf      	movs	r3, #207	; 0xcf
10004d2c:	00db      	lsls	r3, r3, #3
10004d2e:	58d0      	ldr	r0, [r2, r3]
10004d30:	23fa      	movs	r3, #250	; 0xfa
10004d32:	492e      	ldr	r1, [pc, #184]	; (10004dec <optiga_cmd_execute_handler+0x370>)
10004d34:	1c22      	adds	r2, r4, #0
10004d36:	009b      	lsls	r3, r3, #2
10004d38:	f7fc fc82 	bl	10001640 <pal_os_event_register_callback_oneshot>
10004d3c:	e032      	b.n	10004da4 <optiga_cmd_execute_handler+0x328>
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_TX:
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
10004d3e:	4b2c      	ldr	r3, [pc, #176]	; (10004df0 <optiga_cmd_execute_handler+0x374>)

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
10004d40:	682a      	ldr	r2, [r5, #0]
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_TX:
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
10004d42:	80eb      	strh	r3, [r5, #6]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
10004d44:	7e63      	ldrb	r3, [r4, #25]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
10004d46:	1c21      	adds	r1, r4, #0
        case OPTIGA_CMD_ERROR_CODE_TX:
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
10004d48:	7393      	strb	r3, [r2, #14]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
10004d4a:	6823      	ldr	r3, [r4, #0]
10004d4c:	7ea2      	ldrb	r2, [r4, #26]
10004d4e:	681b      	ldr	r3, [r3, #0]
10004d50:	73da      	strb	r2, [r3, #15]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
10004d52:	6828      	ldr	r0, [r5, #0]
10004d54:	f7ff fc0c 	bl	10004570 <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
10004d58:	1c2b      	adds	r3, r5, #0
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
10004d5a:	1da9      	adds	r1, r5, #6
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
10004d5c:	330d      	adds	r3, #13
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
10004d5e:	88aa      	ldrh	r2, [r5, #4]
10004d60:	9100      	str	r1, [sp, #0]
10004d62:	6828      	ldr	r0, [r5, #0]
10004d64:	1c19      	adds	r1, r3, #0
10004d66:	f7ff fc2b 	bl	100045c0 <optiga_comms_transceive>
10004d6a:	1e06      	subs	r6, r0, #0
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
                                                    &p_optiga->comms_rx_size);
            if (OPTIGA_COMMS_SUCCESS != return_status)
10004d6c:	d118      	bne.n	10004da0 <optiga_cmd_execute_handler+0x324>
            {
                return_status = OPTIGA_CMD_ERROR;
                break;
            }
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
10004d6e:	2203      	movs	r2, #3
10004d70:	7f23      	ldrb	r3, [r4, #28]
10004d72:	4393      	bics	r3, r2
10004d74:	4313      	orrs	r3, r2
10004d76:	7723      	strb	r3, [r4, #28]
10004d78:	e016      	b.n	10004da8 <optiga_cmd_execute_handler+0x32c>
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_RX:
        {
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004d7a:	7cab      	ldrb	r3, [r5, #18]
10004d7c:	2bff      	cmp	r3, #255	; 0xff
10004d7e:	d011      	beq.n	10004da4 <optiga_cmd_execute_handler+0x328>
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
            return_status = return_status | OPTIGA_DEVICE_ERROR;
10004d80:	2380      	movs	r3, #128	; 0x80
        {
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
10004d82:	7dae      	ldrb	r6, [r5, #22]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
10004d84:	021b      	lsls	r3, r3, #8
10004d86:	431e      	orrs	r6, r3
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10004d88:	2309      	movs	r3, #9
10004d8a:	75a3      	strb	r3, [r4, #22]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
10004d8c:	23cf      	movs	r3, #207	; 0xcf
10004d8e:	00db      	lsls	r3, r3, #3
10004d90:	58e8      	ldr	r0, [r5, r3]
10004d92:	23fa      	movs	r3, #250	; 0xfa
10004d94:	4915      	ldr	r1, [pc, #84]	; (10004dec <optiga_cmd_execute_handler+0x370>)
10004d96:	1c22      	adds	r2, r4, #0
10004d98:	009b      	lsls	r3, r3, #2
10004d9a:	f7fc fc51 	bl	10001640 <pal_os_event_register_callback_oneshot>
10004d9e:	e003      	b.n	10004da8 <optiga_cmd_execute_handler+0x32c>
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
                                                    &p_optiga->comms_rx_size);
            if (OPTIGA_COMMS_SUCCESS != return_status)
            {
                return_status = OPTIGA_CMD_ERROR;
10004da0:	4e11      	ldr	r6, [pc, #68]	; (10004de8 <optiga_cmd_execute_handler+0x36c>)
10004da2:	e001      	b.n	10004da8 <optiga_cmd_execute_handler+0x32c>
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
10004da4:	2680      	movs	r6, #128	; 0x80
10004da6:	0236      	lsls	r6, r6, #8
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                exit_loop=TRUE;
                me->exit_status = optiga_cmd_get_error_code_handler(me);
                if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
10004da8:	b233      	sxth	r3, r6
                break;
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                exit_loop=TRUE;
                me->exit_status = optiga_cmd_get_error_code_handler(me);
10004daa:	83e6      	strh	r6, [r4, #30]
                if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
10004dac:	2b00      	cmp	r3, #0
10004dae:	dd00      	ble.n	10004db2 <optiga_cmd_execute_handler+0x336>
10004db0:	e72f      	b.n	10004c12 <optiga_cmd_execute_handler+0x196>
10004db2:	2380      	movs	r3, #128	; 0x80
10004db4:	021b      	lsls	r3, r3, #8
10004db6:	429e      	cmp	r6, r3
10004db8:	d114      	bne.n	10004de4 <optiga_cmd_execute_handler+0x368>
                    ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
10004dba:	2303      	movs	r3, #3
                    ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
10004dbc:	7f22      	ldrb	r2, [r4, #28]
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                exit_loop=TRUE;
                me->exit_status = optiga_cmd_get_error_code_handler(me);
                if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
                    ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
10004dbe:	4013      	ands	r3, r2
10004dc0:	2b03      	cmp	r3, #3
10004dc2:	d100      	bne.n	10004dc6 <optiga_cmd_execute_handler+0x34a>
10004dc4:	e725      	b.n	10004c12 <optiga_cmd_execute_handler+0x196>
10004dc6:	e00d      	b.n	10004de4 <optiga_cmd_execute_handler+0x368>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
    optiga_cmd_queue_reset_slot(me);
10004dc8:	1c20      	adds	r0, r4, #0
10004dca:	f7ff fe2b 	bl	10004a24 <optiga_cmd_queue_reset_slot>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
                me->cmd_next_execution_state = OPTIGA_CMD_STATE_EXIT;
10004dce:	230c      	movs	r3, #12
10004dd0:	75a3      	strb	r3, [r4, #22]
                exit_loop=FALSE;
                break;
10004dd2:	e6b6      	b.n	10004b42 <optiga_cmd_execute_handler+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
10004dd4:	8be1      	ldrh	r1, [r4, #30]
10004dd6:	6923      	ldr	r3, [r4, #16]
10004dd8:	68e0      	ldr	r0, [r4, #12]
10004dda:	4798      	blx	r3
                exit_loop=TRUE;
                break;
10004ddc:	e002      	b.n	10004de4 <optiga_cmd_execute_handler+0x368>
            }
        }
    } while (FALSE == exit_loop);
10004dde:	2e00      	cmp	r6, #0
10004de0:	d100      	bne.n	10004de4 <optiga_cmd_execute_handler+0x368>
10004de2:	e6ae      	b.n	10004b42 <optiga_cmd_execute_handler+0xc6>
}
10004de4:	b005      	add	sp, #20
10004de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004de8:	00000202 	.word	0x00000202
10004dec:	10004df9 	.word	0x10004df9
10004df0:	00000622 	.word	0x00000622
10004df4:	0000f1c2 	.word	0x0000f1c2

10004df8 <optiga_cmd_event_trigger_execute>:
    *position = start_position;
}


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
10004df8:	b508      	push	{r3, lr}
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
10004dfa:	2100      	movs	r1, #0
10004dfc:	f7ff fe3e 	bl	10004a7c <optiga_cmd_execute_handler>
}
10004e00:	bd08      	pop	{r3, pc}
	...

10004e04 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
10004e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
10004e06:	7d83      	ldrb	r3, [r0, #22]

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
10004e08:	1c05      	adds	r5, r0, #0
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
10004e0a:	6884      	ldr	r4, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
10004e0c:	2b08      	cmp	r3, #8
10004e0e:	d002      	beq.n	10004e16 <optiga_cmd_get_data_object_handler+0x12>
10004e10:	2b09      	cmp	r3, #9
10004e12:	d037      	beq.n	10004e84 <optiga_cmd_get_data_object_handler+0x80>
10004e14:	e091      	b.n	10004f3a <optiga_cmd_get_data_object_handler+0x136>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending read data command...");
10004e16:	484a      	ldr	r0, [pc, #296]	; (10004f40 <optiga_cmd_get_data_object_handler+0x13c>)
10004e18:	494a      	ldr	r1, [pc, #296]	; (10004f44 <optiga_cmd_get_data_object_handler+0x140>)
10004e1a:	4a4b      	ldr	r2, [pc, #300]	; (10004f48 <optiga_cmd_get_data_object_handler+0x144>)
10004e1c:	f7ff fc8c 	bl	10004738 <optiga_lib_print_message>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                break;
            }
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004e20:	6828      	ldr	r0, [r5, #0]
10004e22:	8821      	ldrh	r1, [r4, #0]
10004e24:	3016      	adds	r0, #22
10004e26:	f7ff fc1d 	bl	10004664 <optiga_common_set_uint16>
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
10004e2a:	88e1      	ldrh	r1, [r4, #6]
10004e2c:	88a6      	ldrh	r6, [r4, #4]
10004e2e:	4b47      	ldr	r3, [pc, #284]	; (10004f4c <optiga_cmd_get_data_object_handler+0x148>)
10004e30:	1a76      	subs	r6, r6, r1
10004e32:	429e      	cmp	r6, r3
10004e34:	dd00      	ble.n	10004e38 <optiga_cmd_get_data_object_handler+0x34>
10004e36:	1c1e      	adds	r6, r3, #0
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
10004e38:	7aa2      	ldrb	r2, [r4, #10]
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
10004e3a:	b2b6      	uxth	r6, r6
                break;
            }
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004e3c:	230b      	movs	r3, #11

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
10004e3e:	2a00      	cmp	r2, #0
10004e40:	d10c      	bne.n	10004e5c <optiga_cmd_get_data_object_handler+0x58>
            {
                //offset
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004e42:	8863      	ldrh	r3, [r4, #2]
10004e44:	6828      	ldr	r0, [r5, #0]
10004e46:	18c9      	adds	r1, r1, r3
10004e48:	3018      	adds	r0, #24
10004e4a:	b289      	uxth	r1, r1
10004e4c:	f7ff fc0a 	bl	10004664 <optiga_common_set_uint16>
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                //length
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004e50:	6828      	ldr	r0, [r5, #0]
10004e52:	1c31      	adds	r1, r6, #0
10004e54:	301a      	adds	r0, #26
10004e56:	f7ff fc05 	bl	10004664 <optiga_common_set_uint16>
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10004e5a:	230f      	movs	r3, #15
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
10004e5c:	8820      	ldrh	r0, [r4, #0]
10004e5e:	4a3c      	ldr	r2, [pc, #240]	; (10004f50 <optiga_cmd_get_data_object_handler+0x14c>)
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
10004e60:	2181      	movs	r1, #129	; 0x81
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
10004e62:	4290      	cmp	r0, r2
10004e64:	d100      	bne.n	10004e68 <optiga_cmd_get_data_object_handler+0x64>
            {
                cmd = CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
10004e66:	3980      	subs	r1, #128	; 0x80
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
10004e68:	682a      	ldr	r2, [r5, #0]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
10004e6a:	7e28      	ldrb	r0, [r5, #24]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004e6c:	7491      	strb	r1, [r2, #18]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
10004e6e:	1c19      	adds	r1, r3, #0
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004e70:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004e72:	2000      	movs	r0, #0
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
10004e74:	3909      	subs	r1, #9
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004e76:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004e78:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(cmd,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
10004e7a:	682a      	ldr	r2, [r5, #0]
10004e7c:	3b05      	subs	r3, #5
10004e7e:	8093      	strh	r3, [r2, #4]
            p_optiga_read_data->last_read_size = size_to_read;
10004e80:	8126      	strh	r6, [r4, #8]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
10004e82:	e05b      	b.n	10004f3c <optiga_cmd_get_data_object_handler+0x138>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
10004e84:	4f2f      	ldr	r7, [pc, #188]	; (10004f44 <optiga_cmd_get_data_object_handler+0x140>)
10004e86:	4833      	ldr	r0, [pc, #204]	; (10004f54 <optiga_cmd_get_data_object_handler+0x150>)
10004e88:	1c39      	adds	r1, r7, #0
10004e8a:	4a2f      	ldr	r2, [pc, #188]	; (10004f48 <optiga_cmd_get_data_object_handler+0x144>)
10004e8c:	f7ff fc54 	bl	10004738 <optiga_lib_print_message>
            me->chaining_ongoing = FALSE;
10004e90:	2300      	movs	r3, #0
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004e92:	6829      	ldr	r1, [r5, #0]
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
            me->chaining_ongoing = FALSE;
10004e94:	75eb      	strb	r3, [r5, #23]
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10004e96:	7c8b      	ldrb	r3, [r1, #18]
10004e98:	9301      	str	r3, [sp, #4]
10004e9a:	2b00      	cmp	r3, #0
10004e9c:	d013      	beq.n	10004ec6 <optiga_cmd_get_data_object_handler+0xc2>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
10004e9e:	1c39      	adds	r1, r7, #0
10004ea0:	4a29      	ldr	r2, [pc, #164]	; (10004f48 <optiga_cmd_get_data_object_handler+0x144>)
10004ea2:	482d      	ldr	r0, [pc, #180]	; (10004f58 <optiga_cmd_get_data_object_handler+0x154>)
10004ea4:	f7ff fc48 	bl	10004738 <optiga_lib_print_message>
10004ea8:	237f      	movs	r3, #127	; 0x7f
10004eaa:	7f29      	ldrb	r1, [r5, #28]
                //check if it is out of boundary issue
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
10004eac:	88e2      	ldrh	r2, [r4, #6]
                {
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
10004eae:	400b      	ands	r3, r1
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                //check if it is out of boundary issue
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
10004eb0:	2a00      	cmp	r2, #0
10004eb2:	d004      	beq.n	10004ebe <optiga_cmd_get_data_object_handler+0xba>
                {
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
10004eb4:	2280      	movs	r2, #128	; 0x80
10004eb6:	4252      	negs	r2, r2
10004eb8:	4313      	orrs	r3, r2
10004eba:	772b      	strb	r3, [r5, #28]
10004ebc:	e03d      	b.n	10004f3a <optiga_cmd_get_data_object_handler+0x136>
                }
                //flag used to setting the received buffer length to 0, in case unexpected error
                else
                {
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10004ebe:	772b      	strb	r3, [r5, #28]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
10004ec0:	68e3      	ldr	r3, [r4, #12]
10004ec2:	801a      	strh	r2, [r3, #0]
10004ec4:	e039      	b.n	10004f3a <optiga_cmd_get_data_object_handler+0x136>
                }
                return_status = OPTIGA_CMD_ERROR;
            }
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
10004ec6:	8bea      	ldrh	r2, [r5, #30]
10004ec8:	4b24      	ldr	r3, [pc, #144]	; (10004f5c <optiga_cmd_get_data_object_handler+0x158>)
10004eca:	429a      	cmp	r2, r3
10004ecc:	d103      	bne.n	10004ed6 <optiga_cmd_get_data_object_handler+0xd2>
            {
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
10004ece:	88e2      	ldrh	r2, [r4, #6]
10004ed0:	68e3      	ldr	r3, [r4, #12]
10004ed2:	801a      	strh	r2, [r3, #0]
10004ed4:	e02f      	b.n	10004f36 <optiga_cmd_get_data_object_handler+0x132>
                return_status = OPTIGA_LIB_SUCCESS;
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
10004ed6:	88ce      	ldrh	r6, [r1, #6]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
10004ed8:	88a3      	ldrh	r3, [r4, #4]
                return_status = OPTIGA_LIB_SUCCESS;
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
10004eda:	3e04      	subs	r6, #4
10004edc:	b2b6      	uxth	r6, r6

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
10004ede:	42b3      	cmp	r3, r6
10004ee0:	d20b      	bcs.n	10004efa <optiga_cmd_get_data_object_handler+0xf6>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
10004ee2:	481d      	ldr	r0, [pc, #116]	; (10004f58 <optiga_cmd_get_data_object_handler+0x154>)
10004ee4:	4a18      	ldr	r2, [pc, #96]	; (10004f48 <optiga_cmd_get_data_object_handler+0x144>)
10004ee6:	1c39      	adds	r1, r7, #0
10004ee8:	f7ff fc26 	bl	10004738 <optiga_lib_print_message>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
10004eec:	466a      	mov	r2, sp

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10004eee:	2081      	movs	r0, #129	; 0x81
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
10004ef0:	68e3      	ldr	r3, [r4, #12]
10004ef2:	8892      	ldrh	r2, [r2, #4]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10004ef4:	0080      	lsls	r0, r0, #2
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
10004ef6:	801a      	strh	r2, [r3, #0]
                    break;
10004ef8:	e020      	b.n	10004f3c <optiga_cmd_get_data_object_handler+0x138>
                }

                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
10004efa:	6923      	ldr	r3, [r4, #16]
10004efc:	88e0      	ldrh	r0, [r4, #6]
10004efe:	1c32      	adds	r2, r6, #0
10004f00:	1818      	adds	r0, r3, r0
10004f02:	3116      	adds	r1, #22
10004f04:	f007 fd51 	bl	1000c9aa <memcpy>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
10004f08:	88e3      	ldrh	r3, [r4, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
10004f0a:	8922      	ldrh	r2, [r4, #8]
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
10004f0c:	18f3      	adds	r3, r6, r3
10004f0e:	b29b      	uxth	r3, r3
10004f10:	80e3      	strh	r3, [r4, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
10004f12:	42b2      	cmp	r2, r6
10004f14:	d802      	bhi.n	10004f1c <optiga_cmd_get_data_object_handler+0x118>
10004f16:	88a2      	ldrh	r2, [r4, #4]
10004f18:	429a      	cmp	r2, r3
10004f1a:	d105      	bne.n	10004f28 <optiga_cmd_get_data_object_handler+0x124>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
10004f1c:	68e2      	ldr	r2, [r4, #12]
10004f1e:	8013      	strh	r3, [r2, #0]
                    p_optiga_read_data->accumulated_size = 0;
10004f20:	2300      	movs	r3, #0
10004f22:	80e3      	strh	r3, [r4, #6]
                    p_optiga_read_data->last_read_size = 0;
10004f24:	8123      	strh	r3, [r4, #8]
10004f26:	e001      	b.n	10004f2c <optiga_cmd_get_data_object_handler+0x128>
                }
                else
                {
                    me->chaining_ongoing = TRUE;
10004f28:	2301      	movs	r3, #1
10004f2a:	75eb      	strb	r3, [r5, #23]
                }
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
10004f2c:	480c      	ldr	r0, [pc, #48]	; (10004f60 <optiga_cmd_get_data_object_handler+0x15c>)
10004f2e:	4905      	ldr	r1, [pc, #20]	; (10004f44 <optiga_cmd_get_data_object_handler+0x140>)
10004f30:	4a05      	ldr	r2, [pc, #20]	; (10004f48 <optiga_cmd_get_data_object_handler+0x144>)
10004f32:	f7ff fc01 	bl	10004738 <optiga_lib_print_message>
                return_status = OPTIGA_LIB_SUCCESS;
10004f36:	2000      	movs	r0, #0
10004f38:	e000      	b.n	10004f3c <optiga_cmd_get_data_object_handler+0x138>
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10004f3a:	480a      	ldr	r0, [pc, #40]	; (10004f64 <optiga_cmd_get_data_object_handler+0x160>)
        default:
            break;
    }

    return (return_status);
}
10004f3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10004f3e:	46c0      	nop			; (mov r8, r8)
10004f40:	1000d6af 	.word	0x1000d6af
10004f44:	1000d6cc 	.word	0x1000d6cc
10004f48:	1000d2dc 	.word	0x1000d2dc
10004f4c:	00000611 	.word	0x00000611
10004f50:	0000f1c2 	.word	0x0000f1c2
10004f54:	1000d6e1 	.word	0x1000d6e1
10004f58:	1000d70e 	.word	0x1000d70e
10004f5c:	00008008 	.word	0x00008008
10004f60:	1000d738 	.word	0x1000d738
10004f64:	00000202 	.word	0x00000202

10004f68 <optiga_cmd_set_data_object_handler>:

/*
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
10004f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
10004f6a:	7d83      	ldrb	r3, [r0, #22]

/*
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
10004f6c:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
10004f6e:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
10004f70:	2b08      	cmp	r3, #8
10004f72:	d002      	beq.n	10004f7a <optiga_cmd_set_data_object_handler+0x12>
10004f74:	2b09      	cmp	r3, #9
10004f76:	d04c      	beq.n	10005012 <optiga_cmd_set_data_object_handler+0xaa>
10004f78:	e067      	b.n	1000504a <optiga_cmd_set_data_object_handler+0xe2>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending set data command...");
10004f7a:	4a36      	ldr	r2, [pc, #216]	; (10005054 <optiga_cmd_set_data_object_handler+0xec>)
10004f7c:	4836      	ldr	r0, [pc, #216]	; (10005058 <optiga_cmd_set_data_object_handler+0xf0>)
10004f7e:	4937      	ldr	r1, [pc, #220]	; (1000505c <optiga_cmd_set_data_object_handler+0xf4>)
10004f80:	f7ff fbda 	bl	10004738 <optiga_lib_print_message>
            me->chaining_ongoing = FALSE;
10004f84:	2300      	movs	r3, #0
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004f86:	6820      	ldr	r0, [r4, #0]
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending set data command...");
            me->chaining_ongoing = FALSE;
10004f88:	75e3      	strb	r3, [r4, #23]
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004f8a:	3016      	adds	r0, #22
10004f8c:	8829      	ldrh	r1, [r5, #0]
10004f8e:	f7ff fb69 	bl	10004664 <optiga_common_set_uint16>
                                     p_optiga_write_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            //offset
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10004f92:	886b      	ldrh	r3, [r5, #2]
10004f94:	88e9      	ldrh	r1, [r5, #6]
10004f96:	6820      	ldr	r0, [r4, #0]
10004f98:	18c9      	adds	r1, r1, r3
10004f9a:	3018      	adds	r0, #24
10004f9c:	b289      	uxth	r1, r1
10004f9e:	f7ff fb61 	bl	10004664 <optiga_common_set_uint16>
                                     (p_optiga_write_data->offset + p_optiga_write_data->written_size));
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // Check maximum size that can be written, based on optiga comms buffer size
            size_to_send = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE + OPTIGA_COMMS_DATA_OFFSET - index_for_data),
10004fa2:	88eb      	ldrh	r3, [r5, #6]
10004fa4:	88aa      	ldrh	r2, [r5, #4]
10004fa6:	1ad2      	subs	r2, r2, r3
10004fa8:	4b2d      	ldr	r3, [pc, #180]	; (10005060 <optiga_cmd_set_data_object_handler+0xf8>)
10004faa:	429a      	cmp	r2, r3
10004fac:	dd00      	ble.n	10004fb0 <optiga_cmd_set_data_object_handler+0x48>
10004fae:	1c1a      	adds	r2, r3, #0
10004fb0:	b297      	uxth	r7, r2
                               ((p_optiga_write_data->size) - p_optiga_write_data->written_size));

            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
10004fb2:	1c3e      	adds	r6, r7, #0
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10004fb4:	4b2b      	ldr	r3, [pc, #172]	; (10005064 <optiga_cmd_set_data_object_handler+0xfc>)
            // Check maximum size that can be written, based on optiga comms buffer size
            size_to_send = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE + OPTIGA_COMMS_DATA_OFFSET - index_for_data),
                               ((p_optiga_write_data->size) - p_optiga_write_data->written_size));

            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
10004fb6:	3608      	adds	r6, #8
10004fb8:	b2b6      	uxth	r6, r6
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10004fba:	429e      	cmp	r6, r3
10004fbc:	d847      	bhi.n	1000504e <optiga_cmd_set_data_object_handler+0xe6>
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004fbe:	2082      	movs	r0, #130	; 0x82
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
10004fc0:	7e23      	ldrb	r3, [r4, #24]
10004fc2:	1d39      	adds	r1, r7, #4
10004fc4:	9301      	str	r3, [sp, #4]
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10004fc6:	6823      	ldr	r3, [r4, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
10004fc8:	b289      	uxth	r1, r1
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10004fca:	7498      	strb	r0, [r3, #18]
    p_apdu_buffer [1] = param;
10004fcc:	4668      	mov	r0, sp
10004fce:	7900      	ldrb	r0, [r0, #4]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10004fd0:	7559      	strb	r1, [r3, #21]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10004fd2:	74d8      	strb	r0, [r3, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10004fd4:	0a08      	lsrs	r0, r1, #8
10004fd6:	7518      	strb	r0, [r3, #20]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
            //data to be written
            if (OPTIGA_UTIL_COUNT_DATA_OBJECT == me->cmd_param)
10004fd8:	7e23      	ldrb	r3, [r4, #24]
10004fda:	6820      	ldr	r0, [r4, #0]
10004fdc:	2b02      	cmp	r3, #2
10004fde:	d102      	bne.n	10004fe6 <optiga_cmd_set_data_object_handler+0x7e>
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
10004fe0:	7bab      	ldrb	r3, [r5, #14]
10004fe2:	7683      	strb	r3, [r0, #26]
10004fe4:	e006      	b.n	10004ff4 <optiga_cmd_set_data_object_handler+0x8c>
            }
            else
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10004fe6:	88e9      	ldrh	r1, [r5, #6]
10004fe8:	68ab      	ldr	r3, [r5, #8]
10004fea:	301a      	adds	r0, #26
10004fec:	b292      	uxth	r2, r2
10004fee:	1859      	adds	r1, r3, r1
10004ff0:	f007 fcdb 	bl	1000c9aa <memcpy>
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
10004ff4:	88eb      	ldrh	r3, [r5, #6]

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
10004ff6:	6822      	ldr	r2, [r4, #0]
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
10004ff8:	18fb      	adds	r3, r7, r3
10004ffa:	b29b      	uxth	r3, r3
10004ffc:	80eb      	strh	r3, [r5, #6]

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
10004ffe:	8096      	strh	r6, [r2, #4]
10005000:	2200      	movs	r2, #0

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
10005002:	88a9      	ldrh	r1, [r5, #4]
            {
                me->chaining_ongoing = TRUE;
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = CMD_WRITE_ONLY;
            }
            return_status = OPTIGA_LIB_SUCCESS;
10005004:	1c10      	adds	r0, r2, #0
            p_optiga_write_data->written_size += size_to_send;

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
10005006:	4299      	cmp	r1, r3
10005008:	d023      	beq.n	10005052 <optiga_cmd_set_data_object_handler+0xea>
            {
                me->chaining_ongoing = TRUE;
1000500a:	2301      	movs	r3, #1
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = CMD_WRITE_ONLY;
1000500c:	7622      	strb	r2, [r4, #24]
            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
            {
                me->chaining_ongoing = TRUE;
1000500e:	75e3      	strb	r3, [r4, #23]
10005010:	e01f      	b.n	10005052 <optiga_cmd_set_data_object_handler+0xea>
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for set data command...");
10005012:	4f12      	ldr	r7, [pc, #72]	; (1000505c <optiga_cmd_set_data_object_handler+0xf4>)
10005014:	4e0f      	ldr	r6, [pc, #60]	; (10005054 <optiga_cmd_set_data_object_handler+0xec>)
10005016:	4814      	ldr	r0, [pc, #80]	; (10005068 <optiga_cmd_set_data_object_handler+0x100>)
10005018:	1c39      	adds	r1, r7, #0
1000501a:	1c32      	adds	r2, r6, #0
1000501c:	f7ff fb8c 	bl	10004738 <optiga_lib_print_message>
            // check if the write was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10005020:	6823      	ldr	r3, [r4, #0]
10005022:	7c9d      	ldrb	r5, [r3, #18]
10005024:	2d00      	cmp	r5, #0
10005026:	d009      	beq.n	1000503c <optiga_cmd_set_data_object_handler+0xd4>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data response...");
10005028:	1c32      	adds	r2, r6, #0
1000502a:	4810      	ldr	r0, [pc, #64]	; (1000506c <optiga_cmd_set_data_object_handler+0x104>)
1000502c:	1c39      	adds	r1, r7, #0
1000502e:	f7ff fb83 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005032:	237f      	movs	r3, #127	; 0x7f
10005034:	7f22      	ldrb	r2, [r4, #28]
10005036:	4013      	ands	r3, r2
10005038:	7723      	strb	r3, [r4, #28]
1000503a:	e006      	b.n	1000504a <optiga_cmd_set_data_object_handler+0xe2>
                break;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of set data command is processed...");
1000503c:	480c      	ldr	r0, [pc, #48]	; (10005070 <optiga_cmd_set_data_object_handler+0x108>)
1000503e:	1c39      	adds	r1, r7, #0
10005040:	1c32      	adds	r2, r6, #0
10005042:	f7ff fb79 	bl	10004738 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
10005046:	1c28      	adds	r0, r5, #0
        }
        break;
10005048:	e003      	b.n	10005052 <optiga_cmd_set_data_object_handler+0xea>
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
1000504a:	480a      	ldr	r0, [pc, #40]	; (10005074 <optiga_cmd_set_data_object_handler+0x10c>)
1000504c:	e001      	b.n	10005052 <optiga_cmd_set_data_object_handler+0xea>
            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
1000504e:	2081      	movs	r0, #129	; 0x81
10005050:	0080      	lsls	r0, r0, #2
        break;
        default:
            break;
    }
    return (return_status);
}
10005052:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10005054:	1000d2dc 	.word	0x1000d2dc
10005058:	1000d766 	.word	0x1000d766
1000505c:	1000d6cc 	.word	0x1000d6cc
10005060:	0000060d 	.word	0x0000060d
10005064:	00000615 	.word	0x00000615
10005068:	1000d782 	.word	0x1000d782
1000506c:	1000d7ae 	.word	0x1000d7ae
10005070:	1000d7d7 	.word	0x1000d7d7
10005074:	00000202 	.word	0x00000202

10005078 <optiga_cmd_get_random_handler>:
#if defined (OPTIGA_CRYPT_RANDOM_ENABLED) || defined (OPTIGA_CRYPT_RSA_PRE_MASTER_SECRET_ENABLED)
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
10005078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
1000507a:	466b      	mov	r3, sp
1000507c:	1d9e      	adds	r6, r3, #6
1000507e:	2309      	movs	r3, #9
10005080:	8033      	strh	r3, [r6, #0]

    switch ((uint8_t)me->cmd_next_execution_state)
10005082:	7d83      	ldrb	r3, [r0, #22]
#if defined (OPTIGA_CRYPT_RANDOM_ENABLED) || defined (OPTIGA_CRYPT_RSA_PRE_MASTER_SECRET_ENABLED)
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
10005084:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
10005086:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
10005088:	2b08      	cmp	r3, #8
1000508a:	d002      	beq.n	10005092 <optiga_cmd_get_random_handler+0x1a>
1000508c:	2b09      	cmp	r3, #9
1000508e:	d050      	beq.n	10005132 <optiga_cmd_get_random_handler+0xba>
10005090:	e073      	b.n	1000517a <optiga_cmd_get_random_handler+0x102>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending get random command...");
10005092:	4a3c      	ldr	r2, [pc, #240]	; (10005184 <optiga_cmd_get_random_handler+0x10c>)
10005094:	483c      	ldr	r0, [pc, #240]	; (10005188 <optiga_cmd_get_random_handler+0x110>)
10005096:	493d      	ldr	r1, [pc, #244]	; (1000518c <optiga_cmd_get_random_handler+0x114>)
10005098:	f7ff fb4e 	bl	10004738 <optiga_lib_print_message>
            /// APDU header size + length of random
            /// OID size in case of param 0x04
            /// 0x41, Length and prepending optional data
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            total_apdu_length += ((CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == (uint8_t)me->cmd_param) ?
1000509c:	7e22      	ldrb	r2, [r4, #24]
1000509e:	2300      	movs	r3, #0
100050a0:	2a04      	cmp	r2, #4
100050a2:	d102      	bne.n	100050aa <optiga_cmd_get_random_handler+0x32>
100050a4:	886b      	ldrh	r3, [r5, #2]
100050a6:	3305      	adds	r3, #5
100050a8:	b29b      	uxth	r3, r3
100050aa:	3306      	adds	r3, #6
                                (OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_APDU_TL_LENGTH + p_random_params->optional_data_length) : 0x00);

            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
100050ac:	4a38      	ldr	r2, [pc, #224]	; (10005190 <optiga_cmd_get_random_handler+0x118>)
100050ae:	b29b      	uxth	r3, r3
100050b0:	4293      	cmp	r3, r2
100050b2:	d864      	bhi.n	1000517e <optiga_cmd_get_random_handler+0x106>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            /// Copy the random data length
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
100050b4:	6823      	ldr	r3, [r4, #0]
100050b6:	8830      	ldrh	r0, [r6, #0]
100050b8:	8829      	ldrh	r1, [r5, #0]
100050ba:	1818      	adds	r0, r3, r0
100050bc:	300d      	adds	r0, #13
100050be:	f7ff fad1 	bl	10004664 <optiga_common_set_uint16>
                                     p_random_params->random_data_length);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100050c2:	8830      	ldrh	r0, [r6, #0]
100050c4:	3002      	adds	r0, #2
100050c6:	b280      	uxth	r0, r0
100050c8:	8030      	strh	r0, [r6, #0]

            if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == (uint8_t)me->cmd_param)
100050ca:	7e23      	ldrb	r3, [r4, #24]
100050cc:	2b04      	cmp	r3, #4
100050ce:	d120      	bne.n	10005112 <optiga_cmd_get_random_handler+0x9a>
            {
                /// Copy the data to buffer
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
100050d0:	6823      	ldr	r3, [r4, #0]
100050d2:	8aa1      	ldrh	r1, [r4, #20]
100050d4:	1818      	adds	r0, r3, r0
100050d6:	300d      	adds	r0, #13
100050d8:	f7ff fac4 	bl	10004664 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100050dc:	8833      	ldrh	r3, [r6, #0]

                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header(CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
100050de:	68a9      	ldr	r1, [r5, #8]

            if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == (uint8_t)me->cmd_param)
            {
                /// Copy the data to buffer
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100050e0:	3302      	adds	r3, #2
100050e2:	8033      	strh	r3, [r6, #0]

                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header(CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
100050e4:	2900      	cmp	r1, #0
100050e6:	d000      	beq.n	100050ea <optiga_cmd_get_random_handler+0x72>
100050e8:	8869      	ldrh	r1, [r5, #2]
                                              ((NULL != p_random_params->optional_data) ?
                                                p_random_params->optional_data_length : 0x0000),
                                              me->p_optiga->optiga_comms_buffer,
100050ea:	6822      	ldr	r2, [r4, #0]
                /// Copy the data to buffer
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header(CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
100050ec:	2041      	movs	r0, #65	; 0x41
                                              ((NULL != p_random_params->optional_data) ?
                                                p_random_params->optional_data_length : 0x0000),
                                              me->p_optiga->optiga_comms_buffer,
100050ee:	320d      	adds	r2, #13
                /// Copy the data to buffer
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header(CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
100050f0:	1c33      	adds	r3, r6, #0
100050f2:	f7ff fc45 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              ((NULL != p_random_params->optional_data) ?
                                                p_random_params->optional_data_length : 0x0000),
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                if ((NULL != p_random_params->optional_data))
100050f6:	68a9      	ldr	r1, [r5, #8]
100050f8:	2900      	cmp	r1, #0
100050fa:	d00a      	beq.n	10005112 <optiga_cmd_get_random_handler+0x9a>
                {
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
100050fc:	6823      	ldr	r3, [r4, #0]
100050fe:	8830      	ldrh	r0, [r6, #0]
10005100:	886a      	ldrh	r2, [r5, #2]
10005102:	1818      	adds	r0, r3, r0
10005104:	300d      	adds	r0, #13
10005106:	f007 fc50 	bl	1000c9aa <memcpy>
                                  p_random_params->optional_data_length);
                    index_for_data += p_random_params->optional_data_length;
1000510a:	886a      	ldrh	r2, [r5, #2]
1000510c:	8833      	ldrh	r3, [r6, #0]
1000510e:	18d3      	adds	r3, r2, r3
10005110:	8033      	strh	r3, [r6, #0]
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
10005112:	8833      	ldrh	r3, [r6, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005114:	258c      	movs	r5, #140	; 0x8c
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
                                  p_random_params->optional_data_length);
                    index_for_data += p_random_params->optional_data_length;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
10005116:	1c19      	adds	r1, r3, #0
10005118:	7e20      	ldrb	r0, [r4, #24]
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
1000511a:	6822      	ldr	r2, [r4, #0]
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
                                  p_random_params->optional_data_length);
                    index_for_data += p_random_params->optional_data_length;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
1000511c:	3909      	subs	r1, #9
1000511e:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10005120:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005122:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005124:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005126:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10005128:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
1000512a:	6822      	ldr	r2, [r4, #0]
1000512c:	3b05      	subs	r3, #5
1000512e:	8093      	strh	r3, [r2, #4]
10005130:	e021      	b.n	10005176 <optiga_cmd_get_random_handler+0xfe>
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for get random command...");
10005132:	4f16      	ldr	r7, [pc, #88]	; (1000518c <optiga_cmd_get_random_handler+0x114>)
10005134:	4e13      	ldr	r6, [pc, #76]	; (10005184 <optiga_cmd_get_random_handler+0x10c>)
10005136:	1c39      	adds	r1, r7, #0
10005138:	4816      	ldr	r0, [pc, #88]	; (10005194 <optiga_cmd_get_random_handler+0x11c>)
1000513a:	1c32      	adds	r2, r6, #0
1000513c:	f7ff fafc 	bl	10004738 <optiga_lib_print_message>
            // check if the random data retrieval app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10005140:	6821      	ldr	r1, [r4, #0]
10005142:	7c8b      	ldrb	r3, [r1, #18]
10005144:	2b00      	cmp	r3, #0
10005146:	d009      	beq.n	1000515c <optiga_cmd_get_random_handler+0xe4>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing get random response...");
10005148:	1c32      	adds	r2, r6, #0
1000514a:	4813      	ldr	r0, [pc, #76]	; (10005198 <optiga_cmd_get_random_handler+0x120>)
1000514c:	1c39      	adds	r1, r7, #0
1000514e:	f7ff faf3 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005152:	237f      	movs	r3, #127	; 0x7f
10005154:	7f22      	ldrb	r2, [r4, #28]
10005156:	4013      	ands	r3, r2
10005158:	7723      	strb	r3, [r4, #28]
1000515a:	e00e      	b.n	1000517a <optiga_cmd_get_random_handler+0x102>
                break;
            }
            if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET != (uint8_t)me->cmd_param)
1000515c:	7e23      	ldrb	r3, [r4, #24]
1000515e:	2b04      	cmp	r3, #4
10005160:	d004      	beq.n	1000516c <optiga_cmd_get_random_handler+0xf4>
            {
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_random_params->random_data,
10005162:	6868      	ldr	r0, [r5, #4]
10005164:	882a      	ldrh	r2, [r5, #0]
10005166:	3116      	adds	r1, #22
10005168:	f007 fc1f 	bl	1000c9aa <memcpy>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              p_random_params->random_data_length);
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of get random command is processed...");
1000516c:	480b      	ldr	r0, [pc, #44]	; (1000519c <optiga_cmd_get_random_handler+0x124>)
1000516e:	4907      	ldr	r1, [pc, #28]	; (1000518c <optiga_cmd_get_random_handler+0x114>)
10005170:	4a04      	ldr	r2, [pc, #16]	; (10005184 <optiga_cmd_get_random_handler+0x10c>)
10005172:	f7ff fae1 	bl	10004738 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
10005176:	2000      	movs	r0, #0
        }
        break;
10005178:	e003      	b.n	10005182 <optiga_cmd_get_random_handler+0x10a>
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
1000517a:	4809      	ldr	r0, [pc, #36]	; (100051a0 <optiga_cmd_get_random_handler+0x128>)
1000517c:	e001      	b.n	10005182 <optiga_cmd_get_random_handler+0x10a>
            total_apdu_length += ((CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == (uint8_t)me->cmd_param) ?
                                (OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_APDU_TL_LENGTH + p_random_params->optional_data_length) : 0x00);

            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
1000517e:	2081      	movs	r0, #129	; 0x81
10005180:	0080      	lsls	r0, r0, #2
        default:
            break;
    }

    return (return_status);
}
10005182:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10005184:	1000d2dc 	.word	0x1000d2dc
10005188:	1000d804 	.word	0x1000d804
1000518c:	1000d6cc 	.word	0x1000d6cc
10005190:	00000615 	.word	0x00000615
10005194:	1000d822 	.word	0x1000d822
10005198:	1000d850 	.word	0x1000d850
1000519c:	1000d87b 	.word	0x1000d87b
100051a0:	00000202 	.word	0x00000202

100051a4 <optiga_cmd_calc_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_SIGN_ENABLED) || defined (OPTIGA_CRYPT_RSA_SIGN_ENABLED)
/*
* CalcSign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
100051a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100051a6:	b085      	sub	sp, #20
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t private_key_oid;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
100051a8:	ab02      	add	r3, sp, #8
100051aa:	1d9e      	adds	r6, r3, #6
100051ac:	2309      	movs	r3, #9
100051ae:	8033      	strh	r3, [r6, #0]

    switch ((uint8_t)me->cmd_next_execution_state)
100051b0:	7d83      	ldrb	r3, [r0, #22]
#if defined (OPTIGA_CRYPT_ECDSA_SIGN_ENABLED) || defined (OPTIGA_CRYPT_RSA_SIGN_ENABLED)
/*
* CalcSign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
100051b2:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
100051b4:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t private_key_oid;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
100051b6:	2b08      	cmp	r3, #8
100051b8:	d002      	beq.n	100051c0 <optiga_cmd_calc_sign_handler+0x1c>
100051ba:	2b09      	cmp	r3, #9
100051bc:	d03a      	beq.n	10005234 <optiga_cmd_calc_sign_handler+0x90>
100051be:	e06f      	b.n	100052a0 <optiga_cmd_calc_sign_handler+0xfc>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            // APDU headed length + TLV of Digest + TLV of signature key OID
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate sign command..");
100051c0:	4839      	ldr	r0, [pc, #228]	; (100052a8 <optiga_cmd_calc_sign_handler+0x104>)
100051c2:	493a      	ldr	r1, [pc, #232]	; (100052ac <optiga_cmd_calc_sign_handler+0x108>)
100051c4:	4a3a      	ldr	r2, [pc, #232]	; (100052b0 <optiga_cmd_calc_sign_handler+0x10c>)
100051c6:	f7ff fab7 	bl	10004738 <optiga_lib_print_message>
                break;
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(CMD_SIGN_DIGEST_TAG,
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
100051ca:	6822      	ldr	r2, [r4, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
                break;
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(CMD_SIGN_DIGEST_TAG,
100051cc:	7ba9      	ldrb	r1, [r5, #14]
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
100051ce:	320d      	adds	r2, #13
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
                break;
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(CMD_SIGN_DIGEST_TAG,
100051d0:	2001      	movs	r0, #1
100051d2:	1c33      	adds	r3, r6, #0
100051d4:	f7ff fbd4 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //Digest data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
100051d8:	6823      	ldr	r3, [r4, #0]
100051da:	8830      	ldrh	r0, [r6, #0]
100051dc:	7baa      	ldrb	r2, [r5, #14]
100051de:	1818      	adds	r0, r3, r0
100051e0:	6829      	ldr	r1, [r5, #0]
100051e2:	300d      	adds	r0, #13
100051e4:	f007 fbe1 	bl	1000c9aa <memcpy>
                          p_optiga_ecdsa_sign->p_digest,
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;
100051e8:	7baa      	ldrb	r2, [r5, #14]
100051ea:	8833      	ldrh	r3, [r6, #0]

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(CMD_SIGN_OID_TAG,
100051ec:	2102      	movs	r1, #2
            //Digest data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_ecdsa_sign->p_digest,
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;
100051ee:	18d3      	adds	r3, r2, r3

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(CMD_SIGN_OID_TAG,
                                          CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
100051f0:	6822      	ldr	r2, [r4, #0]
            //Digest data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_ecdsa_sign->p_digest,
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;
100051f2:	8033      	strh	r3, [r6, #0]

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(CMD_SIGN_OID_TAG,
                                          CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
100051f4:	320d      	adds	r2, #13
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(CMD_SIGN_OID_TAG,
100051f6:	1c33      	adds	r3, r6, #0
100051f8:	2003      	movs	r0, #3
100051fa:	f7ff fbc1 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //oid
            private_key_oid = me->session_oid;
            if (OPTIGA_KEY_ID_SESSION_BASED != p_optiga_ecdsa_sign->private_key_oid)
100051fe:	89ab      	ldrh	r3, [r5, #12]
            optiga_cmd_prepare_tag_header(CMD_SIGN_OID_TAG,
                                          CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //oid
            private_key_oid = me->session_oid;
10005200:	8aa1      	ldrh	r1, [r4, #20]
            if (OPTIGA_KEY_ID_SESSION_BASED != p_optiga_ecdsa_sign->private_key_oid)
10005202:	2b00      	cmp	r3, #0
10005204:	d000      	beq.n	10005208 <optiga_cmd_calc_sign_handler+0x64>
10005206:	1c19      	adds	r1, r3, #0
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005208:	25b1      	movs	r5, #177	; 0xb1
            private_key_oid = me->session_oid;
            if (OPTIGA_KEY_ID_SESSION_BASED != p_optiga_ecdsa_sign->private_key_oid)
            {
                private_key_oid = (uint16_t)p_optiga_ecdsa_sign->private_key_oid;
            }
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
1000520a:	6823      	ldr	r3, [r4, #0]
1000520c:	8830      	ldrh	r0, [r6, #0]
1000520e:	1818      	adds	r0, r3, r0
10005210:	300d      	adds	r0, #13
10005212:	f7ff fa27 	bl	10004664 <optiga_common_set_uint16>
                                     private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005216:	8833      	ldrh	r3, [r6, #0]

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
10005218:	7e20      	ldrb	r0, [r4, #24]
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
1000521a:	6822      	ldr	r2, [r4, #0]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
1000521c:	1fd9      	subs	r1, r3, #7
1000521e:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10005220:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005222:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005224:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005226:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10005228:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
1000522a:	6822      	ldr	r2, [r4, #0]
1000522c:	3b03      	subs	r3, #3
1000522e:	8093      	strh	r3, [r2, #4]
            return_status = OPTIGA_LIB_SUCCESS;
10005230:	2000      	movs	r0, #0
        }
        break;
10005232:	e036      	b.n	100052a2 <optiga_cmd_calc_sign_handler+0xfe>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
10005234:	4f1d      	ldr	r7, [pc, #116]	; (100052ac <optiga_cmd_calc_sign_handler+0x108>)
10005236:	4e1e      	ldr	r6, [pc, #120]	; (100052b0 <optiga_cmd_calc_sign_handler+0x10c>)
10005238:	1c39      	adds	r1, r7, #0
1000523a:	481e      	ldr	r0, [pc, #120]	; (100052b4 <optiga_cmd_calc_sign_handler+0x110>)
1000523c:	1c32      	adds	r2, r6, #0
1000523e:	f7ff fa7b 	bl	10004738 <optiga_lib_print_message>
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10005242:	6821      	ldr	r1, [r4, #0]
10005244:	7c8b      	ldrb	r3, [r1, #18]
10005246:	9301      	str	r3, [sp, #4]
10005248:	2b00      	cmp	r3, #0
1000524a:	d11d      	bne.n	10005288 <optiga_cmd_calc_sign_handler+0xe4>
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
1000524c:	68ab      	ldr	r3, [r5, #8]
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
1000524e:	88ca      	ldrh	r2, [r1, #6]
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
10005250:	8818      	ldrh	r0, [r3, #0]
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
10005252:	3a04      	subs	r2, #4
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
10005254:	4290      	cmp	r0, r2
10005256:	da0b      	bge.n	10005270 <optiga_cmd_calc_sign_handler+0xcc>
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
10005258:	4817      	ldr	r0, [pc, #92]	; (100052b8 <optiga_cmd_calc_sign_handler+0x114>)
1000525a:	1c32      	adds	r2, r6, #0
1000525c:	1c39      	adds	r1, r7, #0
1000525e:	f7ff fa6b 	bl	10004738 <optiga_lib_print_message>
                    *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
10005262:	466a      	mov	r2, sp
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10005264:	2081      	movs	r0, #129	; 0x81
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                    *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
10005266:	68ab      	ldr	r3, [r5, #8]
10005268:	8892      	ldrh	r2, [r2, #4]
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
1000526a:	0080      	lsls	r0, r0, #2
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                    *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
1000526c:	801a      	strh	r2, [r3, #0]
1000526e:	e018      	b.n	100052a2 <optiga_cmd_calc_sign_handler+0xfe>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                }
                else
                {
                    *(p_optiga_ecdsa_sign->p_signature_length) = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
10005270:	b292      	uxth	r2, r2
10005272:	801a      	strh	r2, [r3, #0]
                    //copy signed data from optiga comms buffer to user provided buffer

                    pal_os_memcpy(p_optiga_ecdsa_sign->p_signature,
10005274:	6868      	ldr	r0, [r5, #4]
10005276:	3116      	adds	r1, #22
10005278:	f007 fb97 	bl	1000c9aa <memcpy>
                                  me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                                  *(p_optiga_ecdsa_sign->p_signature_length));
                    OPTIGA_CMD_LOG_MESSAGE("Response of calculate sign command is processed...");
1000527c:	480f      	ldr	r0, [pc, #60]	; (100052bc <optiga_cmd_calc_sign_handler+0x118>)
1000527e:	1c39      	adds	r1, r7, #0
10005280:	1c32      	adds	r2, r6, #0
10005282:	f7ff fa59 	bl	10004738 <optiga_lib_print_message>
10005286:	e7d3      	b.n	10005230 <optiga_cmd_calc_sign_handler+0x8c>
                    return_status = OPTIGA_LIB_SUCCESS;
                }
            }
            else
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
10005288:	1c32      	adds	r2, r6, #0
1000528a:	480b      	ldr	r0, [pc, #44]	; (100052b8 <optiga_cmd_calc_sign_handler+0x114>)
1000528c:	1c39      	adds	r1, r7, #0
1000528e:	f7ff fa53 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005292:	237f      	movs	r3, #127	; 0x7f
10005294:	7f22      	ldrb	r2, [r4, #28]
10005296:	4013      	ands	r3, r2
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
10005298:	2200      	movs	r2, #0
                }
            }
            else
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
1000529a:	7723      	strb	r3, [r4, #28]
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
1000529c:	68ab      	ldr	r3, [r5, #8]
1000529e:	801a      	strh	r2, [r3, #0]
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
100052a0:	4807      	ldr	r0, [pc, #28]	; (100052c0 <optiga_cmd_calc_sign_handler+0x11c>)
        default:
            break;
    }

    return (return_status);
}
100052a2:	b005      	add	sp, #20
100052a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100052a6:	46c0      	nop			; (mov r8, r8)
100052a8:	1000d8aa 	.word	0x1000d8aa
100052ac:	1000d6cc 	.word	0x1000d6cc
100052b0:	1000d2dc 	.word	0x1000d2dc
100052b4:	1000d8cb 	.word	0x1000d8cb
100052b8:	1000d8fd 	.word	0x1000d8fd
100052bc:	1000d92c 	.word	0x1000d92c
100052c0:	00000202 	.word	0x00000202

100052c4 <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
100052c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
100052c6:	466b      	mov	r3, sp
100052c8:	1d9c      	adds	r4, r3, #6
100052ca:	2309      	movs	r3, #9
100052cc:	8023      	strh	r3, [r4, #0]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
100052ce:	7d83      	ldrb	r3, [r0, #22]
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
100052d0:	1c05      	adds	r5, r0, #0
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
100052d2:	6886      	ldr	r6, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
100052d4:	2b08      	cmp	r3, #8
100052d6:	d003      	beq.n	100052e0 <optiga_cmd_verify_sign_handler+0x1c>
100052d8:	2b09      	cmp	r3, #9
100052da:	d100      	bne.n	100052de <optiga_cmd_verify_sign_handler+0x1a>
100052dc:	e086      	b.n	100053ec <optiga_cmd_verify_sign_handler+0x128>
100052de:	e0a1      	b.n	10005424 <optiga_cmd_verify_sign_handler+0x160>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
100052e0:	4853      	ldr	r0, [pc, #332]	; (10005430 <optiga_cmd_verify_sign_handler+0x16c>)
100052e2:	4954      	ldr	r1, [pc, #336]	; (10005434 <optiga_cmd_verify_sign_handler+0x170>)
100052e4:	4a54      	ldr	r2, [pc, #336]	; (10005438 <optiga_cmd_verify_sign_handler+0x174>)
100052e6:	f7ff fa27 	bl	10004738 <optiga_lib_print_message>
100052ea:	89b2      	ldrh	r2, [r6, #12]
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + p_optiga_verify_sign->digest_length +
100052ec:	7bb0      	ldrb	r0, [r6, #14]
100052ee:	320a      	adds	r2, #10
100052f0:	7931      	ldrb	r1, [r6, #4]
100052f2:	b292      	uxth	r2, r2
100052f4:	2305      	movs	r3, #5
100052f6:	2800      	cmp	r0, #0
100052f8:	d003      	beq.n	10005302 <optiga_cmd_verify_sign_handler+0x3e>
100052fa:	6933      	ldr	r3, [r6, #16]
100052fc:	889b      	ldrh	r3, [r3, #4]
100052fe:	3309      	adds	r3, #9
10005300:	b29b      	uxth	r3, r3
10005302:	1852      	adds	r2, r2, r1
10005304:	189b      	adds	r3, r3, r2
                                    OPTIGA_CMD_APDU_TL_LENGTH + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
                                     (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_APDU_TL_LENGTH +
                                     p_optiga_verify_sign->public_key->length));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10005306:	4a4d      	ldr	r2, [pc, #308]	; (1000543c <optiga_cmd_verify_sign_handler+0x178>)
10005308:	b29b      	uxth	r3, r3
1000530a:	4293      	cmp	r3, r2
1000530c:	d900      	bls.n	10005310 <optiga_cmd_verify_sign_handler+0x4c>
1000530e:	e08b      	b.n	10005428 <optiga_cmd_verify_sign_handler+0x164>
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_DIGEST_TAG,
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
10005310:	682a      	ldr	r2, [r5, #0]
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_DIGEST_TAG,
10005312:	2001      	movs	r0, #1
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
10005314:	320d      	adds	r2, #13
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_DIGEST_TAG,
10005316:	1c23      	adds	r3, r4, #0
10005318:	f7ff fb32 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
1000531c:	682b      	ldr	r3, [r5, #0]
1000531e:	8820      	ldrh	r0, [r4, #0]
10005320:	7932      	ldrb	r2, [r6, #4]
10005322:	1818      	adds	r0, r3, r0
10005324:	6831      	ldr	r1, [r6, #0]
10005326:	300d      	adds	r0, #13
10005328:	f007 fb3f 	bl	1000c9aa <memcpy>
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
1000532c:	7932      	ldrb	r2, [r6, #4]
1000532e:	8823      	ldrh	r3, [r4, #0]

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_SIGNATURE_TAG,
10005330:	2002      	movs	r0, #2
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
10005332:	18d3      	adds	r3, r2, r3

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_SIGNATURE_TAG,
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
10005334:	682a      	ldr	r2, [r5, #0]
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
10005336:	8023      	strh	r3, [r4, #0]

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_SIGNATURE_TAG,
10005338:	89b1      	ldrh	r1, [r6, #12]
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
1000533a:	320d      	adds	r2, #13
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_SIGNATURE_TAG,
1000533c:	1c23      	adds	r3, r4, #0
1000533e:	f7ff fb1f 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005342:	682b      	ldr	r3, [r5, #0]
10005344:	8820      	ldrh	r0, [r4, #0]
10005346:	89b2      	ldrh	r2, [r6, #12]
10005348:	1818      	adds	r0, r3, r0
1000534a:	300d      	adds	r0, #13
1000534c:	68b1      	ldr	r1, [r6, #8]
1000534e:	f007 fb2c 	bl	1000c9aa <memcpy>
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;
10005352:	89b2      	ldrh	r2, [r6, #12]
10005354:	8823      	ldrh	r3, [r4, #0]
10005356:	18d3      	adds	r3, r2, r3
10005358:	8023      	strh	r3, [r4, #0]
1000535a:	682a      	ldr	r2, [r5, #0]

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
1000535c:	7bb3      	ldrb	r3, [r6, #14]
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
1000535e:	320d      	adds	r2, #13
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
10005360:	2b00      	cmp	r3, #0
10005362:	d10e      	bne.n	10005382 <optiga_cmd_verify_sign_handler+0xbe>
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
10005364:	2004      	movs	r0, #4
10005366:	2102      	movs	r1, #2
10005368:	1c23      	adds	r3, r4, #0
1000536a:	f7ff fb09 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
1000536e:	682b      	ldr	r3, [r5, #0]
10005370:	8820      	ldrh	r0, [r4, #0]
10005372:	8ab1      	ldrh	r1, [r6, #20]
10005374:	1818      	adds	r0, r3, r0
10005376:	300d      	adds	r0, #13
10005378:	f7ff f974 	bl	10004664 <optiga_common_set_uint16>
                                         p_optiga_verify_sign->certificate_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
1000537c:	8823      	ldrh	r3, [r4, #0]
1000537e:	3302      	adds	r3, #2
10005380:	e021      	b.n	100053c6 <optiga_cmd_verify_sign_handler+0x102>
            }
            else
            {
                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(CMD_VERIFY_ALGO_ID_TAG,
10005382:	2005      	movs	r0, #5
10005384:	2101      	movs	r1, #1
10005386:	1c23      	adds	r3, r4, #0
10005388:	f7ff fafa 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
1000538c:	8823      	ldrh	r3, [r4, #0]
1000538e:	6829      	ldr	r1, [r5, #0]
10005390:	1c5a      	adds	r2, r3, #1
10005392:	8022      	strh	r2, [r4, #0]
10005394:	6932      	ldr	r2, [r6, #16]
10005396:	18cb      	adds	r3, r1, r3
10005398:	7992      	ldrb	r2, [r2, #6]

                optiga_cmd_prepare_tag_header(CMD_VERIFY_PUBLIC_KEY_TAG,
1000539a:	2006      	movs	r0, #6
                optiga_cmd_prepare_tag_header(CMD_VERIFY_ALGO_ID_TAG,
                                              CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
1000539c:	735a      	strb	r2, [r3, #13]

                optiga_cmd_prepare_tag_header(CMD_VERIFY_PUBLIC_KEY_TAG,
1000539e:	6933      	ldr	r3, [r6, #16]
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
100053a0:	682a      	ldr	r2, [r5, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(CMD_VERIFY_PUBLIC_KEY_TAG,
100053a2:	8899      	ldrh	r1, [r3, #4]
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
100053a4:	320d      	adds	r2, #13
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(CMD_VERIFY_PUBLIC_KEY_TAG,
100053a6:	1c23      	adds	r3, r4, #0
100053a8:	f7ff faea 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
100053ac:	682a      	ldr	r2, [r5, #0]
100053ae:	8820      	ldrh	r0, [r4, #0]
100053b0:	6933      	ldr	r3, [r6, #16]
100053b2:	1810      	adds	r0, r2, r0
100053b4:	6819      	ldr	r1, [r3, #0]
100053b6:	889a      	ldrh	r2, [r3, #4]
100053b8:	300d      	adds	r0, #13
100053ba:	f007 faf6 	bl	1000c9aa <memcpy>
                              p_optiga_verify_sign->public_key->public_key,
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
100053be:	6933      	ldr	r3, [r6, #16]
100053c0:	889a      	ldrh	r2, [r3, #4]
100053c2:	8823      	ldrh	r3, [r4, #0]
100053c4:	18d3      	adds	r3, r2, r3
100053c6:	8023      	strh	r3, [r4, #0]
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
100053c8:	8823      	ldrh	r3, [r4, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100053ca:	24b2      	movs	r4, #178	; 0xb2
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
100053cc:	1c19      	adds	r1, r3, #0
100053ce:	7e28      	ldrb	r0, [r5, #24]
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
100053d0:	682a      	ldr	r2, [r5, #0]
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
100053d2:	3909      	subs	r1, #9
100053d4:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
100053d6:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
100053d8:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100053da:	7494      	strb	r4, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
100053dc:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
100053de:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
100053e0:	682a      	ldr	r2, [r5, #0]
100053e2:	3b05      	subs	r3, #5
100053e4:	8093      	strh	r3, [r2, #4]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
100053e6:	2309      	movs	r3, #9
100053e8:	75ab      	strb	r3, [r5, #22]
100053ea:	e019      	b.n	10005420 <optiga_cmd_verify_sign_handler+0x15c>
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for verify sign command...");
100053ec:	4e11      	ldr	r6, [pc, #68]	; (10005434 <optiga_cmd_verify_sign_handler+0x170>)
100053ee:	4c12      	ldr	r4, [pc, #72]	; (10005438 <optiga_cmd_verify_sign_handler+0x174>)
100053f0:	4813      	ldr	r0, [pc, #76]	; (10005440 <optiga_cmd_verify_sign_handler+0x17c>)
100053f2:	1c31      	adds	r1, r6, #0
100053f4:	1c22      	adds	r2, r4, #0
100053f6:	f7ff f99f 	bl	10004738 <optiga_lib_print_message>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
100053fa:	682b      	ldr	r3, [r5, #0]
100053fc:	7c9b      	ldrb	r3, [r3, #18]
100053fe:	2bff      	cmp	r3, #255	; 0xff
10005400:	d109      	bne.n	10005416 <optiga_cmd_verify_sign_handler+0x152>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
10005402:	1c22      	adds	r2, r4, #0
10005404:	480f      	ldr	r0, [pc, #60]	; (10005444 <optiga_cmd_verify_sign_handler+0x180>)
10005406:	1c31      	adds	r1, r6, #0
10005408:	f7ff f996 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
1000540c:	237f      	movs	r3, #127	; 0x7f
1000540e:	7f2a      	ldrb	r2, [r5, #28]
10005410:	4013      	ands	r3, r2
10005412:	772b      	strb	r3, [r5, #28]
10005414:	e006      	b.n	10005424 <optiga_cmd_verify_sign_handler+0x160>
                break;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
10005416:	480c      	ldr	r0, [pc, #48]	; (10005448 <optiga_cmd_verify_sign_handler+0x184>)
10005418:	1c31      	adds	r1, r6, #0
1000541a:	1c22      	adds	r2, r4, #0
1000541c:	f7ff f98c 	bl	10004738 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
10005420:	2000      	movs	r0, #0
        }
        break;
10005422:	e003      	b.n	1000542c <optiga_cmd_verify_sign_handler+0x168>
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005424:	4809      	ldr	r0, [pc, #36]	; (1000544c <optiga_cmd_verify_sign_handler+0x188>)
10005426:	e001      	b.n	1000542c <optiga_cmd_verify_sign_handler+0x168>
                                     (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_APDU_TL_LENGTH +
                                     p_optiga_verify_sign->public_key->length));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10005428:	2081      	movs	r0, #129	; 0x81
1000542a:	0080      	lsls	r0, r0, #2
        default:
            break;
    }

    return (return_status);
}
1000542c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000542e:	46c0      	nop			; (mov r8, r8)
10005430:	1000d95f 	.word	0x1000d95f
10005434:	1000d6cc 	.word	0x1000d6cc
10005438:	1000d2dc 	.word	0x1000d2dc
1000543c:	00000615 	.word	0x00000615
10005440:	1000d97d 	.word	0x1000d97d
10005444:	1000d9ac 	.word	0x1000d9ac
10005448:	1000d9d8 	.word	0x1000d9d8
1000544c:	00000202 	.word	0x00000202

10005450 <optiga_cmd_calc_ssec_handler>:
#ifdef OPTIGA_CRYPT_ECDH_ENABLED
/*
* CalcSSec handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_ssec_handler(optiga_cmd_t * me)
{
10005450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    optiga_calc_ssec_params_t * p_optiga_ecdh = (optiga_calc_ssec_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005452:	466b      	mov	r3, sp
10005454:	1d9e      	adds	r6, r3, #6
10005456:	2309      	movs	r3, #9
10005458:	8033      	strh	r3, [r6, #0]
    uint16_t private_key_oid;
    
    switch ((uint8_t)me->cmd_next_execution_state)
1000545a:	7d83      	ldrb	r3, [r0, #22]
#ifdef OPTIGA_CRYPT_ECDH_ENABLED
/*
* CalcSSec handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_ssec_handler(optiga_cmd_t * me)
{
1000545c:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    optiga_calc_ssec_params_t * p_optiga_ecdh = (optiga_calc_ssec_params_t *)me->p_input;
1000545e:	6885      	ldr	r5, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t private_key_oid;
    
    switch ((uint8_t)me->cmd_next_execution_state)
10005460:	2b08      	cmp	r3, #8
10005462:	d003      	beq.n	1000546c <optiga_cmd_calc_ssec_handler+0x1c>
10005464:	2b09      	cmp	r3, #9
10005466:	d100      	bne.n	1000546a <optiga_cmd_calc_ssec_handler+0x1a>
10005468:	e076      	b.n	10005558 <optiga_cmd_calc_ssec_handler+0x108>
1000546a:	e09a      	b.n	100055a2 <optiga_cmd_calc_ssec_handler+0x152>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate shared secret command..");
1000546c:	494f      	ldr	r1, [pc, #316]	; (100055ac <optiga_cmd_calc_ssec_handler+0x15c>)
1000546e:	4a50      	ldr	r2, [pc, #320]	; (100055b0 <optiga_cmd_calc_ssec_handler+0x160>)
10005470:	4850      	ldr	r0, [pc, #320]	; (100055b4 <optiga_cmd_calc_ssec_handler+0x164>)
10005472:	f7ff f961 	bl	10004738 <optiga_lib_print_message>
            // APDU header length + TLV of private key + TLV of algo id + TLV of public key
            // If shared secret option to export (TLV of export shared secret)
            // If shared secret store in OID (TLV of shared secret OID)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                    OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_APDU_TL_LENGTH +
                                    p_optiga_ecdh->public_key->length +
10005476:	682b      	ldr	r3, [r5, #0]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate shared secret command..");
            // APDU header length + TLV of private key + TLV of algo id + TLV of public key
            // If shared secret option to export (TLV of export shared secret)
            // If shared secret store in OID (TLV of shared secret OID)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
10005478:	7aa9      	ldrb	r1, [r5, #10]
                                    OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_APDU_TL_LENGTH +
                                    p_optiga_ecdh->public_key->length +
1000547a:	889b      	ldrh	r3, [r3, #4]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate shared secret command..");
            // APDU header length + TLV of private key + TLV of algo id + TLV of public key
            // If shared secret option to export (TLV of export shared secret)
            // If shared secret store in OID (TLV of shared secret OID)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
1000547c:	2203      	movs	r2, #3
1000547e:	2901      	cmp	r1, #1
10005480:	d000      	beq.n	10005484 <optiga_cmd_calc_ssec_handler+0x34>
10005482:	3202      	adds	r2, #2
10005484:	3310      	adds	r3, #16
10005486:	18d3      	adds	r3, r2, r3
                                    OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_APDU_TL_LENGTH +
                                    p_optiga_ecdh->public_key->length +
                                    (TRUE == p_optiga_ecdh->export_to_host?(OPTIGA_CMD_APDU_TL_LENGTH):
                                    (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10005488:	4a4b      	ldr	r2, [pc, #300]	; (100055b8 <optiga_cmd_calc_ssec_handler+0x168>)
1000548a:	b29b      	uxth	r3, r3
1000548c:	4293      	cmp	r3, r2
1000548e:	d900      	bls.n	10005492 <optiga_cmd_calc_ssec_handler+0x42>
10005490:	e089      	b.n	100055a6 <optiga_cmd_calc_ssec_handler+0x156>
                break;
            }
            // Tag and length for private key OID
            optiga_cmd_prepare_tag_header(CMD_SSEC_PRIVATE_KEY_TAG,
                                          CMD_SSEC_PRIVATE_KEY_LEN,
                                          me->p_optiga->optiga_comms_buffer,
10005492:	6822      	ldr	r2, [r4, #0]
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            // Tag and length for private key OID
            optiga_cmd_prepare_tag_header(CMD_SSEC_PRIVATE_KEY_TAG,
10005494:	2102      	movs	r1, #2
                                          CMD_SSEC_PRIVATE_KEY_LEN,
                                          me->p_optiga->optiga_comms_buffer,
10005496:	320d      	adds	r2, #13
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            // Tag and length for private key OID
            optiga_cmd_prepare_tag_header(CMD_SSEC_PRIVATE_KEY_TAG,
10005498:	2001      	movs	r0, #1
1000549a:	1c33      	adds	r3, r6, #0
1000549c:	f7ff fa70 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          CMD_SSEC_PRIVATE_KEY_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            private_key_oid = (uint16_t)p_optiga_ecdh->private_key;
100054a0:	8929      	ldrh	r1, [r5, #8]
            if (OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdh->private_key)
100054a2:	2900      	cmp	r1, #0
100054a4:	d100      	bne.n	100054a8 <optiga_cmd_calc_ssec_handler+0x58>
            {
                private_key_oid = me->session_oid;
100054a6:	8aa1      	ldrh	r1, [r4, #20]
            }

            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data], private_key_oid);
100054a8:	6823      	ldr	r3, [r4, #0]
100054aa:	8830      	ldrh	r0, [r6, #0]
100054ac:	1818      	adds	r0, r3, r0
100054ae:	300d      	adds	r0, #13
100054b0:	f7ff f8d8 	bl	10004664 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100054b4:	8833      	ldrh	r3, [r6, #0]

            // Tag and length for algorithm ID
            optiga_cmd_prepare_tag_header(CMD_SSEC_ALG_ID_TAG,
                                          CMD_SSEC_ALG_ID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
100054b6:	6822      	ldr	r2, [r4, #0]
            {
                private_key_oid = me->session_oid;
            }

            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data], private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100054b8:	3302      	adds	r3, #2
100054ba:	8033      	strh	r3, [r6, #0]

            // Tag and length for algorithm ID
            optiga_cmd_prepare_tag_header(CMD_SSEC_ALG_ID_TAG,
                                          CMD_SSEC_ALG_ID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
100054bc:	320d      	adds	r2, #13

            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data], private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // Tag and length for algorithm ID
            optiga_cmd_prepare_tag_header(CMD_SSEC_ALG_ID_TAG,
100054be:	2005      	movs	r0, #5
100054c0:	2101      	movs	r1, #1
100054c2:	1c33      	adds	r3, r6, #0
100054c4:	f7ff fa5c 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          CMD_SSEC_ALG_ID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            me->p_optiga->optiga_comms_buffer[index_for_data++] = (uint8_t)p_optiga_ecdh->public_key->key_type;
100054c8:	8833      	ldrh	r3, [r6, #0]
100054ca:	6821      	ldr	r1, [r4, #0]
100054cc:	1c5a      	adds	r2, r3, #1
100054ce:	8032      	strh	r2, [r6, #0]
100054d0:	682a      	ldr	r2, [r5, #0]
100054d2:	18cb      	adds	r3, r1, r3
100054d4:	7992      	ldrb	r2, [r2, #6]

            // Tag and length for public key
            optiga_cmd_prepare_tag_header(CMD_SSEC_PUB_KEY_TAG,
100054d6:	2006      	movs	r0, #6
            optiga_cmd_prepare_tag_header(CMD_SSEC_ALG_ID_TAG,
                                          CMD_SSEC_ALG_ID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            me->p_optiga->optiga_comms_buffer[index_for_data++] = (uint8_t)p_optiga_ecdh->public_key->key_type;
100054d8:	735a      	strb	r2, [r3, #13]

            // Tag and length for public key
            optiga_cmd_prepare_tag_header(CMD_SSEC_PUB_KEY_TAG,
100054da:	682b      	ldr	r3, [r5, #0]
                                          p_optiga_ecdh->public_key->length,
                                          me->p_optiga->optiga_comms_buffer,
100054dc:	6822      	ldr	r2, [r4, #0]
                                          &index_for_data);

            me->p_optiga->optiga_comms_buffer[index_for_data++] = (uint8_t)p_optiga_ecdh->public_key->key_type;

            // Tag and length for public key
            optiga_cmd_prepare_tag_header(CMD_SSEC_PUB_KEY_TAG,
100054de:	8899      	ldrh	r1, [r3, #4]
                                          p_optiga_ecdh->public_key->length,
                                          me->p_optiga->optiga_comms_buffer,
100054e0:	320d      	adds	r2, #13
                                          &index_for_data);

            me->p_optiga->optiga_comms_buffer[index_for_data++] = (uint8_t)p_optiga_ecdh->public_key->key_type;

            // Tag and length for public key
            optiga_cmd_prepare_tag_header(CMD_SSEC_PUB_KEY_TAG,
100054e2:	1c33      	adds	r3, r6, #0
100054e4:	f7ff fa4c 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          p_optiga_ecdh->public_key->length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            //Copy the public key to APDU
            pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[index_for_data],
100054e8:	6822      	ldr	r2, [r4, #0]
100054ea:	8830      	ldrh	r0, [r6, #0]
100054ec:	682b      	ldr	r3, [r5, #0]
100054ee:	1810      	adds	r0, r2, r0
100054f0:	6819      	ldr	r1, [r3, #0]
100054f2:	889a      	ldrh	r2, [r3, #4]
100054f4:	300d      	adds	r0, #13
100054f6:	f007 fa58 	bl	1000c9aa <memcpy>
                          p_optiga_ecdh->public_key->public_key,
                          p_optiga_ecdh->public_key->length);

            index_for_data += p_optiga_ecdh->public_key->length;
100054fa:	682b      	ldr	r3, [r5, #0]
100054fc:	889a      	ldrh	r2, [r3, #4]
100054fe:	8833      	ldrh	r3, [r6, #0]
10005500:	18d3      	adds	r3, r2, r3
10005502:	8033      	strh	r3, [r6, #0]
10005504:	6822      	ldr	r2, [r4, #0]

            // check if shared secret needs to be exported or stored
            if (FALSE == p_optiga_ecdh->export_to_host)
10005506:	7aab      	ldrb	r3, [r5, #10]
            {
                // Tag and length for storing shared secret in session OID
                optiga_cmd_prepare_tag_header(CMD_SSEC_STORE_SESSION_TAG,
                                              CMD_SSEC_STORE_SESSION_LEN,
                                              me->p_optiga->optiga_comms_buffer,
10005508:	320d      	adds	r2, #13
                          p_optiga_ecdh->public_key->length);

            index_for_data += p_optiga_ecdh->public_key->length;

            // check if shared secret needs to be exported or stored
            if (FALSE == p_optiga_ecdh->export_to_host)
1000550a:	2b00      	cmp	r3, #0
1000550c:	d10f      	bne.n	1000552e <optiga_cmd_calc_ssec_handler+0xde>
            {
                // Tag and length for storing shared secret in session OID
                optiga_cmd_prepare_tag_header(CMD_SSEC_STORE_SESSION_TAG,
1000550e:	2008      	movs	r0, #8
10005510:	2102      	movs	r1, #2
10005512:	1c33      	adds	r3, r6, #0
10005514:	f7ff fa34 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              CMD_SSEC_STORE_SESSION_LEN,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
                // store session secret oid
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data], me->session_oid);
10005518:	6823      	ldr	r3, [r4, #0]
1000551a:	8830      	ldrh	r0, [r6, #0]
1000551c:	8aa1      	ldrh	r1, [r4, #20]
1000551e:	1818      	adds	r0, r3, r0
10005520:	300d      	adds	r0, #13
10005522:	f7ff f89f 	bl	10004664 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005526:	8833      	ldrh	r3, [r6, #0]
10005528:	3302      	adds	r3, #2
1000552a:	8033      	strh	r3, [r6, #0]
1000552c:	e004      	b.n	10005538 <optiga_cmd_calc_ssec_handler+0xe8>
            }
            else
            {
                // Tag and length for exporting shared secret
                optiga_cmd_prepare_tag_header(CMD_SSEC_EXPORT_TAG,
1000552e:	2007      	movs	r0, #7
10005530:	2100      	movs	r1, #0
10005532:	1c33      	adds	r3, r6, #0
10005534:	f7ff fa24 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SSEC,
10005538:	8833      	ldrh	r3, [r6, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000553a:	25b3      	movs	r5, #179	; 0xb3
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SSEC,
1000553c:	1c19      	adds	r1, r3, #0
1000553e:	7e20      	ldrb	r0, [r4, #24]
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005540:	6822      	ldr	r2, [r4, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SSEC,
10005542:	3909      	subs	r1, #9
10005544:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10005546:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005548:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000554a:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
1000554c:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
1000554e:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SSEC,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10005550:	6822      	ldr	r2, [r4, #0]
10005552:	3b05      	subs	r3, #5
10005554:	8093      	strh	r3, [r2, #4]
10005556:	e022      	b.n	1000559e <optiga_cmd_calc_ssec_handler+0x14e>
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate shared secret command...");
10005558:	4f14      	ldr	r7, [pc, #80]	; (100055ac <optiga_cmd_calc_ssec_handler+0x15c>)
1000555a:	4e15      	ldr	r6, [pc, #84]	; (100055b0 <optiga_cmd_calc_ssec_handler+0x160>)
1000555c:	1c39      	adds	r1, r7, #0
1000555e:	4817      	ldr	r0, [pc, #92]	; (100055bc <optiga_cmd_calc_ssec_handler+0x16c>)
10005560:	1c32      	adds	r2, r6, #0
10005562:	f7ff f8e9 	bl	10004738 <optiga_lib_print_message>
            // check if the shared secret transceive was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10005566:	6821      	ldr	r1, [r4, #0]
10005568:	7c8b      	ldrb	r3, [r1, #18]
1000556a:	2b00      	cmp	r3, #0
1000556c:	d009      	beq.n	10005582 <optiga_cmd_calc_ssec_handler+0x132>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate shared secret response...");
1000556e:	1c32      	adds	r2, r6, #0
10005570:	4813      	ldr	r0, [pc, #76]	; (100055c0 <optiga_cmd_calc_ssec_handler+0x170>)
10005572:	1c39      	adds	r1, r7, #0
10005574:	f7ff f8e0 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005578:	237f      	movs	r3, #127	; 0x7f
1000557a:	7f22      	ldrb	r2, [r4, #28]
1000557c:	4013      	ands	r3, r2
1000557e:	7723      	strb	r3, [r4, #28]
10005580:	e00f      	b.n	100055a2 <optiga_cmd_calc_ssec_handler+0x152>
                break;
            }
            if (FALSE != p_optiga_ecdh->export_to_host)
10005582:	7aab      	ldrb	r3, [r5, #10]
10005584:	2b00      	cmp	r3, #0
10005586:	d005      	beq.n	10005594 <optiga_cmd_calc_ssec_handler+0x144>
            {
                //copy shared secret from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_ecdh->shared_secret,
10005588:	88ca      	ldrh	r2, [r1, #6]
1000558a:	6868      	ldr	r0, [r5, #4]
1000558c:	3a04      	subs	r2, #4
1000558e:	3116      	adds	r1, #22
10005590:	f007 fa0b 	bl	1000c9aa <memcpy>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE));
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate shared secret command is processed...");
10005594:	480b      	ldr	r0, [pc, #44]	; (100055c4 <optiga_cmd_calc_ssec_handler+0x174>)
10005596:	4905      	ldr	r1, [pc, #20]	; (100055ac <optiga_cmd_calc_ssec_handler+0x15c>)
10005598:	4a05      	ldr	r2, [pc, #20]	; (100055b0 <optiga_cmd_calc_ssec_handler+0x160>)
1000559a:	f7ff f8cd 	bl	10004738 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
1000559e:	2000      	movs	r0, #0
        }
        break;
100055a0:	e003      	b.n	100055aa <optiga_cmd_calc_ssec_handler+0x15a>
* CalcSSec handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_ssec_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
100055a2:	4809      	ldr	r0, [pc, #36]	; (100055c8 <optiga_cmd_calc_ssec_handler+0x178>)
100055a4:	e001      	b.n	100055aa <optiga_cmd_calc_ssec_handler+0x15a>
                                    p_optiga_ecdh->public_key->length +
                                    (TRUE == p_optiga_ecdh->export_to_host?(OPTIGA_CMD_APDU_TL_LENGTH):
                                    (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
100055a6:	2081      	movs	r0, #129	; 0x81
100055a8:	0080      	lsls	r0, r0, #2
        default:
            break;
    }

    return (return_status);
}
100055aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100055ac:	1000d6cc 	.word	0x1000d6cc
100055b0:	1000d2dc 	.word	0x1000d2dc
100055b4:	1000da07 	.word	0x1000da07
100055b8:	00000615 	.word	0x00000615
100055bc:	1000da31 	.word	0x1000da31
100055c0:	1000da6c 	.word	0x1000da6c
100055c4:	1000daa4 	.word	0x1000daa4
100055c8:	00000202 	.word	0x00000202

100055cc <optiga_cmd_derive_key_handler>:
#ifdef OPTIGA_CRYPT_TLS_PRF_SHA256_ENABLED
/*
* DeriveKey
*/
_STATIC_H optiga_lib_status_t optiga_cmd_derive_key_handler(optiga_cmd_t * me)
{
100055cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100055ce:	b085      	sub	sp, #20
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
100055d0:	ab02      	add	r3, sp, #8
100055d2:	1d9e      	adds	r6, r3, #6
100055d4:	2309      	movs	r3, #9
100055d6:	8033      	strh	r3, [r6, #0]
    optiga_derive_key_params_t * p_optiga_tls_prf_sha256 = (optiga_derive_key_params_t *)me->p_input;
    uint16_t actual_secret_length = 0;
    uint16_t derive_key_length_sent;
    uint16_t secret_oid;

    switch ((uint8_t)me->cmd_next_execution_state)
100055d8:	7d83      	ldrb	r3, [r0, #22]
#ifdef OPTIGA_CRYPT_TLS_PRF_SHA256_ENABLED
/*
* DeriveKey
*/
_STATIC_H optiga_lib_status_t optiga_cmd_derive_key_handler(optiga_cmd_t * me)
{
100055da:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_derive_key_params_t * p_optiga_tls_prf_sha256 = (optiga_derive_key_params_t *)me->p_input;
100055dc:	6885      	ldr	r5, [r0, #8]
    uint16_t actual_secret_length = 0;
    uint16_t derive_key_length_sent;
    uint16_t secret_oid;

    switch ((uint8_t)me->cmd_next_execution_state)
100055de:	2b08      	cmp	r3, #8
100055e0:	d003      	beq.n	100055ea <optiga_cmd_derive_key_handler+0x1e>
100055e2:	2b09      	cmp	r3, #9
100055e4:	d100      	bne.n	100055e8 <optiga_cmd_derive_key_handler+0x1c>
100055e6:	e0a2      	b.n	1000572e <optiga_cmd_derive_key_handler+0x162>
100055e8:	e0c5      	b.n	10005776 <optiga_cmd_derive_key_handler+0x1aa>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending derive key command..");
100055ea:	4a66      	ldr	r2, [pc, #408]	; (10005784 <optiga_cmd_derive_key_handler+0x1b8>)
100055ec:	4866      	ldr	r0, [pc, #408]	; (10005788 <optiga_cmd_derive_key_handler+0x1bc>)
100055ee:	4967      	ldr	r1, [pc, #412]	; (1000578c <optiga_cmd_derive_key_handler+0x1c0>)
100055f0:	f7ff f8a2 	bl	10004738 <optiga_lib_print_message>
            // APDU header length + TLV of OID shared secret + TLV of secret derivation data +
            // TLV of length of the key to be derived
            // If derive key option to export (TLV of export derive key)
            // If derive key store in OID (TLV of derive key OID)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
100055f4:	692a      	ldr	r2, [r5, #16]
100055f6:	2314      	movs	r3, #20
100055f8:	2a00      	cmp	r2, #0
100055fa:	d100      	bne.n	100055fe <optiga_cmd_derive_key_handler+0x32>
100055fc:	3302      	adds	r3, #2
                                    OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                    (NULL != p_optiga_tls_prf_sha256->derived_key?(OPTIGA_CMD_APDU_TL_LENGTH):
                                    (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES));
            if ((NULL != p_optiga_tls_prf_sha256->label) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->label_length))
100055fe:	68ea      	ldr	r2, [r5, #12]
10005600:	2a00      	cmp	r2, #0
10005602:	d004      	beq.n	1000560e <optiga_cmd_derive_key_handler+0x42>
10005604:	886a      	ldrh	r2, [r5, #2]
10005606:	2a00      	cmp	r2, #0
10005608:	d001      	beq.n	1000560e <optiga_cmd_derive_key_handler+0x42>
            {
                total_apdu_length += p_optiga_tls_prf_sha256->label_length;
1000560a:	189b      	adds	r3, r3, r2
1000560c:	b29b      	uxth	r3, r3
            }
            //copy seed(secret) if not NULL
            if ((NULL != p_optiga_tls_prf_sha256->seed) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->seed_length))
1000560e:	68aa      	ldr	r2, [r5, #8]
10005610:	2a00      	cmp	r2, #0
10005612:	d004      	beq.n	1000561e <optiga_cmd_derive_key_handler+0x52>
10005614:	88aa      	ldrh	r2, [r5, #4]
10005616:	2a00      	cmp	r2, #0
10005618:	d001      	beq.n	1000561e <optiga_cmd_derive_key_handler+0x52>
            {
                total_apdu_length += p_optiga_tls_prf_sha256->seed_length;
1000561a:	189b      	adds	r3, r3, r2
1000561c:	b29b      	uxth	r3, r3
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
1000561e:	4a5c      	ldr	r2, [pc, #368]	; (10005790 <optiga_cmd_derive_key_handler+0x1c4>)
10005620:	4293      	cmp	r3, r2
10005622:	d900      	bls.n	10005626 <optiga_cmd_derive_key_handler+0x5a>
10005624:	e0a9      	b.n	1000577a <optiga_cmd_derive_key_handler+0x1ae>
            }

            // OID of shared secret to derive new secret from
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_SEC_OID_TAG,
                                          CMD_DERIVE_KEY_SEC_OID_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
10005626:	6822      	ldr	r2, [r4, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // OID of shared secret to derive new secret from
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_SEC_OID_TAG,
10005628:	2102      	movs	r1, #2
                                          CMD_DERIVE_KEY_SEC_OID_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
1000562a:	320d      	adds	r2, #13
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // OID of shared secret to derive new secret from
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_SEC_OID_TAG,
1000562c:	2001      	movs	r0, #1
1000562e:	1c33      	adds	r3, r6, #0
10005630:	f7ff f9a6 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          CMD_DERIVE_KEY_SEC_OID_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            secret_oid = (p_optiga_tls_prf_sha256->input_shared_secret_oid == 0x00) ?
10005634:	8829      	ldrh	r1, [r5, #0]
10005636:	2900      	cmp	r1, #0
10005638:	d100      	bne.n	1000563c <optiga_cmd_derive_key_handler+0x70>
1000563a:	8aa1      	ldrh	r1, [r4, #20]
                          me->session_oid : p_optiga_tls_prf_sha256->input_shared_secret_oid;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), secret_oid);
1000563c:	6823      	ldr	r3, [r4, #0]
1000563e:	8830      	ldrh	r0, [r6, #0]
10005640:	1818      	adds	r0, r3, r0
10005642:	300d      	adds	r0, #13
10005644:	f7ff f80e 	bl	10004664 <optiga_common_set_uint16>
            index_for_data += 2;
10005648:	8833      	ldrh	r3, [r6, #0]

            // Length of key to be derived
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_KEY_LEN_TAG,
                                          CMD_DERIVE_KEY_KEY_LEN_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
1000564a:	6822      	ldr	r2, [r4, #0]
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            secret_oid = (p_optiga_tls_prf_sha256->input_shared_secret_oid == 0x00) ?
                          me->session_oid : p_optiga_tls_prf_sha256->input_shared_secret_oid;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), secret_oid);
            index_for_data += 2;
1000564c:	3302      	adds	r3, #2
1000564e:	8033      	strh	r3, [r6, #0]

            // Length of key to be derived
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_KEY_LEN_TAG,
10005650:	2102      	movs	r1, #2
10005652:	1c33      	adds	r3, r6, #0
                                          CMD_DERIVE_KEY_KEY_LEN_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
10005654:	320d      	adds	r2, #13
                          me->session_oid : p_optiga_tls_prf_sha256->input_shared_secret_oid;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), secret_oid);
            index_for_data += 2;

            // Length of key to be derived
            optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_KEY_LEN_TAG,
10005656:	2003      	movs	r0, #3
10005658:	f7ff f992 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          CMD_DERIVE_KEY_KEY_LEN_TAG_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            derive_key_length_sent = p_optiga_tls_prf_sha256->derived_key_length;
1000565c:	88e9      	ldrh	r1, [r5, #6]
            if ((derive_key_length_sent > OPTIGA_CMD_ZERO_LENGTH_OR_VALUE) &&
1000565e:	1e4b      	subs	r3, r1, #1
10005660:	2b0e      	cmp	r3, #14
10005662:	d800      	bhi.n	10005666 <optiga_cmd_derive_key_handler+0x9a>
                (derive_key_length_sent < CMD_DERIVE_KEY_DERIVE_KEY_LEN_MIN))
            {
                derive_key_length_sent = CMD_DERIVE_KEY_DERIVE_KEY_LEN_MIN;
10005664:	2110      	movs	r1, #16
            }
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), derive_key_length_sent);
10005666:	6823      	ldr	r3, [r4, #0]
10005668:	8830      	ldrh	r0, [r6, #0]
1000566a:	1818      	adds	r0, r3, r0
1000566c:	300d      	adds	r0, #13
1000566e:	f7fe fff9 	bl	10004664 <optiga_common_set_uint16>
            index_for_data += 2;
10005672:	8830      	ldrh	r0, [r6, #0]

            //copy label(secret) if present
            *(me->p_optiga->optiga_comms_buffer + index_for_data++) = CMD_DERIVE_KEY_DERIVATION_DATA_TAG;
10005674:	6822      	ldr	r2, [r4, #0]
                (derive_key_length_sent < CMD_DERIVE_KEY_DERIVE_KEY_LEN_MIN))
            {
                derive_key_length_sent = CMD_DERIVE_KEY_DERIVE_KEY_LEN_MIN;
            }
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), derive_key_length_sent);
            index_for_data += 2;
10005676:	1c83      	adds	r3, r0, #2

            //copy label(secret) if present
            *(me->p_optiga->optiga_comms_buffer + index_for_data++) = CMD_DERIVE_KEY_DERIVATION_DATA_TAG;
10005678:	b29b      	uxth	r3, r3
1000567a:	18d3      	adds	r3, r2, r3
1000567c:	2202      	movs	r2, #2
1000567e:	735a      	strb	r2, [r3, #13]
            index_for_data += 2;
10005680:	3005      	adds	r0, #5

            if ((NULL != p_optiga_tls_prf_sha256->label) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->label_length))
10005682:	68e9      	ldr	r1, [r5, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), derive_key_length_sent);
            index_for_data += 2;

            //copy label(secret) if present
            *(me->p_optiga->optiga_comms_buffer + index_for_data++) = CMD_DERIVE_KEY_DERIVATION_DATA_TAG;
            index_for_data += 2;
10005684:	b280      	uxth	r0, r0
10005686:	8030      	strh	r0, [r6, #0]
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_derive_key_params_t * p_optiga_tls_prf_sha256 = (optiga_derive_key_params_t *)me->p_input;
    uint16_t actual_secret_length = 0;
10005688:	1e0f      	subs	r7, r1, #0

            //copy label(secret) if present
            *(me->p_optiga->optiga_comms_buffer + index_for_data++) = CMD_DERIVE_KEY_DERIVATION_DATA_TAG;
            index_for_data += 2;

            if ((NULL != p_optiga_tls_prf_sha256->label) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->label_length))
1000568a:	d009      	beq.n	100056a0 <optiga_cmd_derive_key_handler+0xd4>
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_derive_key_params_t * p_optiga_tls_prf_sha256 = (optiga_derive_key_params_t *)me->p_input;
    uint16_t actual_secret_length = 0;
1000568c:	2700      	movs	r7, #0

            //copy label(secret) if present
            *(me->p_optiga->optiga_comms_buffer + index_for_data++) = CMD_DERIVE_KEY_DERIVATION_DATA_TAG;
            index_for_data += 2;

            if ((NULL != p_optiga_tls_prf_sha256->label) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->label_length))
1000568e:	886a      	ldrh	r2, [r5, #2]
10005690:	42ba      	cmp	r2, r7
10005692:	d005      	beq.n	100056a0 <optiga_cmd_derive_key_handler+0xd4>
            {
                // pre increase index
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005694:	6823      	ldr	r3, [r4, #0]
10005696:	1818      	adds	r0, r3, r0
10005698:	300d      	adds	r0, #13
1000569a:	f007 f986 	bl	1000c9aa <memcpy>
                              p_optiga_tls_prf_sha256->label,
                              p_optiga_tls_prf_sha256->label_length);

                actual_secret_length = p_optiga_tls_prf_sha256->label_length;
1000569e:	886f      	ldrh	r7, [r5, #2]
            }
            //copy seed(secret) if not NULL
            if ((NULL != p_optiga_tls_prf_sha256->seed) && (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_tls_prf_sha256->seed_length))
100056a0:	68a9      	ldr	r1, [r5, #8]
100056a2:	2900      	cmp	r1, #0
100056a4:	d00c      	beq.n	100056c0 <optiga_cmd_derive_key_handler+0xf4>
100056a6:	88aa      	ldrh	r2, [r5, #4]
100056a8:	2a00      	cmp	r2, #0
100056aa:	d009      	beq.n	100056c0 <optiga_cmd_derive_key_handler+0xf4>
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data+actual_secret_length,
100056ac:	8830      	ldrh	r0, [r6, #0]
100056ae:	6823      	ldr	r3, [r4, #0]
100056b0:	1838      	adds	r0, r7, r0
100056b2:	1818      	adds	r0, r3, r0
100056b4:	300d      	adds	r0, #13
100056b6:	f007 f978 	bl	1000c9aa <memcpy>
                              p_optiga_tls_prf_sha256->seed,
                              p_optiga_tls_prf_sha256->seed_length);

                actual_secret_length += p_optiga_tls_prf_sha256->seed_length;
100056ba:	88ab      	ldrh	r3, [r5, #4]
100056bc:	18ff      	adds	r7, r7, r3
100056be:	b2bf      	uxth	r7, r7
            }

            //Add secret length
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data - 2), (actual_secret_length));
100056c0:	6823      	ldr	r3, [r4, #0]
100056c2:	8830      	ldrh	r0, [r6, #0]
100056c4:	1c39      	adds	r1, r7, #0
100056c6:	1818      	adds	r0, r3, r0
100056c8:	300b      	adds	r0, #11
100056ca:	f7fe ffcb 	bl	10004664 <optiga_common_set_uint16>
            index_for_data += actual_secret_length;
100056ce:	8833      	ldrh	r3, [r6, #0]
100056d0:	6822      	ldr	r2, [r4, #0]
100056d2:	18ff      	adds	r7, r7, r3

            // Alternate output options
            if (NULL == p_optiga_tls_prf_sha256->derived_key)
100056d4:	692b      	ldr	r3, [r5, #16]
                actual_secret_length += p_optiga_tls_prf_sha256->seed_length;
            }

            //Add secret length
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data - 2), (actual_secret_length));
            index_for_data += actual_secret_length;
100056d6:	8037      	strh	r7, [r6, #0]
            if (NULL == p_optiga_tls_prf_sha256->derived_key)
            {
                //store internal
                optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_STORE_TAG,
                                              CMD_DERIVE_KEY_STORE_TAG_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
100056d8:	320d      	adds	r2, #13
            //Add secret length
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data - 2), (actual_secret_length));
            index_for_data += actual_secret_length;

            // Alternate output options
            if (NULL == p_optiga_tls_prf_sha256->derived_key)
100056da:	2b00      	cmp	r3, #0
100056dc:	d10f      	bne.n	100056fe <optiga_cmd_derive_key_handler+0x132>
            {
                //store internal
                optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_STORE_TAG,
100056de:	2008      	movs	r0, #8
100056e0:	2102      	movs	r1, #2
100056e2:	1c33      	adds	r3, r6, #0
100056e4:	f7ff f94c 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              CMD_DERIVE_KEY_STORE_TAG_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), (me->session_oid));
100056e8:	6823      	ldr	r3, [r4, #0]
100056ea:	8830      	ldrh	r0, [r6, #0]
100056ec:	8aa1      	ldrh	r1, [r4, #20]
100056ee:	1818      	adds	r0, r3, r0
100056f0:	300d      	adds	r0, #13
100056f2:	f7fe ffb7 	bl	10004664 <optiga_common_set_uint16>
                index_for_data += 2;
100056f6:	8833      	ldrh	r3, [r6, #0]
100056f8:	3302      	adds	r3, #2
100056fa:	8033      	strh	r3, [r6, #0]
100056fc:	e004      	b.n	10005708 <optiga_cmd_derive_key_handler+0x13c>
            }
            else
            {
                //export
                optiga_cmd_prepare_tag_header(CMD_DERIVE_KEY_EXPORT_TAG,
100056fe:	2007      	movs	r0, #7
10005700:	2100      	movs	r1, #0
10005702:	1c33      	adds	r3, r6, #0
10005704:	f7ff f93c 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DERIVE_KEY,
10005708:	8833      	ldrh	r3, [r6, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000570a:	25b4      	movs	r5, #180	; 0xb4
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DERIVE_KEY,
1000570c:	1c19      	adds	r1, r3, #0
1000570e:	7e20      	ldrb	r0, [r4, #24]
                                           me->cmd_param,
                                          (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005710:	6822      	ldr	r2, [r4, #0]
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
            }

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DERIVE_KEY,
10005712:	3909      	subs	r1, #9
10005714:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10005716:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005718:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000571a:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
1000571c:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
1000571e:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DERIVE_KEY,
                                           me->cmd_param,
                                          (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10005720:	6822      	ldr	r2, [r4, #0]
10005722:	3b05      	subs	r3, #5
10005724:	8093      	strh	r3, [r2, #4]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10005726:	2309      	movs	r3, #9
10005728:	75a3      	strb	r3, [r4, #22]
            return_status = OPTIGA_LIB_SUCCESS;
1000572a:	2300      	movs	r3, #0
        }
        break;
1000572c:	e027      	b.n	1000577e <optiga_cmd_derive_key_handler+0x1b2>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for derive key command...");
1000572e:	4f17      	ldr	r7, [pc, #92]	; (1000578c <optiga_cmd_derive_key_handler+0x1c0>)
10005730:	4e14      	ldr	r6, [pc, #80]	; (10005784 <optiga_cmd_derive_key_handler+0x1b8>)
10005732:	4818      	ldr	r0, [pc, #96]	; (10005794 <optiga_cmd_derive_key_handler+0x1c8>)
10005734:	1c39      	adds	r1, r7, #0
10005736:	1c32      	adds	r2, r6, #0
10005738:	f7fe fffe 	bl	10004738 <optiga_lib_print_message>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
1000573c:	6823      	ldr	r3, [r4, #0]
1000573e:	7c9b      	ldrb	r3, [r3, #18]
10005740:	9301      	str	r3, [sp, #4]
10005742:	2b00      	cmp	r3, #0
10005744:	d009      	beq.n	1000575a <optiga_cmd_derive_key_handler+0x18e>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing derive key response...");
10005746:	1c32      	adds	r2, r6, #0
10005748:	4813      	ldr	r0, [pc, #76]	; (10005798 <optiga_cmd_derive_key_handler+0x1cc>)
1000574a:	1c39      	adds	r1, r7, #0
1000574c:	f7fe fff4 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005750:	237f      	movs	r3, #127	; 0x7f
10005752:	7f22      	ldrb	r2, [r4, #28]
10005754:	4013      	ands	r3, r2
10005756:	7723      	strb	r3, [r4, #28]
10005758:	e00d      	b.n	10005776 <optiga_cmd_derive_key_handler+0x1aa>
                break;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of derive key command is processed...");
1000575a:	4810      	ldr	r0, [pc, #64]	; (1000579c <optiga_cmd_derive_key_handler+0x1d0>)
1000575c:	1c39      	adds	r1, r7, #0
1000575e:	1c32      	adds	r2, r6, #0
10005760:	f7fe ffea 	bl	10004738 <optiga_lib_print_message>
            // session release
            return_status = OPTIGA_LIB_SUCCESS;
            if (NULL != p_optiga_tls_prf_sha256->derived_key)
10005764:	6928      	ldr	r0, [r5, #16]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of derive key command is processed...");
            // session release
            return_status = OPTIGA_LIB_SUCCESS;
10005766:	1e03      	subs	r3, r0, #0
            if (NULL != p_optiga_tls_prf_sha256->derived_key)
10005768:	d009      	beq.n	1000577e <optiga_cmd_derive_key_handler+0x1b2>
            {
                pal_os_memcpy(p_optiga_tls_prf_sha256->derived_key,
1000576a:	6821      	ldr	r1, [r4, #0]
1000576c:	88ea      	ldrh	r2, [r5, #6]
1000576e:	3116      	adds	r1, #22
10005770:	f007 f91b 	bl	1000c9aa <memcpy>
10005774:	e7d9      	b.n	1000572a <optiga_cmd_derive_key_handler+0x15e>
* DeriveKey
*/
_STATIC_H optiga_lib_status_t optiga_cmd_derive_key_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005776:	4b0a      	ldr	r3, [pc, #40]	; (100057a0 <optiga_cmd_derive_key_handler+0x1d4>)
10005778:	e001      	b.n	1000577e <optiga_cmd_derive_key_handler+0x1b2>
            {
                total_apdu_length += p_optiga_tls_prf_sha256->seed_length;
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
1000577a:	2381      	movs	r3, #129	; 0x81
1000577c:	009b      	lsls	r3, r3, #2
        default:
            break;
    }

    return (return_status);
}
1000577e:	1c18      	adds	r0, r3, #0
10005780:	b005      	add	sp, #20
10005782:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005784:	1000d2dc 	.word	0x1000d2dc
10005788:	1000dae0 	.word	0x1000dae0
1000578c:	1000d6cc 	.word	0x1000d6cc
10005790:	00000615 	.word	0x00000615
10005794:	1000dafd 	.word	0x1000dafd
10005798:	1000db2b 	.word	0x1000db2b
1000579c:	1000db56 	.word	0x1000db56
100057a0:	00000202 	.word	0x00000202

100057a4 <optiga_cmd_set_object_protected_handler>:

/*
* Set Data Object handler for protected update
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_object_protected_handler(optiga_cmd_t * me)
{
100057a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_set_object_protected_params_t * p_optiga_write_protected_data = (optiga_set_object_protected_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
100057a6:	466b      	mov	r3, sp
100057a8:	1d9f      	adds	r7, r3, #6
100057aa:	2309      	movs	r3, #9
100057ac:	803b      	strh	r3, [r7, #0]

    switch ((uint8_t)me->cmd_next_execution_state)
100057ae:	7d83      	ldrb	r3, [r0, #22]

/*
* Set Data Object handler for protected update
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_object_protected_handler(optiga_cmd_t * me)
{
100057b0:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_set_object_protected_params_t * p_optiga_write_protected_data = (optiga_set_object_protected_params_t *)me->p_input;
100057b2:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
100057b4:	2b08      	cmp	r3, #8
100057b6:	d002      	beq.n	100057be <optiga_cmd_set_object_protected_handler+0x1a>
100057b8:	2b09      	cmp	r3, #9
100057ba:	d030      	beq.n	1000581e <optiga_cmd_set_object_protected_handler+0x7a>
100057bc:	e059      	b.n	10005872 <optiga_cmd_set_object_protected_handler+0xce>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending set data object command..");
            me->chaining_ongoing = FALSE;
100057be:	2600      	movs	r6, #0

    switch ((uint8_t)me->cmd_next_execution_state)
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending set data object command..");
100057c0:	492e      	ldr	r1, [pc, #184]	; (1000587c <optiga_cmd_set_object_protected_handler+0xd8>)
100057c2:	4a2f      	ldr	r2, [pc, #188]	; (10005880 <optiga_cmd_set_object_protected_handler+0xdc>)
100057c4:	482f      	ldr	r0, [pc, #188]	; (10005884 <optiga_cmd_set_object_protected_handler+0xe0>)
100057c6:	f7fe ffb7 	bl	10004738 <optiga_lib_print_message>
            me->chaining_ongoing = FALSE;
100057ca:	75e6      	strb	r6, [r4, #23]

            // APDU header size + Set Object protected tag 1 bytes + length of buffer 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                p_optiga_write_protected_data->p_protected_update_buffer_length;
100057cc:	88a9      	ldrh	r1, [r5, #4]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
100057ce:	4a2e      	ldr	r2, [pc, #184]	; (10005888 <optiga_cmd_set_object_protected_handler+0xe4>)
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending set data object command..");
            me->chaining_ongoing = FALSE;

            // APDU header size + Set Object protected tag 1 bytes + length of buffer 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
100057d0:	1dcb      	adds	r3, r1, #7
                                p_optiga_write_protected_data->p_protected_update_buffer_length;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
100057d2:	b29b      	uxth	r3, r3
100057d4:	4293      	cmp	r3, r2
100057d6:	d84e      	bhi.n	10005876 <optiga_cmd_set_object_protected_handler+0xd2>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // Copy the tag and protected length
            optiga_cmd_prepare_tag_header((CMD_SET_OBJECT_PROTECTED_TAG |
100057d8:	2030      	movs	r0, #48	; 0x30
100057da:	79ab      	ldrb	r3, [r5, #6]
                                           (uint8_t)p_optiga_write_protected_data->set_obj_protected_tag),
                                          p_optiga_write_protected_data->p_protected_update_buffer_length,
                                          me->p_optiga->optiga_comms_buffer,
100057dc:	6822      	ldr	r2, [r4, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // Copy the tag and protected length
            optiga_cmd_prepare_tag_header((CMD_SET_OBJECT_PROTECTED_TAG |
100057de:	4318      	orrs	r0, r3
                                           (uint8_t)p_optiga_write_protected_data->set_obj_protected_tag),
                                          p_optiga_write_protected_data->p_protected_update_buffer_length,
                                          me->p_optiga->optiga_comms_buffer,
100057e0:	320d      	adds	r2, #13
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // Copy the tag and protected length
            optiga_cmd_prepare_tag_header((CMD_SET_OBJECT_PROTECTED_TAG |
100057e2:	1c3b      	adds	r3, r7, #0
100057e4:	f7ff f8cc 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                           (uint8_t)p_optiga_write_protected_data->set_obj_protected_tag),
                                          p_optiga_write_protected_data->p_protected_update_buffer_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            // data to be written
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
100057e8:	6823      	ldr	r3, [r4, #0]
100057ea:	8838      	ldrh	r0, [r7, #0]
100057ec:	88aa      	ldrh	r2, [r5, #4]
100057ee:	1818      	adds	r0, r3, r0
100057f0:	6829      	ldr	r1, [r5, #0]
100057f2:	300d      	adds	r0, #13
100057f4:	f007 f8d9 	bl	1000c9aa <memcpy>
                          p_optiga_write_protected_data->p_protected_update_buffer,
                          p_optiga_write_protected_data->p_protected_update_buffer_length);

            index_for_data += p_optiga_write_protected_data->p_protected_update_buffer_length;
100057f8:	88aa      	ldrh	r2, [r5, #4]
100057fa:	883b      	ldrh	r3, [r7, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
100057fc:	2583      	movs	r5, #131	; 0x83
            // data to be written
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_write_protected_data->p_protected_update_buffer,
                          p_optiga_write_protected_data->p_protected_update_buffer_length);

            index_for_data += p_optiga_write_protected_data->p_protected_update_buffer_length;
100057fe:	18d3      	adds	r3, r2, r3
10005800:	b29b      	uxth	r3, r3
            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_OBJECT_PROTECTED,
10005802:	1c19      	adds	r1, r3, #0
10005804:	7e20      	ldrb	r0, [r4, #24]
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005806:	6822      	ldr	r2, [r4, #0]
                          p_optiga_write_protected_data->p_protected_update_buffer,
                          p_optiga_write_protected_data->p_protected_update_buffer_length);

            index_for_data += p_optiga_write_protected_data->p_protected_update_buffer_length;
            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_OBJECT_PROTECTED,
10005808:	3909      	subs	r1, #9
1000580a:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
1000580c:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
1000580e:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005810:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005812:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10005814:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_OBJECT_PROTECTED,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10005816:	6822      	ldr	r2, [r4, #0]
10005818:	3b05      	subs	r3, #5
1000581a:	8093      	strh	r3, [r2, #4]
1000581c:	e027      	b.n	1000586e <optiga_cmd_set_object_protected_handler+0xca>
        }
        break;

        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for set data object data command...");
1000581e:	4f17      	ldr	r7, [pc, #92]	; (1000587c <optiga_cmd_set_object_protected_handler+0xd8>)
10005820:	4e17      	ldr	r6, [pc, #92]	; (10005880 <optiga_cmd_set_object_protected_handler+0xdc>)
10005822:	481a      	ldr	r0, [pc, #104]	; (1000588c <optiga_cmd_set_object_protected_handler+0xe8>)
10005824:	1c32      	adds	r2, r6, #0
10005826:	1c39      	adds	r1, r7, #0
10005828:	f7fe ff86 	bl	10004738 <optiga_lib_print_message>
            // check if the write was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
1000582c:	6822      	ldr	r2, [r4, #0]
1000582e:	7c93      	ldrb	r3, [r2, #18]
10005830:	2b00      	cmp	r3, #0
10005832:	d009      	beq.n	10005848 <optiga_cmd_set_object_protected_handler+0xa4>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data object response...");
10005834:	1c32      	adds	r2, r6, #0
10005836:	4816      	ldr	r0, [pc, #88]	; (10005890 <optiga_cmd_set_object_protected_handler+0xec>)
10005838:	1c39      	adds	r1, r7, #0
1000583a:	f7fe ff7d 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
1000583e:	237f      	movs	r3, #127	; 0x7f
10005840:	7f22      	ldrb	r2, [r4, #28]
10005842:	4013      	ands	r3, r2
10005844:	7723      	strb	r3, [r4, #28]
10005846:	e014      	b.n	10005872 <optiga_cmd_set_object_protected_handler+0xce>
                break;
            }
            if (OPTIGA_SET_PROTECTED_UPDATE_FINAL == p_optiga_write_protected_data->set_obj_protected_tag)
10005848:	79ab      	ldrb	r3, [r5, #6]
1000584a:	2b01      	cmp	r3, #1
1000584c:	d102      	bne.n	10005854 <optiga_cmd_set_object_protected_handler+0xb0>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
1000584e:	330a      	adds	r3, #10
10005850:	75a3      	strb	r3, [r4, #22]
10005852:	e007      	b.n	10005864 <optiga_cmd_set_object_protected_handler+0xc0>
            }
            else
            {
                me->cmd_next_execution_state = OPTIGA_CMD_STATE_EXIT;
10005854:	230c      	movs	r3, #12
10005856:	75a3      	strb	r3, [r4, #22]
                pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
10005858:	23cf      	movs	r3, #207	; 0xcf
1000585a:	00db      	lsls	r3, r3, #3
1000585c:	58d0      	ldr	r0, [r2, r3]
1000585e:	490d      	ldr	r1, [pc, #52]	; (10005894 <optiga_cmd_set_object_protected_handler+0xf0>)
10005860:	f7fb fefe 	bl	10001660 <pal_os_event_start>
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of set data object command is processed...");
10005864:	480c      	ldr	r0, [pc, #48]	; (10005898 <optiga_cmd_set_object_protected_handler+0xf4>)
10005866:	4905      	ldr	r1, [pc, #20]	; (1000587c <optiga_cmd_set_object_protected_handler+0xd8>)
10005868:	4a05      	ldr	r2, [pc, #20]	; (10005880 <optiga_cmd_set_object_protected_handler+0xdc>)
1000586a:	f7fe ff65 	bl	10004738 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
1000586e:	2000      	movs	r0, #0
        }
        break;
10005870:	e003      	b.n	1000587a <optiga_cmd_set_object_protected_handler+0xd6>
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_object_protected_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_object_protected_params_t * p_optiga_write_protected_data = (optiga_set_object_protected_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005872:	480a      	ldr	r0, [pc, #40]	; (1000589c <optiga_cmd_set_object_protected_handler+0xf8>)
10005874:	e001      	b.n	1000587a <optiga_cmd_set_object_protected_handler+0xd6>
            // APDU header size + Set Object protected tag 1 bytes + length of buffer 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                p_optiga_write_protected_data->p_protected_update_buffer_length;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10005876:	2081      	movs	r0, #129	; 0x81
10005878:	0080      	lsls	r0, r0, #2
        break;
        default:
            break;
    }
    return (return_status);
}
1000587a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000587c:	1000d6cc 	.word	0x1000d6cc
10005880:	1000d2dc 	.word	0x1000d2dc
10005884:	1000db85 	.word	0x1000db85
10005888:	00000615 	.word	0x00000615
1000588c:	1000dba7 	.word	0x1000dba7
10005890:	1000dbdf 	.word	0x1000dbdf
10005894:	100061f1 	.word	0x100061f1
10005898:	1000dc0f 	.word	0x1000dc0f
1000589c:	00000202 	.word	0x00000202

100058a0 <optiga_cmd_gen_keypair_handler>:
#if defined (OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED) || defined (OPTIGA_CRYPT_RSA_GENERATE_KEYPAIR_ENABLED)
/*
* GenKeyPair handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_gen_keypair_handler(optiga_cmd_t * me)
{
100058a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t *)me->p_input;
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
100058a2:	466b      	mov	r3, sp
100058a4:	1c9d      	adds	r5, r3, #2
100058a6:	2309      	movs	r3, #9
100058a8:	802b      	strh	r3, [r5, #0]
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
100058aa:	7d83      	ldrb	r3, [r0, #22]
#if defined (OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED) || defined (OPTIGA_CRYPT_RSA_GENERATE_KEYPAIR_ENABLED)
/*
* GenKeyPair handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_gen_keypair_handler(optiga_cmd_t * me)
{
100058ac:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t *)me->p_input;
100058ae:	6886      	ldr	r6, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
100058b0:	2b08      	cmp	r3, #8
100058b2:	d002      	beq.n	100058ba <optiga_cmd_gen_keypair_handler+0x1a>
100058b4:	2b09      	cmp	r3, #9
100058b6:	d043      	beq.n	10005940 <optiga_cmd_gen_keypair_handler+0xa0>
100058b8:	e0a5      	b.n	10005a06 <optiga_cmd_gen_keypair_handler+0x166>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending generate keypair command..");
100058ba:	4a54      	ldr	r2, [pc, #336]	; (10005a0c <optiga_cmd_gen_keypair_handler+0x16c>)
100058bc:	4854      	ldr	r0, [pc, #336]	; (10005a10 <optiga_cmd_gen_keypair_handler+0x170>)
100058be:	4955      	ldr	r1, [pc, #340]	; (10005a14 <optiga_cmd_gen_keypair_handler+0x174>)
100058c0:	f7fe ff3a 	bl	10004738 <optiga_lib_print_message>
100058c4:	6822      	ldr	r2, [r4, #0]
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *p_optiga_ecc_gen_keypair->public_key_length = 0;
                break;
            }
            if (FALSE == p_optiga_ecc_gen_keypair->export_private_key)
100058c6:	7873      	ldrb	r3, [r6, #1]
            {
                ///TLV formation for private key OID
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_TAG,
                                               CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
100058c8:	320d      	adds	r2, #13
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *p_optiga_ecc_gen_keypair->public_key_length = 0;
                break;
            }
            if (FALSE == p_optiga_ecc_gen_keypair->export_private_key)
100058ca:	2b00      	cmp	r3, #0
100058cc:	d120      	bne.n	10005910 <optiga_cmd_gen_keypair_handler+0x70>
            {
                ///TLV formation for private key OID
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_TAG,
100058ce:	2001      	movs	r0, #1
100058d0:	2102      	movs	r1, #2
100058d2:	1c2b      	adds	r3, r5, #0
100058d4:	f7ff f854 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                               CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
                ///Update OID based on input param
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
100058d8:	8828      	ldrh	r0, [r5, #0]
100058da:	6823      	ldr	r3, [r4, #0]
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
100058dc:	8871      	ldrh	r1, [r6, #2]
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_TAG,
                                               CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
                ///Update OID based on input param
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
100058de:	1818      	adds	r0, r3, r0
100058e0:	300d      	adds	r0, #13
100058e2:	2900      	cmp	r1, #0
100058e4:	d100      	bne.n	100058e8 <optiga_cmd_gen_keypair_handler+0x48>
100058e6:	8aa1      	ldrh	r1, [r4, #20]
100058e8:	f7fe febc 	bl	10004664 <optiga_common_set_uint16>
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
                                         me->session_oid:(uint16_t)p_optiga_ecc_gen_keypair->private_key_oid));

                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100058ec:	882b      	ldrh	r3, [r5, #0]
                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_KEY_USAGE_TAG,
                                               CMD_GEN_KEY_PAIR_KEY_USAGE_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
100058ee:	6822      	ldr	r2, [r4, #0]
                ///Update OID based on input param
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
                                         me->session_oid:(uint16_t)p_optiga_ecc_gen_keypair->private_key_oid));

                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
100058f0:	3302      	adds	r3, #2
100058f2:	802b      	strh	r3, [r5, #0]
                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_KEY_USAGE_TAG,
                                               CMD_GEN_KEY_PAIR_KEY_USAGE_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
100058f4:	320d      	adds	r2, #13
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
                                         me->session_oid:(uint16_t)p_optiga_ecc_gen_keypair->private_key_oid));

                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_KEY_USAGE_TAG,
100058f6:	2101      	movs	r1, #1
100058f8:	1c2b      	adds	r3, r5, #0
100058fa:	2002      	movs	r0, #2
100058fc:	f7ff f840 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                               CMD_GEN_KEY_PAIR_KEY_USAGE_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_ecc_gen_keypair->key_usage;
10005900:	882b      	ldrh	r3, [r5, #0]
10005902:	6821      	ldr	r1, [r4, #0]
10005904:	1c5a      	adds	r2, r3, #1
10005906:	802a      	strh	r2, [r5, #0]
10005908:	7832      	ldrb	r2, [r6, #0]
1000590a:	18cb      	adds	r3, r1, r3
1000590c:	735a      	strb	r2, [r3, #13]
1000590e:	e004      	b.n	1000591a <optiga_cmd_gen_keypair_handler+0x7a>
            }
            else
            {
                ///TLV formation for export key
                optiga_cmd_prepare_tag_header (CMD_GEN_KEY_PAIR_EXPORT_KEY_TAG,
10005910:	2007      	movs	r0, #7
10005912:	2100      	movs	r1, #0
10005914:	1c2b      	adds	r3, r5, #0
10005916:	f7ff f833 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
1000591a:	882b      	ldrh	r3, [r5, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000591c:	25b8      	movs	r5, #184	; 0xb8
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
1000591e:	1c19      	adds	r1, r3, #0
10005920:	7e20      	ldrb	r0, [r4, #24]
                                            (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
            me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005922:	6822      	ldr	r2, [r4, #0]
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
10005924:	3909      	subs	r1, #9
10005926:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10005928:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
1000592a:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000592c:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
1000592e:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10005930:	7551      	strb	r1, [r2, #21]
            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
                                            (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
            me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10005932:	6822      	ldr	r2, [r4, #0]
10005934:	3b05      	subs	r3, #5
10005936:	8093      	strh	r3, [r2, #4]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10005938:	2309      	movs	r3, #9
            return_status = OPTIGA_LIB_SUCCESS;
1000593a:	2700      	movs	r7, #0
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
                                            (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
            me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
1000593c:	75a3      	strb	r3, [r4, #22]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
1000593e:	e063      	b.n	10005a08 <optiga_cmd_gen_keypair_handler+0x168>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for generate keypair command...");
10005940:	4d34      	ldr	r5, [pc, #208]	; (10005a14 <optiga_cmd_gen_keypair_handler+0x174>)
10005942:	4f32      	ldr	r7, [pc, #200]	; (10005a0c <optiga_cmd_gen_keypair_handler+0x16c>)
10005944:	4834      	ldr	r0, [pc, #208]	; (10005a18 <optiga_cmd_gen_keypair_handler+0x178>)
10005946:	1c29      	adds	r1, r5, #0
10005948:	1c3a      	adds	r2, r7, #0
1000594a:	f7fe fef5 	bl	10004738 <optiga_lib_print_message>
            // check if the write was successful
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
1000594e:	6820      	ldr	r0, [r4, #0]
10005950:	7c83      	ldrb	r3, [r0, #18]
10005952:	2bff      	cmp	r3, #255	; 0xff
10005954:	d10c      	bne.n	10005970 <optiga_cmd_gen_keypair_handler+0xd0>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
10005956:	1c3a      	adds	r2, r7, #0
10005958:	4830      	ldr	r0, [pc, #192]	; (10005a1c <optiga_cmd_gen_keypair_handler+0x17c>)
1000595a:	1c29      	adds	r1, r5, #0
1000595c:	f7fe feec 	bl	10004738 <optiga_lib_print_message>
                *p_optiga_ecc_gen_keypair->public_key_length = 0;
10005960:	2200      	movs	r2, #0
10005962:	6933      	ldr	r3, [r6, #16]
10005964:	801a      	strh	r2, [r3, #0]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005966:	237f      	movs	r3, #127	; 0x7f
10005968:	7f22      	ldrb	r2, [r4, #28]
1000596a:	4013      	ands	r3, r2
1000596c:	7723      	strb	r3, [r4, #28]
1000596e:	e04a      	b.n	10005a06 <optiga_cmd_gen_keypair_handler+0x166>
                break;
            }
            header_offset = 0;
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET - OPTIGA_CMD_UINT16_SIZE_IN_BYTES],
10005970:	3014      	adds	r0, #20
10005972:	a901      	add	r1, sp, #4
10005974:	f7fe fe82 	bl	1000467c <optiga_common_get_uint16>
                OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
                *p_optiga_ecc_gen_keypair->public_key_length = 0;
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            header_offset = 0;
10005978:	2500      	movs	r5, #0
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
1000597a:	4f29      	ldr	r7, [pc, #164]	; (10005a20 <optiga_cmd_gen_keypair_handler+0x180>)
            }
            header_offset = 0;
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET - OPTIGA_CMD_UINT16_SIZE_IN_BYTES],
                                     &out_data_size);

            while (out_data_size > header_offset)
1000597c:	ab01      	add	r3, sp, #4
1000597e:	881b      	ldrh	r3, [r3, #0]
10005980:	42ab      	cmp	r3, r5
10005982:	d93a      	bls.n	100059fa <optiga_cmd_gen_keypair_handler+0x15a>
            {
                if (CMD_GEN_KEY_PAIR_PUBLIC_KEY_TAG ==
                    me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset])
10005984:	6820      	ldr	r0, [r4, #0]
10005986:	1943      	adds	r3, r0, r5
10005988:	7d9b      	ldrb	r3, [r3, #22]
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET - OPTIGA_CMD_UINT16_SIZE_IN_BYTES],
                                     &out_data_size);

            while (out_data_size > header_offset)
            {
                if (CMD_GEN_KEY_PAIR_PUBLIC_KEY_TAG ==
1000598a:	2b02      	cmp	r3, #2
1000598c:	d11f      	bne.n	100059ce <optiga_cmd_gen_keypair_handler+0x12e>
                    me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset])
                {
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
1000598e:	466b      	mov	r3, sp
10005990:	1940      	adds	r0, r0, r5
10005992:	1d9f      	adds	r7, r3, #6
10005994:	1c39      	adds	r1, r7, #0
10005996:	3017      	adds	r0, #23
10005998:	f7fe fe70 	bl	1000467c <optiga_common_get_uint16>
                                                header_offset + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &public_key_length);
                    if (public_key_length > *p_optiga_ecc_gen_keypair->public_key_length)
1000599c:	6933      	ldr	r3, [r6, #16]
1000599e:	883a      	ldrh	r2, [r7, #0]
100059a0:	8819      	ldrh	r1, [r3, #0]
100059a2:	4291      	cmp	r1, r2
100059a4:	d20a      	bcs.n	100059bc <optiga_cmd_gen_keypair_handler+0x11c>
                    {
                        OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
100059a6:	4a19      	ldr	r2, [pc, #100]	; (10005a0c <optiga_cmd_gen_keypair_handler+0x16c>)
100059a8:	481c      	ldr	r0, [pc, #112]	; (10005a1c <optiga_cmd_gen_keypair_handler+0x17c>)
100059aa:	491a      	ldr	r1, [pc, #104]	; (10005a14 <optiga_cmd_gen_keypair_handler+0x174>)
100059ac:	f7fe fec4 	bl	10004738 <optiga_lib_print_message>
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
100059b0:	2781      	movs	r7, #129	; 0x81
                        *p_optiga_ecc_gen_keypair->public_key_length = 0;
100059b2:	2200      	movs	r2, #0
100059b4:	6933      	ldr	r3, [r6, #16]
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                                header_offset + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &public_key_length);
                    if (public_key_length > *p_optiga_ecc_gen_keypair->public_key_length)
                    {
                        OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
100059b6:	00bf      	lsls	r7, r7, #2
                        *p_optiga_ecc_gen_keypair->public_key_length = 0;
100059b8:	801a      	strh	r2, [r3, #0]
                        break;
100059ba:	e01e      	b.n	100059fa <optiga_cmd_gen_keypair_handler+0x15a>
                    }
                    *p_optiga_ecc_gen_keypair->public_key_length = public_key_length;
100059bc:	801a      	strh	r2, [r3, #0]
                    pal_os_memcpy(p_optiga_ecc_gen_keypair->public_key,
100059be:	6823      	ldr	r3, [r4, #0]
100059c0:	68f0      	ldr	r0, [r6, #12]
100059c2:	1959      	adds	r1, r3, r5
100059c4:	3119      	adds	r1, #25
100059c6:	f006 fff0 	bl	1000c9aa <memcpy>
100059ca:	6933      	ldr	r3, [r6, #16]
100059cc:	e00f      	b.n	100059ee <optiga_cmd_gen_keypair_handler+0x14e>
                                   *p_optiga_ecc_gen_keypair->public_key_length);
                    header_offset +=  (uint16_t)OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG +
                                        *p_optiga_ecc_gen_keypair->public_key_length;
                    return_status = OPTIGA_LIB_SUCCESS;
                }
                else if (CMD_GEN_KEY_PAIR_PRIVATE_KEY_TAG == me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
100059ce:	2b01      	cmp	r3, #1
100059d0:	d113      	bne.n	100059fa <optiga_cmd_gen_keypair_handler+0x15a>
                                                             header_offset])
                {
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset
100059d2:	1940      	adds	r0, r0, r5
100059d4:	3017      	adds	r0, #23
100059d6:	4669      	mov	r1, sp
100059d8:	f7fe fe50 	bl	1000467c <optiga_common_get_uint16>
                                             + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &private_key_length);

                    pal_os_memcpy(p_optiga_ecc_gen_keypair->private_key,
100059dc:	466b      	mov	r3, sp
100059de:	881a      	ldrh	r2, [r3, #0]
100059e0:	6823      	ldr	r3, [r4, #0]
100059e2:	6870      	ldr	r0, [r6, #4]
100059e4:	1959      	adds	r1, r3, r5
100059e6:	3119      	adds	r1, #25
100059e8:	f006 ffdf 	bl	1000c9aa <memcpy>
100059ec:	466b      	mov	r3, sp
100059ee:	881b      	ldrh	r3, [r3, #0]
100059f0:	2700      	movs	r7, #0
100059f2:	3303      	adds	r3, #3
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
                                  OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG], private_key_length);
                    header_offset +=  OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG + private_key_length;
100059f4:	18ed      	adds	r5, r5, r3
100059f6:	b2ad      	uxth	r5, r5
100059f8:	e7c0      	b.n	1000597c <optiga_cmd_gen_keypair_handler+0xdc>
                else
                {
                    break;
                }
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of generate keypair command is processed...");
100059fa:	480a      	ldr	r0, [pc, #40]	; (10005a24 <optiga_cmd_gen_keypair_handler+0x184>)
100059fc:	4905      	ldr	r1, [pc, #20]	; (10005a14 <optiga_cmd_gen_keypair_handler+0x174>)
100059fe:	4a03      	ldr	r2, [pc, #12]	; (10005a0c <optiga_cmd_gen_keypair_handler+0x16c>)
10005a00:	f7fe fe9a 	bl	10004738 <optiga_lib_print_message>
        }
        break;
10005a04:	e000      	b.n	10005a08 <optiga_cmd_gen_keypair_handler+0x168>
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005a06:	4f06      	ldr	r7, [pc, #24]	; (10005a20 <optiga_cmd_gen_keypair_handler+0x180>)
        default:
            break;
    }

    return (return_status);
}
10005a08:	1c38      	adds	r0, r7, #0
10005a0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10005a0c:	1000d2dc 	.word	0x1000d2dc
10005a10:	1000dc43 	.word	0x1000dc43
10005a14:	1000d6cc 	.word	0x1000d6cc
10005a18:	1000dc66 	.word	0x1000dc66
10005a1c:	1000dc9a 	.word	0x1000dc9a
10005a20:	00000202 	.word	0x00000202
10005a24:	1000dccb 	.word	0x1000dccb

10005a28 <optiga_cmd_encrypt_asym_handler>:
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005a28:	2309      	movs	r3, #9

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
10005a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
10005a2c:	b085      	sub	sp, #20
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005a2e:	ae03      	add	r6, sp, #12
10005a30:	8033      	strh	r3, [r6, #0]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
10005a32:	7d83      	ldrb	r3, [r0, #22]

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
10005a34:	1c05      	adds	r5, r0, #0
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
10005a36:	6884      	ldr	r4, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
10005a38:	2b08      	cmp	r3, #8
10005a3a:	d003      	beq.n	10005a44 <optiga_cmd_encrypt_asym_handler+0x1c>
10005a3c:	2b09      	cmp	r3, #9
10005a3e:	d100      	bne.n	10005a42 <optiga_cmd_encrypt_asym_handler+0x1a>
10005a40:	e08b      	b.n	10005b5a <optiga_cmd_encrypt_asym_handler+0x132>
10005a42:	e0c9      	b.n	10005bd8 <optiga_cmd_encrypt_asym_handler+0x1b0>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending asymmetric encryption command..");
10005a44:	4866      	ldr	r0, [pc, #408]	; (10005be0 <optiga_cmd_encrypt_asym_handler+0x1b8>)
10005a46:	4967      	ldr	r1, [pc, #412]	; (10005be4 <optiga_cmd_encrypt_asym_handler+0x1bc>)
10005a48:	4a67      	ldr	r2, [pc, #412]	; (10005be8 <optiga_cmd_encrypt_asym_handler+0x1c0>)
10005a4a:	f7fe fe75 	bl	10004738 <optiga_lib_print_message>
            // APDU header length + default TLV of OID of session + default TLV of OID of public key
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES) + (OPTIGA_CMD_APDU_TL_LENGTH +
                                OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            if (NULL != p_optiga_encrypt_asym->message)
10005a4e:	68a0      	ldr	r0, [r4, #8]
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending asymmetric encryption command..");
            // APDU header length + default TLV of OID of session + default TLV of OID of public key
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + (OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES) + (OPTIGA_CMD_APDU_TL_LENGTH +
10005a50:	230e      	movs	r3, #14
                                OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            if (NULL != p_optiga_encrypt_asym->message)
10005a52:	2800      	cmp	r0, #0
10005a54:	d002      	beq.n	10005a5c <optiga_cmd_encrypt_asym_handler+0x34>
            {
                // Add TLV of message and reduce 2 it is already added by default
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
10005a56:	8823      	ldrh	r3, [r4, #0]
10005a58:	330c      	adds	r3, #12
10005a5a:	b29b      	uxth	r3, r3
            }
            if (p_optiga_encrypt_asym->public_key_source_type)
10005a5c:	7b22      	ldrb	r2, [r4, #12]
10005a5e:	2a00      	cmp	r2, #0
10005a60:	d004      	beq.n	10005a6c <optiga_cmd_encrypt_asym_handler+0x44>
10005a62:	6922      	ldr	r2, [r4, #16]
10005a64:	8892      	ldrh	r2, [r2, #4]
10005a66:	3202      	adds	r2, #2
            {
                // Add TLV of public key and reduce 1 because alg id is only 1 byte
                total_apdu_length += (OPTIGA_CMD_APDU_TL_LENGTH +(PUBLIC_KEY_HOST->length));
                total_apdu_length--;
10005a68:	189b      	adds	r3, r3, r2
10005a6a:	b29b      	uxth	r3, r3
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10005a6c:	4a5f      	ldr	r2, [pc, #380]	; (10005bec <optiga_cmd_encrypt_asym_handler+0x1c4>)
10005a6e:	4293      	cmp	r3, r2
10005a70:	d902      	bls.n	10005a78 <optiga_cmd_encrypt_asym_handler+0x50>
            {
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
10005a72:	6863      	ldr	r3, [r4, #4]
10005a74:	2200      	movs	r2, #0
10005a76:	e09c      	b.n	10005bb2 <optiga_cmd_encrypt_asym_handler+0x18a>
10005a78:	682a      	ldr	r2, [r5, #0]
10005a7a:	8821      	ldrh	r1, [r4, #0]
            if ((NULL == p_optiga_encrypt_asym->message) && (0 == p_optiga_encrypt_asym->message_length))
            {
                //TLV formation for session
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_SESSION_OID_TAG,
                                              CMD_ENCRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
10005a7c:	320d      	adds	r2, #13
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // message for encryption
            if ((NULL == p_optiga_encrypt_asym->message) && (0 == p_optiga_encrypt_asym->message_length))
10005a7e:	2800      	cmp	r0, #0
10005a80:	d110      	bne.n	10005aa4 <optiga_cmd_encrypt_asym_handler+0x7c>
10005a82:	2900      	cmp	r1, #0
10005a84:	d10e      	bne.n	10005aa4 <optiga_cmd_encrypt_asym_handler+0x7c>
            {
                //TLV formation for session
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_SESSION_OID_TAG,
10005a86:	3002      	adds	r0, #2
10005a88:	1c01      	adds	r1, r0, #0
10005a8a:	1c33      	adds	r3, r6, #0
10005a8c:	f7fe ff78 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              CMD_ENCRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                //Add session OID
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data ), (me->session_oid));
10005a90:	682b      	ldr	r3, [r5, #0]
10005a92:	8830      	ldrh	r0, [r6, #0]
10005a94:	8aa9      	ldrh	r1, [r5, #20]
10005a96:	1818      	adds	r0, r3, r0
10005a98:	300d      	adds	r0, #13
10005a9a:	f7fe fde3 	bl	10004664 <optiga_common_set_uint16>
                index_for_data += 2;
10005a9e:	8833      	ldrh	r3, [r6, #0]
10005aa0:	3302      	adds	r3, #2
10005aa2:	e00e      	b.n	10005ac2 <optiga_cmd_encrypt_asym_handler+0x9a>
            }
            else
            {
                //TLV formation for message
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_MESSAGE_TAG,
10005aa4:	2061      	movs	r0, #97	; 0x61
10005aa6:	1c33      	adds	r3, r6, #0
10005aa8:	f7fe ff6a 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              p_optiga_encrypt_asym->message_length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005aac:	682b      	ldr	r3, [r5, #0]
10005aae:	8830      	ldrh	r0, [r6, #0]
10005ab0:	8822      	ldrh	r2, [r4, #0]
10005ab2:	1818      	adds	r0, r3, r0
10005ab4:	300d      	adds	r0, #13
10005ab6:	68a1      	ldr	r1, [r4, #8]
10005ab8:	f006 ff77 	bl	1000c9aa <memcpy>
                                p_optiga_encrypt_asym->message,
                                p_optiga_encrypt_asym->message_length);
                index_for_data += p_optiga_encrypt_asym->message_length;
10005abc:	8822      	ldrh	r2, [r4, #0]
10005abe:	8833      	ldrh	r3, [r6, #0]
10005ac0:	18d3      	adds	r3, r2, r3
10005ac2:	8033      	strh	r3, [r6, #0]
10005ac4:	682a      	ldr	r2, [r5, #0]

            }

            // key for encryption

            if (p_optiga_encrypt_asym->public_key_source_type)
10005ac6:	7b23      	ldrb	r3, [r4, #12]
            {

                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
                                              CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
10005ac8:	320d      	adds	r2, #13

            }

            // key for encryption

            if (p_optiga_encrypt_asym->public_key_source_type)
10005aca:	2b00      	cmp	r3, #0
10005acc:	d022      	beq.n	10005b14 <optiga_cmd_encrypt_asym_handler+0xec>
            {

                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
10005ace:	2005      	movs	r0, #5
10005ad0:	2101      	movs	r1, #1
10005ad2:	1c33      	adds	r3, r6, #0
10005ad4:	f7fe ff54 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;
10005ad8:	8833      	ldrh	r3, [r6, #0]
10005ada:	6829      	ldr	r1, [r5, #0]
10005adc:	1c5a      	adds	r2, r3, #1
10005ade:	8032      	strh	r2, [r6, #0]
10005ae0:	6922      	ldr	r2, [r4, #16]
10005ae2:	18cb      	adds	r3, r1, r3
10005ae4:	7992      	ldrb	r2, [r2, #6]

                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
10005ae6:	2006      	movs	r0, #6
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
                                              CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;
10005ae8:	735a      	strb	r2, [r3, #13]

                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
10005aea:	6923      	ldr	r3, [r4, #16]
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
10005aec:	682a      	ldr	r2, [r5, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;

                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
10005aee:	8899      	ldrh	r1, [r3, #4]
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
10005af0:	320d      	adds	r2, #13
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;

                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
10005af2:	1c33      	adds	r3, r6, #0
10005af4:	f7fe ff44 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005af8:	682a      	ldr	r2, [r5, #0]
10005afa:	8830      	ldrh	r0, [r6, #0]
10005afc:	6923      	ldr	r3, [r4, #16]
10005afe:	1810      	adds	r0, r2, r0
10005b00:	6819      	ldr	r1, [r3, #0]
10005b02:	889a      	ldrh	r2, [r3, #4]
10005b04:	300d      	adds	r0, #13
10005b06:	f006 ff50 	bl	1000c9aa <memcpy>
                              PUBLIC_KEY_HOST->public_key,
                              PUBLIC_KEY_HOST->length);

                index_for_data += PUBLIC_KEY_HOST->length;
10005b0a:	6923      	ldr	r3, [r4, #16]
10005b0c:	889a      	ldrh	r2, [r3, #4]
10005b0e:	8833      	ldrh	r3, [r6, #0]
10005b10:	18d3      	adds	r3, r2, r3
10005b12:	e00e      	b.n	10005b32 <optiga_cmd_encrypt_asym_handler+0x10a>
#undef PUBLIC_KEY_HOST
            }
            else
            {
                //TLV for public key from OID
                optiga_cmd_prepare_tag_header(CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_TAG,
10005b14:	2004      	movs	r0, #4
10005b16:	2102      	movs	r1, #2
10005b18:	1c33      	adds	r3, r6, #0
10005b1a:	f7fe ff31 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                //Add session OID
                optiga_common_set_uint16(me->p_optiga->optiga_comms_buffer + index_for_data,
10005b1e:	682b      	ldr	r3, [r5, #0]
10005b20:	8830      	ldrh	r0, [r6, #0]
10005b22:	1818      	adds	r0, r3, r0
10005b24:	6923      	ldr	r3, [r4, #16]
10005b26:	300d      	adds	r0, #13
10005b28:	8819      	ldrh	r1, [r3, #0]
10005b2a:	f7fe fd9b 	bl	10004664 <optiga_common_set_uint16>
                                        *((uint16_t * )(p_optiga_encrypt_asym->key)));
                index_for_data += CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
10005b2e:	8833      	ldrh	r3, [r6, #0]
10005b30:	3302      	adds	r3, #2
10005b32:	8033      	strh	r3, [r6, #0]
            }


            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
10005b34:	8833      	ldrh	r3, [r6, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005b36:	249e      	movs	r4, #158	; 0x9e
                index_for_data += CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
            }


            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
10005b38:	1c19      	adds	r1, r3, #0
10005b3a:	7e28      	ldrb	r0, [r5, #24]
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005b3c:	682a      	ldr	r2, [r5, #0]
                index_for_data += CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
            }


            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
10005b3e:	3909      	subs	r1, #9
10005b40:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10005b42:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005b44:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005b46:	7494      	strb	r4, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005b48:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10005b4a:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10005b4c:	682a      	ldr	r2, [r5, #0]
10005b4e:	3b05      	subs	r3, #5
10005b50:	8093      	strh	r3, [r2, #4]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10005b52:	2309      	movs	r3, #9
10005b54:	75ab      	strb	r3, [r5, #22]
            return_status = OPTIGA_LIB_SUCCESS;
10005b56:	2000      	movs	r0, #0
        }
        break;
10005b58:	e03f      	b.n	10005bda <optiga_cmd_encrypt_asym_handler+0x1b2>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for asymmetric encryption command...");
10005b5a:	4e22      	ldr	r6, [pc, #136]	; (10005be4 <optiga_cmd_encrypt_asym_handler+0x1bc>)
10005b5c:	4f22      	ldr	r7, [pc, #136]	; (10005be8 <optiga_cmd_encrypt_asym_handler+0x1c0>)
10005b5e:	4824      	ldr	r0, [pc, #144]	; (10005bf0 <optiga_cmd_encrypt_asym_handler+0x1c8>)
10005b60:	1c31      	adds	r1, r6, #0
10005b62:	1c3a      	adds	r2, r7, #0
10005b64:	f7fe fde8 	bl	10004738 <optiga_lib_print_message>
            // check if the random data retrieval app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10005b68:	6828      	ldr	r0, [r5, #0]
10005b6a:	7c83      	ldrb	r3, [r0, #18]
10005b6c:	9301      	str	r3, [sp, #4]
10005b6e:	2b00      	cmp	r3, #0
10005b70:	d00c      	beq.n	10005b8c <optiga_cmd_encrypt_asym_handler+0x164>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
10005b72:	1c3a      	adds	r2, r7, #0
10005b74:	481f      	ldr	r0, [pc, #124]	; (10005bf4 <optiga_cmd_encrypt_asym_handler+0x1cc>)
10005b76:	1c31      	adds	r1, r6, #0
10005b78:	f7fe fdde 	bl	10004738 <optiga_lib_print_message>
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
10005b7c:	2200      	movs	r2, #0
10005b7e:	6863      	ldr	r3, [r4, #4]
10005b80:	801a      	strh	r2, [r3, #0]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005b82:	237f      	movs	r3, #127	; 0x7f
10005b84:	7f2a      	ldrb	r2, [r5, #28]
10005b86:	4013      	ands	r3, r2
10005b88:	772b      	strb	r3, [r5, #28]
10005b8a:	e025      	b.n	10005bd8 <optiga_cmd_encrypt_asym_handler+0x1b0>
                break;
            }
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_NO_OF_BYTES_IN_TAG],
10005b8c:	ab02      	add	r3, sp, #8
10005b8e:	1d99      	adds	r1, r3, #6
10005b90:	3017      	adds	r0, #23
10005b92:	f7fe fd73 	bl	1000467c <optiga_common_get_uint16>
                                     &out_data_size);
            if ((*(p_optiga_encrypt_asym->processed_message_length )) < out_data_size)
10005b96:	ab02      	add	r3, sp, #8
10005b98:	88da      	ldrh	r2, [r3, #6]
10005b9a:	6863      	ldr	r3, [r4, #4]
10005b9c:	881b      	ldrh	r3, [r3, #0]
10005b9e:	4293      	cmp	r3, r2
10005ba0:	d20b      	bcs.n	10005bba <optiga_cmd_encrypt_asym_handler+0x192>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
10005ba2:	1c3a      	adds	r2, r7, #0
10005ba4:	4813      	ldr	r0, [pc, #76]	; (10005bf4 <optiga_cmd_encrypt_asym_handler+0x1cc>)
10005ba6:	1c31      	adds	r1, r6, #0
10005ba8:	f7fe fdc6 	bl	10004738 <optiga_lib_print_message>
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
10005bac:	466a      	mov	r2, sp
10005bae:	6863      	ldr	r3, [r4, #4]
10005bb0:	8892      	ldrh	r2, [r2, #4]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10005bb2:	2081      	movs	r0, #129	; 0x81
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_NO_OF_BYTES_IN_TAG],
                                     &out_data_size);
            if ((*(p_optiga_encrypt_asym->processed_message_length )) < out_data_size)
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
10005bb4:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10005bb6:	0080      	lsls	r0, r0, #2
                break;
10005bb8:	e00f      	b.n	10005bda <optiga_cmd_encrypt_asym_handler+0x1b2>
            }
            //copy data from optiga comms buffer to user provided buffer
            pal_os_memcpy(p_optiga_encrypt_asym->processed_message,
10005bba:	6829      	ldr	r1, [r5, #0]
10005bbc:	6960      	ldr	r0, [r4, #20]
10005bbe:	3119      	adds	r1, #25
10005bc0:	f006 fef3 	bl	1000c9aa <memcpy>
                          &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                          OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            *(p_optiga_encrypt_asym->processed_message_length) = out_data_size ;
10005bc4:	ab02      	add	r3, sp, #8
10005bc6:	88da      	ldrh	r2, [r3, #6]
10005bc8:	6863      	ldr	r3, [r4, #4]
            OPTIGA_CMD_LOG_MESSAGE("Response of asymmetric encryption command is processed...");
10005bca:	480b      	ldr	r0, [pc, #44]	; (10005bf8 <optiga_cmd_encrypt_asym_handler+0x1d0>)
            }
            //copy data from optiga comms buffer to user provided buffer
            pal_os_memcpy(p_optiga_encrypt_asym->processed_message,
                          &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                          OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            *(p_optiga_encrypt_asym->processed_message_length) = out_data_size ;
10005bcc:	801a      	strh	r2, [r3, #0]
            OPTIGA_CMD_LOG_MESSAGE("Response of asymmetric encryption command is processed...");
10005bce:	1c31      	adds	r1, r6, #0
10005bd0:	1c3a      	adds	r2, r7, #0
10005bd2:	f7fe fdb1 	bl	10004738 <optiga_lib_print_message>
10005bd6:	e7be      	b.n	10005b56 <optiga_cmd_encrypt_asym_handler+0x12e>
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005bd8:	4808      	ldr	r0, [pc, #32]	; (10005bfc <optiga_cmd_encrypt_asym_handler+0x1d4>)
        default:
            break;
    }

    return (return_status);
}
10005bda:	b005      	add	sp, #20
10005bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005bde:	46c0      	nop			; (mov r8, r8)
10005be0:	1000dd00 	.word	0x1000dd00
10005be4:	1000d6cc 	.word	0x1000d6cc
10005be8:	1000d2dc 	.word	0x1000d2dc
10005bec:	00000615 	.word	0x00000615
10005bf0:	1000dd28 	.word	0x1000dd28
10005bf4:	1000dd61 	.word	0x1000dd61
10005bf8:	1000dd97 	.word	0x1000dd97
10005bfc:	00000202 	.word	0x00000202

10005c00 <optiga_cmd_decrypt_asym_handler>:
_STATIC_H optiga_lib_status_t optiga_cmd_decrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005c00:	2309      	movs	r3, #9

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_decrypt_asym_handler(optiga_cmd_t * me)
{
10005c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005c04:	ae01      	add	r6, sp, #4
10005c06:	8033      	strh	r3, [r6, #0]
    uint16_t out_data_size;

    switch ((uint8_t)me->cmd_next_execution_state)
10005c08:	7d83      	ldrb	r3, [r0, #22]

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_decrypt_asym_handler(optiga_cmd_t * me)
{
10005c0a:	1c05      	adds	r5, r0, #0
    uint16_t total_apdu_length;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t *)me->p_input;
10005c0c:	6884      	ldr	r4, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;

    switch ((uint8_t)me->cmd_next_execution_state)
10005c0e:	2b08      	cmp	r3, #8
10005c10:	d002      	beq.n	10005c18 <optiga_cmd_decrypt_asym_handler+0x18>
10005c12:	2b09      	cmp	r3, #9
10005c14:	d066      	beq.n	10005ce4 <optiga_cmd_decrypt_asym_handler+0xe4>
10005c16:	e0a7      	b.n	10005d68 <optiga_cmd_decrypt_asym_handler+0x168>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending asymmetric decryption command..");
10005c18:	4856      	ldr	r0, [pc, #344]	; (10005d74 <optiga_cmd_decrypt_asym_handler+0x174>)
10005c1a:	4957      	ldr	r1, [pc, #348]	; (10005d78 <optiga_cmd_decrypt_asym_handler+0x178>)
10005c1c:	4a57      	ldr	r2, [pc, #348]	; (10005d7c <optiga_cmd_decrypt_asym_handler+0x17c>)
10005c1e:	f7fe fd8b 	bl	10004738 <optiga_lib_print_message>
            // APDU headed length + TLV of encrypt message + TLV of decrypt key OID + (optional)TLV of session key OID
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_APDU_TL_LENGTH + p_optiga_decrypt_asym->message_length +
10005c22:	6963      	ldr	r3, [r4, #20]
10005c24:	8821      	ldrh	r1, [r4, #0]
10005c26:	2005      	movs	r0, #5
10005c28:	2b00      	cmp	r3, #0
10005c2a:	d004      	beq.n	10005c36 <optiga_cmd_decrypt_asym_handler+0x36>
10005c2c:	6862      	ldr	r2, [r4, #4]
10005c2e:	4253      	negs	r3, r2
10005c30:	415a      	adcs	r2, r3
10005c32:	4252      	negs	r2, r2
10005c34:	4010      	ands	r0, r2
10005c36:	1c0b      	adds	r3, r1, #0
10005c38:	330c      	adds	r3, #12
10005c3a:	18c3      	adds	r3, r0, r3
                                OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                ((NULL != p_optiga_decrypt_asym->processed_message) &&
                                (NULL != p_optiga_decrypt_asym->processed_message_length)
                                ? 0 : OPTIGA_CMD_APDU_TL_LENGTH + OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
10005c3c:	4a50      	ldr	r2, [pc, #320]	; (10005d80 <optiga_cmd_decrypt_asym_handler+0x180>)
10005c3e:	b29b      	uxth	r3, r3
10005c40:	4293      	cmp	r3, r2
10005c42:	d904      	bls.n	10005c4e <optiga_cmd_decrypt_asym_handler+0x4e>
            {
                if (NULL != p_optiga_decrypt_asym->processed_message_length)
10005c44:	6863      	ldr	r3, [r4, #4]
10005c46:	2b00      	cmp	r3, #0
10005c48:	d000      	beq.n	10005c4c <optiga_cmd_decrypt_asym_handler+0x4c>
10005c4a:	e07b      	b.n	10005d44 <optiga_cmd_decrypt_asym_handler+0x144>
10005c4c:	e08e      	b.n	10005d6c <optiga_cmd_decrypt_asym_handler+0x16c>
                break;
            }
            // Tag and length for encrypt message
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_ENCRYPT_MESSAGE_TAG,
                                          p_optiga_decrypt_asym->message_length,
                                          me->p_optiga->optiga_comms_buffer,
10005c4e:	682a      	ldr	r2, [r5, #0]
                }
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            // Tag and length for encrypt message
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_ENCRYPT_MESSAGE_TAG,
10005c50:	2061      	movs	r0, #97	; 0x61
                                          p_optiga_decrypt_asym->message_length,
                                          me->p_optiga->optiga_comms_buffer,
10005c52:	320d      	adds	r2, #13
                }
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            // Tag and length for encrypt message
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_ENCRYPT_MESSAGE_TAG,
10005c54:	1c33      	adds	r3, r6, #0
10005c56:	f7fe fe93 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          p_optiga_decrypt_asym->message_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //Encrypt data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005c5a:	682b      	ldr	r3, [r5, #0]
10005c5c:	8830      	ldrh	r0, [r6, #0]
10005c5e:	8822      	ldrh	r2, [r4, #0]
10005c60:	1818      	adds	r0, r3, r0
10005c62:	68a1      	ldr	r1, [r4, #8]
10005c64:	300d      	adds	r0, #13
10005c66:	f006 fea0 	bl	1000c9aa <memcpy>
                          p_optiga_decrypt_asym->message,
                          p_optiga_decrypt_asym->message_length);

            index_for_data += p_optiga_decrypt_asym->message_length;
10005c6a:	8822      	ldrh	r2, [r4, #0]
10005c6c:	8833      	ldrh	r3, [r6, #0]

            // Tag and length for OID of decrypt key
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_DECRYPT_KEY_TAG,
10005c6e:	2003      	movs	r0, #3
            //Encrypt data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_decrypt_asym->message,
                          p_optiga_decrypt_asym->message_length);

            index_for_data += p_optiga_decrypt_asym->message_length;
10005c70:	18d3      	adds	r3, r2, r3

            // Tag and length for OID of decrypt key
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_DECRYPT_KEY_TAG,
                                          CMD_DECRYPT_ASYM_DECRYPT_KEY_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
10005c72:	682a      	ldr	r2, [r5, #0]
            //Encrypt data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_decrypt_asym->message,
                          p_optiga_decrypt_asym->message_length);

            index_for_data += p_optiga_decrypt_asym->message_length;
10005c74:	8033      	strh	r3, [r6, #0]

            // Tag and length for OID of decrypt key
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_DECRYPT_KEY_TAG,
                                          CMD_DECRYPT_ASYM_DECRYPT_KEY_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
10005c76:	320d      	adds	r2, #13
                          p_optiga_decrypt_asym->message_length);

            index_for_data += p_optiga_decrypt_asym->message_length;

            // Tag and length for OID of decrypt key
            optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_DECRYPT_KEY_TAG,
10005c78:	2102      	movs	r1, #2
10005c7a:	1c33      	adds	r3, r6, #0
10005c7c:	f7fe fe80 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                          CMD_DECRYPT_ASYM_DECRYPT_KEY_LENGTH,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //OID of decrypt key
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10005c80:	682b      	ldr	r3, [r5, #0]
10005c82:	8830      	ldrh	r0, [r6, #0]
10005c84:	1818      	adds	r0, r3, r0
10005c86:	6923      	ldr	r3, [r4, #16]
10005c88:	300d      	adds	r0, #13
10005c8a:	8819      	ldrh	r1, [r3, #0]
10005c8c:	f7fe fcea 	bl	10004664 <optiga_common_set_uint16>
                                     (uint16_t)*((optiga_key_id_t*)p_optiga_decrypt_asym->key));
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005c90:	8833      	ldrh	r3, [r6, #0]
10005c92:	3302      	adds	r3, #2
10005c94:	8033      	strh	r3, [r6, #0]

            if ((NULL == p_optiga_decrypt_asym->processed_message) &&
10005c96:	6963      	ldr	r3, [r4, #20]
10005c98:	2b00      	cmp	r3, #0
10005c9a:	d113      	bne.n	10005cc4 <optiga_cmd_decrypt_asym_handler+0xc4>
10005c9c:	6863      	ldr	r3, [r4, #4]
10005c9e:	2b00      	cmp	r3, #0
10005ca0:	d110      	bne.n	10005cc4 <optiga_cmd_decrypt_asym_handler+0xc4>
                (NULL == p_optiga_decrypt_asym->processed_message_length))
            {
                // Tag and length for session OID
                optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_SESSION_OID_TAG,
10005ca2:	2002      	movs	r0, #2
                                              CMD_DECRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
10005ca4:	682a      	ldr	r2, [r5, #0]

            if ((NULL == p_optiga_decrypt_asym->processed_message) &&
                (NULL == p_optiga_decrypt_asym->processed_message_length))
            {
                // Tag and length for session OID
                optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_SESSION_OID_TAG,
10005ca6:	1c01      	adds	r1, r0, #0
                                              CMD_DECRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
10005ca8:	320d      	adds	r2, #13

            if ((NULL == p_optiga_decrypt_asym->processed_message) &&
                (NULL == p_optiga_decrypt_asym->processed_message_length))
            {
                // Tag and length for session OID
                optiga_cmd_prepare_tag_header(CMD_DECRYPT_ASYM_SESSION_OID_TAG,
10005caa:	1c33      	adds	r3, r6, #0
10005cac:	f7fe fe68 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              CMD_DECRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);
                //OID of decrypt key
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
10005cb0:	682b      	ldr	r3, [r5, #0]
10005cb2:	8830      	ldrh	r0, [r6, #0]
10005cb4:	8aa9      	ldrh	r1, [r5, #20]
10005cb6:	1818      	adds	r0, r3, r0
10005cb8:	300d      	adds	r0, #13
10005cba:	f7fe fcd3 	bl	10004664 <optiga_common_set_uint16>
                                         me->session_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005cbe:	8833      	ldrh	r3, [r6, #0]
10005cc0:	3302      	adds	r3, #2
10005cc2:	8033      	strh	r3, [r6, #0]
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DECRYPT_ASYM,
10005cc4:	8833      	ldrh	r3, [r6, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005cc6:	249f      	movs	r4, #159	; 0x9f
                                         me->session_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DECRYPT_ASYM,
10005cc8:	1c19      	adds	r1, r3, #0
10005cca:	7e28      	ldrb	r0, [r5, #24]
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005ccc:	682a      	ldr	r2, [r5, #0]
                                         me->session_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DECRYPT_ASYM,
10005cce:	3909      	subs	r1, #9
10005cd0:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10005cd2:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005cd4:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005cd6:	7494      	strb	r4, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005cd8:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10005cda:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DECRYPT_ASYM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10005cdc:	682a      	ldr	r2, [r5, #0]
10005cde:	3b05      	subs	r3, #5
10005ce0:	8093      	strh	r3, [r2, #4]
10005ce2:	e03f      	b.n	10005d64 <optiga_cmd_decrypt_asym_handler+0x164>
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for asymmetric decryption command...");
10005ce4:	4f24      	ldr	r7, [pc, #144]	; (10005d78 <optiga_cmd_decrypt_asym_handler+0x178>)
10005ce6:	4827      	ldr	r0, [pc, #156]	; (10005d84 <optiga_cmd_decrypt_asym_handler+0x184>)
10005ce8:	1c39      	adds	r1, r7, #0
10005cea:	4a24      	ldr	r2, [pc, #144]	; (10005d7c <optiga_cmd_decrypt_asym_handler+0x17c>)
10005cec:	f7fe fd24 	bl	10004738 <optiga_lib_print_message>
            // check if the write was successful
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10005cf0:	6828      	ldr	r0, [r5, #0]
10005cf2:	7c83      	ldrb	r3, [r0, #18]
10005cf4:	2bff      	cmp	r3, #255	; 0xff
10005cf6:	d10e      	bne.n	10005d16 <optiga_cmd_decrypt_asym_handler+0x116>
            {
                if (NULL != p_optiga_decrypt_asym->processed_message_length)
10005cf8:	6863      	ldr	r3, [r4, #4]
10005cfa:	2b00      	cmp	r3, #0
10005cfc:	d001      	beq.n	10005d02 <optiga_cmd_decrypt_asym_handler+0x102>
                {
                    *p_optiga_decrypt_asym->processed_message_length = 0;
10005cfe:	2200      	movs	r2, #0
10005d00:	801a      	strh	r2, [r3, #0]
                }
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric decryption response...");
10005d02:	4a1e      	ldr	r2, [pc, #120]	; (10005d7c <optiga_cmd_decrypt_asym_handler+0x17c>)
10005d04:	4820      	ldr	r0, [pc, #128]	; (10005d88 <optiga_cmd_decrypt_asym_handler+0x188>)
10005d06:	491c      	ldr	r1, [pc, #112]	; (10005d78 <optiga_cmd_decrypt_asym_handler+0x178>)
10005d08:	f7fe fd16 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005d0c:	237f      	movs	r3, #127	; 0x7f
10005d0e:	7f2a      	ldrb	r2, [r5, #28]
10005d10:	4013      	ands	r3, r2
10005d12:	772b      	strb	r3, [r5, #28]
10005d14:	e028      	b.n	10005d68 <optiga_cmd_decrypt_asym_handler+0x168>
                break;
            }
            if ((NULL != p_optiga_decrypt_asym->processed_message) &&
10005d16:	6963      	ldr	r3, [r4, #20]
10005d18:	2b00      	cmp	r3, #0
10005d1a:	d01e      	beq.n	10005d5a <optiga_cmd_decrypt_asym_handler+0x15a>
10005d1c:	6863      	ldr	r3, [r4, #4]
10005d1e:	2b00      	cmp	r3, #0
10005d20:	d01b      	beq.n	10005d5a <optiga_cmd_decrypt_asym_handler+0x15a>
                (NULL != p_optiga_decrypt_asym->processed_message_length))
            {
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
10005d22:	466b      	mov	r3, sp
10005d24:	1d9e      	adds	r6, r3, #6
10005d26:	3017      	adds	r0, #23
10005d28:	1c31      	adds	r1, r6, #0
10005d2a:	f7fe fca7 	bl	1000467c <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);
                // if the received decrypted length is greater than the user provided decrypt buffer length
                if ((*(p_optiga_decrypt_asym->processed_message_length )) < out_data_size)
10005d2e:	6863      	ldr	r3, [r4, #4]
10005d30:	8832      	ldrh	r2, [r6, #0]
10005d32:	881b      	ldrh	r3, [r3, #0]
10005d34:	4293      	cmp	r3, r2
10005d36:	d208      	bcs.n	10005d4a <optiga_cmd_decrypt_asym_handler+0x14a>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric decryption response...");
10005d38:	4813      	ldr	r0, [pc, #76]	; (10005d88 <optiga_cmd_decrypt_asym_handler+0x188>)
10005d3a:	1c39      	adds	r1, r7, #0
10005d3c:	4a0f      	ldr	r2, [pc, #60]	; (10005d7c <optiga_cmd_decrypt_asym_handler+0x17c>)
10005d3e:	f7fe fcfb 	bl	10004738 <optiga_lib_print_message>
                    *(p_optiga_decrypt_asym->processed_message_length) = 0;
10005d42:	6863      	ldr	r3, [r4, #4]
10005d44:	2200      	movs	r2, #0
10005d46:	801a      	strh	r2, [r3, #0]
10005d48:	e010      	b.n	10005d6c <optiga_cmd_decrypt_asym_handler+0x16c>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    break;
                }

                pal_os_memcpy(p_optiga_decrypt_asym->processed_message,
10005d4a:	6829      	ldr	r1, [r5, #0]
10005d4c:	6960      	ldr	r0, [r4, #20]
10005d4e:	3119      	adds	r1, #25
10005d50:	f006 fe2b 	bl	1000c9aa <memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_APDU_TL_LENGTH],
                              out_data_size);
                *p_optiga_decrypt_asym->processed_message_length = out_data_size;
10005d54:	8832      	ldrh	r2, [r6, #0]
10005d56:	6863      	ldr	r3, [r4, #4]
10005d58:	801a      	strh	r2, [r3, #0]
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of asymmetric decryption command is processed...");
10005d5a:	480c      	ldr	r0, [pc, #48]	; (10005d8c <optiga_cmd_decrypt_asym_handler+0x18c>)
10005d5c:	4906      	ldr	r1, [pc, #24]	; (10005d78 <optiga_cmd_decrypt_asym_handler+0x178>)
10005d5e:	4a07      	ldr	r2, [pc, #28]	; (10005d7c <optiga_cmd_decrypt_asym_handler+0x17c>)
10005d60:	f7fe fcea 	bl	10004738 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
10005d64:	2000      	movs	r0, #0
        }
        break;
10005d66:	e003      	b.n	10005d70 <optiga_cmd_decrypt_asym_handler+0x170>
*/
_STATIC_H optiga_lib_status_t optiga_cmd_decrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005d68:	4809      	ldr	r0, [pc, #36]	; (10005d90 <optiga_cmd_decrypt_asym_handler+0x190>)
10005d6a:	e001      	b.n	10005d70 <optiga_cmd_decrypt_asym_handler+0x170>
            {
                if (NULL != p_optiga_decrypt_asym->processed_message_length)
                {
                    *(p_optiga_decrypt_asym->processed_message_length) = 0;
                }
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10005d6c:	2081      	movs	r0, #129	; 0x81
10005d6e:	0080      	lsls	r0, r0, #2
        default:
            break;
    }

    return (return_status);
}
10005d70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10005d72:	46c0      	nop			; (mov r8, r8)
10005d74:	1000ddd1 	.word	0x1000ddd1
10005d78:	1000d6cc 	.word	0x1000d6cc
10005d7c:	1000d2dc 	.word	0x1000d2dc
10005d80:	00000615 	.word	0x00000615
10005d84:	1000ddf9 	.word	0x1000ddf9
10005d88:	1000de32 	.word	0x1000de32
10005d8c:	1000de68 	.word	0x1000de68
10005d90:	00000202 	.word	0x00000202

10005d94 <optiga_cmd_calc_hash_handler>:
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005d94:	2309      	movs	r3, #9
#ifdef OPTIGA_CRYPT_HASH_ENABLED
/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
10005d96:	b5f0      	push	{r4, r5, r6, r7, lr}
10005d98:	b085      	sub	sp, #20
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
10005d9a:	ae03      	add	r6, sp, #12
10005d9c:	8033      	strh	r3, [r6, #0]
    uint16_t out_data_size;
    uint16_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
10005d9e:	7d83      	ldrb	r3, [r0, #22]
#ifdef OPTIGA_CRYPT_HASH_ENABLED
/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
10005da0:	1c05      	adds	r5, r0, #0
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
10005da2:	6884      	ldr	r4, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
10005da4:	2b08      	cmp	r3, #8
10005da6:	d003      	beq.n	10005db0 <optiga_cmd_calc_hash_handler+0x1c>
10005da8:	2b09      	cmp	r3, #9
10005daa:	d100      	bne.n	10005dae <optiga_cmd_calc_hash_handler+0x1a>
10005dac:	e0b8      	b.n	10005f20 <optiga_cmd_calc_hash_handler+0x18c>
10005dae:	e108      	b.n	10005fc2 <optiga_cmd_calc_hash_handler+0x22e>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate hash command..");
10005db0:	4a85      	ldr	r2, [pc, #532]	; (10005fc8 <optiga_cmd_calc_hash_handler+0x234>)
10005db2:	4886      	ldr	r0, [pc, #536]	; (10005fcc <optiga_cmd_calc_hash_handler+0x238>)
10005db4:	4986      	ldr	r1, [pc, #536]	; (10005fd0 <optiga_cmd_calc_hash_handler+0x23c>)
10005db6:	f7fe fcbf 	bl	10004738 <optiga_lib_print_message>
            //Hash Input
            // tag setting
            me->chaining_ongoing = FALSE;
10005dba:	2300      	movs	r3, #0
10005dbc:	75eb      	strb	r3, [r5, #23]
            p_optiga_calc_hash->chaining_status = FALSE;
10005dbe:	7623      	strb	r3, [r4, #24]


            // add data if available
            if (NULL != p_optiga_calc_hash->p_hash_data)
10005dc0:	6863      	ldr	r3, [r4, #4]
10005dc2:	682a      	ldr	r2, [r5, #0]
10005dc4:	2b00      	cmp	r3, #0
10005dc6:	d037      	beq.n	10005e38 <optiga_cmd_calc_hash_handler+0xa4>
            {
                //continue
                 *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->hash_sequence;
10005dc8:	8833      	ldrh	r3, [r6, #0]
10005dca:	4f82      	ldr	r7, [pc, #520]	; (10005fd4 <optiga_cmd_calc_hash_handler+0x240>)
10005dcc:	1c58      	adds	r0, r3, #1
10005dce:	b280      	uxth	r0, r0
10005dd0:	8030      	strh	r0, [r6, #0]
10005dd2:	7b21      	ldrb	r1, [r4, #12]
10005dd4:	18d2      	adds	r2, r2, r3
10005dd6:	7351      	strb	r1, [r2, #13]
10005dd8:	69e3      	ldr	r3, [r4, #28]
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEX_HEADER)) - 
10005dda:	6922      	ldr	r2, [r4, #16]
10005ddc:	1aff      	subs	r7, r7, r3
10005dde:	6863      	ldr	r3, [r4, #4]
10005de0:	1a3f      	subs	r7, r7, r0
10005de2:	685b      	ldr	r3, [r3, #4]
10005de4:	1a9b      	subs	r3, r3, r2
10005de6:	429f      	cmp	r7, r3
10005de8:	d900      	bls.n	10005dec <optiga_cmd_calc_hash_handler+0x58>
10005dea:	1c1f      	adds	r7, r3, #0
10005dec:	b2bb      	uxth	r3, r7
10005dee:	9301      	str	r3, [sp, #4]
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
10005df0:	682b      	ldr	r3, [r5, #0]
10005df2:	9901      	ldr	r1, [sp, #4]
10005df4:	1818      	adds	r0, r3, r0
10005df6:	300d      	adds	r0, #13
10005df8:	f7fe fc34 	bl	10004664 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005dfc:	8830      	ldrh	r0, [r6, #0]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005dfe:	682b      	ldr	r3, [r5, #0]
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEX_HEADER)) - 
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005e00:	3002      	adds	r0, #2
10005e02:	b280      	uxth	r0, r0
10005e04:	8030      	strh	r0, [r6, #0]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005e06:	1818      	adds	r0, r3, r0
10005e08:	6863      	ldr	r3, [r4, #4]
10005e0a:	b2bf      	uxth	r7, r7
10005e0c:	6819      	ldr	r1, [r3, #0]
10005e0e:	6923      	ldr	r3, [r4, #16]
10005e10:	1c3a      	adds	r2, r7, #0
10005e12:	18c9      	adds	r1, r1, r3
10005e14:	300d      	adds	r0, #13
10005e16:	f006 fdc8 	bl	1000c9aa <memcpy>
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;
10005e1a:	8833      	ldrh	r3, [r6, #0]
10005e1c:	9a01      	ldr	r2, [sp, #4]
10005e1e:	18d3      	adds	r3, r2, r3
10005e20:	8033      	strh	r3, [r6, #0]

                p_optiga_calc_hash->data_sent += length_to_hash;
10005e22:	6923      	ldr	r3, [r4, #16]
10005e24:	18ff      	adds	r7, r7, r3
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
10005e26:	6863      	ldr	r3, [r4, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;

                p_optiga_calc_hash->data_sent += length_to_hash;
10005e28:	6127      	str	r7, [r4, #16]
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
10005e2a:	685b      	ldr	r3, [r3, #4]
10005e2c:	429f      	cmp	r7, r3
10005e2e:	d031      	beq.n	10005e94 <optiga_cmd_calc_hash_handler+0x100>
                {
                    me->chaining_ongoing = TRUE;
10005e30:	2301      	movs	r3, #1
10005e32:	75eb      	strb	r3, [r5, #23]
                    p_optiga_calc_hash->chaining_status = TRUE;
10005e34:	7623      	strb	r3, [r4, #24]
10005e36:	e02d      	b.n	10005e94 <optiga_cmd_calc_hash_handler+0x100>
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
10005e38:	6821      	ldr	r1, [r4, #0]
10005e3a:	7b20      	ldrb	r0, [r4, #12]
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->hash_sequence,
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
10005e3c:	320d      	adds	r2, #13
                {
                    me->chaining_ongoing = TRUE;
                    p_optiga_calc_hash->chaining_status = TRUE;
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
10005e3e:	2900      	cmp	r1, #0
10005e40:	d025      	beq.n	10005e8e <optiga_cmd_calc_hash_handler+0xfa>
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->hash_sequence,
10005e42:	2106      	movs	r1, #6
10005e44:	1c33      	adds	r3, r6, #0
10005e46:	f7fe fd9b 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005e4a:	682b      	ldr	r3, [r5, #0]
10005e4c:	8830      	ldrh	r0, [r6, #0]
10005e4e:	1818      	adds	r0, r3, r0
10005e50:	6823      	ldr	r3, [r4, #0]
10005e52:	300d      	adds	r0, #13
10005e54:	8819      	ldrh	r1, [r3, #0]
10005e56:	f7fe fc05 	bl	10004664 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005e5a:	8830      	ldrh	r0, [r6, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005e5c:	682b      	ldr	r3, [r5, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005e5e:	3002      	adds	r0, #2
10005e60:	b280      	uxth	r0, r0
10005e62:	8030      	strh	r0, [r6, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005e64:	1818      	adds	r0, r3, r0
10005e66:	6823      	ldr	r3, [r4, #0]
10005e68:	300d      	adds	r0, #13
10005e6a:	8859      	ldrh	r1, [r3, #2]
10005e6c:	f7fe fbfa 	bl	10004664 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->offset);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005e70:	8830      	ldrh	r0, [r6, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005e72:	682b      	ldr	r3, [r5, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->offset);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005e74:	3002      	adds	r0, #2
10005e76:	b280      	uxth	r0, r0
10005e78:	8030      	strh	r0, [r6, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005e7a:	1818      	adds	r0, r3, r0
10005e7c:	6823      	ldr	r3, [r4, #0]
10005e7e:	300d      	adds	r0, #13
10005e80:	8899      	ldrh	r1, [r3, #4]
10005e82:	f7fe fbef 	bl	10004664 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005e86:	8833      	ldrh	r3, [r6, #0]
10005e88:	3302      	adds	r3, #2
10005e8a:	8033      	strh	r3, [r6, #0]
10005e8c:	e002      	b.n	10005e94 <optiga_cmd_calc_hash_handler+0x100>
            }
            else
            {
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->hash_sequence,
10005e8e:	1c33      	adds	r3, r6, #0
10005e90:	f7fe fd76 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                               OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                               me->p_optiga->optiga_comms_buffer,
                                               (uint16_t*)&index_for_data);
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
10005e94:	68a3      	ldr	r3, [r4, #8]
10005e96:	2b00      	cmp	r3, #0
10005e98:	d024      	beq.n	10005ee4 <optiga_cmd_calc_hash_handler+0x150>
10005e9a:	69e3      	ldr	r3, [r4, #28]
10005e9c:	2b00      	cmp	r3, #0
10005e9e:	d021      	beq.n	10005ee4 <optiga_cmd_calc_hash_handler+0x150>
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
10005ea0:	8833      	ldrh	r3, [r6, #0]
10005ea2:	682a      	ldr	r2, [r5, #0]
10005ea4:	1c58      	adds	r0, r3, #1
10005ea6:	18d3      	adds	r3, r2, r3
10005ea8:	2206      	movs	r2, #6
10005eaa:	b280      	uxth	r0, r0
10005eac:	8030      	strh	r0, [r6, #0]
10005eae:	735a      	strb	r2, [r3, #13]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
10005eb0:	682b      	ldr	r3, [r5, #0]
10005eb2:	1818      	adds	r0, r3, r0
10005eb4:	68a3      	ldr	r3, [r4, #8]
10005eb6:	300d      	adds	r0, #13
10005eb8:	8899      	ldrh	r1, [r3, #4]
10005eba:	f7fe fbd3 	bl	10004664 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005ebe:	8830      	ldrh	r0, [r6, #0]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005ec0:	682a      	ldr	r2, [r5, #0]
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005ec2:	3002      	adds	r0, #2

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005ec4:	68a3      	ldr	r3, [r4, #8]
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
10005ec6:	b280      	uxth	r0, r0
10005ec8:	8030      	strh	r0, [r6, #0]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
10005eca:	1810      	adds	r0, r2, r0
10005ecc:	6819      	ldr	r1, [r3, #0]
10005ece:	889a      	ldrh	r2, [r3, #4]
10005ed0:	300d      	adds	r0, #13
10005ed2:	f006 fd6a 	bl	1000c9aa <memcpy>
                              p_optiga_calc_hash->p_hash_context->context_buffer,
                              p_optiga_calc_hash->p_hash_context->context_buffer_length);

                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
10005ed6:	68a3      	ldr	r3, [r4, #8]
10005ed8:	889a      	ldrh	r2, [r3, #4]
10005eda:	8833      	ldrh	r3, [r6, #0]
10005edc:	18d3      	adds	r3, r2, r3
10005ede:	8033      	strh	r3, [r6, #0]
                p_optiga_calc_hash->apparent_context_size = 0;
10005ee0:	2300      	movs	r3, #0
10005ee2:	61e3      	str	r3, [r4, #28]
            }

            //Export Option
            if ((OPTIGA_CRYPT_HASH_FINAL != p_optiga_calc_hash->hash_sequence)&&
10005ee4:	7b23      	ldrb	r3, [r4, #12]
10005ee6:	2b03      	cmp	r3, #3
10005ee8:	d008      	beq.n	10005efc <optiga_cmd_calc_hash_handler+0x168>
10005eea:	7de9      	ldrb	r1, [r5, #23]
10005eec:	2900      	cmp	r1, #0
10005eee:	d105      	bne.n	10005efc <optiga_cmd_calc_hash_handler+0x168>
                (FALSE == me->chaining_ongoing))
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
10005ef0:	682a      	ldr	r2, [r5, #0]

            //Export Option
            if ((OPTIGA_CRYPT_HASH_FINAL != p_optiga_calc_hash->hash_sequence)&&
                (FALSE == me->chaining_ongoing))
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
10005ef2:	2007      	movs	r0, #7
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
10005ef4:	320d      	adds	r2, #13

            //Export Option
            if ((OPTIGA_CRYPT_HASH_FINAL != p_optiga_calc_hash->hash_sequence)&&
                (FALSE == me->chaining_ongoing))
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
10005ef6:	1c33      	adds	r3, r6, #0
10005ef8:	f7fe fd42 	bl	10004980 <optiga_cmd_prepare_tag_header>
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
10005efc:	8833      	ldrh	r3, [r6, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005efe:	24b0      	movs	r4, #176	; 0xb0
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
10005f00:	1c19      	adds	r1, r3, #0
10005f02:	7e28      	ldrb	r0, [r5, #24]
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10005f04:	682a      	ldr	r2, [r5, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
10005f06:	3909      	subs	r1, #9
10005f08:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
10005f0a:	74d0      	strb	r0, [r2, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005f0c:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10005f0e:	7494      	strb	r4, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10005f10:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10005f12:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
10005f14:	682a      	ldr	r2, [r5, #0]
10005f16:	3b05      	subs	r3, #5
10005f18:	8093      	strh	r3, [r2, #4]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
10005f1a:	2309      	movs	r3, #9
10005f1c:	75ab      	strb	r3, [r5, #22]
10005f1e:	e04e      	b.n	10005fbe <optiga_cmd_calc_hash_handler+0x22a>
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate hash command...");
10005f20:	4e2b      	ldr	r6, [pc, #172]	; (10005fd0 <optiga_cmd_calc_hash_handler+0x23c>)
10005f22:	4f29      	ldr	r7, [pc, #164]	; (10005fc8 <optiga_cmd_calc_hash_handler+0x234>)
10005f24:	482c      	ldr	r0, [pc, #176]	; (10005fd8 <optiga_cmd_calc_hash_handler+0x244>)
10005f26:	1c31      	adds	r1, r6, #0
10005f28:	1c3a      	adds	r2, r7, #0
10005f2a:	f7fe fc05 	bl	10004738 <optiga_lib_print_message>
            // check if the write was successful
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10005f2e:	6828      	ldr	r0, [r5, #0]
10005f30:	7c83      	ldrb	r3, [r0, #18]
10005f32:	2bff      	cmp	r3, #255	; 0xff
10005f34:	d109      	bne.n	10005f4a <optiga_cmd_calc_hash_handler+0x1b6>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
10005f36:	1c3a      	adds	r2, r7, #0
10005f38:	4828      	ldr	r0, [pc, #160]	; (10005fdc <optiga_cmd_calc_hash_handler+0x248>)
10005f3a:	1c31      	adds	r1, r6, #0
10005f3c:	f7fe fbfc 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
10005f40:	237f      	movs	r3, #127	; 0x7f
10005f42:	7f2a      	ldrb	r2, [r5, #28]
10005f44:	4013      	ands	r3, r2
10005f46:	772b      	strb	r3, [r5, #28]
10005f48:	e03b      	b.n	10005fc2 <optiga_cmd_calc_hash_handler+0x22e>
                break;
            }
            if (OPTIGA_CRYPT_HASH_FINAL == p_optiga_calc_hash->hash_sequence)
10005f4a:	7b23      	ldrb	r3, [r4, #12]
10005f4c:	2b03      	cmp	r3, #3
10005f4e:	d10f      	bne.n	10005f70 <optiga_cmd_calc_hash_handler+0x1dc>
            {
                if (OPTIGA_CRYPT_HASH_DIGEST_OUT != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
10005f50:	7d83      	ldrb	r3, [r0, #22]
10005f52:	2b01      	cmp	r3, #1
10005f54:	d135      	bne.n	10005fc2 <optiga_cmd_calc_hash_handler+0x22e>
                {
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
10005f56:	ab02      	add	r3, sp, #8
10005f58:	1d9e      	adds	r6, r3, #6
10005f5a:	1c31      	adds	r1, r6, #0
10005f5c:	3017      	adds	r0, #23
10005f5e:	f7fe fb8d 	bl	1000467c <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);

                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
10005f62:	6829      	ldr	r1, [r5, #0]
10005f64:	6960      	ldr	r0, [r4, #20]
10005f66:	8832      	ldrh	r2, [r6, #0]
10005f68:	3119      	adds	r1, #25
10005f6a:	f006 fd1e 	bl	1000c9aa <memcpy>
10005f6e:	e021      	b.n	10005fb4 <optiga_cmd_calc_hash_handler+0x220>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            }
            else if ((OPTIGA_CRYPT_HASH_FINAL != p_optiga_calc_hash->hash_sequence) &&
10005f70:	7e23      	ldrb	r3, [r4, #24]
10005f72:	2b00      	cmp	r3, #0
10005f74:	d11e      	bne.n	10005fb4 <optiga_cmd_calc_hash_handler+0x220>
                    (FALSE == p_optiga_calc_hash->chaining_status))
            {
                if (OPTIGA_CRYPT_INTERMEDIATE != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
10005f76:	7d83      	ldrb	r3, [r0, #22]
10005f78:	2b06      	cmp	r3, #6
10005f7a:	d122      	bne.n	10005fc2 <optiga_cmd_calc_hash_handler+0x22e>
                {
                    break;
                }

                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
10005f7c:	ab02      	add	r3, sp, #8
10005f7e:	1d99      	adds	r1, r3, #6
10005f80:	3017      	adds	r0, #23
10005f82:	f7fe fb7b 	bl	1000467c <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);
                if (p_optiga_calc_hash->p_hash_context->context_buffer_length < out_data_size)
10005f86:	68a3      	ldr	r3, [r4, #8]
10005f88:	aa02      	add	r2, sp, #8
10005f8a:	88d2      	ldrh	r2, [r2, #6]
10005f8c:	8899      	ldrh	r1, [r3, #4]
10005f8e:	4291      	cmp	r1, r2
10005f90:	d207      	bcs.n	10005fa2 <optiga_cmd_calc_hash_handler+0x20e>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
10005f92:	4812      	ldr	r0, [pc, #72]	; (10005fdc <optiga_cmd_calc_hash_handler+0x248>)
10005f94:	1c31      	adds	r1, r6, #0
10005f96:	1c3a      	adds	r2, r7, #0
10005f98:	f7fe fbce 	bl	10004738 <optiga_lib_print_message>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
10005f9c:	2081      	movs	r0, #129	; 0x81
10005f9e:	0080      	lsls	r0, r0, #2
                    break;
10005fa0:	e010      	b.n	10005fc4 <optiga_cmd_calc_hash_handler+0x230>
                }

                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
10005fa2:	6829      	ldr	r1, [r5, #0]
10005fa4:	6818      	ldr	r0, [r3, #0]
10005fa6:	3119      	adds	r1, #25
10005fa8:	f006 fcff 	bl	1000c9aa <memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
10005fac:	aa02      	add	r2, sp, #8
10005fae:	68a3      	ldr	r3, [r4, #8]
10005fb0:	88d2      	ldrh	r2, [r2, #6]
10005fb2:	809a      	strh	r2, [r3, #4]
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
10005fb4:	480a      	ldr	r0, [pc, #40]	; (10005fe0 <optiga_cmd_calc_hash_handler+0x24c>)
10005fb6:	4906      	ldr	r1, [pc, #24]	; (10005fd0 <optiga_cmd_calc_hash_handler+0x23c>)
10005fb8:	4a03      	ldr	r2, [pc, #12]	; (10005fc8 <optiga_cmd_calc_hash_handler+0x234>)
10005fba:	f7fe fbbd 	bl	10004738 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
10005fbe:	2000      	movs	r0, #0
        }
        break;
10005fc0:	e000      	b.n	10005fc4 <optiga_cmd_calc_hash_handler+0x230>
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10005fc2:	4808      	ldr	r0, [pc, #32]	; (10005fe4 <optiga_cmd_calc_hash_handler+0x250>)
        default:
            break;
    }

    return (return_status);
}
10005fc4:	b005      	add	sp, #20
10005fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005fc8:	1000d2dc 	.word	0x1000d2dc
10005fcc:	1000dea2 	.word	0x1000dea2
10005fd0:	1000d6cc 	.word	0x1000d6cc
10005fd4:	0000060c 	.word	0x0000060c
10005fd8:	1000dec3 	.word	0x1000dec3
10005fdc:	1000def5 	.word	0x1000def5
10005fe0:	1000df24 	.word	0x1000df24
10005fe4:	00000202 	.word	0x00000202

10005fe8 <optiga_cmd_close_application_handler>:

/*
* Close Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_close_application_handler(optiga_cmd_t * me)
{
10005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
10005fea:	7d83      	ldrb	r3, [r0, #22]

/*
* Close Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_close_application_handler(optiga_cmd_t * me)
{
10005fec:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
10005fee:	2b08      	cmp	r3, #8
10005ff0:	d002      	beq.n	10005ff8 <optiga_cmd_close_application_handler+0x10>
10005ff2:	2b09      	cmp	r3, #9
10005ff4:	d011      	beq.n	1000601a <optiga_cmd_close_application_handler+0x32>
10005ff6:	e04c      	b.n	10006092 <optiga_cmd_close_application_handler+0xaa>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending close app command..");
10005ff8:	4827      	ldr	r0, [pc, #156]	; (10006098 <optiga_cmd_close_application_handler+0xb0>)
10005ffa:	4928      	ldr	r1, [pc, #160]	; (1000609c <optiga_cmd_close_application_handler+0xb4>)
10005ffc:	4a28      	ldr	r2, [pc, #160]	; (100060a0 <optiga_cmd_close_application_handler+0xb8>)
10005ffe:	f7fe fb9b 	bl	10004738 <optiga_lib_print_message>
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10006002:	2000      	movs	r0, #0
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10006004:	21f1      	movs	r1, #241	; 0xf1
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
10006006:	7e22      	ldrb	r2, [r4, #24]
                                           me->cmd_param,
                                           OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10006008:	6823      	ldr	r3, [r4, #0]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
1000600a:	74da      	strb	r2, [r3, #19]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
                                           me->cmd_param,
                                           OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = OPTIGA_CMD_APDU_HEADER_SIZE;
1000600c:	2204      	movs	r2, #4
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000600e:	7499      	strb	r1, [r3, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10006010:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10006012:	7558      	strb	r0, [r3, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
                                           me->cmd_param,
                                           OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = OPTIGA_CMD_APDU_HEADER_SIZE;
10006014:	6823      	ldr	r3, [r4, #0]
10006016:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
10006018:	e03c      	b.n	10006094 <optiga_cmd_close_application_handler+0xac>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for close app command...");
1000601a:	4e20      	ldr	r6, [pc, #128]	; (1000609c <optiga_cmd_close_application_handler+0xb4>)
1000601c:	4d20      	ldr	r5, [pc, #128]	; (100060a0 <optiga_cmd_close_application_handler+0xb8>)
1000601e:	1c31      	adds	r1, r6, #0
10006020:	4820      	ldr	r0, [pc, #128]	; (100060a4 <optiga_cmd_close_application_handler+0xbc>)
10006022:	1c2a      	adds	r2, r5, #0
10006024:	f7fe fb88 	bl	10004738 <optiga_lib_print_message>
            // check if the close app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10006028:	6821      	ldr	r1, [r4, #0]
1000602a:	7c8f      	ldrb	r7, [r1, #18]
1000602c:	2f00      	cmp	r7, #0
1000602e:	d009      	beq.n	10006044 <optiga_cmd_close_application_handler+0x5c>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing close app response...");
10006030:	1c2a      	adds	r2, r5, #0
10006032:	481d      	ldr	r0, [pc, #116]	; (100060a8 <optiga_cmd_close_application_handler+0xc0>)
10006034:	1c31      	adds	r1, r6, #0
10006036:	f7fe fb7f 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
1000603a:	237f      	movs	r3, #127	; 0x7f
1000603c:	7f22      	ldrb	r2, [r4, #28]
1000603e:	4013      	ands	r3, r2
10006040:	7723      	strb	r3, [r4, #28]
10006042:	e026      	b.n	10006092 <optiga_cmd_close_application_handler+0xaa>
                break;
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
10006044:	7e23      	ldrb	r3, [r4, #24]
10006046:	2b00      	cmp	r3, #0
10006048:	d012      	beq.n	10006070 <optiga_cmd_close_application_handler+0x88>
            {
                pal_os_memcpy(me->p_optiga->optiga_context_handle_buffer,
1000604a:	23d0      	movs	r3, #208	; 0xd0
1000604c:	00db      	lsls	r3, r3, #3
1000604e:	18c8      	adds	r0, r1, r3
10006050:	2208      	movs	r2, #8
10006052:	3116      	adds	r1, #22
10006054:	f006 fca9 	bl	1000c9aa <memcpy>
_STATIC_H optiga_lib_status_t optiga_cmd_store_context(const optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
10006058:	8c20      	ldrh	r0, [r4, #32]
1000605a:	2800      	cmp	r0, #0
1000605c:	d008      	beq.n	10006070 <optiga_cmd_close_application_handler+0x88>
        {
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                   me->p_optiga->optiga_context_handle_buffer,
1000605e:	22d0      	movs	r2, #208	; 0xd0
10006060:	6823      	ldr	r3, [r4, #0]
10006062:	00d2      	lsls	r2, r2, #3
10006064:	1899      	adds	r1, r3, r2
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
10006066:	2208      	movs	r2, #8
10006068:	f7fb fa8c 	bl	10001584 <pal_os_datastore_write>
                                                   me->p_optiga->optiga_context_handle_buffer,
                                                   sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != return_status)
1000606c:	2800      	cmp	r0, #0
1000606e:	d108      	bne.n	10006082 <optiga_cmd_close_application_handler+0x9a>
                    pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
                                    sizeof(me->p_optiga->optiga_context_handle_buffer));
                    break;
                }
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of close app command is processed...");
10006070:	480e      	ldr	r0, [pc, #56]	; (100060ac <optiga_cmd_close_application_handler+0xc4>)
10006072:	490a      	ldr	r1, [pc, #40]	; (1000609c <optiga_cmd_close_application_handler+0xb4>)
10006074:	4a0a      	ldr	r2, [pc, #40]	; (100060a0 <optiga_cmd_close_application_handler+0xb8>)
10006076:	f7fe fb5f 	bl	10004738 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;

            // Close Application is successful, invoke optiga_comms_close next
            me->chaining_ongoing = START_OPTIGA_COMMS_CLOSE;
1000607a:	2302      	movs	r3, #2
                                    sizeof(me->p_optiga->optiga_context_handle_buffer));
                    break;
                }
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of close app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
1000607c:	2000      	movs	r0, #0

            // Close Application is successful, invoke optiga_comms_close next
            me->chaining_ongoing = START_OPTIGA_COMMS_CLOSE;
1000607e:	75e3      	strb	r3, [r4, #23]
10006080:	e008      	b.n	10006094 <optiga_cmd_close_application_handler+0xac>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
                ///Optiga context store operation
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_store_context(me))
                {
                    pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
10006082:	23d0      	movs	r3, #208	; 0xd0
10006084:	6820      	ldr	r0, [r4, #0]
10006086:	00db      	lsls	r3, r3, #3
10006088:	18c0      	adds	r0, r0, r3
1000608a:	1c39      	adds	r1, r7, #0
1000608c:	2208      	movs	r2, #8
1000608e:	f006 fc95 	bl	1000c9bc <memset>
* Close Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_close_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
10006092:	4807      	ldr	r0, [pc, #28]	; (100060b0 <optiga_cmd_close_application_handler+0xc8>)
        default:
            break;
    }

    return (return_status);
}
10006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10006096:	46c0      	nop			; (mov r8, r8)
10006098:	1000df57 	.word	0x1000df57
1000609c:	1000d6cc 	.word	0x1000d6cc
100060a0:	1000d2dc 	.word	0x1000d2dc
100060a4:	1000df73 	.word	0x1000df73
100060a8:	1000dfa0 	.word	0x1000dfa0
100060ac:	1000dfca 	.word	0x1000dfca
100060b0:	00000202 	.word	0x00000202

100060b4 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
100060b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
100060b6:	7d85      	ldrb	r5, [r0, #22]

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
100060b8:	1c04      	adds	r4, r0, #0
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
100060ba:	2d08      	cmp	r5, #8
100060bc:	d002      	beq.n	100060c4 <optiga_cmd_open_application_handler+0x10>
100060be:	2d09      	cmp	r5, #9
100060c0:	d063      	beq.n	1000618a <optiga_cmd_open_application_handler+0xd6>
100060c2:	e080      	b.n	100061c6 <optiga_cmd_open_application_handler+0x112>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending open app command...");
100060c4:	4841      	ldr	r0, [pc, #260]	; (100061cc <optiga_cmd_open_application_handler+0x118>)
100060c6:	4942      	ldr	r1, [pc, #264]	; (100061d0 <optiga_cmd_open_application_handler+0x11c>)
100060c8:	4a42      	ldr	r2, [pc, #264]	; (100061d4 <optiga_cmd_open_application_handler+0x120>)
100060ca:	f7fe fb35 	bl	10004738 <optiga_lib_print_message>
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
100060ce:	7e23      	ldrb	r3, [r4, #24]
100060d0:	2b00      	cmp	r3, #0
100060d2:	d105      	bne.n	100060e0 <optiga_cmd_open_application_handler+0x2c>
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
100060d4:	7e21      	ldrb	r1, [r4, #24]
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
                {
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
100060d6:	2210      	movs	r2, #16
100060d8:	2900      	cmp	r1, #0
100060da:	d021      	beq.n	10006120 <optiga_cmd_open_application_handler+0x6c>
100060dc:	2218      	movs	r2, #24
100060de:	e01f      	b.n	10006120 <optiga_cmd_open_application_handler+0x6c>
{
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
100060e0:	8c20      	ldrh	r0, [r4, #32]
100060e2:	2800      	cmp	r0, #0
100060e4:	d108      	bne.n	100060f8 <optiga_cmd_open_application_handler+0x44>
            if (PAL_STATUS_SUCCESS != return_status)
            {
                break;
            }
        }
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
100060e6:	22d0      	movs	r2, #208	; 0xd0
100060e8:	6823      	ldr	r3, [r4, #0]
100060ea:	00d2      	lsls	r2, r2, #3
100060ec:	1898      	adds	r0, r3, r2
100060ee:	f7fe faad 	bl	1000464c <optiga_common_get_uint32>
100060f2:	2800      	cmp	r0, #0
100060f4:	d1ee      	bne.n	100060d4 <optiga_cmd_open_application_handler+0x20>
100060f6:	e00b      	b.n	10006110 <optiga_cmd_open_application_handler+0x5c>
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
100060f8:	466b      	mov	r3, sp
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
                                                  me->p_optiga->optiga_context_handle_buffer,
100060fa:	21d0      	movs	r1, #208	; 0xd0
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
100060fc:	1d9a      	adds	r2, r3, #6
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
                                                  me->p_optiga->optiga_context_handle_buffer,
100060fe:	6823      	ldr	r3, [r4, #0]
10006100:	00c9      	lsls	r1, r1, #3
10006102:	1859      	adds	r1, r3, r1
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
10006104:	8015      	strh	r5, [r2, #0]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
10006106:	f7fb fa59 	bl	100015bc <pal_os_datastore_read>
                                                  me->p_optiga->optiga_context_handle_buffer,
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
1000610a:	2800      	cmp	r0, #0
1000610c:	d0eb      	beq.n	100060e6 <optiga_cmd_open_application_handler+0x32>
1000610e:	e05a      	b.n	100061c6 <optiga_cmd_open_application_handler+0x112>
            {
                break;
            }
        }
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[4]))
10006110:	6823      	ldr	r3, [r4, #0]
10006112:	4a31      	ldr	r2, [pc, #196]	; (100061d8 <optiga_cmd_open_application_handler+0x124>)
10006114:	1898      	adds	r0, r3, r2
10006116:	f7fe fa99 	bl	1000464c <optiga_common_get_uint32>
            if (PAL_STATUS_SUCCESS != return_status)
            {
                break;
            }
        }
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
1000611a:	2800      	cmp	r0, #0
1000611c:	d053      	beq.n	100061c6 <optiga_cmd_open_application_handler+0x112>
1000611e:	e7d9      	b.n	100060d4 <optiga_cmd_open_application_handler+0x20>
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
10006120:	6823      	ldr	r3, [r4, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
10006122:	20f0      	movs	r0, #240	; 0xf0
    p_apdu_buffer [1] = param;
10006124:	74d9      	strb	r1, [r3, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
10006126:	2100      	movs	r1, #0
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
10006128:	755a      	strb	r2, [r3, #21]
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
1000612a:	7519      	strb	r1, [r3, #20]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
1000612c:	7498      	strb	r0, [r3, #18]
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
1000612e:	6820      	ldr	r0, [r4, #0]
10006130:	492a      	ldr	r1, [pc, #168]	; (100061dc <optiga_cmd_open_application_handler+0x128>)
10006132:	3016      	adds	r0, #22
10006134:	2210      	movs	r2, #16
10006136:	f006 fc38 	bl	1000c9aa <memcpy>
                          g_optiga_unique_application_identifier,
                          sizeof(g_optiga_unique_application_identifier));
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
1000613a:	7e23      	ldrb	r3, [r4, #24]
1000613c:	2b00      	cmp	r3, #0
1000613e:	d008      	beq.n	10006152 <optiga_cmd_open_application_handler+0x9e>
            {
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
10006140:	6821      	ldr	r1, [r4, #0]
10006142:	23d0      	movs	r3, #208	; 0xd0
10006144:	1c08      	adds	r0, r1, #0
10006146:	00db      	lsls	r3, r3, #3
10006148:	3026      	adds	r0, #38	; 0x26
1000614a:	18c9      	adds	r1, r1, r3
1000614c:	2208      	movs	r2, #8
1000614e:	f006 fc2c 	bl	1000c9aa <memcpy>
                              sizeof(g_optiga_unique_application_identifier)],
                              me->p_optiga->optiga_context_handle_buffer,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
            }

            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
10006152:	7e22      	ldrb	r2, [r4, #24]
10006154:	6820      	ldr	r0, [r4, #0]
10006156:	2314      	movs	r3, #20
10006158:	2a00      	cmp	r2, #0
1000615a:	d000      	beq.n	1000615e <optiga_cmd_open_application_handler+0xaa>
1000615c:	3308      	adds	r3, #8
1000615e:	8083      	strh	r3, [r0, #4]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           sizeof(g_optiga_unique_application_identifier):
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))));

            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
10006160:	23d0      	movs	r3, #208	; 0xd0
                {
                    return_status = OPTIGA_CMD_ERROR;
                    break;
                }
            }
            return_status = OPTIGA_LIB_SUCCESS;
10006162:	2500      	movs	r5, #0
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           sizeof(g_optiga_unique_application_identifier):
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))));

            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
10006164:	00db      	lsls	r3, r3, #3
10006166:	18c0      	adds	r0, r0, r3
10006168:	2100      	movs	r1, #0
1000616a:	2208      	movs	r2, #8
1000616c:	f006 fc26 	bl	1000c9bc <memset>
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
10006170:	8c20      	ldrh	r0, [r4, #32]
10006172:	42a8      	cmp	r0, r5
10006174:	d028      	beq.n	100061c8 <optiga_cmd_open_application_handler+0x114>
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                       me->p_optiga->optiga_context_handle_buffer,
10006176:	23d0      	movs	r3, #208	; 0xd0
10006178:	6821      	ldr	r1, [r4, #0]
1000617a:	00db      	lsls	r3, r3, #3
1000617c:	18c9      	adds	r1, r1, r3
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
1000617e:	2208      	movs	r2, #8
10006180:	f7fb fa00 	bl	10001584 <pal_os_datastore_write>
                                                       me->p_optiga->optiga_context_handle_buffer,
                                                       sizeof(me->p_optiga->optiga_context_handle_buffer));
                if (PAL_STATUS_SUCCESS != return_status)
10006184:	42a8      	cmp	r0, r5
10006186:	d11e      	bne.n	100061c6 <optiga_cmd_open_application_handler+0x112>
10006188:	e01e      	b.n	100061c8 <optiga_cmd_open_application_handler+0x114>
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for open app command...");
1000618a:	4f11      	ldr	r7, [pc, #68]	; (100061d0 <optiga_cmd_open_application_handler+0x11c>)
1000618c:	4e11      	ldr	r6, [pc, #68]	; (100061d4 <optiga_cmd_open_application_handler+0x120>)
1000618e:	4814      	ldr	r0, [pc, #80]	; (100061e0 <optiga_cmd_open_application_handler+0x12c>)
10006190:	1c39      	adds	r1, r7, #0
10006192:	1c32      	adds	r2, r6, #0
10006194:	f7fe fad0 	bl	10004738 <optiga_lib_print_message>

            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
10006198:	6823      	ldr	r3, [r4, #0]
1000619a:	7c9d      	ldrb	r5, [r3, #18]
1000619c:	2d00      	cmp	r5, #0
1000619e:	d009      	beq.n	100061b4 <optiga_cmd_open_application_handler+0x100>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
100061a0:	1c32      	adds	r2, r6, #0
100061a2:	4810      	ldr	r0, [pc, #64]	; (100061e4 <optiga_cmd_open_application_handler+0x130>)
100061a4:	1c39      	adds	r1, r7, #0
100061a6:	f7fe fac7 	bl	10004738 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
100061aa:	237f      	movs	r3, #127	; 0x7f
100061ac:	7f22      	ldrb	r2, [r4, #28]
100061ae:	4013      	ands	r3, r2
100061b0:	7723      	strb	r3, [r4, #28]
100061b2:	e008      	b.n	100061c6 <optiga_cmd_open_application_handler+0x112>
                break;
            }
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
100061b4:	2233      	movs	r2, #51	; 0x33
100061b6:	681b      	ldr	r3, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
100061b8:	480b      	ldr	r0, [pc, #44]	; (100061e8 <optiga_cmd_open_application_handler+0x134>)
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
100061ba:	741a      	strb	r2, [r3, #16]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
100061bc:	1c39      	adds	r1, r7, #0
100061be:	1c32      	adds	r2, r6, #0
100061c0:	f7fe faba 	bl	10004738 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
100061c4:	e000      	b.n	100061c8 <optiga_cmd_open_application_handler+0x114>
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
100061c6:	4d09      	ldr	r5, [pc, #36]	; (100061ec <optiga_cmd_open_application_handler+0x138>)
        default:
            break;
    }

    return (return_status);
}
100061c8:	1c28      	adds	r0, r5, #0
100061ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100061cc:	1000dff8 	.word	0x1000dff8
100061d0:	1000d6cc 	.word	0x1000d6cc
100061d4:	1000d2dc 	.word	0x1000d2dc
100061d8:	00000684 	.word	0x00000684
100061dc:	1000e0c1 	.word	0x1000e0c1
100061e0:	1000e014 	.word	0x1000e014
100061e4:	1000e040 	.word	0x1000e040
100061e8:	1000e069 	.word	0x1000e069
100061ec:	00000202 	.word	0x00000202

100061f0 <optiga_cmd_queue_scheduler>:
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
100061f0:	23cf      	movs	r3, #207	; 0xcf
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
100061f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
100061f4:	00db      	lsls	r3, r3, #3
100061f6:	58c3      	ldr	r3, [r0, r3]
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
100061f8:	b08b      	sub	sp, #44	; 0x2c
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
100061fa:	9304      	str	r3, [sp, #16]
100061fc:	4b74      	ldr	r3, [pc, #464]	; (100063d0 <optiga_cmd_queue_scheduler+0x1e0>)
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
100061fe:	1c04      	adds	r4, r0, #0
10006200:	18c7      	adds	r7, r0, r3
10006202:	4b74      	ldr	r3, [pc, #464]	; (100063d4 <optiga_cmd_queue_scheduler+0x1e4>)
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
10006204:	1c3a      	adds	r2, r7, #0
10006206:	18c3      	adds	r3, r0, r3
10006208:	9303      	str	r3, [sp, #12]
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
1000620a:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
1000620c:	7811      	ldrb	r1, [r2, #0]
1000620e:	2902      	cmp	r1, #2
10006210:	d101      	bne.n	10006216 <optiga_cmd_queue_scheduler+0x26>
        {
            count++;
10006212:	3301      	adds	r3, #1
10006214:	b2db      	uxtb	r3, r3
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
10006216:	9903      	ldr	r1, [sp, #12]
10006218:	320c      	adds	r2, #12
1000621a:	428a      	cmp	r2, r1
1000621c:	d1f6      	bne.n	1000620c <optiga_cmd_queue_scheduler+0x1c>
1000621e:	1c3a      	adds	r2, r7, #0
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
10006220:	2b00      	cmp	r3, #0
10006222:	d10c      	bne.n	1000623e <optiga_cmd_queue_scheduler+0x4e>
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
10006224:	7811      	ldrb	r1, [r2, #0]
10006226:	2908      	cmp	r1, #8
10006228:	d101      	bne.n	1000622e <optiga_cmd_queue_scheduler+0x3e>
        {
            count++;
1000622a:	3301      	adds	r3, #1
1000622c:	b2db      	uxtb	r3, r3
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
1000622e:	9903      	ldr	r1, [sp, #12]
10006230:	320c      	adds	r2, #12
10006232:	428a      	cmp	r2, r1
10006234:	d1f6      	bne.n	10006224 <optiga_cmd_queue_scheduler+0x34>
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
10006236:	2b00      	cmp	r3, #0
10006238:	d100      	bne.n	1000623c <optiga_cmd_queue_scheduler+0x4c>
1000623a:	e0a0      	b.n	1000637e <optiga_cmd_queue_scheduler+0x18e>
1000623c:	1c3a      	adds	r2, r7, #0
1000623e:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
10006240:	7811      	ldrb	r1, [r2, #0]
10006242:	2904      	cmp	r1, #4
10006244:	d101      	bne.n	1000624a <optiga_cmd_queue_scheduler+0x5a>
        {
            count++;
10006246:	3301      	adds	r3, #1
10006248:	b2db      	uxtb	r3, r3
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
1000624a:	9903      	ldr	r1, [sp, #12]
1000624c:	320c      	adds	r2, #12
1000624e:	428a      	cmp	r2, r1
10006250:	d1f6      	bne.n	10006240 <optiga_cmd_queue_scheduler+0x50>

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
10006252:	2b01      	cmp	r3, #1
10006254:	d110      	bne.n	10006278 <optiga_cmd_queue_scheduler+0x88>
10006256:	23c7      	movs	r3, #199	; 0xc7
10006258:	00db      	lsls	r3, r3, #3
1000625a:	18e2      	adds	r2, r4, r3
1000625c:	3348      	adds	r3, #72	; 0x48
1000625e:	18e1      	adds	r1, r4, r3
10006260:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
10006262:	7810      	ldrb	r0, [r2, #0]
10006264:	2823      	cmp	r0, #35	; 0x23
10006266:	d101      	bne.n	1000626c <optiga_cmd_queue_scheduler+0x7c>
        {
            count++;
10006268:	3301      	adds	r3, #1
1000626a:	b2db      	uxtb	r3, r3
1000626c:	320c      	adds	r2, #12
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
1000626e:	428a      	cmp	r2, r1
10006270:	d1f7      	bne.n	10006262 <optiga_cmd_queue_scheduler+0x72>
    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
10006272:	2b00      	cmp	r3, #0
10006274:	d000      	beq.n	10006278 <optiga_cmd_queue_scheduler+0x88>
10006276:	e082      	b.n	1000637e <optiga_cmd_queue_scheduler+0x18e>
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
                                               p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
    }
    else
    {
        pal_os_event_stop(my_os_event);
10006278:	9804      	ldr	r0, [sp, #16]
1000627a:	f7fb f9c7 	bl	1000160c <pal_os_event_stop>
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
    uint32_t reference_time_stamp = 0xFFFFFFFF;
1000627e:	2301      	movs	r3, #1
10006280:	425b      	negs	r3, r3
10006282:	9302      	str	r3, [sp, #8]
10006284:	23c6      	movs	r3, #198	; 0xc6
10006286:	00db      	lsls	r3, r3, #3
10006288:	18e5      	adds	r5, r4, r3
1000628a:	2600      	movs	r6, #0
1000628c:	23ff      	movs	r3, #255	; 0xff
1000628e:	9606      	str	r6, [sp, #24]
10006290:	9301      	str	r3, [sp, #4]
10006292:	b2f3      	uxtb	r3, r6
10006294:	9307      	str	r3, [sp, #28]
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
            {
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
10006296:	1c3a      	adds	r2, r7, #0
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
10006298:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
1000629a:	7811      	ldrb	r1, [r2, #0]
1000629c:	2908      	cmp	r1, #8
1000629e:	d101      	bne.n	100062a4 <optiga_cmd_queue_scheduler+0xb4>
        {
            count++;
100062a0:	3301      	adds	r3, #1
100062a2:	b2db      	uxtb	r3, r3
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
100062a4:	9903      	ldr	r1, [sp, #12]
100062a6:	320c      	adds	r2, #12
100062a8:	428a      	cmp	r2, r1
100062aa:	d1f6      	bne.n	1000629a <optiga_cmd_queue_scheduler+0xaa>
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
            {
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);

                // if any slot has acquired strict lock, highest priority is given to it
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
100062ac:	2b01      	cmp	r3, #1
100062ae:	d10e      	bne.n	100062ce <optiga_cmd_queue_scheduler+0xde>
                {
                    // Select the slot which has acquired strict lock
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
100062b0:	22c6      	movs	r2, #198	; 0xc6
100062b2:	330b      	adds	r3, #11
100062b4:	4373      	muls	r3, r6
100062b6:	00d2      	lsls	r2, r2, #3
100062b8:	18e3      	adds	r3, r4, r3
100062ba:	189b      	adds	r3, r3, r2
100062bc:	891a      	ldrh	r2, [r3, #8]
100062be:	4b46      	ldr	r3, [pc, #280]	; (100063d8 <optiga_cmd_queue_scheduler+0x1e8>)
100062c0:	429a      	cmp	r2, r3
100062c2:	d110      	bne.n	100062e6 <optiga_cmd_queue_scheduler+0xf6>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
                    {
                        reference_time_stamp = p_queue_entry->arrival_time;
100062c4:	686b      	ldr	r3, [r5, #4]
100062c6:	9302      	str	r3, [sp, #8]
100062c8:	9b07      	ldr	r3, [sp, #28]
100062ca:	9301      	str	r3, [sp, #4]
100062cc:	e00b      	b.n	100062e6 <optiga_cmd_queue_scheduler+0xf6>

                }
                else
                {
                    // pick only requested queue slot and earliest arrival time
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
100062ce:	7a6a      	ldrb	r2, [r5, #9]
100062d0:	2a02      	cmp	r2, #2
100062d2:	d108      	bne.n	100062e6 <optiga_cmd_queue_scheduler+0xf6>
                    {
                        // remember that overflow has occurred in one of the entry
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
100062d4:	686b      	ldr	r3, [r5, #4]
100062d6:	9305      	str	r3, [sp, #20]
100062d8:	4b40      	ldr	r3, [pc, #256]	; (100063dc <optiga_cmd_queue_scheduler+0x1ec>)
100062da:	9905      	ldr	r1, [sp, #20]
100062dc:	58e3      	ldr	r3, [r4, r3]
100062de:	4299      	cmp	r1, r3
100062e0:	d255      	bcs.n	1000638e <optiga_cmd_queue_scheduler+0x19e>
                        {
                            overflow_detected = TRUE;
100062e2:	2301      	movs	r3, #1
100062e4:	9306      	str	r3, [sp, #24]
100062e6:	3601      	adds	r6, #1
100062e8:	350c      	adds	r5, #12
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
100062ea:	2e06      	cmp	r6, #6
100062ec:	d1d1      	bne.n	10006292 <optiga_cmd_queue_scheduler+0xa2>
                    }


                }
            }
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
100062ee:	9b01      	ldr	r3, [sp, #4]
100062f0:	2bff      	cmp	r3, #255	; 0xff
100062f2:	d106      	bne.n	10006302 <optiga_cmd_queue_scheduler+0x112>
100062f4:	9b06      	ldr	r3, [sp, #24]
100062f6:	2b01      	cmp	r3, #1
100062f8:	d141      	bne.n	1000637e <optiga_cmd_queue_scheduler+0x18e>
        do
        {
            //reset overflow detected flag and the last_time stamp
            if(overflow_detected == TRUE)
            {
                p_optiga_ctx->last_time_stamp = 0;
100062fa:	2200      	movs	r2, #0
100062fc:	4b37      	ldr	r3, [pc, #220]	; (100063dc <optiga_cmd_queue_scheduler+0x1ec>)
100062fe:	50e2      	str	r2, [r4, r3]
10006300:	e7c0      	b.n	10006284 <optiga_cmd_queue_scheduler+0x94>
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
10006302:	230c      	movs	r3, #12
10006304:	9a01      	ldr	r2, [sp, #4]
10006306:	4353      	muls	r3, r2
10006308:	22c7      	movs	r2, #199	; 0xc7
1000630a:	18e3      	adds	r3, r4, r3
1000630c:	00d2      	lsls	r2, r2, #3
1000630e:	189a      	adds	r2, r3, r2
10006310:	7812      	ldrb	r2, [r2, #0]
10006312:	2a22      	cmp	r2, #34	; 0x22
10006314:	d11a      	bne.n	1000634c <optiga_cmd_queue_scheduler+0x15c>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
10006316:	22c6      	movs	r2, #198	; 0xc6
10006318:	00d2      	lsls	r2, r2, #3
1000631a:	189b      	adds	r3, r3, r2
1000631c:	6818      	ldr	r0, [r3, #0]
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
1000631e:	8a83      	ldrh	r3, [r0, #20]
10006320:	2b00      	cmp	r3, #0
10006322:	d113      	bne.n	1000634c <optiga_cmd_queue_scheduler+0x15c>
/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
10006324:	6803      	ldr	r3, [r0, #0]
10006326:	1c1d      	adds	r5, r3, #0
10006328:	330c      	adds	r3, #12
1000632a:	3508      	adds	r5, #8
1000632c:	1c19      	adds	r1, r3, #0
1000632e:	1c2b      	adds	r3, r5, #0
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
10006330:	781e      	ldrb	r6, [r3, #0]
10006332:	1b5a      	subs	r2, r3, r5
10006334:	b2d2      	uxtb	r2, r2
10006336:	2e10      	cmp	r6, #16
10006338:	d005      	beq.n	10006346 <optiga_cmd_queue_scheduler+0x156>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
1000633a:	4929      	ldr	r1, [pc, #164]	; (100063e0 <optiga_cmd_queue_scheduler+0x1f0>)
1000633c:	430a      	orrs	r2, r1
1000633e:	8282      	strh	r2, [r0, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
10006340:	2210      	movs	r2, #16
10006342:	701a      	strb	r2, [r3, #0]
10006344:	e002      	b.n	1000634c <optiga_cmd_queue_scheduler+0x15c>
10006346:	3301      	adds	r3, #1
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
10006348:	428b      	cmp	r3, r1
1000634a:	d1f1      	bne.n	10006330 <optiga_cmd_queue_scheduler+0x140>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
                // Improve : Change the state of the type here. This will reduce 0x0000 check
            }

            // schedule with selected context
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
1000634c:	250c      	movs	r5, #12
1000634e:	9b01      	ldr	r3, [sp, #4]
10006350:	435d      	muls	r5, r3
10006352:	23c6      	movs	r3, #198	; 0xc6
10006354:	1965      	adds	r5, r4, r5
10006356:	00db      	lsls	r3, r3, #3
10006358:	18eb      	adds	r3, r5, r3
1000635a:	681a      	ldr	r2, [r3, #0]
1000635c:	23cf      	movs	r3, #207	; 0xcf
            pal_os_event_register_callback_oneshot(my_os_event,
1000635e:	6811      	ldr	r1, [r2, #0]
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
                // Improve : Change the state of the type here. This will reduce 0x0000 check
            }

            // schedule with selected context
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
10006360:	00db      	lsls	r3, r3, #3
            pal_os_event_register_callback_oneshot(my_os_event,
10006362:	58c8      	ldr	r0, [r1, r3]
10006364:	2332      	movs	r3, #50	; 0x32
10006366:	491f      	ldr	r1, [pc, #124]	; (100063e4 <optiga_cmd_queue_scheduler+0x1f4>)
10006368:	f7fb f96a 	bl	10001640 <pal_os_event_register_callback_oneshot>
                                                   optiga_cmd_event_trigger_execute,
                                                   ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx)),
                                                   OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
1000636c:	23c7      	movs	r3, #199	; 0xc7
1000636e:	00db      	lsls	r3, r3, #3
10006370:	18ed      	adds	r5, r5, r3
10006372:	2304      	movs	r3, #4
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
10006374:	9a02      	ldr	r2, [sp, #8]
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
            pal_os_event_register_callback_oneshot(my_os_event,
                                                   optiga_cmd_event_trigger_execute,
                                                   ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx)),
                                                   OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
10006376:	706b      	strb	r3, [r5, #1]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
10006378:	4b18      	ldr	r3, [pc, #96]	; (100063dc <optiga_cmd_queue_scheduler+0x1ec>)
1000637a:	50e2      	str	r2, [r4, r3]
1000637c:	e026      	b.n	100063cc <optiga_cmd_queue_scheduler+0x1dc>
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
1000637e:	23fa      	movs	r3, #250	; 0xfa
10006380:	9804      	ldr	r0, [sp, #16]
10006382:	4919      	ldr	r1, [pc, #100]	; (100063e8 <optiga_cmd_queue_scheduler+0x1f8>)
10006384:	1c22      	adds	r2, r4, #0
10006386:	009b      	lsls	r3, r3, #2
10006388:	f7fb f95a 	bl	10001640 <pal_os_event_register_callback_oneshot>
1000638c:	e01e      	b.n	100063cc <optiga_cmd_queue_scheduler+0x1dc>
                        {
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
1000638e:	9b05      	ldr	r3, [sp, #20]
10006390:	9902      	ldr	r1, [sp, #8]
10006392:	428b      	cmp	r3, r1
10006394:	d8a7      	bhi.n	100062e6 <optiga_cmd_queue_scheduler+0xf6>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
10006396:	7a2b      	ldrb	r3, [r5, #8]
                        {
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
10006398:	2b22      	cmp	r3, #34	; 0x22
1000639a:	d113      	bne.n	100063c4 <optiga_cmd_queue_scheduler+0x1d4>
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    memcpy(&status_check, p_optiga->sessions, OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS);
1000639c:	1c21      	adds	r1, r4, #0
1000639e:	2204      	movs	r2, #4
100063a0:	a809      	add	r0, sp, #36	; 0x24
100063a2:	3108      	adds	r1, #8
100063a4:	f006 fb01 	bl	1000c9aa <memcpy>
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
100063a8:	4b10      	ldr	r3, [pc, #64]	; (100063ec <optiga_cmd_queue_scheduler+0x1fc>)
100063aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
100063ac:	429a      	cmp	r2, r3
100063ae:	d804      	bhi.n	100063ba <optiga_cmd_queue_scheduler+0x1ca>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
                    {
                        // remember that overflow has occurred in one of the entry
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
                        {
                            overflow_detected = TRUE;
100063b0:	9b07      	ldr	r3, [sp, #28]
100063b2:	9301      	str	r3, [sp, #4]
100063b4:	9b05      	ldr	r3, [sp, #20]
100063b6:	9302      	str	r3, [sp, #8]
100063b8:	e795      	b.n	100062e6 <optiga_cmd_queue_scheduler+0xf6>
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
100063ba:	682b      	ldr	r3, [r5, #0]
100063bc:	8a9b      	ldrh	r3, [r3, #20]
100063be:	2b00      	cmp	r3, #0
100063c0:	d1f6      	bne.n	100063b0 <optiga_cmd_queue_scheduler+0x1c0>
100063c2:	e790      	b.n	100062e6 <optiga_cmd_queue_scheduler+0xf6>
100063c4:	4393      	bics	r3, r2
100063c6:	2b21      	cmp	r3, #33	; 0x21
100063c8:	d18d      	bne.n	100062e6 <optiga_cmd_queue_scheduler+0xf6>
100063ca:	e7f1      	b.n	100063b0 <optiga_cmd_queue_scheduler+0x1c0>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
100063cc:	b00b      	add	sp, #44	; 0x2c
100063ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100063d0:	00000639 	.word	0x00000639
100063d4:	00000681 	.word	0x00000681
100063d8:	00000823 	.word	0x00000823
100063dc:	0000067c 	.word	0x0000067c
100063e0:	ffffe100 	.word	0xffffe100
100063e4:	10004df9 	.word	0x10004df9
100063e8:	100061f1 	.word	0x100061f1
100063ec:	1010100f 	.word	0x1010100f

100063f0 <optiga_cmd_set_shielded_connection_option>:
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
    switch (shielded_connection_option)
100063f0:	2a01      	cmp	r2, #1
100063f2:	d007      	beq.n	10006404 <optiga_cmd_set_shielded_connection_option+0x14>
100063f4:	2a00      	cmp	r2, #0
100063f6:	d003      	beq.n	10006400 <optiga_cmd_set_shielded_connection_option+0x10>
100063f8:	2a02      	cmp	r2, #2
100063fa:	d104      	bne.n	10006406 <optiga_cmd_set_shielded_connection_option+0x16>
        }
        break;
        // Manage Context
        case OPTIGA_SET_MANAGE_CONTEXT:
        {
            me->manage_context_operation = value;
100063fc:	76c1      	strb	r1, [r0, #27]
        }
        break;
100063fe:	e002      	b.n	10006406 <optiga_cmd_set_shielded_connection_option+0x16>
    switch (shielded_connection_option)
    {
        // Protection Level
        case OPTIGA_SET_PROTECTION_LEVEL:
        {
            me->protection_level = value;
10006400:	7641      	strb	r1, [r0, #25]
        }
        break;
10006402:	e000      	b.n	10006406 <optiga_cmd_set_shielded_connection_option+0x16>
        // Protocol Version
        case OPTIGA_SET_PROTECTION_VERSION:
        {
            me->protocol_version = value;
10006404:	7681      	strb	r1, [r0, #26]
        }
        break;
        default:
        break;
    }
}
10006406:	4770      	bx	lr

10006408 <optiga_cmd_create>:
        }
    } while (FALSE == exit_loop);
}

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
10006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000640a:	1c16      	adds	r6, r2, #0
1000640c:	1c0f      	adds	r7, r1, #0
    optiga_cmd_t * me = NULL;

    pal_os_lock_enter_critical_section();
1000640e:	f7fb f943 	bl	10001698 <pal_os_lock_enter_critical_section>
10006412:	2200      	movs	r2, #0
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
10006414:	1c13      	adds	r3, r2, #0
10006416:	4925      	ldr	r1, [pc, #148]	; (100064ac <optiga_cmd_create+0xa4>)
10006418:	4d25      	ldr	r5, [pc, #148]	; (100064b0 <optiga_cmd_create+0xa8>)
1000641a:	1851      	adds	r1, r2, r1
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
1000641c:	5c69      	ldrb	r1, [r5, r1]
1000641e:	2900      	cmp	r1, #0
10006420:	d101      	bne.n	10006426 <optiga_cmd_create+0x1e>
        {
            count++;
10006422:	3301      	adds	r3, #1
10006424:	b2db      	uxtb	r3, r3
10006426:	320c      	adds	r2, #12
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga, uint8_t slot_member, uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
10006428:	2a48      	cmp	r2, #72	; 0x48
1000642a:	d1f4      	bne.n	10006416 <optiga_cmd_create+0xe>

    pal_os_lock_enter_critical_section();
    do
    {
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
1000642c:	2b00      	cmp	r3, #0
1000642e:	d101      	bne.n	10006434 <optiga_cmd_create+0x2c>
    } while (FALSE == exit_loop);
}

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
    optiga_cmd_t * me = NULL;
10006430:	2400      	movs	r4, #0
10006432:	e036      	b.n	100064a2 <optiga_cmd_create+0x9a>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
10006434:	2001      	movs	r0, #1
10006436:	2124      	movs	r1, #36	; 0x24
10006438:	f006 fa66 	bl	1000c908 <calloc>
1000643c:	1e04      	subs	r4, r0, #0
        if (NULL == me)
1000643e:	d0f7      	beq.n	10006430 <optiga_cmd_create+0x28>

        me->handler = handler;
        me->caller_context = caller_context;

        me->p_optiga = g_optiga_list[optiga_instance_id];
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
10006440:	2333      	movs	r3, #51	; 0x33
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
10006442:	6107      	str	r7, [r0, #16]
        me->caller_context = caller_context;
10006444:	60c6      	str	r6, [r0, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
10006446:	6005      	str	r5, [r0, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
10006448:	8403      	strh	r3, [r0, #32]

        if (FALSE == me->p_optiga->instance_init_state)
1000644a:	7b2b      	ldrb	r3, [r5, #12]
1000644c:	2b00      	cmp	r3, #0
1000644e:	d112      	bne.n	10006476 <optiga_cmd_create+0x6e>
        {
            me->p_optiga->instance_init_state = TRUE;
10006450:	3301      	adds	r3, #1
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
10006452:	1c29      	adds	r1, r5, #0
10006454:	4817      	ldr	r0, [pc, #92]	; (100064b4 <optiga_cmd_create+0xac>)
10006456:	26cf      	movs	r6, #207	; 0xcf
        me->p_optiga = g_optiga_list[optiga_instance_id];
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];

        if (FALSE == me->p_optiga->instance_init_state)
        {
            me->p_optiga->instance_init_state = TRUE;
10006458:	732b      	strb	r3, [r5, #12]
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
1000645a:	f7fb f90d 	bl	10001678 <pal_os_event_create>
1000645e:	00f6      	lsls	r6, r6, #3
10006460:	51a8      	str	r0, [r5, r6]
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
10006462:	1c21      	adds	r1, r4, #0
10006464:	4814      	ldr	r0, [pc, #80]	; (100064b8 <optiga_cmd_create+0xb0>)
10006466:	6825      	ldr	r5, [r4, #0]
10006468:	f7fe f874 	bl	10004554 <optiga_comms_create>
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
1000646c:	6823      	ldr	r3, [r4, #0]
        if (FALSE == me->p_optiga->instance_init_state)
        {
            me->p_optiga->instance_init_state = TRUE;
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
1000646e:	6028      	str	r0, [r5, #0]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
10006470:	681a      	ldr	r2, [r3, #0]
10006472:	599b      	ldr	r3, [r3, r6]
10006474:	6153      	str	r3, [r2, #20]
10006476:	4b0d      	ldr	r3, [pc, #52]	; (100064ac <optiga_cmd_create+0xa4>)
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
10006478:	6821      	ldr	r1, [r4, #0]
1000647a:	18ca      	adds	r2, r1, r3
1000647c:	2300      	movs	r3, #0
1000647e:	7815      	ldrb	r5, [r2, #0]
10006480:	b2d8      	uxtb	r0, r3
10006482:	2d00      	cmp	r5, #0
10006484:	d109      	bne.n	1000649a <optiga_cmd_create+0x92>
        {
            * queue_index_store =  index;
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
10006486:	220c      	movs	r2, #12
10006488:	4353      	muls	r3, r2
1000648a:	22c7      	movs	r2, #199	; 0xc7
1000648c:	18cb      	adds	r3, r1, r3
1000648e:	00d2      	lsls	r2, r2, #3
10006490:	189b      	adds	r3, r3, r2
10006492:	2201      	movs	r2, #1
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
        {
            * queue_index_store =  index;
10006494:	7760      	strb	r0, [r4, #29]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
10006496:	705a      	strb	r2, [r3, #1]
10006498:	e003      	b.n	100064a2 <optiga_cmd_create+0x9a>
1000649a:	3301      	adds	r3, #1
1000649c:	320c      	adds	r2, #12
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
1000649e:	2b06      	cmp	r3, #6
100064a0:	d1ed      	bne.n	1000647e <optiga_cmd_create+0x76>
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
    } while (FALSE);

    pal_os_lock_exit_critical_section();
100064a2:	f7fb f8fa 	bl	1000169a <pal_os_lock_exit_critical_section>
    return (me);
}
100064a6:	1c20      	adds	r0, r4, #0
100064a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100064aa:	46c0      	nop			; (mov r8, r8)
100064ac:	00000639 	.word	0x00000639
100064b0:	20002904 	.word	0x20002904
100064b4:	100061f1 	.word	0x100061f1
100064b8:	10004a7d 	.word	0x10004a7d

100064bc <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
100064bc:	b510      	push	{r4, lr}
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (NULL != me)
100064be:	2800      	cmp	r0, #0
100064c0:	d01d      	beq.n	100064fe <optiga_cmd_destroy+0x42>
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
100064c2:	8a83      	ldrh	r3, [r0, #20]
/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
100064c4:	6804      	ldr	r4, [r0, #0]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
100064c6:	2b00      	cmp	r3, #0
100064c8:	d005      	beq.n	100064d6 <optiga_cmd_destroy+0x1a>
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
100064ca:	220f      	movs	r2, #15
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
100064cc:	2100      	movs	r1, #0
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
100064ce:	4013      	ands	r3, r2
100064d0:	18e3      	adds	r3, r4, r3
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
100064d2:	8281      	strh	r1, [r0, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
100064d4:	7219      	strb	r1, [r3, #8]
/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
100064d6:	230c      	movs	r3, #12
100064d8:	7f42      	ldrb	r2, [r0, #29]
100064da:	6801      	ldr	r1, [r0, #0]
100064dc:	435a      	muls	r2, r3
100064de:	188a      	adds	r2, r1, r2
100064e0:	21c7      	movs	r1, #199	; 0xc7
100064e2:	2400      	movs	r4, #0
100064e4:	00c9      	lsls	r1, r1, #3
100064e6:	1852      	adds	r2, r2, r1
100064e8:	7054      	strb	r4, [r2, #1]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
100064ea:	7f42      	ldrb	r2, [r0, #29]
100064ec:	4353      	muls	r3, r2
100064ee:	6802      	ldr	r2, [r0, #0]
100064f0:	18d3      	adds	r3, r2, r3
100064f2:	185b      	adds	r3, r3, r1
100064f4:	701c      	strb	r4, [r3, #0]
        if (NULL != me)
        {
            return_status = optiga_cmd_release_session(me);
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
            pal_os_free(me);
100064f6:	f006 fa3f 	bl	1000c978 <free>
            return_status = OPTIGA_LIB_SUCCESS;
100064fa:	1c20      	adds	r0, r4, #0
100064fc:	e000      	b.n	10006500 <optiga_cmd_destroy+0x44>
    return (me);
}

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
100064fe:	4801      	ldr	r0, [pc, #4]	; (10006504 <optiga_cmd_destroy+0x48>)
            pal_os_free(me);
            return_status = OPTIGA_LIB_SUCCESS;
        }
    } while (FALSE);
    return (return_status);
}
10006500:	bd10      	pop	{r4, pc}
10006502:	46c0      	nop			; (mov r8, r8)
10006504:	00000202 	.word	0x00000202

10006508 <optiga_cmd_open_application>:
    return (return_status);
}


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
10006508:	b570      	push	{r4, r5, r6, lr}
1000650a:	1c04      	adds	r4, r0, #0
1000650c:	1c15      	adds	r5, r2, #0
1000650e:	1c0e      	adds	r6, r1, #0
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
10006510:	4a08      	ldr	r2, [pc, #32]	; (10006534 <optiga_cmd_open_application+0x2c>)
10006512:	4809      	ldr	r0, [pc, #36]	; (10006538 <optiga_cmd_open_application+0x30>)
10006514:	4909      	ldr	r1, [pc, #36]	; (1000653c <optiga_cmd_open_application+0x34>)
10006516:	f7fe f90f 	bl	10004738 <optiga_lib_print_message>
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
1000651a:	60a5      	str	r5, [r4, #8]
    me->cmd_next_execution_state = start_state;
1000651c:	2500      	movs	r5, #0
    me->cmd_hdlrs = cmd_hdlrs;
1000651e:	4b08      	ldr	r3, [pc, #32]	; (10006540 <optiga_cmd_open_application+0x38>)
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10006520:	75a5      	strb	r5, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10006522:	75e5      	strb	r5, [r4, #23]
    me->cmd_param = cmd_param;
10006524:	7626      	strb	r6, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10006526:	1c20      	adds	r0, r4, #0
10006528:	1c29      	adds	r1, r5, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
1000652a:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
1000652c:	f7fe faa6 	bl	10004a7c <optiga_cmd_execute_handler>
                       optiga_cmd_open_application_handler,
                       OPTIGA_CMD_EXEC_COMMS_OPEN,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
10006530:	1c28      	adds	r0, r5, #0
10006532:	bd70      	pop	{r4, r5, r6, pc}
10006534:	1000d2dc 	.word	0x1000d2dc
10006538:	1000e135 	.word	0x1000e135
1000653c:	1000d6cc 	.word	0x1000d6cc
10006540:	100060b5 	.word	0x100060b5

10006544 <optiga_cmd_close_application>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_close_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
10006544:	b570      	push	{r4, r5, r6, lr}
10006546:	1c04      	adds	r4, r0, #0
10006548:	1c15      	adds	r5, r2, #0
1000654a:	1c0e      	adds	r6, r1, #0
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
1000654c:	4a09      	ldr	r2, [pc, #36]	; (10006574 <optiga_cmd_close_application+0x30>)
1000654e:	480a      	ldr	r0, [pc, #40]	; (10006578 <optiga_cmd_close_application+0x34>)
10006550:	490a      	ldr	r1, [pc, #40]	; (1000657c <optiga_cmd_close_application+0x38>)
10006552:	f7fe f8f1 	bl	10004738 <optiga_lib_print_message>
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10006556:	2306      	movs	r3, #6
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10006558:	60a5      	str	r5, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
1000655a:	2500      	movs	r5, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
1000655c:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
1000655e:	4b08      	ldr	r3, [pc, #32]	; (10006580 <optiga_cmd_close_application+0x3c>)
    me->chaining_ongoing = FALSE;
10006560:	75e5      	strb	r5, [r4, #23]
    me->cmd_param = cmd_param;
10006562:	7626      	strb	r6, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10006564:	1c20      	adds	r0, r4, #0
10006566:	1c29      	adds	r1, r5, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10006568:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
1000656a:	f7fe fa87 	bl	10004a7c <optiga_cmd_execute_handler>
                       optiga_cmd_close_application_handler,
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
1000656e:	1c28      	adds	r0, r5, #0
10006570:	bd70      	pop	{r4, r5, r6, pc}
10006572:	46c0      	nop			; (mov r8, r8)
10006574:	1000d2dc 	.word	0x1000d2dc
10006578:	1000d63a 	.word	0x1000d63a
1000657c:	1000d6cc 	.word	0x1000d6cc
10006580:	10005fe9 	.word	0x10005fe9

10006584 <optiga_cmd_get_data_object>:
    return (return_status);
}

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
10006584:	b570      	push	{r4, r5, r6, lr}
10006586:	1c04      	adds	r4, r0, #0
10006588:	1c15      	adds	r5, r2, #0
1000658a:	1c0e      	adds	r6, r1, #0
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
1000658c:	4a09      	ldr	r2, [pc, #36]	; (100065b4 <optiga_cmd_get_data_object+0x30>)
1000658e:	480a      	ldr	r0, [pc, #40]	; (100065b8 <optiga_cmd_get_data_object+0x34>)
10006590:	490a      	ldr	r1, [pc, #40]	; (100065bc <optiga_cmd_get_data_object+0x38>)
10006592:	f7fe f8d1 	bl	10004738 <optiga_lib_print_message>
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10006596:	2306      	movs	r3, #6
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10006598:	60a5      	str	r5, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
1000659a:	2500      	movs	r5, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
1000659c:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
1000659e:	4b08      	ldr	r3, [pc, #32]	; (100065c0 <optiga_cmd_get_data_object+0x3c>)
    me->chaining_ongoing = FALSE;
100065a0:	75e5      	strb	r5, [r4, #23]
    me->cmd_param = cmd_param;
100065a2:	7626      	strb	r6, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
100065a4:	1c20      	adds	r0, r4, #0
100065a6:	1c29      	adds	r1, r5, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
100065a8:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
100065aa:	f7fe fa67 	bl	10004a7c <optiga_cmd_execute_handler>
                       optiga_cmd_get_data_object_handler,
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
100065ae:	1c28      	adds	r0, r5, #0
100065b0:	bd70      	pop	{r4, r5, r6, pc}
100065b2:	46c0      	nop			; (mov r8, r8)
100065b4:	1000d2dc 	.word	0x1000d2dc
100065b8:	1000e0e8 	.word	0x1000e0e8
100065bc:	1000d6cc 	.word	0x1000d6cc
100065c0:	10004e05 	.word	0x10004e05

100065c4 <optiga_cmd_set_data_object>:
}


optiga_lib_status_t optiga_cmd_set_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_set_data_object_params_t * params)
{
100065c4:	b570      	push	{r4, r5, r6, lr}
100065c6:	1c04      	adds	r4, r0, #0
100065c8:	1c15      	adds	r5, r2, #0
100065ca:	1c0e      	adds	r6, r1, #0
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
100065cc:	4a09      	ldr	r2, [pc, #36]	; (100065f4 <optiga_cmd_set_data_object+0x30>)
100065ce:	480a      	ldr	r0, [pc, #40]	; (100065f8 <optiga_cmd_set_data_object+0x34>)
100065d0:	490a      	ldr	r1, [pc, #40]	; (100065fc <optiga_cmd_set_data_object+0x38>)
100065d2:	f7fe f8b1 	bl	10004738 <optiga_lib_print_message>
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
100065d6:	2306      	movs	r3, #6
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
100065d8:	60a5      	str	r5, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
100065da:	2500      	movs	r5, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
100065dc:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
100065de:	4b08      	ldr	r3, [pc, #32]	; (10006600 <optiga_cmd_set_data_object+0x3c>)
    me->chaining_ongoing = FALSE;
100065e0:	75e5      	strb	r5, [r4, #23]
    me->cmd_param = cmd_param;
100065e2:	7626      	strb	r6, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
100065e4:	1c20      	adds	r0, r4, #0
100065e6:	1c29      	adds	r1, r5, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
100065e8:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
100065ea:	f7fe fa47 	bl	10004a7c <optiga_cmd_execute_handler>
                       optiga_cmd_set_data_object_handler,
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
100065ee:	1c28      	adds	r0, r5, #0
100065f0:	bd70      	pop	{r4, r5, r6, pc}
100065f2:	46c0      	nop			; (mov r8, r8)
100065f4:	1000d2dc 	.word	0x1000d2dc
100065f8:	1000e103 	.word	0x1000e103
100065fc:	1000d6cc 	.word	0x1000d6cc
10006600:	10004f69 	.word	0x10004f69

10006604 <optiga_cmd_get_random>:
    return (return_status);
}


optiga_lib_status_t optiga_cmd_get_random(optiga_cmd_t * me, uint8_t cmd_param, optiga_get_random_params_t * params)
{
10006604:	b570      	push	{r4, r5, r6, lr}
10006606:	1c0d      	adds	r5, r1, #0
10006608:	1c04      	adds	r4, r0, #0
1000660a:	1c16      	adds	r6, r2, #0
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
1000660c:	480a      	ldr	r0, [pc, #40]	; (10006638 <optiga_cmd_get_random+0x34>)
1000660e:	4a0b      	ldr	r2, [pc, #44]	; (1000663c <optiga_cmd_get_random+0x38>)
10006610:	490b      	ldr	r1, [pc, #44]	; (10006640 <optiga_cmd_get_random+0x3c>)
10006612:	f7fe f891 	bl	10004738 <optiga_lib_print_message>
    if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == cmd_param)
    {
        cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10006616:	1f2b      	subs	r3, r5, #4
10006618:	1e5a      	subs	r2, r3, #1
1000661a:	4193      	sbcs	r3, r2
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
1000661c:	60a6      	str	r6, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
1000661e:	2600      	movs	r6, #0
{
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    if (CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET == cmd_param)
    {
        cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10006620:	3305      	adds	r3, #5
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10006622:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10006624:	4b07      	ldr	r3, [pc, #28]	; (10006644 <optiga_cmd_get_random+0x40>)
    me->chaining_ongoing = FALSE;
10006626:	75e6      	strb	r6, [r4, #23]
    me->cmd_param = cmd_param;
10006628:	7625      	strb	r5, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
1000662a:	1c20      	adds	r0, r4, #0
1000662c:	1c31      	adds	r1, r6, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
1000662e:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10006630:	f7fe fa24 	bl	10004a7c <optiga_cmd_execute_handler>
                       optiga_cmd_get_random_handler,
                       cmd_handler_state,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
10006634:	1c30      	adds	r0, r6, #0
10006636:	bd70      	pop	{r4, r5, r6, pc}
10006638:	1000e096 	.word	0x1000e096
1000663c:	1000d2dc 	.word	0x1000d2dc
10006640:	1000d6cc 	.word	0x1000d6cc
10006644:	10005079 	.word	0x10005079

10006648 <optiga_cmd_calc_sign>:
    return (return_status);
}


optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
10006648:	b570      	push	{r4, r5, r6, lr}
1000664a:	1c15      	adds	r5, r2, #0
1000664c:	1c04      	adds	r4, r0, #0
1000664e:	1c0e      	adds	r6, r1, #0
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t*)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
10006650:	480e      	ldr	r0, [pc, #56]	; (1000668c <optiga_cmd_calc_sign+0x44>)
10006652:	490f      	ldr	r1, [pc, #60]	; (10006690 <optiga_cmd_calc_sign+0x48>)
10006654:	4a0f      	ldr	r2, [pc, #60]	; (10006694 <optiga_cmd_calc_sign+0x4c>)
10006656:	f7fe f86f 	bl	10004738 <optiga_lib_print_message>
    do
    {
        if (OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdsa_sign->private_key_oid)
1000665a:	89ab      	ldrh	r3, [r5, #12]
1000665c:	2b00      	cmp	r3, #0
1000665e:	d104      	bne.n	1000666a <optiga_cmd_calc_sign+0x22>
        {
            if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid)
10006660:	8aa3      	ldrh	r3, [r4, #20]
10006662:	2b00      	cmp	r3, #0
10006664:	d00f      	beq.n	10006686 <optiga_cmd_calc_sign+0x3e>
            {
                break;
            }
            cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10006666:	2305      	movs	r3, #5
10006668:	e000      	b.n	1000666c <optiga_cmd_calc_sign+0x24>

optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t*)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
1000666a:	2306      	movs	r3, #6
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
1000666c:	60a5      	str	r5, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
1000666e:	2500      	movs	r5, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10006670:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10006672:	4b09      	ldr	r3, [pc, #36]	; (10006698 <optiga_cmd_calc_sign+0x50>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10006674:	1c20      	adds	r0, r4, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10006676:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
10006678:	75e5      	strb	r5, [r4, #23]
    me->cmd_param = cmd_param;
1000667a:	7626      	strb	r6, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
1000667c:	1c29      	adds	r1, r5, #0
1000667e:	f7fe f9fd 	bl	10004a7c <optiga_cmd_execute_handler>
                           cmd_param,
                           optiga_cmd_calc_sign_handler,
                           cmd_handler_state,
                           params);

        return_status = OPTIGA_LIB_SUCCESS;
10006682:	1c28      	adds	r0, r5, #0
10006684:	e000      	b.n	10006688 <optiga_cmd_calc_sign+0x40>
}


optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
10006686:	4805      	ldr	r0, [pc, #20]	; (1000669c <optiga_cmd_calc_sign+0x54>)
                           params);

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    return (return_status);
}
10006688:	bd70      	pop	{r4, r5, r6, pc}
1000668a:	46c0      	nop			; (mov r8, r8)
1000668c:	1000e0ac 	.word	0x1000e0ac
10006690:	1000d6cc 	.word	0x1000d6cc
10006694:	1000d2dc 	.word	0x1000d2dc
10006698:	100051a5 	.word	0x100051a5
1000669c:	00000203 	.word	0x00000203

100066a0 <optiga_cmd_verify_sign>:
}

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
100066a0:	b570      	push	{r4, r5, r6, lr}
100066a2:	1c04      	adds	r4, r0, #0
100066a4:	1c15      	adds	r5, r2, #0
100066a6:	1c0e      	adds	r6, r1, #0
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
100066a8:	4a09      	ldr	r2, [pc, #36]	; (100066d0 <optiga_cmd_verify_sign+0x30>)
100066aa:	480a      	ldr	r0, [pc, #40]	; (100066d4 <optiga_cmd_verify_sign+0x34>)
100066ac:	490a      	ldr	r1, [pc, #40]	; (100066d8 <optiga_cmd_verify_sign+0x38>)
100066ae:	f7fe f843 	bl	10004738 <optiga_lib_print_message>
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
100066b2:	2306      	movs	r3, #6
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
100066b4:	60a5      	str	r5, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
100066b6:	2500      	movs	r5, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
100066b8:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
100066ba:	4b08      	ldr	r3, [pc, #32]	; (100066dc <optiga_cmd_verify_sign+0x3c>)
    me->chaining_ongoing = FALSE;
100066bc:	75e5      	strb	r5, [r4, #23]
    me->cmd_param = cmd_param;
100066be:	7626      	strb	r6, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
100066c0:	1c20      	adds	r0, r4, #0
100066c2:	1c29      	adds	r1, r5, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
100066c4:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
100066c6:	f7fe f9d9 	bl	10004a7c <optiga_cmd_execute_handler>
                       optiga_cmd_verify_sign_handler,
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
100066ca:	1c28      	adds	r0, r5, #0
100066cc:	bd70      	pop	{r4, r5, r6, pc}
100066ce:	46c0      	nop			; (mov r8, r8)
100066d0:	1000d2dc 	.word	0x1000d2dc
100066d4:	1000e11e 	.word	0x1000e11e
100066d8:	1000d6cc 	.word	0x1000d6cc
100066dc:	100052c5 	.word	0x100052c5

100066e0 <optiga_cmd_calc_ssec>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_calc_ssec(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_ssec_params_t * params)
{
100066e0:	b570      	push	{r4, r5, r6, lr}
100066e2:	1c15      	adds	r5, r2, #0
100066e4:	1c04      	adds	r4, r0, #0
100066e6:	1c0e      	adds	r6, r1, #0
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    optiga_calc_ssec_params_t * p_optiga_ecdh = (optiga_calc_ssec_params_t *)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
100066e8:	4810      	ldr	r0, [pc, #64]	; (1000672c <optiga_cmd_calc_ssec+0x4c>)
100066ea:	4911      	ldr	r1, [pc, #68]	; (10006730 <optiga_cmd_calc_ssec+0x50>)
100066ec:	4a11      	ldr	r2, [pc, #68]	; (10006734 <optiga_cmd_calc_ssec+0x54>)
100066ee:	f7fe f823 	bl	10004738 <optiga_lib_print_message>
    
    do
    {
        if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdh->private_key) &&
100066f2:	892b      	ldrh	r3, [r5, #8]
100066f4:	2b00      	cmp	r3, #0
100066f6:	d104      	bne.n	10006702 <optiga_cmd_calc_ssec+0x22>
100066f8:	8aa3      	ldrh	r3, [r4, #20]
100066fa:	2b00      	cmp	r3, #0
100066fc:	d013      	beq.n	10006726 <optiga_cmd_calc_ssec+0x46>

optiga_lib_status_t optiga_cmd_calc_ssec(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_ssec_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    optiga_calc_ssec_params_t * p_optiga_ecdh = (optiga_calc_ssec_params_t *)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
100066fe:	2305      	movs	r3, #5
10006700:	e004      	b.n	1000670c <optiga_cmd_calc_ssec+0x2c>
        if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdh->private_key) &&
            (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid))
        {
            break;
        }
        if ((OPTIGA_KEY_ID_SESSION_BASED != p_optiga_ecdh->private_key) &&
10006702:	7aab      	ldrb	r3, [r5, #10]
            (FALSE != p_optiga_ecdh->export_to_host))
        {
            cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
10006704:	425a      	negs	r2, r3
10006706:	4153      	adcs	r3, r2
10006708:	2206      	movs	r2, #6
1000670a:	1ad3      	subs	r3, r2, r3
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
1000670c:	60a5      	str	r5, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
1000670e:	2500      	movs	r5, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10006710:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10006712:	4b09      	ldr	r3, [pc, #36]	; (10006738 <optiga_cmd_calc_ssec+0x58>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10006714:	1c20      	adds	r0, r4, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10006716:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
10006718:	75e5      	strb	r5, [r4, #23]
    me->cmd_param = cmd_param;
1000671a:	7626      	strb	r6, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
1000671c:	1c29      	adds	r1, r5, #0
1000671e:	f7fe f9ad 	bl	10004a7c <optiga_cmd_execute_handler>
        optiga_cmd_execute(me,
                           cmd_param,
                           optiga_cmd_calc_ssec_handler,
                           cmd_handler_state,
                           params);
        return_status = OPTIGA_LIB_SUCCESS;
10006722:	1c28      	adds	r0, r5, #0
10006724:	e000      	b.n	10006728 <optiga_cmd_calc_ssec+0x48>
    return (return_status);
}

optiga_lib_status_t optiga_cmd_calc_ssec(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_ssec_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
10006726:	4805      	ldr	r0, [pc, #20]	; (1000673c <optiga_cmd_calc_ssec+0x5c>)
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);

    return (return_status);
}
10006728:	bd70      	pop	{r4, r5, r6, pc}
1000672a:	46c0      	nop			; (mov r8, r8)
1000672c:	1000d682 	.word	0x1000d682
10006730:	1000d6cc 	.word	0x1000d6cc
10006734:	1000d2dc 	.word	0x1000d2dc
10006738:	10005451 	.word	0x10005451
1000673c:	00000203 	.word	0x00000203

10006740 <optiga_cmd_derive_key>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_derive_key(optiga_cmd_t * me, uint8_t cmd_param, optiga_derive_key_params_t * params)
{
10006740:	b570      	push	{r4, r5, r6, lr}
10006742:	1c15      	adds	r5, r2, #0
10006744:	1c04      	adds	r4, r0, #0
10006746:	1c0e      	adds	r6, r1, #0
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    optiga_derive_key_params_t * p_optiga_tls_prf_sha256 = (optiga_derive_key_params_t*)params;
    optiga_cmd_state_t initial_state;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
10006748:	4811      	ldr	r0, [pc, #68]	; (10006790 <optiga_cmd_derive_key+0x50>)
1000674a:	4912      	ldr	r1, [pc, #72]	; (10006794 <optiga_cmd_derive_key+0x54>)
1000674c:	4a12      	ldr	r2, [pc, #72]	; (10006798 <optiga_cmd_derive_key+0x58>)
1000674e:	f7fd fff3 	bl	10004738 <optiga_lib_print_message>
    
    do
    {
        if ((OPTIGA_KEY_ID_SESSION_BASED == (optiga_key_id_t)p_optiga_tls_prf_sha256->input_shared_secret_oid) &&
10006752:	882b      	ldrh	r3, [r5, #0]
10006754:	2b00      	cmp	r3, #0
10006756:	d102      	bne.n	1000675e <optiga_cmd_derive_key+0x1e>
10006758:	8aa3      	ldrh	r3, [r4, #20]
1000675a:	2b00      	cmp	r3, #0
1000675c:	d015      	beq.n	1000678a <optiga_cmd_derive_key+0x4a>
            (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid))
        {
            break;
        }

        me->chaining_ongoing = FALSE;
1000675e:	2300      	movs	r3, #0
        me->cmd_param = cmd_param;
10006760:	7626      	strb	r6, [r4, #24]
            (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid))
        {
            break;
        }

        me->chaining_ongoing = FALSE;
10006762:	75e3      	strb	r3, [r4, #23]
        me->cmd_param = cmd_param;
        initial_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;

        if ((NULL == p_optiga_tls_prf_sha256->derived_key) ||
10006764:	692a      	ldr	r2, [r5, #16]
            (0x00 == p_optiga_tls_prf_sha256->input_shared_secret_oid))
        {
            initial_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10006766:	3305      	adds	r3, #5

        me->chaining_ongoing = FALSE;
        me->cmd_param = cmd_param;
        initial_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;

        if ((NULL == p_optiga_tls_prf_sha256->derived_key) ||
10006768:	2a00      	cmp	r2, #0
1000676a:	d004      	beq.n	10006776 <optiga_cmd_derive_key+0x36>
1000676c:	882a      	ldrh	r2, [r5, #0]
            break;
        }

        me->chaining_ongoing = FALSE;
        me->cmd_param = cmd_param;
        initial_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
1000676e:	4253      	negs	r3, r2
10006770:	4153      	adcs	r3, r2
10006772:	2206      	movs	r2, #6
10006774:	1ad3      	subs	r3, r2, r3
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10006776:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10006778:	4b08      	ldr	r3, [pc, #32]	; (1000679c <optiga_cmd_derive_key+0x5c>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
1000677a:	1c20      	adds	r0, r4, #0
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
1000677c:	60a5      	str	r5, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
1000677e:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10006780:	2100      	movs	r1, #0
10006782:	f7fe f97b 	bl	10004a7c <optiga_cmd_execute_handler>
                           me->cmd_param,
                           optiga_cmd_derive_key_handler,
                           initial_state,
                           params);

        return_status = OPTIGA_LIB_SUCCESS;
10006786:	2000      	movs	r0, #0
10006788:	e000      	b.n	1000678c <optiga_cmd_derive_key+0x4c>
    return (return_status);
}

optiga_lib_status_t optiga_cmd_derive_key(optiga_cmd_t * me, uint8_t cmd_param, optiga_derive_key_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
1000678a:	4805      	ldr	r0, [pc, #20]	; (100067a0 <optiga_cmd_derive_key+0x60>)

        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    return (return_status);
}
1000678c:	bd70      	pop	{r4, r5, r6, pc}
1000678e:	46c0      	nop			; (mov r8, r8)
10006790:	1000d657 	.word	0x1000d657
10006794:	1000d6cc 	.word	0x1000d6cc
10006798:	1000d2dc 	.word	0x1000d2dc
1000679c:	100055cd 	.word	0x100055cd
100067a0:	00000203 	.word	0x00000203

100067a4 <optiga_cmd_gen_keypair>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_gen_keypair(optiga_cmd_t * me, uint8_t cmd_param, optiga_gen_keypair_params_t * params)
{
100067a4:	b570      	push	{r4, r5, r6, lr}
100067a6:	1c15      	adds	r5, r2, #0
100067a8:	1c04      	adds	r4, r0, #0
100067aa:	1c0e      	adds	r6, r1, #0
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
100067ac:	480c      	ldr	r0, [pc, #48]	; (100067e0 <optiga_cmd_gen_keypair+0x3c>)
100067ae:	490d      	ldr	r1, [pc, #52]	; (100067e4 <optiga_cmd_gen_keypair+0x40>)
100067b0:	4a0d      	ldr	r2, [pc, #52]	; (100067e8 <optiga_cmd_gen_keypair+0x44>)
100067b2:	f7fd ffc1 	bl	10004738 <optiga_lib_print_message>
    
    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)
        && (FALSE == p_optiga_ecc_gen_keypair->export_private_key))
100067b6:	23ff      	movs	r3, #255	; 0xff
100067b8:	6829      	ldr	r1, [r5, #0]
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
100067ba:	60a5      	str	r5, [r4, #8]
{
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)
        && (FALSE == p_optiga_ecc_gen_keypair->export_private_key))
100067bc:	4399      	bics	r1, r3
100067be:	4b0b      	ldr	r3, [pc, #44]	; (100067ec <optiga_cmd_gen_keypair+0x48>)
optiga_lib_status_t optiga_cmd_gen_keypair(optiga_cmd_t * me, uint8_t cmd_param, optiga_gen_keypair_params_t * params)
{
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)
100067c0:	d103      	bne.n	100067ca <optiga_cmd_gen_keypair+0x26>
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
100067c2:	2205      	movs	r2, #5
    me->cmd_hdlrs = cmd_hdlrs;
100067c4:	6063      	str	r3, [r4, #4]
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
100067c6:	75a2      	strb	r2, [r4, #22]
100067c8:	e003      	b.n	100067d2 <optiga_cmd_gen_keypair+0x2e>
100067ca:	2206      	movs	r2, #6
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
100067cc:	2100      	movs	r1, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
100067ce:	75a2      	strb	r2, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
100067d0:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
100067d2:	7626      	strb	r6, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
100067d4:	1c20      	adds	r0, r4, #0
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
100067d6:	75e1      	strb	r1, [r4, #23]
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
100067d8:	f7fe f950 	bl	10004a7c <optiga_cmd_execute_handler>
    {
        optiga_cmd_execute(me, cmd_param, optiga_cmd_gen_keypair_handler, OPTIGA_CMD_EXEC_REQUEST_LOCK, params);
    }

    return (OPTIGA_LIB_SUCCESS);
}
100067dc:	2000      	movs	r0, #0
100067de:	bd70      	pop	{r4, r5, r6, pc}
100067e0:	1000e0d1 	.word	0x1000e0d1
100067e4:	1000d6cc 	.word	0x1000d6cc
100067e8:	1000d2dc 	.word	0x1000d2dc
100067ec:	100058a1 	.word	0x100058a1

100067f0 <optiga_cmd_encrypt_asym>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_encrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_encrypt_asym_params_t * params)
{
100067f0:	b570      	push	{r4, r5, r6, lr}
100067f2:	1c14      	adds	r4, r2, #0
100067f4:	1c05      	adds	r5, r0, #0
100067f6:	1c0e      	adds	r6, r1, #0
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
100067f8:	480e      	ldr	r0, [pc, #56]	; (10006834 <optiga_cmd_encrypt_asym+0x44>)
100067fa:	490f      	ldr	r1, [pc, #60]	; (10006838 <optiga_cmd_encrypt_asym+0x48>)
100067fc:	4a0f      	ldr	r2, [pc, #60]	; (1000683c <optiga_cmd_encrypt_asym+0x4c>)
100067fe:	f7fd ff9b 	bl	10004738 <optiga_lib_print_message>
    
    // for encrypting session data, instance must have session.
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
10006802:	68a3      	ldr	r3, [r4, #8]
10006804:	2b00      	cmp	r3, #0
10006806:	d105      	bne.n	10006814 <optiga_cmd_encrypt_asym+0x24>
10006808:	8823      	ldrh	r3, [r4, #0]
1000680a:	2b00      	cmp	r3, #0
1000680c:	d110      	bne.n	10006830 <optiga_cmd_encrypt_asym+0x40>
1000680e:	8aab      	ldrh	r3, [r5, #20]
10006810:	2b00      	cmp	r3, #0
10006812:	d00d      	beq.n	10006830 <optiga_cmd_encrypt_asym+0x40>
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
10006814:	2306      	movs	r3, #6
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10006816:	60ac      	str	r4, [r5, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
10006818:	2400      	movs	r4, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
1000681a:	75ab      	strb	r3, [r5, #22]
    me->cmd_hdlrs = cmd_hdlrs;
1000681c:	4b08      	ldr	r3, [pc, #32]	; (10006840 <optiga_cmd_encrypt_asym+0x50>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
1000681e:	1c28      	adds	r0, r5, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10006820:	606b      	str	r3, [r5, #4]
    me->chaining_ongoing = FALSE;
10006822:	75ec      	strb	r4, [r5, #23]
    me->cmd_param = cmd_param;
10006824:	762e      	strb	r6, [r5, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10006826:	1c21      	adds	r1, r4, #0
10006828:	f7fe f928 	bl	10004a7c <optiga_cmd_execute_handler>
    // for encrypting session data, instance must have session.
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
        (NULL != params->message))
    {
        optiga_cmd_execute(me, cmd_param, optiga_cmd_encrypt_asym_handler, OPTIGA_CMD_EXEC_REQUEST_LOCK, params);
        return_status = OPTIGA_LIB_SUCCESS;
1000682c:	1c20      	adds	r0, r4, #0
1000682e:	e000      	b.n	10006832 <optiga_cmd_encrypt_asym+0x42>
    return (return_status);
}

optiga_lib_status_t optiga_cmd_encrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_encrypt_asym_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
10006830:	4804      	ldr	r0, [pc, #16]	; (10006844 <optiga_cmd_encrypt_asym+0x54>)
    {
        optiga_cmd_execute(me, cmd_param, optiga_cmd_encrypt_asym_handler, OPTIGA_CMD_EXEC_REQUEST_LOCK, params);
        return_status = OPTIGA_LIB_SUCCESS;
    }
    return (return_status);
}
10006832:	bd70      	pop	{r4, r5, r6, pc}
10006834:	1000d602 	.word	0x1000d602
10006838:	1000d6cc 	.word	0x1000d6cc
1000683c:	1000d2dc 	.word	0x1000d2dc
10006840:	10005a29 	.word	0x10005a29
10006844:	00000203 	.word	0x00000203

10006848 <optiga_cmd_decrypt_asym>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_decrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_decrypt_asym_params_t * params)
{
10006848:	b570      	push	{r4, r5, r6, lr}
1000684a:	1c15      	adds	r5, r2, #0
1000684c:	1c04      	adds	r4, r0, #0
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t*)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
1000684e:	4a0d      	ldr	r2, [pc, #52]	; (10006884 <optiga_cmd_decrypt_asym+0x3c>)

    return (return_status);
}

optiga_lib_status_t optiga_cmd_decrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_decrypt_asym_params_t * params)
{
10006850:	1c0e      	adds	r6, r1, #0
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t*)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
10006852:	480d      	ldr	r0, [pc, #52]	; (10006888 <optiga_cmd_decrypt_asym+0x40>)
10006854:	490d      	ldr	r1, [pc, #52]	; (1000688c <optiga_cmd_decrypt_asym+0x44>)
10006856:	f7fd ff6f 	bl	10004738 <optiga_lib_print_message>
    do
    {
        if ((NULL == p_optiga_decrypt_asym->processed_message) &&
1000685a:	696a      	ldr	r2, [r5, #20]

optiga_lib_status_t optiga_cmd_decrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_decrypt_asym_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t*)params;
    optiga_cmd_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
1000685c:	2306      	movs	r3, #6
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((NULL == p_optiga_decrypt_asym->processed_message) &&
1000685e:	2a00      	cmp	r2, #0
10006860:	d103      	bne.n	1000686a <optiga_cmd_decrypt_asym+0x22>
            (NULL == p_optiga_decrypt_asym->processed_message_length))
        {
            cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
10006862:	686b      	ldr	r3, [r5, #4]
10006864:	1e5a      	subs	r2, r3, #1
10006866:	4193      	sbcs	r3, r2
10006868:	3305      	adds	r3, #5
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
1000686a:	60a5      	str	r5, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
1000686c:	2500      	movs	r5, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
1000686e:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
10006870:	4b07      	ldr	r3, [pc, #28]	; (10006890 <optiga_cmd_decrypt_asym+0x48>)
    me->chaining_ongoing = FALSE;
10006872:	75e5      	strb	r5, [r4, #23]
    me->cmd_param = cmd_param;
10006874:	7626      	strb	r6, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10006876:	1c20      	adds	r0, r4, #0
10006878:	1c29      	adds	r1, r5, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
1000687a:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
1000687c:	f7fe f8fe 	bl	10004a7c <optiga_cmd_execute_handler>
                           params);

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    return (return_status);
}
10006880:	1c28      	adds	r0, r5, #0
10006882:	bd70      	pop	{r4, r5, r6, pc}
10006884:	1000d2dc 	.word	0x1000d2dc
10006888:	1000d697 	.word	0x1000d697
1000688c:	1000d6cc 	.word	0x1000d6cc
10006890:	10005c01 	.word	0x10005c01

10006894 <optiga_cmd_calc_hash>:
}

optiga_lib_status_t optiga_cmd_calc_hash(optiga_cmd_t * me,
                                         uint8_t cmd_param,
                                         optiga_calc_hash_params_t * params)
{
10006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006896:	1c04      	adds	r4, r0, #0
10006898:	1c16      	adds	r6, r2, #0
1000689a:	1c0f      	adds	r7, r1, #0
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
1000689c:	4a09      	ldr	r2, [pc, #36]	; (100068c4 <optiga_cmd_calc_hash+0x30>)
1000689e:	480a      	ldr	r0, [pc, #40]	; (100068c8 <optiga_cmd_calc_hash+0x34>)
100068a0:	490a      	ldr	r1, [pc, #40]	; (100068cc <optiga_cmd_calc_hash+0x38>)
100068a2:	f7fd ff49 	bl	10004738 <optiga_lib_print_message>
    
    p_optiga_calc_hash->data_sent = 0;
100068a6:	2500      	movs	r5, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
100068a8:	2306      	movs	r3, #6
                                         optiga_calc_hash_params_t * params)
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    p_optiga_calc_hash->data_sent = 0;
100068aa:	6135      	str	r5, [r6, #16]
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
100068ac:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
100068ae:	4b08      	ldr	r3, [pc, #32]	; (100068d0 <optiga_cmd_calc_hash+0x3c>)
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
100068b0:	60a6      	str	r6, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
100068b2:	75e5      	strb	r5, [r4, #23]
    me->cmd_param = cmd_param;
100068b4:	7627      	strb	r7, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
100068b6:	1c20      	adds	r0, r4, #0
100068b8:	1c29      	adds	r1, r5, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
100068ba:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
100068bc:	f7fe f8de 	bl	10004a7c <optiga_cmd_execute_handler>
                       optiga_cmd_calc_hash_handler,
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params);

    return (OPTIGA_LIB_SUCCESS);
}
100068c0:	1c28      	adds	r0, r5, #0
100068c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100068c4:	1000d2dc 	.word	0x1000d2dc
100068c8:	1000d66d 	.word	0x1000d66d
100068cc:	1000d6cc 	.word	0x1000d6cc
100068d0:	10005d95 	.word	0x10005d95

100068d4 <optiga_cmd_set_object_protected>:
    return (return_status);
}

optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
100068d4:	b570      	push	{r4, r5, r6, lr}
100068d6:	1c15      	adds	r5, r2, #0
100068d8:	1c04      	adds	r4, r0, #0
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
100068da:	4a17      	ldr	r2, [pc, #92]	; (10006938 <optiga_cmd_set_object_protected+0x64>)
    return (return_status);
}

optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
100068dc:	1c0e      	adds	r6, r1, #0
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
100068de:	4817      	ldr	r0, [pc, #92]	; (1000693c <optiga_cmd_set_object_protected+0x68>)
100068e0:	4917      	ldr	r1, [pc, #92]	; (10006940 <optiga_cmd_set_object_protected+0x6c>)
100068e2:	f7fd ff29 	bl	10004738 <optiga_lib_print_message>
    
    if (((OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag) ||
100068e6:	79aa      	ldrb	r2, [r5, #6]
100068e8:	1e53      	subs	r3, r2, #1
100068ea:	2b01      	cmp	r3, #1
100068ec:	d80d      	bhi.n	1000690a <optiga_cmd_set_object_protected+0x36>
    uint8_t state = 0;
    switch (slot_member)
    {
        case OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE:
        {
            state = me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type;
100068ee:	230c      	movs	r3, #12
100068f0:	7f61      	ldrb	r1, [r4, #29]
100068f2:	434b      	muls	r3, r1
100068f4:	6821      	ldr	r1, [r4, #0]
100068f6:	18cb      	adds	r3, r1, r3
100068f8:	21c7      	movs	r1, #199	; 0xc7
100068fa:	00c9      	lsls	r1, r1, #3
100068fc:	185b      	adds	r3, r3, r1
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    
    if (((OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag) ||
       (OPTIGA_SET_PROTECTED_UPDATE_CONTINUE == params->set_obj_protected_tag)) &&
100068fe:	7819      	ldrb	r1, [r3, #0]
10006900:	2923      	cmp	r1, #35	; 0x23
10006902:	d116      	bne.n	10006932 <optiga_cmd_set_object_protected+0x5e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != optiga_cmd_queue_get_state_of(me, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE)) ||
10006904:	785b      	ldrb	r3, [r3, #1]
10006906:	2b04      	cmp	r3, #4
10006908:	d113      	bne.n	10006932 <optiga_cmd_set_object_protected+0x5e>
    {
        return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    }
    else
    {
        if (( NULL == params->p_protected_update_buffer ) &&
1000690a:	6829      	ldr	r1, [r5, #0]
}

optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
1000690c:	2307      	movs	r3, #7
    {
        return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    }
    else
    {
        if (( NULL == params->p_protected_update_buffer ) &&
1000690e:	2900      	cmp	r1, #0
10006910:	d102      	bne.n	10006918 <optiga_cmd_set_object_protected+0x44>
10006912:	2a01      	cmp	r2, #1
10006914:	d100      	bne.n	10006918 <optiga_cmd_set_object_protected+0x44>
            (OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag))
        {
            /// Release the strict sequence
            next_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
10006916:	3304      	adds	r3, #4
                                  uint8_t cmd_param,
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
10006918:	60a5      	str	r5, [r4, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
1000691a:	2500      	movs	r5, #0
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
1000691c:	75a3      	strb	r3, [r4, #22]
    me->cmd_hdlrs = cmd_hdlrs;
1000691e:	4b09      	ldr	r3, [pc, #36]	; (10006944 <optiga_cmd_set_object_protected+0x70>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10006920:	1c20      	adds	r0, r4, #0
                                  optiga_cmd_state_t start_state,
                                  void * input)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_hdlrs = cmd_hdlrs;
10006922:	6063      	str	r3, [r4, #4]
    me->chaining_ongoing = FALSE;
10006924:	75e5      	strb	r5, [r4, #23]
    me->cmd_param = cmd_param;
10006926:	7626      	strb	r6, [r4, #24]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
10006928:	1c29      	adds	r1, r5, #0
1000692a:	f7fe f8a7 	bl	10004a7c <optiga_cmd_execute_handler>

optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
1000692e:	1c28      	adds	r0, r5, #0
10006930:	e000      	b.n	10006934 <optiga_cmd_set_object_protected+0x60>
    if (((OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag) ||
       (OPTIGA_SET_PROTECTED_UPDATE_CONTINUE == params->set_obj_protected_tag)) &&
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != optiga_cmd_queue_get_state_of(me, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE)) ||
       (OPTIGA_CMD_QUEUE_PROCESSING != optiga_cmd_queue_get_state_of(me, OPTIGA_CMD_QUEUE_SLOT_STATE))))
    {
        return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
10006932:	4805      	ldr	r0, [pc, #20]	; (10006948 <optiga_cmd_set_object_protected+0x74>)
                           next_execution_state,
                           params);
    }

    return (return_status);
}
10006934:	bd70      	pop	{r4, r5, r6, pc}
10006936:	46c0      	nop			; (mov r8, r8)
10006938:	1000d2dc 	.word	0x1000d2dc
1000693c:	1000d61a 	.word	0x1000d61a
10006940:	1000d6cc 	.word	0x1000d6cc
10006944:	100057a5 	.word	0x100057a5
10006948:	00000203 	.word	0x00000203

1000694c <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
1000694c:	228c      	movs	r2, #140	; 0x8c
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
1000694e:	b508      	push	{r3, lr}
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
10006950:	2100      	movs	r1, #0
10006952:	0052      	lsls	r2, r2, #1
10006954:	f006 f832 	bl	1000c9bc <memset>
}
10006958:	bd08      	pop	{r3, pc}

1000695a <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
1000695a:	b508      	push	{r3, lr}
    if( ctx == NULL )
1000695c:	2800      	cmp	r0, #0
1000695e:	d003      	beq.n	10006968 <mbedtls_aes_free+0xe>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
10006960:	218c      	movs	r1, #140	; 0x8c
10006962:	0049      	lsls	r1, r1, #1
10006964:	f001 f97e 	bl	10007c64 <mbedtls_platform_zeroize>
}
10006968:	bd08      	pop	{r3, pc}
	...

1000696c <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
1000696c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
1000696e:	2ac0      	cmp	r2, #192	; 0xc0
10006970:	d008      	beq.n	10006984 <mbedtls_aes_setkey_enc+0x18>
10006972:	2380      	movs	r3, #128	; 0x80
10006974:	005b      	lsls	r3, r3, #1
10006976:	429a      	cmp	r2, r3
10006978:	d006      	beq.n	10006988 <mbedtls_aes_setkey_enc+0x1c>
    {
        case 128: ctx->nr = 10; break;
1000697a:	3bf6      	subs	r3, #246	; 0xf6
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
1000697c:	2a80      	cmp	r2, #128	; 0x80
1000697e:	d000      	beq.n	10006982 <mbedtls_aes_setkey_enc+0x16>
10006980:	e0c5      	b.n	10006b0e <mbedtls_aes_setkey_enc+0x1a2>
10006982:	e002      	b.n	1000698a <mbedtls_aes_setkey_enc+0x1e>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
10006984:	230c      	movs	r3, #12
10006986:	e000      	b.n	1000698a <mbedtls_aes_setkey_enc+0x1e>
        case 256: ctx->nr = 14; break;
10006988:	230e      	movs	r3, #14
1000698a:	6003      	str	r3, [r0, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
1000698c:	1c03      	adds	r3, r0, #0
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
1000698e:	2600      	movs	r6, #0

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
10006990:	3308      	adds	r3, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
10006992:	0952      	lsrs	r2, r2, #5

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
10006994:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
10006996:	9201      	str	r2, [sp, #4]
10006998:	9a01      	ldr	r2, [sp, #4]
1000699a:	4296      	cmp	r6, r2
1000699c:	d010      	beq.n	100069c0 <mbedtls_aes_setkey_enc+0x54>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
1000699e:	00b7      	lsls	r7, r6, #2
100069a0:	19cd      	adds	r5, r1, r7
100069a2:	786c      	ldrb	r4, [r5, #1]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
100069a4:	3601      	adds	r6, #1
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
100069a6:	0224      	lsls	r4, r4, #8
100069a8:	46a4      	mov	ip, r4
100069aa:	4662      	mov	r2, ip
100069ac:	78ac      	ldrb	r4, [r5, #2]
100069ae:	78ed      	ldrb	r5, [r5, #3]
100069b0:	0424      	lsls	r4, r4, #16
100069b2:	4314      	orrs	r4, r2
100069b4:	5dca      	ldrb	r2, [r1, r7]
100069b6:	062d      	lsls	r5, r5, #24
100069b8:	4314      	orrs	r4, r2
100069ba:	432c      	orrs	r4, r5
100069bc:	51dc      	str	r4, [r3, r7]
100069be:	e7eb      	b.n	10006998 <mbedtls_aes_setkey_enc+0x2c>
    }

    switch( ctx->nr )
100069c0:	6802      	ldr	r2, [r0, #0]
100069c2:	2a0c      	cmp	r2, #12
100069c4:	d02d      	beq.n	10006a22 <mbedtls_aes_setkey_enc+0xb6>
100069c6:	2a0e      	cmp	r2, #14
100069c8:	d05a      	beq.n	10006a80 <mbedtls_aes_setkey_enc+0x114>
100069ca:	2a0a      	cmp	r2, #10
100069cc:	d000      	beq.n	100069d0 <mbedtls_aes_setkey_enc+0x64>
100069ce:	e0a1      	b.n	10006b14 <mbedtls_aes_setkey_enc+0x1a8>
100069d0:	2400      	movs	r4, #0
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
100069d2:	4951      	ldr	r1, [pc, #324]	; (10006b18 <mbedtls_aes_setkey_enc+0x1ac>)
100069d4:	6818      	ldr	r0, [r3, #0]
100069d6:	5861      	ldr	r1, [r4, r1]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
100069d8:	68da      	ldr	r2, [r3, #12]
100069da:	4041      	eors	r1, r0
100069dc:	20ff      	movs	r0, #255	; 0xff
100069de:	4f4f      	ldr	r7, [pc, #316]	; (10006b1c <mbedtls_aes_setkey_enc+0x1b0>)
100069e0:	0a15      	lsrs	r5, r2, #8
100069e2:	4005      	ands	r5, r0
100069e4:	5d7e      	ldrb	r6, [r7, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
100069e6:	0e15      	lsrs	r5, r2, #24
100069e8:	4071      	eors	r1, r6
100069ea:	5d7e      	ldrb	r6, [r7, r5]
100069ec:	3404      	adds	r4, #4
100069ee:	0436      	lsls	r6, r6, #16
100069f0:	4071      	eors	r1, r6
100069f2:	1c0d      	adds	r5, r1, #0
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
100069f4:	1c11      	adds	r1, r2, #0
100069f6:	4001      	ands	r1, r0
100069f8:	5c79      	ldrb	r1, [r7, r1]
100069fa:	0609      	lsls	r1, r1, #24
100069fc:	4069      	eors	r1, r5

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
100069fe:	0c15      	lsrs	r5, r2, #16
10006a00:	4028      	ands	r0, r5
10006a02:	5c38      	ldrb	r0, [r7, r0]
10006a04:	0200      	lsls	r0, r0, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
10006a06:	4041      	eors	r1, r0
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
10006a08:	6858      	ldr	r0, [r3, #4]
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
10006a0a:	6119      	str	r1, [r3, #16]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
10006a0c:	4041      	eors	r1, r0
                RK[6]  = RK[2] ^ RK[5];
10006a0e:	6898      	ldr	r0, [r3, #8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
10006a10:	6159      	str	r1, [r3, #20]
                RK[6]  = RK[2] ^ RK[5];
10006a12:	4041      	eors	r1, r0
                RK[7]  = RK[3] ^ RK[6];
10006a14:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
                RK[6]  = RK[2] ^ RK[5];
10006a16:	6199      	str	r1, [r3, #24]
                RK[7]  = RK[3] ^ RK[6];
10006a18:	61da      	str	r2, [r3, #28]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
10006a1a:	3310      	adds	r3, #16
10006a1c:	2c28      	cmp	r4, #40	; 0x28
10006a1e:	d1d8      	bne.n	100069d2 <mbedtls_aes_setkey_enc+0x66>
10006a20:	e078      	b.n	10006b14 <mbedtls_aes_setkey_enc+0x1a8>
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
10006a22:	2400      	movs	r4, #0

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
10006a24:	493c      	ldr	r1, [pc, #240]	; (10006b18 <mbedtls_aes_setkey_enc+0x1ac>)
10006a26:	6818      	ldr	r0, [r3, #0]
10006a28:	5861      	ldr	r1, [r4, r1]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
10006a2a:	695a      	ldr	r2, [r3, #20]
10006a2c:	4041      	eors	r1, r0
10006a2e:	20ff      	movs	r0, #255	; 0xff
10006a30:	4f3a      	ldr	r7, [pc, #232]	; (10006b1c <mbedtls_aes_setkey_enc+0x1b0>)
10006a32:	0a15      	lsrs	r5, r2, #8
10006a34:	4005      	ands	r5, r0
10006a36:	5d7e      	ldrb	r6, [r7, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
10006a38:	0e15      	lsrs	r5, r2, #24
10006a3a:	4071      	eors	r1, r6
10006a3c:	5d7e      	ldrb	r6, [r7, r5]
10006a3e:	3404      	adds	r4, #4
10006a40:	0436      	lsls	r6, r6, #16
10006a42:	4071      	eors	r1, r6
10006a44:	1c0d      	adds	r5, r1, #0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
10006a46:	1c11      	adds	r1, r2, #0
10006a48:	4001      	ands	r1, r0
10006a4a:	5c79      	ldrb	r1, [r7, r1]
10006a4c:	0609      	lsls	r1, r1, #24
10006a4e:	4069      	eors	r1, r5

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
10006a50:	0c15      	lsrs	r5, r2, #16
10006a52:	4028      	ands	r0, r5
10006a54:	5c38      	ldrb	r0, [r7, r0]
10006a56:	0200      	lsls	r0, r0, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
10006a58:	4041      	eors	r1, r0
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
10006a5a:	6858      	ldr	r0, [r3, #4]

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
10006a5c:	6199      	str	r1, [r3, #24]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
10006a5e:	4041      	eors	r1, r0
                RK[8]  = RK[2] ^ RK[7];
10006a60:	6898      	ldr	r0, [r3, #8]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
10006a62:	61d9      	str	r1, [r3, #28]
                RK[8]  = RK[2] ^ RK[7];
10006a64:	4041      	eors	r1, r0
                RK[9]  = RK[3] ^ RK[8];
10006a66:	68d8      	ldr	r0, [r3, #12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
10006a68:	6219      	str	r1, [r3, #32]
                RK[9]  = RK[3] ^ RK[8];
10006a6a:	4041      	eors	r1, r0
                RK[10] = RK[4] ^ RK[9];
10006a6c:	6918      	ldr	r0, [r3, #16]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
10006a6e:	6259      	str	r1, [r3, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
10006a70:	4041      	eors	r1, r0
                RK[11] = RK[5] ^ RK[10];
10006a72:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
                RK[10] = RK[4] ^ RK[9];
10006a74:	6299      	str	r1, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
10006a76:	62da      	str	r2, [r3, #44]	; 0x2c
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
10006a78:	3318      	adds	r3, #24
10006a7a:	2c20      	cmp	r4, #32
10006a7c:	d1d2      	bne.n	10006a24 <mbedtls_aes_setkey_enc+0xb8>
10006a7e:	e049      	b.n	10006b14 <mbedtls_aes_setkey_enc+0x1a8>
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
10006a80:	2600      	movs	r6, #0
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
10006a82:	20ff      	movs	r0, #255	; 0xff

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
10006a84:	4a24      	ldr	r2, [pc, #144]	; (10006b18 <mbedtls_aes_setkey_enc+0x1ac>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
10006a86:	69dd      	ldr	r5, [r3, #28]
10006a88:	6819      	ldr	r1, [r3, #0]
10006a8a:	58b2      	ldr	r2, [r6, r2]
10006a8c:	4c23      	ldr	r4, [pc, #140]	; (10006b1c <mbedtls_aes_setkey_enc+0x1b0>)
10006a8e:	404a      	eors	r2, r1
10006a90:	0a29      	lsrs	r1, r5, #8
10006a92:	4001      	ands	r1, r0
10006a94:	5c67      	ldrb	r7, [r4, r1]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
10006a96:	0e29      	lsrs	r1, r5, #24
10006a98:	407a      	eors	r2, r7
10006a9a:	5c67      	ldrb	r7, [r4, r1]
10006a9c:	3604      	adds	r6, #4
10006a9e:	043f      	lsls	r7, r7, #16
10006aa0:	407a      	eors	r2, r7
10006aa2:	1c11      	adds	r1, r2, #0
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
10006aa4:	1c2a      	adds	r2, r5, #0
10006aa6:	4002      	ands	r2, r0
10006aa8:	5ca2      	ldrb	r2, [r4, r2]
10006aaa:	0612      	lsls	r2, r2, #24
10006aac:	404a      	eors	r2, r1

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
10006aae:	0c29      	lsrs	r1, r5, #16
10006ab0:	4001      	ands	r1, r0
10006ab2:	5c61      	ldrb	r1, [r4, r1]
10006ab4:	0209      	lsls	r1, r1, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
10006ab6:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
10006ab8:	6859      	ldr	r1, [r3, #4]

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
10006aba:	621a      	str	r2, [r3, #32]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
10006abc:	404a      	eors	r2, r1
                RK[10] = RK[2] ^ RK[9];
10006abe:	6899      	ldr	r1, [r3, #8]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
10006ac0:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
10006ac2:	404a      	eors	r2, r1
                RK[11] = RK[3] ^ RK[10];
10006ac4:	68d9      	ldr	r1, [r3, #12]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
10006ac6:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
10006ac8:	404a      	eors	r2, r1

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
10006aca:	1c11      	adds	r1, r2, #0
10006acc:	4001      	ands	r1, r0
10006ace:	5c67      	ldrb	r7, [r4, r1]
10006ad0:	6919      	ldr	r1, [r3, #16]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
10006ad2:	62da      	str	r2, [r3, #44]	; 0x2c
10006ad4:	404f      	eors	r7, r1

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
10006ad6:	0e11      	lsrs	r1, r2, #24
10006ad8:	5c61      	ldrb	r1, [r4, r1]
10006ada:	0609      	lsls	r1, r1, #24
10006adc:	4079      	eors	r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
10006ade:	0a17      	lsrs	r7, r2, #8
10006ae0:	4007      	ands	r7, r0
10006ae2:	5de7      	ldrb	r7, [r4, r7]
10006ae4:	023f      	lsls	r7, r7, #8
10006ae6:	404f      	eors	r7, r1
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
10006ae8:	0c11      	lsrs	r1, r2, #16
10006aea:	1c0a      	adds	r2, r1, #0
10006aec:	4002      	ands	r2, r0
10006aee:	5ca2      	ldrb	r2, [r4, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
10006af0:	6959      	ldr	r1, [r3, #20]
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
10006af2:	0412      	lsls	r2, r2, #16
10006af4:	407a      	eors	r2, r7

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
10006af6:	631a      	str	r2, [r3, #48]	; 0x30
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
10006af8:	404a      	eors	r2, r1
                RK[14] = RK[6] ^ RK[13];
10006afa:	6999      	ldr	r1, [r3, #24]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
10006afc:	635a      	str	r2, [r3, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
10006afe:	404a      	eors	r2, r1
10006b00:	639a      	str	r2, [r3, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
10006b02:	406a      	eors	r2, r5
10006b04:	63da      	str	r2, [r3, #60]	; 0x3c
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
10006b06:	3320      	adds	r3, #32
10006b08:	2e1c      	cmp	r6, #28
10006b0a:	d1ba      	bne.n	10006a82 <mbedtls_aes_setkey_enc+0x116>
10006b0c:	e002      	b.n	10006b14 <mbedtls_aes_setkey_enc+0x1a8>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
10006b0e:	2020      	movs	r0, #32
10006b10:	4240      	negs	r0, r0
10006b12:	e000      	b.n	10006b16 <mbedtls_aes_setkey_enc+0x1aa>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
10006b14:	2000      	movs	r0, #0
}
10006b16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10006b18:	1000f254 	.word	0x1000f254
10006b1c:	1000e151 	.word	0x1000e151

10006b20 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
10006b20:	b5f0      	push	{r4, r5, r6, r7, lr}
10006b22:	1c05      	adds	r5, r0, #0
10006b24:	b0c9      	sub	sp, #292	; 0x124
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
10006b26:	a802      	add	r0, sp, #8
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
10006b28:	1c0e      	adds	r6, r1, #0
10006b2a:	1c14      	adds	r4, r2, #0
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
10006b2c:	f7ff ff0e 	bl	1000694c <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
10006b30:	1c2b      	adds	r3, r5, #0
10006b32:	3308      	adds	r3, #8
10006b34:	606b      	str	r3, [r5, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
10006b36:	a802      	add	r0, sp, #8
10006b38:	1c31      	adds	r1, r6, #0
10006b3a:	1c22      	adds	r2, r4, #0
10006b3c:	f7ff ff16 	bl	1000696c <mbedtls_aes_setkey_enc>
10006b40:	9001      	str	r0, [sp, #4]
10006b42:	2800      	cmp	r0, #0
10006b44:	d142      	bne.n	10006bcc <mbedtls_aes_setkey_dec+0xac>
        goto exit;

    ctx->nr = cty.nr;
10006b46:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
10006b48:	9a03      	ldr	r2, [sp, #12]
10006b4a:	010b      	lsls	r3, r1, #4
10006b4c:	18d3      	adds	r3, r2, r3

    *RK++ = *SK++;
10006b4e:	681a      	ldr	r2, [r3, #0]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
10006b50:	6029      	str	r1, [r5, #0]
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
10006b52:	60aa      	str	r2, [r5, #8]
    *RK++ = *SK++;
10006b54:	685a      	ldr	r2, [r3, #4]
10006b56:	60ea      	str	r2, [r5, #12]
    *RK++ = *SK++;
10006b58:	689a      	ldr	r2, [r3, #8]
10006b5a:	612a      	str	r2, [r5, #16]
    *RK++ = *SK++;
10006b5c:	1c2a      	adds	r2, r5, #0
10006b5e:	68d8      	ldr	r0, [r3, #12]
10006b60:	3218      	adds	r2, #24
10006b62:	6168      	str	r0, [r5, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
10006b64:	3901      	subs	r1, #1
10006b66:	9100      	str	r1, [sp, #0]
10006b68:	9900      	ldr	r1, [sp, #0]
10006b6a:	3b10      	subs	r3, #16
10006b6c:	2900      	cmp	r1, #0
10006b6e:	dd25      	ble.n	10006bbc <mbedtls_aes_setkey_dec+0x9c>
10006b70:	2000      	movs	r0, #0
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
10006b72:	27ff      	movs	r7, #255	; 0xff
10006b74:	5819      	ldr	r1, [r3, r0]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
10006b76:	4d18      	ldr	r5, [pc, #96]	; (10006bd8 <mbedtls_aes_setkey_dec+0xb8>)
10006b78:	0e0e      	lsrs	r6, r1, #24
10006b7a:	5dae      	ldrb	r6, [r5, r6]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
10006b7c:	400f      	ands	r7, r1
10006b7e:	4c17      	ldr	r4, [pc, #92]	; (10006bdc <mbedtls_aes_setkey_dec+0xbc>)
10006b80:	5def      	ldrb	r7, [r5, r7]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
10006b82:	00b6      	lsls	r6, r6, #2
10006b84:	5936      	ldr	r6, [r6, r4]
10006b86:	4c16      	ldr	r4, [pc, #88]	; (10006be0 <mbedtls_aes_setkey_dec+0xc0>)

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
10006b88:	00bf      	lsls	r7, r7, #2
10006b8a:	593f      	ldr	r7, [r7, r4]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
10006b8c:	24ff      	movs	r4, #255	; 0xff
10006b8e:	407e      	eors	r6, r7
10006b90:	0a0f      	lsrs	r7, r1, #8
10006b92:	4027      	ands	r7, r4
10006b94:	5def      	ldrb	r7, [r5, r7]
10006b96:	4c13      	ldr	r4, [pc, #76]	; (10006be4 <mbedtls_aes_setkey_dec+0xc4>)
10006b98:	00bf      	lsls	r7, r7, #2
10006b9a:	593f      	ldr	r7, [r7, r4]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
10006b9c:	24ff      	movs	r4, #255	; 0xff
10006b9e:	0c09      	lsrs	r1, r1, #16
10006ba0:	4021      	ands	r1, r4
10006ba2:	5c69      	ldrb	r1, [r5, r1]
10006ba4:	4d10      	ldr	r5, [pc, #64]	; (10006be8 <mbedtls_aes_setkey_dec+0xc8>)
10006ba6:	0089      	lsls	r1, r1, #2
10006ba8:	407e      	eors	r6, r7
10006baa:	594f      	ldr	r7, [r1, r5]
10006bac:	407e      	eors	r6, r7

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
10006bae:	5016      	str	r6, [r2, r0]
10006bb0:	3004      	adds	r0, #4
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
10006bb2:	2810      	cmp	r0, #16
10006bb4:	d1dd      	bne.n	10006b72 <mbedtls_aes_setkey_dec+0x52>
10006bb6:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
10006bb8:	9900      	ldr	r1, [sp, #0]
10006bba:	e7d3      	b.n	10006b64 <mbedtls_aes_setkey_dec+0x44>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
        }
    }

    *RK++ = *SK++;
10006bbc:	6819      	ldr	r1, [r3, #0]
10006bbe:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
10006bc0:	6859      	ldr	r1, [r3, #4]
10006bc2:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
10006bc4:	6899      	ldr	r1, [r3, #8]
10006bc6:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
10006bc8:	68db      	ldr	r3, [r3, #12]
10006bca:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
10006bcc:	a802      	add	r0, sp, #8
10006bce:	f7ff fec4 	bl	1000695a <mbedtls_aes_free>

    return( ret );
}
10006bd2:	9801      	ldr	r0, [sp, #4]
10006bd4:	b049      	add	sp, #292	; 0x124
10006bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006bd8:	1000e151 	.word	0x1000e151
10006bdc:	1000ee54 	.word	0x1000ee54
10006be0:	1000e254 	.word	0x1000e254
10006be4:	1000e654 	.word	0x1000e654
10006be8:	1000ea54 	.word	0x1000ea54

10006bec <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
10006bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006bee:	784c      	ldrb	r4, [r1, #1]
10006bf0:	788b      	ldrb	r3, [r1, #2]
10006bf2:	0224      	lsls	r4, r4, #8
10006bf4:	041b      	lsls	r3, r3, #16
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
10006bf6:	b087      	sub	sp, #28
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006bf8:	780e      	ldrb	r6, [r1, #0]
10006bfa:	431c      	orrs	r4, r3
10006bfc:	78cb      	ldrb	r3, [r1, #3]
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
10006bfe:	9200      	str	r2, [sp, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
10006c00:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006c02:	4334      	orrs	r4, r6
10006c04:	061b      	lsls	r3, r3, #24
10006c06:	431c      	orrs	r4, r3
10006c08:	6813      	ldr	r3, [r2, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
10006c0a:	794e      	ldrb	r6, [r1, #5]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006c0c:	4063      	eors	r3, r4
10006c0e:	9301      	str	r3, [sp, #4]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
10006c10:	798b      	ldrb	r3, [r1, #6]
10006c12:	0236      	lsls	r6, r6, #8
10006c14:	041b      	lsls	r3, r3, #16
10006c16:	790c      	ldrb	r4, [r1, #4]
10006c18:	431e      	orrs	r6, r3
10006c1a:	79cb      	ldrb	r3, [r1, #7]
10006c1c:	4326      	orrs	r6, r4
10006c1e:	061b      	lsls	r3, r3, #24
10006c20:	431e      	orrs	r6, r3
10006c22:	6853      	ldr	r3, [r2, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
10006c24:	7a4c      	ldrb	r4, [r1, #9]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
10006c26:	4073      	eors	r3, r6
10006c28:	9302      	str	r3, [sp, #8]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
10006c2a:	7a8b      	ldrb	r3, [r1, #10]
10006c2c:	0224      	lsls	r4, r4, #8
10006c2e:	041b      	lsls	r3, r3, #16
10006c30:	431c      	orrs	r4, r3
10006c32:	7a0b      	ldrb	r3, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
10006c34:	7b4d      	ldrb	r5, [r1, #13]

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
10006c36:	431c      	orrs	r4, r3
10006c38:	7acb      	ldrb	r3, [r1, #11]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
10006c3a:	022d      	lsls	r5, r5, #8

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
10006c3c:	061b      	lsls	r3, r3, #24
10006c3e:	431c      	orrs	r4, r3
10006c40:	6893      	ldr	r3, [r2, #8]
10006c42:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
10006c44:	7b8b      	ldrb	r3, [r1, #14]
10006c46:	041b      	lsls	r3, r3, #16
10006c48:	431d      	orrs	r5, r3
10006c4a:	7b0b      	ldrb	r3, [r1, #12]
10006c4c:	7bc9      	ldrb	r1, [r1, #15]
10006c4e:	431d      	orrs	r5, r3
10006c50:	060b      	lsls	r3, r1, #24
10006c52:	1c29      	adds	r1, r5, #0
10006c54:	4319      	orrs	r1, r3
10006c56:	68d3      	ldr	r3, [r2, #12]
10006c58:	3210      	adds	r2, #16
10006c5a:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
10006c5c:	6803      	ldr	r3, [r0, #0]
10006c5e:	105b      	asrs	r3, r3, #1
10006c60:	3b01      	subs	r3, #1
10006c62:	9305      	str	r3, [sp, #20]
10006c64:	9805      	ldr	r0, [sp, #20]
10006c66:	23ff      	movs	r3, #255	; 0xff
10006c68:	2800      	cmp	r0, #0
10006c6a:	dc00      	bgt.n	10006c6e <mbedtls_internal_aes_encrypt+0x82>
10006c6c:	e0cd      	b.n	10006e0a <mbedtls_internal_aes_encrypt+0x21e>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10006c6e:	9801      	ldr	r0, [sp, #4]
10006c70:	4dd7      	ldr	r5, [pc, #860]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006c72:	4018      	ands	r0, r3
10006c74:	0080      	lsls	r0, r0, #2
10006c76:	582f      	ldr	r7, [r5, r0]
10006c78:	6810      	ldr	r0, [r2, #0]
10006c7a:	4dd6      	ldr	r5, [pc, #856]	; (10006fd4 <mbedtls_internal_aes_encrypt+0x3e8>)
10006c7c:	4047      	eors	r7, r0
10006c7e:	0e08      	lsrs	r0, r1, #24
10006c80:	0080      	lsls	r0, r0, #2
10006c82:	5940      	ldr	r0, [r0, r5]
10006c84:	4047      	eors	r7, r0
10006c86:	48d4      	ldr	r0, [pc, #848]	; (10006fd8 <mbedtls_internal_aes_encrypt+0x3ec>)
10006c88:	4684      	mov	ip, r0
10006c8a:	4666      	mov	r6, ip
10006c8c:	9802      	ldr	r0, [sp, #8]
10006c8e:	0a00      	lsrs	r0, r0, #8
10006c90:	4018      	ands	r0, r3
10006c92:	0080      	lsls	r0, r0, #2
10006c94:	5980      	ldr	r0, [r0, r6]
10006c96:	0c26      	lsrs	r6, r4, #16
10006c98:	4047      	eors	r7, r0
10006c9a:	401e      	ands	r6, r3
10006c9c:	48cf      	ldr	r0, [pc, #828]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006c9e:	00b6      	lsls	r6, r6, #2
10006ca0:	5836      	ldr	r6, [r6, r0]
10006ca2:	4660      	mov	r0, ip
10006ca4:	4077      	eors	r7, r6
10006ca6:	9e02      	ldr	r6, [sp, #8]
10006ca8:	9703      	str	r7, [sp, #12]
10006caa:	401e      	ands	r6, r3
10006cac:	4fc8      	ldr	r7, [pc, #800]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006cae:	00b6      	lsls	r6, r6, #2
10006cb0:	59bf      	ldr	r7, [r7, r6]
10006cb2:	6856      	ldr	r6, [r2, #4]
10006cb4:	4077      	eors	r7, r6
10006cb6:	9e01      	ldr	r6, [sp, #4]
10006cb8:	0e36      	lsrs	r6, r6, #24
10006cba:	00b6      	lsls	r6, r6, #2
10006cbc:	5976      	ldr	r6, [r6, r5]
10006cbe:	4077      	eors	r7, r6
10006cc0:	0a26      	lsrs	r6, r4, #8
10006cc2:	401e      	ands	r6, r3
10006cc4:	00b6      	lsls	r6, r6, #2
10006cc6:	5836      	ldr	r6, [r6, r0]
10006cc8:	48c4      	ldr	r0, [pc, #784]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006cca:	4077      	eors	r7, r6
10006ccc:	0c0e      	lsrs	r6, r1, #16
10006cce:	401e      	ands	r6, r3
10006cd0:	00b6      	lsls	r6, r6, #2
10006cd2:	5836      	ldr	r6, [r6, r0]
10006cd4:	48be      	ldr	r0, [pc, #760]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006cd6:	4077      	eors	r7, r6
10006cd8:	1c26      	adds	r6, r4, #0
10006cda:	401e      	ands	r6, r3
10006cdc:	00b6      	lsls	r6, r6, #2
10006cde:	9704      	str	r7, [sp, #16]
10006ce0:	5987      	ldr	r7, [r0, r6]
10006ce2:	6890      	ldr	r0, [r2, #8]
10006ce4:	0e24      	lsrs	r4, r4, #24
10006ce6:	4047      	eors	r7, r0
10006ce8:	9802      	ldr	r0, [sp, #8]
10006cea:	00a4      	lsls	r4, r4, #2
10006cec:	0e06      	lsrs	r6, r0, #24
10006cee:	4660      	mov	r0, ip
10006cf0:	00b6      	lsls	r6, r6, #2
10006cf2:	5976      	ldr	r6, [r6, r5]
10006cf4:	4077      	eors	r7, r6
10006cf6:	0a0e      	lsrs	r6, r1, #8
10006cf8:	401e      	ands	r6, r3
10006cfa:	00b6      	lsls	r6, r6, #2
10006cfc:	5836      	ldr	r6, [r6, r0]
10006cfe:	9801      	ldr	r0, [sp, #4]
10006d00:	4077      	eors	r7, r6
10006d02:	0c06      	lsrs	r6, r0, #16
10006d04:	401e      	ands	r6, r3
10006d06:	48b5      	ldr	r0, [pc, #724]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006d08:	00b6      	lsls	r6, r6, #2
10006d0a:	5836      	ldr	r6, [r6, r0]
10006d0c:	4019      	ands	r1, r3
10006d0e:	48b0      	ldr	r0, [pc, #704]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006d10:	0089      	lsls	r1, r1, #2
10006d12:	5841      	ldr	r1, [r0, r1]
10006d14:	68d0      	ldr	r0, [r2, #12]
10006d16:	4077      	eors	r7, r6
10006d18:	4041      	eors	r1, r0
10006d1a:	9801      	ldr	r0, [sp, #4]
10006d1c:	5964      	ldr	r4, [r4, r5]
10006d1e:	0a06      	lsrs	r6, r0, #8
10006d20:	4660      	mov	r0, ip
10006d22:	401e      	ands	r6, r3
10006d24:	00b6      	lsls	r6, r6, #2
10006d26:	4061      	eors	r1, r4
10006d28:	5834      	ldr	r4, [r6, r0]
10006d2a:	9802      	ldr	r0, [sp, #8]
10006d2c:	4061      	eors	r1, r4
10006d2e:	0c06      	lsrs	r6, r0, #16
10006d30:	401e      	ands	r6, r3
10006d32:	48aa      	ldr	r0, [pc, #680]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006d34:	00b6      	lsls	r6, r6, #2
10006d36:	5834      	ldr	r4, [r6, r0]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
10006d38:	9e03      	ldr	r6, [sp, #12]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10006d3a:	4061      	eors	r1, r4
10006d3c:	48a4      	ldr	r0, [pc, #656]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
10006d3e:	401e      	ands	r6, r3
10006d40:	0e0c      	lsrs	r4, r1, #24
10006d42:	00b6      	lsls	r6, r6, #2
10006d44:	00a4      	lsls	r4, r4, #2
10006d46:	5964      	ldr	r4, [r4, r5]
10006d48:	5986      	ldr	r6, [r0, r6]
10006d4a:	6910      	ldr	r0, [r2, #16]
10006d4c:	4066      	eors	r6, r4
10006d4e:	4046      	eors	r6, r0
10006d50:	9804      	ldr	r0, [sp, #16]
10006d52:	0a04      	lsrs	r4, r0, #8
10006d54:	4660      	mov	r0, ip
10006d56:	401c      	ands	r4, r3
10006d58:	00a4      	lsls	r4, r4, #2
10006d5a:	5824      	ldr	r4, [r4, r0]
10006d5c:	489f      	ldr	r0, [pc, #636]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006d5e:	4066      	eors	r6, r4
10006d60:	0c3c      	lsrs	r4, r7, #16
10006d62:	401c      	ands	r4, r3
10006d64:	00a4      	lsls	r4, r4, #2
10006d66:	5824      	ldr	r4, [r4, r0]
10006d68:	9803      	ldr	r0, [sp, #12]
10006d6a:	4066      	eors	r6, r4
10006d6c:	9601      	str	r6, [sp, #4]
10006d6e:	9e04      	ldr	r6, [sp, #16]
10006d70:	0e04      	lsrs	r4, r0, #24
10006d72:	401e      	ands	r6, r3
10006d74:	4896      	ldr	r0, [pc, #600]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006d76:	00b6      	lsls	r6, r6, #2
10006d78:	00a4      	lsls	r4, r4, #2
10006d7a:	5964      	ldr	r4, [r4, r5]
10006d7c:	5986      	ldr	r6, [r0, r6]
10006d7e:	6950      	ldr	r0, [r2, #20]
10006d80:	4066      	eors	r6, r4
10006d82:	4046      	eors	r6, r0
10006d84:	4660      	mov	r0, ip
10006d86:	0a3c      	lsrs	r4, r7, #8
10006d88:	401c      	ands	r4, r3
10006d8a:	00a4      	lsls	r4, r4, #2
10006d8c:	5824      	ldr	r4, [r4, r0]
10006d8e:	4893      	ldr	r0, [pc, #588]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006d90:	4066      	eors	r6, r4
10006d92:	0c0c      	lsrs	r4, r1, #16
10006d94:	401c      	ands	r4, r3
10006d96:	00a4      	lsls	r4, r4, #2
10006d98:	5824      	ldr	r4, [r4, r0]
10006d9a:	9804      	ldr	r0, [sp, #16]
10006d9c:	4066      	eors	r6, r4
10006d9e:	9602      	str	r6, [sp, #8]
10006da0:	1c3e      	adds	r6, r7, #0
10006da2:	0e04      	lsrs	r4, r0, #24
10006da4:	401e      	ands	r6, r3
10006da6:	488a      	ldr	r0, [pc, #552]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006da8:	00b6      	lsls	r6, r6, #2
10006daa:	00a4      	lsls	r4, r4, #2
10006dac:	5986      	ldr	r6, [r0, r6]
10006dae:	5964      	ldr	r4, [r4, r5]
10006db0:	6990      	ldr	r0, [r2, #24]
10006db2:	4074      	eors	r4, r6
10006db4:	4044      	eors	r4, r0
10006db6:	4660      	mov	r0, ip
10006db8:	0a0e      	lsrs	r6, r1, #8
10006dba:	401e      	ands	r6, r3
10006dbc:	00b6      	lsls	r6, r6, #2
10006dbe:	5836      	ldr	r6, [r6, r0]
10006dc0:	9803      	ldr	r0, [sp, #12]
10006dc2:	4074      	eors	r4, r6
10006dc4:	0c06      	lsrs	r6, r0, #16
10006dc6:	401e      	ands	r6, r3
10006dc8:	4884      	ldr	r0, [pc, #528]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006dca:	00b6      	lsls	r6, r6, #2
10006dcc:	5836      	ldr	r6, [r6, r0]
10006dce:	4019      	ands	r1, r3
10006dd0:	487f      	ldr	r0, [pc, #508]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006dd2:	0e3f      	lsrs	r7, r7, #24
10006dd4:	00bf      	lsls	r7, r7, #2
10006dd6:	0089      	lsls	r1, r1, #2
10006dd8:	597d      	ldr	r5, [r7, r5]
10006dda:	5841      	ldr	r1, [r0, r1]
10006ddc:	69d0      	ldr	r0, [r2, #28]
10006dde:	4069      	eors	r1, r5
10006de0:	4041      	eors	r1, r0
10006de2:	9803      	ldr	r0, [sp, #12]
10006de4:	4074      	eors	r4, r6
10006de6:	0a07      	lsrs	r7, r0, #8
10006de8:	4660      	mov	r0, ip
10006dea:	401f      	ands	r7, r3
10006dec:	00bf      	lsls	r7, r7, #2
10006dee:	583d      	ldr	r5, [r7, r0]
10006df0:	9804      	ldr	r0, [sp, #16]
10006df2:	4069      	eors	r1, r5
10006df4:	0c07      	lsrs	r7, r0, #16
10006df6:	401f      	ands	r7, r3
10006df8:	4b78      	ldr	r3, [pc, #480]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006dfa:	00bf      	lsls	r7, r7, #2
10006dfc:	58fb      	ldr	r3, [r7, r3]
10006dfe:	3220      	adds	r2, #32
10006e00:	4059      	eors	r1, r3
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
10006e02:	9b05      	ldr	r3, [sp, #20]
10006e04:	3b01      	subs	r3, #1
10006e06:	9305      	str	r3, [sp, #20]
10006e08:	e72c      	b.n	10006c64 <mbedtls_internal_aes_encrypt+0x78>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10006e0a:	4872      	ldr	r0, [pc, #456]	; (10006fd4 <mbedtls_internal_aes_encrypt+0x3e8>)
10006e0c:	9d01      	ldr	r5, [sp, #4]
10006e0e:	4684      	mov	ip, r0
10006e10:	401d      	ands	r5, r3
10006e12:	4e6f      	ldr	r6, [pc, #444]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006e14:	00ad      	lsls	r5, r5, #2
10006e16:	5976      	ldr	r6, [r6, r5]
10006e18:	4665      	mov	r5, ip
10006e1a:	0e08      	lsrs	r0, r1, #24
10006e1c:	0080      	lsls	r0, r0, #2
10006e1e:	5940      	ldr	r0, [r0, r5]
10006e20:	4f6d      	ldr	r7, [pc, #436]	; (10006fd8 <mbedtls_internal_aes_encrypt+0x3ec>)
10006e22:	4046      	eors	r6, r0
10006e24:	6810      	ldr	r0, [r2, #0]
10006e26:	4d6d      	ldr	r5, [pc, #436]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006e28:	4046      	eors	r6, r0
10006e2a:	9802      	ldr	r0, [sp, #8]
10006e2c:	0a00      	lsrs	r0, r0, #8
10006e2e:	4018      	ands	r0, r3
10006e30:	0080      	lsls	r0, r0, #2
10006e32:	59c0      	ldr	r0, [r0, r7]
10006e34:	4046      	eors	r6, r0
10006e36:	0c20      	lsrs	r0, r4, #16
10006e38:	4018      	ands	r0, r3
10006e3a:	0080      	lsls	r0, r0, #2
10006e3c:	5940      	ldr	r0, [r0, r5]
10006e3e:	4d64      	ldr	r5, [pc, #400]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006e40:	4046      	eors	r6, r0
10006e42:	9603      	str	r6, [sp, #12]
10006e44:	9e02      	ldr	r6, [sp, #8]
10006e46:	9801      	ldr	r0, [sp, #4]
10006e48:	401e      	ands	r6, r3
10006e4a:	00b6      	lsls	r6, r6, #2
10006e4c:	59ae      	ldr	r6, [r5, r6]
10006e4e:	4665      	mov	r5, ip
10006e50:	0e00      	lsrs	r0, r0, #24
10006e52:	0080      	lsls	r0, r0, #2
10006e54:	5940      	ldr	r0, [r0, r5]
10006e56:	4d61      	ldr	r5, [pc, #388]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006e58:	4046      	eors	r6, r0
10006e5a:	6850      	ldr	r0, [r2, #4]
10006e5c:	4046      	eors	r6, r0
10006e5e:	0a20      	lsrs	r0, r4, #8
10006e60:	4018      	ands	r0, r3
10006e62:	0080      	lsls	r0, r0, #2
10006e64:	59c0      	ldr	r0, [r0, r7]
10006e66:	4046      	eors	r6, r0
10006e68:	0c08      	lsrs	r0, r1, #16
10006e6a:	4018      	ands	r0, r3
10006e6c:	0080      	lsls	r0, r0, #2
10006e6e:	5940      	ldr	r0, [r0, r5]
10006e70:	4d57      	ldr	r5, [pc, #348]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006e72:	4046      	eors	r6, r0
10006e74:	9604      	str	r6, [sp, #16]
10006e76:	1c26      	adds	r6, r4, #0
10006e78:	401e      	ands	r6, r3
10006e7a:	00b6      	lsls	r6, r6, #2
10006e7c:	59ae      	ldr	r6, [r5, r6]
10006e7e:	4665      	mov	r5, ip
10006e80:	9802      	ldr	r0, [sp, #8]
10006e82:	0e24      	lsrs	r4, r4, #24
10006e84:	0e00      	lsrs	r0, r0, #24
10006e86:	0080      	lsls	r0, r0, #2
10006e88:	5940      	ldr	r0, [r0, r5]
10006e8a:	4d54      	ldr	r5, [pc, #336]	; (10006fdc <mbedtls_internal_aes_encrypt+0x3f0>)
10006e8c:	4046      	eors	r6, r0
10006e8e:	6890      	ldr	r0, [r2, #8]
10006e90:	00a4      	lsls	r4, r4, #2
10006e92:	4046      	eors	r6, r0
10006e94:	0a08      	lsrs	r0, r1, #8
10006e96:	4018      	ands	r0, r3
10006e98:	0080      	lsls	r0, r0, #2
10006e9a:	59c0      	ldr	r0, [r0, r7]
10006e9c:	4019      	ands	r1, r3
10006e9e:	4046      	eors	r6, r0
10006ea0:	9801      	ldr	r0, [sp, #4]
10006ea2:	0089      	lsls	r1, r1, #2
10006ea4:	0c00      	lsrs	r0, r0, #16
10006ea6:	4018      	ands	r0, r3
10006ea8:	0080      	lsls	r0, r0, #2
10006eaa:	5940      	ldr	r0, [r0, r5]
10006eac:	4046      	eors	r6, r0
10006eae:	4848      	ldr	r0, [pc, #288]	; (10006fd0 <mbedtls_internal_aes_encrypt+0x3e4>)
10006eb0:	5841      	ldr	r1, [r0, r1]
10006eb2:	4660      	mov	r0, ip
10006eb4:	5820      	ldr	r0, [r4, r0]
10006eb6:	4041      	eors	r1, r0
10006eb8:	68d0      	ldr	r0, [r2, #12]
10006eba:	4041      	eors	r1, r0
10006ebc:	9801      	ldr	r0, [sp, #4]
10006ebe:	0a04      	lsrs	r4, r0, #8
10006ec0:	401c      	ands	r4, r3
10006ec2:	9802      	ldr	r0, [sp, #8]
10006ec4:	00a4      	lsls	r4, r4, #2
10006ec6:	59e7      	ldr	r7, [r4, r7]
10006ec8:	0c04      	lsrs	r4, r0, #16
10006eca:	401c      	ands	r4, r3
10006ecc:	00a4      	lsls	r4, r4, #2
10006ece:	4079      	eors	r1, r7
10006ed0:	5967      	ldr	r7, [r4, r5]

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
10006ed2:	9803      	ldr	r0, [sp, #12]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10006ed4:	404f      	eors	r7, r1

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
10006ed6:	4942      	ldr	r1, [pc, #264]	; (10006fe0 <mbedtls_internal_aes_encrypt+0x3f4>)
10006ed8:	4018      	ands	r0, r3
10006eda:	5c0c      	ldrb	r4, [r1, r0]
10006edc:	6915      	ldr	r5, [r2, #16]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
10006ede:	0e38      	lsrs	r0, r7, #24
10006ee0:	4065      	eors	r5, r4
10006ee2:	1c2c      	adds	r4, r5, #0
10006ee4:	5c08      	ldrb	r0, [r1, r0]
10006ee6:	0600      	lsls	r0, r0, #24
10006ee8:	4044      	eors	r4, r0

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
10006eea:	9804      	ldr	r0, [sp, #16]
10006eec:	0a00      	lsrs	r0, r0, #8
10006eee:	4018      	ands	r0, r3
10006ef0:	5c0d      	ldrb	r5, [r1, r0]
10006ef2:	1c20      	adds	r0, r4, #0
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
10006ef4:	0c34      	lsrs	r4, r6, #16
10006ef6:	401c      	ands	r4, r3

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
10006ef8:	022d      	lsls	r5, r5, #8
10006efa:	4068      	eors	r0, r5
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
10006efc:	5d0d      	ldrb	r5, [r1, r4]
10006efe:	6954      	ldr	r4, [r2, #20]
10006f00:	042d      	lsls	r5, r5, #16
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
10006f02:	4045      	eors	r5, r0
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
10006f04:	9804      	ldr	r0, [sp, #16]
10006f06:	4018      	ands	r0, r3
10006f08:	5c08      	ldrb	r0, [r1, r0]
10006f0a:	4044      	eors	r4, r0
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
10006f0c:	9803      	ldr	r0, [sp, #12]
10006f0e:	0e00      	lsrs	r0, r0, #24
10006f10:	5c08      	ldrb	r0, [r1, r0]
10006f12:	0600      	lsls	r0, r0, #24
10006f14:	4060      	eors	r0, r4
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
10006f16:	0a34      	lsrs	r4, r6, #8
10006f18:	401c      	ands	r4, r3
10006f1a:	5d0c      	ldrb	r4, [r1, r4]
10006f1c:	0224      	lsls	r4, r4, #8
10006f1e:	4060      	eors	r0, r4
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
10006f20:	0c3c      	lsrs	r4, r7, #16
10006f22:	401c      	ands	r4, r3
10006f24:	5d0c      	ldrb	r4, [r1, r4]
10006f26:	0424      	lsls	r4, r4, #16
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
10006f28:	4044      	eors	r4, r0
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
10006f2a:	1c30      	adds	r0, r6, #0
10006f2c:	4018      	ands	r0, r3
10006f2e:	5c08      	ldrb	r0, [r1, r0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
10006f30:	9401      	str	r4, [sp, #4]
10006f32:	6994      	ldr	r4, [r2, #24]
10006f34:	69d2      	ldr	r2, [r2, #28]
10006f36:	4044      	eors	r4, r0

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
10006f38:	9804      	ldr	r0, [sp, #16]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
10006f3a:	0e36      	lsrs	r6, r6, #24

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
10006f3c:	0e00      	lsrs	r0, r0, #24
10006f3e:	5c08      	ldrb	r0, [r1, r0]
10006f40:	0600      	lsls	r0, r0, #24
10006f42:	4060      	eors	r0, r4
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
10006f44:	0a3c      	lsrs	r4, r7, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
10006f46:	401f      	ands	r7, r3
10006f48:	5dcf      	ldrb	r7, [r1, r7]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
10006f4a:	401c      	ands	r4, r3
10006f4c:	5d0c      	ldrb	r4, [r1, r4]
10006f4e:	4057      	eors	r7, r2

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
10006f50:	5d8a      	ldrb	r2, [r1, r6]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
10006f52:	0224      	lsls	r4, r4, #8

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
10006f54:	0612      	lsls	r2, r2, #24
10006f56:	4044      	eors	r4, r0
10006f58:	4057      	eors	r7, r2
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
10006f5a:	9803      	ldr	r0, [sp, #12]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
10006f5c:	9a03      	ldr	r2, [sp, #12]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
10006f5e:	0c00      	lsrs	r0, r0, #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
10006f60:	0a16      	lsrs	r6, r2, #8
10006f62:	401e      	ands	r6, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
10006f64:	4018      	ands	r0, r3
10006f66:	5c08      	ldrb	r0, [r1, r0]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
10006f68:	5d8a      	ldrb	r2, [r1, r6]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
10006f6a:	0400      	lsls	r0, r0, #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
10006f6c:	0212      	lsls	r2, r2, #8
10006f6e:	4057      	eors	r7, r2
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
10006f70:	9a04      	ldr	r2, [sp, #16]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
10006f72:	4060      	eors	r0, r4
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
10006f74:	0c16      	lsrs	r6, r2, #16
10006f76:	4033      	ands	r3, r6
10006f78:	5cca      	ldrb	r2, [r1, r3]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
10006f7a:	9b00      	ldr	r3, [sp, #0]
10006f7c:	9900      	ldr	r1, [sp, #0]
10006f7e:	701d      	strb	r5, [r3, #0]
10006f80:	0a2b      	lsrs	r3, r5, #8
10006f82:	704b      	strb	r3, [r1, #1]
10006f84:	0c2b      	lsrs	r3, r5, #16
10006f86:	0e2d      	lsrs	r5, r5, #24
10006f88:	708b      	strb	r3, [r1, #2]
10006f8a:	70cd      	strb	r5, [r1, #3]
10006f8c:	1c0b      	adds	r3, r1, #0
    PUT_UINT32_LE( X1, output,  4 );
10006f8e:	4669      	mov	r1, sp
10006f90:	7909      	ldrb	r1, [r1, #4]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
10006f92:	0412      	lsls	r2, r2, #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
10006f94:	7119      	strb	r1, [r3, #4]
10006f96:	9b01      	ldr	r3, [sp, #4]
10006f98:	9900      	ldr	r1, [sp, #0]
10006f9a:	0a1b      	lsrs	r3, r3, #8
10006f9c:	714b      	strb	r3, [r1, #5]
10006f9e:	9b01      	ldr	r3, [sp, #4]
    PUT_UINT32_LE( X2, output,  8 );
10006fa0:	7208      	strb	r0, [r1, #8]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
10006fa2:	0c1b      	lsrs	r3, r3, #16
10006fa4:	718b      	strb	r3, [r1, #6]
10006fa6:	9b01      	ldr	r3, [sp, #4]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
10006fa8:	407a      	eors	r2, r7
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
10006faa:	0e1c      	lsrs	r4, r3, #24
    PUT_UINT32_LE( X2, output,  8 );
10006fac:	0a03      	lsrs	r3, r0, #8
10006fae:	724b      	strb	r3, [r1, #9]
10006fb0:	0c03      	lsrs	r3, r0, #16
10006fb2:	0e00      	lsrs	r0, r0, #24
10006fb4:	72c8      	strb	r0, [r1, #11]
    PUT_UINT32_LE( X3, output, 12 );

    return( 0 );
}
10006fb6:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
10006fb8:	728b      	strb	r3, [r1, #10]
    PUT_UINT32_LE( X3, output, 12 );
10006fba:	0a13      	lsrs	r3, r2, #8
10006fbc:	730a      	strb	r2, [r1, #12]
10006fbe:	734b      	strb	r3, [r1, #13]
10006fc0:	0c13      	lsrs	r3, r2, #16
10006fc2:	0e12      	lsrs	r2, r2, #24
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
10006fc4:	71cc      	strb	r4, [r1, #7]
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
10006fc6:	738b      	strb	r3, [r1, #14]
10006fc8:	73ca      	strb	r2, [r1, #15]

    return( 0 );
}
10006fca:	b007      	add	sp, #28
10006fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006fce:	46c0      	nop			; (mov r8, r8)
10006fd0:	1000f27c 	.word	0x1000f27c
10006fd4:	1000fe7c 	.word	0x1000fe7c
10006fd8:	1000f67c 	.word	0x1000f67c
10006fdc:	1000fa7c 	.word	0x1000fa7c
10006fe0:	1000e151 	.word	0x1000e151

10006fe4 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
10006fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
10006fe6:	b089      	sub	sp, #36	; 0x24
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006fe8:	784e      	ldrb	r6, [r1, #1]
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
10006fea:	9202      	str	r2, [sp, #8]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006fec:	788a      	ldrb	r2, [r1, #2]
10006fee:	0236      	lsls	r6, r6, #8
10006ff0:	0412      	lsls	r2, r2, #16
                                  unsigned char output[16] )
{
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
10006ff2:	6843      	ldr	r3, [r0, #4]
10006ff4:	4316      	orrs	r6, r2

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
10006ff6:	78cc      	ldrb	r4, [r1, #3]
10006ff8:	780a      	ldrb	r2, [r1, #0]
10006ffa:	0624      	lsls	r4, r4, #24
10006ffc:	4316      	orrs	r6, r2
10006ffe:	681a      	ldr	r2, [r3, #0]
10007000:	4326      	orrs	r6, r4
10007002:	4072      	eors	r2, r6
10007004:	9203      	str	r2, [sp, #12]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
10007006:	794a      	ldrb	r2, [r1, #5]
10007008:	79cc      	ldrb	r4, [r1, #7]
1000700a:	0216      	lsls	r6, r2, #8
1000700c:	798a      	ldrb	r2, [r1, #6]
1000700e:	0624      	lsls	r4, r4, #24
10007010:	0412      	lsls	r2, r2, #16
10007012:	4332      	orrs	r2, r6
10007014:	790e      	ldrb	r6, [r1, #4]
10007016:	4332      	orrs	r2, r6
10007018:	4322      	orrs	r2, r4
1000701a:	685c      	ldr	r4, [r3, #4]
1000701c:	4054      	eors	r4, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
1000701e:	7a4a      	ldrb	r2, [r1, #9]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
10007020:	9404      	str	r4, [sp, #16]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
10007022:	0214      	lsls	r4, r2, #8
10007024:	7a8a      	ldrb	r2, [r1, #10]
10007026:	0412      	lsls	r2, r2, #16
10007028:	4322      	orrs	r2, r4
1000702a:	7a0c      	ldrb	r4, [r1, #8]
1000702c:	4322      	orrs	r2, r4
1000702e:	7acc      	ldrb	r4, [r1, #11]
10007030:	0624      	lsls	r4, r4, #24
10007032:	4322      	orrs	r2, r4
10007034:	689c      	ldr	r4, [r3, #8]
10007036:	4062      	eors	r2, r4
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
10007038:	7b4c      	ldrb	r4, [r1, #13]
1000703a:	0225      	lsls	r5, r4, #8
1000703c:	7b8c      	ldrb	r4, [r1, #14]
1000703e:	0424      	lsls	r4, r4, #16
10007040:	432c      	orrs	r4, r5
10007042:	7b0d      	ldrb	r5, [r1, #12]
10007044:	7bc9      	ldrb	r1, [r1, #15]
10007046:	432c      	orrs	r4, r5
10007048:	0609      	lsls	r1, r1, #24
1000704a:	430c      	orrs	r4, r1
1000704c:	68d9      	ldr	r1, [r3, #12]
1000704e:	3310      	adds	r3, #16
10007050:	404c      	eors	r4, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
10007052:	6801      	ldr	r1, [r0, #0]
10007054:	1049      	asrs	r1, r1, #1
10007056:	3901      	subs	r1, #1
10007058:	9107      	str	r1, [sp, #28]
1000705a:	9907      	ldr	r1, [sp, #28]
1000705c:	9301      	str	r3, [sp, #4]
1000705e:	23ff      	movs	r3, #255	; 0xff
10007060:	2900      	cmp	r1, #0
10007062:	dc00      	bgt.n	10007066 <mbedtls_internal_aes_decrypt+0x82>
10007064:	e0cd      	b.n	10007202 <mbedtls_internal_aes_decrypt+0x21e>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10007066:	9803      	ldr	r0, [sp, #12]
10007068:	49df      	ldr	r1, [pc, #892]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
1000706a:	4018      	ands	r0, r3
1000706c:	0080      	lsls	r0, r0, #2
1000706e:	580f      	ldr	r7, [r1, r0]
10007070:	9901      	ldr	r1, [sp, #4]
10007072:	4dde      	ldr	r5, [pc, #888]	; (100073ec <mbedtls_internal_aes_decrypt+0x408>)
10007074:	6809      	ldr	r1, [r1, #0]
10007076:	0c16      	lsrs	r6, r2, #16
10007078:	404f      	eors	r7, r1
1000707a:	9904      	ldr	r1, [sp, #16]
1000707c:	401e      	ands	r6, r3
1000707e:	0e08      	lsrs	r0, r1, #24
10007080:	49db      	ldr	r1, [pc, #876]	; (100073f0 <mbedtls_internal_aes_decrypt+0x40c>)
10007082:	0080      	lsls	r0, r0, #2
10007084:	468c      	mov	ip, r1
10007086:	5940      	ldr	r0, [r0, r5]
10007088:	00b6      	lsls	r6, r6, #2
1000708a:	4047      	eors	r7, r0
1000708c:	0a20      	lsrs	r0, r4, #8
1000708e:	4018      	ands	r0, r3
10007090:	0080      	lsls	r0, r0, #2
10007092:	5840      	ldr	r0, [r0, r1]
10007094:	49d4      	ldr	r1, [pc, #848]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
10007096:	4047      	eors	r7, r0
10007098:	48d6      	ldr	r0, [pc, #856]	; (100073f4 <mbedtls_internal_aes_decrypt+0x410>)
1000709a:	5836      	ldr	r6, [r6, r0]
1000709c:	4077      	eors	r7, r6
1000709e:	9e04      	ldr	r6, [sp, #16]
100070a0:	9705      	str	r7, [sp, #20]
100070a2:	401e      	ands	r6, r3
100070a4:	00b6      	lsls	r6, r6, #2
100070a6:	598f      	ldr	r7, [r1, r6]
100070a8:	9901      	ldr	r1, [sp, #4]
100070aa:	0e16      	lsrs	r6, r2, #24
100070ac:	6849      	ldr	r1, [r1, #4]
100070ae:	00b6      	lsls	r6, r6, #2
100070b0:	5976      	ldr	r6, [r6, r5]
100070b2:	404f      	eors	r7, r1
100070b4:	9903      	ldr	r1, [sp, #12]
100070b6:	4077      	eors	r7, r6
100070b8:	0a0e      	lsrs	r6, r1, #8
100070ba:	4661      	mov	r1, ip
100070bc:	401e      	ands	r6, r3
100070be:	00b6      	lsls	r6, r6, #2
100070c0:	5876      	ldr	r6, [r6, r1]
100070c2:	49c9      	ldr	r1, [pc, #804]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
100070c4:	4077      	eors	r7, r6
100070c6:	0c26      	lsrs	r6, r4, #16
100070c8:	401e      	ands	r6, r3
100070ca:	00b6      	lsls	r6, r6, #2
100070cc:	5836      	ldr	r6, [r6, r0]
100070ce:	4077      	eors	r7, r6
100070d0:	1c16      	adds	r6, r2, #0
100070d2:	401e      	ands	r6, r3
100070d4:	00b6      	lsls	r6, r6, #2
100070d6:	9706      	str	r7, [sp, #24]
100070d8:	598f      	ldr	r7, [r1, r6]
100070da:	9901      	ldr	r1, [sp, #4]
100070dc:	0e26      	lsrs	r6, r4, #24
100070de:	6889      	ldr	r1, [r1, #8]
100070e0:	00b6      	lsls	r6, r6, #2
100070e2:	5976      	ldr	r6, [r6, r5]
100070e4:	404f      	eors	r7, r1
100070e6:	9904      	ldr	r1, [sp, #16]
100070e8:	4077      	eors	r7, r6
100070ea:	0a0e      	lsrs	r6, r1, #8
100070ec:	4661      	mov	r1, ip
100070ee:	401e      	ands	r6, r3
100070f0:	00b6      	lsls	r6, r6, #2
100070f2:	5876      	ldr	r6, [r6, r1]
100070f4:	9903      	ldr	r1, [sp, #12]
100070f6:	4077      	eors	r7, r6
100070f8:	0c0e      	lsrs	r6, r1, #16
100070fa:	401e      	ands	r6, r3
100070fc:	401c      	ands	r4, r3
100070fe:	49ba      	ldr	r1, [pc, #744]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
10007100:	00b6      	lsls	r6, r6, #2
10007102:	00a4      	lsls	r4, r4, #2
10007104:	5836      	ldr	r6, [r6, r0]
10007106:	590c      	ldr	r4, [r1, r4]
10007108:	9901      	ldr	r1, [sp, #4]
1000710a:	4077      	eors	r7, r6
1000710c:	68c9      	ldr	r1, [r1, #12]
1000710e:	0a12      	lsrs	r2, r2, #8
10007110:	404c      	eors	r4, r1
10007112:	9903      	ldr	r1, [sp, #12]
10007114:	401a      	ands	r2, r3
10007116:	0e0e      	lsrs	r6, r1, #24
10007118:	4661      	mov	r1, ip
1000711a:	00b6      	lsls	r6, r6, #2
1000711c:	5976      	ldr	r6, [r6, r5]
1000711e:	0092      	lsls	r2, r2, #2
10007120:	4066      	eors	r6, r4
10007122:	5854      	ldr	r4, [r2, r1]
10007124:	49b0      	ldr	r1, [pc, #704]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
10007126:	4074      	eors	r4, r6
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
10007128:	9e05      	ldr	r6, [sp, #20]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
1000712a:	9a04      	ldr	r2, [sp, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
1000712c:	401e      	ands	r6, r3
1000712e:	00b6      	lsls	r6, r6, #2
10007130:	598e      	ldr	r6, [r1, r6]
10007132:	4661      	mov	r1, ip
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10007134:	0c12      	lsrs	r2, r2, #16
10007136:	401a      	ands	r2, r3
10007138:	0092      	lsls	r2, r2, #2
1000713a:	5812      	ldr	r2, [r2, r0]
1000713c:	4054      	eors	r4, r2
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
1000713e:	9a06      	ldr	r2, [sp, #24]
10007140:	0e12      	lsrs	r2, r2, #24
10007142:	0092      	lsls	r2, r2, #2
10007144:	5952      	ldr	r2, [r2, r5]
10007146:	4056      	eors	r6, r2
10007148:	9a01      	ldr	r2, [sp, #4]
1000714a:	6912      	ldr	r2, [r2, #16]
1000714c:	4056      	eors	r6, r2
1000714e:	0a22      	lsrs	r2, r4, #8
10007150:	401a      	ands	r2, r3
10007152:	0092      	lsls	r2, r2, #2
10007154:	5852      	ldr	r2, [r2, r1]
10007156:	49a4      	ldr	r1, [pc, #656]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
10007158:	4056      	eors	r6, r2
1000715a:	0c3a      	lsrs	r2, r7, #16
1000715c:	401a      	ands	r2, r3
1000715e:	0092      	lsls	r2, r2, #2
10007160:	5812      	ldr	r2, [r2, r0]
10007162:	4056      	eors	r6, r2
10007164:	9603      	str	r6, [sp, #12]
10007166:	9e06      	ldr	r6, [sp, #24]
10007168:	0e3a      	lsrs	r2, r7, #24
1000716a:	401e      	ands	r6, r3
1000716c:	00b6      	lsls	r6, r6, #2
1000716e:	598e      	ldr	r6, [r1, r6]
10007170:	4661      	mov	r1, ip
10007172:	0092      	lsls	r2, r2, #2
10007174:	5952      	ldr	r2, [r2, r5]
10007176:	4056      	eors	r6, r2
10007178:	9a01      	ldr	r2, [sp, #4]
1000717a:	6952      	ldr	r2, [r2, #20]
1000717c:	4056      	eors	r6, r2
1000717e:	9a05      	ldr	r2, [sp, #20]
10007180:	0a12      	lsrs	r2, r2, #8
10007182:	401a      	ands	r2, r3
10007184:	0092      	lsls	r2, r2, #2
10007186:	5852      	ldr	r2, [r2, r1]
10007188:	4997      	ldr	r1, [pc, #604]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
1000718a:	4056      	eors	r6, r2
1000718c:	0c22      	lsrs	r2, r4, #16
1000718e:	401a      	ands	r2, r3
10007190:	0092      	lsls	r2, r2, #2
10007192:	5812      	ldr	r2, [r2, r0]
10007194:	4056      	eors	r6, r2
10007196:	9604      	str	r6, [sp, #16]
10007198:	1c3e      	adds	r6, r7, #0
1000719a:	401e      	ands	r6, r3
1000719c:	0e22      	lsrs	r2, r4, #24
1000719e:	00b6      	lsls	r6, r6, #2
100071a0:	598e      	ldr	r6, [r1, r6]
100071a2:	0092      	lsls	r2, r2, #2
100071a4:	9901      	ldr	r1, [sp, #4]
100071a6:	5952      	ldr	r2, [r2, r5]
100071a8:	6989      	ldr	r1, [r1, #24]
100071aa:	4072      	eors	r2, r6
100071ac:	404a      	eors	r2, r1
100071ae:	9906      	ldr	r1, [sp, #24]
100071b0:	401c      	ands	r4, r3
100071b2:	0a0e      	lsrs	r6, r1, #8
100071b4:	4661      	mov	r1, ip
100071b6:	401e      	ands	r6, r3
100071b8:	00b6      	lsls	r6, r6, #2
100071ba:	5876      	ldr	r6, [r6, r1]
100071bc:	9905      	ldr	r1, [sp, #20]
100071be:	4072      	eors	r2, r6
100071c0:	0c0e      	lsrs	r6, r1, #16
100071c2:	401e      	ands	r6, r3
100071c4:	00b6      	lsls	r6, r6, #2
100071c6:	5836      	ldr	r6, [r6, r0]
100071c8:	00a4      	lsls	r4, r4, #2
100071ca:	4072      	eors	r2, r6
100071cc:	0e0e      	lsrs	r6, r1, #24
100071ce:	4986      	ldr	r1, [pc, #536]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
100071d0:	00b6      	lsls	r6, r6, #2
100071d2:	590c      	ldr	r4, [r1, r4]
100071d4:	9901      	ldr	r1, [sp, #4]
100071d6:	5975      	ldr	r5, [r6, r5]
100071d8:	69c9      	ldr	r1, [r1, #28]
100071da:	406c      	eors	r4, r5
100071dc:	404c      	eors	r4, r1
100071de:	4661      	mov	r1, ip
100071e0:	0a3e      	lsrs	r6, r7, #8
100071e2:	401e      	ands	r6, r3
100071e4:	00b6      	lsls	r6, r6, #2
100071e6:	5875      	ldr	r5, [r6, r1]
100071e8:	9906      	ldr	r1, [sp, #24]
100071ea:	406c      	eors	r4, r5
100071ec:	0c0f      	lsrs	r7, r1, #16
100071ee:	401f      	ands	r7, r3
100071f0:	00bf      	lsls	r7, r7, #2
100071f2:	583b      	ldr	r3, [r7, r0]
100071f4:	405c      	eors	r4, r3
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
100071f6:	9b07      	ldr	r3, [sp, #28]
100071f8:	3b01      	subs	r3, #1
100071fa:	9307      	str	r3, [sp, #28]
100071fc:	9b01      	ldr	r3, [sp, #4]
100071fe:	3320      	adds	r3, #32
10007200:	e72b      	b.n	1000705a <mbedtls_internal_aes_decrypt+0x76>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
10007202:	9904      	ldr	r1, [sp, #16]
10007204:	9d03      	ldr	r5, [sp, #12]
10007206:	4f79      	ldr	r7, [pc, #484]	; (100073ec <mbedtls_internal_aes_decrypt+0x408>)
10007208:	401d      	ands	r5, r3
1000720a:	0e08      	lsrs	r0, r1, #24
1000720c:	4976      	ldr	r1, [pc, #472]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
1000720e:	00ad      	lsls	r5, r5, #2
10007210:	0080      	lsls	r0, r0, #2
10007212:	59c0      	ldr	r0, [r0, r7]
10007214:	594d      	ldr	r5, [r1, r5]
10007216:	9901      	ldr	r1, [sp, #4]
10007218:	4045      	eors	r5, r0
1000721a:	0a20      	lsrs	r0, r4, #8
1000721c:	4e74      	ldr	r6, [pc, #464]	; (100073f0 <mbedtls_internal_aes_decrypt+0x40c>)
1000721e:	4018      	ands	r0, r3
10007220:	6809      	ldr	r1, [r1, #0]
10007222:	0080      	lsls	r0, r0, #2
10007224:	5980      	ldr	r0, [r0, r6]
10007226:	404d      	eors	r5, r1
10007228:	4045      	eors	r5, r0
1000722a:	46ac      	mov	ip, r5
1000722c:	4661      	mov	r1, ip
1000722e:	0c10      	lsrs	r0, r2, #16
10007230:	4d70      	ldr	r5, [pc, #448]	; (100073f4 <mbedtls_internal_aes_decrypt+0x410>)
10007232:	4018      	ands	r0, r3
10007234:	0080      	lsls	r0, r0, #2
10007236:	5940      	ldr	r0, [r0, r5]
10007238:	4041      	eors	r1, r0
1000723a:	9804      	ldr	r0, [sp, #16]
1000723c:	9105      	str	r1, [sp, #20]
1000723e:	4018      	ands	r0, r3
10007240:	0081      	lsls	r1, r0, #2
10007242:	468c      	mov	ip, r1
10007244:	0e10      	lsrs	r0, r2, #24
10007246:	0081      	lsls	r1, r0, #2
10007248:	4660      	mov	r0, ip
1000724a:	9106      	str	r1, [sp, #24]
1000724c:	4966      	ldr	r1, [pc, #408]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
1000724e:	5809      	ldr	r1, [r1, r0]
10007250:	468c      	mov	ip, r1
10007252:	9906      	ldr	r1, [sp, #24]
10007254:	59c8      	ldr	r0, [r1, r7]
10007256:	4661      	mov	r1, ip
10007258:	4048      	eors	r0, r1
1000725a:	9901      	ldr	r1, [sp, #4]
1000725c:	6849      	ldr	r1, [r1, #4]
1000725e:	4041      	eors	r1, r0
10007260:	468c      	mov	ip, r1
10007262:	9903      	ldr	r1, [sp, #12]
10007264:	0a08      	lsrs	r0, r1, #8
10007266:	4661      	mov	r1, ip
10007268:	4018      	ands	r0, r3
1000726a:	0080      	lsls	r0, r0, #2
1000726c:	5980      	ldr	r0, [r0, r6]
1000726e:	4041      	eors	r1, r0
10007270:	0c20      	lsrs	r0, r4, #16
10007272:	4018      	ands	r0, r3
10007274:	0080      	lsls	r0, r0, #2
10007276:	5940      	ldr	r0, [r0, r5]
10007278:	4041      	eors	r1, r0
1000727a:	1c10      	adds	r0, r2, #0
1000727c:	4018      	ands	r0, r3
1000727e:	9106      	str	r1, [sp, #24]
10007280:	0081      	lsls	r1, r0, #2
10007282:	468c      	mov	ip, r1
10007284:	0e20      	lsrs	r0, r4, #24
10007286:	0081      	lsls	r1, r0, #2
10007288:	4660      	mov	r0, ip
1000728a:	9107      	str	r1, [sp, #28]
1000728c:	4956      	ldr	r1, [pc, #344]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
1000728e:	401c      	ands	r4, r3
10007290:	5809      	ldr	r1, [r1, r0]
10007292:	00a4      	lsls	r4, r4, #2
10007294:	468c      	mov	ip, r1
10007296:	9907      	ldr	r1, [sp, #28]
10007298:	0a12      	lsrs	r2, r2, #8
1000729a:	59c8      	ldr	r0, [r1, r7]
1000729c:	4661      	mov	r1, ip
1000729e:	4048      	eors	r0, r1
100072a0:	9901      	ldr	r1, [sp, #4]
100072a2:	401a      	ands	r2, r3
100072a4:	6889      	ldr	r1, [r1, #8]
100072a6:	0092      	lsls	r2, r2, #2
100072a8:	4041      	eors	r1, r0
100072aa:	468c      	mov	ip, r1
100072ac:	9904      	ldr	r1, [sp, #16]
100072ae:	0a08      	lsrs	r0, r1, #8
100072b0:	4661      	mov	r1, ip
100072b2:	4018      	ands	r0, r3
100072b4:	0080      	lsls	r0, r0, #2
100072b6:	5980      	ldr	r0, [r0, r6]
100072b8:	4041      	eors	r1, r0
100072ba:	468c      	mov	ip, r1
100072bc:	9903      	ldr	r1, [sp, #12]
100072be:	0c08      	lsrs	r0, r1, #16
100072c0:	4661      	mov	r1, ip
100072c2:	4018      	ands	r0, r3
100072c4:	0080      	lsls	r0, r0, #2
100072c6:	5940      	ldr	r0, [r0, r5]
100072c8:	4048      	eors	r0, r1
100072ca:	9903      	ldr	r1, [sp, #12]
100072cc:	0e09      	lsrs	r1, r1, #24
100072ce:	0089      	lsls	r1, r1, #2
100072d0:	468c      	mov	ip, r1
100072d2:	4945      	ldr	r1, [pc, #276]	; (100073e8 <mbedtls_internal_aes_decrypt+0x404>)
100072d4:	590c      	ldr	r4, [r1, r4]
100072d6:	4661      	mov	r1, ip
100072d8:	59cf      	ldr	r7, [r1, r7]
100072da:	9901      	ldr	r1, [sp, #4]
100072dc:	407c      	eors	r4, r7
100072de:	5997      	ldr	r7, [r2, r6]
100072e0:	9a04      	ldr	r2, [sp, #16]
100072e2:	68c9      	ldr	r1, [r1, #12]
100072e4:	0c12      	lsrs	r2, r2, #16
100072e6:	401a      	ands	r2, r3
100072e8:	0092      	lsls	r2, r2, #2
100072ea:	5952      	ldr	r2, [r2, r5]
100072ec:	404c      	eors	r4, r1
100072ee:	4067      	eors	r7, r4

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
100072f0:	9c05      	ldr	r4, [sp, #20]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
100072f2:	4057      	eors	r7, r2
100072f4:	9901      	ldr	r1, [sp, #4]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
100072f6:	4a40      	ldr	r2, [pc, #256]	; (100073f8 <mbedtls_internal_aes_decrypt+0x414>)
100072f8:	401c      	ands	r4, r3
100072fa:	5d15      	ldrb	r5, [r2, r4]
100072fc:	690e      	ldr	r6, [r1, #16]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
100072fe:	9906      	ldr	r1, [sp, #24]
10007300:	406e      	eors	r6, r5
10007302:	1c35      	adds	r5, r6, #0
10007304:	0e0c      	lsrs	r4, r1, #24
10007306:	5d14      	ldrb	r4, [r2, r4]
10007308:	0624      	lsls	r4, r4, #24
1000730a:	4065      	eors	r5, r4

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
1000730c:	0a3c      	lsrs	r4, r7, #8
1000730e:	401c      	ands	r4, r3
10007310:	5d16      	ldrb	r6, [r2, r4]
10007312:	1c2c      	adds	r4, r5, #0
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
10007314:	0c05      	lsrs	r5, r0, #16
10007316:	401d      	ands	r5, r3

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
10007318:	0236      	lsls	r6, r6, #8
1000731a:	4074      	eors	r4, r6
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
1000731c:	5d56      	ldrb	r6, [r2, r5]
1000731e:	0436      	lsls	r6, r6, #16
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
10007320:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
10007322:	1c0c      	adds	r4, r1, #0
10007324:	9901      	ldr	r1, [sp, #4]
10007326:	401c      	ands	r4, r3
10007328:	5d14      	ldrb	r4, [r2, r4]
1000732a:	694d      	ldr	r5, [r1, #20]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
1000732c:	9905      	ldr	r1, [sp, #20]
1000732e:	4065      	eors	r5, r4
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
10007330:	0e04      	lsrs	r4, r0, #24
10007332:	5d14      	ldrb	r4, [r2, r4]
10007334:	0624      	lsls	r4, r4, #24
10007336:	406c      	eors	r4, r5
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
10007338:	0a0d      	lsrs	r5, r1, #8
1000733a:	401d      	ands	r5, r3
1000733c:	5d55      	ldrb	r5, [r2, r5]
1000733e:	9901      	ldr	r1, [sp, #4]
10007340:	022d      	lsls	r5, r5, #8
10007342:	406c      	eors	r4, r5
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
10007344:	0c3d      	lsrs	r5, r7, #16
10007346:	401d      	ands	r5, r3
10007348:	5d55      	ldrb	r5, [r2, r5]
1000734a:	6989      	ldr	r1, [r1, #24]
1000734c:	042d      	lsls	r5, r5, #16
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
1000734e:	4065      	eors	r5, r4
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
10007350:	1c04      	adds	r4, r0, #0
10007352:	401c      	ands	r4, r3
10007354:	5d14      	ldrb	r4, [r2, r4]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
10007356:	0a00      	lsrs	r0, r0, #8
10007358:	4061      	eors	r1, r4

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
1000735a:	0e3c      	lsrs	r4, r7, #24
1000735c:	5d14      	ldrb	r4, [r2, r4]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
1000735e:	401f      	ands	r7, r3

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
10007360:	0624      	lsls	r4, r4, #24
10007362:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
10007364:	9906      	ldr	r1, [sp, #24]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
10007366:	4018      	ands	r0, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
10007368:	0a09      	lsrs	r1, r1, #8
1000736a:	4019      	ands	r1, r3
1000736c:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
1000736e:	5dd7      	ldrb	r7, [r2, r7]
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
10007370:	0209      	lsls	r1, r1, #8
10007372:	4061      	eors	r1, r4
10007374:	468c      	mov	ip, r1
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
10007376:	9905      	ldr	r1, [sp, #20]
10007378:	0c0c      	lsrs	r4, r1, #16
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
1000737a:	4661      	mov	r1, ip
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
1000737c:	401c      	ands	r4, r3
1000737e:	5d14      	ldrb	r4, [r2, r4]
10007380:	0424      	lsls	r4, r4, #16
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
10007382:	404c      	eors	r4, r1
10007384:	9901      	ldr	r1, [sp, #4]
10007386:	69c9      	ldr	r1, [r1, #28]
10007388:	404f      	eors	r7, r1

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
1000738a:	9905      	ldr	r1, [sp, #20]
1000738c:	0e09      	lsrs	r1, r1, #24
1000738e:	5c51      	ldrb	r1, [r2, r1]
10007390:	0609      	lsls	r1, r1, #24
10007392:	404f      	eors	r7, r1
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
10007394:	5c11      	ldrb	r1, [r2, r0]
10007396:	0209      	lsls	r1, r1, #8
10007398:	404f      	eors	r7, r1
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
1000739a:	9906      	ldr	r1, [sp, #24]
1000739c:	0c08      	lsrs	r0, r1, #16
1000739e:	4003      	ands	r3, r0
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );

    return( 0 );
}
100073a0:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
100073a2:	5cd1      	ldrb	r1, [r2, r3]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
100073a4:	9b02      	ldr	r3, [sp, #8]
100073a6:	9a02      	ldr	r2, [sp, #8]
100073a8:	701e      	strb	r6, [r3, #0]
100073aa:	0a33      	lsrs	r3, r6, #8
100073ac:	7053      	strb	r3, [r2, #1]
100073ae:	0c33      	lsrs	r3, r6, #16
100073b0:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
100073b2:	0a2b      	lsrs	r3, r5, #8
100073b4:	7153      	strb	r3, [r2, #5]
100073b6:	0c2b      	lsrs	r3, r5, #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
100073b8:	0409      	lsls	r1, r1, #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
100073ba:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
100073bc:	0a23      	lsrs	r3, r4, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
100073be:	404f      	eors	r7, r1
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
100073c0:	7253      	strb	r3, [r2, #9]
100073c2:	0c23      	lsrs	r3, r4, #16
100073c4:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
100073c6:	0a3b      	lsrs	r3, r7, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
100073c8:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
100073ca:	7115      	strb	r5, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
100073cc:	7214      	strb	r4, [r2, #8]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
100073ce:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
100073d0:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
100073d2:	7317      	strb	r7, [r2, #12]
100073d4:	7353      	strb	r3, [r2, #13]
100073d6:	0c3b      	lsrs	r3, r7, #16
100073d8:	0e3f      	lsrs	r7, r7, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
100073da:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
100073dc:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
100073de:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
100073e0:	7393      	strb	r3, [r2, #14]
100073e2:	73d7      	strb	r7, [r2, #15]

    return( 0 );
}
100073e4:	b009      	add	sp, #36	; 0x24
100073e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100073e8:	1000e254 	.word	0x1000e254
100073ec:	1000ee54 	.word	0x1000ee54
100073f0:	1000e654 	.word	0x1000e654
100073f4:	1000ea54 	.word	0x1000ea54
100073f8:	1001027c 	.word	0x1001027c

100073fc <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
100073fc:	b508      	push	{r3, lr}
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
100073fe:	2901      	cmp	r1, #1
10007400:	d104      	bne.n	1000740c <mbedtls_aes_crypt_ecb+0x10>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
10007402:	1c11      	adds	r1, r2, #0
10007404:	1c1a      	adds	r2, r3, #0
10007406:	f7ff fbf1 	bl	10006bec <mbedtls_internal_aes_encrypt>
1000740a:	e003      	b.n	10007414 <mbedtls_aes_crypt_ecb+0x18>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
1000740c:	1c11      	adds	r1, r2, #0
1000740e:	1c1a      	adds	r2, r3, #0
10007410:	f7ff fde8 	bl	10006fe4 <mbedtls_internal_aes_decrypt>
}
10007414:	bd08      	pop	{r3, pc}

10007416 <ccm_auth_crypt>:
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
10007416:	b5f0      	push	{r4, r5, r6, r7, lr}
10007418:	b097      	sub	sp, #92	; 0x5c
1000741a:	9306      	str	r3, [sp, #24]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
1000741c:	9b22      	ldr	r3, [sp, #136]	; 0x88
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
1000741e:	1c06      	adds	r6, r0, #0
10007420:	9103      	str	r1, [sp, #12]
10007422:	9202      	str	r2, [sp, #8]
10007424:	9d1e      	ldr	r5, [sp, #120]	; 0x78
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
10007426:	2b02      	cmp	r3, #2
10007428:	d102      	bne.n	10007430 <ccm_auth_crypt+0x1a>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
1000742a:	200d      	movs	r0, #13
1000742c:	4240      	negs	r0, r0
1000742e:	e14f      	b.n	100076d0 <ccm_auth_crypt+0x2ba>
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
10007430:	9b22      	ldr	r3, [sp, #136]	; 0x88
10007432:	2b10      	cmp	r3, #16
10007434:	d8f9      	bhi.n	1000742a <ccm_auth_crypt+0x14>
10007436:	07db      	lsls	r3, r3, #31
10007438:	d4f7      	bmi.n	1000742a <ccm_auth_crypt+0x14>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    /* Also implies q is within bounds */
    if( iv_len < 7 || iv_len > 13 )
1000743a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
1000743c:	3b07      	subs	r3, #7
1000743e:	2b06      	cmp	r3, #6
10007440:	d8f3      	bhi.n	1000742a <ccm_auth_crypt+0x14>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
10007442:	23ff      	movs	r3, #255	; 0xff
10007444:	021b      	lsls	r3, r3, #8
10007446:	429d      	cmp	r5, r3
10007448:	d8ef      	bhi.n	1000742a <ccm_auth_crypt+0x14>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
1000744a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
1000744c:	270e      	movs	r7, #14
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
1000744e:	b2da      	uxtb	r2, r3
10007450:	230f      	movs	r3, #15
10007452:	1a9b      	subs	r3, r3, r2
10007454:	b2db      	uxtb	r3, r3
10007456:	9307      	str	r3, [sp, #28]
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
10007458:	1c2b      	adds	r3, r5, #0
1000745a:	1e59      	subs	r1, r3, #1
1000745c:	418b      	sbcs	r3, r1
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );
1000745e:	2011      	movs	r0, #17
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
10007460:	1aba      	subs	r2, r7, r2
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
10007462:	0199      	lsls	r1, r3, #6
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
10007464:	b2d3      	uxtb	r3, r2
10007466:	9304      	str	r3, [sp, #16]
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
10007468:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b[0] |= q - 1;
1000746a:	9a04      	ldr	r2, [sp, #16]
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
1000746c:	3b02      	subs	r3, #2
1000746e:	085b      	lsrs	r3, r3, #1
10007470:	00db      	lsls	r3, r3, #3
10007472:	430b      	orrs	r3, r1
    b[0] |= q - 1;
10007474:	ac0a      	add	r4, sp, #40	; 0x28
10007476:	4313      	orrs	r3, r2
10007478:	7023      	strb	r3, [r4, #0]

    memcpy( b + 1, iv, iv_len );
1000747a:	ab06      	add	r3, sp, #24
1000747c:	18c0      	adds	r0, r0, r3
1000747e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
10007480:	9906      	ldr	r1, [sp, #24]
10007482:	f005 fa92 	bl	1000c9aa <memcpy>
10007486:	221f      	movs	r2, #31
10007488:	ab06      	add	r3, sp, #24
1000748a:	18d2      	adds	r2, r2, r3
1000748c:	9b04      	ldr	r3, [sp, #16]
1000748e:	1afb      	subs	r3, r7, r3
10007490:	9305      	str	r3, [sp, #20]
10007492:	18e3      	adds	r3, r4, r3

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
10007494:	9c02      	ldr	r4, [sp, #8]
        b[15-i] = (unsigned char)( len_left & 0xFF );
10007496:	7014      	strb	r4, [r2, #0]
10007498:	3a01      	subs	r2, #1
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
1000749a:	0a24      	lsrs	r4, r4, #8
1000749c:	429a      	cmp	r2, r3
1000749e:	d1fa      	bne.n	10007496 <ccm_auth_crypt+0x80>
        b[15-i] = (unsigned char)( len_left & 0xFF );

    if( len_left > 0 )
100074a0:	2c00      	cmp	r4, #0
100074a2:	d1c2      	bne.n	1000742a <ccm_auth_crypt+0x14>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );


    /* Start CBC-MAC with first block */
    memset( y, 0, 16 );
100074a4:	a80e      	add	r0, sp, #56	; 0x38
100074a6:	1c21      	adds	r1, r4, #0
100074a8:	2210      	movs	r2, #16
100074aa:	f005 fa87 	bl	1000c9bc <memset>
    UPDATE_CBC_MAC;
100074ae:	ab0e      	add	r3, sp, #56	; 0x38
100074b0:	af0a      	add	r7, sp, #40	; 0x28
100074b2:	5ce2      	ldrb	r2, [r4, r3]
100074b4:	5de1      	ldrb	r1, [r4, r7]
100074b6:	404a      	eors	r2, r1
100074b8:	54e2      	strb	r2, [r4, r3]
100074ba:	3401      	adds	r4, #1
100074bc:	2c10      	cmp	r4, #16
100074be:	d1f6      	bne.n	100074ae <ccm_auth_crypt+0x98>
100074c0:	aa09      	add	r2, sp, #36	; 0x24
100074c2:	9200      	str	r2, [sp, #0]
100074c4:	1c19      	adds	r1, r3, #0
100074c6:	1c30      	adds	r0, r6, #0
100074c8:	1c22      	adds	r2, r4, #0
100074ca:	f000 fa0b 	bl	100078e4 <mbedtls_cipher_update>
100074ce:	1e01      	subs	r1, r0, #0
100074d0:	d000      	beq.n	100074d4 <ccm_auth_crypt+0xbe>
100074d2:	e0fd      	b.n	100076d0 <ccm_auth_crypt+0x2ba>

    /*
     * If there is additional data, update CBC-MAC with
     * add_len, add, 0 (padding to a block boundary)
     */
    if( add_len > 0 )
100074d4:	2d00      	cmp	r5, #0
100074d6:	d114      	bne.n	10007502 <ccm_auth_crypt+0xec>
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
100074d8:	466b      	mov	r3, sp
    memcpy( ctr + 1, iv, iv_len );
100074da:	2031      	movs	r0, #49	; 0x31
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
100074dc:	7c1b      	ldrb	r3, [r3, #16]
100074de:	ac12      	add	r4, sp, #72	; 0x48
100074e0:	7023      	strb	r3, [r4, #0]
    memcpy( ctr + 1, iv, iv_len );
100074e2:	ab06      	add	r3, sp, #24
100074e4:	18c0      	adds	r0, r0, r3
100074e6:	9906      	ldr	r1, [sp, #24]
100074e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
100074ea:	f005 fa5e 	bl	1000c9aa <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
100074ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
100074f0:	2100      	movs	r1, #0
100074f2:	1c58      	adds	r0, r3, #1
100074f4:	1820      	adds	r0, r4, r0
100074f6:	9a07      	ldr	r2, [sp, #28]
100074f8:	f005 fa60 	bl	1000c9bc <memset>
    ctr[15] = 1;
100074fc:	2301      	movs	r3, #1
100074fe:	73e3      	strb	r3, [r4, #15]
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
10007500:	e081      	b.n	10007606 <ccm_auth_crypt+0x1f0>
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
10007502:	1c22      	adds	r2, r4, #0
10007504:	1c38      	adds	r0, r7, #0
10007506:	f005 fa59 	bl	1000c9bc <memset>
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
1000750a:	0a2b      	lsrs	r3, r5, #8
1000750c:	703b      	strb	r3, [r7, #0]
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
1000750e:	707d      	strb	r5, [r7, #1]

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
10007510:	1e2c      	subs	r4, r5, #0
10007512:	2c0e      	cmp	r4, #14
10007514:	d900      	bls.n	10007518 <ccm_auth_crypt+0x102>
10007516:	240e      	movs	r4, #14
        memcpy( b + 2, src, use_len );
10007518:	2012      	movs	r0, #18
1000751a:	ab06      	add	r3, sp, #24
1000751c:	1c22      	adds	r2, r4, #0
1000751e:	18c0      	adds	r0, r0, r3
10007520:	991d      	ldr	r1, [sp, #116]	; 0x74
10007522:	f005 fa42 	bl	1000c9aa <memcpy>
10007526:	2200      	movs	r2, #0
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;
10007528:	ab0e      	add	r3, sp, #56	; 0x38
1000752a:	a90a      	add	r1, sp, #40	; 0x28
1000752c:	5c50      	ldrb	r0, [r2, r1]
1000752e:	5cd1      	ldrb	r1, [r2, r3]
10007530:	4041      	eors	r1, r0
10007532:	54d1      	strb	r1, [r2, r3]
10007534:	3201      	adds	r2, #1
10007536:	2a10      	cmp	r2, #16
10007538:	d1f6      	bne.n	10007528 <ccm_auth_crypt+0x112>
1000753a:	a909      	add	r1, sp, #36	; 0x24
1000753c:	9100      	str	r1, [sp, #0]
1000753e:	1c30      	adds	r0, r6, #0
10007540:	1c19      	adds	r1, r3, #0
10007542:	f000 f9cf 	bl	100078e4 <mbedtls_cipher_update>
10007546:	2800      	cmp	r0, #0
10007548:	d000      	beq.n	1000754c <ccm_auth_crypt+0x136>
1000754a:	e0c1      	b.n	100076d0 <ccm_auth_crypt+0x2ba>
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
        len_left -= use_len;
        src += use_len;
1000754c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
        len_left -= use_len;
1000754e:	1b2d      	subs	r5, r5, r4
        src += use_len;
10007550:	191c      	adds	r4, r3, r4

        UPDATE_CBC_MAC;

        while( len_left > 0 )
10007552:	2d00      	cmp	r5, #0
10007554:	d0c0      	beq.n	100074d8 <ccm_auth_crypt+0xc2>
        {
            use_len = len_left > 16 ? 16 : len_left;
10007556:	1e2f      	subs	r7, r5, #0
10007558:	2f10      	cmp	r7, #16
1000755a:	d900      	bls.n	1000755e <ccm_auth_crypt+0x148>
1000755c:	2710      	movs	r7, #16

            memset( b, 0, 16 );
1000755e:	2100      	movs	r1, #0
10007560:	2210      	movs	r2, #16
10007562:	a80a      	add	r0, sp, #40	; 0x28
10007564:	f005 fa2a 	bl	1000c9bc <memset>
            memcpy( b, src, use_len );
10007568:	1c3a      	adds	r2, r7, #0
1000756a:	a80a      	add	r0, sp, #40	; 0x28
1000756c:	1c21      	adds	r1, r4, #0
1000756e:	f005 fa1c 	bl	1000c9aa <memcpy>
10007572:	2200      	movs	r2, #0
            UPDATE_CBC_MAC;
10007574:	ab0e      	add	r3, sp, #56	; 0x38
10007576:	a90a      	add	r1, sp, #40	; 0x28
10007578:	5c50      	ldrb	r0, [r2, r1]
1000757a:	5cd1      	ldrb	r1, [r2, r3]
1000757c:	4041      	eors	r1, r0
1000757e:	54d1      	strb	r1, [r2, r3]
10007580:	3201      	adds	r2, #1
10007582:	2a10      	cmp	r2, #16
10007584:	d1f6      	bne.n	10007574 <ccm_auth_crypt+0x15e>
10007586:	a909      	add	r1, sp, #36	; 0x24
10007588:	9100      	str	r1, [sp, #0]
1000758a:	1c30      	adds	r0, r6, #0
1000758c:	1c19      	adds	r1, r3, #0
1000758e:	f000 f9a9 	bl	100078e4 <mbedtls_cipher_update>
10007592:	2800      	cmp	r0, #0
10007594:	d000      	beq.n	10007598 <ccm_auth_crypt+0x182>
10007596:	e09b      	b.n	100076d0 <ccm_auth_crypt+0x2ba>

            len_left -= use_len;
10007598:	1bed      	subs	r5, r5, r7
            src += use_len;
1000759a:	19e4      	adds	r4, r4, r7
1000759c:	e7d9      	b.n	10007552 <ccm_auth_crypt+0x13c>
            UPDATE_CBC_MAC;
        }

        CTR_CRYPT( dst, src, use_len );

        if( mode == CCM_DECRYPT )
1000759e:	9b03      	ldr	r3, [sp, #12]
100075a0:	2b01      	cmp	r3, #1
100075a2:	d11b      	bne.n	100075dc <ccm_auth_crypt+0x1c6>
        {
            memset( b, 0, 16 );
100075a4:	2100      	movs	r1, #0
100075a6:	2210      	movs	r2, #16
100075a8:	a80a      	add	r0, sp, #40	; 0x28
100075aa:	f005 fa07 	bl	1000c9bc <memset>
            memcpy( b, dst, use_len );
100075ae:	1c22      	adds	r2, r4, #0
100075b0:	a80a      	add	r0, sp, #40	; 0x28
100075b2:	9920      	ldr	r1, [sp, #128]	; 0x80
100075b4:	f005 f9f9 	bl	1000c9aa <memcpy>
100075b8:	2200      	movs	r2, #0
            UPDATE_CBC_MAC;
100075ba:	ab0e      	add	r3, sp, #56	; 0x38
100075bc:	a90a      	add	r1, sp, #40	; 0x28
100075be:	5c50      	ldrb	r0, [r2, r1]
100075c0:	5cd1      	ldrb	r1, [r2, r3]
100075c2:	4041      	eors	r1, r0
100075c4:	54d1      	strb	r1, [r2, r3]
100075c6:	3201      	adds	r2, #1
100075c8:	2a10      	cmp	r2, #16
100075ca:	d1f6      	bne.n	100075ba <ccm_auth_crypt+0x1a4>
100075cc:	a909      	add	r1, sp, #36	; 0x24
100075ce:	9100      	str	r1, [sp, #0]
100075d0:	1c30      	adds	r0, r6, #0
100075d2:	1c19      	adds	r1, r3, #0
100075d4:	f000 f986 	bl	100078e4 <mbedtls_cipher_update>
100075d8:	2800      	cmp	r0, #0
100075da:	d179      	bne.n	100076d0 <ccm_auth_crypt+0x2ba>
100075dc:	223f      	movs	r2, #63	; 0x3f
        }

        dst += use_len;
100075de:	9b20      	ldr	r3, [sp, #128]	; 0x80
100075e0:	9905      	ldr	r1, [sp, #20]
100075e2:	191b      	adds	r3, r3, r4
100075e4:	9320      	str	r3, [sp, #128]	; 0x80
        src += use_len;
100075e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
100075e8:	191b      	adds	r3, r3, r4
100075ea:	931f      	str	r3, [sp, #124]	; 0x7c
        len_left -= use_len;
100075ec:	9b02      	ldr	r3, [sp, #8]
100075ee:	1b1b      	subs	r3, r3, r4
100075f0:	9302      	str	r3, [sp, #8]
100075f2:	ab06      	add	r3, sp, #24
100075f4:	18d2      	adds	r2, r2, r3
100075f6:	ab12      	add	r3, sp, #72	; 0x48
100075f8:	1859      	adds	r1, r3, r1
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
100075fa:	7813      	ldrb	r3, [r2, #0]
100075fc:	3301      	adds	r3, #1
100075fe:	b2db      	uxtb	r3, r3
10007600:	7013      	strb	r3, [r2, #0]
10007602:	2b00      	cmp	r3, #0
10007604:	d03b      	beq.n	1000767e <ccm_auth_crypt+0x268>
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
10007606:	9b02      	ldr	r3, [sp, #8]
10007608:	2b00      	cmp	r3, #0
1000760a:	d03c      	beq.n	10007686 <ccm_auth_crypt+0x270>
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
1000760c:	9c02      	ldr	r4, [sp, #8]
1000760e:	2c10      	cmp	r4, #16
10007610:	d900      	bls.n	10007614 <ccm_auth_crypt+0x1fe>
10007612:	2410      	movs	r4, #16

        if( mode == CCM_ENCRYPT )
10007614:	9b03      	ldr	r3, [sp, #12]
10007616:	2b00      	cmp	r3, #0
10007618:	d11b      	bne.n	10007652 <ccm_auth_crypt+0x23c>
        {
            memset( b, 0, 16 );
1000761a:	1c19      	adds	r1, r3, #0
1000761c:	2210      	movs	r2, #16
1000761e:	a80a      	add	r0, sp, #40	; 0x28
10007620:	f005 f9cc 	bl	1000c9bc <memset>
            memcpy( b, src, use_len );
10007624:	1c22      	adds	r2, r4, #0
10007626:	a80a      	add	r0, sp, #40	; 0x28
10007628:	991f      	ldr	r1, [sp, #124]	; 0x7c
1000762a:	f005 f9be 	bl	1000c9aa <memcpy>
1000762e:	9a03      	ldr	r2, [sp, #12]
            UPDATE_CBC_MAC;
10007630:	ab0e      	add	r3, sp, #56	; 0x38
10007632:	a90a      	add	r1, sp, #40	; 0x28
10007634:	5c50      	ldrb	r0, [r2, r1]
10007636:	5cd1      	ldrb	r1, [r2, r3]
10007638:	4041      	eors	r1, r0
1000763a:	54d1      	strb	r1, [r2, r3]
1000763c:	3201      	adds	r2, #1
1000763e:	2a10      	cmp	r2, #16
10007640:	d1f6      	bne.n	10007630 <ccm_auth_crypt+0x21a>
10007642:	a909      	add	r1, sp, #36	; 0x24
10007644:	9100      	str	r1, [sp, #0]
10007646:	1c30      	adds	r0, r6, #0
10007648:	1c19      	adds	r1, r3, #0
1000764a:	f000 f94b 	bl	100078e4 <mbedtls_cipher_update>
1000764e:	2800      	cmp	r0, #0
10007650:	d13e      	bne.n	100076d0 <ccm_auth_crypt+0x2ba>
        }

        CTR_CRYPT( dst, src, use_len );
10007652:	ab09      	add	r3, sp, #36	; 0x24
10007654:	9300      	str	r3, [sp, #0]
10007656:	1c30      	adds	r0, r6, #0
10007658:	a912      	add	r1, sp, #72	; 0x48
1000765a:	2210      	movs	r2, #16
1000765c:	ab0a      	add	r3, sp, #40	; 0x28
1000765e:	f000 f941 	bl	100078e4 <mbedtls_cipher_update>
10007662:	2800      	cmp	r0, #0
10007664:	d134      	bne.n	100076d0 <ccm_auth_crypt+0x2ba>
10007666:	42a0      	cmp	r0, r4
10007668:	d299      	bcs.n	1000759e <ccm_auth_crypt+0x188>
1000766a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000766c:	5c1a      	ldrb	r2, [r3, r0]
1000766e:	ab0a      	add	r3, sp, #40	; 0x28
10007670:	5c1b      	ldrb	r3, [r3, r0]
10007672:	4053      	eors	r3, r2
10007674:	9a20      	ldr	r2, [sp, #128]	; 0x80
10007676:	5413      	strb	r3, [r2, r0]
10007678:	3001      	adds	r0, #1
1000767a:	b2c0      	uxtb	r0, r0
1000767c:	e7f3      	b.n	10007666 <ccm_auth_crypt+0x250>
1000767e:	3a01      	subs	r2, #1

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
10007680:	428a      	cmp	r2, r1
10007682:	d1ba      	bne.n	100075fa <ccm_auth_crypt+0x1e4>
10007684:	e7bf      	b.n	10007606 <ccm_auth_crypt+0x1f0>
10007686:	a912      	add	r1, sp, #72	; 0x48
10007688:	468c      	mov	ip, r1
1000768a:	aa06      	add	r2, sp, #24
1000768c:	333f      	adds	r3, #63	; 0x3f
1000768e:	189b      	adds	r3, r3, r2
10007690:	9a05      	ldr	r2, [sp, #20]
10007692:	4462      	add	r2, ip
10007694:	1c17      	adds	r7, r2, #0

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;
10007696:	2200      	movs	r2, #0
10007698:	3b01      	subs	r3, #1
1000769a:	705a      	strb	r2, [r3, #1]
    }

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
1000769c:	42bb      	cmp	r3, r7
1000769e:	d1fa      	bne.n	10007696 <ccm_auth_crypt+0x280>
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
100076a0:	ab09      	add	r3, sp, #36	; 0x24
100076a2:	ac0a      	add	r4, sp, #40	; 0x28
100076a4:	9300      	str	r3, [sp, #0]
100076a6:	1c30      	adds	r0, r6, #0
100076a8:	1c23      	adds	r3, r4, #0
100076aa:	a912      	add	r1, sp, #72	; 0x48
100076ac:	3210      	adds	r2, #16
100076ae:	f000 f919 	bl	100078e4 <mbedtls_cipher_update>
100076b2:	1e03      	subs	r3, r0, #0
100076b4:	d10c      	bne.n	100076d0 <ccm_auth_crypt+0x2ba>
100076b6:	a90e      	add	r1, sp, #56	; 0x38
100076b8:	5c43      	ldrb	r3, [r0, r1]
100076ba:	5c22      	ldrb	r2, [r4, r0]
100076bc:	4053      	eors	r3, r2
100076be:	5443      	strb	r3, [r0, r1]
100076c0:	3001      	adds	r0, #1
100076c2:	2810      	cmp	r0, #16
100076c4:	d1f7      	bne.n	100076b6 <ccm_auth_crypt+0x2a0>
    memcpy( tag, y, tag_len );
100076c6:	9821      	ldr	r0, [sp, #132]	; 0x84
100076c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
100076ca:	f005 f96e 	bl	1000c9aa <memcpy>

    return( 0 );
100076ce:	2000      	movs	r0, #0
}
100076d0:	b017      	add	sp, #92	; 0x5c
100076d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100076d4 <mbedtls_ccm_init>:

/*
 * Initialize context
 */
void mbedtls_ccm_init( mbedtls_ccm_context *ctx )
{
100076d4:	b508      	push	{r3, lr}
    CCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
100076d6:	2100      	movs	r1, #0
100076d8:	2238      	movs	r2, #56	; 0x38
100076da:	f005 f96f 	bl	1000c9bc <memset>
}
100076de:	bd08      	pop	{r3, pc}

100076e0 <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
100076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100076e2:	1c04      	adds	r4, r0, #0
100076e4:	1c16      	adds	r6, r2, #0
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
100076e6:	1c08      	adds	r0, r1, #0
100076e8:	2201      	movs	r2, #1
100076ea:	1c19      	adds	r1, r3, #0

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
100076ec:	1c1d      	adds	r5, r3, #0
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
100076ee:	f000 f899 	bl	10007824 <mbedtls_cipher_info_from_values>
100076f2:	1e07      	subs	r7, r0, #0
    if( cipher_info == NULL )
100076f4:	d012      	beq.n	1000771c <mbedtls_ccm_setkey+0x3c>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
100076f6:	6943      	ldr	r3, [r0, #20]
100076f8:	2b10      	cmp	r3, #16
100076fa:	d10f      	bne.n	1000771c <mbedtls_ccm_setkey+0x3c>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
100076fc:	1c20      	adds	r0, r4, #0
100076fe:	f000 f8a7 	bl	10007850 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
10007702:	1c20      	adds	r0, r4, #0
10007704:	1c39      	adds	r1, r7, #0
10007706:	f000 f8b3 	bl	10007870 <mbedtls_cipher_setup>
1000770a:	2800      	cmp	r0, #0
1000770c:	d108      	bne.n	10007720 <mbedtls_ccm_setkey+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
1000770e:	1c20      	adds	r0, r4, #0
10007710:	1c31      	adds	r1, r6, #0
10007712:	1c2a      	adds	r2, r5, #0
10007714:	2301      	movs	r3, #1
10007716:	f000 f8c5 	bl	100078a4 <mbedtls_cipher_setkey>
1000771a:	e001      	b.n	10007720 <mbedtls_ccm_setkey+0x40>
    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
1000771c:	200d      	movs	r0, #13
1000771e:	4240      	negs	r0, r0
    {
        return( ret );
    }

    return( 0 );
}
10007720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10007722 <mbedtls_ccm_free>:

/*
 * Free context
 */
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
10007722:	b510      	push	{r4, lr}
    if( ctx == NULL )
10007724:	2800      	cmp	r0, #0
10007726:	d006      	beq.n	10007736 <mbedtls_ccm_free+0x14>
10007728:	1c04      	adds	r4, r0, #0
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
1000772a:	f000 f891 	bl	10007850 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
1000772e:	1c20      	adds	r0, r4, #0
10007730:	2138      	movs	r1, #56	; 0x38
10007732:	f000 fa97 	bl	10007c64 <mbedtls_platform_zeroize>
}
10007736:	bd10      	pop	{r4, pc}

10007738 <mbedtls_ccm_star_encrypt_and_tag>:
int mbedtls_ccm_star_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
10007738:	b530      	push	{r4, r5, lr}
1000773a:	1c0d      	adds	r5, r1, #0
1000773c:	1c14      	adds	r4, r2, #0
1000773e:	b089      	sub	sp, #36	; 0x24
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
10007740:	9300      	str	r3, [sp, #0]
10007742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10007744:	2100      	movs	r1, #0
10007746:	9301      	str	r3, [sp, #4]
10007748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000774a:	1c2a      	adds	r2, r5, #0
1000774c:	9302      	str	r3, [sp, #8]
1000774e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10007750:	9303      	str	r3, [sp, #12]
10007752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10007754:	9304      	str	r3, [sp, #16]
10007756:	9b10      	ldr	r3, [sp, #64]	; 0x40
10007758:	9305      	str	r3, [sp, #20]
1000775a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000775c:	9306      	str	r3, [sp, #24]
1000775e:	1c23      	adds	r3, r4, #0
10007760:	f7ff fe59 	bl	10007416 <ccm_auth_crypt>
                            add, add_len, input, output, tag, tag_len ) );
}
10007764:	b009      	add	sp, #36	; 0x24
10007766:	bd30      	pop	{r4, r5, pc}

10007768 <mbedtls_ccm_encrypt_and_tag>:
int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
10007768:	b530      	push	{r4, r5, lr}
1000776a:	b087      	sub	sp, #28
1000776c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
1000776e:	2c00      	cmp	r4, #0
10007770:	d00d      	beq.n	1000778e <mbedtls_ccm_encrypt_and_tag+0x26>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
10007772:	9d0a      	ldr	r5, [sp, #40]	; 0x28
10007774:	9405      	str	r4, [sp, #20]
10007776:	9500      	str	r5, [sp, #0]
10007778:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000777a:	9501      	str	r5, [sp, #4]
1000777c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1000777e:	9502      	str	r5, [sp, #8]
10007780:	9d0d      	ldr	r5, [sp, #52]	; 0x34
10007782:	9503      	str	r5, [sp, #12]
10007784:	9d0e      	ldr	r5, [sp, #56]	; 0x38
10007786:	9504      	str	r5, [sp, #16]
10007788:	f7ff ffd6 	bl	10007738 <mbedtls_ccm_star_encrypt_and_tag>
1000778c:	e001      	b.n	10007792 <mbedtls_ccm_encrypt_and_tag+0x2a>
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
1000778e:	200d      	movs	r0, #13
10007790:	4240      	negs	r0, r0

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
10007792:	b007      	add	sp, #28
10007794:	bd30      	pop	{r4, r5, pc}

10007796 <mbedtls_ccm_star_auth_decrypt>:
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
10007796:	b5f0      	push	{r4, r5, r6, r7, lr}
10007798:	1c0c      	adds	r4, r1, #0
1000779a:	1c17      	adds	r7, r2, #0
1000779c:	b08d      	sub	sp, #52	; 0x34
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
1000779e:	9300      	str	r3, [sp, #0]
100077a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
100077a2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
100077a4:	9301      	str	r3, [sp, #4]
100077a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100077a8:	ae08      	add	r6, sp, #32
100077aa:	9302      	str	r3, [sp, #8]
100077ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
100077ae:	1c22      	adds	r2, r4, #0
100077b0:	9303      	str	r3, [sp, #12]
100077b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
100077b4:	9605      	str	r6, [sp, #20]
100077b6:	9304      	str	r3, [sp, #16]
100077b8:	9506      	str	r5, [sp, #24]
100077ba:	1c3b      	adds	r3, r7, #0
100077bc:	2101      	movs	r1, #1
100077be:	f7ff fe2a 	bl	10007416 <ccm_auth_crypt>
100077c2:	1c02      	adds	r2, r0, #0
100077c4:	1e03      	subs	r3, r0, #0
100077c6:	d112      	bne.n	100077ee <mbedtls_ccm_star_auth_decrypt+0x58>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
100077c8:	42aa      	cmp	r2, r5
100077ca:	d207      	bcs.n	100077dc <mbedtls_ccm_star_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];
100077cc:	9916      	ldr	r1, [sp, #88]	; 0x58
100077ce:	5c88      	ldrb	r0, [r1, r2]
100077d0:	5cb1      	ldrb	r1, [r6, r2]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
100077d2:	3201      	adds	r2, #1
        diff |= tag[i] ^ check_tag[i];
100077d4:	4041      	eors	r1, r0
100077d6:	430b      	orrs	r3, r1
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
100077d8:	b2d2      	uxtb	r2, r2
100077da:	e7f5      	b.n	100077c8 <mbedtls_ccm_star_auth_decrypt+0x32>
    {
        mbedtls_platform_zeroize( output, length );
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
    }

    return( 0 );
100077dc:	2200      	movs	r2, #0

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
100077de:	4293      	cmp	r3, r2
100077e0:	d005      	beq.n	100077ee <mbedtls_ccm_star_auth_decrypt+0x58>
    {
        mbedtls_platform_zeroize( output, length );
100077e2:	9815      	ldr	r0, [sp, #84]	; 0x54
100077e4:	1c21      	adds	r1, r4, #0
100077e6:	f000 fa3d 	bl	10007c64 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
100077ea:	220f      	movs	r2, #15
100077ec:	4252      	negs	r2, r2
    }

    return( 0 );
}
100077ee:	1c10      	adds	r0, r2, #0
100077f0:	b00d      	add	sp, #52	; 0x34
100077f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100077f4 <mbedtls_ccm_auth_decrypt>:
int mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
100077f4:	b530      	push	{r4, r5, lr}
100077f6:	b087      	sub	sp, #28
100077f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
100077fa:	2c00      	cmp	r4, #0
100077fc:	d00d      	beq.n	1000781a <mbedtls_ccm_auth_decrypt+0x26>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
100077fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
10007800:	9405      	str	r4, [sp, #20]
10007802:	9500      	str	r5, [sp, #0]
10007804:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10007806:	9501      	str	r5, [sp, #4]
10007808:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1000780a:	9502      	str	r5, [sp, #8]
1000780c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
1000780e:	9503      	str	r5, [sp, #12]
10007810:	9d0e      	ldr	r5, [sp, #56]	; 0x38
10007812:	9504      	str	r5, [sp, #16]
10007814:	f7ff ffbf 	bl	10007796 <mbedtls_ccm_star_auth_decrypt>
10007818:	e001      	b.n	1000781e <mbedtls_ccm_auth_decrypt+0x2a>
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
1000781a:	200d      	movs	r0, #13
1000781c:	4240      	negs	r0, r0

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
1000781e:	b007      	add	sp, #28
10007820:	bd30      	pop	{r4, r5, pc}
	...

10007824 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
10007824:	b530      	push	{r4, r5, lr}
10007826:	4c09      	ldr	r4, [pc, #36]	; (1000784c <mbedtls_cipher_info_from_values+0x28>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
10007828:	6823      	ldr	r3, [r4, #0]
1000782a:	2b00      	cmp	r3, #0
1000782c:	d00b      	beq.n	10007846 <mbedtls_cipher_info_from_values+0x22>
        if( def->info->base->cipher == cipher_id &&
1000782e:	699d      	ldr	r5, [r3, #24]
10007830:	782d      	ldrb	r5, [r5, #0]
10007832:	4285      	cmp	r5, r0
10007834:	d105      	bne.n	10007842 <mbedtls_cipher_info_from_values+0x1e>
10007836:	685d      	ldr	r5, [r3, #4]
10007838:	428d      	cmp	r5, r1
1000783a:	d102      	bne.n	10007842 <mbedtls_cipher_info_from_values+0x1e>
            def->info->key_bitlen == (unsigned) key_bitlen &&
1000783c:	785d      	ldrb	r5, [r3, #1]
1000783e:	4295      	cmp	r5, r2
10007840:	d001      	beq.n	10007846 <mbedtls_cipher_info_from_values+0x22>
10007842:	3408      	adds	r4, #8
10007844:	e7f0      	b.n	10007828 <mbedtls_cipher_info_from_values+0x4>
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
10007846:	1c18      	adds	r0, r3, #0
10007848:	bd30      	pop	{r4, r5, pc}
1000784a:	46c0      	nop			; (mov r8, r8)
1000784c:	100103b4 	.word	0x100103b4

10007850 <mbedtls_cipher_free>:
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
10007850:	b510      	push	{r4, lr}
    if( ctx == NULL )
10007852:	2800      	cmp	r0, #0
10007854:	d00b      	beq.n	1000786e <mbedtls_cipher_free+0x1e>
10007856:	1c04      	adds	r4, r0, #0
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
10007858:	6b40      	ldr	r0, [r0, #52]	; 0x34
1000785a:	2800      	cmp	r0, #0
1000785c:	d003      	beq.n	10007866 <mbedtls_cipher_free+0x16>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
1000785e:	6823      	ldr	r3, [r4, #0]
10007860:	699b      	ldr	r3, [r3, #24]
10007862:	695b      	ldr	r3, [r3, #20]
10007864:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
10007866:	1c20      	adds	r0, r4, #0
10007868:	2138      	movs	r1, #56	; 0x38
1000786a:	f000 f9fb 	bl	10007c64 <mbedtls_platform_zeroize>
}
1000786e:	bd10      	pop	{r4, pc}

10007870 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
10007870:	b538      	push	{r3, r4, r5, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
10007872:	2900      	cmp	r1, #0
10007874:	d00e      	beq.n	10007894 <mbedtls_cipher_setup+0x24>
10007876:	1c0d      	adds	r5, r1, #0
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
10007878:	2238      	movs	r2, #56	; 0x38
1000787a:	2100      	movs	r1, #0
1000787c:	1c04      	adds	r4, r0, #0
1000787e:	f005 f89d 	bl	1000c9bc <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
10007882:	69ab      	ldr	r3, [r5, #24]
10007884:	691b      	ldr	r3, [r3, #16]
10007886:	4798      	blx	r3
10007888:	6360      	str	r0, [r4, #52]	; 0x34
1000788a:	2800      	cmp	r0, #0
1000788c:	d004      	beq.n	10007898 <mbedtls_cipher_setup+0x28>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
1000788e:	6025      	str	r5, [r4, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
10007890:	2000      	movs	r0, #0
10007892:	e002      	b.n	1000789a <mbedtls_cipher_setup+0x2a>

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
10007894:	4801      	ldr	r0, [pc, #4]	; (1000789c <mbedtls_cipher_setup+0x2c>)
10007896:	e000      	b.n	1000789a <mbedtls_cipher_setup+0x2a>

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
10007898:	4801      	ldr	r0, [pc, #4]	; (100078a0 <mbedtls_cipher_setup+0x30>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
1000789a:	bd38      	pop	{r3, r4, r5, pc}
1000789c:	ffff9f00 	.word	0xffff9f00
100078a0:	ffff9e80 	.word	0xffff9e80

100078a4 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
100078a4:	b538      	push	{r3, r4, r5, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
100078a6:	6804      	ldr	r4, [r0, #0]
100078a8:	2c00      	cmp	r4, #0
100078aa:	d101      	bne.n	100078b0 <mbedtls_cipher_setkey+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
100078ac:	480c      	ldr	r0, [pc, #48]	; (100078e0 <mbedtls_cipher_setkey+0x3c>)
100078ae:	e016      	b.n	100078de <mbedtls_cipher_setkey+0x3a>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
100078b0:	6925      	ldr	r5, [r4, #16]
100078b2:	07ad      	lsls	r5, r5, #30
100078b4:	d402      	bmi.n	100078bc <mbedtls_cipher_setkey+0x18>
100078b6:	6865      	ldr	r5, [r4, #4]
100078b8:	4295      	cmp	r5, r2
100078ba:	d1f7      	bne.n	100078ac <mbedtls_cipher_setkey+0x8>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
100078bc:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
100078be:	7203      	strb	r3, [r0, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
100078c0:	2b01      	cmp	r3, #1
100078c2:	d003      	beq.n	100078cc <mbedtls_cipher_setkey+0x28>
100078c4:	7865      	ldrb	r5, [r4, #1]
100078c6:	3d03      	subs	r5, #3
100078c8:	2d02      	cmp	r5, #2
100078ca:	d802      	bhi.n	100078d2 <mbedtls_cipher_setkey+0x2e>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
100078cc:	69a3      	ldr	r3, [r4, #24]
100078ce:	689b      	ldr	r3, [r3, #8]
100078d0:	e003      	b.n	100078da <mbedtls_cipher_setkey+0x36>
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
100078d2:	2b00      	cmp	r3, #0
100078d4:	d1ea      	bne.n	100078ac <mbedtls_cipher_setkey+0x8>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
100078d6:	69a3      	ldr	r3, [r4, #24]
100078d8:	68db      	ldr	r3, [r3, #12]
100078da:	6b40      	ldr	r0, [r0, #52]	; 0x34
100078dc:	4798      	blx	r3
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
100078de:	bd38      	pop	{r3, r4, r5, pc}
100078e0:	ffff9f00 	.word	0xffff9f00

100078e4 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
100078e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
100078e6:	6806      	ldr	r6, [r0, #0]
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
100078e8:	9f06      	ldr	r7, [sp, #24]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
100078ea:	2e00      	cmp	r6, #0
100078ec:	d101      	bne.n	100078f2 <mbedtls_cipher_update+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
100078ee:	4814      	ldr	r0, [pc, #80]	; (10007940 <mbedtls_cipher_update+0x5c>)
100078f0:	e024      	b.n	1000793c <mbedtls_cipher_update+0x58>
100078f2:	1c15      	adds	r5, r2, #0
100078f4:	1c0a      	adds	r2, r1, #0

    *olen = 0;
100078f6:	2100      	movs	r1, #0
100078f8:	6039      	str	r1, [r7, #0]
100078fa:	1c04      	adds	r4, r0, #0
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
100078fc:	7870      	ldrb	r0, [r6, #1]
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    return ctx->cipher_info->block_size;
100078fe:	6971      	ldr	r1, [r6, #20]
10007900:	2801      	cmp	r0, #1
10007902:	d109      	bne.n	10007918 <mbedtls_cipher_update+0x34>
    {
        if( ilen != block_size )
10007904:	428d      	cmp	r5, r1
10007906:	d114      	bne.n	10007932 <mbedtls_cipher_update+0x4e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
10007908:	2108      	movs	r1, #8
1000790a:	69b0      	ldr	r0, [r6, #24]
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
1000790c:	603d      	str	r5, [r7, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
1000790e:	5661      	ldrsb	r1, [r4, r1]
10007910:	6845      	ldr	r5, [r0, #4]
10007912:	6b60      	ldr	r0, [r4, #52]	; 0x34
10007914:	47a8      	blx	r5
10007916:	e011      	b.n	1000793c <mbedtls_cipher_update+0x58>
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
10007918:	2900      	cmp	r1, #0
1000791a:	d00c      	beq.n	10007936 <mbedtls_cipher_update+0x52>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
    }

    if( input == output &&
1000791c:	429a      	cmp	r2, r3
1000791e:	d10c      	bne.n	1000793a <mbedtls_cipher_update+0x56>
10007920:	69e3      	ldr	r3, [r4, #28]
10007922:	2b00      	cmp	r3, #0
10007924:	d1e3      	bne.n	100078ee <mbedtls_cipher_update+0xa>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
10007926:	1c28      	adds	r0, r5, #0
10007928:	f002 fdb8 	bl	1000a49c <__aeabi_uidivmod>
1000792c:	2900      	cmp	r1, #0
1000792e:	d1de      	bne.n	100078ee <mbedtls_cipher_update+0xa>
10007930:	e003      	b.n	1000793a <mbedtls_cipher_update+0x56>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
10007932:	4804      	ldr	r0, [pc, #16]	; (10007944 <mbedtls_cipher_update+0x60>)
10007934:	e002      	b.n	1000793c <mbedtls_cipher_update+0x58>
    }
#endif

    if ( 0 == block_size )
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
10007936:	4804      	ldr	r0, [pc, #16]	; (10007948 <mbedtls_cipher_update+0x64>)
10007938:	e000      	b.n	1000793c <mbedtls_cipher_update+0x58>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
1000793a:	4804      	ldr	r0, [pc, #16]	; (1000794c <mbedtls_cipher_update+0x68>)
}
1000793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000793e:	46c0      	nop			; (mov r8, r8)
10007940:	ffff9f00 	.word	0xffff9f00
10007944:	ffff9d80 	.word	0xffff9d80
10007948:	ffff9c80 	.word	0xffff9c80
1000794c:	ffff9f80 	.word	0xffff9f80

10007950 <ccm_ctx_free>:

    return( ctx );
}

static void ccm_ctx_free( void *ctx )
{
10007950:	b510      	push	{r4, lr}
10007952:	1c04      	adds	r4, r0, #0
    mbedtls_ccm_free( ctx );
10007954:	f7ff fee5 	bl	10007722 <mbedtls_ccm_free>
    mbedtls_free( ctx );
10007958:	1c20      	adds	r0, r4, #0
1000795a:	f005 f80d 	bl	1000c978 <free>
}
1000795e:	bd10      	pop	{r4, pc}

10007960 <ccm_ctx_alloc>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc( void )
{
10007960:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
10007962:	2001      	movs	r0, #1
10007964:	2138      	movs	r1, #56	; 0x38
10007966:	f004 ffcf 	bl	1000c908 <calloc>
1000796a:	1e04      	subs	r4, r0, #0

    if( ctx != NULL )
1000796c:	d001      	beq.n	10007972 <ccm_ctx_alloc+0x12>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
1000796e:	f7ff feb1 	bl	100076d4 <mbedtls_ccm_init>

    return( ctx );
}
10007972:	1c20      	adds	r0, r4, #0
10007974:	bd10      	pop	{r4, pc}

10007976 <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
10007976:	b510      	push	{r4, lr}
10007978:	1c0c      	adds	r4, r1, #0
1000797a:	1c13      	adds	r3, r2, #0
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
1000797c:	2102      	movs	r1, #2
1000797e:	1c22      	adds	r2, r4, #0
10007980:	f7ff feae 	bl	100076e0 <mbedtls_ccm_setkey>
                     key, key_bitlen );
}
10007984:	bd10      	pop	{r4, pc}

10007986 <aes_ctx_free>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
10007986:	b510      	push	{r4, lr}
10007988:	1c04      	adds	r4, r0, #0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
1000798a:	f7fe ffe6 	bl	1000695a <mbedtls_aes_free>
    mbedtls_free( ctx );
1000798e:	1c20      	adds	r0, r4, #0
10007990:	f004 fff2 	bl	1000c978 <free>
}
10007994:	bd10      	pop	{r4, pc}

10007996 <aes_ctx_alloc>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
10007996:	218c      	movs	r1, #140	; 0x8c
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
10007998:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
1000799a:	2001      	movs	r0, #1
1000799c:	0049      	lsls	r1, r1, #1
1000799e:	f004 ffb3 	bl	1000c908 <calloc>
100079a2:	1e04      	subs	r4, r0, #0

    if( aes == NULL )
100079a4:	d001      	beq.n	100079aa <aes_ctx_alloc+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
100079a6:	f7fe ffd1 	bl	1000694c <mbedtls_aes_init>

    return( aes );
}
100079aa:	1c20      	adds	r0, r4, #0
100079ac:	bd10      	pop	{r4, pc}

100079ae <aes_setkey_dec_wrap>:
}
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
100079ae:	b508      	push	{r3, lr}
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
100079b0:	f7ff f8b6 	bl	10006b20 <mbedtls_aes_setkey_dec>
}
100079b4:	bd08      	pop	{r3, pc}

100079b6 <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
100079b6:	b508      	push	{r3, lr}
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
100079b8:	f7fe ffd8 	bl	1000696c <mbedtls_aes_setkey_enc>
}
100079bc:	bd08      	pop	{r3, pc}

100079be <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
100079be:	b508      	push	{r3, lr}
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
100079c0:	f7ff fd1c 	bl	100073fc <mbedtls_aes_crypt_ecb>
}
100079c4:	bd08      	pop	{r3, pc}
	...

100079c8 <mbedtls_md_info_from_type>:
        case MBEDTLS_MD_SHA1:
            return( &mbedtls_sha1_info );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
100079c8:	4a05      	ldr	r2, [pc, #20]	; (100079e0 <mbedtls_md_info_from_type+0x18>)
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
100079ca:	2805      	cmp	r0, #5
100079cc:	d005      	beq.n	100079da <mbedtls_md_info_from_type+0x12>
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
100079ce:	1f83      	subs	r3, r0, #6
100079d0:	4258      	negs	r0, r3
100079d2:	4143      	adcs	r3, r0
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
        case MBEDTLS_MD_SHA256:
            return( &mbedtls_sha256_info );
100079d4:	4a03      	ldr	r2, [pc, #12]	; (100079e4 <mbedtls_md_info_from_type+0x1c>)
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
100079d6:	425b      	negs	r3, r3
100079d8:	401a      	ands	r2, r3
    }
}
100079da:	1c10      	adds	r0, r2, #0
100079dc:	4770      	bx	lr
100079de:	46c0      	nop			; (mov r8, r8)
100079e0:	100104d4 	.word	0x100104d4
100079e4:	10010514 	.word	0x10010514

100079e8 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
100079e8:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
100079ea:	2100      	movs	r1, #0
100079ec:	220c      	movs	r2, #12
100079ee:	f004 ffe5 	bl	1000c9bc <memset>
}
100079f2:	bd08      	pop	{r3, pc}

100079f4 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
100079f4:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
100079f6:	2800      	cmp	r0, #0
100079f8:	d017      	beq.n	10007a2a <mbedtls_md_free+0x36>
100079fa:	6803      	ldr	r3, [r0, #0]
100079fc:	2b00      	cmp	r3, #0
100079fe:	d014      	beq.n	10007a2a <mbedtls_md_free+0x36>
10007a00:	1c04      	adds	r4, r0, #0
        return;

    if( ctx->md_ctx != NULL )
10007a02:	6840      	ldr	r0, [r0, #4]
10007a04:	2800      	cmp	r0, #0
10007a06:	d001      	beq.n	10007a0c <mbedtls_md_free+0x18>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
10007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10007a0a:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
10007a0c:	68a0      	ldr	r0, [r4, #8]
10007a0e:	2800      	cmp	r0, #0
10007a10:	d007      	beq.n	10007a22 <mbedtls_md_free+0x2e>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
10007a12:	6823      	ldr	r3, [r4, #0]
10007a14:	68d9      	ldr	r1, [r3, #12]
10007a16:	0049      	lsls	r1, r1, #1
    if( ctx->md_ctx != NULL )
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
10007a18:	f000 f924 	bl	10007c64 <mbedtls_platform_zeroize>
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
10007a1c:	68a0      	ldr	r0, [r4, #8]
10007a1e:	f004 ffab 	bl	1000c978 <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
10007a22:	1c20      	adds	r0, r4, #0
10007a24:	210c      	movs	r1, #12
10007a26:	f000 f91d 	bl	10007c64 <mbedtls_platform_zeroize>
}
10007a2a:	bd10      	pop	{r4, pc}

10007a2c <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
10007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( md_info == NULL || ctx == NULL )
10007a2e:	2900      	cmp	r1, #0
10007a30:	d019      	beq.n	10007a66 <mbedtls_md_setup+0x3a>
10007a32:	2800      	cmp	r0, #0
10007a34:	d017      	beq.n	10007a66 <mbedtls_md_setup+0x3a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
10007a36:	6a0b      	ldr	r3, [r1, #32]
10007a38:	1c05      	adds	r5, r0, #0
10007a3a:	1c17      	adds	r7, r2, #0
10007a3c:	1c0c      	adds	r4, r1, #0
10007a3e:	4798      	blx	r3
10007a40:	1e06      	subs	r6, r0, #0
10007a42:	6068      	str	r0, [r5, #4]
10007a44:	d011      	beq.n	10007a6a <mbedtls_md_setup+0x3e>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
10007a46:	2f00      	cmp	r7, #0
10007a48:	d00a      	beq.n	10007a60 <mbedtls_md_setup+0x34>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
10007a4a:	2002      	movs	r0, #2
10007a4c:	68e1      	ldr	r1, [r4, #12]
10007a4e:	f004 ff5b 	bl	1000c908 <calloc>
10007a52:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
10007a54:	2800      	cmp	r0, #0
10007a56:	d103      	bne.n	10007a60 <mbedtls_md_setup+0x34>
        {
            md_info->ctx_free_func( ctx->md_ctx );
10007a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
10007a5a:	1c30      	adds	r0, r6, #0
10007a5c:	4798      	blx	r3
10007a5e:	e004      	b.n	10007a6a <mbedtls_md_setup+0x3e>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
10007a60:	602c      	str	r4, [r5, #0]

    return( 0 );
10007a62:	2000      	movs	r0, #0
10007a64:	e002      	b.n	10007a6c <mbedtls_md_setup+0x40>
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
10007a66:	4802      	ldr	r0, [pc, #8]	; (10007a70 <mbedtls_md_setup+0x44>)
10007a68:	e000      	b.n	10007a6c <mbedtls_md_setup+0x40>

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
10007a6a:	4802      	ldr	r0, [pc, #8]	; (10007a74 <mbedtls_md_setup+0x48>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
10007a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10007a6e:	46c0      	nop			; (mov r8, r8)
10007a70:	ffffaf00 	.word	0xffffaf00
10007a74:	ffffae80 	.word	0xffffae80

10007a78 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
10007a78:	b5f0      	push	{r4, r5, r6, r7, lr}
10007a7a:	b08b      	sub	sp, #44	; 0x2c
10007a7c:	1c04      	adds	r4, r0, #0
10007a7e:	9101      	str	r1, [sp, #4]
10007a80:	1c17      	adds	r7, r2, #0
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
10007a82:	2800      	cmp	r0, #0
10007a84:	d050      	beq.n	10007b28 <mbedtls_md_hmac_starts+0xb0>
10007a86:	6803      	ldr	r3, [r0, #0]
10007a88:	2b00      	cmp	r3, #0
10007a8a:	d04d      	beq.n	10007b28 <mbedtls_md_hmac_starts+0xb0>
10007a8c:	6882      	ldr	r2, [r0, #8]
10007a8e:	2a00      	cmp	r2, #0
10007a90:	d04a      	beq.n	10007b28 <mbedtls_md_hmac_starts+0xb0>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
10007a92:	68da      	ldr	r2, [r3, #12]
10007a94:	4297      	cmp	r7, r2
10007a96:	d917      	bls.n	10007ac8 <mbedtls_md_hmac_starts+0x50>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
10007a98:	691b      	ldr	r3, [r3, #16]
10007a9a:	6840      	ldr	r0, [r0, #4]
10007a9c:	4798      	blx	r3
10007a9e:	1e05      	subs	r5, r0, #0
10007aa0:	d13c      	bne.n	10007b1c <mbedtls_md_hmac_starts+0xa4>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
10007aa2:	6823      	ldr	r3, [r4, #0]
10007aa4:	6860      	ldr	r0, [r4, #4]
10007aa6:	695b      	ldr	r3, [r3, #20]
10007aa8:	9901      	ldr	r1, [sp, #4]
10007aaa:	1c3a      	adds	r2, r7, #0
10007aac:	4798      	blx	r3
10007aae:	1e05      	subs	r5, r0, #0
10007ab0:	d134      	bne.n	10007b1c <mbedtls_md_hmac_starts+0xa4>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
10007ab2:	6823      	ldr	r3, [r4, #0]
10007ab4:	6860      	ldr	r0, [r4, #4]
10007ab6:	699b      	ldr	r3, [r3, #24]
10007ab8:	a902      	add	r1, sp, #8
10007aba:	4798      	blx	r3
10007abc:	1e05      	subs	r5, r0, #0
10007abe:	d12d      	bne.n	10007b1c <mbedtls_md_hmac_starts+0xa4>
            goto cleanup;

        keylen = ctx->md_info->size;
10007ac0:	6823      	ldr	r3, [r4, #0]
10007ac2:	689f      	ldr	r7, [r3, #8]
        key = sum;
10007ac4:	ab02      	add	r3, sp, #8
10007ac6:	9301      	str	r3, [sp, #4]
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
10007ac8:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
10007aca:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
10007acc:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
10007ace:	2136      	movs	r1, #54	; 0x36
10007ad0:	1c30      	adds	r0, r6, #0
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
10007ad2:	18b5      	adds	r5, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
10007ad4:	f004 ff72 	bl	1000c9bc <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
10007ad8:	6823      	ldr	r3, [r4, #0]
10007ada:	1c28      	adds	r0, r5, #0
10007adc:	68da      	ldr	r2, [r3, #12]
10007ade:	215c      	movs	r1, #92	; 0x5c
10007ae0:	f004 ff6c 	bl	1000c9bc <memset>

    for( i = 0; i < keylen; i++ )
10007ae4:	2300      	movs	r3, #0
10007ae6:	42bb      	cmp	r3, r7
10007ae8:	d00b      	beq.n	10007b02 <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
10007aea:	9a01      	ldr	r2, [sp, #4]
10007aec:	5cd1      	ldrb	r1, [r2, r3]
10007aee:	5cf2      	ldrb	r2, [r6, r3]
10007af0:	404a      	eors	r2, r1
10007af2:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
10007af4:	9a01      	ldr	r2, [sp, #4]
10007af6:	5cd1      	ldrb	r1, [r2, r3]
10007af8:	5cea      	ldrb	r2, [r5, r3]
10007afa:	404a      	eors	r2, r1
10007afc:	54ea      	strb	r2, [r5, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
10007afe:	3301      	adds	r3, #1
10007b00:	e7f1      	b.n	10007ae6 <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
10007b02:	6823      	ldr	r3, [r4, #0]
10007b04:	6860      	ldr	r0, [r4, #4]
10007b06:	691b      	ldr	r3, [r3, #16]
10007b08:	4798      	blx	r3
10007b0a:	1e05      	subs	r5, r0, #0
10007b0c:	d106      	bne.n	10007b1c <mbedtls_md_hmac_starts+0xa4>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
10007b0e:	6823      	ldr	r3, [r4, #0]
10007b10:	6860      	ldr	r0, [r4, #4]
10007b12:	695d      	ldr	r5, [r3, #20]
10007b14:	1c31      	adds	r1, r6, #0
10007b16:	68da      	ldr	r2, [r3, #12]
10007b18:	47a8      	blx	r5
10007b1a:	1c05      	adds	r5, r0, #0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
10007b1c:	a802      	add	r0, sp, #8
10007b1e:	2120      	movs	r1, #32
10007b20:	f000 f8a0 	bl	10007c64 <mbedtls_platform_zeroize>

    return( ret );
10007b24:	1c28      	adds	r0, r5, #0
10007b26:	e000      	b.n	10007b2a <mbedtls_md_hmac_starts+0xb2>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
10007b28:	4801      	ldr	r0, [pc, #4]	; (10007b30 <mbedtls_md_hmac_starts+0xb8>)

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );

    return( ret );
}
10007b2a:	b00b      	add	sp, #44	; 0x2c
10007b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007b2e:	46c0      	nop			; (mov r8, r8)
10007b30:	ffffaf00 	.word	0xffffaf00

10007b34 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
10007b34:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
10007b36:	2800      	cmp	r0, #0
10007b38:	d009      	beq.n	10007b4e <mbedtls_md_hmac_update+0x1a>
10007b3a:	6803      	ldr	r3, [r0, #0]
10007b3c:	2b00      	cmp	r3, #0
10007b3e:	d006      	beq.n	10007b4e <mbedtls_md_hmac_update+0x1a>
10007b40:	6884      	ldr	r4, [r0, #8]
10007b42:	2c00      	cmp	r4, #0
10007b44:	d003      	beq.n	10007b4e <mbedtls_md_hmac_update+0x1a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
10007b46:	695b      	ldr	r3, [r3, #20]
10007b48:	6840      	ldr	r0, [r0, #4]
10007b4a:	4798      	blx	r3
10007b4c:	e000      	b.n	10007b50 <mbedtls_md_hmac_update+0x1c>
}

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
10007b4e:	4801      	ldr	r0, [pc, #4]	; (10007b54 <mbedtls_md_hmac_update+0x20>)

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
}
10007b50:	bd10      	pop	{r4, pc}
10007b52:	46c0      	nop			; (mov r8, r8)
10007b54:	ffffaf00 	.word	0xffffaf00

10007b58 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
10007b58:	b5f0      	push	{r4, r5, r6, r7, lr}
10007b5a:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
10007b5c:	2800      	cmp	r0, #0
10007b5e:	d02a      	beq.n	10007bb6 <mbedtls_md_hmac_finish+0x5e>
10007b60:	6803      	ldr	r3, [r0, #0]
10007b62:	2b00      	cmp	r3, #0
10007b64:	d027      	beq.n	10007bb6 <mbedtls_md_hmac_finish+0x5e>
10007b66:	6887      	ldr	r7, [r0, #8]
10007b68:	2f00      	cmp	r7, #0
10007b6a:	d024      	beq.n	10007bb6 <mbedtls_md_hmac_finish+0x5e>
10007b6c:	1c0d      	adds	r5, r1, #0
10007b6e:	1c04      	adds	r4, r0, #0
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
10007b70:	68de      	ldr	r6, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
10007b72:	6840      	ldr	r0, [r0, #4]
10007b74:	699b      	ldr	r3, [r3, #24]
10007b76:	4669      	mov	r1, sp
10007b78:	4798      	blx	r3
10007b7a:	2800      	cmp	r0, #0
10007b7c:	d11c      	bne.n	10007bb8 <mbedtls_md_hmac_finish+0x60>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
10007b7e:	6823      	ldr	r3, [r4, #0]
10007b80:	6860      	ldr	r0, [r4, #4]
10007b82:	691b      	ldr	r3, [r3, #16]
10007b84:	4798      	blx	r3
10007b86:	2800      	cmp	r0, #0
10007b88:	d116      	bne.n	10007bb8 <mbedtls_md_hmac_finish+0x60>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
10007b8a:	6823      	ldr	r3, [r4, #0]
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
10007b8c:	19b9      	adds	r1, r7, r6

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
10007b8e:	6860      	ldr	r0, [r4, #4]
10007b90:	695e      	ldr	r6, [r3, #20]
10007b92:	68da      	ldr	r2, [r3, #12]
10007b94:	47b0      	blx	r6
10007b96:	2800      	cmp	r0, #0
10007b98:	d10e      	bne.n	10007bb8 <mbedtls_md_hmac_finish+0x60>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
10007b9a:	6823      	ldr	r3, [r4, #0]
10007b9c:	6860      	ldr	r0, [r4, #4]
10007b9e:	695e      	ldr	r6, [r3, #20]
10007ba0:	4669      	mov	r1, sp
10007ba2:	689a      	ldr	r2, [r3, #8]
10007ba4:	47b0      	blx	r6
10007ba6:	2800      	cmp	r0, #0
10007ba8:	d106      	bne.n	10007bb8 <mbedtls_md_hmac_finish+0x60>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
10007baa:	6823      	ldr	r3, [r4, #0]
10007bac:	6860      	ldr	r0, [r4, #4]
10007bae:	699b      	ldr	r3, [r3, #24]
10007bb0:	1c29      	adds	r1, r5, #0
10007bb2:	4798      	blx	r3
10007bb4:	e000      	b.n	10007bb8 <mbedtls_md_hmac_finish+0x60>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
10007bb6:	4801      	ldr	r0, [pc, #4]	; (10007bbc <mbedtls_md_hmac_finish+0x64>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
10007bb8:	b009      	add	sp, #36	; 0x24
10007bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007bbc:	ffffaf00 	.word	0xffffaf00

10007bc0 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
10007bc0:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
10007bc2:	2800      	cmp	r0, #0
10007bc4:	d012      	beq.n	10007bec <mbedtls_md_hmac_reset+0x2c>
10007bc6:	6803      	ldr	r3, [r0, #0]
10007bc8:	2b00      	cmp	r3, #0
10007bca:	d00f      	beq.n	10007bec <mbedtls_md_hmac_reset+0x2c>
10007bcc:	6885      	ldr	r5, [r0, #8]
10007bce:	2d00      	cmp	r5, #0
10007bd0:	d00c      	beq.n	10007bec <mbedtls_md_hmac_reset+0x2c>
10007bd2:	1c04      	adds	r4, r0, #0
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
10007bd4:	691b      	ldr	r3, [r3, #16]
10007bd6:	6840      	ldr	r0, [r0, #4]
10007bd8:	4798      	blx	r3
10007bda:	2800      	cmp	r0, #0
10007bdc:	d107      	bne.n	10007bee <mbedtls_md_hmac_reset+0x2e>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
10007bde:	6823      	ldr	r3, [r4, #0]
10007be0:	6860      	ldr	r0, [r4, #4]
10007be2:	695e      	ldr	r6, [r3, #20]
10007be4:	1c29      	adds	r1, r5, #0
10007be6:	68da      	ldr	r2, [r3, #12]
10007be8:	47b0      	blx	r6
10007bea:	e000      	b.n	10007bee <mbedtls_md_hmac_reset+0x2e>
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
10007bec:	4800      	ldr	r0, [pc, #0]	; (10007bf0 <mbedtls_md_hmac_reset+0x30>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
10007bee:	bd70      	pop	{r4, r5, r6, pc}
10007bf0:	ffffaf00 	.word	0xffffaf00

10007bf4 <sha224_process_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
10007bf4:	b508      	push	{r3, lr}
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
10007bf6:	f000 f899 	bl	10007d2c <mbedtls_internal_sha256_process>
                                             data ) );
}
10007bfa:	bd08      	pop	{r3, pc}

10007bfc <sha224_clone_wrap>:
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
}

static void sha224_clone_wrap( void *dst, const void *src )
{
10007bfc:	b508      	push	{r3, lr}
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
10007bfe:	f000 f848 	bl	10007c92 <mbedtls_sha256_clone>
                    (const mbedtls_sha256_context *) src );
}
10007c02:	bd08      	pop	{r3, pc}

10007c04 <sha224_ctx_free>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
10007c04:	b510      	push	{r4, lr}
10007c06:	1c04      	adds	r4, r0, #0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
10007c08:	f000 f83c 	bl	10007c84 <mbedtls_sha256_free>
    mbedtls_free( ctx );
10007c0c:	1c20      	adds	r0, r4, #0
10007c0e:	f004 feb3 	bl	1000c978 <free>
}
10007c12:	bd10      	pop	{r4, pc}

10007c14 <sha224_ctx_alloc>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
10007c14:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
10007c16:	2001      	movs	r0, #1
10007c18:	216c      	movs	r1, #108	; 0x6c
10007c1a:	f004 fe75 	bl	1000c908 <calloc>
10007c1e:	1e04      	subs	r4, r0, #0

    if( ctx != NULL )
10007c20:	d001      	beq.n	10007c26 <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
10007c22:	f000 f829 	bl	10007c78 <mbedtls_sha256_init>

    return( ctx );
}
10007c26:	1c20      	adds	r0, r4, #0
10007c28:	bd10      	pop	{r4, pc}

10007c2a <sha224_wrap>:
                                       output ) );
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
10007c2a:	b508      	push	{r3, lr}
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
10007c2c:	2301      	movs	r3, #1
10007c2e:	f000 fdee 	bl	1000880e <mbedtls_sha256_ret>
}
10007c32:	bd08      	pop	{r3, pc}

10007c34 <sha256_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
10007c34:	b508      	push	{r3, lr}
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
10007c36:	2300      	movs	r3, #0
10007c38:	f000 fde9 	bl	1000880e <mbedtls_sha256_ret>
}
10007c3c:	bd08      	pop	{r3, pc}

10007c3e <sha224_finish_wrap>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
10007c3e:	b508      	push	{r3, lr}
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
10007c40:	f000 fd44 	bl	100086cc <mbedtls_sha256_finish_ret>
                                       output ) );
}
10007c44:	bd08      	pop	{r3, pc}

10007c46 <sha224_update_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
}

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
10007c46:	b508      	push	{r3, lr}
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
10007c48:	f000 fd00 	bl	1000864c <mbedtls_sha256_update_ret>
                                       input, ilen ) );
}
10007c4c:	bd08      	pop	{r3, pc}

10007c4e <sha224_starts_wrap>:
 * Wrappers for generic message digests
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
10007c4e:	b508      	push	{r3, lr}
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
10007c50:	2101      	movs	r1, #1
10007c52:	f000 f823 	bl	10007c9c <mbedtls_sha256_starts_ret>
}
10007c56:	bd08      	pop	{r3, pc}

10007c58 <sha256_starts_wrap>:
    sha224_clone_wrap,
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
10007c58:	b508      	push	{r3, lr}
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
10007c5a:	2100      	movs	r1, #0
10007c5c:	f000 f81e 	bl	10007c9c <mbedtls_sha256_starts_ret>
}
10007c60:	bd08      	pop	{r3, pc}
	...

10007c64 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
10007c64:	b508      	push	{r3, lr}
    memset_func( buf, 0, len );
10007c66:	4b03      	ldr	r3, [pc, #12]	; (10007c74 <mbedtls_platform_zeroize+0x10>)
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
10007c68:	1c0a      	adds	r2, r1, #0
    memset_func( buf, 0, len );
10007c6a:	681b      	ldr	r3, [r3, #0]
10007c6c:	2100      	movs	r1, #0
10007c6e:	4798      	blx	r3
}
10007c70:	bd08      	pop	{r3, pc}
10007c72:	46c0      	nop			; (mov r8, r8)
10007c74:	20001a68 	.word	0x20001a68

10007c78 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
10007c78:	b508      	push	{r3, lr}
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
10007c7a:	2100      	movs	r1, #0
10007c7c:	226c      	movs	r2, #108	; 0x6c
10007c7e:	f004 fe9d 	bl	1000c9bc <memset>
}
10007c82:	bd08      	pop	{r3, pc}

10007c84 <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
10007c84:	b508      	push	{r3, lr}
    if( ctx == NULL )
10007c86:	2800      	cmp	r0, #0
10007c88:	d002      	beq.n	10007c90 <mbedtls_sha256_free+0xc>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
10007c8a:	216c      	movs	r1, #108	; 0x6c
10007c8c:	f7ff ffea 	bl	10007c64 <mbedtls_platform_zeroize>
}
10007c90:	bd08      	pop	{r3, pc}

10007c92 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
10007c92:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
10007c94:	226c      	movs	r2, #108	; 0x6c
10007c96:	f004 fe88 	bl	1000c9aa <memcpy>
}
10007c9a:	bd08      	pop	{r3, pc}

10007c9c <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
10007c9c:	2300      	movs	r3, #0
10007c9e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
10007ca0:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
10007ca2:	4299      	cmp	r1, r3
10007ca4:	d10f      	bne.n	10007cc6 <mbedtls_sha256_starts_ret+0x2a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
10007ca6:	4b11      	ldr	r3, [pc, #68]	; (10007cec <mbedtls_sha256_starts_ret+0x50>)
10007ca8:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
10007caa:	4b11      	ldr	r3, [pc, #68]	; (10007cf0 <mbedtls_sha256_starts_ret+0x54>)
10007cac:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
10007cae:	4b11      	ldr	r3, [pc, #68]	; (10007cf4 <mbedtls_sha256_starts_ret+0x58>)
10007cb0:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
10007cb2:	4b11      	ldr	r3, [pc, #68]	; (10007cf8 <mbedtls_sha256_starts_ret+0x5c>)
10007cb4:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
10007cb6:	4b11      	ldr	r3, [pc, #68]	; (10007cfc <mbedtls_sha256_starts_ret+0x60>)
10007cb8:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
10007cba:	4b11      	ldr	r3, [pc, #68]	; (10007d00 <mbedtls_sha256_starts_ret+0x64>)
10007cbc:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
10007cbe:	4b11      	ldr	r3, [pc, #68]	; (10007d04 <mbedtls_sha256_starts_ret+0x68>)
10007cc0:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
10007cc2:	4b11      	ldr	r3, [pc, #68]	; (10007d08 <mbedtls_sha256_starts_ret+0x6c>)
10007cc4:	e00e      	b.n	10007ce4 <mbedtls_sha256_starts_ret+0x48>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
10007cc6:	4b11      	ldr	r3, [pc, #68]	; (10007d0c <mbedtls_sha256_starts_ret+0x70>)
10007cc8:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
10007cca:	4b11      	ldr	r3, [pc, #68]	; (10007d10 <mbedtls_sha256_starts_ret+0x74>)
10007ccc:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
10007cce:	4b11      	ldr	r3, [pc, #68]	; (10007d14 <mbedtls_sha256_starts_ret+0x78>)
10007cd0:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
10007cd2:	4b11      	ldr	r3, [pc, #68]	; (10007d18 <mbedtls_sha256_starts_ret+0x7c>)
10007cd4:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
10007cd6:	4b11      	ldr	r3, [pc, #68]	; (10007d1c <mbedtls_sha256_starts_ret+0x80>)
10007cd8:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
10007cda:	4b11      	ldr	r3, [pc, #68]	; (10007d20 <mbedtls_sha256_starts_ret+0x84>)
10007cdc:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
10007cde:	4b11      	ldr	r3, [pc, #68]	; (10007d24 <mbedtls_sha256_starts_ret+0x88>)
10007ce0:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
10007ce2:	4b11      	ldr	r3, [pc, #68]	; (10007d28 <mbedtls_sha256_starts_ret+0x8c>)
10007ce4:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
10007ce6:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
10007ce8:	2000      	movs	r0, #0
10007cea:	4770      	bx	lr
10007cec:	6a09e667 	.word	0x6a09e667
10007cf0:	bb67ae85 	.word	0xbb67ae85
10007cf4:	3c6ef372 	.word	0x3c6ef372
10007cf8:	a54ff53a 	.word	0xa54ff53a
10007cfc:	510e527f 	.word	0x510e527f
10007d00:	9b05688c 	.word	0x9b05688c
10007d04:	1f83d9ab 	.word	0x1f83d9ab
10007d08:	5be0cd19 	.word	0x5be0cd19
10007d0c:	c1059ed8 	.word	0xc1059ed8
10007d10:	367cd507 	.word	0x367cd507
10007d14:	3070dd17 	.word	0x3070dd17
10007d18:	f70e5939 	.word	0xf70e5939
10007d1c:	ffc00b31 	.word	0xffc00b31
10007d20:	68581511 	.word	0x68581511
10007d24:	64f98fa7 	.word	0x64f98fa7
10007d28:	befa4fa4 	.word	0xbefa4fa4

10007d2c <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
10007d2c:	2300      	movs	r3, #0
10007d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
10007d30:	b0d5      	sub	sp, #340	; 0x154
10007d32:	900b      	str	r0, [sp, #44]	; 0x2c
10007d34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10007d36:	18d2      	adds	r2, r2, r3

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
10007d38:	6892      	ldr	r2, [r2, #8]
10007d3a:	9200      	str	r2, [sp, #0]
10007d3c:	9800      	ldr	r0, [sp, #0]
10007d3e:	aa0c      	add	r2, sp, #48	; 0x30
10007d40:	5098      	str	r0, [r3, r2]
10007d42:	3304      	adds	r3, #4
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
10007d44:	2b20      	cmp	r3, #32
10007d46:	d1f5      	bne.n	10007d34 <mbedtls_internal_sha256_process+0x8>
10007d48:	2000      	movs	r0, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
10007d4a:	780b      	ldrb	r3, [r1, #0]
10007d4c:	061a      	lsls	r2, r3, #24
10007d4e:	784b      	ldrb	r3, [r1, #1]
10007d50:	041b      	lsls	r3, r3, #16
10007d52:	4313      	orrs	r3, r2
10007d54:	78ca      	ldrb	r2, [r1, #3]
10007d56:	4313      	orrs	r3, r2
10007d58:	788a      	ldrb	r2, [r1, #2]
10007d5a:	3104      	adds	r1, #4
10007d5c:	0212      	lsls	r2, r2, #8
10007d5e:	4313      	orrs	r3, r2
10007d60:	aa14      	add	r2, sp, #80	; 0x50
10007d62:	5083      	str	r3, [r0, r2]
10007d64:	3004      	adds	r0, #4

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
10007d66:	2840      	cmp	r0, #64	; 0x40
10007d68:	d1ef      	bne.n	10007d4a <mbedtls_internal_sha256_process+0x1e>
10007d6a:	4cef      	ldr	r4, [pc, #956]	; (10008128 <mbedtls_internal_sha256_process+0x3fc>)
10007d6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10007d6e:	1d20      	adds	r0, r4, #4
10007d70:	9005      	str	r0, [sp, #20]
10007d72:	2000      	movs	r0, #0
10007d74:	9304      	str	r3, [sp, #16]
10007d76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10007d78:	9a10      	ldr	r2, [sp, #64]	; 0x40
10007d7a:	9300      	str	r3, [sp, #0]
10007d7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
10007d7e:	9203      	str	r2, [sp, #12]
10007d80:	9301      	str	r3, [sp, #4]
10007d82:	9b11      	ldr	r3, [sp, #68]	; 0x44
10007d84:	990e      	ldr	r1, [sp, #56]	; 0x38
10007d86:	9302      	str	r3, [sp, #8]
10007d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10007d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10007d8c:	ae15      	add	r6, sp, #84	; 0x54
10007d8e:	9006      	str	r0, [sp, #24]
10007d90:	2520      	movs	r5, #32
10007d92:	9c06      	ldr	r4, [sp, #24]
10007d94:	a80c      	add	r0, sp, #48	; 0x30
10007d96:	1940      	adds	r0, r0, r5
10007d98:	5900      	ldr	r0, [r0, r4]
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
10007d9a:	9d03      	ldr	r5, [sp, #12]
10007d9c:	9007      	str	r0, [sp, #28]
10007d9e:	48e2      	ldr	r0, [pc, #904]	; (10008128 <mbedtls_internal_sha256_process+0x3fc>)
10007da0:	5820      	ldr	r0, [r4, r0]
10007da2:	9008      	str	r0, [sp, #32]
10007da4:	9c08      	ldr	r4, [sp, #32]
10007da6:	9807      	ldr	r0, [sp, #28]
10007da8:	46a4      	mov	ip, r4
10007daa:	4460      	add	r0, ip
10007dac:	1c07      	adds	r7, r0, #0
10007dae:	200b      	movs	r0, #11
10007db0:	2406      	movs	r4, #6
10007db2:	41c5      	rors	r5, r0
10007db4:	9803      	ldr	r0, [sp, #12]
10007db6:	41e0      	rors	r0, r4
10007db8:	4045      	eors	r5, r0
10007dba:	9803      	ldr	r0, [sp, #12]
10007dbc:	3413      	adds	r4, #19
10007dbe:	41e0      	rors	r0, r4
10007dc0:	4068      	eors	r0, r5
10007dc2:	183f      	adds	r7, r7, r0
10007dc4:	9d01      	ldr	r5, [sp, #4]
10007dc6:	9802      	ldr	r0, [sp, #8]
10007dc8:	3c0c      	subs	r4, #12
10007dca:	4045      	eors	r5, r0
10007dcc:	9803      	ldr	r0, [sp, #12]
10007dce:	4005      	ands	r5, r0
10007dd0:	9801      	ldr	r0, [sp, #4]
10007dd2:	4045      	eors	r5, r0
10007dd4:	9804      	ldr	r0, [sp, #16]
10007dd6:	197d      	adds	r5, r7, r5
10007dd8:	182d      	adds	r5, r5, r0
10007dda:	9800      	ldr	r0, [sp, #0]
10007ddc:	1c1f      	adds	r7, r3, #0
10007dde:	4684      	mov	ip, r0
10007de0:	44ac      	add	ip, r5
10007de2:	4660      	mov	r0, ip
10007de4:	9000      	str	r0, [sp, #0]
10007de6:	1c10      	adds	r0, r2, #0
10007de8:	4317      	orrs	r7, r2
10007dea:	4018      	ands	r0, r3
10007dec:	400f      	ands	r7, r1
10007dee:	4307      	orrs	r7, r0
10007df0:	1c10      	adds	r0, r2, #0
10007df2:	41e0      	rors	r0, r4
10007df4:	4684      	mov	ip, r0
10007df6:	1c10      	adds	r0, r2, #0
10007df8:	3c0b      	subs	r4, #11
10007dfa:	41e0      	rors	r0, r4
10007dfc:	4664      	mov	r4, ip
10007dfe:	4044      	eors	r4, r0
10007e00:	46a4      	mov	ip, r4
10007e02:	1c10      	adds	r0, r2, #0
10007e04:	2416      	movs	r4, #22
10007e06:	41e0      	rors	r0, r4
10007e08:	4664      	mov	r4, ip
10007e0a:	4060      	eors	r0, r4
10007e0c:	1838      	adds	r0, r7, r0
10007e0e:	1945      	adds	r5, r0, r5
10007e10:	9805      	ldr	r0, [sp, #20]
10007e12:	6834      	ldr	r4, [r6, #0]
10007e14:	6800      	ldr	r0, [r0, #0]
10007e16:	1900      	adds	r0, r0, r4
10007e18:	9c01      	ldr	r4, [sp, #4]
10007e1a:	1907      	adds	r7, r0, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
10007e1c:	9c03      	ldr	r4, [sp, #12]
10007e1e:	9802      	ldr	r0, [sp, #8]
10007e20:	4060      	eors	r0, r4
10007e22:	9c00      	ldr	r4, [sp, #0]
10007e24:	4020      	ands	r0, r4
10007e26:	9c02      	ldr	r4, [sp, #8]
10007e28:	4060      	eors	r0, r4
10007e2a:	1838      	adds	r0, r7, r0
10007e2c:	270b      	movs	r7, #11
10007e2e:	9c00      	ldr	r4, [sp, #0]
10007e30:	41fc      	rors	r4, r7
10007e32:	46a4      	mov	ip, r4
10007e34:	2406      	movs	r4, #6
10007e36:	9f00      	ldr	r7, [sp, #0]
10007e38:	41e7      	rors	r7, r4
10007e3a:	4664      	mov	r4, ip
10007e3c:	407c      	eors	r4, r7
10007e3e:	46a4      	mov	ip, r4
10007e40:	2419      	movs	r4, #25
10007e42:	9f00      	ldr	r7, [sp, #0]
10007e44:	41e7      	rors	r7, r4
10007e46:	4664      	mov	r4, ip
10007e48:	4067      	eors	r7, r4
10007e4a:	19c0      	adds	r0, r0, r7
10007e4c:	1841      	adds	r1, r0, r1
10007e4e:	1c2f      	adds	r7, r5, #0
10007e50:	9101      	str	r1, [sp, #4]
10007e52:	1c11      	adds	r1, r2, #0
10007e54:	4317      	orrs	r7, r2
10007e56:	4029      	ands	r1, r5
10007e58:	401f      	ands	r7, r3
10007e5a:	430f      	orrs	r7, r1
10007e5c:	240d      	movs	r4, #13
10007e5e:	1c29      	adds	r1, r5, #0
10007e60:	41e1      	rors	r1, r4
10007e62:	468c      	mov	ip, r1
10007e64:	1c29      	adds	r1, r5, #0
10007e66:	3c0b      	subs	r4, #11
10007e68:	41e1      	rors	r1, r4
10007e6a:	4664      	mov	r4, ip
10007e6c:	404c      	eors	r4, r1
10007e6e:	46a4      	mov	ip, r4
10007e70:	1c29      	adds	r1, r5, #0
10007e72:	2416      	movs	r4, #22
10007e74:	41e1      	rors	r1, r4
10007e76:	4664      	mov	r4, ip
10007e78:	4061      	eors	r1, r4
10007e7a:	1879      	adds	r1, r7, r1
10007e7c:	1809      	adds	r1, r1, r0
10007e7e:	9805      	ldr	r0, [sp, #20]
10007e80:	6874      	ldr	r4, [r6, #4]
10007e82:	6840      	ldr	r0, [r0, #4]
10007e84:	1900      	adds	r0, r0, r4
10007e86:	9c02      	ldr	r4, [sp, #8]
10007e88:	1907      	adds	r7, r0, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
10007e8a:	9803      	ldr	r0, [sp, #12]
10007e8c:	9c00      	ldr	r4, [sp, #0]
10007e8e:	4060      	eors	r0, r4
10007e90:	9c01      	ldr	r4, [sp, #4]
10007e92:	4020      	ands	r0, r4
10007e94:	9c03      	ldr	r4, [sp, #12]
10007e96:	4060      	eors	r0, r4
10007e98:	1838      	adds	r0, r7, r0
10007e9a:	270b      	movs	r7, #11
10007e9c:	9c01      	ldr	r4, [sp, #4]
10007e9e:	41fc      	rors	r4, r7
10007ea0:	46a4      	mov	ip, r4
10007ea2:	2406      	movs	r4, #6
10007ea4:	9f01      	ldr	r7, [sp, #4]
10007ea6:	41e7      	rors	r7, r4
10007ea8:	4664      	mov	r4, ip
10007eaa:	407c      	eors	r4, r7
10007eac:	46a4      	mov	ip, r4
10007eae:	2419      	movs	r4, #25
10007eb0:	9f01      	ldr	r7, [sp, #4]
10007eb2:	41e7      	rors	r7, r4
10007eb4:	4664      	mov	r4, ip
10007eb6:	4067      	eors	r7, r4
10007eb8:	19c0      	adds	r0, r0, r7
10007eba:	18c3      	adds	r3, r0, r3
10007ebc:	1c0f      	adds	r7, r1, #0
10007ebe:	9302      	str	r3, [sp, #8]
10007ec0:	1c2b      	adds	r3, r5, #0
10007ec2:	432f      	orrs	r7, r5
10007ec4:	400b      	ands	r3, r1
10007ec6:	4017      	ands	r7, r2
10007ec8:	431f      	orrs	r7, r3
10007eca:	240d      	movs	r4, #13
10007ecc:	1c0b      	adds	r3, r1, #0
10007ece:	41e3      	rors	r3, r4
10007ed0:	469c      	mov	ip, r3
10007ed2:	1c0b      	adds	r3, r1, #0
10007ed4:	3c0b      	subs	r4, #11
10007ed6:	41e3      	rors	r3, r4
10007ed8:	4664      	mov	r4, ip
10007eda:	405c      	eors	r4, r3
10007edc:	46a4      	mov	ip, r4
10007ede:	1c0b      	adds	r3, r1, #0
10007ee0:	2416      	movs	r4, #22
10007ee2:	41e3      	rors	r3, r4
10007ee4:	4664      	mov	r4, ip
10007ee6:	4063      	eors	r3, r4
10007ee8:	18ff      	adds	r7, r7, r3
10007eea:	9b05      	ldr	r3, [sp, #20]
10007eec:	183f      	adds	r7, r7, r0
10007eee:	689b      	ldr	r3, [r3, #8]
10007ef0:	68b0      	ldr	r0, [r6, #8]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
10007ef2:	9c01      	ldr	r4, [sp, #4]
10007ef4:	1818      	adds	r0, r3, r0
10007ef6:	9b03      	ldr	r3, [sp, #12]
10007ef8:	18c0      	adds	r0, r0, r3
10007efa:	9b00      	ldr	r3, [sp, #0]
10007efc:	4063      	eors	r3, r4
10007efe:	9c02      	ldr	r4, [sp, #8]
10007f00:	4023      	ands	r3, r4
10007f02:	9c00      	ldr	r4, [sp, #0]
10007f04:	4063      	eors	r3, r4
10007f06:	240b      	movs	r4, #11
10007f08:	18c3      	adds	r3, r0, r3
10007f0a:	9802      	ldr	r0, [sp, #8]
10007f0c:	41e0      	rors	r0, r4
10007f0e:	4684      	mov	ip, r0
10007f10:	9802      	ldr	r0, [sp, #8]
10007f12:	3c05      	subs	r4, #5
10007f14:	41e0      	rors	r0, r4
10007f16:	4664      	mov	r4, ip
10007f18:	4044      	eors	r4, r0
10007f1a:	46a4      	mov	ip, r4
10007f1c:	2419      	movs	r4, #25
10007f1e:	9802      	ldr	r0, [sp, #8]
10007f20:	41e0      	rors	r0, r4
10007f22:	4664      	mov	r4, ip
10007f24:	4060      	eors	r0, r4
10007f26:	181b      	adds	r3, r3, r0
10007f28:	189a      	adds	r2, r3, r2
10007f2a:	1c38      	adds	r0, r7, #0
10007f2c:	9203      	str	r2, [sp, #12]
10007f2e:	1c0a      	adds	r2, r1, #0
10007f30:	4308      	orrs	r0, r1
10007f32:	403a      	ands	r2, r7
10007f34:	4028      	ands	r0, r5
10007f36:	4310      	orrs	r0, r2
10007f38:	240d      	movs	r4, #13
10007f3a:	1c3a      	adds	r2, r7, #0
10007f3c:	41e2      	rors	r2, r4
10007f3e:	4694      	mov	ip, r2
10007f40:	1c3a      	adds	r2, r7, #0
10007f42:	3c0b      	subs	r4, #11
10007f44:	41e2      	rors	r2, r4
10007f46:	4664      	mov	r4, ip
10007f48:	4054      	eors	r4, r2
10007f4a:	46a4      	mov	ip, r4
10007f4c:	1c3a      	adds	r2, r7, #0
10007f4e:	2416      	movs	r4, #22
10007f50:	41e2      	rors	r2, r4
10007f52:	4664      	mov	r4, ip
10007f54:	4062      	eors	r2, r4
10007f56:	1880      	adds	r0, r0, r2
10007f58:	9a05      	ldr	r2, [sp, #20]
10007f5a:	18c0      	adds	r0, r0, r3
10007f5c:	68d2      	ldr	r2, [r2, #12]
10007f5e:	68f3      	ldr	r3, [r6, #12]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
10007f60:	9c02      	ldr	r4, [sp, #8]
10007f62:	189b      	adds	r3, r3, r2
10007f64:	9a00      	ldr	r2, [sp, #0]
10007f66:	189a      	adds	r2, r3, r2
10007f68:	9b01      	ldr	r3, [sp, #4]
10007f6a:	4063      	eors	r3, r4
10007f6c:	9c03      	ldr	r4, [sp, #12]
10007f6e:	4023      	ands	r3, r4
10007f70:	9c01      	ldr	r4, [sp, #4]
10007f72:	4063      	eors	r3, r4
10007f74:	240b      	movs	r4, #11
10007f76:	18d3      	adds	r3, r2, r3
10007f78:	9a03      	ldr	r2, [sp, #12]
10007f7a:	41e2      	rors	r2, r4
10007f7c:	4694      	mov	ip, r2
10007f7e:	9a03      	ldr	r2, [sp, #12]
10007f80:	3c05      	subs	r4, #5
10007f82:	41e2      	rors	r2, r4
10007f84:	4664      	mov	r4, ip
10007f86:	4054      	eors	r4, r2
10007f88:	46a4      	mov	ip, r4
10007f8a:	2419      	movs	r4, #25
10007f8c:	9a03      	ldr	r2, [sp, #12]
10007f8e:	41e2      	rors	r2, r4
10007f90:	4664      	mov	r4, ip
10007f92:	4062      	eors	r2, r4
10007f94:	189b      	adds	r3, r3, r2
10007f96:	195a      	adds	r2, r3, r5
10007f98:	1c05      	adds	r5, r0, #0
10007f9a:	9204      	str	r2, [sp, #16]
10007f9c:	1c3a      	adds	r2, r7, #0
10007f9e:	433d      	orrs	r5, r7
10007fa0:	4002      	ands	r2, r0
10007fa2:	400d      	ands	r5, r1
10007fa4:	4315      	orrs	r5, r2
10007fa6:	240d      	movs	r4, #13
10007fa8:	1c02      	adds	r2, r0, #0
10007faa:	41e2      	rors	r2, r4
10007fac:	4694      	mov	ip, r2
10007fae:	1c02      	adds	r2, r0, #0
10007fb0:	3c0b      	subs	r4, #11
10007fb2:	41e2      	rors	r2, r4
10007fb4:	4664      	mov	r4, ip
10007fb6:	4054      	eors	r4, r2
10007fb8:	46a4      	mov	ip, r4
10007fba:	1c02      	adds	r2, r0, #0
10007fbc:	2416      	movs	r4, #22
10007fbe:	41e2      	rors	r2, r4
10007fc0:	4664      	mov	r4, ip
10007fc2:	4062      	eors	r2, r4
10007fc4:	18aa      	adds	r2, r5, r2
10007fc6:	18d3      	adds	r3, r2, r3
10007fc8:	9300      	str	r3, [sp, #0]
10007fca:	9a05      	ldr	r2, [sp, #20]
10007fcc:	6933      	ldr	r3, [r6, #16]
10007fce:	6912      	ldr	r2, [r2, #16]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
10007fd0:	2406      	movs	r4, #6
10007fd2:	189a      	adds	r2, r3, r2
10007fd4:	9b01      	ldr	r3, [sp, #4]
10007fd6:	18d5      	adds	r5, r2, r3
10007fd8:	9b02      	ldr	r3, [sp, #8]
10007fda:	9a03      	ldr	r2, [sp, #12]
10007fdc:	4053      	eors	r3, r2
10007fde:	9a04      	ldr	r2, [sp, #16]
10007fe0:	4013      	ands	r3, r2
10007fe2:	9a02      	ldr	r2, [sp, #8]
10007fe4:	4053      	eors	r3, r2
10007fe6:	18ea      	adds	r2, r5, r3
10007fe8:	230b      	movs	r3, #11
10007fea:	9d04      	ldr	r5, [sp, #16]
10007fec:	41dd      	rors	r5, r3
10007fee:	9b04      	ldr	r3, [sp, #16]
10007ff0:	41e3      	rors	r3, r4
10007ff2:	406b      	eors	r3, r5
10007ff4:	9d04      	ldr	r5, [sp, #16]
10007ff6:	3413      	adds	r4, #19
10007ff8:	41e5      	rors	r5, r4
10007ffa:	406b      	eors	r3, r5
10007ffc:	18d3      	adds	r3, r2, r3
10007ffe:	185a      	adds	r2, r3, r1
10008000:	9201      	str	r2, [sp, #4]
10008002:	220d      	movs	r2, #13
10008004:	9d00      	ldr	r5, [sp, #0]
10008006:	9900      	ldr	r1, [sp, #0]
10008008:	4305      	orrs	r5, r0
1000800a:	4001      	ands	r1, r0
1000800c:	403d      	ands	r5, r7
1000800e:	430d      	orrs	r5, r1
10008010:	9900      	ldr	r1, [sp, #0]
10008012:	3c17      	subs	r4, #23
10008014:	41d1      	rors	r1, r2
10008016:	9a00      	ldr	r2, [sp, #0]
10008018:	41e2      	rors	r2, r4
1000801a:	4051      	eors	r1, r2
1000801c:	9a00      	ldr	r2, [sp, #0]
1000801e:	3414      	adds	r4, #20
10008020:	41e2      	rors	r2, r4
10008022:	404a      	eors	r2, r1
10008024:	18a9      	adds	r1, r5, r2
10008026:	9a05      	ldr	r2, [sp, #20]
10008028:	18c9      	adds	r1, r1, r3
1000802a:	6952      	ldr	r2, [r2, #20]
1000802c:	6973      	ldr	r3, [r6, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
1000802e:	9c04      	ldr	r4, [sp, #16]
10008030:	189b      	adds	r3, r3, r2
10008032:	9a02      	ldr	r2, [sp, #8]
10008034:	189b      	adds	r3, r3, r2
10008036:	9a03      	ldr	r2, [sp, #12]
10008038:	4062      	eors	r2, r4
1000803a:	9c01      	ldr	r4, [sp, #4]
1000803c:	4022      	ands	r2, r4
1000803e:	9c03      	ldr	r4, [sp, #12]
10008040:	4062      	eors	r2, r4
10008042:	189d      	adds	r5, r3, r2
10008044:	230b      	movs	r3, #11
10008046:	2406      	movs	r4, #6
10008048:	9a01      	ldr	r2, [sp, #4]
1000804a:	41da      	rors	r2, r3
1000804c:	9b01      	ldr	r3, [sp, #4]
1000804e:	41e3      	rors	r3, r4
10008050:	4053      	eors	r3, r2
10008052:	9a01      	ldr	r2, [sp, #4]
10008054:	3413      	adds	r4, #19
10008056:	41e2      	rors	r2, r4
10008058:	405a      	eors	r2, r3
1000805a:	18aa      	adds	r2, r5, r2
1000805c:	19d3      	adds	r3, r2, r7
1000805e:	9f00      	ldr	r7, [sp, #0]
10008060:	9302      	str	r3, [sp, #8]
10008062:	9b00      	ldr	r3, [sp, #0]
10008064:	430f      	orrs	r7, r1
10008066:	4007      	ands	r7, r0
10008068:	400b      	ands	r3, r1
1000806a:	431f      	orrs	r7, r3
1000806c:	1c0d      	adds	r5, r1, #0
1000806e:	230d      	movs	r3, #13
10008070:	41dd      	rors	r5, r3
10008072:	1c0b      	adds	r3, r1, #0
10008074:	3c17      	subs	r4, #23
10008076:	41e3      	rors	r3, r4
10008078:	406b      	eors	r3, r5
1000807a:	1c0d      	adds	r5, r1, #0
1000807c:	3414      	adds	r4, #20
1000807e:	41e5      	rors	r5, r4
10008080:	9c05      	ldr	r4, [sp, #20]
10008082:	405d      	eors	r5, r3
10008084:	197b      	adds	r3, r7, r5
10008086:	189b      	adds	r3, r3, r2
10008088:	69b2      	ldr	r2, [r6, #24]
1000808a:	69a4      	ldr	r4, [r4, #24]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
1000808c:	9d04      	ldr	r5, [sp, #16]
1000808e:	1912      	adds	r2, r2, r4
10008090:	9c03      	ldr	r4, [sp, #12]
10008092:	9f02      	ldr	r7, [sp, #8]
10008094:	1912      	adds	r2, r2, r4
10008096:	9c01      	ldr	r4, [sp, #4]
10008098:	3620      	adds	r6, #32
1000809a:	4065      	eors	r5, r4
1000809c:	9c02      	ldr	r4, [sp, #8]
1000809e:	4025      	ands	r5, r4
100080a0:	9c04      	ldr	r4, [sp, #16]
100080a2:	4065      	eors	r5, r4
100080a4:	1955      	adds	r5, r2, r5
100080a6:	220b      	movs	r2, #11
100080a8:	2406      	movs	r4, #6
100080aa:	41d7      	rors	r7, r2
100080ac:	9a02      	ldr	r2, [sp, #8]
100080ae:	41e2      	rors	r2, r4
100080b0:	407a      	eors	r2, r7
100080b2:	9f02      	ldr	r7, [sp, #8]
100080b4:	3413      	adds	r4, #19
100080b6:	41e7      	rors	r7, r4
100080b8:	407a      	eors	r2, r7
100080ba:	1c1f      	adds	r7, r3, #0
100080bc:	18ad      	adds	r5, r5, r2
100080be:	182a      	adds	r2, r5, r0
100080c0:	9203      	str	r2, [sp, #12]
100080c2:	9a00      	ldr	r2, [sp, #0]
100080c4:	430f      	orrs	r7, r1
100080c6:	4017      	ands	r7, r2
100080c8:	1c0a      	adds	r2, r1, #0
100080ca:	401a      	ands	r2, r3
100080cc:	4317      	orrs	r7, r2
100080ce:	1c18      	adds	r0, r3, #0
100080d0:	220d      	movs	r2, #13
100080d2:	41d0      	rors	r0, r2
100080d4:	1c1a      	adds	r2, r3, #0
100080d6:	3c17      	subs	r4, #23
100080d8:	41e2      	rors	r2, r4
100080da:	4042      	eors	r2, r0
100080dc:	1c18      	adds	r0, r3, #0
100080de:	3414      	adds	r4, #20
100080e0:	41e0      	rors	r0, r4
100080e2:	4050      	eors	r0, r2
100080e4:	183a      	adds	r2, r7, r0
100080e6:	9806      	ldr	r0, [sp, #24]
100080e8:	1952      	adds	r2, r2, r5
100080ea:	3020      	adds	r0, #32
100080ec:	9006      	str	r0, [sp, #24]
100080ee:	9805      	ldr	r0, [sp, #20]
100080f0:	3020      	adds	r0, #32
100080f2:	9005      	str	r0, [sp, #20]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
100080f4:	9806      	ldr	r0, [sp, #24]
100080f6:	2840      	cmp	r0, #64	; 0x40
100080f8:	d000      	beq.n	100080fc <mbedtls_internal_sha256_process+0x3d0>
100080fa:	e649      	b.n	10007d90 <mbedtls_internal_sha256_process+0x64>
100080fc:	9804      	ldr	r0, [sp, #16]
100080fe:	910e      	str	r1, [sp, #56]	; 0x38
10008100:	9013      	str	r0, [sp, #76]	; 0x4c
10008102:	9803      	ldr	r0, [sp, #12]
10008104:	920c      	str	r2, [sp, #48]	; 0x30
10008106:	9010      	str	r0, [sp, #64]	; 0x40
10008108:	9802      	ldr	r0, [sp, #8]
1000810a:	930d      	str	r3, [sp, #52]	; 0x34
1000810c:	9011      	str	r0, [sp, #68]	; 0x44
1000810e:	9801      	ldr	r0, [sp, #4]
10008110:	ac14      	add	r4, sp, #80	; 0x50
10008112:	9012      	str	r0, [sp, #72]	; 0x48
10008114:	9801      	ldr	r0, [sp, #4]
10008116:	9101      	str	r1, [sp, #4]
10008118:	9902      	ldr	r1, [sp, #8]
1000811a:	9006      	str	r0, [sp, #24]
1000811c:	9105      	str	r1, [sp, #20]
1000811e:	4902      	ldr	r1, [pc, #8]	; (10008128 <mbedtls_internal_sha256_process+0x3fc>)
10008120:	9102      	str	r1, [sp, #8]
10008122:	2110      	movs	r1, #16
10008124:	910a      	str	r1, [sp, #40]	; 0x28
10008126:	e001      	b.n	1000812c <mbedtls_internal_sha256_process+0x400>
10008128:	10010544 	.word	0x10010544
1000812c:	6821      	ldr	r1, [r4, #0]
1000812e:	6a60      	ldr	r0, [r4, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
10008130:	6ba5      	ldr	r5, [r4, #56]	; 0x38
10008132:	180f      	adds	r7, r1, r0
10008134:	2113      	movs	r1, #19
10008136:	2011      	movs	r0, #17
10008138:	41cd      	rors	r5, r1
1000813a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1000813c:	2607      	movs	r6, #7
1000813e:	41c1      	rors	r1, r0
10008140:	6ba0      	ldr	r0, [r4, #56]	; 0x38
10008142:	4069      	eors	r1, r5
10008144:	0a85      	lsrs	r5, r0, #10
10008146:	2012      	movs	r0, #18
10008148:	4069      	eors	r1, r5
1000814a:	6865      	ldr	r5, [r4, #4]
1000814c:	1879      	adds	r1, r7, r1
1000814e:	41c5      	rors	r5, r0
10008150:	6860      	ldr	r0, [r4, #4]
10008152:	1c17      	adds	r7, r2, #0
10008154:	41f0      	rors	r0, r6
10008156:	4068      	eors	r0, r5
10008158:	6865      	ldr	r5, [r4, #4]
1000815a:	3e05      	subs	r6, #5
1000815c:	08ed      	lsrs	r5, r5, #3
1000815e:	4045      	eors	r5, r0
10008160:	1949      	adds	r1, r1, r5
10008162:	9109      	str	r1, [sp, #36]	; 0x24
10008164:	210b      	movs	r1, #11
10008166:	2506      	movs	r5, #6
10008168:	9803      	ldr	r0, [sp, #12]
1000816a:	41c8      	rors	r0, r1
1000816c:	9903      	ldr	r1, [sp, #12]
1000816e:	41e9      	rors	r1, r5
10008170:	4048      	eors	r0, r1
10008172:	9903      	ldr	r1, [sp, #12]
10008174:	3513      	adds	r5, #19
10008176:	41e9      	rors	r1, r5
10008178:	9d05      	ldr	r5, [sp, #20]
1000817a:	4048      	eors	r0, r1
1000817c:	9906      	ldr	r1, [sp, #24]
1000817e:	4069      	eors	r1, r5
10008180:	9d03      	ldr	r5, [sp, #12]
10008182:	4029      	ands	r1, r5
10008184:	9d06      	ldr	r5, [sp, #24]
10008186:	4069      	eors	r1, r5
10008188:	1845      	adds	r5, r0, r1
1000818a:	9902      	ldr	r1, [sp, #8]
1000818c:	1c18      	adds	r0, r3, #0
1000818e:	6c09      	ldr	r1, [r1, #64]	; 0x40
10008190:	4310      	orrs	r0, r2
10008192:	186d      	adds	r5, r5, r1
10008194:	9909      	ldr	r1, [sp, #36]	; 0x24
10008196:	6421      	str	r1, [r4, #64]	; 0x40
10008198:	186d      	adds	r5, r5, r1
1000819a:	9904      	ldr	r1, [sp, #16]
1000819c:	186d      	adds	r5, r5, r1
1000819e:	9900      	ldr	r1, [sp, #0]
100081a0:	468c      	mov	ip, r1
100081a2:	44ac      	add	ip, r5
100081a4:	4661      	mov	r1, ip
100081a6:	9104      	str	r1, [sp, #16]
100081a8:	9901      	ldr	r1, [sp, #4]
100081aa:	4008      	ands	r0, r1
100081ac:	1c11      	adds	r1, r2, #0
100081ae:	4019      	ands	r1, r3
100081b0:	4308      	orrs	r0, r1
100081b2:	210d      	movs	r1, #13
100081b4:	41cf      	rors	r7, r1
100081b6:	1c11      	adds	r1, r2, #0
100081b8:	41f1      	rors	r1, r6
100081ba:	404f      	eors	r7, r1
100081bc:	1c11      	adds	r1, r2, #0
100081be:	3614      	adds	r6, #20
100081c0:	41f1      	rors	r1, r6
100081c2:	4079      	eors	r1, r7
100081c4:	1841      	adds	r1, r0, r1
100081c6:	1949      	adds	r1, r1, r5
100081c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
100081ca:	9100      	str	r1, [sp, #0]
100081cc:	6861      	ldr	r1, [r4, #4]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
100081ce:	6be5      	ldr	r5, [r4, #60]	; 0x3c
100081d0:	1809      	adds	r1, r1, r0
100081d2:	2013      	movs	r0, #19
100081d4:	41c5      	rors	r5, r0
100081d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
100081d8:	3e05      	subs	r6, #5
100081da:	41f0      	rors	r0, r6
100081dc:	4068      	eors	r0, r5
100081de:	6be5      	ldr	r5, [r4, #60]	; 0x3c
100081e0:	68a7      	ldr	r7, [r4, #8]
100081e2:	0aad      	lsrs	r5, r5, #10
100081e4:	4068      	eors	r0, r5
100081e6:	1808      	adds	r0, r1, r0
100081e8:	2112      	movs	r1, #18
100081ea:	2507      	movs	r5, #7
100081ec:	41cf      	rors	r7, r1
100081ee:	68a1      	ldr	r1, [r4, #8]
100081f0:	3e0b      	subs	r6, #11
100081f2:	41e9      	rors	r1, r5
100081f4:	404f      	eors	r7, r1
100081f6:	68a1      	ldr	r1, [r4, #8]
100081f8:	08c9      	lsrs	r1, r1, #3
100081fa:	404f      	eors	r7, r1
100081fc:	19c7      	adds	r7, r0, r7
100081fe:	9906      	ldr	r1, [sp, #24]
10008200:	9802      	ldr	r0, [sp, #8]
10008202:	9d03      	ldr	r5, [sp, #12]
10008204:	6c40      	ldr	r0, [r0, #68]	; 0x44
10008206:	6467      	str	r7, [r4, #68]	; 0x44
10008208:	4684      	mov	ip, r0
1000820a:	4461      	add	r1, ip
1000820c:	19c8      	adds	r0, r1, r7
1000820e:	9905      	ldr	r1, [sp, #20]
10008210:	4069      	eors	r1, r5
10008212:	9d04      	ldr	r5, [sp, #16]
10008214:	4029      	ands	r1, r5
10008216:	9d05      	ldr	r5, [sp, #20]
10008218:	4069      	eors	r1, r5
1000821a:	1841      	adds	r1, r0, r1
1000821c:	200b      	movs	r0, #11
1000821e:	9d04      	ldr	r5, [sp, #16]
10008220:	41c5      	rors	r5, r0
10008222:	9804      	ldr	r0, [sp, #16]
10008224:	41f0      	rors	r0, r6
10008226:	4045      	eors	r5, r0
10008228:	9804      	ldr	r0, [sp, #16]
1000822a:	3613      	adds	r6, #19
1000822c:	41f0      	rors	r0, r6
1000822e:	4068      	eors	r0, r5
10008230:	1809      	adds	r1, r1, r0
10008232:	9801      	ldr	r0, [sp, #4]
10008234:	9d00      	ldr	r5, [sp, #0]
10008236:	1808      	adds	r0, r1, r0
10008238:	9006      	str	r0, [sp, #24]
1000823a:	9800      	ldr	r0, [sp, #0]
1000823c:	4315      	orrs	r5, r2
1000823e:	4010      	ands	r0, r2
10008240:	401d      	ands	r5, r3
10008242:	4305      	orrs	r5, r0
10008244:	9800      	ldr	r0, [sp, #0]
10008246:	3e0c      	subs	r6, #12
10008248:	41f0      	rors	r0, r6
1000824a:	4684      	mov	ip, r0
1000824c:	9800      	ldr	r0, [sp, #0]
1000824e:	3e0b      	subs	r6, #11
10008250:	41f0      	rors	r0, r6
10008252:	4666      	mov	r6, ip
10008254:	4046      	eors	r6, r0
10008256:	46b4      	mov	ip, r6
10008258:	2616      	movs	r6, #22
1000825a:	9800      	ldr	r0, [sp, #0]
1000825c:	41f0      	rors	r0, r6
1000825e:	4666      	mov	r6, ip
10008260:	4070      	eors	r0, r6
10008262:	1828      	adds	r0, r5, r0
10008264:	1841      	adds	r1, r0, r1
10008266:	9101      	str	r1, [sp, #4]
10008268:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1000826a:	68a1      	ldr	r1, [r4, #8]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
1000826c:	2611      	movs	r6, #17
1000826e:	180d      	adds	r5, r1, r0
10008270:	2113      	movs	r1, #19
10008272:	9809      	ldr	r0, [sp, #36]	; 0x24
10008274:	41c8      	rors	r0, r1
10008276:	9909      	ldr	r1, [sp, #36]	; 0x24
10008278:	41f1      	rors	r1, r6
1000827a:	4041      	eors	r1, r0
1000827c:	9809      	ldr	r0, [sp, #36]	; 0x24
1000827e:	3e0a      	subs	r6, #10
10008280:	0a80      	lsrs	r0, r0, #10
10008282:	4041      	eors	r1, r0
10008284:	2012      	movs	r0, #18
10008286:	1869      	adds	r1, r5, r1
10008288:	68e5      	ldr	r5, [r4, #12]
1000828a:	41c5      	rors	r5, r0
1000828c:	68e0      	ldr	r0, [r4, #12]
1000828e:	41f0      	rors	r0, r6
10008290:	4045      	eors	r5, r0
10008292:	68e0      	ldr	r0, [r4, #12]
10008294:	9e04      	ldr	r6, [sp, #16]
10008296:	08c0      	lsrs	r0, r0, #3
10008298:	4045      	eors	r5, r0
1000829a:	9802      	ldr	r0, [sp, #8]
1000829c:	194d      	adds	r5, r1, r5
1000829e:	6c80      	ldr	r0, [r0, #72]	; 0x48
100082a0:	9905      	ldr	r1, [sp, #20]
100082a2:	4684      	mov	ip, r0
100082a4:	4461      	add	r1, ip
100082a6:	1948      	adds	r0, r1, r5
100082a8:	9903      	ldr	r1, [sp, #12]
100082aa:	4071      	eors	r1, r6
100082ac:	9e06      	ldr	r6, [sp, #24]
100082ae:	4031      	ands	r1, r6
100082b0:	9e03      	ldr	r6, [sp, #12]
100082b2:	64a5      	str	r5, [r4, #72]	; 0x48
100082b4:	4071      	eors	r1, r6
100082b6:	260b      	movs	r6, #11
100082b8:	1841      	adds	r1, r0, r1
100082ba:	9806      	ldr	r0, [sp, #24]
100082bc:	41f0      	rors	r0, r6
100082be:	4684      	mov	ip, r0
100082c0:	9806      	ldr	r0, [sp, #24]
100082c2:	3e05      	subs	r6, #5
100082c4:	41f0      	rors	r0, r6
100082c6:	4666      	mov	r6, ip
100082c8:	4046      	eors	r6, r0
100082ca:	46b4      	mov	ip, r6
100082cc:	2619      	movs	r6, #25
100082ce:	9806      	ldr	r0, [sp, #24]
100082d0:	41f0      	rors	r0, r6
100082d2:	4666      	mov	r6, ip
100082d4:	4070      	eors	r0, r6
100082d6:	1809      	adds	r1, r1, r0
100082d8:	18cb      	adds	r3, r1, r3
100082da:	9307      	str	r3, [sp, #28]
100082dc:	9800      	ldr	r0, [sp, #0]
100082de:	9b01      	ldr	r3, [sp, #4]
100082e0:	9e01      	ldr	r6, [sp, #4]
100082e2:	4318      	orrs	r0, r3
100082e4:	9b00      	ldr	r3, [sp, #0]
100082e6:	4010      	ands	r0, r2
100082e8:	4033      	ands	r3, r6
100082ea:	4318      	orrs	r0, r3
100082ec:	1c33      	adds	r3, r6, #0
100082ee:	260d      	movs	r6, #13
100082f0:	41f3      	rors	r3, r6
100082f2:	469c      	mov	ip, r3
100082f4:	9b01      	ldr	r3, [sp, #4]
100082f6:	3e0b      	subs	r6, #11
100082f8:	41f3      	rors	r3, r6
100082fa:	4666      	mov	r6, ip
100082fc:	405e      	eors	r6, r3
100082fe:	46b4      	mov	ip, r6
10008300:	2616      	movs	r6, #22
10008302:	9b01      	ldr	r3, [sp, #4]
10008304:	41f3      	rors	r3, r6
10008306:	4666      	mov	r6, ip
10008308:	4073      	eors	r3, r6
1000830a:	18c3      	adds	r3, r0, r3
1000830c:	185b      	adds	r3, r3, r1
1000830e:	9305      	str	r3, [sp, #20]
10008310:	6b21      	ldr	r1, [r4, #48]	; 0x30
10008312:	68e3      	ldr	r3, [r4, #12]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
10008314:	1c38      	adds	r0, r7, #0
10008316:	185b      	adds	r3, r3, r1
10008318:	2113      	movs	r1, #19
1000831a:	2611      	movs	r6, #17
1000831c:	41c8      	rors	r0, r1
1000831e:	1c39      	adds	r1, r7, #0
10008320:	41f1      	rors	r1, r6
10008322:	0abf      	lsrs	r7, r7, #10
10008324:	4041      	eors	r1, r0
10008326:	4079      	eors	r1, r7
10008328:	185b      	adds	r3, r3, r1
1000832a:	2112      	movs	r1, #18
1000832c:	6920      	ldr	r0, [r4, #16]
1000832e:	3e0a      	subs	r6, #10
10008330:	41c8      	rors	r0, r1
10008332:	6921      	ldr	r1, [r4, #16]
10008334:	9f07      	ldr	r7, [sp, #28]
10008336:	41f1      	rors	r1, r6
10008338:	4041      	eors	r1, r0
1000833a:	6920      	ldr	r0, [r4, #16]
1000833c:	08c0      	lsrs	r0, r0, #3
1000833e:	4041      	eors	r1, r0
10008340:	9802      	ldr	r0, [sp, #8]
10008342:	1859      	adds	r1, r3, r1
10008344:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
10008346:	9b03      	ldr	r3, [sp, #12]
10008348:	46b4      	mov	ip, r6
1000834a:	4463      	add	r3, ip
1000834c:	1858      	adds	r0, r3, r1
1000834e:	9e06      	ldr	r6, [sp, #24]
10008350:	9b04      	ldr	r3, [sp, #16]
10008352:	64e1      	str	r1, [r4, #76]	; 0x4c
10008354:	4073      	eors	r3, r6
10008356:	9e07      	ldr	r6, [sp, #28]
10008358:	4033      	ands	r3, r6
1000835a:	9e04      	ldr	r6, [sp, #16]
1000835c:	4073      	eors	r3, r6
1000835e:	18c3      	adds	r3, r0, r3
10008360:	200b      	movs	r0, #11
10008362:	2606      	movs	r6, #6
10008364:	41c7      	rors	r7, r0
10008366:	9807      	ldr	r0, [sp, #28]
10008368:	41f0      	rors	r0, r6
1000836a:	4047      	eors	r7, r0
1000836c:	9807      	ldr	r0, [sp, #28]
1000836e:	3613      	adds	r6, #19
10008370:	41f0      	rors	r0, r6
10008372:	4078      	eors	r0, r7
10008374:	181b      	adds	r3, r3, r0
10008376:	189a      	adds	r2, r3, r2
10008378:	9208      	str	r2, [sp, #32]
1000837a:	9f01      	ldr	r7, [sp, #4]
1000837c:	9a05      	ldr	r2, [sp, #20]
1000837e:	3e17      	subs	r6, #23
10008380:	4317      	orrs	r7, r2
10008382:	9a00      	ldr	r2, [sp, #0]
10008384:	4017      	ands	r7, r2
10008386:	9a01      	ldr	r2, [sp, #4]
10008388:	9805      	ldr	r0, [sp, #20]
1000838a:	4002      	ands	r2, r0
1000838c:	4317      	orrs	r7, r2
1000838e:	220d      	movs	r2, #13
10008390:	41d0      	rors	r0, r2
10008392:	9a05      	ldr	r2, [sp, #20]
10008394:	41f2      	rors	r2, r6
10008396:	4050      	eors	r0, r2
10008398:	9a05      	ldr	r2, [sp, #20]
1000839a:	3614      	adds	r6, #20
1000839c:	41f2      	rors	r2, r6
1000839e:	4042      	eors	r2, r0
100083a0:	18ba      	adds	r2, r7, r2
100083a2:	18d3      	adds	r3, r2, r3
100083a4:	9303      	str	r3, [sp, #12]
100083a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
100083a8:	6923      	ldr	r3, [r4, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
100083aa:	1c28      	adds	r0, r5, #0
100083ac:	189b      	adds	r3, r3, r2
100083ae:	2213      	movs	r2, #19
100083b0:	41d0      	rors	r0, r2
100083b2:	1c2a      	adds	r2, r5, #0
100083b4:	3e05      	subs	r6, #5
100083b6:	41f2      	rors	r2, r6
100083b8:	0aad      	lsrs	r5, r5, #10
100083ba:	4042      	eors	r2, r0
100083bc:	406a      	eors	r2, r5
100083be:	189b      	adds	r3, r3, r2
100083c0:	2212      	movs	r2, #18
100083c2:	2507      	movs	r5, #7
100083c4:	6960      	ldr	r0, [r4, #20]
100083c6:	9f06      	ldr	r7, [sp, #24]
100083c8:	41d0      	rors	r0, r2
100083ca:	6962      	ldr	r2, [r4, #20]
100083cc:	3e0f      	subs	r6, #15
100083ce:	41ea      	rors	r2, r5
100083d0:	4050      	eors	r0, r2
100083d2:	6962      	ldr	r2, [r4, #20]
100083d4:	08d2      	lsrs	r2, r2, #3
100083d6:	4050      	eors	r0, r2
100083d8:	1818      	adds	r0, r3, r0
100083da:	9b02      	ldr	r3, [sp, #8]
100083dc:	6520      	str	r0, [r4, #80]	; 0x50
100083de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100083e0:	18c5      	adds	r5, r0, r3
100083e2:	9b04      	ldr	r3, [sp, #16]
100083e4:	18ea      	adds	r2, r5, r3
100083e6:	9b07      	ldr	r3, [sp, #28]
100083e8:	405f      	eors	r7, r3
100083ea:	9b08      	ldr	r3, [sp, #32]
100083ec:	401f      	ands	r7, r3
100083ee:	9b06      	ldr	r3, [sp, #24]
100083f0:	405f      	eors	r7, r3
100083f2:	230b      	movs	r3, #11
100083f4:	19d5      	adds	r5, r2, r7
100083f6:	2206      	movs	r2, #6
100083f8:	9f08      	ldr	r7, [sp, #32]
100083fa:	41df      	rors	r7, r3
100083fc:	9b08      	ldr	r3, [sp, #32]
100083fe:	41d3      	rors	r3, r2
10008400:	405f      	eors	r7, r3
10008402:	9b08      	ldr	r3, [sp, #32]
10008404:	3213      	adds	r2, #19
10008406:	41d3      	rors	r3, r2
10008408:	405f      	eors	r7, r3
1000840a:	9b00      	ldr	r3, [sp, #0]
1000840c:	19ef      	adds	r7, r5, r7
1000840e:	18fb      	adds	r3, r7, r3
10008410:	9a03      	ldr	r2, [sp, #12]
10008412:	9304      	str	r3, [sp, #16]
10008414:	9b05      	ldr	r3, [sp, #20]
10008416:	9d03      	ldr	r5, [sp, #12]
10008418:	4313      	orrs	r3, r2
1000841a:	9a01      	ldr	r2, [sp, #4]
1000841c:	4013      	ands	r3, r2
1000841e:	9a05      	ldr	r2, [sp, #20]
10008420:	402a      	ands	r2, r5
10008422:	4313      	orrs	r3, r2
10008424:	220d      	movs	r2, #13
10008426:	41d5      	rors	r5, r2
10008428:	9a03      	ldr	r2, [sp, #12]
1000842a:	41f2      	rors	r2, r6
1000842c:	406a      	eors	r2, r5
1000842e:	9d03      	ldr	r5, [sp, #12]
10008430:	3614      	adds	r6, #20
10008432:	41f5      	rors	r5, r6
10008434:	4055      	eors	r5, r2
10008436:	195a      	adds	r2, r3, r5
10008438:	19d3      	adds	r3, r2, r7
1000843a:	9300      	str	r3, [sp, #0]
1000843c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1000843e:	6963      	ldr	r3, [r4, #20]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
10008440:	1c0d      	adds	r5, r1, #0
10008442:	189b      	adds	r3, r3, r2
10008444:	2213      	movs	r2, #19
10008446:	41d5      	rors	r5, r2
10008448:	1c0a      	adds	r2, r1, #0
1000844a:	3e05      	subs	r6, #5
1000844c:	41f2      	rors	r2, r6
1000844e:	0a89      	lsrs	r1, r1, #10
10008450:	406a      	eors	r2, r5
10008452:	404a      	eors	r2, r1
10008454:	189b      	adds	r3, r3, r2
10008456:	2212      	movs	r2, #18
10008458:	2507      	movs	r5, #7
1000845a:	69a1      	ldr	r1, [r4, #24]
1000845c:	9f04      	ldr	r7, [sp, #16]
1000845e:	41d1      	rors	r1, r2
10008460:	69a2      	ldr	r2, [r4, #24]
10008462:	3e0f      	subs	r6, #15
10008464:	41ea      	rors	r2, r5
10008466:	404a      	eors	r2, r1
10008468:	69a1      	ldr	r1, [r4, #24]
1000846a:	08c9      	lsrs	r1, r1, #3
1000846c:	404a      	eors	r2, r1
1000846e:	189a      	adds	r2, r3, r2
10008470:	9b02      	ldr	r3, [sp, #8]
10008472:	6562      	str	r2, [r4, #84]	; 0x54
10008474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10008476:	18d5      	adds	r5, r2, r3
10008478:	9b06      	ldr	r3, [sp, #24]
1000847a:	18e9      	adds	r1, r5, r3
1000847c:	9d08      	ldr	r5, [sp, #32]
1000847e:	9b07      	ldr	r3, [sp, #28]
10008480:	406b      	eors	r3, r5
10008482:	9d04      	ldr	r5, [sp, #16]
10008484:	402b      	ands	r3, r5
10008486:	9d07      	ldr	r5, [sp, #28]
10008488:	406b      	eors	r3, r5
1000848a:	18cd      	adds	r5, r1, r3
1000848c:	230b      	movs	r3, #11
1000848e:	2106      	movs	r1, #6
10008490:	41df      	rors	r7, r3
10008492:	9b04      	ldr	r3, [sp, #16]
10008494:	41cb      	rors	r3, r1
10008496:	407b      	eors	r3, r7
10008498:	9f04      	ldr	r7, [sp, #16]
1000849a:	3113      	adds	r1, #19
1000849c:	41cf      	rors	r7, r1
1000849e:	9901      	ldr	r1, [sp, #4]
100084a0:	407b      	eors	r3, r7
100084a2:	18eb      	adds	r3, r5, r3
100084a4:	1859      	adds	r1, r3, r1
100084a6:	9106      	str	r1, [sp, #24]
100084a8:	9f03      	ldr	r7, [sp, #12]
100084aa:	9900      	ldr	r1, [sp, #0]
100084ac:	9d00      	ldr	r5, [sp, #0]
100084ae:	430f      	orrs	r7, r1
100084b0:	9905      	ldr	r1, [sp, #20]
100084b2:	400f      	ands	r7, r1
100084b4:	9903      	ldr	r1, [sp, #12]
100084b6:	4029      	ands	r1, r5
100084b8:	430f      	orrs	r7, r1
100084ba:	210d      	movs	r1, #13
100084bc:	41cd      	rors	r5, r1
100084be:	9900      	ldr	r1, [sp, #0]
100084c0:	41f1      	rors	r1, r6
100084c2:	4069      	eors	r1, r5
100084c4:	9d00      	ldr	r5, [sp, #0]
100084c6:	3614      	adds	r6, #20
100084c8:	41f5      	rors	r5, r6
100084ca:	404d      	eors	r5, r1
100084cc:	1979      	adds	r1, r7, r5
100084ce:	18cb      	adds	r3, r1, r3
100084d0:	9301      	str	r3, [sp, #4]
100084d2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
100084d4:	69a3      	ldr	r3, [r4, #24]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
100084d6:	1c05      	adds	r5, r0, #0
100084d8:	185b      	adds	r3, r3, r1
100084da:	2113      	movs	r1, #19
100084dc:	41cd      	rors	r5, r1
100084de:	1c01      	adds	r1, r0, #0
100084e0:	3e05      	subs	r6, #5
100084e2:	41f1      	rors	r1, r6
100084e4:	0a80      	lsrs	r0, r0, #10
100084e6:	4069      	eors	r1, r5
100084e8:	4041      	eors	r1, r0
100084ea:	185b      	adds	r3, r3, r1
100084ec:	2112      	movs	r1, #18
100084ee:	2507      	movs	r5, #7
100084f0:	69e0      	ldr	r0, [r4, #28]
100084f2:	3e0f      	subs	r6, #15
100084f4:	41c8      	rors	r0, r1
100084f6:	69e1      	ldr	r1, [r4, #28]
100084f8:	41e9      	rors	r1, r5
100084fa:	4048      	eors	r0, r1
100084fc:	69e1      	ldr	r1, [r4, #28]
100084fe:	08c9      	lsrs	r1, r1, #3
10008500:	4048      	eors	r0, r1
10008502:	1818      	adds	r0, r3, r0
10008504:	9b02      	ldr	r3, [sp, #8]
10008506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10008508:	18c7      	adds	r7, r0, r3
1000850a:	9b07      	ldr	r3, [sp, #28]
1000850c:	18fd      	adds	r5, r7, r3
1000850e:	9f08      	ldr	r7, [sp, #32]
10008510:	9b04      	ldr	r3, [sp, #16]
10008512:	65a0      	str	r0, [r4, #88]	; 0x58
10008514:	405f      	eors	r7, r3
10008516:	9b06      	ldr	r3, [sp, #24]
10008518:	2006      	movs	r0, #6
1000851a:	401f      	ands	r7, r3
1000851c:	9b08      	ldr	r3, [sp, #32]
1000851e:	9906      	ldr	r1, [sp, #24]
10008520:	405f      	eors	r7, r3
10008522:	230b      	movs	r3, #11
10008524:	41d9      	rors	r1, r3
10008526:	9b06      	ldr	r3, [sp, #24]
10008528:	19ef      	adds	r7, r5, r7
1000852a:	41c3      	rors	r3, r0
1000852c:	404b      	eors	r3, r1
1000852e:	2119      	movs	r1, #25
10008530:	9806      	ldr	r0, [sp, #24]
10008532:	9d00      	ldr	r5, [sp, #0]
10008534:	41c8      	rors	r0, r1
10008536:	4043      	eors	r3, r0
10008538:	18f9      	adds	r1, r7, r3
1000853a:	9b05      	ldr	r3, [sp, #20]
1000853c:	9801      	ldr	r0, [sp, #4]
1000853e:	18cb      	adds	r3, r1, r3
10008540:	9305      	str	r3, [sp, #20]
10008542:	9b01      	ldr	r3, [sp, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
10008544:	1c17      	adds	r7, r2, #0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
10008546:	431d      	orrs	r5, r3
10008548:	9b03      	ldr	r3, [sp, #12]
1000854a:	401d      	ands	r5, r3
1000854c:	9b00      	ldr	r3, [sp, #0]
1000854e:	4003      	ands	r3, r0
10008550:	431d      	orrs	r5, r3
10008552:	230d      	movs	r3, #13
10008554:	41d8      	rors	r0, r3
10008556:	9b01      	ldr	r3, [sp, #4]
10008558:	41f3      	rors	r3, r6
1000855a:	4043      	eors	r3, r0
1000855c:	9801      	ldr	r0, [sp, #4]
1000855e:	3614      	adds	r6, #20
10008560:	41f0      	rors	r0, r6
10008562:	4058      	eors	r0, r3
10008564:	182b      	adds	r3, r5, r0
10008566:	69e5      	ldr	r5, [r4, #28]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
10008568:	3e05      	subs	r6, #5
1000856a:	46ac      	mov	ip, r5
1000856c:	2513      	movs	r5, #19
1000856e:	41ef      	rors	r7, r5
10008570:	1c15      	adds	r5, r2, #0
10008572:	41f5      	rors	r5, r6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
10008574:	185b      	adds	r3, r3, r1
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
10008576:	6a21      	ldr	r1, [r4, #32]
10008578:	407d      	eors	r5, r7
1000857a:	0a92      	lsrs	r2, r2, #10
1000857c:	4055      	eors	r5, r2
1000857e:	1c0f      	adds	r7, r1, #0
10008580:	2212      	movs	r2, #18
10008582:	9809      	ldr	r0, [sp, #36]	; 0x24
10008584:	41d7      	rors	r7, r2
10008586:	4460      	add	r0, ip
10008588:	1940      	adds	r0, r0, r5
1000858a:	1c0a      	adds	r2, r1, #0
1000858c:	2507      	movs	r5, #7
1000858e:	41ea      	rors	r2, r5
10008590:	08c9      	lsrs	r1, r1, #3
10008592:	407a      	eors	r2, r7
10008594:	404a      	eors	r2, r1
10008596:	1880      	adds	r0, r0, r2
10008598:	9a02      	ldr	r2, [sp, #8]
1000859a:	9904      	ldr	r1, [sp, #16]
1000859c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
1000859e:	65e0      	str	r0, [r4, #92]	; 0x5c
100085a0:	1885      	adds	r5, r0, r2
100085a2:	9a08      	ldr	r2, [sp, #32]
100085a4:	2006      	movs	r0, #6
100085a6:	18af      	adds	r7, r5, r2
100085a8:	9a06      	ldr	r2, [sp, #24]
100085aa:	3e0f      	subs	r6, #15
100085ac:	4051      	eors	r1, r2
100085ae:	9a05      	ldr	r2, [sp, #20]
100085b0:	3420      	adds	r4, #32
100085b2:	4011      	ands	r1, r2
100085b4:	9a04      	ldr	r2, [sp, #16]
100085b6:	4051      	eors	r1, r2
100085b8:	220b      	movs	r2, #11
100085ba:	187d      	adds	r5, r7, r1
100085bc:	9905      	ldr	r1, [sp, #20]
100085be:	41d1      	rors	r1, r2
100085c0:	9a05      	ldr	r2, [sp, #20]
100085c2:	41c2      	rors	r2, r0
100085c4:	404a      	eors	r2, r1
100085c6:	2119      	movs	r1, #25
100085c8:	9805      	ldr	r0, [sp, #20]
100085ca:	41c8      	rors	r0, r1
100085cc:	4042      	eors	r2, r0
100085ce:	18a9      	adds	r1, r5, r2
100085d0:	9a03      	ldr	r2, [sp, #12]
100085d2:	9d01      	ldr	r5, [sp, #4]
100085d4:	188a      	adds	r2, r1, r2
100085d6:	9203      	str	r2, [sp, #12]
100085d8:	9a00      	ldr	r2, [sp, #0]
100085da:	431d      	orrs	r5, r3
100085dc:	4015      	ands	r5, r2
100085de:	9a01      	ldr	r2, [sp, #4]
100085e0:	1c18      	adds	r0, r3, #0
100085e2:	401a      	ands	r2, r3
100085e4:	4315      	orrs	r5, r2
100085e6:	220d      	movs	r2, #13
100085e8:	41d0      	rors	r0, r2
100085ea:	1c1a      	adds	r2, r3, #0
100085ec:	41f2      	rors	r2, r6
100085ee:	4042      	eors	r2, r0
100085f0:	1c18      	adds	r0, r3, #0
100085f2:	3614      	adds	r6, #20
100085f4:	41f0      	rors	r0, r6
100085f6:	4050      	eors	r0, r2
100085f8:	182a      	adds	r2, r5, r0
100085fa:	1852      	adds	r2, r2, r1
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
100085fc:	990a      	ldr	r1, [sp, #40]	; 0x28
100085fe:	3108      	adds	r1, #8
10008600:	910a      	str	r1, [sp, #40]	; 0x28
10008602:	9902      	ldr	r1, [sp, #8]
10008604:	3120      	adds	r1, #32
10008606:	9102      	str	r1, [sp, #8]
10008608:	990a      	ldr	r1, [sp, #40]	; 0x28
1000860a:	2940      	cmp	r1, #64	; 0x40
1000860c:	d000      	beq.n	10008610 <mbedtls_internal_sha256_process+0x8e4>
1000860e:	e58d      	b.n	1000812c <mbedtls_internal_sha256_process+0x400>
10008610:	930d      	str	r3, [sp, #52]	; 0x34
10008612:	9b01      	ldr	r3, [sp, #4]
10008614:	9904      	ldr	r1, [sp, #16]
10008616:	930e      	str	r3, [sp, #56]	; 0x38
10008618:	9b00      	ldr	r3, [sp, #0]
1000861a:	9113      	str	r1, [sp, #76]	; 0x4c
1000861c:	930f      	str	r3, [sp, #60]	; 0x3c
1000861e:	2300      	movs	r3, #0
10008620:	9903      	ldr	r1, [sp, #12]
10008622:	920c      	str	r2, [sp, #48]	; 0x30
10008624:	9110      	str	r1, [sp, #64]	; 0x40
10008626:	9905      	ldr	r1, [sp, #20]
10008628:	9111      	str	r1, [sp, #68]	; 0x44
1000862a:	9906      	ldr	r1, [sp, #24]
1000862c:	9112      	str	r1, [sp, #72]	; 0x48
1000862e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008630:	18d1      	adds	r1, r2, r3
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
10008632:	6888      	ldr	r0, [r1, #8]
10008634:	aa0c      	add	r2, sp, #48	; 0x30
10008636:	4684      	mov	ip, r0
10008638:	58d2      	ldr	r2, [r2, r3]
1000863a:	3304      	adds	r3, #4
1000863c:	9200      	str	r2, [sp, #0]
1000863e:	4462      	add	r2, ip
10008640:	608a      	str	r2, [r1, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
10008642:	2b20      	cmp	r3, #32
10008644:	d1f3      	bne.n	1000862e <mbedtls_internal_sha256_process+0x902>
        ctx->state[i] += A[i];

    return( 0 );
}
10008646:	2000      	movs	r0, #0
10008648:	b055      	add	sp, #340	; 0x154
1000864a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000864c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
1000864c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000864e:	1c04      	adds	r4, r0, #0
10008650:	9101      	str	r1, [sp, #4]
10008652:	1e15      	subs	r5, r2, #0
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
10008654:	d038      	beq.n	100086c8 <mbedtls_sha256_update_ret+0x7c>
        return( 0 );

    left = ctx->total[0] & 0x3F;
10008656:	6803      	ldr	r3, [r0, #0]
10008658:	203f      	movs	r0, #63	; 0x3f
1000865a:	4018      	ands	r0, r3
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
1000865c:	18d3      	adds	r3, r2, r3
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
1000865e:	1c07      	adds	r7, r0, #0
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
10008660:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
10008662:	4293      	cmp	r3, r2
10008664:	d202      	bcs.n	1000866c <mbedtls_sha256_update_ret+0x20>
        ctx->total[1]++;
10008666:	6863      	ldr	r3, [r4, #4]
10008668:	3301      	adds	r3, #1
1000866a:	6063      	str	r3, [r4, #4]

    if( left && ilen >= fill )
1000866c:	2f00      	cmp	r7, #0
1000866e:	d016      	beq.n	1000869e <mbedtls_sha256_update_ret+0x52>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
10008670:	2640      	movs	r6, #64	; 0x40
10008672:	1bf6      	subs	r6, r6, r7
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
10008674:	42b5      	cmp	r5, r6
10008676:	d312      	bcc.n	1000869e <mbedtls_sha256_update_ret+0x52>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
10008678:	1c38      	adds	r0, r7, #0
1000867a:	3028      	adds	r0, #40	; 0x28
1000867c:	9901      	ldr	r1, [sp, #4]
1000867e:	1c32      	adds	r2, r6, #0
10008680:	1820      	adds	r0, r4, r0
10008682:	f004 f992 	bl	1000c9aa <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
10008686:	1c21      	adds	r1, r4, #0
10008688:	1c20      	adds	r0, r4, #0
1000868a:	3128      	adds	r1, #40	; 0x28
1000868c:	f7ff fb4e 	bl	10007d2c <mbedtls_internal_sha256_process>
10008690:	1e03      	subs	r3, r0, #0
10008692:	d11a      	bne.n	100086ca <mbedtls_sha256_update_ret+0x7e>
            return( ret );

        input += fill;
        ilen  -= fill;
        left = 0;
10008694:	1c1f      	adds	r7, r3, #0
        memcpy( (void *) (ctx->buffer + left), input, fill );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        input += fill;
10008696:	9a01      	ldr	r2, [sp, #4]
        ilen  -= fill;
10008698:	1bad      	subs	r5, r5, r6
        memcpy( (void *) (ctx->buffer + left), input, fill );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        input += fill;
1000869a:	1992      	adds	r2, r2, r6
1000869c:	9201      	str	r2, [sp, #4]
        ilen  -= fill;
        left = 0;
1000869e:	1c2e      	adds	r6, r5, #0
100086a0:	9b01      	ldr	r3, [sp, #4]
100086a2:	1ba9      	subs	r1, r5, r6
100086a4:	1859      	adds	r1, r3, r1
    }

    while( ilen >= 64 )
100086a6:	2e3f      	cmp	r6, #63	; 0x3f
100086a8:	d906      	bls.n	100086b8 <mbedtls_sha256_update_ret+0x6c>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
100086aa:	1c20      	adds	r0, r4, #0
100086ac:	f7ff fb3e 	bl	10007d2c <mbedtls_internal_sha256_process>
100086b0:	2800      	cmp	r0, #0
100086b2:	d10a      	bne.n	100086ca <mbedtls_sha256_update_ret+0x7e>
            return( ret );

        input += 64;
        ilen  -= 64;
100086b4:	3e40      	subs	r6, #64	; 0x40
100086b6:	e7f3      	b.n	100086a0 <mbedtls_sha256_update_ret+0x54>
    }

    if( ilen > 0 )
100086b8:	2e00      	cmp	r6, #0
100086ba:	d005      	beq.n	100086c8 <mbedtls_sha256_update_ret+0x7c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
100086bc:	1c38      	adds	r0, r7, #0
100086be:	3028      	adds	r0, #40	; 0x28
100086c0:	1820      	adds	r0, r4, r0
100086c2:	1c32      	adds	r2, r6, #0
100086c4:	f004 f971 	bl	1000c9aa <memcpy>

    return( 0 );
100086c8:	2000      	movs	r0, #0
}
100086ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100086cc <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
100086cc:	223f      	movs	r2, #63	; 0x3f
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
100086ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
100086d0:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
100086d2:	1c04      	adds	r4, r0, #0
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
100086d4:	4013      	ands	r3, r2
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
100086d6:	1c0d      	adds	r5, r1, #0
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
100086d8:	18c1      	adds	r1, r0, r3
100086da:	2080      	movs	r0, #128	; 0x80
100086dc:	3128      	adds	r1, #40	; 0x28
100086de:	7008      	strb	r0, [r1, #0]
100086e0:	1c26      	adds	r6, r4, #0
100086e2:	1c18      	adds	r0, r3, #0
100086e4:	1c5f      	adds	r7, r3, #1
100086e6:	3029      	adds	r0, #41	; 0x29
100086e8:	3628      	adds	r6, #40	; 0x28

    if( used <= 56 )
100086ea:	2f38      	cmp	r7, #56	; 0x38
100086ec:	d804      	bhi.n	100086f8 <mbedtls_sha256_finish_ret+0x2c>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
100086ee:	3a08      	subs	r2, #8
100086f0:	1ad2      	subs	r2, r2, r3
100086f2:	1820      	adds	r0, r4, r0
100086f4:	2100      	movs	r1, #0
100086f6:	e00c      	b.n	10008712 <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
100086f8:	1ad2      	subs	r2, r2, r3
100086fa:	2100      	movs	r1, #0
100086fc:	1820      	adds	r0, r4, r0
100086fe:	f004 f95d 	bl	1000c9bc <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
10008702:	1c31      	adds	r1, r6, #0
10008704:	1c20      	adds	r0, r4, #0
10008706:	f7ff fb11 	bl	10007d2c <mbedtls_internal_sha256_process>
1000870a:	1e01      	subs	r1, r0, #0
1000870c:	d17e      	bne.n	1000880c <mbedtls_sha256_finish_ret+0x140>
            return( ret );

        memset( ctx->buffer, 0, 56 );
1000870e:	1c30      	adds	r0, r6, #0
10008710:	2238      	movs	r2, #56	; 0x38
10008712:	f004 f953 	bl	1000c9bc <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
10008716:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
10008718:	6862      	ldr	r2, [r4, #4]
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
1000871a:	0f59      	lsrs	r1, r3, #29
         | ( ctx->total[1] <<  3 );
1000871c:	00d2      	lsls	r2, r2, #3
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
1000871e:	430a      	orrs	r2, r1
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
10008720:	1c21      	adds	r1, r4, #0
10008722:	0e10      	lsrs	r0, r2, #24
10008724:	3160      	adds	r1, #96	; 0x60
10008726:	7008      	strb	r0, [r1, #0]
10008728:	0c10      	lsrs	r0, r2, #16
1000872a:	7048      	strb	r0, [r1, #1]
1000872c:	70ca      	strb	r2, [r1, #3]
1000872e:	0a10      	lsrs	r0, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
10008730:	1c22      	adds	r2, r4, #0
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
10008732:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
10008734:	7088      	strb	r0, [r1, #2]
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
10008736:	3264      	adds	r2, #100	; 0x64
10008738:	0e19      	lsrs	r1, r3, #24
1000873a:	7011      	strb	r1, [r2, #0]
1000873c:	0c19      	lsrs	r1, r3, #16
1000873e:	7051      	strb	r1, [r2, #1]
10008740:	0a19      	lsrs	r1, r3, #8
10008742:	7091      	strb	r1, [r2, #2]
10008744:	70d3      	strb	r3, [r2, #3]

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
10008746:	1c20      	adds	r0, r4, #0
10008748:	1c31      	adds	r1, r6, #0
1000874a:	f7ff faef 	bl	10007d2c <mbedtls_internal_sha256_process>
1000874e:	1e02      	subs	r2, r0, #0
10008750:	d15c      	bne.n	1000880c <mbedtls_sha256_finish_ret+0x140>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
10008752:	68a3      	ldr	r3, [r4, #8]
10008754:	0e1b      	lsrs	r3, r3, #24
10008756:	702b      	strb	r3, [r5, #0]
10008758:	68a3      	ldr	r3, [r4, #8]
1000875a:	0c1b      	lsrs	r3, r3, #16
1000875c:	706b      	strb	r3, [r5, #1]
1000875e:	68a3      	ldr	r3, [r4, #8]
10008760:	0a1b      	lsrs	r3, r3, #8
10008762:	70ab      	strb	r3, [r5, #2]
10008764:	7a23      	ldrb	r3, [r4, #8]
10008766:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
10008768:	68e3      	ldr	r3, [r4, #12]
1000876a:	0e1b      	lsrs	r3, r3, #24
1000876c:	712b      	strb	r3, [r5, #4]
1000876e:	68e3      	ldr	r3, [r4, #12]
10008770:	0c1b      	lsrs	r3, r3, #16
10008772:	716b      	strb	r3, [r5, #5]
10008774:	68e3      	ldr	r3, [r4, #12]
10008776:	0a1b      	lsrs	r3, r3, #8
10008778:	71ab      	strb	r3, [r5, #6]
1000877a:	7b23      	ldrb	r3, [r4, #12]
1000877c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
1000877e:	6923      	ldr	r3, [r4, #16]
10008780:	0e1b      	lsrs	r3, r3, #24
10008782:	722b      	strb	r3, [r5, #8]
10008784:	6923      	ldr	r3, [r4, #16]
10008786:	0c1b      	lsrs	r3, r3, #16
10008788:	726b      	strb	r3, [r5, #9]
1000878a:	6923      	ldr	r3, [r4, #16]
1000878c:	0a1b      	lsrs	r3, r3, #8
1000878e:	72ab      	strb	r3, [r5, #10]
10008790:	7c23      	ldrb	r3, [r4, #16]
10008792:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
10008794:	6963      	ldr	r3, [r4, #20]
10008796:	0e1b      	lsrs	r3, r3, #24
10008798:	732b      	strb	r3, [r5, #12]
1000879a:	6963      	ldr	r3, [r4, #20]
1000879c:	0c1b      	lsrs	r3, r3, #16
1000879e:	736b      	strb	r3, [r5, #13]
100087a0:	6963      	ldr	r3, [r4, #20]
100087a2:	0a1b      	lsrs	r3, r3, #8
100087a4:	73ab      	strb	r3, [r5, #14]
100087a6:	7d23      	ldrb	r3, [r4, #20]
100087a8:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
100087aa:	69a3      	ldr	r3, [r4, #24]
100087ac:	0e1b      	lsrs	r3, r3, #24
100087ae:	742b      	strb	r3, [r5, #16]
100087b0:	69a3      	ldr	r3, [r4, #24]
100087b2:	0c1b      	lsrs	r3, r3, #16
100087b4:	746b      	strb	r3, [r5, #17]
100087b6:	69a3      	ldr	r3, [r4, #24]
100087b8:	0a1b      	lsrs	r3, r3, #8
100087ba:	74ab      	strb	r3, [r5, #18]
100087bc:	7e23      	ldrb	r3, [r4, #24]
100087be:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
100087c0:	69e3      	ldr	r3, [r4, #28]
100087c2:	0e1b      	lsrs	r3, r3, #24
100087c4:	752b      	strb	r3, [r5, #20]
100087c6:	69e3      	ldr	r3, [r4, #28]
100087c8:	0c1b      	lsrs	r3, r3, #16
100087ca:	756b      	strb	r3, [r5, #21]
100087cc:	69e3      	ldr	r3, [r4, #28]
100087ce:	0a1b      	lsrs	r3, r3, #8
100087d0:	75ab      	strb	r3, [r5, #22]
100087d2:	7f23      	ldrb	r3, [r4, #28]
100087d4:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
100087d6:	6a23      	ldr	r3, [r4, #32]
100087d8:	0e1b      	lsrs	r3, r3, #24
100087da:	762b      	strb	r3, [r5, #24]
100087dc:	6a23      	ldr	r3, [r4, #32]
100087de:	0c1b      	lsrs	r3, r3, #16
100087e0:	766b      	strb	r3, [r5, #25]
100087e2:	6a23      	ldr	r3, [r4, #32]
100087e4:	0a1b      	lsrs	r3, r3, #8
100087e6:	76ab      	strb	r3, [r5, #26]
100087e8:	6a23      	ldr	r3, [r4, #32]
100087ea:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
100087ec:	6ea0      	ldr	r0, [r4, #104]	; 0x68
100087ee:	2800      	cmp	r0, #0
100087f0:	d10b      	bne.n	1000880a <mbedtls_sha256_finish_ret+0x13e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
100087f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
100087f4:	0e1b      	lsrs	r3, r3, #24
100087f6:	772b      	strb	r3, [r5, #28]
100087f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
100087fa:	0c1b      	lsrs	r3, r3, #16
100087fc:	776b      	strb	r3, [r5, #29]
100087fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
10008800:	0a1b      	lsrs	r3, r3, #8
10008802:	77ab      	strb	r3, [r5, #30]
10008804:	6a63      	ldr	r3, [r4, #36]	; 0x24
10008806:	77eb      	strb	r3, [r5, #31]
10008808:	e000      	b.n	1000880c <mbedtls_sha256_finish_ret+0x140>

    return( 0 );
1000880a:	1c10      	adds	r0, r2, #0
}
1000880c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000880e <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
1000880e:	b5f0      	push	{r4, r5, r6, r7, lr}
10008810:	1c1c      	adds	r4, r3, #0
10008812:	b09d      	sub	sp, #116	; 0x74
10008814:	1c07      	adds	r7, r0, #0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
10008816:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
10008818:	1c0e      	adds	r6, r1, #0
1000881a:	1c15      	adds	r5, r2, #0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
1000881c:	f7ff fa2c 	bl	10007c78 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
10008820:	1c21      	adds	r1, r4, #0
10008822:	a801      	add	r0, sp, #4
10008824:	f7ff fa3a 	bl	10007c9c <mbedtls_sha256_starts_ret>
10008828:	1e04      	subs	r4, r0, #0
1000882a:	d10b      	bne.n	10008844 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
1000882c:	a801      	add	r0, sp, #4
1000882e:	1c39      	adds	r1, r7, #0
10008830:	1c32      	adds	r2, r6, #0
10008832:	f7ff ff0b 	bl	1000864c <mbedtls_sha256_update_ret>
10008836:	1e04      	subs	r4, r0, #0
10008838:	d104      	bne.n	10008844 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
1000883a:	a801      	add	r0, sp, #4
1000883c:	1c29      	adds	r1, r5, #0
1000883e:	f7ff ff45 	bl	100086cc <mbedtls_sha256_finish_ret>
10008842:	1c04      	adds	r4, r0, #0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
10008844:	a801      	add	r0, sp, #4
10008846:	f7ff fa1d 	bl	10007c84 <mbedtls_sha256_free>

    return( ret );
}
1000884a:	1c20      	adds	r0, r4, #0
1000884c:	b01d      	add	sp, #116	; 0x74
1000884e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008850 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008850:	4b01      	ldr	r3, [pc, #4]	; (10008858 <optiga_crypt_callback+0x8>)
10008852:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008854:	4770      	bx	lr
10008856:	46c0      	nop			; (mov r8, r8)
10008858:	20002f90 	.word	0x20002f90

1000885c <example_optiga_crypt_ecc_generate_keypair>:
 * The below example demonstrates the generation of
 * ECC Key pair using #optiga_crypt_ecc_generate_keypair.
 *
 */
void example_optiga_crypt_ecc_generate_keypair(void)
{
1000885c:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
1000885e:	2712      	movs	r7, #18
 * The below example demonstrates the generation of
 * ECC Key pair using #optiga_crypt_ecc_generate_keypair.
 *
 */
void example_optiga_crypt_ecc_generate_keypair(void)
{
10008860:	b0a1      	sub	sp, #132	; 0x84
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
10008862:	ab02      	add	r3, sp, #8
10008864:	18ff      	adds	r7, r7, r3
10008866:	2364      	movs	r3, #100	; 0x64

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008868:	4d20      	ldr	r5, [pc, #128]	; (100088ec <example_optiga_crypt_ecc_generate_keypair+0x90>)
1000886a:	4c21      	ldr	r4, [pc, #132]	; (100088f0 <example_optiga_crypt_ecc_generate_keypair+0x94>)
1000886c:	4821      	ldr	r0, [pc, #132]	; (100088f4 <example_optiga_crypt_ecc_generate_keypair+0x98>)
1000886e:	1c21      	adds	r1, r4, #0
10008870:	1c2a      	adds	r2, r5, #0
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
10008872:	803b      	strh	r3, [r7, #0]

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008874:	f7fb ff60 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008878:	2000      	movs	r0, #0
1000887a:	491f      	ldr	r1, [pc, #124]	; (100088f8 <example_optiga_crypt_ecc_generate_keypair+0x9c>)
1000887c:	1c02      	adds	r2, r0, #0
1000887e:	f7f9 fbf3 	bl	10002068 <optiga_crypt_create>
10008882:	9505      	str	r5, [sp, #20]
10008884:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10008886:	d01f      	beq.n	100088c8 <example_optiga_crypt_ecc_generate_keypair+0x6c>
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008888:	2301      	movs	r3, #1
1000888a:	4d1c      	ldr	r5, [pc, #112]	; (100088fc <example_optiga_crypt_ecc_generate_keypair+0xa0>)
        optiga_key_id = OPTIGA_KEY_ID_E0F1;
1000888c:	4a1c      	ldr	r2, [pc, #112]	; (10008900 <example_optiga_crypt_ecc_generate_keypair+0xa4>)
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000888e:	802b      	strh	r3, [r5, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0F1;
10008890:	ab06      	add	r3, sp, #24
10008892:	801a      	strh	r2, [r3, #0]
        //for Session based, use OPTIGA_KEY_ID_SESSION_BASED as key id as shown below.
        //optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
        return_status = optiga_crypt_ecc_generate_keypair(me,
10008894:	9300      	str	r3, [sp, #0]
10008896:	ab07      	add	r3, sp, #28
10008898:	9301      	str	r3, [sp, #4]
1000889a:	2210      	movs	r2, #16
1000889c:	9702      	str	r7, [sp, #8]
1000889e:	2103      	movs	r1, #3
100088a0:	2300      	movs	r3, #0
100088a2:	f7f9 fd3d 	bl	10002320 <optiga_crypt_ecc_generate_keypair>
100088a6:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_SIGN,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
100088a8:	d109      	bne.n	100088be <example_optiga_crypt_ecc_generate_keypair+0x62>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100088aa:	882b      	ldrh	r3, [r5, #0]
100088ac:	2b01      	cmp	r3, #1
100088ae:	d0fc      	beq.n	100088aa <example_optiga_crypt_ecc_generate_keypair+0x4e>
        {
            //Wait until the optiga_crypt_ecc_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100088b0:	882b      	ldrh	r3, [r5, #0]
100088b2:	2b00      	cmp	r3, #0
100088b4:	d008      	beq.n	100088c8 <example_optiga_crypt_ecc_generate_keypair+0x6c>
        {
            //Key pair generation failed
            return_status = optiga_lib_status;
100088b6:	882a      	ldrh	r2, [r5, #0]
100088b8:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100088ba:	2a00      	cmp	r2, #0
100088bc:	d004      	beq.n	100088c8 <example_optiga_crypt_ecc_generate_keypair+0x6c>
100088be:	1c20      	adds	r0, r4, #0
100088c0:	4910      	ldr	r1, [pc, #64]	; (10008904 <example_optiga_crypt_ecc_generate_keypair+0xa8>)
100088c2:	f7fb ff6b 	bl	1000479c <optiga_lib_print_status>
100088c6:	e006      	b.n	100088d6 <example_optiga_crypt_ecc_generate_keypair+0x7a>
100088c8:	1c20      	adds	r0, r4, #0
100088ca:	9905      	ldr	r1, [sp, #20]
100088cc:	2200      	movs	r2, #0
100088ce:	f7fb ff65 	bl	1000479c <optiga_lib_print_status>

    if (me)
100088d2:	2e00      	cmp	r6, #0
100088d4:	d008      	beq.n	100088e8 <example_optiga_crypt_ecc_generate_keypair+0x8c>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
100088d6:	1c30      	adds	r0, r6, #0
100088d8:	f7f9 fbee 	bl	100020b8 <optiga_crypt_destroy>
100088dc:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
100088de:	d003      	beq.n	100088e8 <example_optiga_crypt_ecc_generate_keypair+0x8c>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100088e0:	1c20      	adds	r0, r4, #0
100088e2:	4908      	ldr	r1, [pc, #32]	; (10008904 <example_optiga_crypt_ecc_generate_keypair+0xa8>)
100088e4:	f7fb ff5a 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
100088e8:	b021      	add	sp, #132	; 0x84
100088ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
100088ec:	1000d2dc 	.word	0x1000d2dc
100088f0:	10010644 	.word	0x10010644
100088f4:	1001065f 	.word	0x1001065f
100088f8:	10008851 	.word	0x10008851
100088fc:	20002f90 	.word	0x20002f90
10008900:	ffffe0f1 	.word	0xffffe0f1
10008904:	10010659 	.word	0x10010659

10008908 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008908:	4b01      	ldr	r3, [pc, #4]	; (10008910 <optiga_crypt_callback+0x8>)
1000890a:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
1000890c:	4770      	bx	lr
1000890e:	46c0      	nop			; (mov r8, r8)
10008910:	20002f92 	.word	0x20002f92

10008914 <example_optiga_crypt_ecdh>:
 * The below example demonstrates the generation of
 * shared secret using #optiga_crypt_ecdh with a session based approach.
 *
 */
void example_optiga_crypt_ecdh(void)
{
10008914:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
10008916:	2612      	movs	r6, #18
 * The below example demonstrates the generation of
 * shared secret using #optiga_crypt_ecdh with a session based approach.
 *
 */
void example_optiga_crypt_ecdh(void)
{
10008918:	b0a9      	sub	sp, #164	; 0xa4
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
1000891a:	ab02      	add	r3, sp, #8
1000891c:	18f6      	adds	r6, r6, r3
1000891e:	2364      	movs	r3, #100	; 0x64

    //To store the generated shared secret as part of ECDH
    uint8_t shared_secret [32];

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008920:	4f34      	ldr	r7, [pc, #208]	; (100089f4 <example_optiga_crypt_ecdh+0xe0>)
10008922:	4c35      	ldr	r4, [pc, #212]	; (100089f8 <example_optiga_crypt_ecdh+0xe4>)
10008924:	4835      	ldr	r0, [pc, #212]	; (100089fc <example_optiga_crypt_ecdh+0xe8>)
10008926:	1c39      	adds	r1, r7, #0
10008928:	1c22      	adds	r2, r4, #0
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
1000892a:	8033      	strh	r3, [r6, #0]

    //To store the generated shared secret as part of ECDH
    uint8_t shared_secret [32];

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000892c:	f7fb ff04 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008930:	2000      	movs	r0, #0
10008932:	4933      	ldr	r1, [pc, #204]	; (10008a00 <example_optiga_crypt_ecdh+0xec>)
10008934:	1c02      	adds	r2, r0, #0
10008936:	f7f9 fb97 	bl	10002068 <optiga_crypt_create>
1000893a:	9704      	str	r7, [sp, #16]
1000893c:	1e05      	subs	r5, r0, #0
1000893e:	9405      	str	r4, [sp, #20]
        if (NULL == me)
10008940:	d046      	beq.n	100089d0 <example_optiga_crypt_ecdh+0xbc>
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage as Key Agreement
         *       - Store the Private key with in OPTIGA Session
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008942:	2401      	movs	r4, #1
10008944:	4b2f      	ldr	r3, [pc, #188]	; (10008a04 <example_optiga_crypt_ecdh+0xf0>)
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
10008946:	1c21      	adds	r1, r4, #0
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage as Key Agreement
         *       - Store the Private key with in OPTIGA Session
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008948:	801c      	strh	r4, [r3, #0]
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
1000894a:	2300      	movs	r3, #0

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
1000894c:	1c22      	adds	r2, r4, #0
         *       - Specify the Key Usage as Key Agreement
         *       - Store the Private key with in OPTIGA Session
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
1000894e:	af06      	add	r7, sp, #24
10008950:	803b      	strh	r3, [r7, #0]

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
10008952:	f7f9 fb7f 	bl	10002054 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008956:	1c22      	adds	r2, r4, #0
10008958:	1c28      	adds	r0, r5, #0
1000895a:	2102      	movs	r1, #2
1000895c:	f7f9 fb7a 	bl	10002054 <optiga_crypt_set_comms_params>
        return_status = optiga_crypt_ecc_generate_keypair(me,
10008960:	ab0f      	add	r3, sp, #60	; 0x3c
10008962:	9301      	str	r3, [sp, #4]
10008964:	2220      	movs	r2, #32
10008966:	9700      	str	r7, [sp, #0]
10008968:	9602      	str	r6, [sp, #8]
1000896a:	1c28      	adds	r0, r5, #0
1000896c:	2103      	movs	r1, #3
1000896e:	2300      	movs	r3, #0
10008970:	f7f9 fcd6 	bl	10002320 <optiga_crypt_ecc_generate_keypair>
10008974:	4c23      	ldr	r4, [pc, #140]	; (10008a04 <example_optiga_crypt_ecdh+0xf0>)
10008976:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_KEY_AGREEMENT,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
10008978:	d125      	bne.n	100089c6 <example_optiga_crypt_ecdh+0xb2>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000897a:	8823      	ldrh	r3, [r4, #0]
1000897c:	2b01      	cmp	r3, #1
1000897e:	d0fc      	beq.n	1000897a <example_optiga_crypt_ecdh+0x66>
        {
            //Wait until the optiga_crypt_ecc_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008980:	8823      	ldrh	r3, [r4, #0]
10008982:	2b00      	cmp	r3, #0
10008984:	d11b      	bne.n	100089be <example_optiga_crypt_ecdh+0xaa>
         * 3. Perform ECDH using the Peer Public key
         *       - Use ECC NIST P 256 Curve
         *       - Provide the peer public key details
         *       - Export the generated shared secret with protected I2C communication
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008986:	2601      	movs	r6, #1
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
10008988:	1c28      	adds	r0, r5, #0
1000898a:	1c31      	adds	r1, r6, #0
1000898c:	1c32      	adds	r2, r6, #0
         * 3. Perform ECDH using the Peer Public key
         *       - Use ECC NIST P 256 Curve
         *       - Provide the peer public key details
         *       - Export the generated shared secret with protected I2C communication
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000898e:	8026      	strh	r6, [r4, #0]
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
10008990:	f7f9 fb60 	bl	10002054 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008994:	1c28      	adds	r0, r5, #0
10008996:	2102      	movs	r1, #2
10008998:	1c32      	adds	r2, r6, #0
1000899a:	f7f9 fb5b 	bl	10002054 <optiga_crypt_set_comms_params>
        return_status = optiga_crypt_ecdh(me,
1000899e:	ab07      	add	r3, sp, #28
100089a0:	8839      	ldrh	r1, [r7, #0]
100089a2:	4a19      	ldr	r2, [pc, #100]	; (10008a08 <example_optiga_crypt_ecdh+0xf4>)
100089a4:	9300      	str	r3, [sp, #0]
100089a6:	1c28      	adds	r0, r5, #0
100089a8:	1c33      	adds	r3, r6, #0
100089aa:	f7f9 fd1d 	bl	100023e8 <optiga_crypt_ecdh>
100089ae:	1e02      	subs	r2, r0, #0
                                          optiga_key_id,
                                          &peer_public_key_details,
                                          TRUE,
                                          shared_secret);
        if (OPTIGA_LIB_SUCCESS != return_status)
100089b0:	d109      	bne.n	100089c6 <example_optiga_crypt_ecdh+0xb2>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100089b2:	8823      	ldrh	r3, [r4, #0]
100089b4:	2b01      	cmp	r3, #1
100089b6:	d0fc      	beq.n	100089b2 <example_optiga_crypt_ecdh+0x9e>
        {
            //Wait until the optiga_crypt_ecdh operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100089b8:	8823      	ldrh	r3, [r4, #0]
100089ba:	2b00      	cmp	r3, #0
100089bc:	d008      	beq.n	100089d0 <example_optiga_crypt_ecdh+0xbc>
        {
            //ECDH Operation failed.
            return_status = optiga_lib_status;
100089be:	8822      	ldrh	r2, [r4, #0]
100089c0:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100089c2:	2a00      	cmp	r2, #0
100089c4:	d004      	beq.n	100089d0 <example_optiga_crypt_ecdh+0xbc>
100089c6:	9804      	ldr	r0, [sp, #16]
100089c8:	4910      	ldr	r1, [pc, #64]	; (10008a0c <example_optiga_crypt_ecdh+0xf8>)
100089ca:	f7fb fee7 	bl	1000479c <optiga_lib_print_status>
100089ce:	e006      	b.n	100089de <example_optiga_crypt_ecdh+0xca>
100089d0:	9804      	ldr	r0, [sp, #16]
100089d2:	9905      	ldr	r1, [sp, #20]
100089d4:	2200      	movs	r2, #0
100089d6:	f7fb fee1 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
100089da:	2d00      	cmp	r5, #0
100089dc:	d008      	beq.n	100089f0 <example_optiga_crypt_ecdh+0xdc>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
100089de:	1c28      	adds	r0, r5, #0
100089e0:	f7f9 fb6a 	bl	100020b8 <optiga_crypt_destroy>
100089e4:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
100089e6:	d003      	beq.n	100089f0 <example_optiga_crypt_ecdh+0xdc>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100089e8:	9804      	ldr	r0, [sp, #16]
100089ea:	4908      	ldr	r1, [pc, #32]	; (10008a0c <example_optiga_crypt_ecdh+0xf8>)
100089ec:	f7fb fed6 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
100089f0:	b029      	add	sp, #164	; 0xa4
100089f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100089f4:	10010644 	.word	0x10010644
100089f8:	1000d2dc 	.word	0x1000d2dc
100089fc:	10010689 	.word	0x10010689
10008a00:	10008909 	.word	0x10008909
10008a04:	20002f92 	.word	0x20002f92
10008a08:	20001ab0 	.word	0x20001ab0
10008a0c:	10010659 	.word	0x10010659

10008a10 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008a10:	4b01      	ldr	r3, [pc, #4]	; (10008a18 <optiga_crypt_callback+0x8>)
10008a12:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008a14:	4770      	bx	lr
10008a16:	46c0      	nop			; (mov r8, r8)
10008a18:	20002f94 	.word	0x20002f94

10008a1c <example_optiga_crypt_ecdsa_sign>:
 *
 * Example for #optiga_crypt_ecdsa_sign
 *
 */
void example_optiga_crypt_ecdsa_sign(void)
{
10008a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    //To store the signture generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
10008a1e:	270e      	movs	r7, #14
 *
 * Example for #optiga_crypt_ecdsa_sign
 *
 */
void example_optiga_crypt_ecdsa_sign(void)
{
10008a20:	b09b      	sub	sp, #108	; 0x6c
    //To store the signture generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
10008a22:	ab02      	add	r3, sp, #8
10008a24:	18ff      	adds	r7, r7, r3
10008a26:	2350      	movs	r3, #80	; 0x50

    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008a28:	4d1e      	ldr	r5, [pc, #120]	; (10008aa4 <example_optiga_crypt_ecdsa_sign+0x88>)
10008a2a:	4c1f      	ldr	r4, [pc, #124]	; (10008aa8 <example_optiga_crypt_ecdsa_sign+0x8c>)
10008a2c:	481f      	ldr	r0, [pc, #124]	; (10008aac <example_optiga_crypt_ecdsa_sign+0x90>)
10008a2e:	1c21      	adds	r1, r4, #0
10008a30:	1c2a      	adds	r2, r5, #0
 */
void example_optiga_crypt_ecdsa_sign(void)
{
    //To store the signture generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
10008a32:	803b      	strh	r3, [r7, #0]

    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008a34:	f7fb fe80 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008a38:	2000      	movs	r0, #0
10008a3a:	491d      	ldr	r1, [pc, #116]	; (10008ab0 <example_optiga_crypt_ecdsa_sign+0x94>)
10008a3c:	1c02      	adds	r2, r0, #0
10008a3e:	f7f9 fb13 	bl	10002068 <optiga_crypt_create>
10008a42:	9503      	str	r5, [sp, #12]
10008a44:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10008a46:	d01b      	beq.n	10008a80 <example_optiga_crypt_ecdsa_sign+0x64>
        }

        /**
         * 2. Sign the digest using Private key from Key Store ID E0F0
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008a48:	2301      	movs	r3, #1
10008a4a:	4d1a      	ldr	r5, [pc, #104]	; (10008ab4 <example_optiga_crypt_ecdsa_sign+0x98>)
        return_status = optiga_crypt_ecdsa_sign(me,
10008a4c:	2220      	movs	r2, #32
        }

        /**
         * 2. Sign the digest using Private key from Key Store ID E0F0
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008a4e:	802b      	strh	r3, [r5, #0]
        return_status = optiga_crypt_ecdsa_sign(me,
10008a50:	ab06      	add	r3, sp, #24
10008a52:	9300      	str	r3, [sp, #0]
10008a54:	9701      	str	r7, [sp, #4]
10008a56:	4918      	ldr	r1, [pc, #96]	; (10008ab8 <example_optiga_crypt_ecdsa_sign+0x9c>)
10008a58:	4b18      	ldr	r3, [pc, #96]	; (10008abc <example_optiga_crypt_ecdsa_sign+0xa0>)
10008a5a:	f7f9 fc81 	bl	10002360 <optiga_crypt_ecdsa_sign>
10008a5e:	1e02      	subs	r2, r0, #0
                                                sizeof(digest),
                                                OPTIGA_KEY_ID_E0F0,
                                                signature,
                                                &signature_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008a60:	d109      	bne.n	10008a76 <example_optiga_crypt_ecdsa_sign+0x5a>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008a62:	882b      	ldrh	r3, [r5, #0]
10008a64:	2b01      	cmp	r3, #1
10008a66:	d0fc      	beq.n	10008a62 <example_optiga_crypt_ecdsa_sign+0x46>
        {
            //Wait until the optiga_crypt_ecdsa_sign operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008a68:	882b      	ldrh	r3, [r5, #0]
10008a6a:	2b00      	cmp	r3, #0
10008a6c:	d008      	beq.n	10008a80 <example_optiga_crypt_ecdsa_sign+0x64>
        {
            return_status = optiga_lib_status;
10008a6e:	882a      	ldrh	r2, [r5, #0]
10008a70:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008a72:	2a00      	cmp	r2, #0
10008a74:	d004      	beq.n	10008a80 <example_optiga_crypt_ecdsa_sign+0x64>
10008a76:	1c20      	adds	r0, r4, #0
10008a78:	4911      	ldr	r1, [pc, #68]	; (10008ac0 <example_optiga_crypt_ecdsa_sign+0xa4>)
10008a7a:	f7fb fe8f 	bl	1000479c <optiga_lib_print_status>
10008a7e:	e006      	b.n	10008a8e <example_optiga_crypt_ecdsa_sign+0x72>
10008a80:	1c20      	adds	r0, r4, #0
10008a82:	9903      	ldr	r1, [sp, #12]
10008a84:	2200      	movs	r2, #0
10008a86:	f7fb fe89 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
10008a8a:	2e00      	cmp	r6, #0
10008a8c:	d008      	beq.n	10008aa0 <example_optiga_crypt_ecdsa_sign+0x84>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008a8e:	1c30      	adds	r0, r6, #0
10008a90:	f7f9 fb12 	bl	100020b8 <optiga_crypt_destroy>
10008a94:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008a96:	d003      	beq.n	10008aa0 <example_optiga_crypt_ecdsa_sign+0x84>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008a98:	1c20      	adds	r0, r4, #0
10008a9a:	4909      	ldr	r1, [pc, #36]	; (10008ac0 <example_optiga_crypt_ecdsa_sign+0xa4>)
10008a9c:	f7fb fe7e 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
10008aa0:	b01b      	add	sp, #108	; 0x6c
10008aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008aa4:	1000d2dc 	.word	0x1000d2dc
10008aa8:	10010644 	.word	0x10010644
10008aac:	100106a3 	.word	0x100106a3
10008ab0:	10008a11 	.word	0x10008a11
10008ab4:	20002f94 	.word	0x20002f94
10008ab8:	20001ab8 	.word	0x20001ab8
10008abc:	0000e0f0 	.word	0x0000e0f0
10008ac0:	10010659 	.word	0x10010659

10008ac4 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008ac4:	4b01      	ldr	r3, [pc, #4]	; (10008acc <optiga_crypt_callback+0x8>)
10008ac6:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008ac8:	4770      	bx	lr
10008aca:	46c0      	nop			; (mov r8, r8)
10008acc:	20002f96 	.word	0x20002f96

10008ad0 <example_optiga_crypt_ecdsa_verify>:
 *
 * Example for #optiga_crypt_ecdsa_verify
 *
 */
void example_optiga_crypt_ecdsa_verify(void)
{
10008ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
10008ad2:	b089      	sub	sp, #36	; 0x24
    public_key_from_host_t public_key_details = {
10008ad4:	af06      	add	r7, sp, #24
10008ad6:	1c3a      	adds	r2, r7, #0
                                                };

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008ad8:	4d20      	ldr	r5, [pc, #128]	; (10008b5c <example_optiga_crypt_ecdsa_verify+0x8c>)
 * Example for #optiga_crypt_ecdsa_verify
 *
 */
void example_optiga_crypt_ecdsa_verify(void)
{
    public_key_from_host_t public_key_details = {
10008ada:	4b21      	ldr	r3, [pc, #132]	; (10008b60 <example_optiga_crypt_ecdsa_verify+0x90>)
                                                };

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008adc:	4c21      	ldr	r4, [pc, #132]	; (10008b64 <example_optiga_crypt_ecdsa_verify+0x94>)
 * Example for #optiga_crypt_ecdsa_verify
 *
 */
void example_optiga_crypt_ecdsa_verify(void)
{
    public_key_from_host_t public_key_details = {
10008ade:	cb03      	ldmia	r3!, {r0, r1}
10008ae0:	c203      	stmia	r2!, {r0, r1}
                                                };

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008ae2:	4821      	ldr	r0, [pc, #132]	; (10008b68 <example_optiga_crypt_ecdsa_verify+0x98>)
10008ae4:	1c21      	adds	r1, r4, #0
10008ae6:	1c2a      	adds	r2, r5, #0
10008ae8:	f7fb fe26 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008aec:	2000      	movs	r0, #0
10008aee:	491f      	ldr	r1, [pc, #124]	; (10008b6c <example_optiga_crypt_ecdsa_verify+0x9c>)
10008af0:	1c02      	adds	r2, r0, #0
10008af2:	f7f9 fab9 	bl	10002068 <optiga_crypt_create>
10008af6:	9505      	str	r5, [sp, #20]
10008af8:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10008afa:	d01c      	beq.n	10008b36 <example_optiga_crypt_ecdsa_verify+0x66>
        }

        /**
         * 2. Verify ECDSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008afc:	2301      	movs	r3, #1
        return_status = optiga_crypt_ecdsa_verify (me,
10008afe:	2242      	movs	r2, #66	; 0x42
        }

        /**
         * 2. Verify ECDSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008b00:	4d1b      	ldr	r5, [pc, #108]	; (10008b70 <example_optiga_crypt_ecdsa_verify+0xa0>)
        return_status = optiga_crypt_ecdsa_verify (me,
10008b02:	491c      	ldr	r1, [pc, #112]	; (10008b74 <example_optiga_crypt_ecdsa_verify+0xa4>)
        }

        /**
         * 2. Verify ECDSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008b04:	802b      	strh	r3, [r5, #0]
        return_status = optiga_crypt_ecdsa_verify (me,
10008b06:	9200      	str	r2, [sp, #0]
10008b08:	9301      	str	r3, [sp, #4]
10008b0a:	3a22      	subs	r2, #34	; 0x22
10008b0c:	9702      	str	r7, [sp, #8]
10008b0e:	4b1a      	ldr	r3, [pc, #104]	; (10008b78 <example_optiga_crypt_ecdsa_verify+0xa8>)
10008b10:	f7f9 fc44 	bl	1000239c <optiga_crypt_ecdsa_verify>
10008b14:	1e02      	subs	r2, r0, #0
                                                   signature,
                                                   sizeof(signature),
                                                   OPTIGA_CRYPT_HOST_DATA,
                                                   &public_key_details);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008b16:	d109      	bne.n	10008b2c <example_optiga_crypt_ecdsa_verify+0x5c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008b18:	882b      	ldrh	r3, [r5, #0]
10008b1a:	2b01      	cmp	r3, #1
10008b1c:	d0fc      	beq.n	10008b18 <example_optiga_crypt_ecdsa_verify+0x48>
        {
            //Wait until the optiga_crypt_ecdsa_verify operation is completed
        }

        if ((OPTIGA_LIB_SUCCESS != optiga_lib_status))
10008b1e:	882b      	ldrh	r3, [r5, #0]
10008b20:	2b00      	cmp	r3, #0
10008b22:	d008      	beq.n	10008b36 <example_optiga_crypt_ecdsa_verify+0x66>
        {
            //Signature verification failed.
            return_status = optiga_lib_status;
10008b24:	882a      	ldrh	r2, [r5, #0]
10008b26:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008b28:	2a00      	cmp	r2, #0
10008b2a:	d004      	beq.n	10008b36 <example_optiga_crypt_ecdsa_verify+0x66>
10008b2c:	1c20      	adds	r0, r4, #0
10008b2e:	4913      	ldr	r1, [pc, #76]	; (10008b7c <example_optiga_crypt_ecdsa_verify+0xac>)
10008b30:	f7fb fe34 	bl	1000479c <optiga_lib_print_status>
10008b34:	e006      	b.n	10008b44 <example_optiga_crypt_ecdsa_verify+0x74>
10008b36:	1c20      	adds	r0, r4, #0
10008b38:	9905      	ldr	r1, [sp, #20]
10008b3a:	2200      	movs	r2, #0
10008b3c:	f7fb fe2e 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
10008b40:	2e00      	cmp	r6, #0
10008b42:	d008      	beq.n	10008b56 <example_optiga_crypt_ecdsa_verify+0x86>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008b44:	1c30      	adds	r0, r6, #0
10008b46:	f7f9 fab7 	bl	100020b8 <optiga_crypt_destroy>
10008b4a:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008b4c:	d003      	beq.n	10008b56 <example_optiga_crypt_ecdsa_verify+0x86>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008b4e:	1c20      	adds	r0, r4, #0
10008b50:	490a      	ldr	r1, [pc, #40]	; (10008b7c <example_optiga_crypt_ecdsa_verify+0xac>)
10008b52:	f7fb fe23 	bl	1000479c <optiga_lib_print_status>
        }
    }
    
}
10008b56:	b009      	add	sp, #36	; 0x24
10008b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008b5a:	46c0      	nop			; (mov r8, r8)
10008b5c:	1000d2dc 	.word	0x1000d2dc
10008b60:	100106c4 	.word	0x100106c4
10008b64:	10010644 	.word	0x10010644
10008b68:	100106cc 	.word	0x100106cc
10008b6c:	10008ac5 	.word	0x10008ac5
10008b70:	20002f96 	.word	0x20002f96
10008b74:	20001b5e 	.word	0x20001b5e
10008b78:	20001ad8 	.word	0x20001ad8
10008b7c:	10010659 	.word	0x10010659

10008b80 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008b80:	4b01      	ldr	r3, [pc, #4]	; (10008b88 <optiga_crypt_callback+0x8>)
10008b82:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008b84:	4770      	bx	lr
10008b86:	46c0      	nop			; (mov r8, r8)
10008b88:	20002f98 	.word	0x20002f98

10008b8c <example_optiga_crypt_hash>:
 * Example for #optiga_crypt_hash_start, #optiga_crypt_hash_update,
 * #optiga_crypt_hash_finalize
 *
 */
void example_optiga_crypt_hash(void)
{
10008b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b8e:	b0b9      	sub	sp, #228	; 0xe4
    optiga_lib_status_t return_status = 0;

    uint8_t hash_context_buffer [130];
    optiga_hash_context_t hash_context;

    uint8_t data_to_hash [] = {"OPITGA, Infineon Technologies AG"};
10008b90:	af0e      	add	r7, sp, #56	; 0x38
10008b92:	4934      	ldr	r1, [pc, #208]	; (10008c64 <example_optiga_crypt_hash+0xd8>)
10008b94:	2221      	movs	r2, #33	; 0x21
10008b96:	1c38      	adds	r0, r7, #0
10008b98:	f003 ff07 	bl	1000c9aa <memcpy>
    hash_data_from_host_t hash_data_host;

    uint8_t digest [32];

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008b9c:	4c32      	ldr	r4, [pc, #200]	; (10008c68 <example_optiga_crypt_hash+0xdc>)
10008b9e:	4d33      	ldr	r5, [pc, #204]	; (10008c6c <example_optiga_crypt_hash+0xe0>)
10008ba0:	4833      	ldr	r0, [pc, #204]	; (10008c70 <example_optiga_crypt_hash+0xe4>)
10008ba2:	1c29      	adds	r1, r5, #0
10008ba4:	1c22      	adds	r2, r4, #0
10008ba6:	f7fb fdc7 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008baa:	2000      	movs	r0, #0
10008bac:	4931      	ldr	r1, [pc, #196]	; (10008c74 <example_optiga_crypt_hash+0xe8>)
10008bae:	1c02      	adds	r2, r0, #0
10008bb0:	f7f9 fa5a 	bl	10002068 <optiga_crypt_create>
10008bb4:	9401      	str	r4, [sp, #4]
10008bb6:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10008bb8:	d042      	beq.n	10008c40 <example_optiga_crypt_hash+0xb4>
        }

        /**
         * 2. Initialize the Hash context
         */
        OPTIGA_HASH_CONTEXT_INIT(hash_context,hash_context_buffer,  \
10008bba:	ab17      	add	r3, sp, #92	; 0x5c
10008bbc:	9302      	str	r3, [sp, #8]
10008bbe:	2382      	movs	r3, #130	; 0x82
10008bc0:	aa02      	add	r2, sp, #8
10008bc2:	8093      	strh	r3, [r2, #4]
                                 sizeof(hash_context_buffer),(uint8_t)OPTIGA_HASH_TYPE_SHA_256);

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008bc4:	4c2c      	ldr	r4, [pc, #176]	; (10008c78 <example_optiga_crypt_hash+0xec>)
        }

        /**
         * 2. Initialize the Hash context
         */
        OPTIGA_HASH_CONTEXT_INIT(hash_context,hash_context_buffer,  \
10008bc6:	3360      	adds	r3, #96	; 0x60
10008bc8:	7193      	strb	r3, [r2, #6]
        optiga_lib_status = OPTIGA_LIB_BUSY;

        /**
         * 3. Initialize the hashing context at OPTIGA
         */
        return_status = optiga_crypt_hash_start(me, &hash_context);
10008bca:	1c11      	adds	r1, r2, #0
         * 2. Initialize the Hash context
         */
        OPTIGA_HASH_CONTEXT_INIT(hash_context,hash_context_buffer,  \
                                 sizeof(hash_context_buffer),(uint8_t)OPTIGA_HASH_TYPE_SHA_256);

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008bcc:	3be1      	subs	r3, #225	; 0xe1
10008bce:	8023      	strh	r3, [r4, #0]

        /**
         * 3. Initialize the hashing context at OPTIGA
         */
        return_status = optiga_crypt_hash_start(me, &hash_context);
10008bd0:	f7f9 fab0 	bl	10002134 <optiga_crypt_hash_start>
10008bd4:	1e02      	subs	r2, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_status)
10008bd6:	d12e      	bne.n	10008c36 <example_optiga_crypt_hash+0xaa>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008bd8:	8823      	ldrh	r3, [r4, #0]
10008bda:	2b01      	cmp	r3, #1
10008bdc:	d0fc      	beq.n	10008bd8 <example_optiga_crypt_hash+0x4c>
        {
            //Wait until the optiga_crypt_hash_start operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008bde:	8823      	ldrh	r3, [r4, #0]
10008be0:	2b00      	cmp	r3, #0
10008be2:	d124      	bne.n	10008c2e <example_optiga_crypt_hash+0xa2>

        /**
         * 4. Continue hashing the data
         */
        hash_data_host.buffer = data_to_hash;
        hash_data_host.length = sizeof(data_to_hash);
10008be4:	2321      	movs	r3, #33	; 0x21

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008be6:	2201      	movs	r2, #1

        /**
         * 4. Continue hashing the data
         */
        hash_data_host.buffer = data_to_hash;
        hash_data_host.length = sizeof(data_to_hash);
10008be8:	9305      	str	r3, [sp, #20]

        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_crypt_hash_update(me,
10008bea:	1c30      	adds	r0, r6, #0
10008bec:	a902      	add	r1, sp, #8
10008bee:	ab04      	add	r3, sp, #16
         * 4. Continue hashing the data
         */
        hash_data_host.buffer = data_to_hash;
        hash_data_host.length = sizeof(data_to_hash);

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008bf0:	8022      	strh	r2, [r4, #0]
        }

        /**
         * 4. Continue hashing the data
         */
        hash_data_host.buffer = data_to_hash;
10008bf2:	9704      	str	r7, [sp, #16]
        hash_data_host.length = sizeof(data_to_hash);

        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_crypt_hash_update(me,
10008bf4:	f7f9 fae8 	bl	100021c8 <optiga_crypt_hash_update>
10008bf8:	1e02      	subs	r2, r0, #0
                                                 &hash_context,
                                                 OPTIGA_CRYPT_HOST_DATA,
                                                 &hash_data_host);
        if (OPTIGA_LIB_SUCCESS != return_status)
10008bfa:	d11c      	bne.n	10008c36 <example_optiga_crypt_hash+0xaa>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008bfc:	4b1e      	ldr	r3, [pc, #120]	; (10008c78 <example_optiga_crypt_hash+0xec>)
10008bfe:	881a      	ldrh	r2, [r3, #0]
10008c00:	1c1c      	adds	r4, r3, #0
10008c02:	2a01      	cmp	r2, #1
10008c04:	d0fa      	beq.n	10008bfc <example_optiga_crypt_hash+0x70>
        {
            //Wait until the optiga_crypt_hash_update operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008c06:	881a      	ldrh	r2, [r3, #0]
10008c08:	2a00      	cmp	r2, #0
10008c0a:	d001      	beq.n	10008c10 <example_optiga_crypt_hash+0x84>
        {
            return_status = optiga_lib_status;
10008c0c:	881a      	ldrh	r2, [r3, #0]
10008c0e:	e00f      	b.n	10008c30 <example_optiga_crypt_hash+0xa4>
        }

        /**
         * 5. Finalize the hash
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008c10:	2301      	movs	r3, #1
        return_status = optiga_crypt_hash_finalize(me,
10008c12:	aa06      	add	r2, sp, #24
10008c14:	1c30      	adds	r0, r6, #0
10008c16:	a902      	add	r1, sp, #8
        }

        /**
         * 5. Finalize the hash
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008c18:	8023      	strh	r3, [r4, #0]
        return_status = optiga_crypt_hash_finalize(me,
10008c1a:	f7f9 fb2f 	bl	1000227c <optiga_crypt_hash_finalize>
10008c1e:	1e02      	subs	r2, r0, #0
                                                   &hash_context,
                                                   digest);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008c20:	d109      	bne.n	10008c36 <example_optiga_crypt_hash+0xaa>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008c22:	8823      	ldrh	r3, [r4, #0]
10008c24:	2b01      	cmp	r3, #1
10008c26:	d0fc      	beq.n	10008c22 <example_optiga_crypt_hash+0x96>
        {
            //Wait until the optiga_crypt_hash_finalize operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008c28:	8823      	ldrh	r3, [r4, #0]
10008c2a:	2b00      	cmp	r3, #0
10008c2c:	d008      	beq.n	10008c40 <example_optiga_crypt_hash+0xb4>
        {
            return_status = optiga_lib_status;
10008c2e:	8822      	ldrh	r2, [r4, #0]
10008c30:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008c32:	2a00      	cmp	r2, #0
10008c34:	d004      	beq.n	10008c40 <example_optiga_crypt_hash+0xb4>
10008c36:	1c28      	adds	r0, r5, #0
10008c38:	4910      	ldr	r1, [pc, #64]	; (10008c7c <example_optiga_crypt_hash+0xf0>)
10008c3a:	f7fb fdaf 	bl	1000479c <optiga_lib_print_status>
10008c3e:	e006      	b.n	10008c4e <example_optiga_crypt_hash+0xc2>
10008c40:	1c28      	adds	r0, r5, #0
10008c42:	9901      	ldr	r1, [sp, #4]
10008c44:	2200      	movs	r2, #0
10008c46:	f7fb fda9 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
10008c4a:	2e00      	cmp	r6, #0
10008c4c:	d008      	beq.n	10008c60 <example_optiga_crypt_hash+0xd4>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008c4e:	1c30      	adds	r0, r6, #0
10008c50:	f7f9 fa32 	bl	100020b8 <optiga_crypt_destroy>
10008c54:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008c56:	d003      	beq.n	10008c60 <example_optiga_crypt_hash+0xd4>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008c58:	1c28      	adds	r0, r5, #0
10008c5a:	4908      	ldr	r1, [pc, #32]	; (10008c7c <example_optiga_crypt_hash+0xf0>)
10008c5c:	f7fb fd9e 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
10008c60:	b039      	add	sp, #228	; 0xe4
10008c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008c64:	100106ee 	.word	0x100106ee
10008c68:	1000d2dc 	.word	0x1000d2dc
10008c6c:	10010644 	.word	0x10010644
10008c70:	1001070f 	.word	0x1001070f
10008c74:	10008b81 	.word	0x10008b81
10008c78:	20002f98 	.word	0x20002f98
10008c7c:	10010659 	.word	0x10010659

10008c80 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008c80:	4b01      	ldr	r3, [pc, #4]	; (10008c88 <optiga_crypt_callback+0x8>)
10008c82:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008c84:	4770      	bx	lr
10008c86:	46c0      	nop			; (mov r8, r8)
10008c88:	20002f9a 	.word	0x20002f9a

10008c8c <example_optiga_crypt_random>:
 *
 * Example for #optiga_crypt_random
 *
 */
void example_optiga_crypt_random(void)
{
10008c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t random_data_buffer [32];
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008c8e:	4c20      	ldr	r4, [pc, #128]	; (10008d10 <example_optiga_crypt_random+0x84>)
10008c90:	4f20      	ldr	r7, [pc, #128]	; (10008d14 <example_optiga_crypt_random+0x88>)
 *
 * Example for #optiga_crypt_random
 *
 */
void example_optiga_crypt_random(void)
{
10008c92:	b089      	sub	sp, #36	; 0x24
    uint8_t random_data_buffer [32];
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008c94:	4820      	ldr	r0, [pc, #128]	; (10008d18 <example_optiga_crypt_random+0x8c>)
10008c96:	1c21      	adds	r1, r4, #0
10008c98:	1c3a      	adds	r2, r7, #0
10008c9a:	f7fb fd4d 	bl	10004738 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008c9e:	2000      	movs	r0, #0
10008ca0:	491e      	ldr	r1, [pc, #120]	; (10008d1c <example_optiga_crypt_random+0x90>)
10008ca2:	1c02      	adds	r2, r0, #0
10008ca4:	f7f9 f9e0 	bl	10002068 <optiga_crypt_create>
10008ca8:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10008caa:	d01f      	beq.n	10008cec <example_optiga_crypt_random+0x60>

        /**
         * 2. Generate Random -
         *       - Specify the Random type as TRNG
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008cac:	2301      	movs	r3, #1
10008cae:	4d1c      	ldr	r5, [pc, #112]	; (10008d20 <example_optiga_crypt_random+0x94>)

        return_status = optiga_crypt_random(me,
10008cb0:	466a      	mov	r2, sp

        /**
         * 2. Generate Random -
         *       - Specify the Random type as TRNG
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008cb2:	802b      	strh	r3, [r5, #0]

        return_status = optiga_crypt_random(me,
10008cb4:	2100      	movs	r1, #0
10008cb6:	331f      	adds	r3, #31
10008cb8:	f7f9 fa16 	bl	100020e8 <optiga_crypt_random>
10008cbc:	1e02      	subs	r2, r0, #0
                                            OPTIGA_RNG_TYPE_TRNG,
                                            random_data_buffer,
                                            sizeof(random_data_buffer));

        if (OPTIGA_LIB_SUCCESS != return_status)
10008cbe:	d110      	bne.n	10008ce2 <example_optiga_crypt_random+0x56>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008cc0:	882b      	ldrh	r3, [r5, #0]
10008cc2:	2b01      	cmp	r3, #1
10008cc4:	d0fc      	beq.n	10008cc0 <example_optiga_crypt_random+0x34>
        {
            //Wait until the optiga_crypt_random operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008cc6:	882b      	ldrh	r3, [r5, #0]
10008cc8:	2b00      	cmp	r3, #0
10008cca:	d004      	beq.n	10008cd6 <example_optiga_crypt_random+0x4a>
        {
            return_status = optiga_lib_status;
10008ccc:	882a      	ldrh	r2, [r5, #0]
10008cce:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;

        OPTIGA_EXAMPLE_LOG_HEX_DATA(random_data_buffer, sizeof(random_data_buffer));

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008cd0:	2a00      	cmp	r2, #0
10008cd2:	d106      	bne.n	10008ce2 <example_optiga_crypt_random+0x56>
10008cd4:	e00a      	b.n	10008cec <example_optiga_crypt_random+0x60>
            return_status = optiga_lib_status;
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

        OPTIGA_EXAMPLE_LOG_HEX_DATA(random_data_buffer, sizeof(random_data_buffer));
10008cd6:	4668      	mov	r0, sp
10008cd8:	2120      	movs	r1, #32
10008cda:	4a12      	ldr	r2, [pc, #72]	; (10008d24 <example_optiga_crypt_random+0x98>)
10008cdc:	f7fb fdbe 	bl	1000485c <optiga_lib_print_array_hex_format>
10008ce0:	e004      	b.n	10008cec <example_optiga_crypt_random+0x60>

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008ce2:	1c20      	adds	r0, r4, #0
10008ce4:	4910      	ldr	r1, [pc, #64]	; (10008d28 <example_optiga_crypt_random+0x9c>)
10008ce6:	f7fb fd59 	bl	1000479c <optiga_lib_print_status>
10008cea:	e006      	b.n	10008cfa <example_optiga_crypt_random+0x6e>
10008cec:	1c20      	adds	r0, r4, #0
10008cee:	1c39      	adds	r1, r7, #0
10008cf0:	2200      	movs	r2, #0
10008cf2:	f7fb fd53 	bl	1000479c <optiga_lib_print_status>
    if (me)
10008cf6:	2e00      	cmp	r6, #0
10008cf8:	d008      	beq.n	10008d0c <example_optiga_crypt_random+0x80>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008cfa:	1c30      	adds	r0, r6, #0
10008cfc:	f7f9 f9dc 	bl	100020b8 <optiga_crypt_destroy>
10008d00:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008d02:	d003      	beq.n	10008d0c <example_optiga_crypt_random+0x80>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008d04:	1c20      	adds	r0, r4, #0
10008d06:	4908      	ldr	r1, [pc, #32]	; (10008d28 <example_optiga_crypt_random+0x9c>)
10008d08:	f7fb fd48 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
10008d0c:	b009      	add	sp, #36	; 0x24
10008d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008d10:	10010644 	.word	0x10010644
10008d14:	1000d2dc 	.word	0x1000d2dc
10008d18:	10010729 	.word	0x10010729
10008d1c:	10008c81 	.word	0x10008c81
10008d20:	20002f9a 	.word	0x20002f9a
10008d24:	1000d588 	.word	0x1000d588
10008d28:	10010659 	.word	0x10010659

10008d2c <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008d2c:	4b01      	ldr	r3, [pc, #4]	; (10008d34 <optiga_crypt_callback+0x8>)
10008d2e:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008d30:	4770      	bx	lr
10008d32:	46c0      	nop			; (mov r8, r8)
10008d34:	20002f9c 	.word	0x20002f9c

10008d38 <example_optiga_crypt_rsa_decrypt_and_export>:
 * The below example demonstrates RSA decryption
 * #optiga_crypt_rsa_decrypt_and_export where message is provided by user
 *
 */
void example_optiga_crypt_rsa_decrypt_and_export(void)
{
10008d38:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
10008d3a:	b0ff      	sub	sp, #508	; 0x1fc
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;
    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;
    uint8_t encrypted_message[128];
    uint8_t message[] = {"RSA PKCS1_v1.5 Encryption of user message"};
10008d3c:	494a      	ldr	r1, [pc, #296]	; (10008e68 <example_optiga_crypt_rsa_decrypt_and_export+0x130>)
10008d3e:	222a      	movs	r2, #42	; 0x2a
10008d40:	a80b      	add	r0, sp, #44	; 0x2c
10008d42:	f003 fe32 	bl	1000c9aa <memcpy>
    uint16_t message_length = sizeof(message);
    uint16_t encrypted_message_length = sizeof(encrypted_message);
10008d46:	466a      	mov	r2, sp
10008d48:	2380      	movs	r3, #128	; 0x80
    uint8_t public_key [150];
    uint8_t decrypted_message[150];
    uint16_t decrypted_message_length = sizeof(decrypted_message);
    uint16_t public_key_length = sizeof(public_key);
10008d4a:	2622      	movs	r6, #34	; 0x22
    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;
    uint8_t encrypted_message[128];
    uint8_t message[] = {"RSA PKCS1_v1.5 Encryption of user message"};
    uint16_t message_length = sizeof(message);
    uint16_t encrypted_message_length = sizeof(encrypted_message);
10008d4c:	83d3      	strh	r3, [r2, #30]
    uint8_t public_key [150];
    uint8_t decrypted_message[150];
    uint16_t decrypted_message_length = sizeof(decrypted_message);
10008d4e:	3316      	adds	r3, #22
10008d50:	8413      	strh	r3, [r2, #32]
    uint16_t public_key_length = sizeof(public_key);

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008d52:	4846      	ldr	r0, [pc, #280]	; (10008e6c <example_optiga_crypt_rsa_decrypt_and_export+0x134>)
10008d54:	4946      	ldr	r1, [pc, #280]	; (10008e70 <example_optiga_crypt_rsa_decrypt_and_export+0x138>)
10008d56:	4a47      	ldr	r2, [pc, #284]	; (10008e74 <example_optiga_crypt_rsa_decrypt_and_export+0x13c>)
    uint16_t message_length = sizeof(message);
    uint16_t encrypted_message_length = sizeof(encrypted_message);
    uint8_t public_key [150];
    uint8_t decrypted_message[150];
    uint16_t decrypted_message_length = sizeof(decrypted_message);
    uint16_t public_key_length = sizeof(public_key);
10008d58:	446e      	add	r6, sp
10008d5a:	8033      	strh	r3, [r6, #0]

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008d5c:	f7fb fcec 	bl	10004738 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008d60:	2000      	movs	r0, #0
10008d62:	4945      	ldr	r1, [pc, #276]	; (10008e78 <example_optiga_crypt_rsa_decrypt_and_export+0x140>)
10008d64:	1c02      	adds	r2, r0, #0
10008d66:	f7f9 f97f 	bl	10002068 <optiga_crypt_create>
10008d6a:	1e04      	subs	r4, r0, #0
        if (NULL == me)
10008d6c:	d069      	beq.n	10008e42 <example_optiga_crypt_rsa_decrypt_and_export+0x10a>
         *       - Use 1024 or 2048 bit RSA key
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008d6e:	2301      	movs	r3, #1
10008d70:	4d42      	ldr	r5, [pc, #264]	; (10008e7c <example_optiga_crypt_rsa_decrypt_and_export+0x144>)
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10008d72:	4a43      	ldr	r2, [pc, #268]	; (10008e80 <example_optiga_crypt_rsa_decrypt_and_export+0x148>)
         *       - Use 1024 or 2048 bit RSA key
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008d74:	802b      	strh	r3, [r5, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
        return_status = optiga_crypt_rsa_generate_keypair(me,
10008d76:	af36      	add	r7, sp, #216	; 0xd8
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10008d78:	ab07      	add	r3, sp, #28
10008d7a:	801a      	strh	r2, [r3, #0]
        return_status = optiga_crypt_rsa_generate_keypair(me,
10008d7c:	2141      	movs	r1, #65	; 0x41
10008d7e:	9300      	str	r3, [sp, #0]
10008d80:	2202      	movs	r2, #2
10008d82:	9701      	str	r7, [sp, #4]
10008d84:	9602      	str	r6, [sp, #8]
10008d86:	2300      	movs	r3, #0
10008d88:	f7f9 fbf2 	bl	10002570 <optiga_crypt_rsa_generate_keypair>
10008d8c:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_ENCRYPTION,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
10008d8e:	d153      	bne.n	10008e38 <example_optiga_crypt_rsa_decrypt_and_export+0x100>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008d90:	882b      	ldrh	r3, [r5, #0]
10008d92:	2b01      	cmp	r3, #1
10008d94:	d0fc      	beq.n	10008d90 <example_optiga_crypt_rsa_decrypt_and_export+0x58>
        {
            //Wait until the optiga_crypt_rsa_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008d96:	882b      	ldrh	r3, [r5, #0]
10008d98:	b29b      	uxth	r3, r3
10008d9a:	2b00      	cmp	r3, #0
10008d9c:	d001      	beq.n	10008da2 <example_optiga_crypt_rsa_decrypt_and_export+0x6a>
        {
            //Key pair generation failed
            return_status = optiga_lib_status;
10008d9e:	882a      	ldrh	r2, [r5, #0]
10008da0:	e047      	b.n	10008e32 <example_optiga_crypt_rsa_decrypt_and_export+0xfa>
        /**
         * 3. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
        public_key_from_host.length = public_key_length;
10008da2:	8831      	ldrh	r1, [r6, #0]
        }
        /**
         * 3. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10008da4:	aa09      	add	r2, sp, #36	; 0x24
        public_key_from_host.length = public_key_length;
10008da6:	8091      	strh	r1, [r2, #4]
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
10008da8:	2141      	movs	r1, #65	; 0x41
10008daa:	7191      	strb	r1, [r2, #6]
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008dac:	3940      	subs	r1, #64	; 0x40
10008dae:	8029      	strh	r1, [r5, #0]

        return_status = optiga_crypt_rsa_encrypt_message(me,
10008db0:	9300      	str	r3, [sp, #0]
10008db2:	9301      	str	r3, [sp, #4]
10008db4:	231e      	movs	r3, #30
10008db6:	ae16      	add	r6, sp, #88	; 0x58
10008db8:	446b      	add	r3, sp
10008dba:	9102      	str	r1, [sp, #8]
10008dbc:	9203      	str	r2, [sp, #12]
10008dbe:	9305      	str	r3, [sp, #20]
10008dc0:	aa0b      	add	r2, sp, #44	; 0x2c
10008dc2:	9604      	str	r6, [sp, #16]
10008dc4:	1c20      	adds	r0, r4, #0
10008dc6:	3110      	adds	r1, #16
10008dc8:	232a      	movs	r3, #42	; 0x2a
        }
        /**
         * 3. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10008dca:	9709      	str	r7, [sp, #36]	; 0x24
        public_key_from_host.length = public_key_length;
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
        optiga_lib_status = OPTIGA_LIB_BUSY;

        return_status = optiga_crypt_rsa_encrypt_message(me,
10008dcc:	f7f9 fc36 	bl	1000263c <optiga_crypt_rsa_encrypt_message>
10008dd0:	1e02      	subs	r2, r0, #0
                                                         OPTIGA_CRYPT_HOST_DATA,
                                                         &public_key_from_host,
                                                         encrypted_message,
                                                         &encrypted_message_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008dd2:	d131      	bne.n	10008e38 <example_optiga_crypt_rsa_decrypt_and_export+0x100>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008dd4:	4b29      	ldr	r3, [pc, #164]	; (10008e7c <example_optiga_crypt_rsa_decrypt_and_export+0x144>)
10008dd6:	881a      	ldrh	r2, [r3, #0]
10008dd8:	1c1f      	adds	r7, r3, #0
10008dda:	2a01      	cmp	r2, #1
10008ddc:	d0fa      	beq.n	10008dd4 <example_optiga_crypt_rsa_decrypt_and_export+0x9c>
        {
            //Wait until the optiga_crypt_rsa_encrypt_message operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008dde:	881d      	ldrh	r5, [r3, #0]
10008de0:	b2ad      	uxth	r5, r5
10008de2:	2d00      	cmp	r5, #0
10008de4:	d001      	beq.n	10008dea <example_optiga_crypt_rsa_decrypt_and_export+0xb2>
        {
            //Encryption failed
            return_status = optiga_lib_status;
10008de6:	881a      	ldrh	r2, [r3, #0]
10008de8:	e023      	b.n	10008e32 <example_optiga_crypt_rsa_decrypt_and_export+0xfa>
        }
        /**
         * 4. RSA decryption
         */
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008dea:	1c20      	adds	r0, r4, #0
10008dec:	2102      	movs	r1, #2
10008dee:	2201      	movs	r2, #1
10008df0:	f7f9 f930 	bl	10002054 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_RESPONSE_PROTECTION);
10008df4:	1c20      	adds	r0, r4, #0
10008df6:	2101      	movs	r1, #1
10008df8:	2202      	movs	r2, #2
10008dfa:	f7f9 f92b 	bl	10002054 <optiga_crypt_set_comms_params>

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008dfe:	2301      	movs	r3, #1
10008e00:	803b      	strh	r3, [r7, #0]
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        return_status = optiga_crypt_rsa_decrypt_and_export(me,
10008e02:	9500      	str	r5, [sp, #0]
10008e04:	9501      	str	r5, [sp, #4]
10008e06:	ab07      	add	r3, sp, #28
10008e08:	881b      	ldrh	r3, [r3, #0]
10008e0a:	1c32      	adds	r2, r6, #0
10008e0c:	9302      	str	r3, [sp, #8]
10008e0e:	ab5c      	add	r3, sp, #368	; 0x170
10008e10:	9303      	str	r3, [sp, #12]
10008e12:	ab08      	add	r3, sp, #32
10008e14:	9304      	str	r3, [sp, #16]
10008e16:	1c20      	adds	r0, r4, #0
10008e18:	2111      	movs	r1, #17
10008e1a:	2380      	movs	r3, #128	; 0x80
10008e1c:	f7f9 fc7e 	bl	1000271c <optiga_crypt_rsa_decrypt_and_export>
10008e20:	1e02      	subs	r2, r0, #0
                                                            0,
                                                            optiga_key_id,
                                                            decrypted_message,
                                                            &decrypted_message_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008e22:	d109      	bne.n	10008e38 <example_optiga_crypt_rsa_decrypt_and_export+0x100>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008e24:	883b      	ldrh	r3, [r7, #0]
10008e26:	2b01      	cmp	r3, #1
10008e28:	d0fc      	beq.n	10008e24 <example_optiga_crypt_rsa_decrypt_and_export+0xec>
        {
            //Wait until the optiga_crypt_rsa_decrypt_and_export operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008e2a:	883b      	ldrh	r3, [r7, #0]
10008e2c:	2b00      	cmp	r3, #0
10008e2e:	d008      	beq.n	10008e42 <example_optiga_crypt_rsa_decrypt_and_export+0x10a>
        {
            //RSA Decryption failed
            return_status = optiga_lib_status;
10008e30:	883a      	ldrh	r2, [r7, #0]
10008e32:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008e34:	2a00      	cmp	r2, #0
10008e36:	d004      	beq.n	10008e42 <example_optiga_crypt_rsa_decrypt_and_export+0x10a>
10008e38:	480d      	ldr	r0, [pc, #52]	; (10008e70 <example_optiga_crypt_rsa_decrypt_and_export+0x138>)
10008e3a:	4912      	ldr	r1, [pc, #72]	; (10008e84 <example_optiga_crypt_rsa_decrypt_and_export+0x14c>)
10008e3c:	f7fb fcae 	bl	1000479c <optiga_lib_print_status>
10008e40:	e006      	b.n	10008e50 <example_optiga_crypt_rsa_decrypt_and_export+0x118>
10008e42:	480b      	ldr	r0, [pc, #44]	; (10008e70 <example_optiga_crypt_rsa_decrypt_and_export+0x138>)
10008e44:	490b      	ldr	r1, [pc, #44]	; (10008e74 <example_optiga_crypt_rsa_decrypt_and_export+0x13c>)
10008e46:	2200      	movs	r2, #0
10008e48:	f7fb fca8 	bl	1000479c <optiga_lib_print_status>
    if (me)
10008e4c:	2c00      	cmp	r4, #0
10008e4e:	d008      	beq.n	10008e62 <example_optiga_crypt_rsa_decrypt_and_export+0x12a>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008e50:	1c20      	adds	r0, r4, #0
10008e52:	f7f9 f931 	bl	100020b8 <optiga_crypt_destroy>
10008e56:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008e58:	d003      	beq.n	10008e62 <example_optiga_crypt_rsa_decrypt_and_export+0x12a>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008e5a:	4805      	ldr	r0, [pc, #20]	; (10008e70 <example_optiga_crypt_rsa_decrypt_and_export+0x138>)
10008e5c:	4909      	ldr	r1, [pc, #36]	; (10008e84 <example_optiga_crypt_rsa_decrypt_and_export+0x14c>)
10008e5e:	f7fb fc9d 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
10008e62:	b07f      	add	sp, #508	; 0x1fc
10008e64:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
10008e66:	46c0      	nop			; (mov r8, r8)
10008e68:	10010772 	.word	0x10010772
10008e6c:	1001079c 	.word	0x1001079c
10008e70:	10010644 	.word	0x10010644
10008e74:	1000d2dc 	.word	0x1000d2dc
10008e78:	10008d2d 	.word	0x10008d2d
10008e7c:	20002f9c 	.word	0x20002f9c
10008e80:	ffffe0fc 	.word	0xffffe0fc
10008e84:	10010659 	.word	0x10010659

10008e88 <example_optiga_crypt_rsa_decrypt_and_store>:
 * The below example demonstrates RSA decryption
 * #optiga_crypt_rsa_decrypt_and_store where decrypted message get stored in session context
 *
 */
void example_optiga_crypt_rsa_decrypt_and_store(void)
{
10008e88:	b5f0      	push	{r4, r5, r6, r7, lr}
10008e8a:	b0cf      	sub	sp, #316	; 0x13c
    optiga_lib_status_t return_status = 0;
    optiga_key_id_t optiga_key_id;
    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;
    uint8_t encrypted_message[128];
    uint16_t encrypted_message_length = sizeof(encrypted_message);
10008e8c:	466a      	mov	r2, sp
10008e8e:	2380      	movs	r3, #128	; 0x80
10008e90:	8293      	strh	r3, [r2, #20]
    uint8_t public_key [150];
    uint16_t public_key_length = sizeof(public_key);
10008e92:	3316      	adds	r3, #22
10008e94:	82d3      	strh	r3, [r2, #22]
    const uint8_t optional_data[] = {0x01, 0x02};
10008e96:	494f      	ldr	r1, [pc, #316]	; (10008fd4 <example_optiga_crypt_rsa_decrypt_and_store+0x14c>)
10008e98:	2202      	movs	r2, #2
10008e9a:	a804      	add	r0, sp, #16
10008e9c:	f003 fd85 	bl	1000c9aa <memcpy>

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10008ea0:	4d4d      	ldr	r5, [pc, #308]	; (10008fd8 <example_optiga_crypt_rsa_decrypt_and_store+0x150>)
10008ea2:	484e      	ldr	r0, [pc, #312]	; (10008fdc <example_optiga_crypt_rsa_decrypt_and_store+0x154>)
10008ea4:	1c29      	adds	r1, r5, #0
10008ea6:	4a4e      	ldr	r2, [pc, #312]	; (10008fe0 <example_optiga_crypt_rsa_decrypt_and_store+0x158>)
10008ea8:	f7fb fc46 	bl	10004738 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10008eac:	2000      	movs	r0, #0
10008eae:	494d      	ldr	r1, [pc, #308]	; (10008fe4 <example_optiga_crypt_rsa_decrypt_and_store+0x15c>)
10008eb0:	1c02      	adds	r2, r0, #0
10008eb2:	f7f9 f8d9 	bl	10002068 <optiga_crypt_create>
10008eb6:	1e04      	subs	r4, r0, #0
        if (NULL == me)
10008eb8:	d100      	bne.n	10008ebc <example_optiga_crypt_rsa_decrypt_and_store+0x34>
10008eba:	e078      	b.n	10008fae <example_optiga_crypt_rsa_decrypt_and_store+0x126>
         *       - Use 1024 or 2048 bit RSA key
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ebc:	2301      	movs	r3, #1
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10008ebe:	466a      	mov	r2, sp
         *       - Use 1024 or 2048 bit RSA key
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ec0:	4e49      	ldr	r6, [pc, #292]	; (10008fe8 <example_optiga_crypt_rsa_decrypt_and_store+0x160>)
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
        return_status = optiga_crypt_rsa_generate_keypair(me,
10008ec2:	2141      	movs	r1, #65	; 0x41
         *       - Use 1024 or 2048 bit RSA key
         *       - Specify the Key Usage
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ec4:	8033      	strh	r3, [r6, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10008ec6:	4b49      	ldr	r3, [pc, #292]	; (10008fec <example_optiga_crypt_rsa_decrypt_and_store+0x164>)
10008ec8:	8253      	strh	r3, [r2, #18]
        return_status = optiga_crypt_rsa_generate_keypair(me,
10008eca:	2312      	movs	r3, #18
10008ecc:	446b      	add	r3, sp
10008ece:	9300      	str	r3, [sp, #0]
10008ed0:	ab28      	add	r3, sp, #160	; 0xa0
10008ed2:	9301      	str	r3, [sp, #4]
10008ed4:	2316      	movs	r3, #22
10008ed6:	446b      	add	r3, sp
10008ed8:	9302      	str	r3, [sp, #8]
10008eda:	2202      	movs	r2, #2
10008edc:	2300      	movs	r3, #0
10008ede:	f7f9 fb47 	bl	10002570 <optiga_crypt_rsa_generate_keypair>
10008ee2:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_ENCRYPTION,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
10008ee4:	d15e      	bne.n	10008fa4 <example_optiga_crypt_rsa_decrypt_and_store+0x11c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008ee6:	8833      	ldrh	r3, [r6, #0]
10008ee8:	2b01      	cmp	r3, #1
10008eea:	d0fc      	beq.n	10008ee6 <example_optiga_crypt_rsa_decrypt_and_store+0x5e>
        {
            //Wait until the optiga_crypt_rsa_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008eec:	8833      	ldrh	r3, [r6, #0]
10008eee:	2b00      	cmp	r3, #0
10008ef0:	d001      	beq.n	10008ef6 <example_optiga_crypt_rsa_decrypt_and_store+0x6e>
        {
            //Key pair generation failed
            return_status = optiga_lib_status;
10008ef2:	8832      	ldrh	r2, [r6, #0]
10008ef4:	e053      	b.n	10008f9e <example_optiga_crypt_rsa_decrypt_and_store+0x116>
            break;
        }
        /**
         * 3. Generate 0x46 byte RSA Pre master secret which is stored in acquired session OID
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008ef6:	2301      	movs	r3, #1
        return_status = optiga_crypt_rsa_generate_pre_master_secret(me,
10008ef8:	2202      	movs	r2, #2
            break;
        }
        /**
         * 3. Generate 0x46 byte RSA Pre master secret which is stored in acquired session OID
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008efa:	8033      	strh	r3, [r6, #0]
        return_status = optiga_crypt_rsa_generate_pre_master_secret(me,
10008efc:	1c20      	adds	r0, r4, #0
10008efe:	a904      	add	r1, sp, #16
10008f00:	331d      	adds	r3, #29
10008f02:	f7f9 fc79 	bl	100027f8 <optiga_crypt_rsa_generate_pre_master_secret>
10008f06:	1e02      	subs	r2, r0, #0
                                                                    optional_data,
                                                                    sizeof(optional_data),
                                                                    30);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008f08:	d14c      	bne.n	10008fa4 <example_optiga_crypt_rsa_decrypt_and_store+0x11c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008f0a:	4b37      	ldr	r3, [pc, #220]	; (10008fe8 <example_optiga_crypt_rsa_decrypt_and_store+0x160>)
10008f0c:	881a      	ldrh	r2, [r3, #0]
10008f0e:	2a01      	cmp	r2, #1
10008f10:	d0fb      	beq.n	10008f0a <example_optiga_crypt_rsa_decrypt_and_store+0x82>
        {
            //Wait until the optiga_crypt_random operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008f12:	881e      	ldrh	r6, [r3, #0]
10008f14:	b2b6      	uxth	r6, r6
10008f16:	2e00      	cmp	r6, #0
10008f18:	d140      	bne.n	10008f9c <example_optiga_crypt_rsa_decrypt_and_store+0x114>
        {
            return_status = optiga_lib_status;
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008f1a:	2701      	movs	r7, #1
        /**
         * 4. Encrypt(RSA) the data stored in session OID
         */

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008f1c:	1c20      	adds	r0, r4, #0
10008f1e:	1c3a      	adds	r2, r7, #0
10008f20:	2102      	movs	r1, #2
        {
            return_status = optiga_lib_status;
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
10008f22:	801f      	strh	r7, [r3, #0]
        /**
         * 4. Encrypt(RSA) the data stored in session OID
         */

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10008f24:	f7f9 f896 	bl	10002054 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);
10008f28:	1c39      	adds	r1, r7, #0
10008f2a:	1c3a      	adds	r2, r7, #0
10008f2c:	1c20      	adds	r0, r4, #0
10008f2e:	f7f9 f891 	bl	10002054 <optiga_crypt_set_comms_params>

        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10008f32:	aa28      	add	r2, sp, #160	; 0xa0
10008f34:	9206      	str	r2, [sp, #24]
        public_key_from_host.length = public_key_length;
10008f36:	466a      	mov	r2, sp
10008f38:	8ad2      	ldrh	r2, [r2, #22]
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_COMMAND_PROTECTION);

        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10008f3a:	ab06      	add	r3, sp, #24
        public_key_from_host.length = public_key_length;
10008f3c:	809a      	strh	r2, [r3, #4]
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
10008f3e:	2241      	movs	r2, #65	; 0x41
10008f40:	719a      	strb	r2, [r3, #6]

        return_status = optiga_crypt_rsa_encrypt_session(me,
10008f42:	9700      	str	r7, [sp, #0]
10008f44:	9301      	str	r3, [sp, #4]
10008f46:	af08      	add	r7, sp, #32
10008f48:	ab05      	add	r3, sp, #20
10008f4a:	9303      	str	r3, [sp, #12]
10008f4c:	1c32      	adds	r2, r6, #0
10008f4e:	9702      	str	r7, [sp, #8]
10008f50:	1c20      	adds	r0, r4, #0
10008f52:	2111      	movs	r1, #17
10008f54:	1c33      	adds	r3, r6, #0
10008f56:	f7f9 fba9 	bl	100026ac <optiga_crypt_rsa_encrypt_session>
10008f5a:	1e02      	subs	r2, r0, #0
                                                         OPTIGA_CRYPT_HOST_DATA,
                                                         &public_key_from_host,
                                                         encrypted_message,
                                                         &encrypted_message_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
10008f5c:	d122      	bne.n	10008fa4 <example_optiga_crypt_rsa_decrypt_and_store+0x11c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008f5e:	4b22      	ldr	r3, [pc, #136]	; (10008fe8 <example_optiga_crypt_rsa_decrypt_and_store+0x160>)
10008f60:	881a      	ldrh	r2, [r3, #0]
10008f62:	2a01      	cmp	r2, #1
10008f64:	d0fb      	beq.n	10008f5e <example_optiga_crypt_rsa_decrypt_and_store+0xd6>
        {
            //Wait until the optiga_crypt_rsa_encrypt_session operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008f66:	881a      	ldrh	r2, [r3, #0]
10008f68:	b292      	uxth	r2, r2
10008f6a:	2a00      	cmp	r2, #0
10008f6c:	d116      	bne.n	10008f9c <example_optiga_crypt_rsa_decrypt_and_store+0x114>
            break;
        }
        /**
         * 5. RSA decryption
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10008f6e:	2101      	movs	r1, #1
10008f70:	8019      	strh	r1, [r3, #0]
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        return_status = optiga_crypt_rsa_decrypt_and_store(me,
10008f72:	466b      	mov	r3, sp
10008f74:	8a9b      	ldrh	r3, [r3, #20]
10008f76:	9200      	str	r2, [sp, #0]
10008f78:	9201      	str	r2, [sp, #4]
10008f7a:	466a      	mov	r2, sp
10008f7c:	8a52      	ldrh	r2, [r2, #18]
10008f7e:	1c20      	adds	r0, r4, #0
10008f80:	9202      	str	r2, [sp, #8]
10008f82:	3110      	adds	r1, #16
10008f84:	1c3a      	adds	r2, r7, #0
10008f86:	f7f9 fc07 	bl	10002798 <optiga_crypt_rsa_decrypt_and_store>
10008f8a:	1e02      	subs	r2, r0, #0
                                                           encrypted_message,
                                                           encrypted_message_length,
                                                           NULL,
                                                           0,
                                                           optiga_key_id);
        if (OPTIGA_LIB_SUCCESS != return_status)
10008f8c:	d10a      	bne.n	10008fa4 <example_optiga_crypt_rsa_decrypt_and_store+0x11c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10008f8e:	4b16      	ldr	r3, [pc, #88]	; (10008fe8 <example_optiga_crypt_rsa_decrypt_and_store+0x160>)
10008f90:	881a      	ldrh	r2, [r3, #0]
10008f92:	2a01      	cmp	r2, #1
10008f94:	d0fb      	beq.n	10008f8e <example_optiga_crypt_rsa_decrypt_and_store+0x106>
        {
            //Wait until the optiga_crypt_rsa_decrypt_and_store operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10008f96:	881a      	ldrh	r2, [r3, #0]
10008f98:	2a00      	cmp	r2, #0
10008f9a:	d008      	beq.n	10008fae <example_optiga_crypt_rsa_decrypt_and_store+0x126>
        {
            //RSA Decryption failed
            return_status = optiga_lib_status;
10008f9c:	881a      	ldrh	r2, [r3, #0]
10008f9e:	b292      	uxth	r2, r2
        }

        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008fa0:	2a00      	cmp	r2, #0
10008fa2:	d004      	beq.n	10008fae <example_optiga_crypt_rsa_decrypt_and_store+0x126>
10008fa4:	1c28      	adds	r0, r5, #0
10008fa6:	4912      	ldr	r1, [pc, #72]	; (10008ff0 <example_optiga_crypt_rsa_decrypt_and_store+0x168>)
10008fa8:	f7fb fbf8 	bl	1000479c <optiga_lib_print_status>
10008fac:	e006      	b.n	10008fbc <example_optiga_crypt_rsa_decrypt_and_store+0x134>
10008fae:	1c28      	adds	r0, r5, #0
10008fb0:	490b      	ldr	r1, [pc, #44]	; (10008fe0 <example_optiga_crypt_rsa_decrypt_and_store+0x158>)
10008fb2:	2200      	movs	r2, #0
10008fb4:	f7fb fbf2 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
10008fb8:	2c00      	cmp	r4, #0
10008fba:	d008      	beq.n	10008fce <example_optiga_crypt_rsa_decrypt_and_store+0x146>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10008fbc:	1c20      	adds	r0, r4, #0
10008fbe:	f7f9 f87b 	bl	100020b8 <optiga_crypt_destroy>
10008fc2:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10008fc4:	d003      	beq.n	10008fce <example_optiga_crypt_rsa_decrypt_and_store+0x146>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10008fc6:	1c28      	adds	r0, r5, #0
10008fc8:	4909      	ldr	r1, [pc, #36]	; (10008ff0 <example_optiga_crypt_rsa_decrypt_and_store+0x168>)
10008fca:	f7fb fbe7 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
10008fce:	b04f      	add	sp, #316	; 0x13c
10008fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008fd2:	46c0      	nop			; (mov r8, r8)
10008fd4:	10010745 	.word	0x10010745
10008fd8:	10010644 	.word	0x10010644
10008fdc:	10010747 	.word	0x10010747
10008fe0:	1000d2dc 	.word	0x1000d2dc
10008fe4:	10008d2d 	.word	0x10008d2d
10008fe8:	20002f9c 	.word	0x20002f9c
10008fec:	ffffe0fc 	.word	0xffffe0fc
10008ff0:	10010659 	.word	0x10010659

10008ff4 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10008ff4:	4b01      	ldr	r3, [pc, #4]	; (10008ffc <optiga_crypt_callback+0x8>)
10008ff6:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10008ff8:	4770      	bx	lr
10008ffa:	46c0      	nop			; (mov r8, r8)
10008ffc:	20002f9e 	.word	0x20002f9e

10009000 <example_optiga_crypt_rsa_encrypt_message>:
 * The below example demonstrates RSA encryption
 * #optiga_crypt_rsa_encrypt_message where message is provided by user
 *
 */
void example_optiga_crypt_rsa_encrypt_message(void)
{
10009000:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = 0;
    optiga_rsa_encryption_scheme_t encryption_scheme;
    uint8_t encrypted_message[128];
    uint16_t encrypted_message_length = sizeof(encrypted_message);
10009002:	271e      	movs	r7, #30
 * The below example demonstrates RSA encryption
 * #optiga_crypt_rsa_encrypt_message where message is provided by user
 *
 */
void example_optiga_crypt_rsa_encrypt_message(void)
{
10009004:	b0ad      	sub	sp, #180	; 0xb4
    optiga_lib_status_t return_status = 0;
    optiga_rsa_encryption_scheme_t encryption_scheme;
    uint8_t encrypted_message[128];
    uint16_t encrypted_message_length = sizeof(encrypted_message);
10009006:	ab02      	add	r3, sp, #8
10009008:	18ff      	adds	r7, r7, r3
1000900a:	2380      	movs	r3, #128	; 0x80
    public_key_from_host_t public_key_from_host;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000900c:	4d24      	ldr	r5, [pc, #144]	; (100090a0 <example_optiga_crypt_rsa_encrypt_message+0xa0>)
1000900e:	4c25      	ldr	r4, [pc, #148]	; (100090a4 <example_optiga_crypt_rsa_encrypt_message+0xa4>)
10009010:	4825      	ldr	r0, [pc, #148]	; (100090a8 <example_optiga_crypt_rsa_encrypt_message+0xa8>)
10009012:	1c21      	adds	r1, r4, #0
10009014:	1c2a      	adds	r2, r5, #0
void example_optiga_crypt_rsa_encrypt_message(void)
{
    optiga_lib_status_t return_status = 0;
    optiga_rsa_encryption_scheme_t encryption_scheme;
    uint8_t encrypted_message[128];
    uint16_t encrypted_message_length = sizeof(encrypted_message);
10009016:	803b      	strh	r3, [r7, #0]
    public_key_from_host_t public_key_from_host;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009018:	f7fb fb8e 	bl	10004738 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
1000901c:	2000      	movs	r0, #0
1000901e:	4923      	ldr	r1, [pc, #140]	; (100090ac <example_optiga_crypt_rsa_encrypt_message+0xac>)
10009020:	1c02      	adds	r2, r0, #0
10009022:	f7f9 f821 	bl	10002068 <optiga_crypt_create>
10009026:	9507      	str	r5, [sp, #28]
10009028:	1e06      	subs	r6, r0, #0
        if (NULL == me)
1000902a:	d027      	beq.n	1000907c <example_optiga_crypt_rsa_encrypt_message+0x7c>

        /**
         * 2. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
1000902c:	4a20      	ldr	r2, [pc, #128]	; (100090b0 <example_optiga_crypt_rsa_encrypt_message+0xb0>)
        public_key_from_host.length = sizeof(public_key);
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_crypt_rsa_encrypt_message(me,
1000902e:	2100      	movs	r1, #0

        /**
         * 2. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10009030:	920a      	str	r2, [sp, #40]	; 0x28
        public_key_from_host.length = sizeof(public_key);
10009032:	2291      	movs	r2, #145	; 0x91

        /**
         * 2. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10009034:	ab0a      	add	r3, sp, #40	; 0x28
        public_key_from_host.length = sizeof(public_key);
10009036:	809a      	strh	r2, [r3, #4]
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009038:	4d1e      	ldr	r5, [pc, #120]	; (100090b4 <example_optiga_crypt_rsa_encrypt_message+0xb4>)
         * 2. RSA encryption
         */
        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
        public_key_from_host.length = sizeof(public_key);
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
1000903a:	3a50      	subs	r2, #80	; 0x50
1000903c:	719a      	strb	r2, [r3, #6]
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000903e:	3a40      	subs	r2, #64	; 0x40
10009040:	802a      	strh	r2, [r5, #0]
        return_status = optiga_crypt_rsa_encrypt_message(me,
10009042:	9303      	str	r3, [sp, #12]
10009044:	ab0c      	add	r3, sp, #48	; 0x30
10009046:	9100      	str	r1, [sp, #0]
10009048:	9101      	str	r1, [sp, #4]
1000904a:	9202      	str	r2, [sp, #8]
1000904c:	9304      	str	r3, [sp, #16]
1000904e:	4a1a      	ldr	r2, [pc, #104]	; (100090b8 <example_optiga_crypt_rsa_encrypt_message+0xb8>)
10009050:	9705      	str	r7, [sp, #20]
10009052:	3111      	adds	r1, #17
10009054:	232a      	movs	r3, #42	; 0x2a
10009056:	f7f9 faf1 	bl	1000263c <optiga_crypt_rsa_encrypt_message>
1000905a:	1e02      	subs	r2, r0, #0
                                                            OPTIGA_CRYPT_HOST_DATA,
                                                            &public_key_from_host,
                                                            encrypted_message,
                                                            &encrypted_message_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
1000905c:	d109      	bne.n	10009072 <example_optiga_crypt_rsa_encrypt_message+0x72>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000905e:	882b      	ldrh	r3, [r5, #0]
10009060:	2b01      	cmp	r3, #1
10009062:	d0fc      	beq.n	1000905e <example_optiga_crypt_rsa_encrypt_message+0x5e>
        {
            //Wait until the optiga_crypt_rsa_encrypt_message operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009064:	882b      	ldrh	r3, [r5, #0]
10009066:	2b00      	cmp	r3, #0
10009068:	d008      	beq.n	1000907c <example_optiga_crypt_rsa_encrypt_message+0x7c>
        {
            //RSA Encryption failed
            return_status = optiga_lib_status;
1000906a:	882a      	ldrh	r2, [r5, #0]
1000906c:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
1000906e:	2a00      	cmp	r2, #0
10009070:	d004      	beq.n	1000907c <example_optiga_crypt_rsa_encrypt_message+0x7c>
10009072:	1c20      	adds	r0, r4, #0
10009074:	4911      	ldr	r1, [pc, #68]	; (100090bc <example_optiga_crypt_rsa_encrypt_message+0xbc>)
10009076:	f7fb fb91 	bl	1000479c <optiga_lib_print_status>
1000907a:	e006      	b.n	1000908a <example_optiga_crypt_rsa_encrypt_message+0x8a>
1000907c:	1c20      	adds	r0, r4, #0
1000907e:	9907      	ldr	r1, [sp, #28]
10009080:	2200      	movs	r2, #0
10009082:	f7fb fb8b 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
10009086:	2e00      	cmp	r6, #0
10009088:	d008      	beq.n	1000909c <example_optiga_crypt_rsa_encrypt_message+0x9c>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
1000908a:	1c30      	adds	r0, r6, #0
1000908c:	f7f9 f814 	bl	100020b8 <optiga_crypt_destroy>
10009090:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009092:	d003      	beq.n	1000909c <example_optiga_crypt_rsa_encrypt_message+0x9c>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009094:	1c20      	adds	r0, r4, #0
10009096:	4909      	ldr	r1, [pc, #36]	; (100090bc <example_optiga_crypt_rsa_encrypt_message+0xbc>)
10009098:	f7fb fb80 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
1000909c:	b02d      	add	sp, #180	; 0xb4
1000909e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100090a0:	1000d2dc 	.word	0x1000d2dc
100090a4:	10010644 	.word	0x10010644
100090a8:	100107c8 	.word	0x100107c8
100090ac:	10008ff5 	.word	0x10008ff5
100090b0:	20001ba8 	.word	0x20001ba8
100090b4:	20002f9e 	.word	0x20002f9e
100090b8:	20001b7e 	.word	0x20001b7e
100090bc:	10010659 	.word	0x10010659

100090c0 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
100090c0:	4b01      	ldr	r3, [pc, #4]	; (100090c8 <optiga_crypt_callback+0x8>)
100090c2:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
100090c4:	4770      	bx	lr
100090c6:	46c0      	nop			; (mov r8, r8)
100090c8:	20002fa0 	.word	0x20002fa0

100090cc <example_optiga_crypt_rsa_encrypt_session>:
 * The below example demonstrates RSA encryption
 * #optiga_crypt_rsa_encrypt_session where session data is encrypted
 *
 */
void example_optiga_crypt_rsa_encrypt_session(void)
{
100090cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100090ce:	b0cf      	sub	sp, #316	; 0x13c
    optiga_key_id_t optiga_key_id;
    optiga_rsa_encryption_scheme_t encryption_scheme;

    uint8_t public_key [150];
    uint8_t encrypted_message[128];
    uint16_t encrypted_message_length = sizeof(encrypted_message);
100090d0:	466a      	mov	r2, sp
100090d2:	2380      	movs	r3, #128	; 0x80
100090d4:	8293      	strh	r3, [r2, #20]
    uint16_t public_key_length = sizeof(public_key);
100090d6:	3316      	adds	r3, #22
100090d8:	82d3      	strh	r3, [r2, #22]
    public_key_from_host_t public_key_from_host;
    const uint8_t optional_data[2] = {0x01, 0x02};
100090da:	4941      	ldr	r1, [pc, #260]	; (100091e0 <example_optiga_crypt_rsa_encrypt_session+0x114>)
100090dc:	2202      	movs	r2, #2
100090de:	a804      	add	r0, sp, #16
100090e0:	f003 fc63 	bl	1000c9aa <memcpy>
    uint16_t optional_data_length = sizeof(optional_data);

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100090e4:	4e3f      	ldr	r6, [pc, #252]	; (100091e4 <example_optiga_crypt_rsa_encrypt_session+0x118>)
100090e6:	4840      	ldr	r0, [pc, #256]	; (100091e8 <example_optiga_crypt_rsa_encrypt_session+0x11c>)
100090e8:	1c31      	adds	r1, r6, #0
100090ea:	4a40      	ldr	r2, [pc, #256]	; (100091ec <example_optiga_crypt_rsa_encrypt_session+0x120>)
100090ec:	f7fb fb24 	bl	10004738 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
100090f0:	2000      	movs	r0, #0
100090f2:	493f      	ldr	r1, [pc, #252]	; (100091f0 <example_optiga_crypt_rsa_encrypt_session+0x124>)
100090f4:	1c02      	adds	r2, r0, #0
100090f6:	f7f8 ffb7 	bl	10002068 <optiga_crypt_create>
100090fa:	1e04      	subs	r4, r0, #0
        if (NULL == me)
100090fc:	d05e      	beq.n	100091bc <example_optiga_crypt_rsa_encrypt_session+0xf0>

        /**
         * 2. Generate 1024 bit RSA Key pair
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
100090fe:	2712      	movs	r7, #18
        }

        /**
         * 2. Generate 1024 bit RSA Key pair
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009100:	2101      	movs	r1, #1
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10009102:	4b3c      	ldr	r3, [pc, #240]	; (100091f4 <example_optiga_crypt_rsa_encrypt_session+0x128>)
        }

        /**
         * 2. Generate 1024 bit RSA Key pair
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009104:	4d3c      	ldr	r5, [pc, #240]	; (100091f8 <example_optiga_crypt_rsa_encrypt_session+0x12c>)
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10009106:	446f      	add	r7, sp
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
10009108:	2200      	movs	r2, #0
        }

        /**
         * 2. Generate 1024 bit RSA Key pair
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000910a:	8029      	strh	r1, [r5, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
1000910c:	803b      	strh	r3, [r7, #0]
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
1000910e:	f7f8 ffa1 	bl	10002054 <optiga_crypt_set_comms_params>
        return_status = optiga_crypt_rsa_generate_keypair(me,
10009112:	ab28      	add	r3, sp, #160	; 0xa0
10009114:	9301      	str	r3, [sp, #4]
10009116:	2316      	movs	r3, #22
10009118:	446b      	add	r3, sp
1000911a:	9302      	str	r3, [sp, #8]
1000911c:	2210      	movs	r2, #16
1000911e:	9700      	str	r7, [sp, #0]
10009120:	1c20      	adds	r0, r4, #0
10009122:	2141      	movs	r1, #65	; 0x41
10009124:	2300      	movs	r3, #0
10009126:	f7f9 fa23 	bl	10002570 <optiga_crypt_rsa_generate_keypair>
1000912a:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_SIGN,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
1000912c:	d141      	bne.n	100091b2 <example_optiga_crypt_rsa_encrypt_session+0xe6>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000912e:	882b      	ldrh	r3, [r5, #0]
10009130:	2b01      	cmp	r3, #1
10009132:	d0fc      	beq.n	1000912e <example_optiga_crypt_rsa_encrypt_session+0x62>
        {
            //Wait until the optiga_crypt_rsa_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009134:	882b      	ldrh	r3, [r5, #0]
10009136:	2b00      	cmp	r3, #0
10009138:	d001      	beq.n	1000913e <example_optiga_crypt_rsa_encrypt_session+0x72>
        {
            //Key pair generation failed
            return_status = optiga_lib_status;
1000913a:	882a      	ldrh	r2, [r5, #0]
1000913c:	e036      	b.n	100091ac <example_optiga_crypt_rsa_encrypt_session+0xe0>
        }

        /**
         * 3. Generate 48 byte RSA Pre master secret in acquired session OID
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000913e:	2301      	movs	r3, #1
        return_status = optiga_crypt_rsa_generate_pre_master_secret(me,
10009140:	2202      	movs	r2, #2
        }

        /**
         * 3. Generate 48 byte RSA Pre master secret in acquired session OID
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009142:	802b      	strh	r3, [r5, #0]
        return_status = optiga_crypt_rsa_generate_pre_master_secret(me,
10009144:	1c20      	adds	r0, r4, #0
10009146:	a904      	add	r1, sp, #16
10009148:	332f      	adds	r3, #47	; 0x2f
1000914a:	f7f9 fb55 	bl	100027f8 <optiga_crypt_rsa_generate_pre_master_secret>
1000914e:	1e02      	subs	r2, r0, #0
                                                                    optional_data,
                                                                    optional_data_length,
                                                                    48);

        if (OPTIGA_LIB_SUCCESS != return_status)
10009150:	d12f      	bne.n	100091b2 <example_optiga_crypt_rsa_encrypt_session+0xe6>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009152:	4b29      	ldr	r3, [pc, #164]	; (100091f8 <example_optiga_crypt_rsa_encrypt_session+0x12c>)
10009154:	881a      	ldrh	r2, [r3, #0]
10009156:	2a01      	cmp	r2, #1
10009158:	d0fb      	beq.n	10009152 <example_optiga_crypt_rsa_encrypt_session+0x86>
        {
            //Wait until the optiga_crypt_rsa_generate_pre_master_secret operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000915a:	881d      	ldrh	r5, [r3, #0]
1000915c:	b2ad      	uxth	r5, r5
1000915e:	2d00      	cmp	r5, #0
10009160:	d123      	bne.n	100091aa <example_optiga_crypt_rsa_encrypt_session+0xde>
        {
            return_status = optiga_lib_status;
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
10009162:	2701      	movs	r7, #1
        /**
         * 4. Encrypt (RSA) the data in session OID
         */

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10009164:	1c20      	adds	r0, r4, #0
10009166:	2102      	movs	r1, #2
10009168:	1c3a      	adds	r2, r7, #0
        {
            return_status = optiga_lib_status;
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
1000916a:	801f      	strh	r7, [r3, #0]
        /**
         * 4. Encrypt (RSA) the data in session OID
         */

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
1000916c:	f7f8 ff72 	bl	10002054 <optiga_crypt_set_comms_params>

        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10009170:	aa28      	add	r2, sp, #160	; 0xa0
10009172:	9206      	str	r2, [sp, #24]
        public_key_from_host.length = public_key_length;
10009174:	466a      	mov	r2, sp
10009176:	8ad2      	ldrh	r2, [r2, #22]

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);

        encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
        public_key_from_host.public_key = public_key;
10009178:	ab06      	add	r3, sp, #24
        public_key_from_host.length = public_key_length;
1000917a:	809a      	strh	r2, [r3, #4]
        public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
1000917c:	2241      	movs	r2, #65	; 0x41
1000917e:	719a      	strb	r2, [r3, #6]
        // Default protection level for this API is OPTIGA_COMMS_COMMAND_PROTECTION
        return_status = optiga_crypt_rsa_encrypt_session(me,
10009180:	9301      	str	r3, [sp, #4]
10009182:	ab08      	add	r3, sp, #32
10009184:	9302      	str	r3, [sp, #8]
10009186:	ab05      	add	r3, sp, #20
10009188:	9303      	str	r3, [sp, #12]
1000918a:	1c2a      	adds	r2, r5, #0
1000918c:	9700      	str	r7, [sp, #0]
1000918e:	1c20      	adds	r0, r4, #0
10009190:	2111      	movs	r1, #17
10009192:	1c2b      	adds	r3, r5, #0
10009194:	f7f9 fa8a 	bl	100026ac <optiga_crypt_rsa_encrypt_session>
10009198:	1e02      	subs	r2, r0, #0
                                                         OPTIGA_CRYPT_HOST_DATA,
                                                         &public_key_from_host,
                                                         encrypted_message,
                                                         &encrypted_message_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
1000919a:	d10a      	bne.n	100091b2 <example_optiga_crypt_rsa_encrypt_session+0xe6>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000919c:	4b16      	ldr	r3, [pc, #88]	; (100091f8 <example_optiga_crypt_rsa_encrypt_session+0x12c>)
1000919e:	881a      	ldrh	r2, [r3, #0]
100091a0:	2a01      	cmp	r2, #1
100091a2:	d0fb      	beq.n	1000919c <example_optiga_crypt_rsa_encrypt_session+0xd0>
        {
            //Wait until the optiga_crypt_rsa_encrypt_session operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100091a4:	881a      	ldrh	r2, [r3, #0]
100091a6:	2a00      	cmp	r2, #0
100091a8:	d008      	beq.n	100091bc <example_optiga_crypt_rsa_encrypt_session+0xf0>
        {
            //RSA Encryption failed
            return_status = optiga_lib_status;
100091aa:	881a      	ldrh	r2, [r3, #0]
100091ac:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100091ae:	2a00      	cmp	r2, #0
100091b0:	d004      	beq.n	100091bc <example_optiga_crypt_rsa_encrypt_session+0xf0>
100091b2:	1c30      	adds	r0, r6, #0
100091b4:	4911      	ldr	r1, [pc, #68]	; (100091fc <example_optiga_crypt_rsa_encrypt_session+0x130>)
100091b6:	f7fb faf1 	bl	1000479c <optiga_lib_print_status>
100091ba:	e006      	b.n	100091ca <example_optiga_crypt_rsa_encrypt_session+0xfe>
100091bc:	1c30      	adds	r0, r6, #0
100091be:	490b      	ldr	r1, [pc, #44]	; (100091ec <example_optiga_crypt_rsa_encrypt_session+0x120>)
100091c0:	2200      	movs	r2, #0
100091c2:	f7fb faeb 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
100091c6:	2c00      	cmp	r4, #0
100091c8:	d008      	beq.n	100091dc <example_optiga_crypt_rsa_encrypt_session+0x110>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
100091ca:	1c20      	adds	r0, r4, #0
100091cc:	f7f8 ff74 	bl	100020b8 <optiga_crypt_destroy>
100091d0:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
100091d2:	d003      	beq.n	100091dc <example_optiga_crypt_rsa_encrypt_session+0x110>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100091d4:	1c30      	adds	r0, r6, #0
100091d6:	4909      	ldr	r1, [pc, #36]	; (100091fc <example_optiga_crypt_rsa_encrypt_session+0x130>)
100091d8:	f7fb fae0 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
100091dc:	b04f      	add	sp, #316	; 0x13c
100091de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100091e0:	100107f1 	.word	0x100107f1
100091e4:	10010644 	.word	0x10010644
100091e8:	100107f3 	.word	0x100107f3
100091ec:	1000d2dc 	.word	0x1000d2dc
100091f0:	100090c1 	.word	0x100090c1
100091f4:	ffffe0fc 	.word	0xffffe0fc
100091f8:	20002fa0 	.word	0x20002fa0
100091fc:	10010659 	.word	0x10010659

10009200 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10009200:	4b01      	ldr	r3, [pc, #4]	; (10009208 <optiga_crypt_callback+0x8>)
10009202:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10009204:	4770      	bx	lr
10009206:	46c0      	nop			; (mov r8, r8)
10009208:	20002fa2 	.word	0x20002fa2

1000920c <example_optiga_crypt_rsa_generate_keypair>:
 * The below example demonstrates the generation of
 * RSA Key pair using #optiga_crypt_rsa_generate_keypair.
 *
 */
void example_optiga_crypt_rsa_generate_keypair(void)
{
1000920c:	b5f0      	push	{r4, r5, r6, r7, lr}
    * E.g
    * For 1024 bit key : modulus(128 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    * For 2048 bit key : modulus(256 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    */
    uint8_t public_key [150];
    uint16_t public_key_length = sizeof(public_key);
1000920e:	2716      	movs	r7, #22
 * The below example demonstrates the generation of
 * RSA Key pair using #optiga_crypt_rsa_generate_keypair.
 *
 */
void example_optiga_crypt_rsa_generate_keypair(void)
{
10009210:	b0af      	sub	sp, #188	; 0xbc
    * E.g
    * For 1024 bit key : modulus(128 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    * For 2048 bit key : modulus(256 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    */
    uint8_t public_key [150];
    uint16_t public_key_length = sizeof(public_key);
10009212:	ab02      	add	r3, sp, #8
10009214:	18ff      	adds	r7, r7, r3
10009216:	2396      	movs	r3, #150	; 0x96

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009218:	4d20      	ldr	r5, [pc, #128]	; (1000929c <example_optiga_crypt_rsa_generate_keypair+0x90>)
1000921a:	4c21      	ldr	r4, [pc, #132]	; (100092a0 <example_optiga_crypt_rsa_generate_keypair+0x94>)
1000921c:	4821      	ldr	r0, [pc, #132]	; (100092a4 <example_optiga_crypt_rsa_generate_keypair+0x98>)
1000921e:	1c21      	adds	r1, r4, #0
10009220:	1c2a      	adds	r2, r5, #0
    * E.g
    * For 1024 bit key : modulus(128 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    * For 2048 bit key : modulus(256 bytes) + public expoenent(3 bytes) + Encoding bytes length(approximately 15 bytes)
    */
    uint8_t public_key [150];
    uint16_t public_key_length = sizeof(public_key);
10009222:	803b      	strh	r3, [r7, #0]

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009224:	f7fb fa88 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
10009228:	2000      	movs	r0, #0
1000922a:	491f      	ldr	r1, [pc, #124]	; (100092a8 <example_optiga_crypt_rsa_generate_keypair+0x9c>)
1000922c:	1c02      	adds	r2, r0, #0
1000922e:	f7f8 ff1b 	bl	10002068 <optiga_crypt_create>
10009232:	9505      	str	r5, [sp, #20]
10009234:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10009236:	d01f      	beq.n	10009278 <example_optiga_crypt_rsa_generate_keypair+0x6c>
         *       - Store the Private key in OPTIGA Key store
         *              (When exporting the private key, provide buffer of sufficient length (key size in bytes +
         *               encoding length))
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009238:	2301      	movs	r3, #1
1000923a:	4d1c      	ldr	r5, [pc, #112]	; (100092ac <example_optiga_crypt_rsa_generate_keypair+0xa0>)
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
1000923c:	4a1c      	ldr	r2, [pc, #112]	; (100092b0 <example_optiga_crypt_rsa_generate_keypair+0xa4>)
         *       - Store the Private key in OPTIGA Key store
         *              (When exporting the private key, provide buffer of sufficient length (key size in bytes +
         *               encoding length))
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000923e:	802b      	strh	r3, [r5, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0FC;
10009240:	ab07      	add	r3, sp, #28
10009242:	801a      	strh	r2, [r3, #0]
        return_status = optiga_crypt_rsa_generate_keypair(me,
10009244:	9300      	str	r3, [sp, #0]
10009246:	ab08      	add	r3, sp, #32
10009248:	9301      	str	r3, [sp, #4]
1000924a:	2210      	movs	r2, #16
1000924c:	9702      	str	r7, [sp, #8]
1000924e:	2141      	movs	r1, #65	; 0x41
10009250:	2300      	movs	r3, #0
10009252:	f7f9 f98d 	bl	10002570 <optiga_crypt_rsa_generate_keypair>
10009256:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_SIGN,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
10009258:	d109      	bne.n	1000926e <example_optiga_crypt_rsa_generate_keypair+0x62>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000925a:	882b      	ldrh	r3, [r5, #0]
1000925c:	2b01      	cmp	r3, #1
1000925e:	d0fc      	beq.n	1000925a <example_optiga_crypt_rsa_generate_keypair+0x4e>
        {
            //Wait until the optiga_crypt_rsa_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009260:	882b      	ldrh	r3, [r5, #0]
10009262:	2b00      	cmp	r3, #0
10009264:	d008      	beq.n	10009278 <example_optiga_crypt_rsa_generate_keypair+0x6c>
        {
            //RSA Key pair generation failed
            return_status = optiga_lib_status;
10009266:	882a      	ldrh	r2, [r5, #0]
10009268:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
1000926a:	2a00      	cmp	r2, #0
1000926c:	d004      	beq.n	10009278 <example_optiga_crypt_rsa_generate_keypair+0x6c>
1000926e:	1c20      	adds	r0, r4, #0
10009270:	4910      	ldr	r1, [pc, #64]	; (100092b4 <example_optiga_crypt_rsa_generate_keypair+0xa8>)
10009272:	f7fb fa93 	bl	1000479c <optiga_lib_print_status>
10009276:	e006      	b.n	10009286 <example_optiga_crypt_rsa_generate_keypair+0x7a>
10009278:	1c20      	adds	r0, r4, #0
1000927a:	9905      	ldr	r1, [sp, #20]
1000927c:	2200      	movs	r2, #0
1000927e:	f7fb fa8d 	bl	1000479c <optiga_lib_print_status>

    if (me)
10009282:	2e00      	cmp	r6, #0
10009284:	d008      	beq.n	10009298 <example_optiga_crypt_rsa_generate_keypair+0x8c>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10009286:	1c30      	adds	r0, r6, #0
10009288:	f7f8 ff16 	bl	100020b8 <optiga_crypt_destroy>
1000928c:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
1000928e:	d003      	beq.n	10009298 <example_optiga_crypt_rsa_generate_keypair+0x8c>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009290:	1c20      	adds	r0, r4, #0
10009292:	4908      	ldr	r1, [pc, #32]	; (100092b4 <example_optiga_crypt_rsa_generate_keypair+0xa8>)
10009294:	f7fb fa82 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
10009298:	b02f      	add	sp, #188	; 0xbc
1000929a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000929c:	1000d2dc 	.word	0x1000d2dc
100092a0:	10010644 	.word	0x10010644
100092a4:	1001081c 	.word	0x1001081c
100092a8:	10009201 	.word	0x10009201
100092ac:	20002fa2 	.word	0x20002fa2
100092b0:	ffffe0fc 	.word	0xffffe0fc
100092b4:	10010659 	.word	0x10010659

100092b8 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
100092b8:	4b01      	ldr	r3, [pc, #4]	; (100092c0 <optiga_crypt_callback+0x8>)
100092ba:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
100092bc:	4770      	bx	lr
100092be:	46c0      	nop			; (mov r8, r8)
100092c0:	20002fa4 	.word	0x20002fa4

100092c4 <example_optiga_crypt_rsa_sign>:
 *
 * Example for #optiga_crypt_rsa_sign
 *
 */
void example_optiga_crypt_rsa_sign(void)
{
100092c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    //To store the signture generated
    uint8_t signature [200];
    uint16_t signature_length = sizeof(signature);
100092c6:	2716      	movs	r7, #22
 *
 * Example for #optiga_crypt_rsa_sign
 *
 */
void example_optiga_crypt_rsa_sign(void)
{
100092c8:	b0bb      	sub	sp, #236	; 0xec
    //To store the signture generated
    uint8_t signature [200];
    uint16_t signature_length = sizeof(signature);
100092ca:	ab02      	add	r3, sp, #8
100092cc:	18ff      	adds	r7, r7, r3
100092ce:	23c8      	movs	r3, #200	; 0xc8

    //Crypt Instance
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100092d0:	4d20      	ldr	r5, [pc, #128]	; (10009354 <example_optiga_crypt_rsa_sign+0x90>)
100092d2:	4c21      	ldr	r4, [pc, #132]	; (10009358 <example_optiga_crypt_rsa_sign+0x94>)
100092d4:	4821      	ldr	r0, [pc, #132]	; (1000935c <example_optiga_crypt_rsa_sign+0x98>)
100092d6:	1c21      	adds	r1, r4, #0
100092d8:	1c2a      	adds	r2, r5, #0
 */
void example_optiga_crypt_rsa_sign(void)
{
    //To store the signture generated
    uint8_t signature [200];
    uint16_t signature_length = sizeof(signature);
100092da:	803b      	strh	r3, [r7, #0]

    //Crypt Instance
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
100092dc:	f7fb fa2c 	bl	10004738 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
100092e0:	2000      	movs	r0, #0
100092e2:	491f      	ldr	r1, [pc, #124]	; (10009360 <example_optiga_crypt_rsa_sign+0x9c>)
100092e4:	1c02      	adds	r2, r0, #0
100092e6:	f7f8 febf 	bl	10002068 <optiga_crypt_create>
100092ea:	9505      	str	r5, [sp, #20]
100092ec:	1e06      	subs	r6, r0, #0
        if (NULL == me)
100092ee:	d01e      	beq.n	1000932e <example_optiga_crypt_rsa_sign+0x6a>
        /**
         * 2. Sign the digest -
         *       - Use Private key from Key Store ID E0FC
         *       - Signature scheme is SHA256,
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100092f0:	2101      	movs	r1, #1
100092f2:	4d1c      	ldr	r5, [pc, #112]	; (10009364 <example_optiga_crypt_rsa_sign+0xa0>)
        return_status = optiga_crypt_rsa_sign(me,
100092f4:	4b1c      	ldr	r3, [pc, #112]	; (10009368 <example_optiga_crypt_rsa_sign+0xa4>)
        /**
         * 2. Sign the digest -
         *       - Use Private key from Key Store ID E0FC
         *       - Signature scheme is SHA256,
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100092f6:	8029      	strh	r1, [r5, #0]
        return_status = optiga_crypt_rsa_sign(me,
100092f8:	9300      	str	r3, [sp, #0]
100092fa:	ab08      	add	r3, sp, #32
100092fc:	9301      	str	r3, [sp, #4]
100092fe:	2300      	movs	r3, #0
10009300:	4a1a      	ldr	r2, [pc, #104]	; (1000936c <example_optiga_crypt_rsa_sign+0xa8>)
10009302:	9303      	str	r3, [sp, #12]
10009304:	9702      	str	r7, [sp, #8]
10009306:	3320      	adds	r3, #32
10009308:	f7f9 f952 	bl	100025b0 <optiga_crypt_rsa_sign>
1000930c:	1e02      	subs	r2, r0, #0
                                              OPTIGA_KEY_ID_E0FC,
                                              signature,
                                              &signature_length,
                                              0x0000);

        if (OPTIGA_LIB_SUCCESS != return_status)
1000930e:	d109      	bne.n	10009324 <example_optiga_crypt_rsa_sign+0x60>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009310:	882b      	ldrh	r3, [r5, #0]
10009312:	2b01      	cmp	r3, #1
10009314:	d0fc      	beq.n	10009310 <example_optiga_crypt_rsa_sign+0x4c>
        {
            //Wait until the optiga_crypt_rsa_sign operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009316:	882b      	ldrh	r3, [r5, #0]
10009318:	2b00      	cmp	r3, #0
1000931a:	d008      	beq.n	1000932e <example_optiga_crypt_rsa_sign+0x6a>
        {
            //RSA Signature generation failed.
            return_status = optiga_lib_status;
1000931c:	882a      	ldrh	r2, [r5, #0]
1000931e:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009320:	2a00      	cmp	r2, #0
10009322:	d004      	beq.n	1000932e <example_optiga_crypt_rsa_sign+0x6a>
10009324:	1c20      	adds	r0, r4, #0
10009326:	4912      	ldr	r1, [pc, #72]	; (10009370 <example_optiga_crypt_rsa_sign+0xac>)
10009328:	f7fb fa38 	bl	1000479c <optiga_lib_print_status>
1000932c:	e006      	b.n	1000933c <example_optiga_crypt_rsa_sign+0x78>
1000932e:	1c20      	adds	r0, r4, #0
10009330:	9905      	ldr	r1, [sp, #20]
10009332:	2200      	movs	r2, #0
10009334:	f7fb fa32 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
10009338:	2e00      	cmp	r6, #0
1000933a:	d008      	beq.n	1000934e <example_optiga_crypt_rsa_sign+0x8a>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
1000933c:	1c30      	adds	r0, r6, #0
1000933e:	f7f8 febb 	bl	100020b8 <optiga_crypt_destroy>
10009342:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009344:	d003      	beq.n	1000934e <example_optiga_crypt_rsa_sign+0x8a>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009346:	1c20      	adds	r0, r4, #0
10009348:	4909      	ldr	r1, [pc, #36]	; (10009370 <example_optiga_crypt_rsa_sign+0xac>)
1000934a:	f7fb fa27 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
1000934e:	b03b      	add	sp, #236	; 0xec
10009350:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009352:	46c0      	nop			; (mov r8, r8)
10009354:	1000d2dc 	.word	0x1000d2dc
10009358:	10010644 	.word	0x10010644
1000935c:	10010846 	.word	0x10010846
10009360:	100092b9 	.word	0x100092b9
10009364:	20002fa4 	.word	0x20002fa4
10009368:	0000e0fc 	.word	0x0000e0fc
1000936c:	20001c39 	.word	0x20001c39
10009370:	10010659 	.word	0x10010659

10009374 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10009374:	4b01      	ldr	r3, [pc, #4]	; (1000937c <optiga_crypt_callback+0x8>)
10009376:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10009378:	4770      	bx	lr
1000937a:	46c0      	nop			; (mov r8, r8)
1000937c:	20002fa6 	.word	0x20002fa6

10009380 <example_optiga_crypt_rsa_verify>:
 *
 * Example for #optiga_crypt_rsa_verify
 *
 */
void example_optiga_crypt_rsa_verify(void)
{
10009380:	b5f0      	push	{r4, r5, r6, r7, lr}
10009382:	b08b      	sub	sp, #44	; 0x2c
    public_key_from_host_t public_key_details =
10009384:	af08      	add	r7, sp, #32
10009386:	1c3a      	adds	r2, r7, #0
         (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL
    };

    optiga_lib_status_t return_status = 0;
    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009388:	4d21      	ldr	r5, [pc, #132]	; (10009410 <example_optiga_crypt_rsa_verify+0x90>)
 * Example for #optiga_crypt_rsa_verify
 *
 */
void example_optiga_crypt_rsa_verify(void)
{
    public_key_from_host_t public_key_details =
1000938a:	4b22      	ldr	r3, [pc, #136]	; (10009414 <example_optiga_crypt_rsa_verify+0x94>)
         (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL
    };

    optiga_lib_status_t return_status = 0;
    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000938c:	4c22      	ldr	r4, [pc, #136]	; (10009418 <example_optiga_crypt_rsa_verify+0x98>)
 * Example for #optiga_crypt_rsa_verify
 *
 */
void example_optiga_crypt_rsa_verify(void)
{
    public_key_from_host_t public_key_details =
1000938e:	cb03      	ldmia	r3!, {r0, r1}
10009390:	c203      	stmia	r2!, {r0, r1}
         (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL
    };

    optiga_lib_status_t return_status = 0;
    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009392:	4822      	ldr	r0, [pc, #136]	; (1000941c <example_optiga_crypt_rsa_verify+0x9c>)
10009394:	1c21      	adds	r1, r4, #0
10009396:	1c2a      	adds	r2, r5, #0
10009398:	f7fb f9ce 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
1000939c:	2000      	movs	r0, #0
1000939e:	4920      	ldr	r1, [pc, #128]	; (10009420 <example_optiga_crypt_rsa_verify+0xa0>)
100093a0:	1c02      	adds	r2, r0, #0
100093a2:	f7f8 fe61 	bl	10002068 <optiga_crypt_create>
100093a6:	9507      	str	r5, [sp, #28]
100093a8:	1e06      	subs	r6, r0, #0
        if (NULL == me)
100093aa:	d01f      	beq.n	100093ec <example_optiga_crypt_rsa_verify+0x6c>
        }

        /**
         * 2. Verify RSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100093ac:	2101      	movs	r1, #1
        return_status = optiga_crypt_rsa_verify (me,
100093ae:	4b1d      	ldr	r3, [pc, #116]	; (10009424 <example_optiga_crypt_rsa_verify+0xa4>)
        }

        /**
         * 2. Verify RSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100093b0:	4d1d      	ldr	r5, [pc, #116]	; (10009428 <example_optiga_crypt_rsa_verify+0xa8>)
        return_status = optiga_crypt_rsa_verify (me,
100093b2:	4a1e      	ldr	r2, [pc, #120]	; (1000942c <example_optiga_crypt_rsa_verify+0xac>)
        }

        /**
         * 2. Verify RSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100093b4:	8029      	strh	r1, [r5, #0]
        return_status = optiga_crypt_rsa_verify (me,
100093b6:	9300      	str	r3, [sp, #0]
100093b8:	2380      	movs	r3, #128	; 0x80
100093ba:	9301      	str	r3, [sp, #4]
100093bc:	2300      	movs	r3, #0
100093be:	9102      	str	r1, [sp, #8]
100093c0:	9304      	str	r3, [sp, #16]
100093c2:	9703      	str	r7, [sp, #12]
100093c4:	3320      	adds	r3, #32
100093c6:	f7f9 f913 	bl	100025f0 <optiga_crypt_rsa_verify>
100093ca:	1e02      	subs	r2, r0, #0
                                                 sizeof(signature),
                                                 OPTIGA_CRYPT_HOST_DATA,
                                                 &public_key_details,
                                                 0x0000);

        if (OPTIGA_LIB_SUCCESS != return_status)
100093cc:	d109      	bne.n	100093e2 <example_optiga_crypt_rsa_verify+0x62>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100093ce:	882b      	ldrh	r3, [r5, #0]
100093d0:	2b01      	cmp	r3, #1
100093d2:	d0fc      	beq.n	100093ce <example_optiga_crypt_rsa_verify+0x4e>
        {
            //Wait until the optiga_crypt_rsa_verify operation is completed
        }

        if ((OPTIGA_LIB_SUCCESS != optiga_lib_status))
100093d4:	882b      	ldrh	r3, [r5, #0]
100093d6:	2b00      	cmp	r3, #0
100093d8:	d008      	beq.n	100093ec <example_optiga_crypt_rsa_verify+0x6c>
        {
            //RSA Signature verification failed.
            return_status = optiga_lib_status;
100093da:	882a      	ldrh	r2, [r5, #0]
100093dc:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100093de:	2a00      	cmp	r2, #0
100093e0:	d004      	beq.n	100093ec <example_optiga_crypt_rsa_verify+0x6c>
100093e2:	1c20      	adds	r0, r4, #0
100093e4:	4912      	ldr	r1, [pc, #72]	; (10009430 <example_optiga_crypt_rsa_verify+0xb0>)
100093e6:	f7fb f9d9 	bl	1000479c <optiga_lib_print_status>
100093ea:	e006      	b.n	100093fa <example_optiga_crypt_rsa_verify+0x7a>
100093ec:	1c20      	adds	r0, r4, #0
100093ee:	9907      	ldr	r1, [sp, #28]
100093f0:	2200      	movs	r2, #0
100093f2:	f7fb f9d3 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
100093f6:	2e00      	cmp	r6, #0
100093f8:	d008      	beq.n	1000940c <example_optiga_crypt_rsa_verify+0x8c>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
100093fa:	1c30      	adds	r0, r6, #0
100093fc:	f7f8 fe5c 	bl	100020b8 <optiga_crypt_destroy>
10009400:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009402:	d003      	beq.n	1000940c <example_optiga_crypt_rsa_verify+0x8c>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009404:	1c20      	adds	r0, r4, #0
10009406:	490a      	ldr	r1, [pc, #40]	; (10009430 <example_optiga_crypt_rsa_verify+0xb0>)
10009408:	f7fb f9c8 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
1000940c:	b00b      	add	sp, #44	; 0x2c
1000940e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009410:	1000d2dc 	.word	0x1000d2dc
10009414:	10010864 	.word	0x10010864
10009418:	10010644 	.word	0x10010644
1000941c:	1001086c 	.word	0x1001086c
10009420:	10009375 	.word	0x10009375
10009424:	20001c59 	.word	0x20001c59
10009428:	20002fa6 	.word	0x20002fa6
1000942c:	20001d6a 	.word	0x20001d6a
10009430:	10010659 	.word	0x10010659

10009434 <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10009434:	4b01      	ldr	r3, [pc, #4]	; (1000943c <optiga_lib_callback+0x8>)
10009436:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10009438:	4770      	bx	lr
1000943a:	46c0      	nop			; (mov r8, r8)
1000943c:	20002fa8 	.word	0x20002fa8

10009440 <example_optiga_crypt_tls_prf_sha256>:
/**
 * The below example demonstrates the key derivation using #optiga_crypt_tls_prf_sha256.
 *
 */
void example_optiga_crypt_tls_prf_sha256(void)
{
10009440:	b5f0      	push	{r4, r5, r6, r7, lr}
10009442:	b08d      	sub	sp, #52	; 0x34
    uint8_t decryption_key [16] = {0};
10009444:	2100      	movs	r1, #0
10009446:	2210      	movs	r2, #16
10009448:	a808      	add	r0, sp, #32
1000944a:	f003 fab7 	bl	1000c9bc <memset>

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
    optiga_util_t * me_util = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000944e:	4c57      	ldr	r4, [pc, #348]	; (100095ac <example_optiga_crypt_tls_prf_sha256+0x16c>)
10009450:	4d57      	ldr	r5, [pc, #348]	; (100095b0 <example_optiga_crypt_tls_prf_sha256+0x170>)
10009452:	4858      	ldr	r0, [pc, #352]	; (100095b4 <example_optiga_crypt_tls_prf_sha256+0x174>)
10009454:	1c29      	adds	r1, r5, #0
10009456:	1c22      	adds	r2, r4, #0
10009458:	f7fb f96e 	bl	10004738 <optiga_lib_print_message>
    do
    {

        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
1000945c:	2000      	movs	r0, #0
1000945e:	4f56      	ldr	r7, [pc, #344]	; (100095b8 <example_optiga_crypt_tls_prf_sha256+0x178>)
10009460:	1c02      	adds	r2, r0, #0
10009462:	1c39      	adds	r1, r7, #0
10009464:	f7f8 f9ba 	bl	100017dc <optiga_util_create>
10009468:	9407      	str	r4, [sp, #28]
1000946a:	9006      	str	r0, [sp, #24]
        if (NULL == me_util)
1000946c:	2800      	cmp	r0, #0
1000946e:	d06a      	beq.n	10009546 <example_optiga_crypt_tls_prf_sha256+0x106>
         *       - This is typically a one time activity and
         *       - use the this OID as input secret to derive keys further
         * 2. Use Erase and Write (OPTIGA_UTIL_ERASE_AND_WRITE) option,
         *    to clear the remaining data in the object
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009470:	2301      	movs	r3, #1
10009472:	4c52      	ldr	r4, [pc, #328]	; (100095bc <example_optiga_crypt_tls_prf_sha256+0x17c>)
        return_status = optiga_util_write_data(me_util,
10009474:	2240      	movs	r2, #64	; 0x40
         *       - This is typically a one time activity and
         *       - use the this OID as input secret to derive keys further
         * 2. Use Erase and Write (OPTIGA_UTIL_ERASE_AND_WRITE) option,
         *    to clear the remaining data in the object
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009476:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_write_data(me_util,
10009478:	4b51      	ldr	r3, [pc, #324]	; (100095c0 <example_optiga_crypt_tls_prf_sha256+0x180>)
1000947a:	4952      	ldr	r1, [pc, #328]	; (100095c4 <example_optiga_crypt_tls_prf_sha256+0x184>)
1000947c:	9300      	str	r3, [sp, #0]
1000947e:	2320      	movs	r3, #32
10009480:	9301      	str	r3, [sp, #4]
10009482:	2300      	movs	r3, #0
10009484:	f7f8 fb16 	bl	10001ab4 <optiga_util_write_data>
10009488:	1c23      	adds	r3, r4, #0
1000948a:	1e02      	subs	r2, r0, #0
                                               OPTIGA_UTIL_ERASE_AND_WRITE ,
                                               0x00,
                                               secret_to_be_written,
                                               sizeof(secret_to_be_written));

        if (OPTIGA_LIB_SUCCESS != return_status)
1000948c:	d000      	beq.n	10009490 <example_optiga_crypt_tls_prf_sha256+0x50>
1000948e:	e078      	b.n	10009582 <example_optiga_crypt_tls_prf_sha256+0x142>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009490:	881a      	ldrh	r2, [r3, #0]
10009492:	2a01      	cmp	r2, #1
10009494:	d0fc      	beq.n	10009490 <example_optiga_crypt_tls_prf_sha256+0x50>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009496:	881c      	ldrh	r4, [r3, #0]
10009498:	b2a4      	uxth	r4, r4
1000949a:	2c00      	cmp	r4, #0
1000949c:	d001      	beq.n	100094a2 <example_optiga_crypt_tls_prf_sha256+0x62>
        {
            //Write to data object is failed.
            return_status = optiga_lib_status;
1000949e:	881a      	ldrh	r2, [r3, #0]
100094a0:	e012      	b.n	100094c8 <example_optiga_crypt_tls_prf_sha256+0x88>
        /**
         * 2. Change data object type to PRESSEC
         *
         */

        optiga_lib_status = OPTIGA_LIB_BUSY;
100094a2:	2201      	movs	r2, #1
        return_status = optiga_util_write_metadata(me_util,
100094a4:	9806      	ldr	r0, [sp, #24]
        /**
         * 2. Change data object type to PRESSEC
         *
         */

        optiga_lib_status = OPTIGA_LIB_BUSY;
100094a6:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_write_metadata(me_util,
100094a8:	4946      	ldr	r1, [pc, #280]	; (100095c4 <example_optiga_crypt_tls_prf_sha256+0x184>)
100094aa:	4a47      	ldr	r2, [pc, #284]	; (100095c8 <example_optiga_crypt_tls_prf_sha256+0x188>)
100094ac:	2308      	movs	r3, #8
100094ae:	f7f8 fb29 	bl	10001b04 <optiga_util_write_metadata>
100094b2:	1e02      	subs	r2, r0, #0
                                                   0xF1D0,
                                                   metadata,
                                                   sizeof(metadata));

        if (OPTIGA_LIB_SUCCESS != return_status)
100094b4:	d166      	bne.n	10009584 <example_optiga_crypt_tls_prf_sha256+0x144>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100094b6:	4e41      	ldr	r6, [pc, #260]	; (100095bc <example_optiga_crypt_tls_prf_sha256+0x17c>)
100094b8:	8833      	ldrh	r3, [r6, #0]
100094ba:	2b01      	cmp	r3, #1
100094bc:	d0fb      	beq.n	100094b6 <example_optiga_crypt_tls_prf_sha256+0x76>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100094be:	8832      	ldrh	r2, [r6, #0]
100094c0:	b292      	uxth	r2, r2
100094c2:	2a00      	cmp	r2, #0
100094c4:	d004      	beq.n	100094d0 <example_optiga_crypt_tls_prf_sha256+0x90>
        {
            //writing metadata to a data object failed.
            return_status = optiga_lib_status;
100094c6:	8832      	ldrh	r2, [r6, #0]
100094c8:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100094ca:	1e14      	subs	r4, r2, #0
100094cc:	d03c      	beq.n	10009548 <example_optiga_crypt_tls_prf_sha256+0x108>
100094ce:	e060      	b.n	10009592 <example_optiga_crypt_tls_prf_sha256+0x152>

        /**
         * 3. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_lib_callback, NULL);
100094d0:	1c10      	adds	r0, r2, #0
100094d2:	1c39      	adds	r1, r7, #0
100094d4:	f7f8 fdc8 	bl	10002068 <optiga_crypt_create>
100094d8:	1e04      	subs	r4, r0, #0
        if (NULL == me)
100094da:	d034      	beq.n	10009546 <example_optiga_crypt_tls_prf_sha256+0x106>

        /**
         * 4. Derive key (e.g. decryption key) using optiga_crypt_tls_prf_sha256 with protected I2C communication.
         *       - Use shared secret from F1D0 data object
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100094dc:	2701      	movs	r7, #1

        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
100094de:	2102      	movs	r1, #2
100094e0:	1c3a      	adds	r2, r7, #0

        /**
         * 4. Derive key (e.g. decryption key) using optiga_crypt_tls_prf_sha256 with protected I2C communication.
         *       - Use shared secret from F1D0 data object
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100094e2:	8037      	strh	r7, [r6, #0]

        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
100094e4:	f7f8 fdb6 	bl	10002054 <optiga_crypt_set_comms_params>
        // Default protecition for this API is OPTIGA_COMMS_COMMAND_PROTECTION
        return_status = optiga_crypt_tls_prf_sha256(me,
100094e8:	4b38      	ldr	r3, [pc, #224]	; (100095cc <example_optiga_crypt_tls_prf_sha256+0x18c>)
100094ea:	aa08      	add	r2, sp, #32
100094ec:	9300      	str	r3, [sp, #0]
100094ee:	2320      	movs	r3, #32
100094f0:	9301      	str	r3, [sp, #4]
100094f2:	3b10      	subs	r3, #16
100094f4:	9204      	str	r2, [sp, #16]
100094f6:	9302      	str	r3, [sp, #8]
100094f8:	4a35      	ldr	r2, [pc, #212]	; (100095d0 <example_optiga_crypt_tls_prf_sha256+0x190>)
100094fa:	9703      	str	r7, [sp, #12]
100094fc:	1c20      	adds	r0, r4, #0
100094fe:	4931      	ldr	r1, [pc, #196]	; (100095c4 <example_optiga_crypt_tls_prf_sha256+0x184>)
10009500:	f7f8 ffca 	bl	10002498 <optiga_crypt_tls_prf_sha256>
10009504:	1e02      	subs	r2, r0, #0
                                                    sizeof(random_seed),
                                                    sizeof(decryption_key),
                                                    TRUE,
                                                    decryption_key);

        if (OPTIGA_LIB_SUCCESS != return_status)
10009506:	d13d      	bne.n	10009584 <example_optiga_crypt_tls_prf_sha256+0x144>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009508:	4b2c      	ldr	r3, [pc, #176]	; (100095bc <example_optiga_crypt_tls_prf_sha256+0x17c>)
1000950a:	881a      	ldrh	r2, [r3, #0]
1000950c:	1c1e      	adds	r6, r3, #0
1000950e:	2a01      	cmp	r2, #1
10009510:	d0fa      	beq.n	10009508 <example_optiga_crypt_tls_prf_sha256+0xc8>
        {
            //Wait until the optiga_crypt_tls_prf_sha256 operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009512:	881a      	ldrh	r2, [r3, #0]
10009514:	2a00      	cmp	r2, #0
10009516:	d001      	beq.n	1000951c <example_optiga_crypt_tls_prf_sha256+0xdc>
        {
            //Derive key operation failed.
            return_status = optiga_lib_status;
10009518:	881a      	ldrh	r2, [r3, #0]
1000951a:	e010      	b.n	1000953e <example_optiga_crypt_tls_prf_sha256+0xfe>
         * 5. Change meta data to default value
         *
         */


        optiga_lib_status = OPTIGA_LIB_BUSY;
1000951c:	2301      	movs	r3, #1
        return_status = optiga_util_write_metadata(me_util,
1000951e:	4a2d      	ldr	r2, [pc, #180]	; (100095d4 <example_optiga_crypt_tls_prf_sha256+0x194>)
         * 5. Change meta data to default value
         *
         */


        optiga_lib_status = OPTIGA_LIB_BUSY;
10009520:	8033      	strh	r3, [r6, #0]
        return_status = optiga_util_write_metadata(me_util,
10009522:	9806      	ldr	r0, [sp, #24]
10009524:	4927      	ldr	r1, [pc, #156]	; (100095c4 <example_optiga_crypt_tls_prf_sha256+0x184>)
10009526:	3307      	adds	r3, #7
10009528:	f7f8 faec 	bl	10001b04 <optiga_util_write_metadata>
1000952c:	1e02      	subs	r2, r0, #0
                                                   0xF1D0,
                                                   default_metadata,
                                                   sizeof(default_metadata));

        if (OPTIGA_LIB_SUCCESS != return_status)
1000952e:	d129      	bne.n	10009584 <example_optiga_crypt_tls_prf_sha256+0x144>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009530:	8833      	ldrh	r3, [r6, #0]
10009532:	2b01      	cmp	r3, #1
10009534:	d0fc      	beq.n	10009530 <example_optiga_crypt_tls_prf_sha256+0xf0>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009536:	8833      	ldrh	r3, [r6, #0]
10009538:	2b00      	cmp	r3, #0
1000953a:	d005      	beq.n	10009548 <example_optiga_crypt_tls_prf_sha256+0x108>
        {
            //writing metadata to a data object failed.
            return_status = optiga_lib_status;
1000953c:	8832      	ldrh	r2, [r6, #0]
1000953e:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009540:	2a00      	cmp	r2, #0
10009542:	d001      	beq.n	10009548 <example_optiga_crypt_tls_prf_sha256+0x108>
10009544:	e02a      	b.n	1000959c <example_optiga_crypt_tls_prf_sha256+0x15c>
{
    uint8_t decryption_key [16] = {0};

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
10009546:	2400      	movs	r4, #0
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009548:	1c28      	adds	r0, r5, #0
1000954a:	9907      	ldr	r1, [sp, #28]
1000954c:	2200      	movs	r2, #0
1000954e:	f7fb f925 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
10009552:	2c00      	cmp	r4, #0
10009554:	d008      	beq.n	10009568 <example_optiga_crypt_tls_prf_sha256+0x128>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
10009556:	1c20      	adds	r0, r4, #0
10009558:	f7f8 fdae 	bl	100020b8 <optiga_crypt_destroy>
1000955c:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
1000955e:	d003      	beq.n	10009568 <example_optiga_crypt_tls_prf_sha256+0x128>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009560:	1c28      	adds	r0, r5, #0
10009562:	491d      	ldr	r1, [pc, #116]	; (100095d8 <example_optiga_crypt_tls_prf_sha256+0x198>)
10009564:	f7fb f91a 	bl	1000479c <optiga_lib_print_status>
        }
    }

    if (me_util)
10009568:	9b06      	ldr	r3, [sp, #24]
1000956a:	2b00      	cmp	r3, #0
1000956c:	d01b      	beq.n	100095a6 <example_optiga_crypt_tls_prf_sha256+0x166>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
1000956e:	9806      	ldr	r0, [sp, #24]
10009570:	f7f8 f95c 	bl	1000182c <optiga_util_destroy>
10009574:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009576:	d016      	beq.n	100095a6 <example_optiga_crypt_tls_prf_sha256+0x166>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009578:	1c28      	adds	r0, r5, #0
1000957a:	4917      	ldr	r1, [pc, #92]	; (100095d8 <example_optiga_crypt_tls_prf_sha256+0x198>)
1000957c:	f7fb f90e 	bl	1000479c <optiga_lib_print_status>
10009580:	e011      	b.n	100095a6 <example_optiga_crypt_tls_prf_sha256+0x166>
{
    uint8_t decryption_key [16] = {0};

    optiga_lib_status_t return_status = 0;

    optiga_crypt_t * me = NULL;
10009582:	2400      	movs	r4, #0
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009584:	1c28      	adds	r0, r5, #0
10009586:	4914      	ldr	r1, [pc, #80]	; (100095d8 <example_optiga_crypt_tls_prf_sha256+0x198>)
10009588:	f7fb f908 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
1000958c:	2c00      	cmp	r4, #0
1000958e:	d1e2      	bne.n	10009556 <example_optiga_crypt_tls_prf_sha256+0x116>
10009590:	e7ed      	b.n	1000956e <example_optiga_crypt_tls_prf_sha256+0x12e>
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009592:	1c28      	adds	r0, r5, #0
10009594:	4910      	ldr	r1, [pc, #64]	; (100095d8 <example_optiga_crypt_tls_prf_sha256+0x198>)
10009596:	f7fb f901 	bl	1000479c <optiga_lib_print_status>
1000959a:	e7e8      	b.n	1000956e <example_optiga_crypt_tls_prf_sha256+0x12e>
1000959c:	1c28      	adds	r0, r5, #0
1000959e:	490e      	ldr	r1, [pc, #56]	; (100095d8 <example_optiga_crypt_tls_prf_sha256+0x198>)
100095a0:	f7fb f8fc 	bl	1000479c <optiga_lib_print_status>
100095a4:	e7d7      	b.n	10009556 <example_optiga_crypt_tls_prf_sha256+0x116>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
}
100095a6:	b00d      	add	sp, #52	; 0x34
100095a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100095aa:	46c0      	nop			; (mov r8, r8)
100095ac:	1000d2dc 	.word	0x1000d2dc
100095b0:	10010644 	.word	0x10010644
100095b4:	1001088c 	.word	0x1001088c
100095b8:	10009435 	.word	0x10009435
100095bc:	20002fa8 	.word	0x20002fa8
100095c0:	20001da2 	.word	0x20001da2
100095c4:	0000f1d0 	.word	0x0000f1d0
100095c8:	20001de2 	.word	0x20001de2
100095cc:	20001dc2 	.word	0x20001dc2
100095d0:	20001d92 	.word	0x20001d92
100095d4:	20001d8a 	.word	0x20001d8a
100095d8:	10010659 	.word	0x10010659

100095dc <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
100095dc:	4b01      	ldr	r3, [pc, #4]	; (100095e4 <optiga_lib_callback+0x8>)
100095de:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
100095e0:	4770      	bx	lr
100095e2:	46c0      	nop			; (mov r8, r8)
100095e4:	20002faa 	.word	0x20002faa

100095e8 <example_optiga_util_hibernate_restore>:
 *
 * Example for #optiga_util_open_application and #optiga_util_close_application
 *
 */
void example_optiga_util_hibernate_restore(void)
{
100095e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100095ea:	b0b7      	sub	sp, #220	; 0xdc
    optiga_crypt_t * me_crypt = NULL;
    // To store the public key generated
    uint8_t public_key [100];
    //To store the signature generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
100095ec:	466a      	mov	r2, sp
100095ee:	2350      	movs	r3, #80	; 0x50
    uint16_t bytes_to_read = 1;
    optiga_key_id_t optiga_key_id;
    optiga_lib_status_t return_status = 0;
    uint8_t security_event_counter = 0;
100095f0:	2600      	movs	r6, #0
    optiga_crypt_t * me_crypt = NULL;
    // To store the public key generated
    uint8_t public_key [100];
    //To store the signature generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
100095f2:	8293      	strh	r3, [r2, #20]
    uint16_t bytes_to_read = 1;
100095f4:	3b4f      	subs	r3, #79	; 0x4f
100095f6:	82d3      	strh	r3, [r2, #22]
    optiga_key_id_t optiga_key_id;
    optiga_lib_status_t return_status = 0;
    uint8_t security_event_counter = 0;
    public_key_from_host_t public_key_details;
    //To store the generated public key as part of Generate key pair
    uint16_t public_key_length = sizeof(public_key);
100095f8:	231a      	movs	r3, #26
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
    uint16_t bytes_to_read = 1;
    optiga_key_id_t optiga_key_id;
    optiga_lib_status_t return_status = 0;
    uint8_t security_event_counter = 0;
100095fa:	74d6      	strb	r6, [r2, #19]
    public_key_from_host_t public_key_details;
    //To store the generated public key as part of Generate key pair
    uint16_t public_key_length = sizeof(public_key);
100095fc:	2264      	movs	r2, #100	; 0x64
100095fe:	446b      	add	r3, sp
10009600:	801a      	strh	r2, [r3, #0]

    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009602:	487a      	ldr	r0, [pc, #488]	; (100097ec <example_optiga_util_hibernate_restore+0x204>)
10009604:	497a      	ldr	r1, [pc, #488]	; (100097f0 <example_optiga_util_hibernate_restore+0x208>)
10009606:	4a7b      	ldr	r2, [pc, #492]	; (100097f4 <example_optiga_util_hibernate_restore+0x20c>)
10009608:	f7fb f896 	bl	10004738 <optiga_lib_print_message>

    do
    {
        //Create an instance of optiga_util and optiga_crypt
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
1000960c:	4c7a      	ldr	r4, [pc, #488]	; (100097f8 <example_optiga_util_hibernate_restore+0x210>)
1000960e:	1c30      	adds	r0, r6, #0
10009610:	1c21      	adds	r1, r4, #0
10009612:	1c32      	adds	r2, r6, #0
10009614:	f7f8 f8e2 	bl	100017dc <optiga_util_create>
10009618:	1e07      	subs	r7, r0, #0
        if (NULL == me_util)
1000961a:	42b7      	cmp	r7, r6
1000961c:	d100      	bne.n	10009620 <example_optiga_util_hibernate_restore+0x38>
1000961e:	e0c7      	b.n	100097b0 <example_optiga_util_hibernate_restore+0x1c8>
        {
            break;
        }

        me_crypt = optiga_crypt_create(0, optiga_lib_callback, NULL);
10009620:	1c21      	adds	r1, r4, #0
10009622:	1c30      	adds	r0, r6, #0
10009624:	1c32      	adds	r2, r6, #0
10009626:	f7f8 fd1f 	bl	10002068 <optiga_crypt_create>
1000962a:	1e04      	subs	r4, r0, #0
        if (NULL == me_crypt)
1000962c:	42b4      	cmp	r4, r6
1000962e:	d100      	bne.n	10009632 <example_optiga_util_hibernate_restore+0x4a>
10009630:	e0be      	b.n	100097b0 <example_optiga_util_hibernate_restore+0x1c8>

        /**
         * 1. Open the application on OPTIGA which is a pre-condition to perform any other operations
         *    using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009632:	2301      	movs	r3, #1
10009634:	4d71      	ldr	r5, [pc, #452]	; (100097fc <example_optiga_util_hibernate_restore+0x214>)
        return_status = optiga_util_open_application(me_util, 0);
10009636:	1c38      	adds	r0, r7, #0
10009638:	1c31      	adds	r1, r6, #0

        /**
         * 1. Open the application on OPTIGA which is a pre-condition to perform any other operations
         *    using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000963a:	802b      	strh	r3, [r5, #0]
        return_status = optiga_util_open_application(me_util, 0);
1000963c:	f7f8 f90e 	bl	1000185c <optiga_util_open_application>
10009640:	1e02      	subs	r2, r0, #0

        if (OPTIGA_LIB_SUCCESS != return_status)
10009642:	42b2      	cmp	r2, r6
10009644:	d000      	beq.n	10009648 <example_optiga_util_hibernate_restore+0x60>
10009646:	e0ae      	b.n	100097a6 <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
10009648:	882b      	ldrh	r3, [r5, #0]
1000964a:	2b01      	cmp	r3, #1
1000964c:	d0fc      	beq.n	10009648 <example_optiga_util_hibernate_restore+0x60>
        {
            //Wait until the optiga_util_open_application is completed
        }
        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000964e:	882e      	ldrh	r6, [r5, #0]
10009650:	b2b6      	uxth	r6, r6
10009652:	2e00      	cmp	r6, #0
10009654:	d000      	beq.n	10009658 <example_optiga_util_hibernate_restore+0x70>
10009656:	e0a2      	b.n	1000979e <example_optiga_util_hibernate_restore+0x1b6>
        }

        /**
         * 2. Pairing the Host and OPTIGA using a pre-shared secret
         */
        example_pair_host_and_optiga_using_pre_shared_secret();
10009658:	f000 fad2 	bl	10009c00 <example_pair_host_and_optiga_using_pre_shared_secret>
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key generated in a Session OID
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000965c:	2101      	movs	r1, #1
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
1000965e:	1c20      	adds	r0, r4, #0
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key generated in a Session OID
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009660:	8029      	strh	r1, [r5, #0]
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
10009662:	2202      	movs	r2, #2
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key generated in a Session OID
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
10009664:	ad06      	add	r5, sp, #24
10009666:	802e      	strh	r6, [r5, #0]
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
10009668:	f7f8 fcf4 	bl	10002054 <optiga_crypt_set_comms_params>

        return_status = optiga_crypt_ecc_generate_keypair(me_crypt,
1000966c:	ab1d      	add	r3, sp, #116	; 0x74
1000966e:	9301      	str	r3, [sp, #4]
10009670:	231a      	movs	r3, #26
10009672:	446b      	add	r3, sp
10009674:	9302      	str	r3, [sp, #8]
10009676:	2210      	movs	r2, #16
10009678:	9500      	str	r5, [sp, #0]
1000967a:	1c20      	adds	r0, r4, #0
1000967c:	2103      	movs	r1, #3
1000967e:	1c33      	adds	r3, r6, #0
10009680:	f7f8 fe4e 	bl	10002320 <optiga_crypt_ecc_generate_keypair>
10009684:	1e02      	subs	r2, r0, #0
                                                          (uint8_t)OPTIGA_KEY_USAGE_SIGN,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
10009686:	d000      	beq.n	1000968a <example_optiga_util_hibernate_restore+0xa2>
10009688:	e08d      	b.n	100097a6 <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000968a:	4b5c      	ldr	r3, [pc, #368]	; (100097fc <example_optiga_util_hibernate_restore+0x214>)
1000968c:	881a      	ldrh	r2, [r3, #0]
1000968e:	2a01      	cmp	r2, #1
10009690:	d0fb      	beq.n	1000968a <example_optiga_util_hibernate_restore+0xa2>
        {
            //Wait until the optiga_crypt_ecc_generate_keypair operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009692:	881a      	ldrh	r2, [r3, #0]
10009694:	2a00      	cmp	r2, #0
10009696:	d000      	beq.n	1000969a <example_optiga_util_hibernate_restore+0xb2>
10009698:	e072      	b.n	10009780 <example_optiga_util_hibernate_restore+0x198>
         * 4. To perform the hibernate, Security Event Counter(SEC) must be 0.
         *    Read SEC data object (0xE0C5) and wait until SEC = 0
         */
        do
        {
            optiga_lib_status = OPTIGA_LIB_BUSY;
1000969a:	2301      	movs	r3, #1
1000969c:	4e57      	ldr	r6, [pc, #348]	; (100097fc <example_optiga_util_hibernate_restore+0x214>)
            return_status = optiga_util_read_data(me_util,
1000969e:	1c38      	adds	r0, r7, #0
         * 4. To perform the hibernate, Security Event Counter(SEC) must be 0.
         *    Read SEC data object (0xE0C5) and wait until SEC = 0
         */
        do
        {
            optiga_lib_status = OPTIGA_LIB_BUSY;
100096a0:	8033      	strh	r3, [r6, #0]
            return_status = optiga_util_read_data(me_util,
100096a2:	3315      	adds	r3, #21
100096a4:	446b      	add	r3, sp
100096a6:	9300      	str	r3, [sp, #0]
100096a8:	2313      	movs	r3, #19
100096aa:	4955      	ldr	r1, [pc, #340]	; (10009800 <example_optiga_util_hibernate_restore+0x218>)
100096ac:	2200      	movs	r2, #0
100096ae:	446b      	add	r3, sp
100096b0:	f7f8 f958 	bl	10001964 <optiga_util_read_data>
100096b4:	1c35      	adds	r5, r6, #0
                                                  0xE0C5,
                                                  0x0000,
                                                  &security_event_counter,
                                                  &bytes_to_read);

            if (OPTIGA_LIB_SUCCESS != return_status)
100096b6:	2800      	cmp	r0, #0
100096b8:	d10f      	bne.n	100096da <example_optiga_util_hibernate_restore+0xf2>
            {
                break;
            }

            while (OPTIGA_LIB_BUSY == optiga_lib_status)
100096ba:	882b      	ldrh	r3, [r5, #0]
100096bc:	2b01      	cmp	r3, #1
100096be:	d0fc      	beq.n	100096ba <example_optiga_util_hibernate_restore+0xd2>
            {
                //Wait until the optiga_util_read_data operation is completed
            }

            if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100096c0:	8833      	ldrh	r3, [r6, #0]
100096c2:	2b00      	cmp	r3, #0
100096c4:	d001      	beq.n	100096ca <example_optiga_util_hibernate_restore+0xe2>
            {
                //Reading the data object failed.
                return_status = optiga_lib_status;
100096c6:	882b      	ldrh	r3, [r5, #0]
                break;
100096c8:	e007      	b.n	100096da <example_optiga_util_hibernate_restore+0xf2>
            }
            pal_os_timer_delay_in_milliseconds(1000);
100096ca:	20fa      	movs	r0, #250	; 0xfa
100096cc:	0080      	lsls	r0, r0, #2
100096ce:	f7f8 f80d 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
        } while (0 != security_event_counter);
100096d2:	466b      	mov	r3, sp
100096d4:	7cdb      	ldrb	r3, [r3, #19]
100096d6:	2b00      	cmp	r3, #0
100096d8:	d1df      	bne.n	1000969a <example_optiga_util_hibernate_restore+0xb2>

        /**
         * 5. Hibernate the application on OPTIGA
         *    using optiga_util_close_application with perform_hibernate parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100096da:	2101      	movs	r1, #1
        return_status = optiga_util_close_application(me_util, 1);
100096dc:	1c38      	adds	r0, r7, #0

        /**
         * 5. Hibernate the application on OPTIGA
         *    using optiga_util_close_application with perform_hibernate parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100096de:	8029      	strh	r1, [r5, #0]
        return_status = optiga_util_close_application(me_util, 1);
100096e0:	f7f8 f8fe 	bl	100018e0 <optiga_util_close_application>
100096e4:	1e02      	subs	r2, r0, #0

        if (OPTIGA_LIB_SUCCESS != return_status)
100096e6:	d15e      	bne.n	100097a6 <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
100096e8:	882b      	ldrh	r3, [r5, #0]
100096ea:	2b01      	cmp	r3, #1
100096ec:	d0fc      	beq.n	100096e8 <example_optiga_util_hibernate_restore+0x100>
        {
            //Wait until the optiga_util_close_application is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100096ee:	882b      	ldrh	r3, [r5, #0]
100096f0:	2b00      	cmp	r3, #0
100096f2:	d154      	bne.n	1000979e <example_optiga_util_hibernate_restore+0x1b6>

        /**
         * 6. Restore the application on OPTIGA
         *    using optiga_util_open_application with perform_restore parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100096f4:	2101      	movs	r1, #1
        return_status = optiga_util_open_application(me_util, 1);
100096f6:	1c38      	adds	r0, r7, #0

        /**
         * 6. Restore the application on OPTIGA
         *    using optiga_util_open_application with perform_restore parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100096f8:	8029      	strh	r1, [r5, #0]
        return_status = optiga_util_open_application(me_util, 1);
100096fa:	f7f8 f8af 	bl	1000185c <optiga_util_open_application>
100096fe:	1e02      	subs	r2, r0, #0

        if (OPTIGA_LIB_SUCCESS != return_status)
10009700:	d151      	bne.n	100097a6 <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }
        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009702:	882b      	ldrh	r3, [r5, #0]
10009704:	2b01      	cmp	r3, #1
10009706:	d0fc      	beq.n	10009702 <example_optiga_util_hibernate_restore+0x11a>
        {
            //Wait until the optiga_util_open_application is completed
        }
        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009708:	882e      	ldrh	r6, [r5, #0]
1000970a:	b2b6      	uxth	r6, r6
1000970c:	2e00      	cmp	r6, #0
1000970e:	d146      	bne.n	1000979e <example_optiga_util_hibernate_restore+0x1b6>
        }

        /**
         * 7. Sign the digest using the session key from Step 3
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009710:	2101      	movs	r1, #1
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
10009712:	1c20      	adds	r0, r4, #0
10009714:	2202      	movs	r2, #2
        }

        /**
         * 7. Sign the digest using the session key from Step 3
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009716:	8029      	strh	r1, [r5, #0]
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
10009718:	f7f8 fc9c 	bl	10002054 <optiga_crypt_set_comms_params>
        return_status = optiga_crypt_ecdsa_sign(me_crypt,
1000971c:	ab09      	add	r3, sp, #36	; 0x24
1000971e:	9300      	str	r3, [sp, #0]
10009720:	ab05      	add	r3, sp, #20
10009722:	9301      	str	r3, [sp, #4]
10009724:	2220      	movs	r2, #32
10009726:	1c20      	adds	r0, r4, #0
10009728:	4936      	ldr	r1, [pc, #216]	; (10009804 <example_optiga_util_hibernate_restore+0x21c>)
1000972a:	1c33      	adds	r3, r6, #0
1000972c:	f7f8 fe18 	bl	10002360 <optiga_crypt_ecdsa_sign>
10009730:	1e02      	subs	r2, r0, #0
                                                sizeof(digest),
                                                OPTIGA_KEY_ID_SESSION_BASED,
                                                signature,
                                                &signature_length);

        if (OPTIGA_LIB_SUCCESS != return_status)
10009732:	d138      	bne.n	100097a6 <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009734:	882b      	ldrh	r3, [r5, #0]
10009736:	2b01      	cmp	r3, #1
10009738:	d0fc      	beq.n	10009734 <example_optiga_util_hibernate_restore+0x14c>
        {
            //Wait until the optiga_crypt_ecdsa_sign operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000973a:	882b      	ldrh	r3, [r5, #0]
1000973c:	2b00      	cmp	r3, #0
1000973e:	d12e      	bne.n	1000979e <example_optiga_util_hibernate_restore+0x1b6>

        /**
         * 8. Verify ECDSA signature using public key from step 2
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        public_key_details.public_key = public_key;
10009740:	a91d      	add	r1, sp, #116	; 0x74
10009742:	9107      	str	r1, [sp, #28]
        public_key_details.length = public_key_length;
10009744:	4669      	mov	r1, sp
10009746:	8b49      	ldrh	r1, [r1, #26]

        /**
         * 8. Verify ECDSA signature using public key from step 2
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        public_key_details.public_key = public_key;
10009748:	ab07      	add	r3, sp, #28
        public_key_details.length = public_key_length;
1000974a:	8099      	strh	r1, [r3, #4]
        public_key_details.key_type = (uint8_t)OPTIGA_ECC_CURVE_NIST_P_256;
1000974c:	2103      	movs	r1, #3
1000974e:	7199      	strb	r1, [r3, #6]
        return_status = optiga_crypt_ecdsa_verify (me_crypt,
10009750:	4669      	mov	r1, sp
        }

        /**
         * 8. Verify ECDSA signature using public key from step 2
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009752:	2201      	movs	r2, #1
        public_key_details.public_key = public_key;
        public_key_details.length = public_key_length;
        public_key_details.key_type = (uint8_t)OPTIGA_ECC_CURVE_NIST_P_256;
        return_status = optiga_crypt_ecdsa_verify (me_crypt,
10009754:	8a89      	ldrh	r1, [r1, #20]
        }

        /**
         * 8. Verify ECDSA signature using public key from step 2
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009756:	802a      	strh	r2, [r5, #0]
        public_key_details.public_key = public_key;
        public_key_details.length = public_key_length;
        public_key_details.key_type = (uint8_t)OPTIGA_ECC_CURVE_NIST_P_256;
        return_status = optiga_crypt_ecdsa_verify (me_crypt,
10009758:	1c20      	adds	r0, r4, #0
1000975a:	9100      	str	r1, [sp, #0]
1000975c:	9201      	str	r2, [sp, #4]
1000975e:	9302      	str	r3, [sp, #8]
10009760:	321f      	adds	r2, #31
10009762:	4928      	ldr	r1, [pc, #160]	; (10009804 <example_optiga_util_hibernate_restore+0x21c>)
10009764:	ab09      	add	r3, sp, #36	; 0x24
10009766:	f7f8 fe19 	bl	1000239c <optiga_crypt_ecdsa_verify>
1000976a:	1e02      	subs	r2, r0, #0
                                                   signature,
                                                   signature_length,
                                                   OPTIGA_CRYPT_HOST_DATA,
                                                   &public_key_details);

        if (OPTIGA_LIB_SUCCESS != return_status)
1000976c:	d11b      	bne.n	100097a6 <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000976e:	4b23      	ldr	r3, [pc, #140]	; (100097fc <example_optiga_util_hibernate_restore+0x214>)
10009770:	881a      	ldrh	r2, [r3, #0]
10009772:	1c1d      	adds	r5, r3, #0
10009774:	2a01      	cmp	r2, #1
10009776:	d0fa      	beq.n	1000976e <example_optiga_util_hibernate_restore+0x186>
        {
            //Wait until the optiga_crypt_ecdsa_verify operation is completed
        }

        if ((OPTIGA_LIB_SUCCESS != optiga_lib_status))
10009778:	8819      	ldrh	r1, [r3, #0]
1000977a:	b289      	uxth	r1, r1
1000977c:	2900      	cmp	r1, #0
1000977e:	d001      	beq.n	10009784 <example_optiga_util_hibernate_restore+0x19c>
        {
            //Signature verification failed.
            return_status = optiga_lib_status;
10009780:	881a      	ldrh	r2, [r3, #0]
10009782:	e00d      	b.n	100097a0 <example_optiga_util_hibernate_restore+0x1b8>

        /**
         * 9. Close the application on OPTIGA without hibernating
         *    using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009784:	2301      	movs	r3, #1
        return_status = optiga_util_close_application(me_util, 0);
10009786:	1c38      	adds	r0, r7, #0

        /**
         * 9. Close the application on OPTIGA without hibernating
         *    using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009788:	802b      	strh	r3, [r5, #0]
        return_status = optiga_util_close_application(me_util, 0);
1000978a:	f7f8 f8a9 	bl	100018e0 <optiga_util_close_application>
1000978e:	1e02      	subs	r2, r0, #0
        if (OPTIGA_LIB_SUCCESS != return_status)
10009790:	d109      	bne.n	100097a6 <example_optiga_util_hibernate_restore+0x1be>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
10009792:	882b      	ldrh	r3, [r5, #0]
10009794:	2b01      	cmp	r3, #1
10009796:	d0fc      	beq.n	10009792 <example_optiga_util_hibernate_restore+0x1aa>
        {
            //Wait until the optiga_util_close_application is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009798:	882b      	ldrh	r3, [r5, #0]
1000979a:	2b00      	cmp	r3, #0
1000979c:	d009      	beq.n	100097b2 <example_optiga_util_hibernate_restore+0x1ca>
        {
            //optiga_util_close_application failed
            return_status = optiga_lib_status;
1000979e:	882a      	ldrh	r2, [r5, #0]
100097a0:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100097a2:	2a00      	cmp	r2, #0
100097a4:	d005      	beq.n	100097b2 <example_optiga_util_hibernate_restore+0x1ca>
100097a6:	4812      	ldr	r0, [pc, #72]	; (100097f0 <example_optiga_util_hibernate_restore+0x208>)
100097a8:	4917      	ldr	r1, [pc, #92]	; (10009808 <example_optiga_util_hibernate_restore+0x220>)
100097aa:	f7fa fff7 	bl	1000479c <optiga_lib_print_status>
100097ae:	e007      	b.n	100097c0 <example_optiga_util_hibernate_restore+0x1d8>
 *
 */
void example_optiga_util_hibernate_restore(void)
{
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;
100097b0:	2400      	movs	r4, #0
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100097b2:	480f      	ldr	r0, [pc, #60]	; (100097f0 <example_optiga_util_hibernate_restore+0x208>)
100097b4:	490f      	ldr	r1, [pc, #60]	; (100097f4 <example_optiga_util_hibernate_restore+0x20c>)
100097b6:	2200      	movs	r2, #0
100097b8:	f7fa fff0 	bl	1000479c <optiga_lib_print_status>

    if (me_util)
100097bc:	2f00      	cmp	r7, #0
100097be:	d008      	beq.n	100097d2 <example_optiga_util_hibernate_restore+0x1ea>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
100097c0:	1c38      	adds	r0, r7, #0
100097c2:	f7f8 f833 	bl	1000182c <optiga_util_destroy>
100097c6:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
100097c8:	d003      	beq.n	100097d2 <example_optiga_util_hibernate_restore+0x1ea>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100097ca:	4809      	ldr	r0, [pc, #36]	; (100097f0 <example_optiga_util_hibernate_restore+0x208>)
100097cc:	490e      	ldr	r1, [pc, #56]	; (10009808 <example_optiga_util_hibernate_restore+0x220>)
100097ce:	f7fa ffe5 	bl	1000479c <optiga_lib_print_status>
        }
    }

    if (me_crypt)
100097d2:	2c00      	cmp	r4, #0
100097d4:	d008      	beq.n	100097e8 <example_optiga_util_hibernate_restore+0x200>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me_crypt);
100097d6:	1c20      	adds	r0, r4, #0
100097d8:	f7f8 fc6e 	bl	100020b8 <optiga_crypt_destroy>
100097dc:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
100097de:	d003      	beq.n	100097e8 <example_optiga_util_hibernate_restore+0x200>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100097e0:	4803      	ldr	r0, [pc, #12]	; (100097f0 <example_optiga_util_hibernate_restore+0x208>)
100097e2:	4909      	ldr	r1, [pc, #36]	; (10009808 <example_optiga_util_hibernate_restore+0x220>)
100097e4:	f7fa ffda 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
100097e8:	b037      	add	sp, #220	; 0xdc
100097ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
100097ec:	100108b0 	.word	0x100108b0
100097f0:	10010644 	.word	0x10010644
100097f4:	1000d2dc 	.word	0x1000d2dc
100097f8:	100095dd 	.word	0x100095dd
100097fc:	20002faa 	.word	0x20002faa
10009800:	0000e0c5 	.word	0x0000e0c5
10009804:	20001dea 	.word	0x20001dea
10009808:	10010659 	.word	0x10010659

1000980c <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
1000980c:	4b01      	ldr	r3, [pc, #4]	; (10009814 <optiga_util_callback+0x8>)
1000980e:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10009810:	4770      	bx	lr
10009812:	46c0      	nop			; (mov r8, r8)
10009814:	20002fac 	.word	0x20002fac

10009818 <example_optiga_util_protected_update>:
 * Example for #optiga_util_protected_update_start,#optiga_util_protected_update_continue
 *              & #optiga_util_protected_update_final.
 *
 */
void example_optiga_util_protected_update(void)
{
10009818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = 0;

    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
1000981a:	4e44      	ldr	r6, [pc, #272]	; (1000992c <example_optiga_util_protected_update+0x114>)
1000981c:	4f44      	ldr	r7, [pc, #272]	; (10009930 <example_optiga_util_protected_update+0x118>)
1000981e:	4845      	ldr	r0, [pc, #276]	; (10009934 <example_optiga_util_protected_update+0x11c>)
10009820:	1c31      	adds	r1, r6, #0
10009822:	1c3a      	adds	r2, r7, #0
10009824:	f7fa ff88 	bl	10004738 <optiga_lib_print_message>
    {
        /**
         *  Create OPTIGA util Instance
         *
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
10009828:	2000      	movs	r0, #0
1000982a:	4943      	ldr	r1, [pc, #268]	; (10009938 <example_optiga_util_protected_update+0x120>)
1000982c:	1c02      	adds	r2, r0, #0
1000982e:	f7f7 ffd5 	bl	100017dc <optiga_util_create>
10009832:	1e05      	subs	r5, r0, #0
        if (NULL == me)
10009834:	d063      	beq.n	100098fe <example_optiga_util_protected_update+0xe6>
    do
    {
        /**
        *   set meta data "0x20 0x09 0xD0 0x03 0x21 0xE0 0xE8 0xC1 0x02 0x00 0x00" for oids 0xE0E1
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009836:	2301      	movs	r3, #1
10009838:	4c40      	ldr	r4, [pc, #256]	; (1000993c <example_optiga_util_protected_update+0x124>)
        optiga_oid = 0xE0E1;
        return_status = optiga_util_write_metadata(me,
1000983a:	4a41      	ldr	r2, [pc, #260]	; (10009940 <example_optiga_util_protected_update+0x128>)
    do
    {
        /**
        *   set meta data "0x20 0x09 0xD0 0x03 0x21 0xE0 0xE8 0xC1 0x02 0x00 0x00" for oids 0xE0E1
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
1000983c:	8023      	strh	r3, [r4, #0]
        optiga_oid = 0xE0E1;
        return_status = optiga_util_write_metadata(me,
1000983e:	4941      	ldr	r1, [pc, #260]	; (10009944 <example_optiga_util_protected_update+0x12c>)
10009840:	330a      	adds	r3, #10
10009842:	f7f8 f95f 	bl	10001b04 <optiga_util_write_metadata>
10009846:	1e02      	subs	r2, r0, #0
                                                   optiga_oid,
                                                   E0E1_metadata,
                                                   sizeof(E0E1_metadata));

        if (OPTIGA_LIB_SUCCESS != return_status)
10009848:	d12f      	bne.n	100098aa <example_optiga_util_protected_update+0x92>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000984a:	8823      	ldrh	r3, [r4, #0]
1000984c:	2b01      	cmp	r3, #1
1000984e:	d0fc      	beq.n	1000984a <example_optiga_util_protected_update+0x32>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009850:	8823      	ldrh	r3, [r4, #0]
10009852:	2b00      	cmp	r3, #0
10009854:	d10d      	bne.n	10009872 <example_optiga_util_protected_update+0x5a>
        }

        /**
        *   set meta data "0x20 0x03 0xD3 0x01 0x00" for oid 0xE0E3
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009856:	3301      	adds	r3, #1
10009858:	8023      	strh	r3, [r4, #0]
        optiga_oid = 0xE0E3;
        return_status = optiga_util_write_metadata(me,
1000985a:	4a3b      	ldr	r2, [pc, #236]	; (10009948 <example_optiga_util_protected_update+0x130>)
1000985c:	1c28      	adds	r0, r5, #0
1000985e:	493b      	ldr	r1, [pc, #236]	; (1000994c <example_optiga_util_protected_update+0x134>)
10009860:	3307      	adds	r3, #7
10009862:	f7f8 f94f 	bl	10001b04 <optiga_util_write_metadata>
10009866:	1e02      	subs	r2, r0, #0
                                                   optiga_oid,
                                                   E0E3_metadata,
                                                   sizeof(E0E3_metadata));

        if (OPTIGA_LIB_SUCCESS != return_status)
10009868:	d11f      	bne.n	100098aa <example_optiga_util_protected_update+0x92>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000986a:	8823      	ldrh	r3, [r4, #0]
1000986c:	2b01      	cmp	r3, #1
1000986e:	d0fc      	beq.n	1000986a <example_optiga_util_protected_update+0x52>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009870:	8823      	ldrh	r3, [r4, #0]
    do
    {
        /**
        *   valid ECC-256 with sha256 certificate is available in oid 0xE0E3
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009872:	2301      	movs	r3, #1
10009874:	8023      	strh	r3, [r4, #0]
        optiga_oid = 0xE0E3;
        offset = 0x00;
        return_status = optiga_util_write_data(me,
10009876:	4b36      	ldr	r3, [pc, #216]	; (10009950 <example_optiga_util_protected_update+0x138>)
10009878:	2240      	movs	r2, #64	; 0x40
1000987a:	9300      	str	r3, [sp, #0]
1000987c:	2397      	movs	r3, #151	; 0x97
1000987e:	009b      	lsls	r3, r3, #2
10009880:	9301      	str	r3, [sp, #4]
10009882:	1c28      	adds	r0, r5, #0
10009884:	4931      	ldr	r1, [pc, #196]	; (1000994c <example_optiga_util_protected_update+0x134>)
10009886:	2300      	movs	r3, #0
10009888:	f7f8 f914 	bl	10001ab4 <optiga_util_write_data>
1000988c:	1e02      	subs	r2, r0, #0
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               trust_anchor,
                                               sizeof(trust_anchor));

        if (OPTIGA_LIB_SUCCESS != return_status)
1000988e:	d10c      	bne.n	100098aa <example_optiga_util_protected_update+0x92>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009890:	8823      	ldrh	r3, [r4, #0]
10009892:	2b01      	cmp	r3, #1
10009894:	d0fc      	beq.n	10009890 <example_optiga_util_protected_update+0x78>
            break;
        }
        /**
        *   Send the manifest using optiga_util_protected_update_start
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009896:	2101      	movs	r1, #1
        while (OPTIGA_LIB_BUSY == optiga_lib_status)
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009898:	8823      	ldrh	r3, [r4, #0]
        }
        /**
        *   Send the manifest using optiga_util_protected_update_start
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_protected_update_start(me,
1000989a:	4a2e      	ldr	r2, [pc, #184]	; (10009954 <example_optiga_util_protected_update+0x13c>)
1000989c:	1c28      	adds	r0, r5, #0
1000989e:	238b      	movs	r3, #139	; 0x8b
            break;
        }
        /**
        *   Send the manifest using optiga_util_protected_update_start
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100098a0:	8021      	strh	r1, [r4, #0]
        return_status = optiga_util_protected_update_start(me,
100098a2:	f7f8 f97d 	bl	10001ba0 <optiga_util_protected_update_start>
100098a6:	1e02      	subs	r2, r0, #0
                                                           0x01,
                                                           manifest,
                                                           sizeof(manifest));

        if (OPTIGA_LIB_SUCCESS != return_status)
100098a8:	d004      	beq.n	100098b4 <example_optiga_util_protected_update+0x9c>
            break;
        }

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100098aa:	1c30      	adds	r0, r6, #0
100098ac:	492a      	ldr	r1, [pc, #168]	; (10009958 <example_optiga_util_protected_update+0x140>)
100098ae:	f7fa ff75 	bl	1000479c <optiga_lib_print_status>
100098b2:	e02b      	b.n	1000990c <example_optiga_util_protected_update+0xf4>
        if (OPTIGA_LIB_SUCCESS != return_status)
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100098b4:	8823      	ldrh	r3, [r4, #0]
100098b6:	2b01      	cmp	r3, #1
100098b8:	d0fc      	beq.n	100098b4 <example_optiga_util_protected_update+0x9c>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100098ba:	8823      	ldrh	r3, [r4, #0]
100098bc:	2b00      	cmp	r3, #0
100098be:	d12f      	bne.n	10009920 <example_optiga_util_protected_update+0x108>

        /**
        *   Send the first fragment using optiga_util_protected_update_continue
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_protected_update_continue( me,
100098c0:	22a0      	movs	r2, #160	; 0xa0
        }

        /**
        *   Send the first fragment using optiga_util_protected_update_continue
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100098c2:	2301      	movs	r3, #1
        return_status = optiga_util_protected_update_continue( me,
100098c4:	0092      	lsls	r2, r2, #2
100098c6:	1c28      	adds	r0, r5, #0
100098c8:	4924      	ldr	r1, [pc, #144]	; (1000995c <example_optiga_util_protected_update+0x144>)
        }

        /**
        *   Send the first fragment using optiga_util_protected_update_continue
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100098ca:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_protected_update_continue( me,
100098cc:	f7f8 f9b4 	bl	10001c38 <optiga_util_protected_update_continue>
100098d0:	1e02      	subs	r2, r0, #0
                                                               continue_fragment_array,
                                                               sizeof(continue_fragment_array));

        if (OPTIGA_LIB_SUCCESS != return_status)
100098d2:	d1ea      	bne.n	100098aa <example_optiga_util_protected_update+0x92>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100098d4:	8823      	ldrh	r3, [r4, #0]
100098d6:	2b01      	cmp	r3, #1
100098d8:	d0fc      	beq.n	100098d4 <example_optiga_util_protected_update+0xbc>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100098da:	8823      	ldrh	r3, [r4, #0]
100098dc:	2b00      	cmp	r3, #0
100098de:	d11f      	bne.n	10009920 <example_optiga_util_protected_update+0x108>
        }

        /**
        *   Send the last fragment using optiga_util_protected_update_final
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100098e0:	2301      	movs	r3, #1
        return_status = optiga_util_protected_update_final(me,
100098e2:	2232      	movs	r2, #50	; 0x32
100098e4:	1c28      	adds	r0, r5, #0
100098e6:	491e      	ldr	r1, [pc, #120]	; (10009960 <example_optiga_util_protected_update+0x148>)
        }

        /**
        *   Send the last fragment using optiga_util_protected_update_final
        */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100098e8:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_protected_update_final(me,
100098ea:	f7f8 f9d5 	bl	10001c98 <optiga_util_protected_update_final>
100098ee:	1e02      	subs	r2, r0, #0
                                                           final_fragment_array,
                                                           sizeof(final_fragment_array));

        if (OPTIGA_LIB_SUCCESS != return_status)
100098f0:	d1db      	bne.n	100098aa <example_optiga_util_protected_update+0x92>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100098f2:	8823      	ldrh	r3, [r4, #0]
100098f4:	2b01      	cmp	r3, #1
100098f6:	d0fc      	beq.n	100098f2 <example_optiga_util_protected_update+0xda>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100098f8:	8823      	ldrh	r3, [r4, #0]
100098fa:	2b00      	cmp	r3, #0
100098fc:	d110      	bne.n	10009920 <example_optiga_util_protected_update+0x108>
            break;
        }

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
100098fe:	1c30      	adds	r0, r6, #0
10009900:	1c39      	adds	r1, r7, #0
10009902:	2200      	movs	r2, #0
10009904:	f7fa ff4a 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
10009908:	2d00      	cmp	r5, #0
1000990a:	d00e      	beq.n	1000992a <example_optiga_util_protected_update+0x112>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
1000990c:	1c28      	adds	r0, r5, #0
1000990e:	f7f7 ff8d 	bl	1000182c <optiga_util_destroy>
10009912:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009914:	d009      	beq.n	1000992a <example_optiga_util_protected_update+0x112>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009916:	1c30      	adds	r0, r6, #0
10009918:	490f      	ldr	r1, [pc, #60]	; (10009958 <example_optiga_util_protected_update+0x140>)
1000991a:	f7fa ff3f 	bl	1000479c <optiga_lib_print_status>
1000991e:	e004      	b.n	1000992a <example_optiga_util_protected_update+0x112>
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
        {
            //writing data to a data object failed.
            return_status = optiga_lib_status;
10009920:	8822      	ldrh	r2, [r4, #0]
10009922:	b292      	uxth	r2, r2
            break;
        }

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009924:	2a00      	cmp	r2, #0
10009926:	d0ea      	beq.n	100098fe <example_optiga_util_protected_update+0xe6>
10009928:	e7bf      	b.n	100098aa <example_optiga_util_protected_update+0x92>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
}
1000992a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000992c:	10010644 	.word	0x10010644
10009930:	1000d2dc 	.word	0x1000d2dc
10009934:	100108d6 	.word	0x100108d6
10009938:	1000980d 	.word	0x1000980d
1000993c:	20002fac 	.word	0x20002fac
10009940:	20002320 	.word	0x20002320
10009944:	0000e0e1 	.word	0x0000e0e1
10009948:	2000208a 	.word	0x2000208a
1000994c:	0000e0e3 	.word	0x0000e0e3
10009950:	200020c4 	.word	0x200020c4
10009954:	2000232b 	.word	0x2000232b
10009958:	10010659 	.word	0x10010659
1000995c:	20001e0a 	.word	0x20001e0a
10009960:	20002092 	.word	0x20002092

10009964 <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10009964:	4b01      	ldr	r3, [pc, #4]	; (1000996c <optiga_util_callback+0x8>)
10009966:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10009968:	4770      	bx	lr
1000996a:	46c0      	nop			; (mov r8, r8)
1000996c:	20002fae 	.word	0x20002fae

10009970 <example_optiga_util_read_data>:
 *
 * Example for #optiga_util_read_data and #optiga_util_read_metadata
 *
 */
void example_optiga_util_read_data(void)
{
10009970:	b5f0      	push	{r4, r5, r6, r7, lr}
10009972:	4c30      	ldr	r4, [pc, #192]	; (10009a34 <example_optiga_util_read_data+0xc4>)
    uint16_t offset, bytes_to_read;
    uint16_t optiga_oid;
    uint8_t read_data_buffer[1024];
    optiga_lib_status_t return_status = 0;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009974:	4e30      	ldr	r6, [pc, #192]	; (10009a38 <example_optiga_util_read_data+0xc8>)
 *
 * Example for #optiga_util_read_data and #optiga_util_read_metadata
 *
 */
void example_optiga_util_read_data(void)
{
10009976:	44a5      	add	sp, r4
    uint16_t offset, bytes_to_read;
    uint16_t optiga_oid;
    uint8_t read_data_buffer[1024];
    optiga_lib_status_t return_status = 0;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009978:	4c30      	ldr	r4, [pc, #192]	; (10009a3c <example_optiga_util_read_data+0xcc>)
1000997a:	4831      	ldr	r0, [pc, #196]	; (10009a40 <example_optiga_util_read_data+0xd0>)
1000997c:	1c31      	adds	r1, r6, #0
1000997e:	1c22      	adds	r2, r4, #0
10009980:	f7fa feda 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util Instance
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
10009984:	2000      	movs	r0, #0
10009986:	492f      	ldr	r1, [pc, #188]	; (10009a44 <example_optiga_util_read_data+0xd4>)
10009988:	1c02      	adds	r2, r0, #0
1000998a:	f7f7 ff27 	bl	100017dc <optiga_util_create>
1000998e:	9403      	str	r4, [sp, #12]
10009990:	1e05      	subs	r5, r0, #0
        if (NULL == me)
10009992:	d03c      	beq.n	10009a0e <example_optiga_util_read_data+0x9e>
        }

        //Read device end entity certificate from OPTIGA
        optiga_oid = 0xE0E0;
        offset = 0x00;
        bytes_to_read = sizeof(read_data_buffer);
10009994:	270e      	movs	r7, #14
10009996:	ab02      	add	r3, sp, #8
10009998:	18ff      	adds	r7, r7, r3
1000999a:	2380      	movs	r3, #128	; 0x80

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
1000999c:	2102      	movs	r1, #2
        }

        //Read device end entity certificate from OPTIGA
        optiga_oid = 0xE0E0;
        offset = 0x00;
        bytes_to_read = sizeof(read_data_buffer);
1000999e:	00db      	lsls	r3, r3, #3

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
100099a0:	2201      	movs	r2, #1
        }

        //Read device end entity certificate from OPTIGA
        optiga_oid = 0xE0E0;
        offset = 0x00;
        bytes_to_read = sizeof(read_data_buffer);
100099a2:	803b      	strh	r3, [r7, #0]

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
100099a4:	f7f7 ff10 	bl	100017c8 <optiga_util_set_comms_params>
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_RESPONSE_PROTECTION);
100099a8:	1c28      	adds	r0, r5, #0
100099aa:	2101      	movs	r1, #1
100099ac:	2202      	movs	r2, #2
100099ae:	f7f7 ff0b 	bl	100017c8 <optiga_util_set_comms_params>

        /**
         * 2. Read data from a data object (e.g. certificate data object)
         *    using optiga_util_read_data.
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100099b2:	2301      	movs	r3, #1
100099b4:	4c24      	ldr	r4, [pc, #144]	; (10009a48 <example_optiga_util_read_data+0xd8>)
        return_status = optiga_util_read_data(me,
100099b6:	2200      	movs	r2, #0

        /**
         * 2. Read data from a data object (e.g. certificate data object)
         *    using optiga_util_read_data.
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
100099b8:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_read_data(me,
100099ba:	1c28      	adds	r0, r5, #0
100099bc:	9700      	str	r7, [sp, #0]
100099be:	4923      	ldr	r1, [pc, #140]	; (10009a4c <example_optiga_util_read_data+0xdc>)
100099c0:	ab06      	add	r3, sp, #24
100099c2:	f7f7 ffcf 	bl	10001964 <optiga_util_read_data>
100099c6:	1e02      	subs	r2, r0, #0
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        if (OPTIGA_LIB_SUCCESS != return_status)
100099c8:	d11c      	bne.n	10009a04 <example_optiga_util_read_data+0x94>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100099ca:	8823      	ldrh	r3, [r4, #0]
100099cc:	2b01      	cmp	r3, #1
100099ce:	d0fc      	beq.n	100099ca <example_optiga_util_read_data+0x5a>
        {
            //Wait until the optiga_util_read_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100099d0:	8823      	ldrh	r3, [r4, #0]
100099d2:	2b00      	cmp	r3, #0
100099d4:	d112      	bne.n	100099fc <example_optiga_util_read_data+0x8c>
        /**
         * Read metadata of a data object (e.g. certificate data object E0E0)
         * using optiga_util_read_data.
         */
        optiga_oid = 0xE0E0;
        bytes_to_read = sizeof(read_data_buffer);
100099d6:	2380      	movs	r3, #128	; 0x80
100099d8:	00db      	lsls	r3, r3, #3
100099da:	803b      	strh	r3, [r7, #0]
        optiga_lib_status = OPTIGA_LIB_BUSY;
100099dc:	2301      	movs	r3, #1
        return_status = optiga_util_read_metadata(me,
100099de:	aa06      	add	r2, sp, #24
         * Read metadata of a data object (e.g. certificate data object E0E0)
         * using optiga_util_read_data.
         */
        optiga_oid = 0xE0E0;
        bytes_to_read = sizeof(read_data_buffer);
        optiga_lib_status = OPTIGA_LIB_BUSY;
100099e0:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_read_metadata(me,
100099e2:	1c28      	adds	r0, r5, #0
100099e4:	4919      	ldr	r1, [pc, #100]	; (10009a4c <example_optiga_util_read_data+0xdc>)
100099e6:	1c3b      	adds	r3, r7, #0
100099e8:	f7f8 f812 	bl	10001a10 <optiga_util_read_metadata>
100099ec:	1e02      	subs	r2, r0, #0
                                                  optiga_oid,
                                                  read_data_buffer,
                                                  &bytes_to_read);

        if (OPTIGA_LIB_SUCCESS != return_status)
100099ee:	d109      	bne.n	10009a04 <example_optiga_util_read_data+0x94>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
100099f0:	8823      	ldrh	r3, [r4, #0]
100099f2:	2b01      	cmp	r3, #1
100099f4:	d0fc      	beq.n	100099f0 <example_optiga_util_read_data+0x80>
        {
            //Wait until the optiga_util_read_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
100099f6:	8823      	ldrh	r3, [r4, #0]
100099f8:	2b00      	cmp	r3, #0
100099fa:	d008      	beq.n	10009a0e <example_optiga_util_read_data+0x9e>
        {
            //Reading metadata data object failed.
            return_status = optiga_lib_status;
100099fc:	8822      	ldrh	r2, [r4, #0]
100099fe:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009a00:	2a00      	cmp	r2, #0
10009a02:	d004      	beq.n	10009a0e <example_optiga_util_read_data+0x9e>
10009a04:	1c30      	adds	r0, r6, #0
10009a06:	4912      	ldr	r1, [pc, #72]	; (10009a50 <example_optiga_util_read_data+0xe0>)
10009a08:	f7fa fec8 	bl	1000479c <optiga_lib_print_status>
10009a0c:	e006      	b.n	10009a1c <example_optiga_util_read_data+0xac>
10009a0e:	1c30      	adds	r0, r6, #0
10009a10:	9903      	ldr	r1, [sp, #12]
10009a12:	2200      	movs	r2, #0
10009a14:	f7fa fec2 	bl	1000479c <optiga_lib_print_status>

    if (me)
10009a18:	2d00      	cmp	r5, #0
10009a1a:	d008      	beq.n	10009a2e <example_optiga_util_read_data+0xbe>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
10009a1c:	1c28      	adds	r0, r5, #0
10009a1e:	f7f7 ff05 	bl	1000182c <optiga_util_destroy>
10009a22:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009a24:	d003      	beq.n	10009a2e <example_optiga_util_read_data+0xbe>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009a26:	1c30      	adds	r0, r6, #0
10009a28:	4909      	ldr	r1, [pc, #36]	; (10009a50 <example_optiga_util_read_data+0xe0>)
10009a2a:	f7fa feb7 	bl	1000479c <optiga_lib_print_status>
        }
    }

}
10009a2e:	4b09      	ldr	r3, [pc, #36]	; (10009a54 <example_optiga_util_read_data+0xe4>)
10009a30:	449d      	add	sp, r3
10009a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009a34:	fffffbe4 	.word	0xfffffbe4
10009a38:	10010644 	.word	0x10010644
10009a3c:	1000d2dc 	.word	0x1000d2dc
10009a40:	100108fb 	.word	0x100108fb
10009a44:	10009965 	.word	0x10009965
10009a48:	20002fae 	.word	0x20002fae
10009a4c:	0000e0e0 	.word	0x0000e0e0
10009a50:	10010659 	.word	0x10010659
10009a54:	0000041c 	.word	0x0000041c

10009a58 <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10009a58:	4b01      	ldr	r3, [pc, #4]	; (10009a60 <optiga_util_callback+0x8>)
10009a5a:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10009a5c:	4770      	bx	lr
10009a5e:	46c0      	nop			; (mov r8, r8)
10009a60:	20002fb0 	.word	0x20002fb0

10009a64 <example_optiga_util_update_count>:
 *
 * Example for #optiga_util_update_count
 *
 */
void example_optiga_util_update_count(void)
{
10009a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t optiga_counter_oid;
    uint8_t offset;

    optiga_lib_status_t return_status = 0;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009a66:	4d25      	ldr	r5, [pc, #148]	; (10009afc <example_optiga_util_update_count+0x98>)
10009a68:	4f25      	ldr	r7, [pc, #148]	; (10009b00 <example_optiga_util_update_count+0x9c>)
10009a6a:	4826      	ldr	r0, [pc, #152]	; (10009b04 <example_optiga_util_update_count+0xa0>)
10009a6c:	1c29      	adds	r1, r5, #0
10009a6e:	1c3a      	adds	r2, r7, #0
10009a70:	f7fa fe62 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util Instance
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
10009a74:	2000      	movs	r0, #0
10009a76:	4924      	ldr	r1, [pc, #144]	; (10009b08 <example_optiga_util_update_count+0xa4>)
10009a78:	1c02      	adds	r2, r0, #0
10009a7a:	f7f7 feaf 	bl	100017dc <optiga_util_create>
10009a7e:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10009a80:	d02b      	beq.n	10009ada <example_optiga_util_update_count+0x76>
         * Use Erase and Write (OPTIGA_UTIL_ERASE_AND_WRITE) option,
         * in order to correctly update the used length of the object.
         */
        optiga_counter_oid = 0xE120;
        offset = 0x00;
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009a82:	2301      	movs	r3, #1
10009a84:	4c21      	ldr	r4, [pc, #132]	; (10009b0c <example_optiga_util_update_count+0xa8>)
        return_status = optiga_util_write_data(me,
10009a86:	2240      	movs	r2, #64	; 0x40
         * Use Erase and Write (OPTIGA_UTIL_ERASE_AND_WRITE) option,
         * in order to correctly update the used length of the object.
         */
        optiga_counter_oid = 0xE120;
        offset = 0x00;
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009a88:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_write_data(me,
10009a8a:	4b21      	ldr	r3, [pc, #132]	; (10009b10 <example_optiga_util_update_count+0xac>)
10009a8c:	4921      	ldr	r1, [pc, #132]	; (10009b14 <example_optiga_util_update_count+0xb0>)
10009a8e:	9300      	str	r3, [sp, #0]
10009a90:	2308      	movs	r3, #8
10009a92:	9301      	str	r3, [sp, #4]
10009a94:	2300      	movs	r3, #0
10009a96:	f7f8 f80d 	bl	10001ab4 <optiga_util_write_data>
10009a9a:	1e02      	subs	r2, r0, #0
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               initial_counter_object_data,
                                               sizeof(initial_counter_object_data));

        if (OPTIGA_LIB_SUCCESS != return_status)
10009a9c:	d118      	bne.n	10009ad0 <example_optiga_util_update_count+0x6c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009a9e:	8823      	ldrh	r3, [r4, #0]
10009aa0:	2b01      	cmp	r3, #1
10009aa2:	d0fc      	beq.n	10009a9e <example_optiga_util_update_count+0x3a>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009aa4:	8823      	ldrh	r3, [r4, #0]
10009aa6:	2b00      	cmp	r3, #0
10009aa8:	d10e      	bne.n	10009ac8 <example_optiga_util_update_count+0x64>
            return_status = optiga_lib_status;
            break;
        }

        // In this example, the counter is update by 5 and the final count would be 15
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009aaa:	2301      	movs	r3, #1
        return_status = optiga_util_update_count(me,
10009aac:	2205      	movs	r2, #5
10009aae:	1c30      	adds	r0, r6, #0
10009ab0:	4918      	ldr	r1, [pc, #96]	; (10009b14 <example_optiga_util_update_count+0xb0>)
            return_status = optiga_lib_status;
            break;
        }

        // In this example, the counter is update by 5 and the final count would be 15
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009ab2:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_update_count(me,
10009ab4:	f7f8 f91e 	bl	10001cf4 <optiga_util_update_count>
10009ab8:	1e02      	subs	r2, r0, #0
                                                 optiga_counter_oid,
                                                 0x05);

        if (OPTIGA_LIB_SUCCESS != return_status)
10009aba:	d109      	bne.n	10009ad0 <example_optiga_util_update_count+0x6c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009abc:	8823      	ldrh	r3, [r4, #0]
10009abe:	2b01      	cmp	r3, #1
10009ac0:	d0fc      	beq.n	10009abc <example_optiga_util_update_count+0x58>
        {
            //Wait until the optiga_util_update_count operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009ac2:	8823      	ldrh	r3, [r4, #0]
10009ac4:	2b00      	cmp	r3, #0
10009ac6:	d008      	beq.n	10009ada <example_optiga_util_update_count+0x76>
        {
            //Updating count of a counter data object failed.
            return_status = optiga_lib_status;
10009ac8:	8822      	ldrh	r2, [r4, #0]
10009aca:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009acc:	2a00      	cmp	r2, #0
10009ace:	d004      	beq.n	10009ada <example_optiga_util_update_count+0x76>
10009ad0:	1c28      	adds	r0, r5, #0
10009ad2:	4911      	ldr	r1, [pc, #68]	; (10009b18 <example_optiga_util_update_count+0xb4>)
10009ad4:	f7fa fe62 	bl	1000479c <optiga_lib_print_status>
10009ad8:	e006      	b.n	10009ae8 <example_optiga_util_update_count+0x84>
10009ada:	1c28      	adds	r0, r5, #0
10009adc:	1c39      	adds	r1, r7, #0
10009ade:	2200      	movs	r2, #0
10009ae0:	f7fa fe5c 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
10009ae4:	2e00      	cmp	r6, #0
10009ae6:	d008      	beq.n	10009afa <example_optiga_util_update_count+0x96>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
10009ae8:	1c30      	adds	r0, r6, #0
10009aea:	f7f7 fe9f 	bl	1000182c <optiga_util_destroy>
10009aee:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009af0:	d003      	beq.n	10009afa <example_optiga_util_update_count+0x96>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009af2:	1c28      	adds	r0, r5, #0
10009af4:	4908      	ldr	r1, [pc, #32]	; (10009b18 <example_optiga_util_update_count+0xb4>)
10009af6:	f7fa fe51 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
10009afa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10009afc:	10010644 	.word	0x10010644
10009b00:	1000d2dc 	.word	0x1000d2dc
10009b04:	10010919 	.word	0x10010919
10009b08:	10009a59 	.word	0x10009a59
10009b0c:	20002fb0 	.word	0x20002fb0
10009b10:	200023b6 	.word	0x200023b6
10009b14:	0000e120 	.word	0x0000e120
10009b18:	10010659 	.word	0x10010659

10009b1c <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10009b1c:	4b01      	ldr	r3, [pc, #4]	; (10009b24 <optiga_util_callback+0x8>)
10009b1e:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10009b20:	4770      	bx	lr
10009b22:	46c0      	nop			; (mov r8, r8)
10009b24:	20002fb2 	.word	0x20002fb2

10009b28 <example_optiga_util_write_data>:
 *
 * Example for #optiga_util_write_data and #optiga_util_write_metadata
 *
 */
void example_optiga_util_write_data(void)
{
10009b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t optiga_oid;
    uint16_t offset;

    optiga_lib_status_t return_status = 0;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009b2a:	4d28      	ldr	r5, [pc, #160]	; (10009bcc <example_optiga_util_write_data+0xa4>)
10009b2c:	4f28      	ldr	r7, [pc, #160]	; (10009bd0 <example_optiga_util_write_data+0xa8>)
10009b2e:	4829      	ldr	r0, [pc, #164]	; (10009bd4 <example_optiga_util_write_data+0xac>)
10009b30:	1c29      	adds	r1, r5, #0
10009b32:	1c3a      	adds	r2, r7, #0
10009b34:	f7fa fe00 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util Instance
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
10009b38:	2000      	movs	r0, #0
10009b3a:	4927      	ldr	r1, [pc, #156]	; (10009bd8 <example_optiga_util_write_data+0xb0>)
10009b3c:	1c02      	adds	r2, r0, #0
10009b3e:	f7f7 fe4d 	bl	100017dc <optiga_util_create>
10009b42:	1e06      	subs	r6, r0, #0
        if (NULL == me)
10009b44:	d031      	beq.n	10009baa <example_optiga_util_write_data+0x82>
         * to clear the remaining data in the object
         */
        optiga_oid = 0xE0E8;
        offset = 0x00;

        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
10009b46:	2101      	movs	r1, #1
10009b48:	2200      	movs	r2, #0
10009b4a:	f7f7 fe3d 	bl	100017c8 <optiga_util_set_comms_params>

        optiga_lib_status = OPTIGA_LIB_BUSY;
10009b4e:	2301      	movs	r3, #1
10009b50:	4c22      	ldr	r4, [pc, #136]	; (10009bdc <example_optiga_util_write_data+0xb4>)
        return_status = optiga_util_write_data(me,
10009b52:	2240      	movs	r2, #64	; 0x40
        optiga_oid = 0xE0E8;
        offset = 0x00;

        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);

        optiga_lib_status = OPTIGA_LIB_BUSY;
10009b54:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_write_data(me,
10009b56:	4b22      	ldr	r3, [pc, #136]	; (10009be0 <example_optiga_util_write_data+0xb8>)
10009b58:	1c30      	adds	r0, r6, #0
10009b5a:	9300      	str	r3, [sp, #0]
10009b5c:	4b21      	ldr	r3, [pc, #132]	; (10009be4 <example_optiga_util_write_data+0xbc>)
10009b5e:	4922      	ldr	r1, [pc, #136]	; (10009be8 <example_optiga_util_write_data+0xc0>)
10009b60:	9301      	str	r3, [sp, #4]
10009b62:	2300      	movs	r3, #0
10009b64:	f7f7 ffa6 	bl	10001ab4 <optiga_util_write_data>
10009b68:	1e02      	subs	r2, r0, #0
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               trust_anchor,
                                               sizeof(trust_anchor));

        if (OPTIGA_LIB_SUCCESS != return_status)
10009b6a:	d119      	bne.n	10009ba0 <example_optiga_util_write_data+0x78>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009b6c:	8823      	ldrh	r3, [r4, #0]
10009b6e:	2b01      	cmp	r3, #1
10009b70:	d0fc      	beq.n	10009b6c <example_optiga_util_write_data+0x44>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009b72:	8823      	ldrh	r3, [r4, #0]
10009b74:	2b00      	cmp	r3, #0
10009b76:	d10f      	bne.n	10009b98 <example_optiga_util_write_data+0x70>
         * using optiga_util_write_metadata.
         *
         * Sample metadata: write "Read" access condition as LcsO < Operational
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009b78:	2301      	movs	r3, #1
        return_status = optiga_util_write_metadata(me,
10009b7a:	4a1c      	ldr	r2, [pc, #112]	; (10009bec <example_optiga_util_write_data+0xc4>)
         * using optiga_util_write_metadata.
         *
         * Sample metadata: write "Read" access condition as LcsO < Operational
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009b7c:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_write_metadata(me,
10009b7e:	1c30      	adds	r0, r6, #0
10009b80:	4919      	ldr	r1, [pc, #100]	; (10009be8 <example_optiga_util_write_data+0xc0>)
10009b82:	3306      	adds	r3, #6
10009b84:	f7f7 ffbe 	bl	10001b04 <optiga_util_write_metadata>
10009b88:	1e02      	subs	r2, r0, #0
                                                   0xE0E8,
                                                   metadata,
                                                   sizeof(metadata));

        if (OPTIGA_LIB_SUCCESS != return_status)
10009b8a:	d109      	bne.n	10009ba0 <example_optiga_util_write_data+0x78>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
10009b8c:	8823      	ldrh	r3, [r4, #0]
10009b8e:	2b01      	cmp	r3, #1
10009b90:	d0fc      	beq.n	10009b8c <example_optiga_util_write_data+0x64>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009b92:	8823      	ldrh	r3, [r4, #0]
10009b94:	2b00      	cmp	r3, #0
10009b96:	d008      	beq.n	10009baa <example_optiga_util_write_data+0x82>
        {
            //writing metadata to a data object failed.
            return_status = optiga_lib_status;
10009b98:	8822      	ldrh	r2, [r4, #0]
10009b9a:	b292      	uxth	r2, r2
            break;
        }
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009b9c:	2a00      	cmp	r2, #0
10009b9e:	d004      	beq.n	10009baa <example_optiga_util_write_data+0x82>
10009ba0:	1c28      	adds	r0, r5, #0
10009ba2:	4913      	ldr	r1, [pc, #76]	; (10009bf0 <example_optiga_util_write_data+0xc8>)
10009ba4:	f7fa fdfa 	bl	1000479c <optiga_lib_print_status>
10009ba8:	e006      	b.n	10009bb8 <example_optiga_util_write_data+0x90>
10009baa:	1c28      	adds	r0, r5, #0
10009bac:	1c39      	adds	r1, r7, #0
10009bae:	2200      	movs	r2, #0
10009bb0:	f7fa fdf4 	bl	1000479c <optiga_lib_print_status>
    
    if (me)
10009bb4:	2e00      	cmp	r6, #0
10009bb6:	d008      	beq.n	10009bca <example_optiga_util_write_data+0xa2>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
10009bb8:	1c30      	adds	r0, r6, #0
10009bba:	f7f7 fe37 	bl	1000182c <optiga_util_destroy>
10009bbe:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009bc0:	d003      	beq.n	10009bca <example_optiga_util_write_data+0xa2>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009bc2:	1c28      	adds	r0, r5, #0
10009bc4:	490a      	ldr	r1, [pc, #40]	; (10009bf0 <example_optiga_util_write_data+0xc8>)
10009bc6:	f7fa fde9 	bl	1000479c <optiga_lib_print_status>
        }
    }
}
10009bca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10009bcc:	10010644 	.word	0x10010644
10009bd0:	1000d2dc 	.word	0x1000d2dc
10009bd4:	1001093a 	.word	0x1001093a
10009bd8:	10009b1d 	.word	0x10009b1d
10009bdc:	20002fb2 	.word	0x20002fb2
10009be0:	200023be 	.word	0x200023be
10009be4:	00000282 	.word	0x00000282
10009be8:	0000e0e8 	.word	0x0000e0e8
10009bec:	20002640 	.word	0x20002640
10009bf0:	10010659 	.word	0x10010659

10009bf4 <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
10009bf4:	4b01      	ldr	r3, [pc, #4]	; (10009bfc <optiga_lib_callback+0x8>)
10009bf6:	8019      	strh	r1, [r3, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
10009bf8:	4770      	bx	lr
10009bfa:	46c0      	nop			; (mov r8, r8)
10009bfc:	20002fb4 	.word	0x20002fb4

10009c00 <example_pair_host_and_optiga_using_pre_shared_secret>:
 *
 * Preconditions: The optiga_util_open_application must be executed before invoking the below example.
 *
 */
void example_pair_host_and_optiga_using_pre_shared_secret(void)
{
10009c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = 0;
    pal_status_t pal_return_status;
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;

    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009c02:	4f59      	ldr	r7, [pc, #356]	; (10009d68 <example_pair_host_and_optiga_using_pre_shared_secret+0x168>)
10009c04:	4e59      	ldr	r6, [pc, #356]	; (10009d6c <example_pair_host_and_optiga_using_pre_shared_secret+0x16c>)
 *
 * Preconditions: The optiga_util_open_application must be executed before invoking the below example.
 *
 */
void example_pair_host_and_optiga_using_pre_shared_secret(void)
{
10009c06:	b0a1      	sub	sp, #132	; 0x84
    optiga_lib_status_t return_status = 0;
    pal_status_t pal_return_status;
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;

    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
10009c08:	4859      	ldr	r0, [pc, #356]	; (10009d70 <example_pair_host_and_optiga_using_pre_shared_secret+0x170>)
10009c0a:	1c39      	adds	r1, r7, #0
10009c0c:	1c32      	adds	r2, r6, #0
10009c0e:	f7fa fd93 	bl	10004738 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util and Crypt Instances
         */
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
10009c12:	2000      	movs	r0, #0
10009c14:	4c57      	ldr	r4, [pc, #348]	; (10009d74 <example_pair_host_and_optiga_using_pre_shared_secret+0x174>)
10009c16:	1c02      	adds	r2, r0, #0
10009c18:	1c21      	adds	r1, r4, #0
10009c1a:	f7f7 fddf 	bl	100017dc <optiga_util_create>
10009c1e:	9702      	str	r7, [sp, #8]
10009c20:	1e05      	subs	r5, r0, #0
10009c22:	9603      	str	r6, [sp, #12]
        if (NULL == me_util)
10009c24:	d100      	bne.n	10009c28 <example_pair_host_and_optiga_using_pre_shared_secret+0x28>
10009c26:	e081      	b.n	10009d2c <example_pair_host_and_optiga_using_pre_shared_secret+0x12c>
        {
            break;
        }

        me_crypt = optiga_crypt_create(0, optiga_lib_callback, NULL);
10009c28:	2000      	movs	r0, #0
10009c2a:	1c21      	adds	r1, r4, #0
10009c2c:	1c02      	adds	r2, r0, #0
10009c2e:	f7f8 fa1b 	bl	10002068 <optiga_crypt_create>
10009c32:	1e06      	subs	r6, r0, #0
        if (NULL == me_crypt)
10009c34:	d100      	bne.n	10009c38 <example_pair_host_and_optiga_using_pre_shared_secret+0x38>
10009c36:	e079      	b.n	10009d2c <example_pair_host_and_optiga_using_pre_shared_secret+0x12c>
        }

        /**
         * 2. Initialize the protection level and protocol version for the instances
         */
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
10009c38:	1c28      	adds	r0, r5, #0
10009c3a:	2101      	movs	r1, #1
10009c3c:	2200      	movs	r2, #0
10009c3e:	f7f7 fdc3 	bl	100017c8 <optiga_util_set_comms_params>
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me_util,OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10009c42:	1c28      	adds	r0, r5, #0
10009c44:	2102      	movs	r1, #2
10009c46:	2201      	movs	r2, #1
10009c48:	f7f7 fdbe 	bl	100017c8 <optiga_util_set_comms_params>

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt,OPTIGA_COMMS_NO_PROTECTION);
10009c4c:	1c30      	adds	r0, r6, #0
10009c4e:	2101      	movs	r1, #1
10009c50:	2200      	movs	r2, #0
10009c52:	f7f8 f9ff 	bl	10002054 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me_crypt,OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
10009c56:	1c30      	adds	r0, r6, #0
10009c58:	2102      	movs	r1, #2
10009c5a:	2201      	movs	r2, #1
10009c5c:	f7f8 f9fa 	bl	10002054 <optiga_crypt_set_comms_params>

        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
10009c60:	230a      	movs	r3, #10
10009c62:	aa02      	add	r2, sp, #8
10009c64:	189b      	adds	r3, r3, r2
10009c66:	222c      	movs	r2, #44	; 0x2c
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009c68:	4c43      	ldr	r4, [pc, #268]	; (10009d78 <example_pair_host_and_optiga_using_pre_shared_secret+0x178>)

        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
10009c6a:	801a      	strh	r2, [r3, #0]
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_read_metadata(me_util,
10009c6c:	af05      	add	r7, sp, #20
        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009c6e:	3a2b      	subs	r2, #43	; 0x2b
10009c70:	8022      	strh	r2, [r4, #0]
        return_status = optiga_util_read_metadata(me_util,
10009c72:	1c28      	adds	r0, r5, #0
10009c74:	1c3a      	adds	r2, r7, #0
10009c76:	4941      	ldr	r1, [pc, #260]	; (10009d7c <example_pair_host_and_optiga_using_pre_shared_secret+0x17c>)
10009c78:	f7f7 feca 	bl	10001a10 <optiga_util_read_metadata>
10009c7c:	1e02      	subs	r2, r0, #0
                                                  0xE140,
                                                  platform_binding_secret_metadata,
                                                  &bytes_to_read);

        if (OPTIGA_LIB_SUCCESS != return_status)
10009c7e:	d150      	bne.n	10009d22 <example_pair_host_and_optiga_using_pre_shared_secret+0x122>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
10009c80:	8823      	ldrh	r3, [r4, #0]
10009c82:	2b01      	cmp	r3, #1
10009c84:	d0fc      	beq.n	10009c80 <example_pair_host_and_optiga_using_pre_shared_secret+0x80>
        {
            //Wait until the optiga_util_read_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009c86:	8821      	ldrh	r1, [r4, #0]
10009c88:	b289      	uxth	r1, r1
10009c8a:	2900      	cmp	r1, #0
10009c8c:	d145      	bne.n	10009d1a <example_pair_host_and_optiga_using_pre_shared_secret+0x11a>

        /**
         * 4. Validate LcsO in the metadata.
         *    Skip the rest of the procedure if LcsO is greater than or equal to operational state(0x07)
         */
        if (platform_binding_secret_metadata[4] >= LCSO_STATE_OPERATIONAL)
10009c8e:	793b      	ldrb	r3, [r7, #4]
10009c90:	2b06      	cmp	r3, #6
10009c92:	d84c      	bhi.n	10009d2e <example_pair_host_and_optiga_using_pre_shared_secret+0x12e>
         *    b. If the host platform doesn't support random generation,
         *       use OPTIGA to generate the maximum size chosen.
         *       else choose the appropriate length of random to be generted by OPTIGA
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009c94:	2301      	movs	r3, #1
        return_status = optiga_crypt_random(me_crypt,
10009c96:	aa10      	add	r2, sp, #64	; 0x40
         *    b. If the host platform doesn't support random generation,
         *       use OPTIGA to generate the maximum size chosen.
         *       else choose the appropriate length of random to be generted by OPTIGA
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009c98:	8023      	strh	r3, [r4, #0]
        return_status = optiga_crypt_random(me_crypt,
10009c9a:	1c30      	adds	r0, r6, #0
10009c9c:	333f      	adds	r3, #63	; 0x3f
10009c9e:	f7f8 fa23 	bl	100020e8 <optiga_crypt_random>
10009ca2:	1e02      	subs	r2, r0, #0
                                            OPTIGA_RNG_TYPE_TRNG,
                                            platform_binding_secret,
                                            sizeof(platform_binding_secret));
        if (OPTIGA_LIB_SUCCESS != return_status)
10009ca4:	d13d      	bne.n	10009d22 <example_pair_host_and_optiga_using_pre_shared_secret+0x122>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
10009ca6:	8823      	ldrh	r3, [r4, #0]
10009ca8:	2b01      	cmp	r3, #1
10009caa:	d0fc      	beq.n	10009ca6 <example_pair_host_and_optiga_using_pre_shared_secret+0xa6>
        {
            //Wait until the optiga_crypt_random operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009cac:	8827      	ldrh	r7, [r4, #0]
10009cae:	b2bf      	uxth	r7, r7
10009cb0:	2f00      	cmp	r7, #0
10009cb2:	d132      	bne.n	10009d1a <example_pair_host_and_optiga_using_pre_shared_secret+0x11a>


        /**
         * 7. Write random(secret) to OPTIGA platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009cb4:	2101      	movs	r1, #1
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
10009cb6:	1c28      	adds	r0, r5, #0
10009cb8:	1c3a      	adds	r2, r7, #0


        /**
         * 7. Write random(secret) to OPTIGA platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009cba:	8021      	strh	r1, [r4, #0]
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
10009cbc:	f7f7 fd84 	bl	100017c8 <optiga_util_set_comms_params>
        return_status = optiga_util_write_data(me_util,
10009cc0:	2240      	movs	r2, #64	; 0x40
10009cc2:	ab10      	add	r3, sp, #64	; 0x40
10009cc4:	9300      	str	r3, [sp, #0]
10009cc6:	9201      	str	r2, [sp, #4]
10009cc8:	1c28      	adds	r0, r5, #0
10009cca:	492c      	ldr	r1, [pc, #176]	; (10009d7c <example_pair_host_and_optiga_using_pre_shared_secret+0x17c>)
10009ccc:	1c3b      	adds	r3, r7, #0
10009cce:	f7f7 fef1 	bl	10001ab4 <optiga_util_write_data>
10009cd2:	1e02      	subs	r2, r0, #0
                                               0xE140,
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
                                               platform_binding_secret,
                                               sizeof(platform_binding_secret));
        if (OPTIGA_LIB_SUCCESS != return_status)
10009cd4:	d125      	bne.n	10009d22 <example_pair_host_and_optiga_using_pre_shared_secret+0x122>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
10009cd6:	8823      	ldrh	r3, [r4, #0]
10009cd8:	2b01      	cmp	r3, #1
10009cda:	d0fc      	beq.n	10009cd6 <example_pair_host_and_optiga_using_pre_shared_secret+0xd6>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009cdc:	8823      	ldrh	r3, [r4, #0]
10009cde:	2b00      	cmp	r3, #0
10009ce0:	d11b      	bne.n	10009d1a <example_pair_host_and_optiga_using_pre_shared_secret+0x11a>

        /**
         * 8. Write/store the random(secret) on the Host platform
         *
         */
        pal_return_status = pal_os_datastore_write(OPTIGA_PLATFORM_BINDING_SHARED_SECRET_ID,
10009ce2:	2240      	movs	r2, #64	; 0x40
10009ce4:	2011      	movs	r0, #17
10009ce6:	a910      	add	r1, sp, #64	; 0x40
10009ce8:	f7f7 fc4c 	bl	10001584 <pal_os_datastore_write>
10009cec:	1e02      	subs	r2, r0, #0
                                                   platform_binding_secret,
                                                   sizeof(platform_binding_secret));

        if (PAL_STATUS_SUCCESS != pal_return_status)
10009cee:	d001      	beq.n	10009cf4 <example_pair_host_and_optiga_using_pre_shared_secret+0xf4>
        {
            //Storing of Pre-shared secret on Host failed.
            optiga_lib_status = pal_return_status;
10009cf0:	8020      	strh	r0, [r4, #0]
            break;
10009cf2:	e01c      	b.n	10009d2e <example_pair_host_and_optiga_using_pre_shared_secret+0x12e>


        /**
         * 9. Update metadata of OPTIGA Platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009cf4:	2101      	movs	r1, #1
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
10009cf6:	1c28      	adds	r0, r5, #0


        /**
         * 9. Update metadata of OPTIGA Platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
10009cf8:	8021      	strh	r1, [r4, #0]
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
10009cfa:	f7f7 fd65 	bl	100017c8 <optiga_util_set_comms_params>
        return_status = optiga_util_write_metadata(me_util,
10009cfe:	4a20      	ldr	r2, [pc, #128]	; (10009d80 <example_pair_host_and_optiga_using_pre_shared_secret+0x180>)
10009d00:	1c28      	adds	r0, r5, #0
10009d02:	491e      	ldr	r1, [pc, #120]	; (10009d7c <example_pair_host_and_optiga_using_pre_shared_secret+0x17c>)
10009d04:	2319      	movs	r3, #25
10009d06:	f7f7 fefd 	bl	10001b04 <optiga_util_write_metadata>
10009d0a:	1e02      	subs	r2, r0, #0
                                                   0xE140,
                                                   platform_binding_shared_secret_metadata_final,
                                                   sizeof(platform_binding_shared_secret_metadata_final));

        if (OPTIGA_LIB_SUCCESS != return_status)
10009d0c:	d109      	bne.n	10009d22 <example_pair_host_and_optiga_using_pre_shared_secret+0x122>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
10009d0e:	8823      	ldrh	r3, [r4, #0]
10009d10:	2b01      	cmp	r3, #1
10009d12:	d0fc      	beq.n	10009d0e <example_pair_host_and_optiga_using_pre_shared_secret+0x10e>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
10009d14:	8823      	ldrh	r3, [r4, #0]
10009d16:	2b00      	cmp	r3, #0
10009d18:	d009      	beq.n	10009d2e <example_pair_host_and_optiga_using_pre_shared_secret+0x12e>
        {
            //writing metadata to a data object failed.
            return_status = optiga_lib_status;
10009d1a:	8822      	ldrh	r2, [r4, #0]
10009d1c:	b292      	uxth	r2, r2
        }

        return_status = OPTIGA_LIB_SUCCESS;

    } while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009d1e:	2a00      	cmp	r2, #0
10009d20:	d005      	beq.n	10009d2e <example_pair_host_and_optiga_using_pre_shared_secret+0x12e>
10009d22:	9802      	ldr	r0, [sp, #8]
10009d24:	4917      	ldr	r1, [pc, #92]	; (10009d84 <example_pair_host_and_optiga_using_pre_shared_secret+0x184>)
10009d26:	f7fa fd39 	bl	1000479c <optiga_lib_print_status>
10009d2a:	e007      	b.n	10009d3c <example_pair_host_and_optiga_using_pre_shared_secret+0x13c>
    uint8_t platform_binding_secret[64];
    uint8_t platform_binding_secret_metadata[44];
    optiga_lib_status_t return_status = 0;
    pal_status_t pal_return_status;
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;
10009d2c:	2600      	movs	r6, #0
        }

        return_status = OPTIGA_LIB_SUCCESS;

    } while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009d2e:	9802      	ldr	r0, [sp, #8]
10009d30:	9903      	ldr	r1, [sp, #12]
10009d32:	2200      	movs	r2, #0
10009d34:	f7fa fd32 	bl	1000479c <optiga_lib_print_status>
    
    if(me_util)
10009d38:	2d00      	cmp	r5, #0
10009d3a:	d008      	beq.n	10009d4e <example_pair_host_and_optiga_using_pre_shared_secret+0x14e>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
10009d3c:	1c28      	adds	r0, r5, #0
10009d3e:	f7f7 fd75 	bl	1000182c <optiga_util_destroy>
10009d42:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009d44:	d003      	beq.n	10009d4e <example_pair_host_and_optiga_using_pre_shared_secret+0x14e>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009d46:	9802      	ldr	r0, [sp, #8]
10009d48:	490e      	ldr	r1, [pc, #56]	; (10009d84 <example_pair_host_and_optiga_using_pre_shared_secret+0x184>)
10009d4a:	f7fa fd27 	bl	1000479c <optiga_lib_print_status>
        }
    }
    if(me_crypt)
10009d4e:	2e00      	cmp	r6, #0
10009d50:	d008      	beq.n	10009d64 <example_pair_host_and_optiga_using_pre_shared_secret+0x164>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me_crypt);
10009d52:	1c30      	adds	r0, r6, #0
10009d54:	f7f8 f9b0 	bl	100020b8 <optiga_crypt_destroy>
10009d58:	1e02      	subs	r2, r0, #0
        if(OPTIGA_LIB_SUCCESS != return_status)
10009d5a:	d003      	beq.n	10009d64 <example_pair_host_and_optiga_using_pre_shared_secret+0x164>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
10009d5c:	9802      	ldr	r0, [sp, #8]
10009d5e:	4909      	ldr	r1, [pc, #36]	; (10009d84 <example_pair_host_and_optiga_using_pre_shared_secret+0x184>)
10009d60:	f7fa fd1c 	bl	1000479c <optiga_lib_print_status>
        }
    }
    
}
10009d64:	b021      	add	sp, #132	; 0x84
10009d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009d68:	10010644 	.word	0x10010644
10009d6c:	1000d2dc 	.word	0x1000d2dc
10009d70:	10010959 	.word	0x10010959
10009d74:	10009bf5 	.word	0x10009bf5
10009d78:	20002fb4 	.word	0x20002fb4
10009d7c:	0000e140 	.word	0x0000e140
10009d80:	20002647 	.word	0x20002647
10009d84:	10010659 	.word	0x10010659

10009d88 <OSCHP_GetFrequency>:
}

__WEAK uint32_t OSCHP_GetFrequency(void)
{
  return OSCHP_FREQUENCY;
}
10009d88:	4800      	ldr	r0, [pc, #0]	; (10009d8c <OSCHP_GetFrequency+0x4>)
10009d8a:	4770      	bx	lr
10009d8c:	01312d00 	.word	0x01312d00

10009d90 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
10009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10009d92:	4f16      	ldr	r7, [pc, #88]	; (10009dec <SystemCoreClockUpdate+0x5c>)
10009d94:	4e16      	ldr	r6, [pc, #88]	; (10009df0 <SystemCoreClockUpdate+0x60>)
10009d96:	683b      	ldr	r3, [r7, #0]
10009d98:	4c16      	ldr	r4, [pc, #88]	; (10009df4 <SystemCoreClockUpdate+0x64>)
10009d9a:	041b      	lsls	r3, r3, #16
10009d9c:	0e1b      	lsrs	r3, r3, #24
10009d9e:	6033      	str	r3, [r6, #0]

  if (IDIV != 0)
10009da0:	d01a      	beq.n	10009dd8 <SystemCoreClockUpdate+0x48>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
10009da2:	2203      	movs	r2, #3

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

  if (IDIV != 0)
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10009da4:	6838      	ldr	r0, [r7, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
10009da6:	69f9      	ldr	r1, [r7, #28]

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

  if (IDIV != 0)
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10009da8:	b2c0      	uxtb	r0, r0
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
10009daa:	400a      	ands	r2, r1
10009dac:	0212      	lsls	r2, r2, #8
10009dae:	4d12      	ldr	r5, [pc, #72]	; (10009df8 <SystemCoreClockUpdate+0x68>)
10009db0:	4302      	orrs	r2, r0
10009db2:	602a      	str	r2, [r5, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
10009db4:	69f9      	ldr	r1, [r7, #28]
10009db6:	0589      	lsls	r1, r1, #22
10009db8:	d403      	bmi.n	10009dc2 <SystemCoreClockUpdate+0x32>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10009dba:	029b      	lsls	r3, r3, #10
10009dbc:	1899      	adds	r1, r3, r2
10009dbe:	480f      	ldr	r0, [pc, #60]	; (10009dfc <SystemCoreClockUpdate+0x6c>)
10009dc0:	e006      	b.n	10009dd0 <SystemCoreClockUpdate+0x40>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10009dc2:	f7ff ffe1 	bl	10009d88 <OSCHP_GetFrequency>
10009dc6:	6831      	ldr	r1, [r6, #0]
10009dc8:	682b      	ldr	r3, [r5, #0]
10009dca:	0289      	lsls	r1, r1, #10
10009dcc:	0180      	lsls	r0, r0, #6
10009dce:	18c9      	adds	r1, r1, r3
10009dd0:	f000 fb44 	bl	1000a45c <__aeabi_uidiv>
10009dd4:	0100      	lsls	r0, r0, #4
10009dd6:	e007      	b.n	10009de8 <SystemCoreClockUpdate+0x58>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
10009dd8:	69fb      	ldr	r3, [r7, #28]
10009dda:	059b      	lsls	r3, r3, #22
10009ddc:	d402      	bmi.n	10009de4 <SystemCoreClockUpdate+0x54>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10009dde:	4b08      	ldr	r3, [pc, #32]	; (10009e00 <SystemCoreClockUpdate+0x70>)
10009de0:	6023      	str	r3, [r4, #0]
10009de2:	e002      	b.n	10009dea <SystemCoreClockUpdate+0x5a>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10009de4:	f7ff ffd0 	bl	10009d88 <OSCHP_GetFrequency>
10009de8:	6020      	str	r0, [r4, #0]
    }
  }
}
10009dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009dec:	40010300 	.word	0x40010300
10009df0:	20002fbc 	.word	0x20002fbc
10009df4:	20003ffc 	.word	0x20003ffc
10009df8:	20002fb8 	.word	0x20002fb8
10009dfc:	b71b0000 	.word	0xb71b0000
10009e00:	02dc6c00 	.word	0x02dc6c00

10009e04 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
10009e04:	b508      	push	{r3, lr}
  SystemCoreSetup();
10009e06:	f001 fc69 	bl	1000b6dc <SystemCoreSetup>
  SystemCoreClockSetup();
10009e0a:	f001 fc77 	bl	1000b6fc <SystemCoreClockSetup>
}
10009e0e:	bd08      	pop	{r3, pc}

10009e10 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10009e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10009e12:	2503      	movs	r5, #3
10009e14:	1c0c      	adds	r4, r1, #0
10009e16:	402c      	ands	r4, r5
10009e18:	40ac      	lsls	r4, r5
10009e1a:	9401      	str	r4, [sp, #4]
10009e1c:	24fc      	movs	r4, #252	; 0xfc
10009e1e:	9e01      	ldr	r6, [sp, #4]
10009e20:	088b      	lsrs	r3, r1, #2
10009e22:	40b4      	lsls	r4, r6
10009e24:	009b      	lsls	r3, r3, #2
10009e26:	18c3      	adds	r3, r0, r3
10009e28:	691f      	ldr	r7, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10009e2a:	2604      	movs	r6, #4
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10009e2c:	43a7      	bics	r7, r4
10009e2e:	611f      	str	r7, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10009e30:	004f      	lsls	r7, r1, #1
10009e32:	40bd      	lsls	r5, r7
10009e34:	6f44      	ldr	r4, [r0, #116]	; 0x74
10009e36:	43ac      	bics	r4, r5

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10009e38:	2507      	movs	r5, #7
10009e3a:	400d      	ands	r5, r1
10009e3c:	00ad      	lsls	r5, r5, #2
10009e3e:	40ae      	lsls	r6, r5
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10009e40:	6744      	str	r4, [r0, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10009e42:	08cc      	lsrs	r4, r1, #3
10009e44:	00a4      	lsls	r4, r4, #2
10009e46:	1904      	adds	r4, r0, r4
10009e48:	6c27      	ldr	r7, [r4, #64]	; 0x40
10009e4a:	43b7      	bics	r7, r6
10009e4c:	6427      	str	r7, [r4, #64]	; 0x40
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10009e4e:	7856      	ldrb	r6, [r2, #1]
10009e50:	6c27      	ldr	r7, [r4, #64]	; 0x40
10009e52:	40ae      	lsls	r6, r5
10009e54:	1c35      	adds	r5, r6, #0
10009e56:	433d      	orrs	r5, r7
10009e58:	6425      	str	r5, [r4, #64]	; 0x40
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10009e5a:	4c0a      	ldr	r4, [pc, #40]	; (10009e84 <XMC_GPIO_Init+0x74>)
10009e5c:	42a0      	cmp	r0, r4
10009e5e:	d104      	bne.n	10009e6a <XMC_GPIO_Init+0x5a>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10009e60:	2501      	movs	r5, #1
10009e62:	408d      	lsls	r5, r1
10009e64:	6e04      	ldr	r4, [r0, #96]	; 0x60
10009e66:	43ac      	bics	r4, r5
10009e68:	6604      	str	r4, [r0, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
10009e6a:	7814      	ldrb	r4, [r2, #0]
10009e6c:	b265      	sxtb	r5, r4
10009e6e:	2d00      	cmp	r5, #0
10009e70:	da02      	bge.n	10009e78 <XMC_GPIO_Init+0x68>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
10009e72:	6852      	ldr	r2, [r2, #4]
10009e74:	408a      	lsls	r2, r1
10009e76:	6042      	str	r2, [r0, #4]
  }
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10009e78:	9901      	ldr	r1, [sp, #4]
10009e7a:	691a      	ldr	r2, [r3, #16]
10009e7c:	408c      	lsls	r4, r1
10009e7e:	4314      	orrs	r4, r2
10009e80:	611c      	str	r4, [r3, #16]
}
10009e82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10009e84:	40040200 	.word	0x40040200

10009e88 <XMC_SCU_UnlockProtectedBits>:
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10009e88:	22c0      	movs	r2, #192	; 0xc0
10009e8a:	4b03      	ldr	r3, [pc, #12]	; (10009e98 <XMC_SCU_UnlockProtectedBits+0x10>)
10009e8c:	625a      	str	r2, [r3, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10009e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10009e90:	0752      	lsls	r2, r2, #29
10009e92:	d4fc      	bmi.n	10009e8e <XMC_SCU_UnlockProtectedBits+0x6>
  {
    /* Loop until the lock is removed */
  }
}
10009e94:	4770      	bx	lr
10009e96:	46c0      	nop			; (mov r8, r8)
10009e98:	40010000 	.word	0x40010000

10009e9c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10009e9c:	b510      	push	{r4, lr}
10009e9e:	1c04      	adds	r4, r0, #0
  XMC_SCU_UnlockProtectedBits();
10009ea0:	f7ff fff2 	bl	10009e88 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10009ea4:	4b05      	ldr	r3, [pc, #20]	; (10009ebc <XMC_SCU_CLOCK_UngatePeripheralClock+0x20>)
10009ea6:	6918      	ldr	r0, [r3, #16]
10009ea8:	4320      	orrs	r0, r4
10009eaa:	6118      	str	r0, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10009eac:	681a      	ldr	r2, [r3, #0]
10009eae:	0052      	lsls	r2, r2, #1
10009eb0:	d4fc      	bmi.n	10009eac <XMC_SCU_CLOCK_UngatePeripheralClock+0x10>
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10009eb2:	22c3      	movs	r2, #195	; 0xc3
10009eb4:	4b02      	ldr	r3, [pc, #8]	; (10009ec0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x24>)
10009eb6:	625a      	str	r2, [r3, #36]	; 0x24
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
}
10009eb8:	bd10      	pop	{r4, pc}
10009eba:	46c0      	nop			; (mov r8, r8)
10009ebc:	40010300 	.word	0x40010300
10009ec0:	40010000 	.word	0x40010000

10009ec4 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
10009ec4:	4b03      	ldr	r3, [pc, #12]	; (10009ed4 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x10>)
10009ec6:	689b      	ldr	r3, [r3, #8]
10009ec8:	4018      	ands	r0, r3
10009eca:	1e43      	subs	r3, r0, #1
10009ecc:	4198      	sbcs	r0, r3
10009ece:	b2c0      	uxtb	r0, r0
}
10009ed0:	4770      	bx	lr
10009ed2:	46c0      	nop			; (mov r8, r8)
10009ed4:	40010300 	.word	0x40010300

10009ed8 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009eda:	1c0d      	adds	r5, r1, #0

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10009edc:	2603      	movs	r6, #3
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10009ede:	1c04      	adds	r4, r0, #0
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10009ee0:	f7ff ffd2 	bl	10009e88 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10009ee4:	4b22      	ldr	r3, [pc, #136]	; (10009f70 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x98>)

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
10009ee6:	0a28      	lsrs	r0, r5, #8
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10009ee8:	681a      	ldr	r2, [r3, #0]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10009eea:	69d9      	ldr	r1, [r3, #28]
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10009eec:	b2ed      	uxtb	r5, r5

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10009eee:	43b1      	bics	r1, r6
10009ef0:	4301      	orrs	r1, r0
10009ef2:	61d9      	str	r1, [r3, #28]
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009ef4:	6818      	ldr	r0, [r3, #0]
10009ef6:	491f      	ldr	r1, [pc, #124]	; (10009f74 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10009ef8:	0412      	lsls	r2, r2, #16

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009efa:	4001      	ands	r1, r0
10009efc:	481e      	ldr	r0, [pc, #120]	; (10009f78 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>)
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10009efe:	0e12      	lsrs	r2, r2, #24
10009f00:	4301      	orrs	r1, r0
#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10009f02:	430d      	orrs	r5, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009f04:	601d      	str	r5, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10009f06:	6819      	ldr	r1, [r3, #0]
10009f08:	0049      	lsls	r1, r1, #1
10009f0a:	d4fc      	bmi.n	10009f06 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x2e>
10009f0c:	4d1b      	ldr	r5, [pc, #108]	; (10009f7c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa4>)
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10009f0e:	00a6      	lsls	r6, r4, #2
  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
  {
    /* Spin until the core supply stabilizes */
  }

  if(curr_idiv <= idiv)
10009f10:	42a2      	cmp	r2, r4
10009f12:	d81a      	bhi.n	10009f4a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x72>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10009f14:	0091      	lsls	r1, r2, #2
10009f16:	42a1      	cmp	r1, r4
10009f18:	d20d      	bcs.n	10009f36 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x5e>
  {
    if(0U == curr_idiv)
10009f1a:	2a00      	cmp	r2, #0
10009f1c:	d100      	bne.n	10009f20 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x48>
    {
      curr_idiv = 1U;
10009f1e:	3201      	adds	r2, #1
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009f20:	6819      	ldr	r1, [r3, #0]
  {
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
10009f22:	0092      	lsls	r2, r2, #2
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009f24:	4029      	ands	r1, r5
10009f26:	4301      	orrs	r1, r0
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10009f28:	0216      	lsls	r6, r2, #8
10009f2a:	4331      	orrs	r1, r6
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009f2c:	6019      	str	r1, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10009f2e:	6819      	ldr	r1, [r3, #0]
10009f30:	0049      	lsls	r1, r1, #1
10009f32:	d4fc      	bmi.n	10009f2e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x56>
10009f34:	e7ee      	b.n	10009f14 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x3c>
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009f36:	681a      	ldr	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10009f38:	0224      	lsls	r4, r4, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009f3a:	402a      	ands	r2, r5
10009f3c:	4310      	orrs	r0, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10009f3e:	4320      	orrs	r0, r4
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009f40:	6018      	str	r0, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10009f42:	e00c      	b.n	10009f5e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x86>

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10009f44:	6819      	ldr	r1, [r3, #0]
10009f46:	0049      	lsls	r1, r1, #1
10009f48:	d4fc      	bmi.n	10009f44 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10009f4a:	42b2      	cmp	r2, r6
10009f4c:	d9f3      	bls.n	10009f36 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x5e>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009f4e:	6819      	ldr	r1, [r3, #0]
/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
10009f50:	0892      	lsrs	r2, r2, #2

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009f52:	4029      	ands	r1, r5
10009f54:	4301      	orrs	r1, r0
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
10009f56:	0217      	lsls	r7, r2, #8
10009f58:	4339      	orrs	r1, r7
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10009f5a:	6019      	str	r1, [r3, #0]
10009f5c:	e7f2      	b.n	10009f44 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10009f5e:	681a      	ldr	r2, [r3, #0]
10009f60:	0052      	lsls	r2, r2, #1
10009f62:	d4fc      	bmi.n	10009f5e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x86>
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10009f64:	22c3      	movs	r2, #195	; 0xc3
10009f66:	4b06      	ldr	r3, [pc, #24]	; (10009f80 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa8>)
10009f68:	625a      	str	r2, [r3, #36]	; 0x24
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();

  SystemCoreClockUpdate();
10009f6a:	f7ff ff11 	bl	10009d90 <SystemCoreClockUpdate>

}
10009f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009f70:	40010300 	.word	0x40010300
10009f74:	c00fff00 	.word	0xc00fff00
10009f78:	3ff00000 	.word	0x3ff00000
10009f7c:	c00f00ff 	.word	0xc00f00ff
10009f80:	40010000 	.word	0x40010000

10009f84 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10009f84:	b538      	push	{r3, r4, r5, lr}
10009f86:	1c04      	adds	r4, r0, #0
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10009f88:	f7ff ff7e 	bl	10009e88 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10009f8c:	79a2      	ldrb	r2, [r4, #6]
10009f8e:	4d2c      	ldr	r5, [pc, #176]	; (1000a040 <XMC_SCU_CLOCK_Init+0xbc>)
10009f90:	2a30      	cmp	r2, #48	; 0x30
10009f92:	d02f      	beq.n	10009ff4 <XMC_SCU_CLOCK_Init+0x70>
  {
    if (OSCHP_GetFrequency() > 20000000U)
10009f94:	f7ff fef8 	bl	10009d88 <OSCHP_GetFrequency>
10009f98:	4b2a      	ldr	r3, [pc, #168]	; (1000a044 <XMC_SCU_CLOCK_Init+0xc0>)
10009f9a:	4298      	cmp	r0, r3
10009f9c:	d903      	bls.n	10009fa6 <XMC_SCU_CLOCK_Init+0x22>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10009f9e:	2240      	movs	r2, #64	; 0x40
10009fa0:	882b      	ldrh	r3, [r5, #0]
10009fa2:	4313      	orrs	r3, r2
10009fa4:	802b      	strh	r3, [r5, #0]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10009fa6:	2232      	movs	r2, #50	; 0x32
10009fa8:	882b      	ldrh	r3, [r5, #0]
10009faa:	4393      	bics	r3, r2
10009fac:	79a2      	ldrb	r2, [r4, #6]
10009fae:	4313      	orrs	r3, r2
10009fb0:	802b      	strh	r3, [r5, #0]
                               config->oschp_mode;

    do 
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
10009fb2:	2302      	movs	r3, #2
10009fb4:	4924      	ldr	r1, [pc, #144]	; (1000a048 <XMC_SCU_CLOCK_Init+0xc4>)

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog, 
         keeping in between at least one DCO2 cycle */
    
      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10009fb6:	4a25      	ldr	r2, [pc, #148]	; (1000a04c <XMC_SCU_CLOCK_Init+0xc8>)
                               config->oschp_mode;

    do 
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
10009fb8:	628b      	str	r3, [r1, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog, 
         keeping in between at least one DCO2 cycle */
    
      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10009fba:	4b25      	ldr	r3, [pc, #148]	; (1000a050 <XMC_SCU_CLOCK_Init+0xcc>)
10009fbc:	6958      	ldr	r0, [r3, #20]
10009fbe:	4002      	ands	r2, r0
10009fc0:	1c18      	adds	r0, r3, #0
10009fc2:	615a      	str	r2, [r3, #20]
10009fc4:	4a23      	ldr	r2, [pc, #140]	; (1000a054 <XMC_SCU_CLOCK_Init+0xd0>)
10009fc6:	3a01      	subs	r2, #1

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
10009fc8:	2a00      	cmp	r2, #0
10009fca:	d001      	beq.n	10009fd0 <XMC_SCU_CLOCK_Init+0x4c>
  {
    __NOP();
10009fcc:	46c0      	nop			; (mov r8, r8)
10009fce:	e7fa      	b.n	10009fc6 <XMC_SCU_CLOCK_Init+0x42>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);
      
      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
10009fd0:	25c0      	movs	r5, #192	; 0xc0
10009fd2:	695a      	ldr	r2, [r3, #20]
10009fd4:	04ad      	lsls	r5, r5, #18
10009fd6:	432a      	orrs	r2, r5
10009fd8:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
10009fda:	6943      	ldr	r3, [r0, #20]
10009fdc:	01db      	lsls	r3, r3, #7
10009fde:	d4fc      	bmi.n	10009fda <XMC_SCU_CLOCK_Init+0x56>
10009fe0:	4b1d      	ldr	r3, [pc, #116]	; (1000a058 <XMC_SCU_CLOCK_Init+0xd4>)
10009fe2:	3b01      	subs	r3, #1

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
10009fe4:	2b00      	cmp	r3, #0
10009fe6:	d001      	beq.n	10009fec <XMC_SCU_CLOCK_Init+0x68>
  {
    __NOP();
10009fe8:	46c0      	nop			; (mov r8, r8)
10009fea:	e7fa      	b.n	10009fe2 <XMC_SCU_CLOCK_Init+0x5e>

      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);
      
    } while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
10009fec:	6a0b      	ldr	r3, [r1, #32]
10009fee:	079b      	lsls	r3, r3, #30
10009ff0:	d4df      	bmi.n	10009fb2 <XMC_SCU_CLOCK_Init+0x2e>
10009ff2:	e002      	b.n	10009ffa <XMC_SCU_CLOCK_Init+0x76>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
10009ff4:	882b      	ldrh	r3, [r5, #0]
10009ff6:	4313      	orrs	r3, r2
10009ff8:	802b      	strh	r3, [r5, #0]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
10009ffa:	79e3      	ldrb	r3, [r4, #7]
10009ffc:	4a17      	ldr	r2, [pc, #92]	; (1000a05c <XMC_SCU_CLOCK_Init+0xd8>)
10009ffe:	b299      	uxth	r1, r3
1000a000:	8011      	strh	r1, [r2, #0]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP  
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
1000a002:	2b00      	cmp	r3, #0
1000a004:	d105      	bne.n	1000a012 <XMC_SCU_CLOCK_Init+0x8e>
1000a006:	4b16      	ldr	r3, [pc, #88]	; (1000a060 <XMC_SCU_CLOCK_Init+0xdc>)
1000a008:	3b01      	subs	r3, #1

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
1000a00a:	2b00      	cmp	r3, #0
1000a00c:	d001      	beq.n	1000a012 <XMC_SCU_CLOCK_Init+0x8e>
  {
    __NOP();
1000a00e:	46c0      	nop			; (mov r8, r8)
1000a010:	e7fa      	b.n	1000a008 <XMC_SCU_CLOCK_Init+0x84>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif  

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
1000a012:	490f      	ldr	r1, [pc, #60]	; (1000a050 <XMC_SCU_CLOCK_Init+0xcc>)
1000a014:	4a13      	ldr	r2, [pc, #76]	; (1000a064 <XMC_SCU_CLOCK_Init+0xe0>)
1000a016:	69cb      	ldr	r3, [r1, #28]
1000a018:	88a0      	ldrh	r0, [r4, #4]
1000a01a:	4013      	ands	r3, r2
1000a01c:	4303      	orrs	r3, r0
1000a01e:	68e2      	ldr	r2, [r4, #12]
1000a020:	68a0      	ldr	r0, [r4, #8]
1000a022:	61cb      	str	r3, [r1, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
1000a024:	680b      	ldr	r3, [r1, #0]
1000a026:	4310      	orrs	r0, r2
1000a028:	4a0f      	ldr	r2, [pc, #60]	; (1000a068 <XMC_SCU_CLOCK_Init+0xe4>)
1000a02a:	4013      	ands	r3, r2
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
1000a02c:	22c3      	movs	r2, #195	; 0xc3
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
1000a02e:	4303      	orrs	r3, r0
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
1000a030:	600b      	str	r3, [r1, #0]
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
1000a032:	4b0e      	ldr	r3, [pc, #56]	; (1000a06c <XMC_SCU_CLOCK_Init+0xe8>)
1000a034:	625a      	str	r2, [r3, #36]	; 0x24

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000a036:	78a0      	ldrb	r0, [r4, #2]
1000a038:	8821      	ldrh	r1, [r4, #0]
1000a03a:	f7ff ff4d 	bl	10009ed8 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
1000a03e:	bd38      	pop	{r3, r4, r5, pc}
1000a040:	40011090 	.word	0x40011090
1000a044:	01312d00 	.word	0x01312d00
1000a048:	40010038 	.word	0x40010038
1000a04c:	fdffffff 	.word	0xfdffffff
1000a050:	40010300 	.word	0x40010300
1000a054:	0000021a 	.word	0x0000021a
1000a058:	00000a7d 	.word	0x00000a7d
1000a05c:	4001108c 	.word	0x4001108c
1000a060:	00632ea0 	.word	0x00632ea0
1000a064:	fffffdff 	.word	0xfffffdff
1000a068:	fff0ffff 	.word	0xfff0ffff
1000a06c:	40010000 	.word	0x40010000

1000a070 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (SystemCoreClock);
1000a070:	4b01      	ldr	r3, [pc, #4]	; (1000a078 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x8>)
1000a072:	6818      	ldr	r0, [r3, #0]
}
1000a074:	4770      	bx	lr
1000a076:	46c0      	nop			; (mov r8, r8)
1000a078:	20003ffc 	.word	0x20003ffc

1000a07c <XMC_SCU_SetInterruptControl>:
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
1000a07c:	2303      	movs	r3, #3
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
1000a07e:	b530      	push	{r4, r5, lr}
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
1000a080:	4019      	ands	r1, r3
1000a082:	4a0b      	ldr	r2, [pc, #44]	; (1000a0b0 <XMC_SCU_SetInterruptControl+0x34>)
  if (irq_number < 16U)
1000a084:	280f      	cmp	r0, #15
1000a086:	d808      	bhi.n	1000a09a <XMC_SCU_SetInterruptControl+0x1e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000a088:	0040      	lsls	r0, r0, #1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
1000a08a:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000a08c:	4083      	lsls	r3, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
1000a08e:	1c08      	adds	r0, r1, #0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000a090:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
1000a092:	439c      	bics	r4, r3
1000a094:	4320      	orrs	r0, r4
1000a096:	66d0      	str	r0, [r2, #108]	; 0x6c
1000a098:	e009      	b.n	1000a0ae <XMC_SCU_SetInterruptControl+0x32>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000a09a:	240f      	movs	r4, #15
1000a09c:	4020      	ands	r0, r4
1000a09e:	0044      	lsls	r4, r0, #1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
1000a0a0:	40a1      	lsls	r1, r4
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000a0a2:	40a3      	lsls	r3, r4
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
1000a0a4:	1c08      	adds	r0, r1, #0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000a0a6:	6f15      	ldr	r5, [r2, #112]	; 0x70
1000a0a8:	439d      	bics	r5, r3
1000a0aa:	4328      	orrs	r0, r5
1000a0ac:	6710      	str	r0, [r2, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
1000a0ae:	bd30      	pop	{r4, r5, pc}
1000a0b0:	40010000 	.word	0x40010000

1000a0b4 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
1000a0b4:	b508      	push	{r3, lr}
  if (module == CCU40)
1000a0b6:	4b06      	ldr	r3, [pc, #24]	; (1000a0d0 <XMC_CCU4_lUngateClock+0x1c>)
1000a0b8:	4298      	cmp	r0, r3
1000a0ba:	d101      	bne.n	1000a0c0 <XMC_CCU4_lUngateClock+0xc>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
1000a0bc:	2004      	movs	r0, #4
1000a0be:	e004      	b.n	1000a0ca <XMC_CCU4_lUngateClock+0x16>
  }
#if defined(CCU41)
  else if (module == CCU41)
1000a0c0:	4b04      	ldr	r3, [pc, #16]	; (1000a0d4 <XMC_CCU4_lUngateClock+0x20>)
1000a0c2:	4298      	cmp	r0, r3
1000a0c4:	d103      	bne.n	1000a0ce <XMC_CCU4_lUngateClock+0x1a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
1000a0c6:	2080      	movs	r0, #128	; 0x80
1000a0c8:	0280      	lsls	r0, r0, #10
1000a0ca:	f7ff fee7 	bl	10009e9c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
1000a0ce:	bd08      	pop	{r3, pc}
1000a0d0:	48040000 	.word	0x48040000
1000a0d4:	48044000 	.word	0x48044000

1000a0d8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
1000a0d8:	b538      	push	{r3, r4, r5, lr}
1000a0da:	1c04      	adds	r4, r0, #0
1000a0dc:	1c0d      	adds	r5, r1, #0
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
1000a0de:	f7ff ffe9 	bl	1000a0b4 <XMC_CCU4_lUngateClock>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
1000a0e2:	2380      	movs	r3, #128	; 0x80
1000a0e4:	005b      	lsls	r3, r3, #1
1000a0e6:	60e3      	str	r3, [r4, #12]
  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
1000a0e8:	6821      	ldr	r1, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
1000a0ea:	4b03      	ldr	r3, [pc, #12]	; (1000a0f8 <XMC_CCU4_Init+0x20>)
1000a0ec:	400b      	ands	r3, r1
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
1000a0ee:	03a9      	lsls	r1, r5, #14
1000a0f0:	4319      	orrs	r1, r3
  
  module->GCTRL = gctrl;
1000a0f2:	6021      	str	r1, [r4, #0]
}
1000a0f4:	bd38      	pop	{r3, r4, r5, pc}
1000a0f6:	46c0      	nop			; (mov r8, r8)
1000a0f8:	ffff3fff 	.word	0xffff3fff

1000a0fc <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
1000a0fc:	680b      	ldr	r3, [r1, #0]
1000a0fe:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
1000a100:	794b      	ldrb	r3, [r1, #5]
1000a102:	069b      	lsls	r3, r3, #26
1000a104:	0fdb      	lsrs	r3, r3, #31
1000a106:	051b      	lsls	r3, r3, #20
1000a108:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
1000a10a:	790b      	ldrb	r3, [r1, #4]
1000a10c:	071b      	lsls	r3, r3, #28
1000a10e:	0f1b      	lsrs	r3, r3, #28
1000a110:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
1000a112:	794b      	ldrb	r3, [r1, #5]
1000a114:	071b      	lsls	r3, r3, #28
1000a116:	0f1b      	lsrs	r3, r3, #28
1000a118:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
1000a11a:	794b      	ldrb	r3, [r1, #5]
1000a11c:	06db      	lsls	r3, r3, #27
1000a11e:	0fdb      	lsrs	r3, r3, #31
1000a120:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
1000a122:	790b      	ldrb	r3, [r1, #4]
1000a124:	091b      	lsrs	r3, r3, #4
1000a126:	62c3      	str	r3, [r0, #44]	; 0x2c
}
1000a128:	4770      	bx	lr
	...

1000a12c <XMC_CCU4_SLICE_SetPrescaler>:
{
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
1000a12c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
1000a12e:	4b03      	ldr	r3, [pc, #12]	; (1000a13c <XMC_CCU4_SLICE_SetPrescaler+0x10>)
1000a130:	4013      	ands	r3, r2
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
1000a132:	020a      	lsls	r2, r1, #8
1000a134:	4313      	orrs	r3, r2
  slice->FPC = fpc;
1000a136:	6283      	str	r3, [r0, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
1000a138:	6241      	str	r1, [r0, #36]	; 0x24
}
1000a13a:	4770      	bx	lr
1000a13c:	fffff0ff 	.word	0xfffff0ff

1000a140 <XMC_CCU4_SLICE_SetInterruptNode>:

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
1000a140:	30a8      	adds	r0, #168	; 0xa8

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
1000a142:	b530      	push	{r4, r5, lr}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
1000a144:	6803      	ldr	r3, [r0, #0]
1000a146:	2909      	cmp	r1, #9
1000a148:	d805      	bhi.n	1000a156 <XMC_CCU4_SLICE_SetInterruptNode+0x16>
1000a14a:	4c07      	ldr	r4, [pc, #28]	; (1000a168 <XMC_CCU4_SLICE_SetInterruptNode+0x28>)
1000a14c:	4d07      	ldr	r5, [pc, #28]	; (1000a16c <XMC_CCU4_SLICE_SetInterruptNode+0x2c>)
1000a14e:	5c64      	ldrb	r4, [r4, r1]
1000a150:	0049      	lsls	r1, r1, #1
1000a152:	5b49      	ldrh	r1, [r1, r5]
1000a154:	e002      	b.n	1000a15c <XMC_CCU4_SLICE_SetInterruptNode+0x1c>
1000a156:	21c0      	movs	r1, #192	; 0xc0
1000a158:	240c      	movs	r4, #12
1000a15a:	0189      	lsls	r1, r1, #6
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
  srs |= (uint32_t)sr << pos;
1000a15c:	40a2      	lsls	r2, r4
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
1000a15e:	438b      	bics	r3, r1
  srs |= (uint32_t)sr << pos;
1000a160:	431a      	orrs	r2, r3
  slice->SRS = srs;
1000a162:	6002      	str	r2, [r0, #0]
}
1000a164:	bd30      	pop	{r4, r5, pc}
1000a166:	46c0      	nop			; (mov r8, r8)
1000a168:	100109a2 	.word	0x100109a2
1000a16c:	1001098e 	.word	0x1001098e

1000a170 <XMC_GPIO_SetMode>:
void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
1000a170:	088b      	lsrs	r3, r1, #2
1000a172:	009b      	lsls	r3, r3, #2
1000a174:	18c0      	adds	r0, r0, r3
1000a176:	2303      	movs	r3, #3
1000a178:	4019      	ands	r1, r3
1000a17a:	4099      	lsls	r1, r3
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
1000a17c:	408a      	lsls	r2, r1
void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
1000a17e:	33f9      	adds	r3, #249	; 0xf9
1000a180:	408b      	lsls	r3, r1
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
1000a182:	1c11      	adds	r1, r2, #0
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
1000a184:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
1000a186:	6904      	ldr	r4, [r0, #16]
1000a188:	439c      	bics	r4, r3
1000a18a:	6104      	str	r4, [r0, #16]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
1000a18c:	6903      	ldr	r3, [r0, #16]
1000a18e:	4319      	orrs	r1, r3
1000a190:	6101      	str	r1, [r0, #16]
}
1000a192:	bd10      	pop	{r4, pc}

1000a194 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
1000a194:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000a196:	2403      	movs	r4, #3
1000a198:	0049      	lsls	r1, r1, #1
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
1000a19a:	408a      	lsls	r2, r1
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000a19c:	408c      	lsls	r4, r1
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
1000a19e:	1c11      	adds	r1, r2, #0
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000a1a0:	6f43      	ldr	r3, [r0, #116]	; 0x74
1000a1a2:	43a3      	bics	r3, r4
1000a1a4:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
1000a1a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
1000a1a8:	4319      	orrs	r1, r3
1000a1aa:	6741      	str	r1, [r0, #116]	; 0x74
}
1000a1ac:	bd10      	pop	{r4, pc}

1000a1ae <XMC_I2C_CH_SetSlaveAddress>:
  channel->CCR = 0x0U;
}
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
1000a1ae:	23f8      	movs	r3, #248	; 0xf8
1000a1b0:	22f0      	movs	r2, #240	; 0xf0
1000a1b2:	01db      	lsls	r3, r3, #7
1000a1b4:	400b      	ands	r3, r1
1000a1b6:	01d2      	lsls	r2, r2, #7
1000a1b8:	4293      	cmp	r3, r2
1000a1ba:	d107      	bne.n	1000a1cc <XMC_I2C_CH_SetSlaveAddress+0x1e>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
1000a1bc:	23fe      	movs	r3, #254	; 0xfe
1000a1be:	004a      	lsls	r2, r1, #1
1000a1c0:	021b      	lsls	r3, r3, #8
1000a1c2:	401a      	ands	r2, r3
1000a1c4:	b2cb      	uxtb	r3, r1
1000a1c6:	431a      	orrs	r2, r3
1000a1c8:	1c11      	adds	r1, r2, #0
1000a1ca:	e000      	b.n	1000a1ce <XMC_I2C_CH_SetSlaveAddress+0x20>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
1000a1cc:	0209      	lsls	r1, r1, #8
1000a1ce:	63c1      	str	r1, [r0, #60]	; 0x3c
  }
}
1000a1d0:	4770      	bx	lr
	...

1000a1d4 <XMC_I2C_CH_SetBaudrate>:
  return (uint16_t)address;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
1000a1d4:	b508      	push	{r3, lr}
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
1000a1d6:	4b0d      	ldr	r3, [pc, #52]	; (1000a20c <XMC_I2C_CH_SetBaudrate+0x38>)
1000a1d8:	4299      	cmp	r1, r3
1000a1da:	d805      	bhi.n	1000a1e8 <XMC_I2C_CH_SetBaudrate+0x14>
  {
	channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
1000a1dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
1000a1de:	4b0c      	ldr	r3, [pc, #48]	; (1000a210 <XMC_I2C_CH_SetBaudrate+0x3c>)
1000a1e0:	4013      	ands	r3, r2
1000a1e2:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
1000a1e4:	220a      	movs	r2, #10
1000a1e6:	e009      	b.n	1000a1fc <XMC_I2C_CH_SetBaudrate+0x28>
    {
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
1000a1e8:	4a0a      	ldr	r2, [pc, #40]	; (1000a214 <XMC_I2C_CH_SetBaudrate+0x40>)
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
1000a1ea:	2301      	movs	r3, #1
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
1000a1ec:	4291      	cmp	r1, r2
1000a1ee:	d80a      	bhi.n	1000a206 <XMC_I2C_CH_SetBaudrate+0x32>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
1000a1f0:	2280      	movs	r2, #128	; 0x80
1000a1f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
1000a1f4:	0292      	lsls	r2, r2, #10
1000a1f6:	4313      	orrs	r3, r2
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
1000a1f8:	2219      	movs	r2, #25
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
1000a1fa:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
1000a1fc:	f000 f9cc 	bl	1000a598 <XMC_USIC_CH_SetBaudrate>
1000a200:	1e43      	subs	r3, r0, #1
1000a202:	4198      	sbcs	r0, r3
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
	channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
1000a204:	b2c3      	uxtb	r3, r0
  {
    status = XMC_I2C_CH_STATUS_ERROR;
  }
  
  return status;
}
1000a206:	1c18      	adds	r0, r3, #0
1000a208:	bd08      	pop	{r3, pc}
1000a20a:	46c0      	nop			; (mov r8, r8)
1000a20c:	000186a0 	.word	0x000186a0
1000a210:	fffdffff 	.word	0xfffdffff
1000a214:	00061a80 	.word	0x00061a80

1000a218 <XMC_I2C_CH_SetBaudrateEx>:

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
1000a218:	1c03      	adds	r3, r0, #0
  XMC_USIC_CH_STATUS_t status;
   
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
1000a21a:	4811      	ldr	r0, [pc, #68]	; (1000a260 <XMC_I2C_CH_SetBaudrateEx+0x48>)
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
1000a21c:	b510      	push	{r4, lr}
  XMC_USIC_CH_STATUS_t status;
   
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
1000a21e:	4281      	cmp	r1, r0
1000a220:	d80a      	bhi.n	1000a238 <XMC_I2C_CH_SetBaudrateEx+0x20>
  {
	  channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
1000a222:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
1000a224:	480f      	ldr	r0, [pc, #60]	; (1000a264 <XMC_I2C_CH_SetBaudrateEx+0x4c>)
1000a226:	4020      	ands	r0, r4
1000a228:	63d8      	str	r0, [r3, #60]	; 0x3c
    if (normal_divider_mode)
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
1000a22a:	1c18      	adds	r0, r3, #0
  XMC_USIC_CH_STATUS_t status;
   
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
	  channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
    if (normal_divider_mode)
1000a22c:	2a00      	cmp	r2, #0
1000a22e:	d001      	beq.n	1000a234 <XMC_I2C_CH_SetBaudrateEx+0x1c>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
1000a230:	220a      	movs	r2, #10
1000a232:	e00e      	b.n	1000a252 <XMC_I2C_CH_SetBaudrateEx+0x3a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
1000a234:	220a      	movs	r2, #10
1000a236:	e010      	b.n	1000a25a <XMC_I2C_CH_SetBaudrateEx+0x42>
    }   
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
1000a238:	4c0b      	ldr	r4, [pc, #44]	; (1000a268 <XMC_I2C_CH_SetBaudrateEx+0x50>)
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
    }
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
1000a23a:	2001      	movs	r0, #1
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
    }   
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
1000a23c:	42a1      	cmp	r1, r4
1000a23e:	d80e      	bhi.n	1000a25e <XMC_I2C_CH_SetBaudrateEx+0x46>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
1000a240:	2480      	movs	r4, #128	; 0x80
1000a242:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
1000a244:	02a4      	lsls	r4, r4, #10
1000a246:	4320      	orrs	r0, r4
1000a248:	63d8      	str	r0, [r3, #60]	; 0x3c
    if (normal_divider_mode)
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
1000a24a:	1c18      	adds	r0, r3, #0
    }   
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
    if (normal_divider_mode)
1000a24c:	2a00      	cmp	r2, #0
1000a24e:	d003      	beq.n	1000a258 <XMC_I2C_CH_SetBaudrateEx+0x40>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
1000a250:	2219      	movs	r2, #25
1000a252:	f000 f9ed 	bl	1000a630 <XMC_USIC_CH_SetBaudrateEx>
1000a256:	e002      	b.n	1000a25e <XMC_I2C_CH_SetBaudrateEx+0x46>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
1000a258:	2219      	movs	r2, #25
1000a25a:	f000 f99d 	bl	1000a598 <XMC_USIC_CH_SetBaudrate>
  {
    status = XMC_USIC_CH_STATUS_ERROR;
  }
  
  return (XMC_I2C_CH_STATUS_t)status;
}
1000a25e:	bd10      	pop	{r4, pc}
1000a260:	000186a0 	.word	0x000186a0
1000a264:	fffdffff 	.word	0xfffdffff
1000a268:	00061a80 	.word	0x00061a80

1000a26c <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
1000a26c:	b538      	push	{r3, r4, r5, lr}
1000a26e:	1c04      	adds	r4, r0, #0
1000a270:	1c0d      	adds	r5, r1, #0
  XMC_USIC_CH_Enable(channel);
1000a272:	f000 fab1 	bl	1000a7d8 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
1000a276:	4b0a      	ldr	r3, [pc, #40]	; (1000a2a0 <XMC_I2C_CH_Init+0x34>)
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
1000a278:	1c20      	adds	r0, r4, #0
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
  XMC_USIC_CH_Enable(channel);
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
1000a27a:	6363      	str	r3, [r4, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
1000a27c:	88e9      	ldrh	r1, [r5, #6]
1000a27e:	f7ff ff96 	bl	1000a1ae <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
1000a282:	792a      	ldrb	r2, [r5, #4]
1000a284:	6829      	ldr	r1, [r5, #0]
1000a286:	1c20      	adds	r0, r4, #0
1000a288:	f7ff ffc6 	bl	1000a218 <XMC_I2C_CH_SetBaudrateEx>
  
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
1000a28c:	23a0      	movs	r3, #160	; 0xa0
1000a28e:	00db      	lsls	r3, r3, #3
1000a290:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
1000a292:	2301      	movs	r3, #1
1000a294:	425b      	negs	r3, r3
1000a296:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
1000a298:	2300      	movs	r3, #0
1000a29a:	6423      	str	r3, [r4, #64]	; 0x40
}
1000a29c:	bd38      	pop	{r3, r4, r5, pc}
1000a29e:	46c0      	nop			; (mov r8, r8)
1000a2a0:	073f0303 	.word	0x073f0303

1000a2a4 <XMC_I2C_CH_MasterStart>:
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
  if (command == XMC_I2C_CH_CMD_READ)
1000a2a4:	2a01      	cmp	r2, #1
1000a2a6:	d002      	beq.n	1000a2ae <XMC_I2C_CH_MasterStart+0xa>
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
1000a2a8:	2380      	movs	r3, #128	; 0x80
1000a2aa:	00db      	lsls	r3, r3, #3
1000a2ac:	e000      	b.n	1000a2b0 <XMC_I2C_CH_MasterStart+0xc>
  if (command == XMC_I2C_CH_CMD_READ)
  {
    temp |= 0x1U;
1000a2ae:	4b0d      	ldr	r3, [pc, #52]	; (1000a2e4 <XMC_I2C_CH_MasterStart+0x40>)
1000a2b0:	4319      	orrs	r1, r3
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000a2b2:	1c03      	adds	r3, r0, #0
1000a2b4:	33fc      	adds	r3, #252	; 0xfc
1000a2b6:	68da      	ldr	r2, [r3, #12]
1000a2b8:	23e0      	movs	r3, #224	; 0xe0
1000a2ba:	04db      	lsls	r3, r3, #19
1000a2bc:	421a      	tst	r2, r3
1000a2be:	d10d      	bne.n	1000a2dc <XMC_I2C_CH_MasterStart+0x38>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1000a2c0:	227f      	movs	r2, #127	; 0x7f
1000a2c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000a2c4:	4393      	bics	r3, r2
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000a2c6:	b2db      	uxtb	r3, r3
1000a2c8:	2b80      	cmp	r3, #128	; 0x80
1000a2ca:	d0f9      	beq.n	1000a2c0 <XMC_I2C_CH_MasterStart+0x1c>
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
1000a2cc:	2280      	movs	r2, #128	; 0x80
1000a2ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a2d0:	0192      	lsls	r2, r2, #6
1000a2d2:	4313      	orrs	r3, r2
1000a2d4:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = temp;
1000a2d6:	3004      	adds	r0, #4
1000a2d8:	67c1      	str	r1, [r0, #124]	; 0x7c
1000a2da:	e002      	b.n	1000a2e2 <XMC_I2C_CH_MasterStart+0x3e>
  }
  else
  {
    channel->IN[0U] = temp;
1000a2dc:	23c0      	movs	r3, #192	; 0xc0
1000a2de:	005b      	lsls	r3, r3, #1
1000a2e0:	50c1      	str	r1, [r0, r3]
  }
}
1000a2e2:	4770      	bx	lr
1000a2e4:	00000401 	.word	0x00000401

1000a2e8 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
  if (command == XMC_I2C_CH_CMD_READ)
1000a2e8:	2a01      	cmp	r2, #1
1000a2ea:	d002      	beq.n	1000a2f2 <XMC_I2C_CH_MasterRepeatedStart+0xa>
}
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
1000a2ec:	23a0      	movs	r3, #160	; 0xa0
1000a2ee:	00db      	lsls	r3, r3, #3
1000a2f0:	e000      	b.n	1000a2f4 <XMC_I2C_CH_MasterRepeatedStart+0xc>
  if (command == XMC_I2C_CH_CMD_READ)
  {
    tmp |= 0x1U;
1000a2f2:	4b0d      	ldr	r3, [pc, #52]	; (1000a328 <XMC_I2C_CH_MasterRepeatedStart+0x40>)
1000a2f4:	4319      	orrs	r1, r3
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000a2f6:	1c03      	adds	r3, r0, #0
1000a2f8:	33fc      	adds	r3, #252	; 0xfc
1000a2fa:	68da      	ldr	r2, [r3, #12]
1000a2fc:	23e0      	movs	r3, #224	; 0xe0
1000a2fe:	04db      	lsls	r3, r3, #19
1000a300:	421a      	tst	r2, r3
1000a302:	d10d      	bne.n	1000a320 <XMC_I2C_CH_MasterRepeatedStart+0x38>
1000a304:	227f      	movs	r2, #127	; 0x7f
1000a306:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000a308:	4393      	bics	r3, r2
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000a30a:	b2db      	uxtb	r3, r3
1000a30c:	2b80      	cmp	r3, #128	; 0x80
1000a30e:	d0f9      	beq.n	1000a304 <XMC_I2C_CH_MasterRepeatedStart+0x1c>
1000a310:	2280      	movs	r2, #128	; 0x80
1000a312:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a314:	0192      	lsls	r2, r2, #6
1000a316:	4313      	orrs	r3, r2
1000a318:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = tmp;
1000a31a:	3004      	adds	r0, #4
1000a31c:	67c1      	str	r1, [r0, #124]	; 0x7c
1000a31e:	e002      	b.n	1000a326 <XMC_I2C_CH_MasterRepeatedStart+0x3e>
  }
  else
  {
    channel->IN[0U] = tmp;
1000a320:	23c0      	movs	r3, #192	; 0xc0
1000a322:	005b      	lsls	r3, r3, #1
1000a324:	50c1      	str	r1, [r0, r3]
  }
}
1000a326:	4770      	bx	lr
1000a328:	00000501 	.word	0x00000501

1000a32c <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000a32c:	1c03      	adds	r3, r0, #0
1000a32e:	33fc      	adds	r3, #252	; 0xfc
1000a330:	68da      	ldr	r2, [r3, #12]
1000a332:	23e0      	movs	r3, #224	; 0xe0
1000a334:	04db      	lsls	r3, r3, #19
1000a336:	421a      	tst	r2, r3
1000a338:	d10f      	bne.n	1000a35a <XMC_I2C_CH_MasterStop+0x2e>
1000a33a:	227f      	movs	r2, #127	; 0x7f
1000a33c:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000a33e:	4393      	bics	r3, r2
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000a340:	b2db      	uxtb	r3, r3
1000a342:	2b80      	cmp	r3, #128	; 0x80
1000a344:	d0f9      	beq.n	1000a33a <XMC_I2C_CH_MasterStop+0xe>
1000a346:	2280      	movs	r2, #128	; 0x80
1000a348:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a34a:	0192      	lsls	r2, r2, #6
1000a34c:	4313      	orrs	r3, r2
1000a34e:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
1000a350:	23c0      	movs	r3, #192	; 0xc0
1000a352:	3004      	adds	r0, #4
1000a354:	00db      	lsls	r3, r3, #3
1000a356:	67c3      	str	r3, [r0, #124]	; 0x7c
1000a358:	e004      	b.n	1000a364 <XMC_I2C_CH_MasterStop+0x38>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
1000a35a:	22c0      	movs	r2, #192	; 0xc0
1000a35c:	23c0      	movs	r3, #192	; 0xc0
1000a35e:	00d2      	lsls	r2, r2, #3
1000a360:	005b      	lsls	r3, r3, #1
1000a362:	50c2      	str	r2, [r0, r3]
  }
}
1000a364:	4770      	bx	lr

1000a366 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000a366:	1c03      	adds	r3, r0, #0
1000a368:	33fc      	adds	r3, #252	; 0xfc
1000a36a:	68da      	ldr	r2, [r3, #12]
1000a36c:	23e0      	movs	r3, #224	; 0xe0
1000a36e:	04db      	lsls	r3, r3, #19
1000a370:	421a      	tst	r2, r3
1000a372:	d10d      	bne.n	1000a390 <XMC_I2C_CH_MasterTransmit+0x2a>
1000a374:	227f      	movs	r2, #127	; 0x7f
1000a376:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000a378:	4393      	bics	r3, r2
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000a37a:	b2db      	uxtb	r3, r3
1000a37c:	2b80      	cmp	r3, #128	; 0x80
1000a37e:	d0f9      	beq.n	1000a374 <XMC_I2C_CH_MasterTransmit+0xe>
1000a380:	2280      	movs	r2, #128	; 0x80
1000a382:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a384:	0192      	lsls	r2, r2, #6
1000a386:	4313      	orrs	r3, r2
1000a388:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
1000a38a:	3004      	adds	r0, #4
1000a38c:	67c1      	str	r1, [r0, #124]	; 0x7c
1000a38e:	e002      	b.n	1000a396 <XMC_I2C_CH_MasterTransmit+0x30>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
1000a390:	23c0      	movs	r3, #192	; 0xc0
1000a392:	005b      	lsls	r3, r3, #1
1000a394:	50c1      	str	r1, [r0, r3]
  }
}
1000a396:	4770      	bx	lr

1000a398 <XMC_I2C_CH_MasterReceiveAck>:

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000a398:	1c03      	adds	r3, r0, #0
1000a39a:	33fc      	adds	r3, #252	; 0xfc
1000a39c:	68da      	ldr	r2, [r3, #12]
1000a39e:	23e0      	movs	r3, #224	; 0xe0
1000a3a0:	04db      	lsls	r3, r3, #19
1000a3a2:	421a      	tst	r2, r3
1000a3a4:	d10f      	bne.n	1000a3c6 <XMC_I2C_CH_MasterReceiveAck+0x2e>
1000a3a6:	227f      	movs	r2, #127	; 0x7f
1000a3a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000a3aa:	4393      	bics	r3, r2
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000a3ac:	b2db      	uxtb	r3, r3
1000a3ae:	2b80      	cmp	r3, #128	; 0x80
1000a3b0:	d0f9      	beq.n	1000a3a6 <XMC_I2C_CH_MasterReceiveAck+0xe>
1000a3b2:	2280      	movs	r2, #128	; 0x80
1000a3b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a3b6:	0192      	lsls	r2, r2, #6
1000a3b8:	4313      	orrs	r3, r2
1000a3ba:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
1000a3bc:	2380      	movs	r3, #128	; 0x80
1000a3be:	3004      	adds	r0, #4
1000a3c0:	009b      	lsls	r3, r3, #2
1000a3c2:	67c3      	str	r3, [r0, #124]	; 0x7c
1000a3c4:	e004      	b.n	1000a3d0 <XMC_I2C_CH_MasterReceiveAck+0x38>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
1000a3c6:	2280      	movs	r2, #128	; 0x80
1000a3c8:	23c0      	movs	r3, #192	; 0xc0
1000a3ca:	0092      	lsls	r2, r2, #2
1000a3cc:	005b      	lsls	r3, r3, #1
1000a3ce:	50c2      	str	r2, [r0, r3]
  }
}
1000a3d0:	4770      	bx	lr

1000a3d2 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000a3d2:	1c03      	adds	r3, r0, #0
1000a3d4:	33fc      	adds	r3, #252	; 0xfc
1000a3d6:	68da      	ldr	r2, [r3, #12]
1000a3d8:	23e0      	movs	r3, #224	; 0xe0
1000a3da:	04db      	lsls	r3, r3, #19
1000a3dc:	421a      	tst	r2, r3
1000a3de:	d10f      	bne.n	1000a400 <XMC_I2C_CH_MasterReceiveNack+0x2e>
1000a3e0:	227f      	movs	r2, #127	; 0x7f
1000a3e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000a3e4:	4393      	bics	r3, r2
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000a3e6:	b2db      	uxtb	r3, r3
1000a3e8:	2b80      	cmp	r3, #128	; 0x80
1000a3ea:	d0f9      	beq.n	1000a3e0 <XMC_I2C_CH_MasterReceiveNack+0xe>
1000a3ec:	2280      	movs	r2, #128	; 0x80
1000a3ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000a3f0:	0192      	lsls	r2, r2, #6
1000a3f2:	4313      	orrs	r3, r2
1000a3f4:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
1000a3f6:	23c0      	movs	r3, #192	; 0xc0
1000a3f8:	3004      	adds	r0, #4
1000a3fa:	009b      	lsls	r3, r3, #2
1000a3fc:	67c3      	str	r3, [r0, #124]	; 0x7c
1000a3fe:	e004      	b.n	1000a40a <XMC_I2C_CH_MasterReceiveNack+0x38>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
1000a400:	22c0      	movs	r2, #192	; 0xc0
1000a402:	23c0      	movs	r3, #192	; 0xc0
1000a404:	0092      	lsls	r2, r2, #2
1000a406:	005b      	lsls	r3, r3, #1
1000a408:	50c2      	str	r2, [r0, r3]
  }
}
1000a40a:	4770      	bx	lr

1000a40c <XMC_I2C_CH_GetReceivedData>:
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
1000a40c:	1c03      	adds	r3, r0, #0
1000a40e:	22e0      	movs	r2, #224	; 0xe0
1000a410:	33fc      	adds	r3, #252	; 0xfc
1000a412:	6919      	ldr	r1, [r3, #16]
1000a414:	04d2      	lsls	r2, r2, #19
1000a416:	4211      	tst	r1, r2
1000a418:	d101      	bne.n	1000a41e <XMC_I2C_CH_GetReceivedData+0x12>
  {
    retval = (uint8_t)channel->RBUF;
1000a41a:	6d40      	ldr	r0, [r0, #84]	; 0x54
1000a41c:	e000      	b.n	1000a420 <XMC_I2C_CH_GetReceivedData+0x14>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
1000a41e:	6a18      	ldr	r0, [r3, #32]
1000a420:	b2c0      	uxtb	r0, r0
  }

  return retval;
}
1000a422:	4770      	bx	lr

1000a424 <XMC_I2C_CH_EnableEvent>:
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= (event&0x1fc00U);
1000a424:	23fe      	movs	r3, #254	; 0xfe
1000a426:	6c02      	ldr	r2, [r0, #64]	; 0x40
1000a428:	025b      	lsls	r3, r3, #9
1000a42a:	400b      	ands	r3, r1
1000a42c:	4313      	orrs	r3, r2
1000a42e:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
1000a430:	4a02      	ldr	r2, [pc, #8]	; (1000a43c <XMC_I2C_CH_EnableEvent+0x18>)
1000a432:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
1000a434:	4011      	ands	r1, r2
1000a436:	4319      	orrs	r1, r3
1000a438:	63c1      	str	r1, [r0, #60]	; 0x3c
}
1000a43a:	4770      	bx	lr
1000a43c:	41fc0000 	.word	0x41fc0000

1000a440 <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
1000a440:	22fe      	movs	r2, #254	; 0xfe
1000a442:	6c03      	ldr	r3, [r0, #64]	; 0x40
1000a444:	0252      	lsls	r2, r2, #9
1000a446:	400a      	ands	r2, r1
1000a448:	4393      	bics	r3, r2
1000a44a:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
1000a44c:	4a02      	ldr	r2, [pc, #8]	; (1000a458 <XMC_I2C_CH_DisableEvent+0x18>)
1000a44e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
1000a450:	4011      	ands	r1, r2
1000a452:	438b      	bics	r3, r1
1000a454:	63c3      	str	r3, [r0, #60]	; 0x3c
}
1000a456:	4770      	bx	lr
1000a458:	41fc0000 	.word	0x41fc0000

1000a45c <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
1000a45c:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
1000a45e:	f3ef 8210 	mrs	r2, PRIMASK
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000a462:	b672      	cpsid	i
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
1000a464:	2404      	movs	r4, #4
1000a466:	4b04      	ldr	r3, [pc, #16]	; (1000a478 <__aeabi_uidiv+0x1c>)
1000a468:	635c      	str	r4, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
1000a46a:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
1000a46c:	6259      	str	r1, [r3, #36]	; 0x24

  result = MATH->QUOT;
1000a46e:	6a98      	ldr	r0, [r3, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1000a470:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return result;
}
1000a474:	bd10      	pop	{r4, pc}
1000a476:	46c0      	nop			; (mov r8, r8)
1000a478:	40030000 	.word	0x40030000

1000a47c <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
1000a47c:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
1000a47e:	f3ef 8210 	mrs	r2, PRIMASK
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000a482:	b672      	cpsid	i
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();

  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
1000a484:	2400      	movs	r4, #0
1000a486:	4b04      	ldr	r3, [pc, #16]	; (1000a498 <__aeabi_idiv+0x1c>)
1000a488:	635c      	str	r4, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
1000a48a:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
1000a48c:	6259      	str	r1, [r3, #36]	; 0x24

  result = MATH->QUOT;
1000a48e:	6a98      	ldr	r0, [r3, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1000a490:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);
  
  return result;
}
1000a494:	bd10      	pop	{r4, pc}
1000a496:	46c0      	nop			; (mov r8, r8)
1000a498:	40030000 	.word	0x40030000

1000a49c <__aeabi_uidivmod>:

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
1000a49c:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
1000a49e:	f3ef 8210 	mrs	r2, PRIMASK
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000a4a2:	b672      	cpsid	i
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
  
  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
1000a4a4:	2404      	movs	r4, #4
1000a4a6:	4b04      	ldr	r3, [pc, #16]	; (1000a4b8 <__aeabi_uidivmod+0x1c>)
1000a4a8:	635c      	str	r4, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
1000a4aa:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
1000a4ac:	6259      	str	r1, [r3, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;
1000a4ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  quot = (uint64_t)MATH->QUOT;
1000a4b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1000a4b2:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((remainder << 32) | quot);
}
1000a4b6:	bd10      	pop	{r4, pc}
1000a4b8:	40030000 	.word	0x40030000

1000a4bc <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
1000a4bc:	b570      	push	{r4, r5, r6, lr}
1000a4be:	1c0e      	adds	r6, r1, #0
1000a4c0:	1c04      	adds	r4, r0, #0
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
1000a4c2:	f000 f989 	bl	1000a7d8 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
1000a4c6:	7a33      	ldrb	r3, [r6, #8]
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
1000a4c8:	2510      	movs	r5, #16

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
  
  if(config->oversampling != 0U)
1000a4ca:	2b00      	cmp	r3, #0
1000a4cc:	d000      	beq.n	1000a4d0 <XMC_UART_CH_Init+0x14>
  {
    oversampling = (uint32_t)config->oversampling;
1000a4ce:	1c1d      	adds	r5, r3, #0
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
1000a4d0:	7933      	ldrb	r3, [r6, #4]
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
1000a4d2:	1c20      	adds	r0, r4, #0
1000a4d4:	6831      	ldr	r1, [r6, #0]
1000a4d6:	1c2a      	adds	r2, r5, #0
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
1000a4d8:	2b00      	cmp	r3, #0
1000a4da:	d002      	beq.n	1000a4e2 <XMC_UART_CH_Init+0x26>
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
1000a4dc:	f000 f8a8 	bl	1000a630 <XMC_USIC_CH_SetBaudrateEx>
1000a4e0:	e001      	b.n	1000a4e6 <XMC_UART_CH_Init+0x2a>
  }
  else
  {
    /* Fractional divider mode */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
1000a4e2:	f000 f859 	bl	1000a598 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
1000a4e6:	79f3      	ldrb	r3, [r6, #7]
1000a4e8:	4a13      	ldr	r2, [pc, #76]	; (1000a538 <XMC_UART_CH_Init+0x7c>)
1000a4ea:	3b01      	subs	r3, #1
1000a4ec:	005b      	lsls	r3, r3, #1
1000a4ee:	4313      	orrs	r3, r2
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
1000a4f0:	2281      	movs	r2, #129	; 0x81
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
1000a4f2:	086d      	lsrs	r5, r5, #1
1000a4f4:	3501      	adds	r5, #1
1000a4f6:	022d      	lsls	r5, r5, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
1000a4f8:	431d      	orrs	r5, r3
1000a4fa:	63e5      	str	r5, [r4, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
1000a4fc:	7973      	ldrb	r3, [r6, #5]
1000a4fe:	0052      	lsls	r2, r2, #1
1000a500:	3b01      	subs	r3, #1
1000a502:	061b      	lsls	r3, r3, #24
1000a504:	4313      	orrs	r3, r2
1000a506:	6363      	str	r3, [r4, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
1000a508:	79b3      	ldrb	r3, [r6, #6]
1000a50a:	2b00      	cmp	r3, #0
1000a50c:	d004      	beq.n	1000a518 <XMC_UART_CH_Init+0x5c>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
1000a50e:	6b62      	ldr	r2, [r4, #52]	; 0x34
1000a510:	3b01      	subs	r3, #1
1000a512:	041b      	lsls	r3, r3, #16
1000a514:	4313      	orrs	r3, r2
1000a516:	e004      	b.n	1000a522 <XMC_UART_CH_Init+0x66>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
1000a518:	7972      	ldrb	r2, [r6, #5]
1000a51a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000a51c:	1e53      	subs	r3, r2, #1
1000a51e:	041b      	lsls	r3, r3, #16
1000a520:	430b      	orrs	r3, r1
1000a522:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
1000a524:	23a0      	movs	r3, #160	; 0xa0
1000a526:	00db      	lsls	r3, r3, #3
1000a528:	63a3      	str	r3, [r4, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
1000a52a:	2301      	movs	r3, #1
1000a52c:	425b      	negs	r3, r3
1000a52e:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
1000a530:	8973      	ldrh	r3, [r6, #10]
1000a532:	6423      	str	r3, [r4, #64]	; 0x40
}
1000a534:	bd70      	pop	{r4, r5, r6, pc}
1000a536:	46c0      	nop			; (mov r8, r8)
1000a538:	00030001 	.word	0x00030001

1000a53c <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
1000a53c:	1c03      	adds	r3, r0, #0
1000a53e:	33fc      	adds	r3, #252	; 0xfc
1000a540:	68da      	ldr	r2, [r3, #12]
1000a542:	23e0      	movs	r3, #224	; 0xe0
1000a544:	04db      	lsls	r3, r3, #19
1000a546:	421a      	tst	r2, r3
1000a548:	d10b      	bne.n	1000a562 <XMC_UART_CH_Transmit+0x26>
1000a54a:	227f      	movs	r2, #127	; 0x7f
1000a54c:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000a54e:	4393      	bics	r3, r2
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000a550:	b2db      	uxtb	r3, r3
1000a552:	2b80      	cmp	r3, #128	; 0x80
1000a554:	d0f9      	beq.n	1000a54a <XMC_UART_CH_Transmit+0xe>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
1000a556:	2380      	movs	r3, #128	; 0x80
1000a558:	019b      	lsls	r3, r3, #6
1000a55a:	64c3      	str	r3, [r0, #76]	; 0x4c
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    /*Transmit data */
    channel->TBUF[0U] = data;
1000a55c:	3004      	adds	r0, #4
1000a55e:	67c1      	str	r1, [r0, #124]	; 0x7c
1000a560:	e002      	b.n	1000a568 <XMC_UART_CH_Transmit+0x2c>
  }
  else
  {
    channel->IN[0U] = data;
1000a562:	23c0      	movs	r3, #192	; 0xc0
1000a564:	005b      	lsls	r3, r3, #1
1000a566:	50c1      	str	r1, [r0, r3]
  }
}
1000a568:	4770      	bx	lr

1000a56a <XMC_UART_CH_GetReceivedData>:
uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
1000a56a:	1c03      	adds	r3, r0, #0
1000a56c:	22e0      	movs	r2, #224	; 0xe0
1000a56e:	33fc      	adds	r3, #252	; 0xfc
1000a570:	6919      	ldr	r1, [r3, #16]
1000a572:	04d2      	lsls	r2, r2, #19
1000a574:	4211      	tst	r1, r2
1000a576:	d101      	bne.n	1000a57c <XMC_UART_CH_GetReceivedData+0x12>
  {
    retval = (uint16_t)channel->RBUF;
1000a578:	6d40      	ldr	r0, [r0, #84]	; 0x54
1000a57a:	e000      	b.n	1000a57e <XMC_UART_CH_GetReceivedData+0x14>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
1000a57c:	6a18      	ldr	r0, [r3, #32]
1000a57e:	b280      	uxth	r0, r0
  }

  return retval;
}
1000a580:	4770      	bx	lr

1000a582 <XMC_USIC_Enable.part.0>:
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
1000a582:	b508      	push	{r3, lr}
{
  if (usic == USIC0)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
1000a584:	2008      	movs	r0, #8
1000a586:	f7ff fc89 	bl	10009e9c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
1000a58a:	2008      	movs	r0, #8
1000a58c:	f7ff fc9a 	bl	10009ec4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
1000a590:	2800      	cmp	r0, #0
1000a592:	d1fa      	bne.n	1000a58a <XMC_USIC_Enable.part.0+0x8>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
1000a594:	bd08      	pop	{r3, pc}
	...

1000a598 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
1000a598:	b5f0      	push	{r4, r5, r6, r7, lr}
                    
    status = XMC_USIC_CH_STATUS_OK;
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
1000a59a:	2401      	movs	r4, #1
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
1000a59c:	b087      	sub	sp, #28
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
1000a59e:	2963      	cmp	r1, #99	; 0x63
1000a5a0:	d93e      	bls.n	1000a620 <XMC_USIC_CH_SetBaudrate+0x88>
1000a5a2:	2a00      	cmp	r2, #0
1000a5a4:	d03c      	beq.n	1000a620 <XMC_USIC_CH_SetBaudrate+0x88>
1000a5a6:	1c0e      	adds	r6, r1, #0
1000a5a8:	9204      	str	r2, [sp, #16]
1000a5aa:	1c05      	adds	r5, r0, #0
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
1000a5ac:	f7ff fd60 	bl	1000a070 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
1000a5b0:	2164      	movs	r1, #100	; 0x64
1000a5b2:	f7ff ff53 	bl	1000a45c <__aeabi_uidiv>
    rate = rate / 100U;
1000a5b6:	2164      	movs	r1, #100	; 0x64
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
1000a5b8:	1c07      	adds	r7, r0, #0
    rate = rate / 100U;
1000a5ba:	1c30      	adds	r0, r6, #0
1000a5bc:	f7ff ff4e 	bl	1000a45c <__aeabi_uidiv>

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
1000a5c0:	4e19      	ldr	r6, [pc, #100]	; (1000a628 <XMC_USIC_CH_SetBaudrate+0x90>)
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
1000a5c2:	9401      	str	r4, [sp, #4]
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
1000a5c4:	9403      	str	r4, [sp, #12]
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
1000a5c6:	1c34      	adds	r4, r6, #0
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
1000a5c8:	9b04      	ldr	r3, [sp, #16]
1000a5ca:	4343      	muls	r3, r0
1000a5cc:	9305      	str	r3, [sp, #20]
1000a5ce:	02bb      	lsls	r3, r7, #10
1000a5d0:	1bdb      	subs	r3, r3, r7
1000a5d2:	9302      	str	r3, [sp, #8]
1000a5d4:	9802      	ldr	r0, [sp, #8]
1000a5d6:	9905      	ldr	r1, [sp, #20]
1000a5d8:	f7ff ff40 	bl	1000a45c <__aeabi_uidiv>
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
1000a5dc:	4a12      	ldr	r2, [pc, #72]	; (1000a628 <XMC_USIC_CH_SetBaudrate+0x90>)
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
1000a5de:	0a83      	lsrs	r3, r0, #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
1000a5e0:	4293      	cmp	r3, r2
1000a5e2:	d806      	bhi.n	1000a5f2 <XMC_USIC_CH_SetBaudrate+0x5a>

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
1000a5e4:	0580      	lsls	r0, r0, #22
1000a5e6:	0d80      	lsrs	r0, r0, #22

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
1000a5e8:	42b0      	cmp	r0, r6
1000a5ea:	d202      	bcs.n	1000a5f2 <XMC_USIC_CH_SetBaudrate+0x5a>
1000a5ec:	1c06      	adds	r6, r0, #0
1000a5ee:	9301      	str	r3, [sp, #4]
1000a5f0:	9403      	str	r4, [sp, #12]
1000a5f2:	9b02      	ldr	r3, [sp, #8]

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
1000a5f4:	3c01      	subs	r4, #1
1000a5f6:	1bdb      	subs	r3, r3, r7
1000a5f8:	9302      	str	r3, [sp, #8]
1000a5fa:	2c00      	cmp	r4, #0
1000a5fc:	d1ea      	bne.n	1000a5d4 <XMC_USIC_CH_SetBaudrate+0x3c>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
1000a5fe:	2380      	movs	r3, #128	; 0x80
1000a600:	9a03      	ldr	r2, [sp, #12]
1000a602:	021b      	lsls	r3, r3, #8
1000a604:	4313      	orrs	r3, r2
1000a606:	612b      	str	r3, [r5, #16]

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000a608:	9b04      	ldr	r3, [sp, #16]
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000a60a:	6969      	ldr	r1, [r5, #20]
1000a60c:	4a07      	ldr	r2, [pc, #28]	; (1000a62c <XMC_USIC_CH_SetBaudrate+0x94>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000a60e:	3b01      	subs	r3, #1
1000a610:	029b      	lsls	r3, r3, #10
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000a612:	400a      	ands	r2, r1
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
1000a614:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
1000a616:	9b01      	ldr	r3, [sp, #4]
1000a618:	3b01      	subs	r3, #1
1000a61a:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000a61c:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000a61e:	616a      	str	r2, [r5, #20]
  {
    status = XMC_USIC_CH_STATUS_ERROR;
  }
  
  return status;
}
1000a620:	1c20      	adds	r0, r4, #0
1000a622:	b007      	add	sp, #28
1000a624:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a626:	46c0      	nop			; (mov r8, r8)
1000a628:	000003ff 	.word	0x000003ff
1000a62c:	fc0080ef 	.word	0xfc0080ef

1000a630 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
1000a630:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a632:	b085      	sub	sp, #20
1000a634:	9201      	str	r2, [sp, #4]
1000a636:	1c07      	adds	r7, r0, #0
1000a638:	9103      	str	r1, [sp, #12]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
1000a63a:	f7ff fd19 	bl	1000a070 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
  int32_t brg_clock = rate * oversampling;
1000a63e:	9b01      	ldr	r3, [sp, #4]
1000a640:	9a03      	ldr	r2, [sp, #12]
  return status;
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
1000a642:	1c06      	adds	r6, r0, #0
  int32_t brg_clock = rate * oversampling;
1000a644:	4353      	muls	r3, r2

    status = XMC_USIC_CH_STATUS_OK;
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
1000a646:	2401      	movs	r4, #1
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
  int32_t brg_clock = rate * oversampling;
1000a648:	9300      	str	r3, [sp, #0]
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
1000a64a:	4298      	cmp	r0, r3
1000a64c:	dd45      	ble.n	1000a6da <XMC_USIC_CH_SetBaudrateEx+0xaa>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
1000a64e:	1c19      	adds	r1, r3, #0
1000a650:	f7ff ff14 	bl	1000a47c <__aeabi_idiv>
1000a654:	9b00      	ldr	r3, [sp, #0]
1000a656:	1c05      	adds	r5, r0, #0
1000a658:	40a3      	lsls	r3, r4
1000a65a:	9302      	str	r3, [sp, #8]
    while (divider_step >= 1023)
1000a65c:	4b20      	ldr	r3, [pc, #128]	; (1000a6e0 <XMC_USIC_CH_SetBaudrateEx+0xb0>)
1000a65e:	429d      	cmp	r5, r3
1000a660:	d90a      	bls.n	1000a678 <XMC_USIC_CH_SetBaudrateEx+0x48>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
1000a662:	1c30      	adds	r0, r6, #0
1000a664:	9902      	ldr	r1, [sp, #8]
1000a666:	f7ff ff09 	bl	1000a47c <__aeabi_idiv>
1000a66a:	9a00      	ldr	r2, [sp, #0]
1000a66c:	9b02      	ldr	r3, [sp, #8]
1000a66e:	4694      	mov	ip, r2
  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
    {
      pdiv++;
1000a670:	3401      	adds	r4, #1
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
1000a672:	1c05      	adds	r5, r0, #0
1000a674:	4463      	add	r3, ip
1000a676:	e7f0      	b.n	1000a65a <XMC_USIC_CH_SetBaudrateEx+0x2a>
1000a678:	9901      	ldr	r1, [sp, #4]
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
1000a67a:	1c6b      	adds	r3, r5, #1
1000a67c:	4361      	muls	r1, r4
1000a67e:	1c30      	adds	r0, r6, #0
1000a680:	4359      	muls	r1, r3
1000a682:	9300      	str	r3, [sp, #0]
1000a684:	f7ff feea 	bl	1000a45c <__aeabi_uidiv>
1000a688:	1c21      	adds	r1, r4, #0

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
1000a68a:	9b03      	ldr	r3, [sp, #12]
1000a68c:	4369      	muls	r1, r5
1000a68e:	1a18      	subs	r0, r3, r0
1000a690:	17c2      	asrs	r2, r0, #31
1000a692:	1883      	adds	r3, r0, r2
1000a694:	4053      	eors	r3, r2
1000a696:	9302      	str	r3, [sp, #8]
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
1000a698:	9b01      	ldr	r3, [sp, #4]
1000a69a:	1c30      	adds	r0, r6, #0
1000a69c:	4359      	muls	r1, r3
1000a69e:	f7ff fedd 	bl	1000a45c <__aeabi_uidiv>
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
1000a6a2:	9b03      	ldr	r3, [sp, #12]
1000a6a4:	1a18      	subs	r0, r3, r0
1000a6a6:	17c3      	asrs	r3, r0, #31
1000a6a8:	18c0      	adds	r0, r0, r3
1000a6aa:	4058      	eors	r0, r3
1000a6ac:	9b02      	ldr	r3, [sp, #8]
1000a6ae:	4283      	cmp	r3, r0
1000a6b0:	da00      	bge.n	1000a6b4 <XMC_USIC_CH_SetBaudrateEx+0x84>
    {
      divider_step += 1;
1000a6b2:	9d00      	ldr	r5, [sp, #0]
    }

    divider_step = 1024 - divider_step;
1000a6b4:	2380      	movs	r3, #128	; 0x80
1000a6b6:	00db      	lsls	r3, r3, #3
1000a6b8:	1b5d      	subs	r5, r3, r5


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
1000a6ba:	2380      	movs	r3, #128	; 0x80
1000a6bc:	01db      	lsls	r3, r3, #7
1000a6be:	431d      	orrs	r5, r3
1000a6c0:	613d      	str	r5, [r7, #16]

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000a6c2:	9b01      	ldr	r3, [sp, #4]


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000a6c4:	6979      	ldr	r1, [r7, #20]
1000a6c6:	4a07      	ldr	r2, [pc, #28]	; (1000a6e4 <XMC_USIC_CH_SetBaudrateEx+0xb4>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000a6c8:	3b01      	subs	r3, #1
1000a6ca:	029b      	lsls	r3, r3, #10


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000a6cc:	400a      	ands	r2, r1
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
1000a6ce:	3c01      	subs	r4, #1
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
1000a6d0:	4313      	orrs	r3, r2
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
1000a6d2:	0424      	lsls	r4, r4, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000a6d4:	431c      	orrs	r4, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000a6d6:	617c      	str	r4, [r7, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
1000a6d8:	2400      	movs	r4, #0
  {
    status = XMC_USIC_CH_STATUS_ERROR;
  }

  return status;
}
1000a6da:	1c20      	adds	r0, r4, #0
1000a6dc:	b005      	add	sp, #20
1000a6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a6e0:	000003fe 	.word	0x000003fe
1000a6e4:	fc0080ef 	.word	0xfc0080ef

1000a6e8 <XMC_USIC_CH_TXFIFO_Configure>:
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
1000a6e8:	30fc      	adds	r0, #252	; 0xfc

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
1000a6ea:	b530      	push	{r4, r5, lr}
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
1000a6ec:	68c5      	ldr	r5, [r0, #12]
1000a6ee:	4c06      	ldr	r4, [pc, #24]	; (1000a708 <XMC_USIC_CH_TXFIFO_Configure+0x20>)
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
1000a6f0:	0612      	lsls	r2, r2, #24
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
1000a6f2:	402c      	ands	r4, r5
1000a6f4:	60c4      	str	r4, [r0, #12]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
1000a6f6:	68c5      	ldr	r5, [r0, #12]
1000a6f8:	4c04      	ldr	r4, [pc, #16]	; (1000a70c <XMC_USIC_CH_TXFIFO_Configure+0x24>)
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
1000a6fa:	021b      	lsls	r3, r3, #8
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
1000a6fc:	402c      	ands	r4, r5
1000a6fe:	4321      	orrs	r1, r4
1000a700:	430a      	orrs	r2, r1
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
1000a702:	4313      	orrs	r3, r2
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
1000a704:	60c3      	str	r3, [r0, #12]
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
1000a706:	bd30      	pop	{r4, r5, pc}
1000a708:	f8ffffff 	.word	0xf8ffffff
1000a70c:	f8ffc0c0 	.word	0xf8ffc0c0

1000a710 <XMC_USIC_CH_RXFIFO_Configure>:
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
1000a710:	30fc      	adds	r0, #252	; 0xfc

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
1000a712:	b530      	push	{r4, r5, lr}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
1000a714:	6905      	ldr	r5, [r0, #16]
1000a716:	4c08      	ldr	r4, [pc, #32]	; (1000a738 <XMC_USIC_CH_RXFIFO_Configure+0x28>)
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
1000a718:	0612      	lsls	r2, r2, #24
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
1000a71a:	402c      	ands	r4, r5
1000a71c:	6104      	str	r4, [r0, #16]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
1000a71e:	6904      	ldr	r4, [r0, #16]
1000a720:	4d06      	ldr	r5, [pc, #24]	; (1000a73c <XMC_USIC_CH_RXFIFO_Configure+0x2c>)
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
1000a722:	021b      	lsls	r3, r3, #8
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
1000a724:	4025      	ands	r5, r4
1000a726:	2480      	movs	r4, #128	; 0x80
1000a728:	0564      	lsls	r4, r4, #21
1000a72a:	432c      	orrs	r4, r5
1000a72c:	4321      	orrs	r1, r4
1000a72e:	430a      	orrs	r2, r1
1000a730:	4313      	orrs	r3, r2
1000a732:	6103      	str	r3, [r0, #16]
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
1000a734:	bd30      	pop	{r4, r5, pc}
1000a736:	46c0      	nop			; (mov r8, r8)
1000a738:	f8ffffff 	.word	0xf8ffffff
1000a73c:	efffc0c0 	.word	0xefffc0c0

1000a740 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
1000a740:	0212      	lsls	r2, r2, #8
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
1000a742:	0609      	lsls	r1, r1, #24
1000a744:	4311      	orrs	r1, r2
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
1000a746:	1c0a      	adds	r2, r1, #0
void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
1000a748:	30fc      	adds	r0, #252	; 0xfc
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
1000a74a:	b510      	push	{r4, lr}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
1000a74c:	4b04      	ldr	r3, [pc, #16]	; (1000a760 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x20>)
1000a74e:	6904      	ldr	r4, [r0, #16]
1000a750:	4023      	ands	r3, r4
1000a752:	6103      	str	r3, [r0, #16]

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
1000a754:	6904      	ldr	r4, [r0, #16]
1000a756:	4b03      	ldr	r3, [pc, #12]	; (1000a764 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x24>)
1000a758:	4023      	ands	r3, r4
1000a75a:	431a      	orrs	r2, r3
1000a75c:	6102      	str	r2, [r0, #16]
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
1000a75e:	bd10      	pop	{r4, pc}
1000a760:	f8ffffff 	.word	0xf8ffffff
1000a764:	ffffc0ff 	.word	0xffffc0ff

1000a768 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
1000a768:	b510      	push	{r4, lr}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000a76a:	2407      	movs	r4, #7
1000a76c:	408c      	lsls	r4, r1
                  (service_request << (uint32_t)interrupt_node));
1000a76e:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000a770:	6983      	ldr	r3, [r0, #24]
1000a772:	43a3      	bics	r3, r4
1000a774:	4313      	orrs	r3, r2
1000a776:	6183      	str	r3, [r0, #24]
                  (service_request << (uint32_t)interrupt_node));
}
1000a778:	bd10      	pop	{r4, pc}

1000a77a <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
1000a77a:	b510      	push	{r4, lr}
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000a77c:	2407      	movs	r4, #7
1000a77e:	408c      	lsls	r4, r1
                   (service_request << (uint32_t)interrupt_node));
1000a780:	408a      	lsls	r2, r1

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000a782:	30fc      	adds	r0, #252	; 0xfc
1000a784:	68c3      	ldr	r3, [r0, #12]
1000a786:	43a3      	bics	r3, r4
1000a788:	4313      	orrs	r3, r2
1000a78a:	60c3      	str	r3, [r0, #12]
                   (service_request << (uint32_t)interrupt_node));
}
1000a78c:	bd10      	pop	{r4, pc}

1000a78e <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
1000a78e:	b510      	push	{r4, lr}
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000a790:	2407      	movs	r4, #7
1000a792:	408c      	lsls	r4, r1
                   (service_request << (uint32_t)interrupt_node));
1000a794:	408a      	lsls	r2, r1

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000a796:	30fc      	adds	r0, #252	; 0xfc
1000a798:	6903      	ldr	r3, [r0, #16]
1000a79a:	43a3      	bics	r3, r4
1000a79c:	4313      	orrs	r3, r2
1000a79e:	6103      	str	r3, [r0, #16]
                   (service_request << (uint32_t)interrupt_node));
}
1000a7a0:	bd10      	pop	{r4, pc}
	...

1000a7a4 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
1000a7a4:	b508      	push	{r3, lr}
  if (usic == USIC0)
1000a7a6:	4b0a      	ldr	r3, [pc, #40]	; (1000a7d0 <XMC_USIC_Enable+0x2c>)
1000a7a8:	4298      	cmp	r0, r3
1000a7aa:	d102      	bne.n	1000a7b2 <XMC_USIC_Enable+0xe>
1000a7ac:	f7ff fee9 	bl	1000a582 <XMC_USIC_Enable.part.0>
1000a7b0:	e00c      	b.n	1000a7cc <XMC_USIC_Enable+0x28>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
1000a7b2:	4b08      	ldr	r3, [pc, #32]	; (1000a7d4 <XMC_USIC_Enable+0x30>)
1000a7b4:	4298      	cmp	r0, r3
1000a7b6:	d109      	bne.n	1000a7cc <XMC_USIC_Enable+0x28>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
1000a7b8:	2080      	movs	r0, #128	; 0x80
1000a7ba:	02c0      	lsls	r0, r0, #11
1000a7bc:	f7ff fb6e 	bl	10009e9c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
1000a7c0:	2080      	movs	r0, #128	; 0x80
1000a7c2:	02c0      	lsls	r0, r0, #11
1000a7c4:	f7ff fb7e 	bl	10009ec4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
1000a7c8:	2800      	cmp	r0, #0
1000a7ca:	d1f9      	bne.n	1000a7c0 <XMC_USIC_Enable+0x1c>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
1000a7cc:	bd08      	pop	{r3, pc}
1000a7ce:	46c0      	nop			; (mov r8, r8)
1000a7d0:	48000008 	.word	0x48000008
1000a7d4:	48004008 	.word	0x48004008

1000a7d8 <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
1000a7d8:	2390      	movs	r3, #144	; 0x90
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
1000a7da:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
1000a7dc:	05db      	lsls	r3, r3, #23
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
1000a7de:	1e04      	subs	r4, r0, #0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
1000a7e0:	429c      	cmp	r4, r3
1000a7e2:	d002      	beq.n	1000a7ea <XMC_USIC_CH_Enable+0x12>
1000a7e4:	4b0c      	ldr	r3, [pc, #48]	; (1000a818 <XMC_USIC_CH_Enable+0x40>)
1000a7e6:	4298      	cmp	r0, r3
1000a7e8:	d102      	bne.n	1000a7f0 <XMC_USIC_CH_Enable+0x18>
1000a7ea:	f7ff feca 	bl	1000a582 <XMC_USIC_Enable.part.0>
1000a7ee:	e008      	b.n	1000a802 <XMC_USIC_CH_Enable+0x2a>
  {
    XMC_USIC_Enable(XMC_USIC0);
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
1000a7f0:	4b0a      	ldr	r3, [pc, #40]	; (1000a81c <XMC_USIC_CH_Enable+0x44>)
1000a7f2:	4298      	cmp	r0, r3
1000a7f4:	d002      	beq.n	1000a7fc <XMC_USIC_CH_Enable+0x24>
1000a7f6:	4b0a      	ldr	r3, [pc, #40]	; (1000a820 <XMC_USIC_CH_Enable+0x48>)
1000a7f8:	4298      	cmp	r0, r3
1000a7fa:	d102      	bne.n	1000a802 <XMC_USIC_CH_Enable+0x2a>
  {
    XMC_USIC_Enable(XMC_USIC1);
1000a7fc:	4809      	ldr	r0, [pc, #36]	; (1000a824 <XMC_USIC_CH_Enable+0x4c>)
1000a7fe:	f7ff ffd1 	bl	1000a7a4 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
1000a802:	2303      	movs	r3, #3
1000a804:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
1000a806:	68e3      	ldr	r3, [r4, #12]
1000a808:	07db      	lsls	r3, r3, #31
1000a80a:	d5fc      	bpl.n	1000a806 <XMC_USIC_CH_Enable+0x2e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
1000a80c:	220f      	movs	r2, #15
1000a80e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000a810:	4393      	bics	r3, r2
1000a812:	6423      	str	r3, [r4, #64]	; 0x40
}
1000a814:	bd10      	pop	{r4, pc}
1000a816:	46c0      	nop			; (mov r8, r8)
1000a818:	48000200 	.word	0x48000200
1000a81c:	48004000 	.word	0x48004000
1000a820:	48004200 	.word	0x48004200
1000a824:	48004008 	.word	0x48004008

1000a828 <_sbrk>:
caddr_t _sbrk(int nbytes)
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
1000a828:	4a0c      	ldr	r2, [pc, #48]	; (1000a85c <_sbrk+0x34>)

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
1000a82a:	b508      	push	{r3, lr}
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
1000a82c:	6811      	ldr	r1, [r2, #0]

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
1000a82e:	1c03      	adds	r3, r0, #0
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
1000a830:	2900      	cmp	r1, #0
1000a832:	d101      	bne.n	1000a838 <_sbrk+0x10>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
1000a834:	490a      	ldr	r1, [pc, #40]	; (1000a860 <_sbrk+0x38>)
1000a836:	6011      	str	r1, [r2, #0]
  }

  base = heap_ptr;

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
1000a838:	2103      	movs	r1, #3

  if (heap_ptr == NULL) {
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
  }

  base = heap_ptr;
1000a83a:	6810      	ldr	r0, [r2, #0]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
1000a83c:	3303      	adds	r3, #3
1000a83e:	438b      	bics	r3, r1
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
1000a840:	4908      	ldr	r1, [pc, #32]	; (1000a864 <_sbrk+0x3c>)
1000a842:	18c3      	adds	r3, r0, r3
1000a844:	428b      	cmp	r3, r1
1000a846:	d201      	bcs.n	1000a84c <_sbrk+0x24>
  {
    heap_ptr += nbytes;
1000a848:	6013      	str	r3, [r2, #0]
    return (base);
1000a84a:	e005      	b.n	1000a858 <_sbrk+0x30>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
1000a84c:	f002 f868 	bl	1000c920 <__errno>
1000a850:	230c      	movs	r3, #12
1000a852:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
1000a854:	2001      	movs	r0, #1
1000a856:	4240      	negs	r0, r0
  }
}
1000a858:	bd08      	pop	{r3, pc}
1000a85a:	46c0      	nop			; (mov r8, r8)
1000a85c:	20002fc0 	.word	0x20002fc0
1000a860:	20003048 	.word	0x20003048
1000a864:	20003ffc 	.word	0x20003ffc

1000a868 <_init>:

/* Init */
void _init(void)
{}
1000a868:	4770      	bx	lr

1000a86a <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
1000a86a:	b510      	push	{r4, lr}
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
1000a86c:	6843      	ldr	r3, [r0, #4]
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
1000a86e:	1c0c      	adds	r4, r1, #0
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
1000a870:	3328      	adds	r3, #40	; 0x28
1000a872:	7819      	ldrb	r1, [r3, #0]
1000a874:	2301      	movs	r3, #1
1000a876:	408b      	lsls	r3, r1
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
1000a878:	1e5a      	subs	r2, r3, #1
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
1000a87a:	429c      	cmp	r4, r3
1000a87c:	d200      	bcs.n	1000a880 <UART_lReconfigureRxFIFO+0x16>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
1000a87e:	1e62      	subs	r2, r4, #1
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
1000a880:	6800      	ldr	r0, [r0, #0]
1000a882:	f7ff ff5d 	bl	1000a740 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
1000a886:	bd10      	pop	{r4, pc}

1000a888 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
1000a888:	b508      	push	{r3, lr}
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
1000a88a:	6843      	ldr	r3, [r0, #4]
1000a88c:	685b      	ldr	r3, [r3, #4]
1000a88e:	4798      	blx	r3

  return status;
}
1000a890:	bd08      	pop	{r3, pc}

1000a892 <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
1000a892:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
1000a894:	6846      	ldr	r6, [r0, #4]
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
1000a896:	6885      	ldr	r5, [r0, #8]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
1000a898:	1df3      	adds	r3, r6, #7
1000a89a:	7fdc      	ldrb	r4, [r3, #31]
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
1000a89c:	2304      	movs	r3, #4
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
1000a89e:	2c00      	cmp	r4, #0
1000a8a0:	d129      	bne.n	1000a8f6 <UART_StartReceiveIRQ+0x64>
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->rx_busy == false)
1000a8a2:	7e6c      	ldrb	r4, [r5, #25]
  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
1000a8a4:	3b02      	subs	r3, #2
    if (ptr_runtime->rx_busy == false)
1000a8a6:	b2e4      	uxtb	r4, r4
1000a8a8:	2c00      	cmp	r4, #0
1000a8aa:	d124      	bne.n	1000a8f6 <UART_StartReceiveIRQ+0x64>
        }
        ret_stat = UART_STATUS_SUCCESS;
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
1000a8ac:	3301      	adds	r3, #1
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->rx_busy == false)
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
1000a8ae:	2900      	cmp	r1, #0
1000a8b0:	d021      	beq.n	1000a8f6 <UART_StartReceiveIRQ+0x64>
1000a8b2:	2a00      	cmp	r2, #0
1000a8b4:	d01f      	beq.n	1000a8f6 <UART_StartReceiveIRQ+0x64>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
1000a8b6:	3b02      	subs	r3, #2
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
1000a8b8:	6069      	str	r1, [r5, #4]
        ptr_runtime->rx_data_count = count;
1000a8ba:	612a      	str	r2, [r5, #16]
        ptr_runtime->rx_busy = true;
1000a8bc:	766b      	strb	r3, [r5, #25]
        ptr_runtime->rx_data_index = 0U;
1000a8be:	616c      	str	r4, [r5, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000a8c0:	3628      	adds	r6, #40	; 0x28
1000a8c2:	7833      	ldrb	r3, [r6, #0]
1000a8c4:	6805      	ldr	r5, [r0, #0]
1000a8c6:	2b00      	cmp	r3, #0
1000a8c8:	d010      	beq.n	1000a8ec <UART_StartReceiveIRQ+0x5a>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1000a8ca:	2380      	movs	r3, #128	; 0x80
1000a8cc:	1c06      	adds	r6, r0, #0
1000a8ce:	01db      	lsls	r3, r3, #7
1000a8d0:	35fc      	adds	r5, #252	; 0xfc
1000a8d2:	1c11      	adds	r1, r2, #0
1000a8d4:	61eb      	str	r3, [r5, #28]
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
1000a8d6:	f7ff ffc8 	bl	1000a86a <UART_lReconfigureRxFIFO>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
1000a8da:	21c0      	movs	r1, #192	; 0xc0

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
1000a8dc:	6833      	ldr	r3, [r6, #0]
1000a8de:	05c9      	lsls	r1, r1, #23
1000a8e0:	33fc      	adds	r3, #252	; 0xfc
1000a8e2:	691a      	ldr	r2, [r3, #16]
1000a8e4:	430a      	orrs	r2, r1
1000a8e6:	611a      	str	r2, [r3, #16]
1000a8e8:	1c23      	adds	r3, r4, #0
1000a8ea:	e004      	b.n	1000a8f6 <UART_StartReceiveIRQ+0x64>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
1000a8ec:	21c0      	movs	r1, #192	; 0xc0
1000a8ee:	6c2a      	ldr	r2, [r5, #64]	; 0x40
1000a8f0:	0209      	lsls	r1, r1, #8
1000a8f2:	430a      	orrs	r2, r1
1000a8f4:	642a      	str	r2, [r5, #64]	; 0x40
        ret_stat = UART_STATUS_BUFFER_INVALID;
      }
    }
  }
  return ret_stat;
}
1000a8f6:	1c18      	adds	r0, r3, #0
1000a8f8:	bd70      	pop	{r4, r5, r6, pc}

1000a8fa <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
1000a8fa:	b508      	push	{r3, lr}
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->receive_mode)
1000a8fc:	6843      	ldr	r3, [r0, #4]
1000a8fe:	3307      	adds	r3, #7
1000a900:	7fdb      	ldrb	r3, [r3, #31]
1000a902:	2b00      	cmp	r3, #0
1000a904:	d102      	bne.n	1000a90c <UART_Receive+0x12>
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
1000a906:	f7ff ffc4 	bl	1000a892 <UART_StartReceiveIRQ>
    break;
1000a90a:	e000      	b.n	1000a90e <UART_Receive+0x14>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
1000a90c:	2004      	movs	r0, #4
#endif
  default:
    break;
  }
  return ret_stat;
}
1000a90e:	bd08      	pop	{r3, pc}

1000a910 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
1000a910:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000a912:	6843      	ldr	r3, [r0, #4]
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
1000a914:	1c05      	adds	r5, r0, #0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000a916:	3328      	adds	r3, #40	; 0x28
1000a918:	781b      	ldrb	r3, [r3, #0]
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
1000a91a:	6884      	ldr	r4, [r0, #8]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
1000a91c:	2b00      	cmp	r3, #0
1000a91e:	d02b      	beq.n	1000a978 <UART_lReceiveHandler+0x68>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
1000a920:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1000a922:	1c03      	adds	r3, r0, #0
1000a924:	33fc      	adds	r3, #252	; 0xfc
1000a926:	699b      	ldr	r3, [r3, #24]
1000a928:	071b      	lsls	r3, r3, #28
1000a92a:	d41c      	bmi.n	1000a966 <UART_lReceiveHandler+0x56>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000a92c:	6963      	ldr	r3, [r4, #20]
1000a92e:	6922      	ldr	r2, [r4, #16]
1000a930:	4293      	cmp	r3, r2
1000a932:	d207      	bcs.n	1000a944 <UART_lReceiveHandler+0x34>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1000a934:	6862      	ldr	r2, [r4, #4]
1000a936:	18d6      	adds	r6, r2, r3
1000a938:	f7ff fe17 	bl	1000a56a <XMC_UART_CH_GetReceivedData>
1000a93c:	7030      	strb	r0, [r6, #0]
        (ptr_runtime->rx_data_index)++;
1000a93e:	6963      	ldr	r3, [r4, #20]
1000a940:	3301      	adds	r3, #1
1000a942:	6163      	str	r3, [r4, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000a944:	6963      	ldr	r3, [r4, #20]
1000a946:	6922      	ldr	r2, [r4, #16]
1000a948:	4293      	cmp	r3, r2
1000a94a:	d1e9      	bne.n	1000a920 <UART_lReceiveHandler+0x10>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
1000a94c:	2300      	movs	r3, #0
1000a94e:	7663      	strb	r3, [r4, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
1000a950:	682b      	ldr	r3, [r5, #0]
1000a952:	4a18      	ldr	r2, [pc, #96]	; (1000a9b4 <UART_lReceiveHandler+0xa4>)
1000a954:	33fc      	adds	r3, #252	; 0xfc
1000a956:	6919      	ldr	r1, [r3, #16]
1000a958:	400a      	ands	r2, r1
1000a95a:	611a      	str	r2, [r3, #16]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
1000a95c:	686b      	ldr	r3, [r5, #4]
1000a95e:	689b      	ldr	r3, [r3, #8]
1000a960:	2b00      	cmp	r3, #0
1000a962:	d000      	beq.n	1000a966 <UART_lReceiveHandler+0x56>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
1000a964:	4798      	blx	r3
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000a966:	6961      	ldr	r1, [r4, #20]
1000a968:	6923      	ldr	r3, [r4, #16]
1000a96a:	4299      	cmp	r1, r3
1000a96c:	d221      	bcs.n	1000a9b2 <UART_lReceiveHandler+0xa2>
    {
      UART_lReconfigureRxFIFO(handle,
1000a96e:	1a59      	subs	r1, r3, r1
1000a970:	1c28      	adds	r0, r5, #0
1000a972:	f7ff ff7a 	bl	1000a86a <UART_lReconfigureRxFIFO>
1000a976:	e01c      	b.n	1000a9b2 <UART_lReceiveHandler+0xa2>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000a978:	6963      	ldr	r3, [r4, #20]
1000a97a:	6922      	ldr	r2, [r4, #16]
1000a97c:	4293      	cmp	r3, r2
1000a97e:	d208      	bcs.n	1000a992 <UART_lReceiveHandler+0x82>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
1000a980:	6862      	ldr	r2, [r4, #4]
1000a982:	6800      	ldr	r0, [r0, #0]
1000a984:	18d6      	adds	r6, r2, r3
1000a986:	f7ff fdf0 	bl	1000a56a <XMC_UART_CH_GetReceivedData>
1000a98a:	7030      	strb	r0, [r6, #0]
      (ptr_runtime->rx_data_index)++;
1000a98c:	6963      	ldr	r3, [r4, #20]
1000a98e:	3301      	adds	r3, #1
1000a990:	6163      	str	r3, [r4, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000a992:	6963      	ldr	r3, [r4, #20]
1000a994:	6922      	ldr	r2, [r4, #16]
1000a996:	4293      	cmp	r3, r2
1000a998:	d10b      	bne.n	1000a9b2 <UART_lReceiveHandler+0xa2>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
1000a99a:	2300      	movs	r3, #0
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
1000a99c:	682a      	ldr	r2, [r5, #0]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
1000a99e:	7663      	strb	r3, [r4, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
1000a9a0:	6c11      	ldr	r1, [r2, #64]	; 0x40
1000a9a2:	4b05      	ldr	r3, [pc, #20]	; (1000a9b8 <UART_lReceiveHandler+0xa8>)
1000a9a4:	400b      	ands	r3, r1
1000a9a6:	6413      	str	r3, [r2, #64]	; 0x40
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
1000a9a8:	686b      	ldr	r3, [r5, #4]
1000a9aa:	689b      	ldr	r3, [r3, #8]
1000a9ac:	2b00      	cmp	r3, #0
1000a9ae:	d000      	beq.n	1000a9b2 <UART_lReceiveHandler+0xa2>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
1000a9b0:	4798      	blx	r3
      }
    }
  }
}
1000a9b2:	bd70      	pop	{r4, r5, r6, pc}
1000a9b4:	9fffffff 	.word	0x9fffffff
1000a9b8:	ffff3fff 	.word	0xffff3fff

1000a9bc <cunit_logger_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
1000a9bc:	b570      	push	{r4, r5, r6, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 3U, &cunit_logger_rx_pin_config);
1000a9be:	4e27      	ldr	r6, [pc, #156]	; (1000aa5c <cunit_logger_init+0xa0>)
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &cunit_logger_channel_config);
1000a9c0:	4c27      	ldr	r4, [pc, #156]	; (1000aa60 <cunit_logger_init+0xa4>)
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 3U, &cunit_logger_rx_pin_config);
1000a9c2:	1c30      	adds	r0, r6, #0
1000a9c4:	4a27      	ldr	r2, [pc, #156]	; (1000aa64 <cunit_logger_init+0xa8>)
1000a9c6:	2103      	movs	r1, #3
1000a9c8:	f7ff fa22 	bl	10009e10 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &cunit_logger_channel_config);
1000a9cc:	1c20      	adds	r0, r4, #0
1000a9ce:	4926      	ldr	r1, [pc, #152]	; (1000aa68 <cunit_logger_init+0xac>)
1000a9d0:	f7ff fd74 	bl	1000a4bc <XMC_UART_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000a9d4:	2207      	movs	r2, #7
1000a9d6:	69e3      	ldr	r3, [r4, #28]
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX0, 0U);
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH1,
1000a9d8:	1c20      	adds	r0, r4, #0
1000a9da:	4393      	bics	r3, r2
1000a9dc:	61e3      	str	r3, [r4, #28]
1000a9de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1000a9e0:	2110      	movs	r1, #16
1000a9e2:	4393      	bics	r3, r2
1000a9e4:	62a3      	str	r3, [r4, #40]	; 0x28
1000a9e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
1000a9e8:	2502      	movs	r5, #2
1000a9ea:	4393      	bics	r3, r2
1000a9ec:	6323      	str	r3, [r4, #48]	; 0x30
1000a9ee:	3a03      	subs	r2, #3
1000a9f0:	2301      	movs	r3, #1
1000a9f2:	f7ff fe79 	bl	1000a6e8 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH1,
1000a9f6:	2100      	movs	r1, #0
1000a9f8:	1c20      	adds	r0, r4, #0
1000a9fa:	1c0b      	adds	r3, r1, #0
1000a9fc:	2204      	movs	r2, #4
1000a9fe:	f7ff fe87 	bl	1000a710 <XMC_USIC_CH_RXFIFO_Configure>
1000aa02:	220f      	movs	r2, #15
1000aa04:	6c23      	ldr	r3, [r4, #64]	; 0x40
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH1);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 2U, &cunit_logger_tx_pin_config);
1000aa06:	1c30      	adds	r0, r6, #0
1000aa08:	4393      	bics	r3, r2
1000aa0a:	432b      	orrs	r3, r5
1000aa0c:	6423      	str	r3, [r4, #64]	; 0x40
1000aa0e:	1c29      	adds	r1, r5, #0
1000aa10:	4a16      	ldr	r2, [pc, #88]	; (1000aa6c <cunit_logger_init+0xb0>)
1000aa12:	f7ff f9fd 	bl	10009e10 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
1000aa16:	1c20      	adds	r0, r4, #0
1000aa18:	2110      	movs	r1, #16
1000aa1a:	2200      	movs	r2, #0
1000aa1c:	f7ff fea4 	bl	1000a768 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1000aa20:	1c20      	adds	r0, r4, #0
1000aa22:	1c2a      	adds	r2, r5, #0
1000aa24:	2110      	movs	r1, #16
1000aa26:	f7ff feb2 	bl	1000a78e <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x2U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
1000aa2a:	1c20      	adds	r0, r4, #0
1000aa2c:	1c2a      	adds	r2, r5, #0
1000aa2e:	2113      	movs	r1, #19
1000aa30:	f7ff fead 	bl	1000a78e <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000aa34:	22c2      	movs	r2, #194	; 0xc2
1000aa36:	21c0      	movs	r1, #192	; 0xc0
1000aa38:	4c0d      	ldr	r4, [pc, #52]	; (1000aa70 <cunit_logger_init+0xb4>)
1000aa3a:	0092      	lsls	r2, r2, #2
1000aa3c:	58a3      	ldr	r3, [r4, r2]
1000aa3e:	0609      	lsls	r1, r1, #24
1000aa40:	021b      	lsls	r3, r3, #8
1000aa42:	0a1b      	lsrs	r3, r3, #8
1000aa44:	430b      	orrs	r3, r1
       0x2U);
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)11, 3U);
  XMC_SCU_SetInterruptControl(11U, XMC_SCU_IRQCTRL_USIC0_SR2_IRQ11);
1000aa46:	21b0      	movs	r1, #176	; 0xb0
1000aa48:	50a3      	str	r3, [r4, r2]
1000aa4a:	200b      	movs	r0, #11
1000aa4c:	0109      	lsls	r1, r1, #4
1000aa4e:	f7ff fb15 	bl	1000a07c <XMC_SCU_SetInterruptControl>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000aa52:	2380      	movs	r3, #128	; 0x80
1000aa54:	011b      	lsls	r3, r3, #4
1000aa56:	6023      	str	r3, [r4, #0]
  NVIC_EnableIRQ((IRQn_Type)11);
  return status;
}
1000aa58:	2000      	movs	r0, #0
1000aa5a:	bd70      	pop	{r4, r5, r6, pc}
1000aa5c:	40040100 	.word	0x40040100
1000aa60:	48000200 	.word	0x48000200
1000aa64:	100109f8 	.word	0x100109f8
1000aa68:	100109d8 	.word	0x100109d8
1000aa6c:	100109f0 	.word	0x100109f0
1000aa70:	e000e100 	.word	0xe000e100

1000aa74 <IRQ11_Handler>:
/*Receive ISR*/
void cunit_logger_RX_HANDLER()
{
1000aa74:	b508      	push	{r3, lr}
  UART_lReceiveHandler(&cunit_logger);
1000aa76:	4802      	ldr	r0, [pc, #8]	; (1000aa80 <IRQ11_Handler+0xc>)
1000aa78:	f7ff ff4a 	bl	1000a910 <UART_lReceiveHandler>
}
1000aa7c:	bd08      	pop	{r3, pc}
1000aa7e:	46c0      	nop			; (mov r8, r8)
1000aa80:	20002660 	.word	0x20002660

1000aa84 <TIMER_Start>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
1000aa84:	1dc2      	adds	r2, r0, #7
1000aa86:	7fd2      	ldrb	r2, [r2, #31]

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
1000aa88:	1c03      	adds	r3, r0, #0
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
1000aa8a:	2001      	movs	r0, #1
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
1000aa8c:	2a00      	cmp	r2, #0
1000aa8e:	d007      	beq.n	1000aaa0 <TIMER_Start+0x1c>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
1000aa90:	2000      	movs	r0, #0

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000aa92:	1c9a      	adds	r2, r3, #2
1000aa94:	7fd2      	ldrb	r2, [r2, #31]
1000aa96:	4282      	cmp	r2, r0
1000aa98:	d102      	bne.n	1000aaa0 <TIMER_Start+0x1c>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
1000aa9a:	2201      	movs	r2, #1
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
1000aa9c:	695b      	ldr	r3, [r3, #20]
1000aa9e:	60da      	str	r2, [r3, #12]
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
1000aaa0:	4770      	bx	lr

1000aaa2 <TIMER_GetTimerStatus>:
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000aaa2:	1c82      	adds	r2, r0, #2

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
1000aaa4:	1c03      	adds	r3, r0, #0
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
1000aaa6:	2000      	movs	r0, #0

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000aaa8:	7fd2      	ldrb	r2, [r2, #31]
1000aaaa:	4282      	cmp	r2, r0
1000aaac:	d103      	bne.n	1000aab6 <TIMER_GetTimerStatus+0x14>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
1000aaae:	695b      	ldr	r3, [r3, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1000aab0:	6898      	ldr	r0, [r3, #8]
1000aab2:	2301      	movs	r3, #1
1000aab4:	4018      	ands	r0, r3
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
}
1000aab6:	4770      	bx	lr

1000aab8 <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
1000aab8:	b510      	push	{r4, lr}
1000aaba:	1c04      	adds	r4, r0, #0
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
1000aabc:	f7ff fff1 	bl	1000aaa2 <TIMER_GetTimerStatus>
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
1000aac0:	2301      	movs	r3, #1
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
1000aac2:	2800      	cmp	r0, #0
1000aac4:	d00b      	beq.n	1000aade <TIMER_Stop+0x26>
1000aac6:	1de2      	adds	r2, r4, #7
1000aac8:	7fd2      	ldrb	r2, [r2, #31]
1000aaca:	2a00      	cmp	r2, #0
1000aacc:	d007      	beq.n	1000aade <TIMER_Stop+0x26>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000aace:	1ca3      	adds	r3, r4, #2
1000aad0:	7fda      	ldrb	r2, [r3, #31]
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
1000aad2:	2300      	movs	r3, #0

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000aad4:	429a      	cmp	r2, r3
1000aad6:	d102      	bne.n	1000aade <TIMER_Stop+0x26>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
1000aad8:	2101      	movs	r1, #1
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
1000aada:	6962      	ldr	r2, [r4, #20]
1000aadc:	6111      	str	r1, [r2, #16]
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
1000aade:	1c18      	adds	r0, r3, #0
1000aae0:	bd10      	pop	{r4, pc}

1000aae2 <TIMER_ClearEvent>:
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000aae2:	1c83      	adds	r3, r0, #2
1000aae4:	7fdb      	ldrb	r3, [r3, #31]
1000aae6:	2b00      	cmp	r3, #0
1000aae8:	d103      	bne.n	1000aaf2 <TIMER_ClearEvent+0x10>
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
1000aaea:	2201      	movs	r2, #1
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
1000aaec:	6943      	ldr	r3, [r0, #20]
1000aaee:	33b0      	adds	r3, #176	; 0xb0
1000aaf0:	601a      	str	r2, [r3, #0]
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
1000aaf2:	4770      	bx	lr

1000aaf4 <TIMER_Clear>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
1000aaf4:	1dc2      	adds	r2, r0, #7
1000aaf6:	7fd2      	ldrb	r2, [r2, #31]

/*
 * Clear the timer
 */
TIMER_STATUS_t TIMER_Clear(TIMER_t *const handle_ptr)
{
1000aaf8:	1c03      	adds	r3, r0, #0
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
1000aafa:	2001      	movs	r0, #1
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
1000aafc:	2a00      	cmp	r2, #0
1000aafe:	d007      	beq.n	1000ab10 <TIMER_Clear+0x1c>
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
1000ab00:	2000      	movs	r0, #0

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000ab02:	1c9a      	adds	r2, r3, #2
1000ab04:	7fd2      	ldrb	r2, [r2, #31]
1000ab06:	4282      	cmp	r2, r0
1000ab08:	d102      	bne.n	1000ab10 <TIMER_Clear+0x1c>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1000ab0a:	2202      	movs	r2, #2
    {
      /* Clear the timer register */
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
1000ab0c:	695b      	ldr	r3, [r3, #20]
1000ab0e:	611a      	str	r2, [r3, #16]
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
1000ab10:	4770      	bx	lr

1000ab12 <TIMER_CCU4_lShadowTransfer>:
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
1000ab12:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
1000ab14:	8c42      	ldrh	r2, [r0, #34]	; 0x22
1000ab16:	635a      	str	r2, [r3, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
1000ab18:	2200      	movs	r2, #0
1000ab1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
1000ab1c:	6903      	ldr	r3, [r0, #16]
1000ab1e:	68c2      	ldr	r2, [r0, #12]
1000ab20:	689b      	ldr	r3, [r3, #8]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
1000ab22:	611a      	str	r2, [r3, #16]
}
1000ab24:	4770      	bx	lr
	...

1000ab28 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
1000ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ab2a:	1c04      	adds	r4, r0, #0
1000ab2c:	1c0e      	adds	r6, r1, #0

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;

  if (false == TIMER_GetTimerStatus(handle_ptr))
1000ab2e:	f7ff ffb8 	bl	1000aaa2 <TIMER_GetTimerStatus>
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
1000ab32:	2201      	movs	r2, #1

  if (false == TIMER_GetTimerStatus(handle_ptr))
1000ab34:	2800      	cmp	r0, #0
1000ab36:	d138      	bne.n	1000abaa <TIMER_SetTimeInterval+0x82>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
1000ab38:	68a3      	ldr	r3, [r4, #8]
1000ab3a:	429e      	cmp	r6, r3
1000ab3c:	d335      	bcc.n	1000abaa <TIMER_SetTimeInterval+0x82>
1000ab3e:	6867      	ldr	r7, [r4, #4]
1000ab40:	1c05      	adds	r5, r0, #0
1000ab42:	42be      	cmp	r6, r7
1000ab44:	d831      	bhi.n	1000abaa <TIMER_SetTimeInterval+0x82>
1000ab46:	210f      	movs	r1, #15
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
1000ab48:	1c3a      	adds	r2, r7, #0
1000ab4a:	1b4b      	subs	r3, r1, r5
1000ab4c:	40da      	lsrs	r2, r3
1000ab4e:	4296      	cmp	r6, r2
1000ab50:	d901      	bls.n	1000ab56 <TIMER_SetTimeInterval+0x2e>
      {
        lprescaler++;
1000ab52:	3501      	adds	r5, #1
1000ab54:	e7f7      	b.n	1000ab46 <TIMER_SetTimeInterval+0x1e>
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000ab56:	1ca3      	adds	r3, r4, #2
1000ab58:	7fdb      	ldrb	r3, [r3, #31]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
1000ab5a:	2201      	movs	r2, #1
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000ab5c:	2b00      	cmp	r3, #0
1000ab5e:	d124      	bne.n	1000abaa <TIMER_SetTimeInterval+0x82>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
1000ab60:	b2ed      	uxtb	r5, r5
1000ab62:	1c2f      	adds	r7, r5, #0
1000ab64:	69e0      	ldr	r0, [r4, #28]
1000ab66:	400f      	ands	r7, r1
1000ab68:	7900      	ldrb	r0, [r0, #4]
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
1000ab6a:	6922      	ldr	r2, [r4, #16]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
1000ab6c:	4388      	bics	r0, r1
1000ab6e:	1c01      	adds	r1, r0, #0
1000ab70:	69e0      	ldr	r0, [r4, #28]
1000ab72:	4339      	orrs	r1, r7
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
1000ab74:	6812      	ldr	r2, [r2, #0]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
1000ab76:	7101      	strb	r1, [r0, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
1000ab78:	1c19      	adds	r1, r3, #0
1000ab7a:	1c30      	adds	r0, r6, #0
1000ab7c:	f001 fc94 	bl	1000c4a8 <__aeabi_lmul>
1000ab80:	1c3a      	adds	r2, r7, #0
1000ab82:	f001 fc65 	bl	1000c450 <__aeabi_llsr>
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
1000ab86:	4a0a      	ldr	r2, [pc, #40]	; (1000abb0 <TIMER_SetTimeInterval+0x88>)
1000ab88:	2300      	movs	r3, #0
1000ab8a:	f001 fc6d 	bl	1000c468 <__aeabi_uldivmod>
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
1000ab8e:	b280      	uxth	r0, r0
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
1000ab90:	2801      	cmp	r0, #1
1000ab92:	d900      	bls.n	1000ab96 <TIMER_SetTimeInterval+0x6e>
        {
          (handle_ptr->period_value)--;
1000ab94:	3801      	subs	r0, #1
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
1000ab96:	210f      	movs	r1, #15
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
        {
          (handle_ptr->period_value)--;
1000ab98:	8460      	strh	r0, [r4, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
1000ab9a:	4029      	ands	r1, r5
1000ab9c:	6960      	ldr	r0, [r4, #20]
1000ab9e:	f7ff fac5 	bl	1000a12c <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
1000aba2:	1c20      	adds	r0, r4, #0
1000aba4:	f7ff ffb5 	bl	1000ab12 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
1000aba8:	2200      	movs	r2, #0
      }
#endif
    }
  }
  return (status);
}
1000abaa:	1c10      	adds	r0, r2, #0
1000abac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000abae:	46c0      	nop			; (mov r8, r8)
1000abb0:	05f5e100 	.word	0x05f5e100

1000abb4 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
1000abb4:	b570      	push	{r4, r5, r6, lr}
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
1000abb6:	2601      	movs	r6, #1
1000abb8:	1c04      	adds	r4, r0, #0
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
1000abba:	6900      	ldr	r0, [r0, #16]
1000abbc:	f000 fd6e 	bl	1000b69c <GLOBAL_CCU4_Init>
1000abc0:	1c31      	adds	r1, r6, #0

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
1000abc2:	6923      	ldr	r3, [r4, #16]
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
1000abc4:	1c05      	adds	r5, r0, #0

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
1000abc6:	689a      	ldr	r2, [r3, #8]
1000abc8:	7e23      	ldrb	r3, [r4, #24]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
1000abca:	6960      	ldr	r0, [r4, #20]
1000abcc:	4099      	lsls	r1, r3
1000abce:	60d1      	str	r1, [r2, #12]
1000abd0:	69e1      	ldr	r1, [r4, #28]
1000abd2:	f7ff fa93 	bl	1000a0fc <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
1000abd6:	1c20      	adds	r0, r4, #0
1000abd8:	f7ff ff9b 	bl	1000ab12 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
1000abdc:	1da3      	adds	r3, r4, #6
1000abde:	7fdb      	ldrb	r3, [r3, #31]
1000abe0:	2b00      	cmp	r3, #0
1000abe2:	d00a      	beq.n	1000abfa <TIMER_CCU4_lInit+0x46>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
1000abe4:	19a3      	adds	r3, r4, r6
1000abe6:	7fda      	ldrb	r2, [r3, #31]
1000abe8:	6960      	ldr	r0, [r4, #20]
1000abea:	2100      	movs	r1, #0
1000abec:	f7ff faa8 	bl	1000a140 <XMC_CCU4_SLICE_SetInterruptNode>
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
1000abf0:	6963      	ldr	r3, [r4, #20]
1000abf2:	33a4      	adds	r3, #164	; 0xa4
1000abf4:	681a      	ldr	r2, [r3, #0]
1000abf6:	4332      	orrs	r2, r6
1000abf8:	601a      	str	r2, [r3, #0]
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1000abfa:	2202      	movs	r2, #2
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
1000abfc:	6963      	ldr	r3, [r4, #20]

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
1000abfe:	1de1      	adds	r1, r4, #7
1000ac00:	611a      	str	r2, [r3, #16]
1000ac02:	3a01      	subs	r2, #1
1000ac04:	77ca      	strb	r2, [r1, #31]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
1000ac06:	3405      	adds	r4, #5
1000ac08:	7fe1      	ldrb	r1, [r4, #31]
1000ac0a:	2900      	cmp	r1, #0
1000ac0c:	d000      	beq.n	1000ac10 <TIMER_CCU4_lInit+0x5c>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
1000ac0e:	60da      	str	r2, [r3, #12]
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
  }

  return (status);
}
1000ac10:	1c28      	adds	r0, r5, #0
1000ac12:	bd70      	pop	{r4, r5, r6, pc}

1000ac14 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
1000ac14:	b508      	push	{r3, lr}

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
1000ac16:	1dc2      	adds	r2, r0, #7
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
1000ac18:	1c03      	adds	r3, r0, #0
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
1000ac1a:	2000      	movs	r0, #0
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
1000ac1c:	7fd2      	ldrb	r2, [r2, #31]
1000ac1e:	4282      	cmp	r2, r0
1000ac20:	d106      	bne.n	1000ac30 <TIMER_Init+0x1c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000ac22:	1c9a      	adds	r2, r3, #2
1000ac24:	7fd2      	ldrb	r2, [r2, #31]
1000ac26:	4282      	cmp	r2, r0
1000ac28:	d102      	bne.n	1000ac30 <TIMER_Init+0x1c>
1000ac2a:	1c18      	adds	r0, r3, #0
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
1000ac2c:	f7ff ffc2 	bl	1000abb4 <TIMER_CCU4_lInit>
    }
#endif
  }

  return (status);
}
1000ac30:	bd08      	pop	{r3, pc}
	...

1000ac34 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
1000ac34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ac36:	1c04      	adds	r4, r0, #0
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
1000ac38:	7880      	ldrb	r0, [r0, #2]
1000ac3a:	78e6      	ldrb	r6, [r4, #3]
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
1000ac3c:	b241      	sxtb	r1, r0
1000ac3e:	01b3      	lsls	r3, r6, #6
1000ac40:	9301      	str	r3, [sp, #4]
1000ac42:	2900      	cmp	r1, #0
1000ac44:	db19      	blt.n	1000ac7a <INTERRUPT_Init+0x46>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000ac46:	2503      	movs	r5, #3
1000ac48:	26ff      	movs	r6, #255	; 0xff
1000ac4a:	4005      	ands	r5, r0
1000ac4c:	00ed      	lsls	r5, r5, #3
1000ac4e:	40ae      	lsls	r6, r5
1000ac50:	27c0      	movs	r7, #192	; 0xc0
1000ac52:	46b4      	mov	ip, r6
1000ac54:	4b1f      	ldr	r3, [pc, #124]	; (1000acd4 <INTERRUPT_Init+0xa0>)
1000ac56:	088a      	lsrs	r2, r1, #2
1000ac58:	0092      	lsls	r2, r2, #2
1000ac5a:	18d2      	adds	r2, r2, r3
1000ac5c:	00bf      	lsls	r7, r7, #2
1000ac5e:	59d3      	ldr	r3, [r2, r7]
1000ac60:	1c1e      	adds	r6, r3, #0
1000ac62:	4663      	mov	r3, ip
1000ac64:	439e      	bics	r6, r3
1000ac66:	46b4      	mov	ip, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000ac68:	26ff      	movs	r6, #255	; 0xff
1000ac6a:	9b01      	ldr	r3, [sp, #4]
1000ac6c:	4033      	ands	r3, r6
1000ac6e:	40ab      	lsls	r3, r5
1000ac70:	1c1d      	adds	r5, r3, #0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000ac72:	4663      	mov	r3, ip
1000ac74:	431d      	orrs	r5, r3
1000ac76:	51d5      	str	r5, [r2, r7]
1000ac78:	e015      	b.n	1000aca6 <INTERRUPT_Init+0x72>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000ac7a:	220f      	movs	r2, #15
1000ac7c:	b2c3      	uxtb	r3, r0
1000ac7e:	401a      	ands	r2, r3
1000ac80:	3a08      	subs	r2, #8
1000ac82:	4d15      	ldr	r5, [pc, #84]	; (1000acd8 <INTERRUPT_Init+0xa4>)
1000ac84:	0892      	lsrs	r2, r2, #2
1000ac86:	0092      	lsls	r2, r2, #2
1000ac88:	1952      	adds	r2, r2, r5
1000ac8a:	2503      	movs	r5, #3
1000ac8c:	402b      	ands	r3, r5
1000ac8e:	40ab      	lsls	r3, r5
1000ac90:	35fc      	adds	r5, #252	; 0xfc
1000ac92:	1c2e      	adds	r6, r5, #0
1000ac94:	409e      	lsls	r6, r3
1000ac96:	69d7      	ldr	r7, [r2, #28]
1000ac98:	43b7      	bics	r7, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000ac9a:	9e01      	ldr	r6, [sp, #4]
1000ac9c:	402e      	ands	r6, r5
1000ac9e:	409e      	lsls	r6, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000aca0:	1c3d      	adds	r5, r7, #0
1000aca2:	4335      	orrs	r5, r6
1000aca4:	61d5      	str	r5, [r2, #28]
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
1000aca6:	8823      	ldrh	r3, [r4, #0]
1000aca8:	0209      	lsls	r1, r1, #8
1000acaa:	4319      	orrs	r1, r3
1000acac:	b2c0      	uxtb	r0, r0
1000acae:	b289      	uxth	r1, r1
1000acb0:	f7ff f9e4 	bl	1000a07c <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
1000acb4:	7923      	ldrb	r3, [r4, #4]
1000acb6:	2b00      	cmp	r3, #0
1000acb8:	d00a      	beq.n	1000acd0 <INTERRUPT_Init+0x9c>
1000acba:	78a2      	ldrb	r2, [r4, #2]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1000acbc:	b253      	sxtb	r3, r2
1000acbe:	2b00      	cmp	r3, #0
1000acc0:	db06      	blt.n	1000acd0 <INTERRUPT_Init+0x9c>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000acc2:	231f      	movs	r3, #31
1000acc4:	4013      	ands	r3, r2
1000acc6:	2201      	movs	r2, #1
1000acc8:	409a      	lsls	r2, r3
1000acca:	1c13      	adds	r3, r2, #0
1000accc:	4a01      	ldr	r2, [pc, #4]	; (1000acd4 <INTERRUPT_Init+0xa0>)
1000acce:	6013      	str	r3, [r2, #0]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
1000acd0:	2000      	movs	r0, #0
1000acd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000acd4:	e000e100 	.word	0xe000e100
1000acd8:	e000ed00 	.word	0xe000ed00

1000acdc <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
1000acdc:	b538      	push	{r3, r4, r5, lr}
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
1000acde:	6844      	ldr	r4, [r0, #4]
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
1000ace0:	1c0d      	adds	r5, r1, #0
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
1000ace2:	1c23      	adds	r3, r4, #0
1000ace4:	3308      	adds	r3, #8
1000ace6:	7fd9      	ldrb	r1, [r3, #31]
1000ace8:	2301      	movs	r3, #1
1000acea:	1c1a      	adds	r2, r3, #0

  if ((handle->config->txFIFO_size > 0))
1000acec:	3407      	adds	r4, #7
1000acee:	7fe4      	ldrb	r4, [r4, #31]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
1000acf0:	408a      	lsls	r2, r1

  if ((handle->config->txFIFO_size > 0))
1000acf2:	2c00      	cmp	r4, #0
1000acf4:	d001      	beq.n	1000acfa <I2C_MASTER_lReconfigureRxFIFO+0x1e>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
1000acf6:	40a3      	lsls	r3, r4
1000acf8:	b2db      	uxtb	r3, r3
1000acfa:	b2d2      	uxtb	r2, r2
1000acfc:	42aa      	cmp	r2, r5
1000acfe:	d900      	bls.n	1000ad02 <I2C_MASTER_lReconfigureRxFIFO+0x26>
1000ad00:	1c2a      	adds	r2, r5, #0
1000ad02:	429a      	cmp	r2, r3
1000ad04:	d900      	bls.n	1000ad08 <I2C_MASTER_lReconfigureRxFIFO+0x2c>
1000ad06:	1c1a      	adds	r2, r3, #0
  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
1000ad08:	3a01      	subs	r2, #1
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1000ad0a:	6800      	ldr	r0, [r0, #0]
1000ad0c:	f7ff fd18 	bl	1000a740 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
1000ad10:	bd38      	pop	{r3, r4, r5, pc}

1000ad12 <I2C_MASTER_lSendStop_JumpTo_TxCallback>:
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
1000ad12:	2180      	movs	r1, #128	; 0x80
 } /* end of else */
}

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
1000ad14:	b538      	push	{r3, r4, r5, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
1000ad16:	6885      	ldr	r5, [r0, #8]
 } /* end of else */
}

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
1000ad18:	1c04      	adds	r4, r0, #0
1000ad1a:	05c9      	lsls	r1, r1, #23
1000ad1c:	6800      	ldr	r0, [r0, #0]
1000ad1e:	f7ff fb8f 	bl	1000a440 <XMC_I2C_CH_DisableEvent>

  ptr_runtime = handle->runtime;

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));

  if (ptr_runtime->send_stop == true)
1000ad22:	69eb      	ldr	r3, [r5, #28]
1000ad24:	2b01      	cmp	r3, #1
1000ad26:	d10a      	bne.n	1000ad3e <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2c>
  {
    ptr_runtime->bus_acquired = false;
1000ad28:	1c2b      	adds	r3, r5, #0
1000ad2a:	2200      	movs	r2, #0
1000ad2c:	3328      	adds	r3, #40	; 0x28
1000ad2e:	6820      	ldr	r0, [r4, #0]
1000ad30:	701a      	strb	r2, [r3, #0]
1000ad32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000ad34:	3210      	adds	r2, #16
1000ad36:	4313      	orrs	r3, r2
1000ad38:	64c3      	str	r3, [r0, #76]	; 0x4c
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStop(handle->channel);
1000ad3a:	f7ff faf7 	bl	1000a32c <XMC_I2C_CH_MasterStop>
    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
1000ad3e:	6821      	ldr	r1, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1000ad40:	227f      	movs	r2, #127	; 0x7f
1000ad42:	6b8b      	ldr	r3, [r1, #56]	; 0x38
1000ad44:	4393      	bics	r3, r2
1000ad46:	b2db      	uxtb	r3, r3
1000ad48:	2b80      	cmp	r3, #128	; 0x80
1000ad4a:	d0f9      	beq.n	1000ad40 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2e>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
1000ad4c:	2300      	movs	r3, #0
1000ad4e:	3507      	adds	r5, #7
1000ad50:	77eb      	strb	r3, [r5, #31]

  if (handle->config->tx_cbhandler != NULL)
1000ad52:	6863      	ldr	r3, [r4, #4]
1000ad54:	691b      	ldr	r3, [r3, #16]
1000ad56:	2b00      	cmp	r3, #0
1000ad58:	d000      	beq.n	1000ad5c <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x4a>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
1000ad5a:	4798      	blx	r3
  }
}
1000ad5c:	bd38      	pop	{r3, r4, r5, pc}

1000ad5e <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
1000ad5e:	b510      	push	{r4, lr}
  if (handle->runtime->bus_acquired == true)
1000ad60:	6883      	ldr	r3, [r0, #8]
1000ad62:	b289      	uxth	r1, r1
1000ad64:	3328      	adds	r3, #40	; 0x28
1000ad66:	781c      	ldrb	r4, [r3, #0]
1000ad68:	6800      	ldr	r0, [r0, #0]
1000ad6a:	2c00      	cmp	r4, #0
1000ad6c:	d006      	beq.n	1000ad7c <I2C_MASTER_lSendStart_Or_RepeatedStart+0x1e>
1000ad6e:	2408      	movs	r4, #8
1000ad70:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000ad72:	4323      	orrs	r3, r4
1000ad74:	64c3      	str	r3, [r0, #76]	; 0x4c
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
1000ad76:	f7ff fab7 	bl	1000a2e8 <XMC_I2C_CH_MasterRepeatedStart>
1000ad7a:	e007      	b.n	1000ad8c <I2C_MASTER_lSendStart_Or_RepeatedStart+0x2e>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
  }
  else
  {
    handle->runtime->bus_acquired = true;
1000ad7c:	2401      	movs	r4, #1
1000ad7e:	701c      	strb	r4, [r3, #0]
1000ad80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000ad82:	3403      	adds	r4, #3
1000ad84:	4323      	orrs	r3, r4
1000ad86:	64c3      	str	r3, [r0, #76]	; 0x4c
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
1000ad88:	f7ff fa8c 	bl	1000a2a4 <XMC_I2C_CH_MasterStart>
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
  }
}
1000ad8c:	bd10      	pop	{r4, pc}

1000ad8e <I2C_MASTER_lSendStop_JumpTo_RxCallback>:
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
1000ad8e:	b538      	push	{r3, r4, r5, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
1000ad90:	6884      	ldr	r4, [r0, #8]
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
1000ad92:	1c05      	adds	r5, r0, #0
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;

  if (ptr_runtime->send_stop == true)
1000ad94:	69e3      	ldr	r3, [r4, #28]
1000ad96:	2b01      	cmp	r3, #1
1000ad98:	d110      	bne.n	1000adbc <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x2e>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
1000ad9a:	6800      	ldr	r0, [r0, #0]
1000ad9c:	227f      	movs	r2, #127	; 0x7f
1000ad9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
1000ada0:	4393      	bics	r3, r2
1000ada2:	b2db      	uxtb	r3, r3
1000ada4:	2b80      	cmp	r3, #128	; 0x80
1000ada6:	d0f9      	beq.n	1000ad9c <I2C_MASTER_lSendStop_JumpTo_RxCallback+0xe>

    ptr_runtime->bus_acquired = false;
1000ada8:	1c23      	adds	r3, r4, #0
1000adaa:	2200      	movs	r2, #0
1000adac:	3328      	adds	r3, #40	; 0x28
1000adae:	701a      	strb	r2, [r3, #0]
1000adb0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000adb2:	3210      	adds	r2, #16
1000adb4:	4313      	orrs	r3, r2
1000adb6:	64c3      	str	r3, [r0, #76]	; 0x4c
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStop(handle->channel);
1000adb8:	f7ff fab8 	bl	1000a32c <XMC_I2C_CH_MasterStop>

    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
1000adbc:	6829      	ldr	r1, [r5, #0]
1000adbe:	227f      	movs	r2, #127	; 0x7f
1000adc0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
1000adc2:	4393      	bics	r3, r2
1000adc4:	b2db      	uxtb	r3, r3
1000adc6:	2b80      	cmp	r3, #128	; 0x80
1000adc8:	d0f9      	beq.n	1000adbe <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x30>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
1000adca:	1c22      	adds	r2, r4, #0
1000adcc:	2300      	movs	r3, #0
1000adce:	3208      	adds	r2, #8
  ptr_runtime->tx_busy = false;
1000add0:	3407      	adds	r4, #7
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}

  /* Reception complete */
  ptr_runtime->rx_busy = false;
1000add2:	77d3      	strb	r3, [r2, #31]
  ptr_runtime->tx_busy = false;
1000add4:	77e3      	strb	r3, [r4, #31]

  if (handle->config->rx_cbhandler != NULL)
1000add6:	686b      	ldr	r3, [r5, #4]
1000add8:	695b      	ldr	r3, [r3, #20]
1000adda:	2b00      	cmp	r3, #0
1000addc:	d000      	beq.n	1000ade0 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x52>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
1000adde:	4798      	blx	r3
  }
}
1000ade0:	bd38      	pop	{r3, r4, r5, pc}

1000ade2 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
1000ade2:	b508      	push	{r3, lr}

    status = I2C_MASTER_STATUS_SUCCESS;
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
1000ade4:	2301      	movs	r3, #1
/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
1000ade6:	2800      	cmp	r0, #0
1000ade8:	d003      	beq.n	1000adf2 <I2C_MASTER_Init+0x10>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
1000adea:	6843      	ldr	r3, [r0, #4]
1000adec:	685b      	ldr	r3, [r3, #4]
1000adee:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
1000adf0:	2300      	movs	r3, #0
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  return (status);
}
1000adf2:	1c18      	adds	r0, r3, #0
1000adf4:	bd08      	pop	{r3, pc}

1000adf6 <I2C_MASTER_ClearFlag>:
}

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
1000adf6:	6802      	ldr	r2, [r0, #0]
1000adf8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1000adfa:	4319      	orrs	r1, r3
1000adfc:	64d1      	str	r1, [r2, #76]	; 0x4c
}
1000adfe:	4770      	bx	lr

1000ae00 <I2C_MASTER_StartTransmitIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
1000ae00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ae02:	9201      	str	r2, [sp, #4]
1000ae04:	aa08      	add	r2, sp, #32
1000ae06:	1c0f      	adds	r7, r1, #0
1000ae08:	ca02      	ldmia	r2!, {r1}
1000ae0a:	1c06      	adds	r6, r0, #0
1000ae0c:	7812      	ldrb	r2, [r2, #0]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;
1000ae0e:	6884      	ldr	r4, [r0, #8]
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
1000ae10:	4694      	mov	ip, r2
  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
1000ae12:	2f00      	cmp	r7, #0
1000ae14:	d105      	bne.n	1000ae22 <I2C_MASTER_StartTransmitIRQ+0x22>
1000ae16:	1c22      	adds	r2, r4, #0
1000ae18:	3228      	adds	r2, #40	; 0x28
1000ae1a:	7812      	ldrb	r2, [r2, #0]
  {
  status = I2C_MASTER_STATUS_FAILURE;
1000ae1c:	2001      	movs	r0, #1
  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
1000ae1e:	2a00      	cmp	r2, #0
1000ae20:	d02e      	beq.n	1000ae80 <I2C_MASTER_StartTransmitIRQ+0x80>
  {
  status = I2C_MASTER_STATUS_FAILURE;
1000ae22:	2001      	movs	r0, #1
  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
1000ae24:	2b00      	cmp	r3, #0
1000ae26:	d02b      	beq.n	1000ae80 <I2C_MASTER_StartTransmitIRQ+0x80>
1000ae28:	2900      	cmp	r1, #0
1000ae2a:	d029      	beq.n	1000ae80 <I2C_MASTER_StartTransmitIRQ+0x80>
  {
  status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
1000ae2c:	2200      	movs	r2, #0
1000ae2e:	61a2      	str	r2, [r4, #24]

    if (ptr_runtime->tx_busy == false)
1000ae30:	1de2      	adds	r2, r4, #7
1000ae32:	7fd5      	ldrb	r5, [r2, #31]
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
1000ae34:	1800      	adds	r0, r0, r0
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;

    if (ptr_runtime->tx_busy == false)
1000ae36:	b2ed      	uxtb	r5, r5
1000ae38:	2d00      	cmp	r5, #0
1000ae3a:	d121      	bne.n	1000ae80 <I2C_MASTER_StartTransmitIRQ+0x80>
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
1000ae3c:	6023      	str	r3, [r4, #0]
    ptr_runtime->tx_data_count = size;

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
    ptr_runtime->tx_busy = true;
1000ae3e:	2301      	movs	r3, #1

    if (ptr_runtime->tx_busy == false)
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = size;
1000ae40:	60a1      	str	r1, [r4, #8]

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
1000ae42:	60e5      	str	r5, [r4, #12]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
1000ae44:	2180      	movs	r1, #128	; 0x80
    ptr_runtime->tx_busy = true;
1000ae46:	77d3      	strb	r3, [r2, #31]
    ptr_runtime->send_stop = send_stop;
1000ae48:	4663      	mov	r3, ip
1000ae4a:	6830      	ldr	r0, [r6, #0]
1000ae4c:	61e3      	str	r3, [r4, #28]
1000ae4e:	05c9      	lsls	r1, r1, #23

    /* Enable ACK event */
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
1000ae50:	3405      	adds	r4, #5
1000ae52:	f7ff fae7 	bl	1000a424 <XMC_I2C_CH_EnableEvent>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
1000ae56:	7fe2      	ldrb	r2, [r4, #31]
1000ae58:	6830      	ldr	r0, [r6, #0]
1000ae5a:	2110      	movs	r1, #16
1000ae5c:	f7ff fc84 	bl	1000a768 <XMC_USIC_CH_SetInterruptNodePointer>

    if (send_start == true)
1000ae60:	2f00      	cmp	r7, #0
1000ae62:	d006      	beq.n	1000ae72 <I2C_MASTER_StartTransmitIRQ+0x72>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
1000ae64:	1c30      	adds	r0, r6, #0
1000ae66:	9901      	ldr	r1, [sp, #4]
1000ae68:	1c2a      	adds	r2, r5, #0
1000ae6a:	f7ff ff78 	bl	1000ad5e <I2C_MASTER_lSendStart_Or_RepeatedStart>
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
    }

    status = I2C_MASTER_STATUS_SUCCESS;
1000ae6e:	1c28      	adds	r0, r5, #0
1000ae70:	e006      	b.n	1000ae80 <I2C_MASTER_StartTransmitIRQ+0x80>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1000ae72:	2380      	movs	r3, #128	; 0x80
1000ae74:	7fe1      	ldrb	r1, [r4, #31]
1000ae76:	025b      	lsls	r3, r3, #9
1000ae78:	408b      	lsls	r3, r1
1000ae7a:	1c38      	adds	r0, r7, #0
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
    }
    else
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
1000ae7c:	6832      	ldr	r2, [r6, #0]
1000ae7e:	6693      	str	r3, [r2, #104]	; 0x68

    status = I2C_MASTER_STATUS_SUCCESS;
  }
  }
  return (status);
}
1000ae80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000ae82 <I2C_MASTER_Transmit>:
}

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
1000ae82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ae84:	ac08      	add	r4, sp, #32
1000ae86:	cc40      	ldmia	r4!, {r6}
1000ae88:	7825      	ldrb	r5, [r4, #0]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000ae8a:	6844      	ldr	r4, [r0, #4]
1000ae8c:	3405      	adds	r4, #5
1000ae8e:	7fe7      	ldrb	r7, [r4, #31]
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
1000ae90:	2402      	movs	r4, #2

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000ae92:	2f00      	cmp	r7, #0
1000ae94:	d104      	bne.n	1000aea0 <I2C_MASTER_Transmit+0x1e>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
1000ae96:	9600      	str	r6, [sp, #0]
1000ae98:	9501      	str	r5, [sp, #4]
1000ae9a:	f7ff ffb1 	bl	1000ae00 <I2C_MASTER_StartTransmitIRQ>
1000ae9e:	1c04      	adds	r4, r0, #0
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
} /* end of function */
1000aea0:	1c20      	adds	r0, r4, #0
1000aea2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000aea4 <I2C_MASTER_StartReceiveIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
1000aea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000aea6:	9200      	str	r2, [sp, #0]
1000aea8:	aa08      	add	r2, sp, #32
1000aeaa:	1c0e      	adds	r6, r1, #0
1000aeac:	ca02      	ldmia	r2!, {r1}
1000aeae:	1c05      	adds	r5, r0, #0
1000aeb0:	7812      	ldrb	r2, [r2, #0]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;
1000aeb2:	6884      	ldr	r4, [r0, #8]
#endif

#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
1000aeb4:	1c17      	adds	r7, r2, #0
1000aeb6:	aa0a      	add	r2, sp, #40	; 0x28
1000aeb8:	7812      	ldrb	r2, [r2, #0]
1000aeba:	9201      	str	r2, [sp, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
1000aebc:	2e00      	cmp	r6, #0
1000aebe:	d106      	bne.n	1000aece <I2C_MASTER_StartReceiveIRQ+0x2a>
1000aec0:	1c22      	adds	r2, r4, #0
1000aec2:	3228      	adds	r2, #40	; 0x28
1000aec4:	7812      	ldrb	r2, [r2, #0]
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
1000aec6:	2001      	movs	r0, #1
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
1000aec8:	2a00      	cmp	r2, #0
1000aeca:	d100      	bne.n	1000aece <I2C_MASTER_StartReceiveIRQ+0x2a>
1000aecc:	e107      	b.n	1000b0de <I2C_MASTER_StartReceiveIRQ+0x23a>
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
1000aece:	2001      	movs	r0, #1
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
1000aed0:	2b00      	cmp	r3, #0
1000aed2:	d100      	bne.n	1000aed6 <I2C_MASTER_StartReceiveIRQ+0x32>
1000aed4:	e103      	b.n	1000b0de <I2C_MASTER_StartReceiveIRQ+0x23a>
1000aed6:	2900      	cmp	r1, #0
1000aed8:	d100      	bne.n	1000aedc <I2C_MASTER_StartReceiveIRQ+0x38>
1000aeda:	e100      	b.n	1000b0de <I2C_MASTER_StartReceiveIRQ+0x23a>
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
1000aedc:	2208      	movs	r2, #8
1000aede:	4694      	mov	ip, r2
1000aee0:	44a4      	add	ip, r4
1000aee2:	4662      	mov	r2, ip
1000aee4:	7fd2      	ldrb	r2, [r2, #31]
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
1000aee6:	1800      	adds	r0, r0, r0
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
1000aee8:	b2d2      	uxtb	r2, r2
1000aeea:	2a00      	cmp	r2, #0
1000aeec:	d000      	beq.n	1000aef0 <I2C_MASTER_StartReceiveIRQ+0x4c>
1000aeee:	e0f6      	b.n	1000b0de <I2C_MASTER_StartReceiveIRQ+0x23a>
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
1000aef0:	3801      	subs	r0, #1

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
1000aef2:	6063      	str	r3, [r4, #4]
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
1000aef4:	6023      	str	r3, [r4, #0]
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
1000aef6:	1de3      	adds	r3, r4, #7
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
1000aef8:	61a0      	str	r0, [r4, #24]

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
1000aefa:	6121      	str	r1, [r4, #16]
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
1000aefc:	60a1      	str	r1, [r4, #8]
    ptr_runtime->tx_busy = true;
1000aefe:	77d8      	strb	r0, [r3, #31]
    ptr_runtime->rx_busy = true;
1000af00:	4663      	mov	r3, ip
1000af02:	77d8      	strb	r0, [r3, #31]
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
1000af04:	9b01      	ldr	r3, [sp, #4]
    ptr_runtime->rx_data_index = 0U;
1000af06:	6162      	str	r2, [r4, #20]
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
1000af08:	6223      	str	r3, [r4, #32]
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;

    if (handle->config->rxFIFO_size > 0)
1000af0a:	686b      	ldr	r3, [r5, #4]
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;
1000af0c:	60e2      	str	r2, [r4, #12]

    if (handle->config->rxFIFO_size > 0)
1000af0e:	1c1a      	adds	r2, r3, #0
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
1000af10:	61e7      	str	r7, [r4, #28]
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;

    if (handle->config->rxFIFO_size > 0)
1000af12:	3208      	adds	r2, #8
1000af14:	7fd2      	ldrb	r2, [r2, #31]
1000af16:	6828      	ldr	r0, [r5, #0]
1000af18:	2a00      	cmp	r2, #0
1000af1a:	d07e      	beq.n	1000b01a <I2C_MASTER_StartReceiveIRQ+0x176>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1000af1c:	2380      	movs	r3, #128	; 0x80
1000af1e:	30fc      	adds	r0, #252	; 0xfc
1000af20:	01db      	lsls	r3, r3, #7
1000af22:	61c3      	str	r3, [r0, #28]
  /*Clear the receive FIFO, configure the trigger lime
   * and enable the receive events*/
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);

  /*Configure the FIFO trigger limit based on the required data size*/
  I2C_MASTER_lReconfigureRxFIFO(handle, count);
1000af24:	1c28      	adds	r0, r5, #0
1000af26:	f7ff fed9 	bl	1000acdc <I2C_MASTER_lReconfigureRxFIFO>

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
1000af2a:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
1000af2c:	21c0      	movs	r1, #192	; 0xc0
1000af2e:	1c02      	adds	r2, r0, #0
1000af30:	32fc      	adds	r2, #252	; 0xfc
1000af32:	6913      	ldr	r3, [r2, #16]
1000af34:	05c9      	lsls	r1, r1, #23
1000af36:	430b      	orrs	r3, r1
1000af38:	6113      	str	r3, [r2, #16]
1000af3a:	686b      	ldr	r3, [r5, #4]
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
1000af3c:	2e00      	cmp	r6, #0
1000af3e:	d039      	beq.n	1000afb4 <I2C_MASTER_StartReceiveIRQ+0x110>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
1000af40:	3305      	adds	r3, #5
1000af42:	7fdb      	ldrb	r3, [r3, #31]
1000af44:	3b01      	subs	r3, #1
1000af46:	2b01      	cmp	r3, #1
1000af48:	d909      	bls.n	1000af5e <I2C_MASTER_StartReceiveIRQ+0xba>
1000af4a:	2180      	movs	r1, #128	; 0x80
1000af4c:	05c9      	lsls	r1, r1, #23
1000af4e:	f7ff fa69 	bl	1000a424 <XMC_I2C_CH_EnableEvent>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
1000af52:	1d63      	adds	r3, r4, #5
1000af54:	7fda      	ldrb	r2, [r3, #31]
1000af56:	6828      	ldr	r0, [r5, #0]
1000af58:	2110      	movs	r1, #16
1000af5a:	f7ff fc05 	bl	1000a768 <XMC_USIC_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
1000af5e:	2201      	movs	r2, #1
1000af60:	1c28      	adds	r0, r5, #0
1000af62:	9900      	ldr	r1, [sp, #0]
1000af64:	f7ff fefb 	bl	1000ad5e <I2C_MASTER_lSendStart_Or_RepeatedStart>
    I2C_MASTER_ReceiveACK(handle);
    }
    ptr_runtime->tx_data_index++;
    }
#endif
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
1000af68:	686b      	ldr	r3, [r5, #4]
1000af6a:	1d5a      	adds	r2, r3, #5
1000af6c:	7fd2      	ldrb	r2, [r2, #31]
1000af6e:	2a02      	cmp	r2, #2
1000af70:	d000      	beq.n	1000af74 <I2C_MASTER_StartReceiveIRQ+0xd0>
1000af72:	e093      	b.n	1000b09c <I2C_MASTER_StartReceiveIRQ+0x1f8>
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000af74:	3307      	adds	r3, #7
1000af76:	7fdb      	ldrb	r3, [r3, #31]
1000af78:	2b00      	cmp	r3, #0
1000af7a:	d070      	beq.n	1000b05e <I2C_MASTER_StartReceiveIRQ+0x1ba>
1000af7c:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000af7e:	1c03      	adds	r3, r0, #0
1000af80:	33fc      	adds	r3, #252	; 0xfc
1000af82:	699b      	ldr	r3, [r3, #24]
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000af84:	04db      	lsls	r3, r3, #19
1000af86:	d500      	bpl.n	1000af8a <I2C_MASTER_StartReceiveIRQ+0xe6>
1000af88:	e088      	b.n	1000b09c <I2C_MASTER_StartReceiveIRQ+0x1f8>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000af8a:	68e3      	ldr	r3, [r4, #12]
1000af8c:	68a2      	ldr	r2, [r4, #8]
1000af8e:	4293      	cmp	r3, r2
1000af90:	d300      	bcc.n	1000af94 <I2C_MASTER_StartReceiveIRQ+0xf0>
1000af92:	e083      	b.n	1000b09c <I2C_MASTER_StartReceiveIRQ+0x1f8>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000af94:	68e3      	ldr	r3, [r4, #12]
1000af96:	3301      	adds	r3, #1
1000af98:	4293      	cmp	r3, r2
1000af9a:	d105      	bne.n	1000afa8 <I2C_MASTER_StartReceiveIRQ+0x104>
1000af9c:	6a23      	ldr	r3, [r4, #32]
1000af9e:	2b01      	cmp	r3, #1
1000afa0:	d102      	bne.n	1000afa8 <I2C_MASTER_StartReceiveIRQ+0x104>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000afa2:	f7ff fa16 	bl	1000a3d2 <XMC_I2C_CH_MasterReceiveNack>
1000afa6:	e001      	b.n	1000afac <I2C_MASTER_StartReceiveIRQ+0x108>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000afa8:	f7ff f9f6 	bl	1000a398 <XMC_I2C_CH_MasterReceiveAck>
      }
      else
        {
          I2C_MASTER_ReceiveACK(handle);
        }
      ptr_runtime->tx_data_index++;
1000afac:	68e3      	ldr	r3, [r4, #12]
1000afae:	3301      	adds	r3, #1
1000afb0:	60e3      	str	r3, [r4, #12]
1000afb2:	e7e3      	b.n	1000af7c <I2C_MASTER_StartReceiveIRQ+0xd8>
    } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
  } /* end of if (send_start == true) */
  else
  {
    /* if Tx FIFO enabled */
    if (handle->config->txFIFO_size > 0)
1000afb4:	3307      	adds	r3, #7
1000afb6:	7fdb      	ldrb	r3, [r3, #31]
1000afb8:	2b00      	cmp	r3, #0
1000afba:	d01d      	beq.n	1000aff8 <I2C_MASTER_StartReceiveIRQ+0x154>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000afbc:	68d1      	ldr	r1, [r2, #12]
1000afbe:	4b48      	ldr	r3, [pc, #288]	; (1000b0e0 <I2C_MASTER_StartReceiveIRQ+0x23c>)
1000afc0:	400b      	ands	r3, r1
1000afc2:	60d3      	str	r3, [r2, #12]
1000afc4:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000afc6:	1c03      	adds	r3, r0, #0
1000afc8:	33fc      	adds	r3, #252	; 0xfc
1000afca:	699b      	ldr	r3, [r3, #24]
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000afcc:	04db      	lsls	r3, r3, #19
1000afce:	d465      	bmi.n	1000b09c <I2C_MASTER_StartReceiveIRQ+0x1f8>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000afd0:	68e3      	ldr	r3, [r4, #12]
1000afd2:	68a2      	ldr	r2, [r4, #8]
1000afd4:	4293      	cmp	r3, r2
1000afd6:	d261      	bcs.n	1000b09c <I2C_MASTER_StartReceiveIRQ+0x1f8>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
1000afd8:	68e3      	ldr	r3, [r4, #12]
1000afda:	3301      	adds	r3, #1
1000afdc:	4293      	cmp	r3, r2
1000afde:	d105      	bne.n	1000afec <I2C_MASTER_StartReceiveIRQ+0x148>
1000afe0:	6a23      	ldr	r3, [r4, #32]
1000afe2:	2b01      	cmp	r3, #1
1000afe4:	d102      	bne.n	1000afec <I2C_MASTER_StartReceiveIRQ+0x148>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000afe6:	f7ff f9f4 	bl	1000a3d2 <XMC_I2C_CH_MasterReceiveNack>
1000afea:	e001      	b.n	1000aff0 <I2C_MASTER_StartReceiveIRQ+0x14c>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000afec:	f7ff f9d4 	bl	1000a398 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
1000aff0:	68e3      	ldr	r3, [r4, #12]
1000aff2:	3301      	adds	r3, #1
1000aff4:	60e3      	str	r3, [r4, #12]
1000aff6:	e7e5      	b.n	1000afc4 <I2C_MASTER_StartReceiveIRQ+0x120>
        }
      } /* end of while */
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000aff8:	68e3      	ldr	r3, [r4, #12]
1000affa:	68a2      	ldr	r2, [r4, #8]
1000affc:	4293      	cmp	r3, r2
1000affe:	d24d      	bcs.n	1000b09c <I2C_MASTER_StartReceiveIRQ+0x1f8>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
1000b000:	68e3      	ldr	r3, [r4, #12]
1000b002:	3301      	adds	r3, #1
1000b004:	4293      	cmp	r3, r2
1000b006:	d102      	bne.n	1000b00e <I2C_MASTER_StartReceiveIRQ+0x16a>
1000b008:	6a23      	ldr	r3, [r4, #32]
1000b00a:	2b01      	cmp	r3, #1
1000b00c:	d03e      	beq.n	1000b08c <I2C_MASTER_StartReceiveIRQ+0x1e8>
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
1000b00e:	22f2      	movs	r2, #242	; 0xf2
1000b010:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1000b012:	0212      	lsls	r2, r2, #8
1000b014:	4313      	orrs	r3, r2
1000b016:	64c3      	str	r3, [r0, #76]	; 0x4c
1000b018:	e03b      	b.n	1000b092 <I2C_MASTER_StartReceiveIRQ+0x1ee>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
1000b01a:	6c02      	ldr	r2, [r0, #64]	; 0x40
1000b01c:	1c17      	adds	r7, r2, #0
1000b01e:	22c0      	movs	r2, #192	; 0xc0
1000b020:	0212      	lsls	r2, r2, #8
1000b022:	4317      	orrs	r7, r2
1000b024:	6407      	str	r7, [r0, #64]	; 0x40
  ptr_runtime = handle->runtime;

  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
1000b026:	2e00      	cmp	r6, #0
1000b028:	d025      	beq.n	1000b076 <I2C_MASTER_StartReceiveIRQ+0x1d2>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
1000b02a:	3305      	adds	r3, #5
1000b02c:	7fdb      	ldrb	r3, [r3, #31]
1000b02e:	3b01      	subs	r3, #1
1000b030:	2b01      	cmp	r3, #1
1000b032:	d909      	bls.n	1000b048 <I2C_MASTER_StartReceiveIRQ+0x1a4>
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
1000b034:	2180      	movs	r1, #128	; 0x80
1000b036:	05c9      	lsls	r1, r1, #23
1000b038:	f7ff f9f4 	bl	1000a424 <XMC_I2C_CH_EnableEvent>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
1000b03c:	1d63      	adds	r3, r4, #5
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
1000b03e:	7fda      	ldrb	r2, [r3, #31]
1000b040:	6828      	ldr	r0, [r5, #0]
1000b042:	2110      	movs	r1, #16
1000b044:	f7ff fb90 	bl	1000a768 <XMC_USIC_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
1000b048:	1c28      	adds	r0, r5, #0
1000b04a:	9900      	ldr	r1, [sp, #0]
1000b04c:	2201      	movs	r2, #1
1000b04e:	f7ff fe86 	bl	1000ad5e <I2C_MASTER_lSendStart_Or_RepeatedStart>

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
1000b052:	686b      	ldr	r3, [r5, #4]
1000b054:	3305      	adds	r3, #5
1000b056:	7fdb      	ldrb	r3, [r3, #31]
1000b058:	3b01      	subs	r3, #1
1000b05a:	2b01      	cmp	r3, #1
1000b05c:	d81e      	bhi.n	1000b09c <I2C_MASTER_StartReceiveIRQ+0x1f8>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
  {
    if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000b05e:	68e3      	ldr	r3, [r4, #12]
1000b060:	68a2      	ldr	r2, [r4, #8]
1000b062:	3301      	adds	r3, #1
1000b064:	4293      	cmp	r3, r2
1000b066:	d104      	bne.n	1000b072 <I2C_MASTER_StartReceiveIRQ+0x1ce>
1000b068:	6a23      	ldr	r3, [r4, #32]
1000b06a:	2b01      	cmp	r3, #1
1000b06c:	d101      	bne.n	1000b072 <I2C_MASTER_StartReceiveIRQ+0x1ce>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000b06e:	6828      	ldr	r0, [r5, #0]
1000b070:	e00c      	b.n	1000b08c <I2C_MASTER_StartReceiveIRQ+0x1e8>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000b072:	6828      	ldr	r0, [r5, #0]
1000b074:	e00d      	b.n	1000b092 <I2C_MASTER_StartReceiveIRQ+0x1ee>
  else
  {
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is disabled
***********************************************************************************************************************/
    if (handle->config->txFIFO_size == 0)
1000b076:	3307      	adds	r3, #7
1000b078:	7fdb      	ldrb	r3, [r3, #31]
1000b07a:	2b00      	cmp	r3, #0
1000b07c:	d110      	bne.n	1000b0a0 <I2C_MASTER_StartReceiveIRQ+0x1fc>
    {
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000b07e:	68e3      	ldr	r3, [r4, #12]
1000b080:	3301      	adds	r3, #1
1000b082:	428b      	cmp	r3, r1
1000b084:	d105      	bne.n	1000b092 <I2C_MASTER_StartReceiveIRQ+0x1ee>
1000b086:	9b01      	ldr	r3, [sp, #4]
1000b088:	2b01      	cmp	r3, #1
1000b08a:	d102      	bne.n	1000b092 <I2C_MASTER_StartReceiveIRQ+0x1ee>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000b08c:	f7ff f9a1 	bl	1000a3d2 <XMC_I2C_CH_MasterReceiveNack>
1000b090:	e001      	b.n	1000b096 <I2C_MASTER_StartReceiveIRQ+0x1f2>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000b092:	f7ff f981 	bl	1000a398 <XMC_I2C_CH_MasterReceiveAck>
      else
      {
        I2C_MASTER_ReceiveACK(handle);
      }

      ptr_runtime->tx_data_index++;
1000b096:	68e3      	ldr	r3, [r4, #12]
1000b098:	3301      	adds	r3, #1
1000b09a:	60e3      	str	r3, [r4, #12]
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
    }
    status = I2C_MASTER_STATUS_SUCCESS;
1000b09c:	2000      	movs	r0, #0
1000b09e:	e01e      	b.n	1000b0de <I2C_MASTER_StartReceiveIRQ+0x23a>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000b0a0:	30fc      	adds	r0, #252	; 0xfc
1000b0a2:	68c2      	ldr	r2, [r0, #12]
1000b0a4:	4b0e      	ldr	r3, [pc, #56]	; (1000b0e0 <I2C_MASTER_StartReceiveIRQ+0x23c>)
1000b0a6:	4013      	ands	r3, r2
1000b0a8:	60c3      	str	r3, [r0, #12]
1000b0aa:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000b0ac:	1c03      	adds	r3, r0, #0
1000b0ae:	33fc      	adds	r3, #252	; 0xfc
1000b0b0:	699b      	ldr	r3, [r3, #24]
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000b0b2:	04db      	lsls	r3, r3, #19
1000b0b4:	d4f2      	bmi.n	1000b09c <I2C_MASTER_StartReceiveIRQ+0x1f8>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000b0b6:	68e3      	ldr	r3, [r4, #12]
1000b0b8:	68a2      	ldr	r2, [r4, #8]
1000b0ba:	4293      	cmp	r3, r2
1000b0bc:	d2ee      	bcs.n	1000b09c <I2C_MASTER_StartReceiveIRQ+0x1f8>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000b0be:	68e3      	ldr	r3, [r4, #12]
1000b0c0:	3301      	adds	r3, #1
1000b0c2:	4293      	cmp	r3, r2
1000b0c4:	d105      	bne.n	1000b0d2 <I2C_MASTER_StartReceiveIRQ+0x22e>
1000b0c6:	6a23      	ldr	r3, [r4, #32]
1000b0c8:	2b01      	cmp	r3, #1
1000b0ca:	d102      	bne.n	1000b0d2 <I2C_MASTER_StartReceiveIRQ+0x22e>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000b0cc:	f7ff f981 	bl	1000a3d2 <XMC_I2C_CH_MasterReceiveNack>
1000b0d0:	e001      	b.n	1000b0d6 <I2C_MASTER_StartReceiveIRQ+0x232>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000b0d2:	f7ff f961 	bl	1000a398 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
1000b0d6:	68e3      	ldr	r3, [r4, #12]
1000b0d8:	3301      	adds	r3, #1
1000b0da:	60e3      	str	r3, [r4, #12]
1000b0dc:	e7e5      	b.n	1000b0aa <I2C_MASTER_StartReceiveIRQ+0x206>
    }
    status = I2C_MASTER_STATUS_SUCCESS;
  }
  }
  return (status);
}
1000b0de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000b0e0:	bfffffff 	.word	0xbfffffff

1000b0e4 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
1000b0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b0e6:	b087      	sub	sp, #28
1000b0e8:	ac0c      	add	r4, sp, #48	; 0x30
1000b0ea:	cc40      	ldmia	r4!, {r6}
1000b0ec:	9305      	str	r3, [sp, #20]
1000b0ee:	7827      	ldrb	r7, [r4, #0]
1000b0f0:	ac0e      	add	r4, sp, #56	; 0x38
1000b0f2:	7825      	ldrb	r5, [r4, #0]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000b0f4:	6844      	ldr	r4, [r0, #4]
1000b0f6:	3406      	adds	r4, #6
1000b0f8:	7fe4      	ldrb	r4, [r4, #31]
1000b0fa:	46a4      	mov	ip, r4
1000b0fc:	4663      	mov	r3, ip
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
1000b0fe:	2402      	movs	r4, #2

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000b100:	2b00      	cmp	r3, #0
1000b102:	d106      	bne.n	1000b112 <I2C_MASTER_Receive+0x2e>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
1000b104:	9600      	str	r6, [sp, #0]
1000b106:	9701      	str	r7, [sp, #4]
1000b108:	9502      	str	r5, [sp, #8]
1000b10a:	9b05      	ldr	r3, [sp, #20]
1000b10c:	f7ff feca 	bl	1000aea4 <I2C_MASTER_StartReceiveIRQ>
1000b110:	1c04      	adds	r4, r0, #0
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }

  return (status);
}
1000b112:	1c20      	adds	r0, r4, #0
1000b114:	b007      	add	sp, #28
1000b116:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000b118 <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
1000b118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
1000b11a:	6884      	ldr	r4, [r0, #8]
  fifo_lindex = 0U;

  if (ptr_runtime->rx_busy == true)
1000b11c:	1c27      	adds	r7, r4, #0
1000b11e:	3708      	adds	r7, #8
1000b120:	7ffb      	ldrb	r3, [r7, #31]
1000b122:	2b00      	cmp	r3, #0
1000b124:	d100      	bne.n	1000b128 <I2C_MASTER_ReceiveHandler+0x10>
1000b126:	e0ac      	b.n	1000b282 <I2C_MASTER_ReceiveHandler+0x16a>
  {
    if (handle->config->rxFIFO_size > 0)
1000b128:	6843      	ldr	r3, [r0, #4]
1000b12a:	1c05      	adds	r5, r0, #0
1000b12c:	3308      	adds	r3, #8
1000b12e:	7fdb      	ldrb	r3, [r3, #31]
1000b130:	2b00      	cmp	r3, #0
1000b132:	d078      	beq.n	1000b226 <I2C_MASTER_ReceiveHandler+0x10e>
1000b134:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1000b136:	1c03      	adds	r3, r0, #0
1000b138:	33fc      	adds	r3, #252	; 0xfc
1000b13a:	699e      	ldr	r6, [r3, #24]
1000b13c:	2308      	movs	r3, #8
1000b13e:	401e      	ands	r6, r3
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
1000b140:	d115      	bne.n	1000b16e <I2C_MASTER_ReceiveHandler+0x56>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
1000b142:	6862      	ldr	r2, [r4, #4]
1000b144:	6963      	ldr	r3, [r4, #20]
1000b146:	18d3      	adds	r3, r2, r3
1000b148:	9301      	str	r3, [sp, #4]
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
1000b14a:	f7ff f95f 	bl	1000a40c <XMC_I2C_CH_GetReceivedData>
1000b14e:	9b01      	ldr	r3, [sp, #4]
1000b150:	7018      	strb	r0, [r3, #0]
        ptr_runtime->rx_data_index++;
1000b152:	6963      	ldr	r3, [r4, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000b154:	6922      	ldr	r2, [r4, #16]
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
        ptr_runtime->rx_data_index++;
1000b156:	3301      	adds	r3, #1
1000b158:	6163      	str	r3, [r4, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000b15a:	6963      	ldr	r3, [r4, #20]
1000b15c:	4293      	cmp	r3, r2
1000b15e:	d1e9      	bne.n	1000b134 <I2C_MASTER_ReceiveHandler+0x1c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
1000b160:	682b      	ldr	r3, [r5, #0]
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
1000b162:	77fe      	strb	r6, [r7, #31]
1000b164:	33fc      	adds	r3, #252	; 0xfc
1000b166:	6919      	ldr	r1, [r3, #16]
1000b168:	4a46      	ldr	r2, [pc, #280]	; (1000b284 <I2C_MASTER_ReceiveHandler+0x16c>)
1000b16a:	400a      	ands	r2, r1
1000b16c:	611a      	str	r2, [r3, #16]
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000b16e:	6962      	ldr	r2, [r4, #20]
1000b170:	6923      	ldr	r3, [r4, #16]
1000b172:	429a      	cmp	r2, r3
1000b174:	d240      	bcs.n	1000b1f8 <I2C_MASTER_ReceiveHandler+0xe0>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
1000b176:	6961      	ldr	r1, [r4, #20]
1000b178:	1c28      	adds	r0, r5, #0
1000b17a:	1a59      	subs	r1, r3, r1
1000b17c:	f7ff fdae 	bl	1000acdc <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
1000b180:	6869      	ldr	r1, [r5, #4]
1000b182:	1dcb      	adds	r3, r1, #7
1000b184:	7fda      	ldrb	r2, [r3, #31]
1000b186:	2a00      	cmp	r2, #0
1000b188:	d028      	beq.n	1000b1dc <I2C_MASTER_ReceiveHandler+0xc4>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
1000b18a:	2301      	movs	r3, #1
1000b18c:	1c18      	adds	r0, r3, #0
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
1000b18e:	3108      	adds	r1, #8
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
1000b190:	7fc9      	ldrb	r1, [r1, #31]
1000b192:	4090      	lsls	r0, r2
1000b194:	408b      	lsls	r3, r1
1000b196:	4283      	cmp	r3, r0
1000b198:	d900      	bls.n	1000b19c <I2C_MASTER_ReceiveHandler+0x84>
1000b19a:	1c03      	adds	r3, r0, #0
1000b19c:	2700      	movs	r7, #0
1000b19e:	b2de      	uxtb	r6, r3
1000b1a0:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000b1a2:	1c03      	adds	r3, r0, #0
1000b1a4:	33fc      	adds	r3, #252	; 0xfc
1000b1a6:	699b      	ldr	r3, [r3, #24]
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000b1a8:	04db      	lsls	r3, r3, #19
1000b1aa:	d425      	bmi.n	1000b1f8 <I2C_MASTER_ReceiveHandler+0xe0>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000b1ac:	68e3      	ldr	r3, [r4, #12]
1000b1ae:	68a2      	ldr	r2, [r4, #8]
1000b1b0:	4293      	cmp	r3, r2
1000b1b2:	d221      	bcs.n	1000b1f8 <I2C_MASTER_ReceiveHandler+0xe0>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000b1b4:	68e3      	ldr	r3, [r4, #12]
1000b1b6:	3301      	adds	r3, #1
1000b1b8:	4293      	cmp	r3, r2
1000b1ba:	d105      	bne.n	1000b1c8 <I2C_MASTER_ReceiveHandler+0xb0>
1000b1bc:	6a23      	ldr	r3, [r4, #32]
1000b1be:	2b01      	cmp	r3, #1
1000b1c0:	d102      	bne.n	1000b1c8 <I2C_MASTER_ReceiveHandler+0xb0>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000b1c2:	f7ff f906 	bl	1000a3d2 <XMC_I2C_CH_MasterReceiveNack>
1000b1c6:	e001      	b.n	1000b1cc <I2C_MASTER_ReceiveHandler+0xb4>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000b1c8:	f7ff f8e6 	bl	1000a398 <XMC_I2C_CH_MasterReceiveAck>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
1000b1cc:	68e3      	ldr	r3, [r4, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
1000b1ce:	3701      	adds	r7, #1
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
1000b1d0:	3301      	adds	r3, #1

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
1000b1d2:	b2ff      	uxtb	r7, r7
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
1000b1d4:	60e3      	str	r3, [r4, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
1000b1d6:	42b7      	cmp	r7, r6
1000b1d8:	d3e2      	bcc.n	1000b1a0 <I2C_MASTER_ReceiveHandler+0x88>
1000b1da:	e00d      	b.n	1000b1f8 <I2C_MASTER_ReceiveHandler+0xe0>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000b1dc:	68e3      	ldr	r3, [r4, #12]
1000b1de:	68a2      	ldr	r2, [r4, #8]
1000b1e0:	3301      	adds	r3, #1
1000b1e2:	4293      	cmp	r3, r2
1000b1e4:	d149      	bne.n	1000b27a <I2C_MASTER_ReceiveHandler+0x162>
1000b1e6:	6a23      	ldr	r3, [r4, #32]
1000b1e8:	2b01      	cmp	r3, #1
1000b1ea:	d146      	bne.n	1000b27a <I2C_MASTER_ReceiveHandler+0x162>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000b1ec:	6828      	ldr	r0, [r5, #0]
1000b1ee:	f7ff f8f0 	bl	1000a3d2 <XMC_I2C_CH_MasterReceiveNack>
         else
         {
           I2C_MASTER_ReceiveACK(handle);
         }

         ptr_runtime->tx_data_index++;
1000b1f2:	68e3      	ldr	r3, [r4, #12]
1000b1f4:	3301      	adds	r3, #1
1000b1f6:	60e3      	str	r3, [r4, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
1000b1f8:	6963      	ldr	r3, [r4, #20]
1000b1fa:	6922      	ldr	r2, [r4, #16]
1000b1fc:	4293      	cmp	r3, r2
1000b1fe:	d140      	bne.n	1000b282 <I2C_MASTER_ReceiveHandler+0x16a>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
1000b200:	682b      	ldr	r3, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
1000b202:	4a20      	ldr	r2, [pc, #128]	; (1000b284 <I2C_MASTER_ReceiveHandler+0x16c>)
1000b204:	1c19      	adds	r1, r3, #0
1000b206:	31fc      	adds	r1, #252	; 0xfc
1000b208:	6908      	ldr	r0, [r1, #16]
1000b20a:	4002      	ands	r2, r0
1000b20c:	610a      	str	r2, [r1, #16]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
1000b20e:	6c19      	ldr	r1, [r3, #64]	; 0x40
1000b210:	4a1d      	ldr	r2, [pc, #116]	; (1000b288 <I2C_MASTER_ReceiveHandler+0x170>)
1000b212:	400a      	ands	r2, r1
1000b214:	641a      	str	r2, [r3, #64]	; 0x40

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
1000b216:	3428      	adds	r4, #40	; 0x28
1000b218:	7823      	ldrb	r3, [r4, #0]
1000b21a:	2b00      	cmp	r3, #0
1000b21c:	d031      	beq.n	1000b282 <I2C_MASTER_ReceiveHandler+0x16a>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
1000b21e:	1c28      	adds	r0, r5, #0
1000b220:	f7ff fdb5 	bl	1000ad8e <I2C_MASTER_lSendStop_JumpTo_RxCallback>
1000b224:	e02d      	b.n	1000b282 <I2C_MASTER_ReceiveHandler+0x16a>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
1000b226:	6863      	ldr	r3, [r4, #4]
1000b228:	6966      	ldr	r6, [r4, #20]
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
1000b22a:	6800      	ldr	r0, [r0, #0]
1000b22c:	199e      	adds	r6, r3, r6
1000b22e:	f7ff f8ed 	bl	1000a40c <XMC_I2C_CH_GetReceivedData>
1000b232:	7030      	strb	r0, [r6, #0]
      ptr_runtime->rx_data_index++;
1000b234:	6963      	ldr	r3, [r4, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000b236:	6922      	ldr	r2, [r4, #16]
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
      ptr_runtime->rx_data_index++;
1000b238:	3301      	adds	r3, #1
1000b23a:	6163      	str	r3, [r4, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1000b23c:	6963      	ldr	r3, [r4, #20]
1000b23e:	4293      	cmp	r3, r2
1000b240:	d215      	bcs.n	1000b26e <I2C_MASTER_ReceiveHandler+0x156>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000b242:	68e2      	ldr	r2, [r4, #12]
1000b244:	68a3      	ldr	r3, [r4, #8]
1000b246:	429a      	cmp	r2, r3
1000b248:	d21b      	bcs.n	1000b282 <I2C_MASTER_ReceiveHandler+0x16a>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
1000b24a:	68e2      	ldr	r2, [r4, #12]
1000b24c:	3b01      	subs	r3, #1
1000b24e:	429a      	cmp	r2, r3
1000b250:	d106      	bne.n	1000b260 <I2C_MASTER_ReceiveHandler+0x148>
1000b252:	6a23      	ldr	r3, [r4, #32]
1000b254:	2b01      	cmp	r3, #1
1000b256:	d103      	bne.n	1000b260 <I2C_MASTER_ReceiveHandler+0x148>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000b258:	6828      	ldr	r0, [r5, #0]
1000b25a:	f7ff f8ba 	bl	1000a3d2 <XMC_I2C_CH_MasterReceiveNack>
1000b25e:	e002      	b.n	1000b266 <I2C_MASTER_ReceiveHandler+0x14e>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000b260:	6828      	ldr	r0, [r5, #0]
1000b262:	f7ff f899 	bl	1000a398 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
1000b266:	68e3      	ldr	r3, [r4, #12]
1000b268:	3301      	adds	r3, #1
1000b26a:	60e3      	str	r3, [r4, #12]
1000b26c:	e009      	b.n	1000b282 <I2C_MASTER_ReceiveHandler+0x16a>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
1000b26e:	682a      	ldr	r2, [r5, #0]
1000b270:	4b05      	ldr	r3, [pc, #20]	; (1000b288 <I2C_MASTER_ReceiveHandler+0x170>)
1000b272:	6c11      	ldr	r1, [r2, #64]	; 0x40
1000b274:	400b      	ands	r3, r1
1000b276:	6413      	str	r3, [r2, #64]	; 0x40
1000b278:	e7cd      	b.n	1000b216 <I2C_MASTER_ReceiveHandler+0xfe>
1000b27a:	6828      	ldr	r0, [r5, #0]
1000b27c:	f7ff f88c 	bl	1000a398 <XMC_I2C_CH_MasterReceiveAck>
1000b280:	e7b7      	b.n	1000b1f2 <I2C_MASTER_ReceiveHandler+0xda>
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
1000b282:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000b284:	9fffffff 	.word	0x9fffffff
1000b288:	ffff3fff 	.word	0xffff3fff

1000b28c <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
1000b28c:	b538      	push	{r3, r4, r5, lr}
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
1000b28e:	6803      	ldr	r3, [r0, #0]
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
1000b290:	1c04      	adds	r4, r0, #0
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
  return (channel->PSR_IICMode);
1000b292:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
1000b294:	6843      	ldr	r3, [r0, #4]
1000b296:	699b      	ldr	r3, [r3, #24]
1000b298:	2b00      	cmp	r3, #0
1000b29a:	d007      	beq.n	1000b2ac <I2C_MASTER_ProtocolHandler+0x20>
1000b29c:	2120      	movs	r1, #32
1000b29e:	420d      	tst	r5, r1
1000b2a0:	d004      	beq.n	1000b2ac <I2C_MASTER_ProtocolHandler+0x20>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
1000b2a2:	f7ff fda8 	bl	1000adf6 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
1000b2a6:	6863      	ldr	r3, [r4, #4]
1000b2a8:	699b      	ldr	r3, [r3, #24]
1000b2aa:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
1000b2ac:	6863      	ldr	r3, [r4, #4]
1000b2ae:	69db      	ldr	r3, [r3, #28]
1000b2b0:	2b00      	cmp	r3, #0
1000b2b2:	d008      	beq.n	1000b2c6 <I2C_MASTER_ProtocolHandler+0x3a>
1000b2b4:	2140      	movs	r1, #64	; 0x40
1000b2b6:	420d      	tst	r5, r1
1000b2b8:	d005      	beq.n	1000b2c6 <I2C_MASTER_ProtocolHandler+0x3a>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
1000b2ba:	1c20      	adds	r0, r4, #0
1000b2bc:	f7ff fd9b 	bl	1000adf6 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
1000b2c0:	6863      	ldr	r3, [r4, #4]
1000b2c2:	69db      	ldr	r3, [r3, #28]
1000b2c4:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
1000b2c6:	6863      	ldr	r3, [r4, #4]
1000b2c8:	6a1b      	ldr	r3, [r3, #32]
1000b2ca:	2b00      	cmp	r3, #0
1000b2cc:	d00b      	beq.n	1000b2e6 <I2C_MASTER_ProtocolHandler+0x5a>
1000b2ce:	2381      	movs	r3, #129	; 0x81
1000b2d0:	005b      	lsls	r3, r3, #1
1000b2d2:	421d      	tst	r5, r3
1000b2d4:	d007      	beq.n	1000b2e6 <I2C_MASTER_ProtocolHandler+0x5a>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
1000b2d6:	2180      	movs	r1, #128	; 0x80
1000b2d8:	1c20      	adds	r0, r4, #0
1000b2da:	0049      	lsls	r1, r1, #1
1000b2dc:	f7ff fd8b 	bl	1000adf6 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
1000b2e0:	6863      	ldr	r3, [r4, #4]
1000b2e2:	6a1b      	ldr	r3, [r3, #32]
1000b2e4:	4798      	blx	r3
  }
}
1000b2e6:	bd38      	pop	{r3, r4, r5, pc}

1000b2e8 <I2C_MASTER_TransmitHandler>:

  ptr_runtime = handle->runtime;
  fifo_min = 0U;

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
1000b2e8:	23b1      	movs	r3, #177	; 0xb1
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
1000b2ea:	b570      	push	{r4, r5, r6, lr}
1000b2ec:	1c05      	adds	r5, r0, #0
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
1000b2ee:	6884      	ldr	r4, [r0, #8]
/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
1000b2f0:	6800      	ldr	r0, [r0, #0]

  ptr_runtime = handle->runtime;
  fifo_min = 0U;

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
1000b2f2:	005b      	lsls	r3, r3, #1
1000b2f4:	6c82      	ldr	r2, [r0, #72]	; 0x48
1000b2f6:	421a      	tst	r2, r3
1000b2f8:	d00d      	beq.n	1000b316 <I2C_MASTER_TransmitHandler+0x2e>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000b2fa:	1c02      	adds	r2, r0, #0
1000b2fc:	32fc      	adds	r2, #252	; 0xfc
1000b2fe:	68d1      	ldr	r1, [r2, #12]
1000b300:	4b56      	ldr	r3, [pc, #344]	; (1000b45c <I2C_MASTER_TransmitHandler+0x174>)
1000b302:	400b      	ands	r3, r1
1000b304:	60d3      	str	r3, [r2, #12]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
1000b306:	6c02      	ldr	r2, [r0, #64]	; 0x40
1000b308:	4b55      	ldr	r3, [pc, #340]	; (1000b460 <I2C_MASTER_TransmitHandler+0x178>)
1000b30a:	4013      	ands	r3, r2
1000b30c:	6403      	str	r3, [r0, #64]	; 0x40
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);

    I2C_MASTER_ProtocolHandler(handle);
1000b30e:	1c28      	adds	r0, r5, #0
1000b310:	f7ff ffbc 	bl	1000b28c <I2C_MASTER_ProtocolHandler>
1000b314:	e0a0      	b.n	1000b458 <I2C_MASTER_TransmitHandler+0x170>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
1000b316:	69a2      	ldr	r2, [r4, #24]
1000b318:	686b      	ldr	r3, [r5, #4]
1000b31a:	2a00      	cmp	r2, #0
1000b31c:	d14f      	bne.n	1000b3be <I2C_MASTER_TransmitHandler+0xd6>
  {
    if (handle->config->txFIFO_size > 0)
1000b31e:	1dda      	adds	r2, r3, #7
1000b320:	7fd1      	ldrb	r1, [r2, #31]
1000b322:	68a2      	ldr	r2, [r4, #8]
1000b324:	2900      	cmp	r1, #0
1000b326:	d03e      	beq.n	1000b3a6 <I2C_MASTER_TransmitHandler+0xbe>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000b328:	68e1      	ldr	r1, [r4, #12]
1000b32a:	4291      	cmp	r1, r2
1000b32c:	d21d      	bcs.n	1000b36a <I2C_MASTER_TransmitHandler+0x82>
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
1000b32e:	2680      	movs	r6, #128	; 0x80
1000b330:	05f6      	lsls	r6, r6, #23
1000b332:	1c31      	adds	r1, r6, #0
1000b334:	f7ff f884 	bl	1000a440 <XMC_I2C_CH_DisableEvent>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
1000b338:	682b      	ldr	r3, [r5, #0]
1000b33a:	33fc      	adds	r3, #252	; 0xfc
1000b33c:	68da      	ldr	r2, [r3, #12]
1000b33e:	4316      	orrs	r6, r2
1000b340:	60de      	str	r6, [r3, #12]
1000b342:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000b344:	1c03      	adds	r3, r0, #0
1000b346:	33fc      	adds	r3, #252	; 0xfc
1000b348:	699b      	ldr	r3, [r3, #24]
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000b34a:	04db      	lsls	r3, r3, #19
1000b34c:	d500      	bpl.n	1000b350 <I2C_MASTER_TransmitHandler+0x68>
1000b34e:	e083      	b.n	1000b458 <I2C_MASTER_TransmitHandler+0x170>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000b350:	68e3      	ldr	r3, [r4, #12]
1000b352:	68a2      	ldr	r2, [r4, #8]
1000b354:	4293      	cmp	r3, r2
1000b356:	d27f      	bcs.n	1000b458 <I2C_MASTER_TransmitHandler+0x170>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
1000b358:	68e3      	ldr	r3, [r4, #12]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
1000b35a:	6822      	ldr	r2, [r4, #0]
1000b35c:	5cd1      	ldrb	r1, [r2, r3]
1000b35e:	f7ff f802 	bl	1000a366 <XMC_I2C_CH_MasterTransmit>
            ptr_runtime->tx_data_index++;
1000b362:	68e3      	ldr	r3, [r4, #12]
1000b364:	3301      	adds	r3, #1
1000b366:	60e3      	str	r3, [r4, #12]
1000b368:	e7eb      	b.n	1000b342 <I2C_MASTER_TransmitHandler+0x5a>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000b36a:	30fc      	adds	r0, #252	; 0xfc
1000b36c:	68c1      	ldr	r1, [r0, #12]
1000b36e:	4a3b      	ldr	r2, [pc, #236]	; (1000b45c <I2C_MASTER_TransmitHandler+0x174>)
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
1000b370:	3328      	adds	r3, #40	; 0x28
1000b372:	400a      	ands	r2, r1
1000b374:	60c2      	str	r2, [r0, #12]
1000b376:	781a      	ldrb	r2, [r3, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1000b378:	b253      	sxtb	r3, r2
1000b37a:	2b00      	cmp	r3, #0
1000b37c:	db08      	blt.n	1000b390 <I2C_MASTER_TransmitHandler+0xa8>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000b37e:	231f      	movs	r3, #31
1000b380:	4013      	ands	r3, r2
1000b382:	2201      	movs	r2, #1
1000b384:	409a      	lsls	r2, r3
1000b386:	1c13      	adds	r3, r2, #0
1000b388:	22c0      	movs	r2, #192	; 0xc0
1000b38a:	4936      	ldr	r1, [pc, #216]	; (1000b464 <I2C_MASTER_TransmitHandler+0x17c>)
1000b38c:	0052      	lsls	r2, r2, #1
1000b38e:	508b      	str	r3, [r1, r2]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1000b390:	6983      	ldr	r3, [r0, #24]

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
1000b392:	051b      	lsls	r3, r3, #20
1000b394:	d5fc      	bpl.n	1000b390 <I2C_MASTER_TransmitHandler+0xa8>

          if (ptr_runtime->bus_acquired == true)
1000b396:	3428      	adds	r4, #40	; 0x28
1000b398:	7823      	ldrb	r3, [r4, #0]
1000b39a:	2b00      	cmp	r3, #0
1000b39c:	d05c      	beq.n	1000b458 <I2C_MASTER_TransmitHandler+0x170>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
1000b39e:	1c28      	adds	r0, r5, #0
1000b3a0:	f7ff fcb7 	bl	1000ad12 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
1000b3a4:	e058      	b.n	1000b458 <I2C_MASTER_TransmitHandler+0x170>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000b3a6:	68e3      	ldr	r3, [r4, #12]
1000b3a8:	4293      	cmp	r3, r2
1000b3aa:	d2f4      	bcs.n	1000b396 <I2C_MASTER_TransmitHandler+0xae>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
1000b3ac:	68e3      	ldr	r3, [r4, #12]
1000b3ae:	6822      	ldr	r2, [r4, #0]
1000b3b0:	5cd1      	ldrb	r1, [r2, r3]
1000b3b2:	f7fe ffd8 	bl	1000a366 <XMC_I2C_CH_MasterTransmit>
        ptr_runtime->tx_data_index++;
1000b3b6:	68e3      	ldr	r3, [r4, #12]
1000b3b8:	3301      	adds	r3, #1
1000b3ba:	60e3      	str	r3, [r4, #12]
1000b3bc:	e04c      	b.n	1000b458 <I2C_MASTER_TransmitHandler+0x170>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
1000b3be:	1dda      	adds	r2, r3, #7
1000b3c0:	7fd2      	ldrb	r2, [r2, #31]
1000b3c2:	2a00      	cmp	r2, #0
1000b3c4:	d02e      	beq.n	1000b424 <I2C_MASTER_TransmitHandler+0x13c>
    {
      if ((handle->config->rxFIFO_size > 0))
1000b3c6:	3308      	adds	r3, #8
1000b3c8:	7fd9      	ldrb	r1, [r3, #31]
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
1000b3ca:	2602      	movs	r6, #2
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
1000b3cc:	2900      	cmp	r1, #0
1000b3ce:	d007      	beq.n	1000b3e0 <I2C_MASTER_TransmitHandler+0xf8>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
1000b3d0:	2301      	movs	r3, #1
1000b3d2:	1c1e      	adds	r6, r3, #0
1000b3d4:	408b      	lsls	r3, r1
1000b3d6:	4096      	lsls	r6, r2
1000b3d8:	42b3      	cmp	r3, r6
1000b3da:	d900      	bls.n	1000b3de <I2C_MASTER_TransmitHandler+0xf6>
1000b3dc:	1c33      	adds	r3, r6, #0
1000b3de:	b2de      	uxtb	r6, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000b3e0:	30fc      	adds	r0, #252	; 0xfc
1000b3e2:	68c2      	ldr	r2, [r0, #12]
1000b3e4:	4b1d      	ldr	r3, [pc, #116]	; (1000b45c <I2C_MASTER_TransmitHandler+0x174>)
1000b3e6:	4013      	ands	r3, r2
1000b3e8:	60c3      	str	r3, [r0, #12]
1000b3ea:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1000b3ec:	1c03      	adds	r3, r0, #0
1000b3ee:	33fc      	adds	r3, #252	; 0xfc
1000b3f0:	699b      	ldr	r3, [r3, #24]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000b3f2:	04db      	lsls	r3, r3, #19
1000b3f4:	d426      	bmi.n	1000b444 <I2C_MASTER_TransmitHandler+0x15c>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000b3f6:	68e3      	ldr	r3, [r4, #12]
1000b3f8:	68a2      	ldr	r2, [r4, #8]
1000b3fa:	4293      	cmp	r3, r2
1000b3fc:	d222      	bcs.n	1000b444 <I2C_MASTER_TransmitHandler+0x15c>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000b3fe:	68e3      	ldr	r3, [r4, #12]
1000b400:	3301      	adds	r3, #1
1000b402:	4293      	cmp	r3, r2
1000b404:	d105      	bne.n	1000b412 <I2C_MASTER_TransmitHandler+0x12a>
1000b406:	6a23      	ldr	r3, [r4, #32]
1000b408:	2b01      	cmp	r3, #1
1000b40a:	d102      	bne.n	1000b412 <I2C_MASTER_TransmitHandler+0x12a>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000b40c:	f7fe ffe1 	bl	1000a3d2 <XMC_I2C_CH_MasterReceiveNack>
1000b410:	e001      	b.n	1000b416 <I2C_MASTER_TransmitHandler+0x12e>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000b412:	f7fe ffc1 	bl	1000a398 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
1000b416:	68e3      	ldr	r3, [r4, #12]
1000b418:	3301      	adds	r3, #1
1000b41a:	60e3      	str	r3, [r4, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
1000b41c:	68e3      	ldr	r3, [r4, #12]
1000b41e:	42b3      	cmp	r3, r6
1000b420:	d3e3      	bcc.n	1000b3ea <I2C_MASTER_TransmitHandler+0x102>
1000b422:	e00f      	b.n	1000b444 <I2C_MASTER_TransmitHandler+0x15c>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000b424:	68e3      	ldr	r3, [r4, #12]
1000b426:	68a2      	ldr	r2, [r4, #8]
1000b428:	3301      	adds	r3, #1
1000b42a:	4293      	cmp	r3, r2
1000b42c:	d105      	bne.n	1000b43a <I2C_MASTER_TransmitHandler+0x152>
1000b42e:	6a23      	ldr	r3, [r4, #32]
1000b430:	2b01      	cmp	r3, #1
1000b432:	d102      	bne.n	1000b43a <I2C_MASTER_TransmitHandler+0x152>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
1000b434:	f7fe ffcd 	bl	1000a3d2 <XMC_I2C_CH_MasterReceiveNack>
1000b438:	e001      	b.n	1000b43e <I2C_MASTER_TransmitHandler+0x156>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
1000b43a:	f7fe ffad 	bl	1000a398 <XMC_I2C_CH_MasterReceiveAck>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
      }
      ptr_runtime->tx_data_index++;
1000b43e:	68e3      	ldr	r3, [r4, #12]
1000b440:	3301      	adds	r3, #1
1000b442:	60e3      	str	r3, [r4, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
1000b444:	68ab      	ldr	r3, [r5, #8]
1000b446:	68da      	ldr	r2, [r3, #12]
1000b448:	689b      	ldr	r3, [r3, #8]
1000b44a:	429a      	cmp	r2, r3
1000b44c:	d104      	bne.n	1000b458 <I2C_MASTER_TransmitHandler+0x170>
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
1000b44e:	2180      	movs	r1, #128	; 0x80
1000b450:	6828      	ldr	r0, [r5, #0]
1000b452:	05c9      	lsls	r1, r1, #23
1000b454:	f7fe fff4 	bl	1000a440 <XMC_I2C_CH_DisableEvent>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
1000b458:	bd70      	pop	{r4, r5, r6, pc}
1000b45a:	46c0      	nop			; (mov r8, r8)
1000b45c:	bfffffff 	.word	0xbfffffff
1000b460:	ffffdfff 	.word	0xffffdfff
1000b464:	e000e100 	.word	0xe000e100

1000b468 <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
1000b468:	b510      	push	{r4, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000b46a:	6842      	ldr	r2, [r0, #4]
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
1000b46c:	1c04      	adds	r4, r0, #0
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000b46e:	1d53      	adds	r3, r2, #5
1000b470:	7fd8      	ldrb	r0, [r3, #31]
1000b472:	2800      	cmp	r0, #0
1000b474:	d119      	bne.n	1000b4aa <I2C_MASTER_AbortTransmit+0x42>
  return (status);
}

static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
{
  handle->runtime->tx_busy = false;
1000b476:	68a3      	ldr	r3, [r4, #8]
  handle->runtime->tx_data = NULL;
  handle->runtime->bus_acquired = false;

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000b478:	3207      	adds	r2, #7
  return (status);
}

static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
{
  handle->runtime->tx_busy = false;
1000b47a:	1dd9      	adds	r1, r3, #7
1000b47c:	77c8      	strb	r0, [r1, #31]
  handle->runtime->tx_data = NULL;
1000b47e:	6018      	str	r0, [r3, #0]
  handle->runtime->bus_acquired = false;
1000b480:	3328      	adds	r3, #40	; 0x28
1000b482:	7018      	strb	r0, [r3, #0]

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000b484:	7fd3      	ldrb	r3, [r2, #31]
1000b486:	2b00      	cmp	r3, #0
1000b488:	d008      	beq.n	1000b49c <I2C_MASTER_AbortTransmit+0x34>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
1000b48a:	6823      	ldr	r3, [r4, #0]
1000b48c:	4a0c      	ldr	r2, [pc, #48]	; (1000b4c0 <I2C_MASTER_AbortTransmit+0x58>)
1000b48e:	33fc      	adds	r3, #252	; 0xfc
1000b490:	68d9      	ldr	r1, [r3, #12]
1000b492:	400a      	ands	r2, r1
1000b494:	60da      	str	r2, [r3, #12]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1000b496:	2280      	movs	r2, #128	; 0x80
1000b498:	0212      	lsls	r2, r2, #8
1000b49a:	61da      	str	r2, [r3, #28]
1000b49c:	2180      	movs	r1, #128	; 0x80
1000b49e:	6820      	ldr	r0, [r4, #0]
1000b4a0:	05c9      	lsls	r1, r1, #23
1000b4a2:	f7fe ffcd 	bl	1000a440 <XMC_I2C_CH_DisableEvent>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
1000b4a6:	2000      	movs	r0, #0
1000b4a8:	e003      	b.n	1000b4b2 <I2C_MASTER_AbortTransmit+0x4a>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
1000b4aa:	3801      	subs	r0, #1
1000b4ac:	1e43      	subs	r3, r0, #1
1000b4ae:	4198      	sbcs	r0, r3
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
1000b4b0:	b2c0      	uxtb	r0, r0
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
1000b4b2:	2102      	movs	r1, #2
1000b4b4:	6823      	ldr	r3, [r4, #0]
1000b4b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000b4b8:	430a      	orrs	r2, r1
1000b4ba:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
1000b4bc:	6699      	str	r1, [r3, #104]	; 0x68

  return (status);
}
1000b4be:	bd10      	pop	{r4, pc}
1000b4c0:	bfffffff 	.word	0xbfffffff

1000b4c4 <I2C_MASTER_AbortReceive>:
 * is active, user will not be able to place a new receive request till the active
 * reception is complete. This API can stop the progressing reception to make
 * a new receive request.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
1000b4c4:	b510      	push	{r4, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
1000b4c6:	6841      	ldr	r1, [r0, #4]
1000b4c8:	1d8b      	adds	r3, r1, #6
1000b4ca:	7fdb      	ldrb	r3, [r3, #31]
1000b4cc:	2b00      	cmp	r3, #0
1000b4ce:	d11e      	bne.n	1000b50e <I2C_MASTER_AbortReceive+0x4a>


static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
1000b4d0:	6882      	ldr	r2, [r0, #8]
  handle->runtime->rx_data = NULL;

  handle->runtime->bus_acquired = false;

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000b4d2:	3108      	adds	r1, #8


static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
1000b4d4:	1c14      	adds	r4, r2, #0
1000b4d6:	3408      	adds	r4, #8
1000b4d8:	77e3      	strb	r3, [r4, #31]
  handle->runtime->tx_busy = false;
1000b4da:	1dd4      	adds	r4, r2, #7
1000b4dc:	77e3      	strb	r3, [r4, #31]
  handle->runtime->rx_data = NULL;
1000b4de:	6053      	str	r3, [r2, #4]

  handle->runtime->bus_acquired = false;
1000b4e0:	3228      	adds	r2, #40	; 0x28
1000b4e2:	7013      	strb	r3, [r2, #0]

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1000b4e4:	7fca      	ldrb	r2, [r1, #31]
1000b4e6:	6803      	ldr	r3, [r0, #0]
1000b4e8:	2a00      	cmp	r2, #0
1000b4ea:	d005      	beq.n	1000b4f8 <I2C_MASTER_AbortReceive+0x34>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
1000b4ec:	33fc      	adds	r3, #252	; 0xfc
1000b4ee:	6919      	ldr	r1, [r3, #16]
1000b4f0:	4a0a      	ldr	r2, [pc, #40]	; (1000b51c <I2C_MASTER_AbortReceive+0x58>)
1000b4f2:	400a      	ands	r2, r1
1000b4f4:	611a      	str	r2, [r3, #16]
1000b4f6:	e003      	b.n	1000b500 <I2C_MASTER_AbortReceive+0x3c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
1000b4f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
1000b4fa:	4a09      	ldr	r2, [pc, #36]	; (1000b520 <I2C_MASTER_AbortReceive+0x5c>)
1000b4fc:	400a      	ands	r2, r1
1000b4fe:	641a      	str	r2, [r3, #64]	; 0x40
1000b500:	2180      	movs	r1, #128	; 0x80
1000b502:	6800      	ldr	r0, [r0, #0]
1000b504:	05c9      	lsls	r1, r1, #23
1000b506:	f7fe ff9b 	bl	1000a440 <XMC_I2C_CH_DisableEvent>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
1000b50a:	2000      	movs	r0, #0
1000b50c:	e004      	b.n	1000b518 <I2C_MASTER_AbortReceive+0x54>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
    I2C_MASTER_lAbortReceiveIRQ(handle);
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
1000b50e:	1e58      	subs	r0, r3, #1
1000b510:	1c03      	adds	r3, r0, #0
1000b512:	1e58      	subs	r0, r3, #1
1000b514:	4183      	sbcs	r3, r0
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
1000b516:	b2d8      	uxtb	r0, r3
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }

  return (status);
}
1000b518:	bd10      	pop	{r4, pc}
1000b51a:	46c0      	nop			; (mov r8, r8)
1000b51c:	9fffffff 	.word	0x9fffffff
1000b520:	ffff3fff 	.word	0xffff3fff

1000b524 <i2c_master_0_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void i2c_master_0_disable_io(void)
{
1000b524:	b508      	push	{r3, lr}
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)12, XMC_GPIO_MODE_INPUT_TRISTATE);
1000b526:	4805      	ldr	r0, [pc, #20]	; (1000b53c <i2c_master_0_disable_io+0x18>)
1000b528:	210c      	movs	r1, #12
1000b52a:	2200      	movs	r2, #0
1000b52c:	f7fe fe20 	bl	1000a170 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, XMC_GPIO_MODE_INPUT_TRISTATE);
1000b530:	4803      	ldr	r0, [pc, #12]	; (1000b540 <i2c_master_0_disable_io+0x1c>)
1000b532:	2101      	movs	r1, #1
1000b534:	2200      	movs	r2, #0
1000b536:	f7fe fe1b 	bl	1000a170 <XMC_GPIO_SetMode>
}
1000b53a:	bd08      	pop	{r3, pc}
1000b53c:	40040200 	.word	0x40040200
1000b540:	40040000 	.word	0x40040000

1000b544 <i2c_master_0_enable_io>:

static void i2c_master_0_enable_io(void)
{
1000b544:	b508      	push	{r3, lr}
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)12, i2c_master_0_sda_pin_config.mode);
1000b546:	4805      	ldr	r0, [pc, #20]	; (1000b55c <i2c_master_0_enable_io+0x18>)
1000b548:	210c      	movs	r1, #12
1000b54a:	22dc      	movs	r2, #220	; 0xdc
1000b54c:	f7fe fe10 	bl	1000a170 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, i2c_master_0_scl_pin_config.mode);
1000b550:	4803      	ldr	r0, [pc, #12]	; (1000b560 <i2c_master_0_enable_io+0x1c>)
1000b552:	2101      	movs	r1, #1
1000b554:	22e0      	movs	r2, #224	; 0xe0
1000b556:	f7fe fe0b 	bl	1000a170 <XMC_GPIO_SetMode>
}
1000b55a:	bd08      	pop	{r3, pc}
1000b55c:	40040200 	.word	0x40040200
1000b560:	40040000 	.word	0x40040000

1000b564 <i2c_master_0_init>:
  .config = &i2c_master_0_config,
  .runtime = &i2c_master_0_runtime,
};

void i2c_master_0_init(void)
{
1000b564:	b538      	push	{r3, r4, r5, lr}
                               XMC_I2C_CH_EVENT_ARBITRATION_LOST | 
                               XMC_I2C_CH_EVENT_ERROR); 

  const uint32_t tx_fifo_events = (uint32_t)(0);
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
  XMC_I2C_CH_Init(XMC_I2C1_CH1, &i2c_master_0_channel_config);
1000b566:	4c3a      	ldr	r4, [pc, #232]	; (1000b650 <i2c_master_0_init+0xec>)
1000b568:	493a      	ldr	r1, [pc, #232]	; (1000b654 <i2c_master_0_init+0xf0>)
1000b56a:	1c20      	adds	r0, r4, #0
1000b56c:	f7fe fe7e 	bl	1000a26c <XMC_I2C_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000b570:	2307      	movs	r3, #7
1000b572:	2102      	movs	r1, #2
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
1000b574:	1c25      	adds	r5, r4, #0
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000b576:	69e2      	ldr	r2, [r4, #28]

  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX4, 0U);
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C1_CH1,
1000b578:	1c20      	adds	r0, r4, #0
1000b57a:	439a      	bics	r2, r3
1000b57c:	430a      	orrs	r2, r1
1000b57e:	61e2      	str	r2, [r4, #28]
1000b580:	6a22      	ldr	r2, [r4, #32]
1000b582:	310e      	adds	r1, #14
1000b584:	439a      	bics	r2, r3
1000b586:	6222      	str	r2, [r4, #32]
1000b588:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
1000b58a:	35fc      	adds	r5, #252	; 0xfc
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000b58c:	439a      	bics	r2, r3
1000b58e:	62a2      	str	r2, [r4, #40]	; 0x28
1000b590:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1000b592:	439a      	bics	r2, r3
1000b594:	62e2      	str	r2, [r4, #44]	; 0x2c
1000b596:	6b22      	ldr	r2, [r4, #48]	; 0x30
1000b598:	439a      	bics	r2, r3
1000b59a:	6322      	str	r2, [r4, #48]	; 0x30
1000b59c:	2301      	movs	r3, #1
1000b59e:	2204      	movs	r2, #4
1000b5a0:	f7ff f8a2 	bl	1000a6e8 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
1000b5a4:	1c20      	adds	r0, r4, #0
1000b5a6:	2110      	movs	r1, #16
1000b5a8:	2201      	movs	r2, #1
1000b5aa:	f7ff f8e6 	bl	1000a77a <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
1000b5ae:	68eb      	ldr	r3, [r5, #12]
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)1));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C1_CH1, tx_fifo_events);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C1_CH1,
1000b5b0:	1c20      	adds	r0, r4, #0
1000b5b2:	60eb      	str	r3, [r5, #12]
1000b5b4:	2100      	movs	r1, #0
1000b5b6:	230f      	movs	r3, #15
1000b5b8:	2204      	movs	r2, #4
1000b5ba:	f7ff f8a9 	bl	1000a710 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
1000b5be:	1c20      	adds	r0, r4, #0
1000b5c0:	2110      	movs	r1, #16
1000b5c2:	2200      	movs	r2, #0
1000b5c4:	f7ff f8e3 	bl	1000a78e <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
1000b5c8:	1c20      	adds	r0, r4, #0
1000b5ca:	2113      	movs	r1, #19
1000b5cc:	2200      	movs	r2, #0
1000b5ce:	f7ff f8de 	bl	1000a78e <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
1000b5d2:	22c0      	movs	r2, #192	; 0xc0
1000b5d4:	692b      	ldr	r3, [r5, #16]
1000b5d6:	05d2      	lsls	r2, r2, #23
1000b5d8:	4313      	orrs	r3, r2
1000b5da:	612b      	str	r3, [r5, #16]
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C1_CH1, rx_fifo_events);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C1_CH1,
1000b5dc:	1c20      	adds	r0, r4, #0
1000b5de:	2201      	movs	r2, #1
1000b5e0:	2110      	movs	r1, #16
1000b5e2:	f7ff f8c1 	bl	1000a768 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)1));
  XMC_I2C_CH_EnableEvent(XMC_I2C1_CH1, enabled_protocol_events);
1000b5e6:	21b0      	movs	r1, #176	; 0xb0
1000b5e8:	1c20      	adds	r0, r4, #0
1000b5ea:	0449      	lsls	r1, r1, #17
1000b5ec:	f7fe ff1a 	bl	1000a424 <XMC_I2C_CH_EnableEvent>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
1000b5f0:	220f      	movs	r2, #15
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000b5f2:	25c2      	movs	r5, #194	; 0xc2
1000b5f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  XMC_I2C_CH_Start(XMC_I2C1_CH1);

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)12, &i2c_master_0_sda_pin_config);
1000b5f6:	4818      	ldr	r0, [pc, #96]	; (1000b658 <i2c_master_0_init+0xf4>)
1000b5f8:	4393      	bics	r3, r2
1000b5fa:	3a0b      	subs	r2, #11
1000b5fc:	4313      	orrs	r3, r2
1000b5fe:	6423      	str	r3, [r4, #64]	; 0x40
1000b600:	210c      	movs	r1, #12
1000b602:	4c16      	ldr	r4, [pc, #88]	; (1000b65c <i2c_master_0_init+0xf8>)
1000b604:	4a16      	ldr	r2, [pc, #88]	; (1000b660 <i2c_master_0_init+0xfc>)
1000b606:	f7fe fc03 	bl	10009e10 <XMC_GPIO_Init>
1000b60a:	00ad      	lsls	r5, r5, #2
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, &i2c_master_0_scl_pin_config);
1000b60c:	4815      	ldr	r0, [pc, #84]	; (1000b664 <i2c_master_0_init+0x100>)
1000b60e:	2101      	movs	r1, #1
1000b610:	4a15      	ldr	r2, [pc, #84]	; (1000b668 <i2c_master_0_init+0x104>)
1000b612:	f7fe fbfd 	bl	10009e10 <XMC_GPIO_Init>
1000b616:	5962      	ldr	r2, [r4, r5]
1000b618:	4b14      	ldr	r3, [pc, #80]	; (1000b66c <i2c_master_0_init+0x108>)

  NVIC_SetPriority((IRQn_Type)10, 3);
  XMC_SCU_SetInterruptControl(10, XMC_SCU_IRQCTRL_USIC1_SR1_IRQ10);
1000b61a:	200a      	movs	r0, #10
1000b61c:	4013      	ands	r3, r2
1000b61e:	22c0      	movs	r2, #192	; 0xc0
1000b620:	0412      	lsls	r2, r2, #16
1000b622:	4313      	orrs	r3, r2
1000b624:	5163      	str	r3, [r4, r5]
1000b626:	4912      	ldr	r1, [pc, #72]	; (1000b670 <i2c_master_0_init+0x10c>)
1000b628:	f7fe fd28 	bl	1000a07c <XMC_SCU_SetInterruptControl>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000b62c:	2380      	movs	r3, #128	; 0x80
1000b62e:	00db      	lsls	r3, r3, #3
1000b630:	6023      	str	r3, [r4, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000b632:	4b10      	ldr	r3, [pc, #64]	; (1000b674 <i2c_master_0_init+0x110>)
1000b634:	5962      	ldr	r2, [r4, r5]
  NVIC_EnableIRQ((IRQn_Type)10);
  NVIC_SetPriority((IRQn_Type)9, 3);
  XMC_SCU_SetInterruptControl(9, XMC_SCU_IRQCTRL_USIC1_SR0_IRQ9);
1000b636:	2009      	movs	r0, #9
1000b638:	4013      	ands	r3, r2
1000b63a:	22c0      	movs	r2, #192	; 0xc0
1000b63c:	0212      	lsls	r2, r2, #8
1000b63e:	4313      	orrs	r3, r2
1000b640:	5163      	str	r3, [r4, r5]
1000b642:	490d      	ldr	r1, [pc, #52]	; (1000b678 <i2c_master_0_init+0x114>)
1000b644:	f7fe fd1a 	bl	1000a07c <XMC_SCU_SetInterruptControl>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000b648:	2380      	movs	r3, #128	; 0x80
1000b64a:	009b      	lsls	r3, r3, #2
1000b64c:	6023      	str	r3, [r4, #0]
  NVIC_EnableIRQ((IRQn_Type)9);}
1000b64e:	bd38      	pop	{r3, r4, r5, pc}
1000b650:	48004200 	.word	0x48004200
1000b654:	10010a48 	.word	0x10010a48
1000b658:	40040200 	.word	0x40040200
1000b65c:	e000e100 	.word	0xe000e100
1000b660:	10010a0c 	.word	0x10010a0c
1000b664:	40040000 	.word	0x40040000
1000b668:	10010a14 	.word	0x10010a14
1000b66c:	ff00ffff 	.word	0xff00ffff
1000b670:	00000a01 	.word	0x00000a01
1000b674:	ffff00ff 	.word	0xffff00ff
1000b678:	00000901 	.word	0x00000901

1000b67c <IRQ10_Handler>:
/*Transmit ISR*/
void i2c_master_0_TX_HANDLER()
{
1000b67c:	b508      	push	{r3, lr}
  I2C_MASTER_TransmitHandler(&i2c_master_0);
1000b67e:	4802      	ldr	r0, [pc, #8]	; (1000b688 <IRQ10_Handler+0xc>)
1000b680:	f7ff fe32 	bl	1000b2e8 <I2C_MASTER_TransmitHandler>
}
1000b684:	bd08      	pop	{r3, pc}
1000b686:	46c0      	nop			; (mov r8, r8)
1000b688:	200026f8 	.word	0x200026f8

1000b68c <IRQ9_Handler>:
/*Receive ISR*/
void i2c_master_0_RX_HANDLER()
{
1000b68c:	b508      	push	{r3, lr}
  I2C_MASTER_ReceiveHandler(&i2c_master_0);
1000b68e:	4802      	ldr	r0, [pc, #8]	; (1000b698 <IRQ9_Handler+0xc>)
1000b690:	f7ff fd42 	bl	1000b118 <I2C_MASTER_ReceiveHandler>
}
1000b694:	bd08      	pop	{r3, pc}
1000b696:	46c0      	nop			; (mov r8, r8)
1000b698:	200026f8 	.word	0x200026f8

1000b69c <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
1000b69c:	b510      	push	{r4, lr}
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
1000b69e:	7b43      	ldrb	r3, [r0, #13]
1000b6a0:	2b00      	cmp	r3, #0
1000b6a2:	d10a      	bne.n	1000b6ba <GLOBAL_CCU4_Init+0x1e>
1000b6a4:	1c04      	adds	r4, r0, #0
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
1000b6a6:	7b01      	ldrb	r1, [r0, #12]
1000b6a8:	6880      	ldr	r0, [r0, #8]
1000b6aa:	f7fe fd15 	bl	1000a0d8 <XMC_CCU4_Init>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
1000b6ae:	2280      	movs	r2, #128	; 0x80
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
1000b6b0:	68a3      	ldr	r3, [r4, #8]
1000b6b2:	0052      	lsls	r2, r2, #1
1000b6b4:	60da      	str	r2, [r3, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
1000b6b6:	2301      	movs	r3, #1
1000b6b8:	7363      	strb	r3, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
1000b6ba:	2000      	movs	r0, #0
1000b6bc:	bd10      	pop	{r4, pc}

1000b6be <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
1000b6be:	b510      	push	{r4, lr}
1000b6c0:	1c04      	adds	r4, r0, #0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
1000b6c2:	7b01      	ldrb	r1, [r0, #12]
1000b6c4:	1d02      	adds	r2, r0, #4
1000b6c6:	6800      	ldr	r0, [r0, #0]
1000b6c8:	f7fe fba2 	bl	10009e10 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
1000b6cc:	6820      	ldr	r0, [r4, #0]
1000b6ce:	7b21      	ldrb	r1, [r4, #12]
1000b6d0:	7b62      	ldrb	r2, [r4, #13]
1000b6d2:	f7fe fd5f 	bl	1000a194 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
1000b6d6:	2000      	movs	r0, #0
1000b6d8:	bd10      	pop	{r4, pc}
	...

1000b6dc <SystemCoreSetup>:
 
void SystemCoreSetup(void)
{
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
1000b6dc:	2101      	movs	r1, #1
1000b6de:	4a02      	ldr	r2, [pc, #8]	; (1000b6e8 <SystemCoreSetup+0xc>)
1000b6e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
1000b6e2:	438b      	bics	r3, r1
1000b6e4:	6693      	str	r3, [r2, #104]	; 0x68
#endif
}
1000b6e6:	4770      	bx	lr
1000b6e8:	40010000 	.word	0x40010000

1000b6ec <CLOCK_XMC1_Init>:
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
1000b6ec:	7803      	ldrb	r3, [r0, #0]
1000b6ee:	2b00      	cmp	r3, #0
1000b6f0:	d101      	bne.n	1000b6f6 <CLOCK_XMC1_Init+0xa>
#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
    {
      handle->init_status = true;
1000b6f2:	3301      	adds	r3, #1
1000b6f4:	7003      	strb	r3, [r0, #0]
    }
  }
  return (status);
}
1000b6f6:	2000      	movs	r0, #0
1000b6f8:	4770      	bx	lr
	...

1000b6fc <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
1000b6fc:	b530      	push	{r4, r5, lr}
1000b6fe:	b085      	sub	sp, #20
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
1000b700:	466a      	mov	r2, sp
1000b702:	4b05      	ldr	r3, [pc, #20]	; (1000b718 <SystemCoreClockSetup+0x1c>)
1000b704:	4668      	mov	r0, sp
1000b706:	cb32      	ldmia	r3!, {r1, r4, r5}
1000b708:	c232      	stmia	r2!, {r1, r4, r5}
1000b70a:	681b      	ldr	r3, [r3, #0]
1000b70c:	6013      	str	r3, [r2, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
1000b70e:	f7fe fc39 	bl	10009f84 <XMC_SCU_CLOCK_Init>
}
1000b712:	b005      	add	sp, #20
1000b714:	bd30      	pop	{r4, r5, pc}
1000b716:	46c0      	nop			; (mov r8, r8)
1000b718:	10010a80 	.word	0x10010a80

1000b71c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
1000b71c:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
1000b71e:	4818      	ldr	r0, [pc, #96]	; (1000b780 <DAVE_Init+0x64>)
1000b720:	f7ff ffe4 	bl	1000b6ec <CLOCK_XMC1_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
1000b724:	2800      	cmp	r0, #0
1000b726:	d12a      	bne.n	1000b77e <DAVE_Init+0x62>
  {
	 /**  Initialization of UART APP instance cunit_logger */
	 init_status = (DAVE_STATUS_t)UART_Init(&cunit_logger); 
1000b728:	4816      	ldr	r0, [pc, #88]	; (1000b784 <DAVE_Init+0x68>)
1000b72a:	f7ff f8ad 	bl	1000a888 <UART_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b72e:	2800      	cmp	r0, #0
1000b730:	d125      	bne.n	1000b77e <DAVE_Init+0x62>
  {
	 /**  Initialization of INTERRUPT APP instance scheduler_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&scheduler_timer_intr); 
1000b732:	4815      	ldr	r0, [pc, #84]	; (1000b788 <DAVE_Init+0x6c>)
1000b734:	f7ff fa7e 	bl	1000ac34 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b738:	2800      	cmp	r0, #0
1000b73a:	d120      	bne.n	1000b77e <DAVE_Init+0x62>
  {
	 /**  Initialization of TIMER APP instance scheduler_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&scheduler_timer); 
1000b73c:	4813      	ldr	r0, [pc, #76]	; (1000b78c <DAVE_Init+0x70>)
1000b73e:	f7ff fa69 	bl	1000ac14 <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b742:	2800      	cmp	r0, #0
1000b744:	d11b      	bne.n	1000b77e <DAVE_Init+0x62>
  {
	 /**  Initialization of INTERRUPT APP instance tick_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&tick_timer_intr); 
1000b746:	4812      	ldr	r0, [pc, #72]	; (1000b790 <DAVE_Init+0x74>)
1000b748:	f7ff fa74 	bl	1000ac34 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b74c:	2800      	cmp	r0, #0
1000b74e:	d116      	bne.n	1000b77e <DAVE_Init+0x62>
  {
	 /**  Initialization of TIMER APP instance tick_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&tick_timer); 
1000b750:	4810      	ldr	r0, [pc, #64]	; (1000b794 <DAVE_Init+0x78>)
1000b752:	f7ff fa5f 	bl	1000ac14 <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b756:	2800      	cmp	r0, #0
1000b758:	d111      	bne.n	1000b77e <DAVE_Init+0x62>
  {
	 /**  Initialization of DIGITAL_IO APP instance reset_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&reset_pin); 
1000b75a:	480f      	ldr	r0, [pc, #60]	; (1000b798 <DAVE_Init+0x7c>)
1000b75c:	f7ff ffaf 	bl	1000b6be <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b760:	2800      	cmp	r0, #0
1000b762:	d10c      	bne.n	1000b77e <DAVE_Init+0x62>
  {
	 /**  Initialization of DIGITAL_IO APP instance vdd_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&vdd_pin); 
1000b764:	480d      	ldr	r0, [pc, #52]	; (1000b79c <DAVE_Init+0x80>)
1000b766:	f7ff ffaa 	bl	1000b6be <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b76a:	2800      	cmp	r0, #0
1000b76c:	d107      	bne.n	1000b77e <DAVE_Init+0x62>
  {
	 /**  Initialization of DIGITAL_IO APP instance io_test */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&io_test); 
1000b76e:	480c      	ldr	r0, [pc, #48]	; (1000b7a0 <DAVE_Init+0x84>)
1000b770:	f7ff ffa5 	bl	1000b6be <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000b774:	2800      	cmp	r0, #0
1000b776:	d102      	bne.n	1000b77e <DAVE_Init+0x62>
  {
	 /**  Initialization of I2C_MASTER APP instance i2c_master_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&i2c_master_0); 
1000b778:	480a      	ldr	r0, [pc, #40]	; (1000b7a4 <DAVE_Init+0x88>)
1000b77a:	f7ff fb32 	bl	1000ade2 <I2C_MASTER_Init>
   }  
  return init_status;
} /**  End of function DAVE_Init */
1000b77e:	bd08      	pop	{r3, pc}
1000b780:	20002fe0 	.word	0x20002fe0
1000b784:	20002660 	.word	0x20002660
1000b788:	10010a00 	.word	0x10010a00
1000b78c:	20002694 	.word	0x20002694
1000b790:	10010a06 	.word	0x10010a06
1000b794:	2000266c 	.word	0x2000266c
1000b798:	10010a60 	.word	0x10010a60
1000b79c:	10010a70 	.word	0x10010a70
1000b7a0:	10010a50 	.word	0x10010a50
1000b7a4:	200026f8 	.word	0x200026f8

1000b7a8 <main>:
 *  0 on success
 *  1 on failure
 */

int main(void)
{
1000b7a8:	b508      	push	{r3, lr}
    DAVE_STATUS_t status;
    uint8_t return_value = 0;

    // Initialization of DAVE Apps
    status = DAVE_Init(); /* Initialization of DAVE APPs  */
1000b7aa:	f7ff ffb7 	bl	1000b71c <DAVE_Init>
    if (status == DAVE_STATUS_FAILURE)
1000b7ae:	2801      	cmp	r0, #1
1000b7b0:	d100      	bne.n	1000b7b4 <main+0xc>
        XMC_DEBUG("DAVE APPs initialization failed\n");

        while (1U)
        {

        }
1000b7b2:	e7fe      	b.n	1000b7b2 <main+0xa>
    }
    SysTick_Config(SystemCoreClock / TICKS_PER_SECOND);
1000b7b4:	21fa      	movs	r1, #250	; 0xfa
1000b7b6:	4b12      	ldr	r3, [pc, #72]	; (1000b800 <main+0x58>)
1000b7b8:	0089      	lsls	r1, r1, #2
1000b7ba:	6818      	ldr	r0, [r3, #0]
1000b7bc:	f7fe fe4e 	bl	1000a45c <__aeabi_uidiv>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1000b7c0:	4b10      	ldr	r3, [pc, #64]	; (1000b804 <main+0x5c>)
1000b7c2:	3801      	subs	r0, #1
1000b7c4:	4298      	cmp	r0, r3
1000b7c6:	d80d      	bhi.n	1000b7e4 <main+0x3c>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000b7c8:	4a0f      	ldr	r2, [pc, #60]	; (1000b808 <main+0x60>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000b7ca:	4910      	ldr	r1, [pc, #64]	; (1000b80c <main+0x64>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000b7cc:	6050      	str	r0, [r2, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000b7ce:	20c0      	movs	r0, #192	; 0xc0
1000b7d0:	6a0b      	ldr	r3, [r1, #32]
1000b7d2:	0600      	lsls	r0, r0, #24
1000b7d4:	021b      	lsls	r3, r3, #8
1000b7d6:	0a1b      	lsrs	r3, r3, #8
1000b7d8:	4303      	orrs	r3, r0
1000b7da:	620b      	str	r3, [r1, #32]
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1000b7dc:	2300      	movs	r3, #0
1000b7de:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1000b7e0:	3307      	adds	r3, #7
1000b7e2:	6013      	str	r3, [r2, #0]

    do
    {

        if(PAL_STATUS_SUCCESS != pal_logger_init(&cunit_console))
1000b7e4:	480a      	ldr	r0, [pc, #40]	; (1000b810 <main+0x68>)
1000b7e6:	f7f5 fe8f 	bl	10001508 <pal_logger_init>
1000b7ea:	2800      	cmp	r0, #0
1000b7ec:	d106      	bne.n	1000b7fc <main+0x54>
        {
            break;
        }

        pal_os_timer_delay_in_milliseconds(100);
1000b7ee:	3064      	adds	r0, #100	; 0x64
1000b7f0:	f7f5 ff7c 	bl	100016ec <pal_os_timer_delay_in_milliseconds>

        optiga_shell_wait_for_user();
1000b7f4:	f000 fdfa 	bl	1000c3ec <optiga_shell_wait_for_user>
        optiga_shell_begin();
1000b7f8:	f000 fd74 	bl	1000c2e4 <optiga_shell_begin>

    }while (FALSE);

    return return_value;
}
1000b7fc:	2000      	movs	r0, #0
1000b7fe:	bd08      	pop	{r3, pc}
1000b800:	20003ffc 	.word	0x20003ffc
1000b804:	00ffffff 	.word	0x00ffffff
1000b808:	e000e010 	.word	0xe000e010
1000b80c:	e000ed00 	.word	0xe000ed00
1000b810:	20001564 	.word	0x20001564

1000b814 <optiga_util_callback>:
 * Callback when optiga_util_xxxx operation is completed asynchronously
 */
static volatile optiga_lib_status_t optiga_lib_status;
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
	optiga_lib_status = return_status;
1000b814:	4b01      	ldr	r3, [pc, #4]	; (1000b81c <optiga_util_callback+0x8>)
1000b816:	8019      	strh	r1, [r3, #0]
}
1000b818:	4770      	bx	lr
1000b81a:	46c0      	nop			; (mov r8, r8)
1000b81c:	20002fe8 	.word	0x20002fe8

1000b820 <optiga_shell_crypt_rsa_decrypt_and_export>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting generate RSA Key Example");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate RSA 1024 Key Pair and export the public key");
	example_optiga_crypt_rsa_generate_keypair();
}
static void optiga_shell_crypt_rsa_decrypt_and_export()
{
1000b820:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Decrypt and Export Data with RSA Key Example");
1000b822:	4d0f      	ldr	r5, [pc, #60]	; (1000b860 <optiga_shell_crypt_rsa_decrypt_and_export+0x40>)
1000b824:	4c0f      	ldr	r4, [pc, #60]	; (1000b864 <optiga_shell_crypt_rsa_decrypt_and_export+0x44>)
1000b826:	1c29      	adds	r1, r5, #0
1000b828:	1c22      	adds	r2, r4, #0
1000b82a:	480f      	ldr	r0, [pc, #60]	; (1000b868 <optiga_shell_crypt_rsa_decrypt_and_export+0x48>)
1000b82c:	f7f8 ff84 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate RSA 1024 Key Pair and export the public key");
1000b830:	1c29      	adds	r1, r5, #0
1000b832:	1c22      	adds	r2, r4, #0
1000b834:	480d      	ldr	r0, [pc, #52]	; (1000b86c <optiga_shell_crypt_rsa_decrypt_and_export+0x4c>)
1000b836:	f7f8 ff7f 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Encrypt a message with RSAES PKCS#1 Ver1.5 Scheme");
1000b83a:	1c29      	adds	r1, r5, #0
1000b83c:	1c22      	adds	r2, r4, #0
1000b83e:	480c      	ldr	r0, [pc, #48]	; (1000b870 <optiga_shell_crypt_rsa_decrypt_and_export+0x50>)
1000b840:	f7f8 ff7a 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
1000b844:	1c29      	adds	r1, r5, #0
1000b846:	1c22      	adds	r2, r4, #0
1000b848:	480a      	ldr	r0, [pc, #40]	; (1000b874 <optiga_shell_crypt_rsa_decrypt_and_export+0x54>)
1000b84a:	f7f8 ff75 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Decrypt the message with RSAES PKCS#1 Ver1.5 Scheme and export it");
1000b84e:	1c29      	adds	r1, r5, #0
1000b850:	4809      	ldr	r0, [pc, #36]	; (1000b878 <optiga_shell_crypt_rsa_decrypt_and_export+0x58>)
1000b852:	1c22      	adds	r2, r4, #0
1000b854:	f7f8 ff70 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_rsa_decrypt_and_export();
1000b858:	f7fd fa6e 	bl	10008d38 <example_optiga_crypt_rsa_decrypt_and_export>
}
1000b85c:	bd38      	pop	{r3, r4, r5, pc}
1000b85e:	46c0      	nop			; (mov r8, r8)
1000b860:	10010ac6 	.word	0x10010ac6
1000b864:	10010ad9 	.word	0x10010ad9
1000b868:	10010a90 	.word	0x10010a90
1000b86c:	10010adf 	.word	0x10010adf
1000b870:	10010b1c 	.word	0x10010b1c
1000b874:	10010b56 	.word	0x10010b56
1000b878:	10010b7e 	.word	0x10010b7e

1000b87c <optiga_shell_crypt_rsa_decrypt_and_store>:
static void optiga_shell_crypt_rsa_decrypt_and_store()
{
1000b87c:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Decrypt and Store Data on the chip with RSA Key Example");
1000b87e:	4d11      	ldr	r5, [pc, #68]	; (1000b8c4 <optiga_shell_crypt_rsa_decrypt_and_store+0x48>)
1000b880:	4c11      	ldr	r4, [pc, #68]	; (1000b8c8 <optiga_shell_crypt_rsa_decrypt_and_store+0x4c>)
1000b882:	1c29      	adds	r1, r5, #0
1000b884:	1c22      	adds	r2, r4, #0
1000b886:	4811      	ldr	r0, [pc, #68]	; (1000b8cc <optiga_shell_crypt_rsa_decrypt_and_store+0x50>)
1000b888:	f7f8 ff56 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate RSA 1024 Key Pair and export the public key");
1000b88c:	1c29      	adds	r1, r5, #0
1000b88e:	1c22      	adds	r2, r4, #0
1000b890:	480f      	ldr	r0, [pc, #60]	; (1000b8d0 <optiga_shell_crypt_rsa_decrypt_and_store+0x54>)
1000b892:	f7f8 ff51 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Generate 70 bytes RSA Pre master secret which is stored in acquired session OID");
1000b896:	1c29      	adds	r1, r5, #0
1000b898:	1c22      	adds	r2, r4, #0
1000b89a:	480e      	ldr	r0, [pc, #56]	; (1000b8d4 <optiga_shell_crypt_rsa_decrypt_and_store+0x58>)
1000b89c:	f7f8 ff4c 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
1000b8a0:	1c29      	adds	r1, r5, #0
1000b8a2:	1c22      	adds	r2, r4, #0
1000b8a4:	480c      	ldr	r0, [pc, #48]	; (1000b8d8 <optiga_shell_crypt_rsa_decrypt_and_store+0x5c>)
1000b8a6:	f7f8 ff47 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Encrypt Session Data with RSA Public Key");
1000b8aa:	1c29      	adds	r1, r5, #0
1000b8ac:	1c22      	adds	r2, r4, #0
1000b8ae:	480b      	ldr	r0, [pc, #44]	; (1000b8dc <optiga_shell_crypt_rsa_decrypt_and_store+0x60>)
1000b8b0:	f7f8 ff42 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("5 Step: Decrypt the message with RSAES PKCS#1 Ver1.5 Scheme and store it on chip");
1000b8b4:	1c29      	adds	r1, r5, #0
1000b8b6:	480a      	ldr	r0, [pc, #40]	; (1000b8e0 <optiga_shell_crypt_rsa_decrypt_and_store+0x64>)
1000b8b8:	1c22      	adds	r2, r4, #0
1000b8ba:	f7f8 ff3d 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_rsa_decrypt_and_store();
1000b8be:	f7fd fae3 	bl	10008e88 <example_optiga_crypt_rsa_decrypt_and_store>
}
1000b8c2:	bd38      	pop	{r3, r4, r5, pc}
1000b8c4:	10010ac6 	.word	0x10010ac6
1000b8c8:	10010ad9 	.word	0x10010ad9
1000b8cc:	10010bc8 	.word	0x10010bc8
1000b8d0:	10010adf 	.word	0x10010adf
1000b8d4:	10010c09 	.word	0x10010c09
1000b8d8:	10010b56 	.word	0x10010b56
1000b8dc:	10010c61 	.word	0x10010c61
1000b8e0:	10010c92 	.word	0x10010c92

1000b8e4 <optiga_shell_crypt_rsa_encrypt_session>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting Encrypt Data with RSA Key Example");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Encrypt a message with RSAES PKCS#1 Ver1.5 Scheme");
	example_optiga_crypt_rsa_encrypt_message();
}
static void optiga_shell_crypt_rsa_encrypt_session()
{
1000b8e4:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Encrypt Data in Session Object on chip with RSA Key Example");
1000b8e6:	4d07      	ldr	r5, [pc, #28]	; (1000b904 <optiga_shell_crypt_rsa_encrypt_session+0x20>)
1000b8e8:	4c07      	ldr	r4, [pc, #28]	; (1000b908 <optiga_shell_crypt_rsa_encrypt_session+0x24>)
1000b8ea:	1c29      	adds	r1, r5, #0
1000b8ec:	1c22      	adds	r2, r4, #0
1000b8ee:	4807      	ldr	r0, [pc, #28]	; (1000b90c <optiga_shell_crypt_rsa_encrypt_session+0x28>)
1000b8f0:	f7f8 ff22 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Encrypt a message with RSAES PKCS#1 Ver1.5 Scheme stored on chip in Session Object");
1000b8f4:	1c29      	adds	r1, r5, #0
1000b8f6:	4806      	ldr	r0, [pc, #24]	; (1000b910 <optiga_shell_crypt_rsa_encrypt_session+0x2c>)
1000b8f8:	1c22      	adds	r2, r4, #0
1000b8fa:	f7f8 ff1d 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_rsa_encrypt_session();
1000b8fe:	f7fd fbe5 	bl	100090cc <example_optiga_crypt_rsa_encrypt_session>
}
1000b902:	bd38      	pop	{r3, r4, r5, pc}
1000b904:	10010ac6 	.word	0x10010ac6
1000b908:	10010ad9 	.word	0x10010ad9
1000b90c:	10010ce3 	.word	0x10010ce3
1000b910:	10010d28 	.word	0x10010d28

1000b914 <optiga_shell_crypt_rsa_encrypt_message>:
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Encrypt Session Data with RSA Public Key");
	OPTIGA_SHELL_LOG_MESSAGE("5 Step: Decrypt the message with RSAES PKCS#1 Ver1.5 Scheme and store it on chip");
	example_optiga_crypt_rsa_decrypt_and_store();
}
static void optiga_shell_crypt_rsa_encrypt_message()
{
1000b914:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Encrypt Data with RSA Key Example");
1000b916:	4d07      	ldr	r5, [pc, #28]	; (1000b934 <optiga_shell_crypt_rsa_encrypt_message+0x20>)
1000b918:	4c07      	ldr	r4, [pc, #28]	; (1000b938 <optiga_shell_crypt_rsa_encrypt_message+0x24>)
1000b91a:	1c29      	adds	r1, r5, #0
1000b91c:	1c22      	adds	r2, r4, #0
1000b91e:	4807      	ldr	r0, [pc, #28]	; (1000b93c <optiga_shell_crypt_rsa_encrypt_message+0x28>)
1000b920:	f7f8 ff0a 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Encrypt a message with RSAES PKCS#1 Ver1.5 Scheme");
1000b924:	1c29      	adds	r1, r5, #0
1000b926:	4806      	ldr	r0, [pc, #24]	; (1000b940 <optiga_shell_crypt_rsa_encrypt_message+0x2c>)
1000b928:	1c22      	adds	r2, r4, #0
1000b92a:	f7f8 ff05 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_rsa_encrypt_message();
1000b92e:	f7fd fb67 	bl	10009000 <example_optiga_crypt_rsa_encrypt_message>
}
1000b932:	bd38      	pop	{r3, r4, r5, pc}
1000b934:	10010ac6 	.word	0x10010ac6
1000b938:	10010ad9 	.word	0x10010ad9
1000b93c:	10010d83 	.word	0x10010d83
1000b940:	10010dae 	.word	0x10010dae

1000b944 <optiga_shell_crypt_rsa_verify>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for PKCS#1 Ver1.5 SHA256 Signature scheme (RSA)");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Sign prepared Data and export the signature");
	example_optiga_crypt_rsa_sign();
}
static void optiga_shell_crypt_rsa_verify()
{
1000b944:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for PKCS#1 Ver1.5 SHA256 Signature scheme (RSA)");
1000b946:	4d07      	ldr	r5, [pc, #28]	; (1000b964 <optiga_shell_crypt_rsa_verify+0x20>)
1000b948:	4c07      	ldr	r4, [pc, #28]	; (1000b968 <optiga_shell_crypt_rsa_verify+0x24>)
1000b94a:	1c29      	adds	r1, r5, #0
1000b94c:	1c22      	adds	r2, r4, #0
1000b94e:	4807      	ldr	r0, [pc, #28]	; (1000b96c <optiga_shell_crypt_rsa_verify+0x28>)
1000b950:	f7f8 fef2 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Verify prepared signature, with prepared public key and digest");
1000b954:	1c29      	adds	r1, r5, #0
1000b956:	4806      	ldr	r0, [pc, #24]	; (1000b970 <optiga_shell_crypt_rsa_verify+0x2c>)
1000b958:	1c22      	adds	r2, r4, #0
1000b95a:	f7f8 feed 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_rsa_verify();
1000b95e:	f7fd fd0f 	bl	10009380 <example_optiga_crypt_rsa_verify>
}
1000b962:	bd38      	pop	{r3, r4, r5, pc}
1000b964:	10010ac6 	.word	0x10010ac6
1000b968:	10010ad9 	.word	0x10010ad9
1000b96c:	10010de8 	.word	0x10010de8
1000b970:	10010e31 	.word	0x10010e31

1000b974 <optiga_shell_crypt_rsa_sign>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting verification example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Verify prepared signature, with prepared public key and digest");
	example_optiga_crypt_ecdsa_verify();
}
static void optiga_shell_crypt_rsa_sign()
{
1000b974:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for PKCS#1 Ver1.5 SHA256 Signature scheme (RSA)");
1000b976:	4d07      	ldr	r5, [pc, #28]	; (1000b994 <optiga_shell_crypt_rsa_sign+0x20>)
1000b978:	4c07      	ldr	r4, [pc, #28]	; (1000b998 <optiga_shell_crypt_rsa_sign+0x24>)
1000b97a:	1c29      	adds	r1, r5, #0
1000b97c:	1c22      	adds	r2, r4, #0
1000b97e:	4807      	ldr	r0, [pc, #28]	; (1000b99c <optiga_shell_crypt_rsa_sign+0x28>)
1000b980:	f7f8 feda 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Sign prepared Data and export the signature");
1000b984:	1c29      	adds	r1, r5, #0
1000b986:	4806      	ldr	r0, [pc, #24]	; (1000b9a0 <optiga_shell_crypt_rsa_sign+0x2c>)
1000b988:	1c22      	adds	r2, r4, #0
1000b98a:	f7f8 fed5 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_rsa_sign();
1000b98e:	f7fd fc99 	bl	100092c4 <example_optiga_crypt_rsa_sign>
}
1000b992:	bd38      	pop	{r3, r4, r5, pc}
1000b994:	10010ac6 	.word	0x10010ac6
1000b998:	10010ad9 	.word	0x10010ad9
1000b99c:	10010de8 	.word	0x10010de8
1000b9a0:	10010e78 	.word	0x10010e78

1000b9a4 <optiga_shell_crypt_generate_keypair>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for PKCS#1 Ver1.5 SHA256 Signature scheme (RSA)");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Verify prepared signature, with prepared public key and digest");
	example_optiga_crypt_rsa_verify();
}
static void optiga_shell_crypt_generate_keypair()
{
1000b9a4:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting generate RSA Key Example");
1000b9a6:	4d07      	ldr	r5, [pc, #28]	; (1000b9c4 <optiga_shell_crypt_generate_keypair+0x20>)
1000b9a8:	4c07      	ldr	r4, [pc, #28]	; (1000b9c8 <optiga_shell_crypt_generate_keypair+0x24>)
1000b9aa:	1c29      	adds	r1, r5, #0
1000b9ac:	1c22      	adds	r2, r4, #0
1000b9ae:	4807      	ldr	r0, [pc, #28]	; (1000b9cc <optiga_shell_crypt_generate_keypair+0x28>)
1000b9b0:	f7f8 fec2 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate RSA 1024 Key Pair and export the public key");
1000b9b4:	1c29      	adds	r1, r5, #0
1000b9b6:	4806      	ldr	r0, [pc, #24]	; (1000b9d0 <optiga_shell_crypt_generate_keypair+0x2c>)
1000b9b8:	1c22      	adds	r2, r4, #0
1000b9ba:	f7f8 febd 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_rsa_generate_keypair();
1000b9be:	f7fd fc25 	bl	1000920c <example_optiga_crypt_rsa_generate_keypair>
}
1000b9c2:	bd38      	pop	{r3, r4, r5, pc}
1000b9c4:	10010ac6 	.word	0x10010ac6
1000b9c8:	10010ad9 	.word	0x10010ad9
1000b9cc:	10010eac 	.word	0x10010eac
1000b9d0:	10010adf 	.word	0x10010adf

1000b9d4 <optiga_shell_crypt_ecdh>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting generate ECC Key Example");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate ECC NIST P-256 Key Pair and export the public key");
	example_optiga_crypt_ecc_generate_keypair();
}
static void optiga_shell_crypt_ecdh()
{
1000b9d4:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Elliptic-curve Diffie–Hellman (ECDH) Key Agreement Protocol Example");
1000b9d6:	4d0f      	ldr	r5, [pc, #60]	; (1000ba14 <optiga_shell_crypt_ecdh+0x40>)
1000b9d8:	4c0f      	ldr	r4, [pc, #60]	; (1000ba18 <optiga_shell_crypt_ecdh+0x44>)
1000b9da:	1c29      	adds	r1, r5, #0
1000b9dc:	1c22      	adds	r2, r4, #0
1000b9de:	480f      	ldr	r0, [pc, #60]	; (1000ba1c <optiga_shell_crypt_ecdh+0x48>)
1000b9e0:	f7f8 feaa 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Select Protected I2C Connection");
1000b9e4:	1c29      	adds	r1, r5, #0
1000b9e6:	1c22      	adds	r2, r4, #0
1000b9e8:	480d      	ldr	r0, [pc, #52]	; (1000ba20 <optiga_shell_crypt_ecdh+0x4c>)
1000b9ea:	f7f8 fea5 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Generate new ECC NIST P-256 Key Pair");
1000b9ee:	1c29      	adds	r1, r5, #0
1000b9f0:	1c22      	adds	r2, r4, #0
1000b9f2:	480c      	ldr	r0, [pc, #48]	; (1000ba24 <optiga_shell_crypt_ecdh+0x50>)
1000b9f4:	f7f8 fea0 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
1000b9f8:	1c29      	adds	r1, r5, #0
1000b9fa:	1c22      	adds	r2, r4, #0
1000b9fc:	480a      	ldr	r0, [pc, #40]	; (1000ba28 <optiga_shell_crypt_ecdh+0x54>)
1000b9fe:	f7f8 fe9b 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Generate Shared Secret and export it");
1000ba02:	1c29      	adds	r1, r5, #0
1000ba04:	4809      	ldr	r0, [pc, #36]	; (1000ba2c <optiga_shell_crypt_ecdh+0x58>)
1000ba06:	1c22      	adds	r2, r4, #0
1000ba08:	f7f8 fe96 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_ecdh();
1000ba0c:	f7fc ff82 	bl	10008914 <example_optiga_crypt_ecdh>
}
1000ba10:	bd38      	pop	{r3, r4, r5, pc}
1000ba12:	46c0      	nop			; (mov r8, r8)
1000ba14:	10010ac6 	.word	0x10010ac6
1000ba18:	10010ad9 	.word	0x10010ad9
1000ba1c:	10010ece 	.word	0x10010ece
1000ba20:	10010f1d 	.word	0x10010f1d
1000ba24:	10010f45 	.word	0x10010f45
1000ba28:	10010b56 	.word	0x10010b56
1000ba2c:	10010f72 	.word	0x10010f72

1000ba30 <optiga_shell_crypt_ecdsa_verify>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Sign prepared Data and export the signature");
	example_optiga_crypt_ecdsa_sign();
}
static void optiga_shell_crypt_ecdsa_verify()
{
1000ba30:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting verification example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
1000ba32:	4d07      	ldr	r5, [pc, #28]	; (1000ba50 <optiga_shell_crypt_ecdsa_verify+0x20>)
1000ba34:	4c07      	ldr	r4, [pc, #28]	; (1000ba54 <optiga_shell_crypt_ecdsa_verify+0x24>)
1000ba36:	1c29      	adds	r1, r5, #0
1000ba38:	1c22      	adds	r2, r4, #0
1000ba3a:	4807      	ldr	r0, [pc, #28]	; (1000ba58 <optiga_shell_crypt_ecdsa_verify+0x28>)
1000ba3c:	f7f8 fe7c 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Verify prepared signature, with prepared public key and digest");
1000ba40:	1c29      	adds	r1, r5, #0
1000ba42:	4806      	ldr	r0, [pc, #24]	; (1000ba5c <optiga_shell_crypt_ecdsa_verify+0x2c>)
1000ba44:	1c22      	adds	r2, r4, #0
1000ba46:	f7f8 fe77 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_ecdsa_verify();
1000ba4a:	f7fd f841 	bl	10008ad0 <example_optiga_crypt_ecdsa_verify>
}
1000ba4e:	bd38      	pop	{r3, r4, r5, pc}
1000ba50:	10010ac6 	.word	0x10010ac6
1000ba54:	10010ad9 	.word	0x10010ad9
1000ba58:	10010f9f 	.word	0x10010f9f
1000ba5c:	10010e31 	.word	0x10010e31

1000ba60 <optiga_shell_crypt_ecdsa_sign>:
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Generate Shared Secret and export it");
	example_optiga_crypt_ecdh();
}
static void optiga_shell_crypt_ecdsa_sign()
{
1000ba60:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
1000ba62:	4d07      	ldr	r5, [pc, #28]	; (1000ba80 <optiga_shell_crypt_ecdsa_sign+0x20>)
1000ba64:	4c07      	ldr	r4, [pc, #28]	; (1000ba84 <optiga_shell_crypt_ecdsa_sign+0x24>)
1000ba66:	1c29      	adds	r1, r5, #0
1000ba68:	1c22      	adds	r2, r4, #0
1000ba6a:	4807      	ldr	r0, [pc, #28]	; (1000ba88 <optiga_shell_crypt_ecdsa_sign+0x28>)
1000ba6c:	f7f8 fe64 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Sign prepared Data and export the signature");
1000ba70:	1c29      	adds	r1, r5, #0
1000ba72:	4806      	ldr	r0, [pc, #24]	; (1000ba8c <optiga_shell_crypt_ecdsa_sign+0x2c>)
1000ba74:	1c22      	adds	r2, r4, #0
1000ba76:	f7f8 fe5f 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_ecdsa_sign();
1000ba7a:	f7fc ffcf 	bl	10008a1c <example_optiga_crypt_ecdsa_sign>
}
1000ba7e:	bd38      	pop	{r3, r4, r5, pc}
1000ba80:	10010ac6 	.word	0x10010ac6
1000ba84:	10010ad9 	.word	0x10010ad9
1000ba88:	10010ff4 	.word	0x10010ff4
1000ba8c:	10010e78 	.word	0x10010e78

1000ba90 <optiga_shell_crypt_ecc_generate_keypair>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting Generate Random Example");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate 32 bytes random");
	example_optiga_crypt_random();
}
static void optiga_shell_crypt_ecc_generate_keypair()
{
1000ba90:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting generate ECC Key Example");
1000ba92:	4d07      	ldr	r5, [pc, #28]	; (1000bab0 <optiga_shell_crypt_ecc_generate_keypair+0x20>)
1000ba94:	4c07      	ldr	r4, [pc, #28]	; (1000bab4 <optiga_shell_crypt_ecc_generate_keypair+0x24>)
1000ba96:	1c29      	adds	r1, r5, #0
1000ba98:	1c22      	adds	r2, r4, #0
1000ba9a:	4807      	ldr	r0, [pc, #28]	; (1000bab8 <optiga_shell_crypt_ecc_generate_keypair+0x28>)
1000ba9c:	f7f8 fe4c 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate ECC NIST P-256 Key Pair and export the public key");
1000baa0:	1c29      	adds	r1, r5, #0
1000baa2:	4806      	ldr	r0, [pc, #24]	; (1000babc <optiga_shell_crypt_ecc_generate_keypair+0x2c>)
1000baa4:	1c22      	adds	r2, r4, #0
1000baa6:	f7f8 fe47 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_ecc_generate_keypair();
1000baaa:	f7fc fed7 	bl	1000885c <example_optiga_crypt_ecc_generate_keypair>
}
1000baae:	bd38      	pop	{r3, r4, r5, pc}
1000bab0:	10010ac6 	.word	0x10010ac6
1000bab4:	10010ad9 	.word	0x10010ad9
1000bab8:	10011044 	.word	0x10011044
1000babc:	10011066 	.word	0x10011066

1000bac0 <optiga_shell_crypt_random>:
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Generate Shared Secret using the Shared Secret from the Arbitrary Data Object");
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Restore Metadata of the Arbitrary Data Object");
	example_optiga_crypt_tls_prf_sha256();
}
static void optiga_shell_crypt_random()
{
1000bac0:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Generate Random Example");
1000bac2:	4d07      	ldr	r5, [pc, #28]	; (1000bae0 <optiga_shell_crypt_random+0x20>)
1000bac4:	4c07      	ldr	r4, [pc, #28]	; (1000bae4 <optiga_shell_crypt_random+0x24>)
1000bac6:	1c29      	adds	r1, r5, #0
1000bac8:	1c22      	adds	r2, r4, #0
1000baca:	4807      	ldr	r0, [pc, #28]	; (1000bae8 <optiga_shell_crypt_random+0x28>)
1000bacc:	f7f8 fe34 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate 32 bytes random");
1000bad0:	1c29      	adds	r1, r5, #0
1000bad2:	4806      	ldr	r0, [pc, #24]	; (1000baec <optiga_shell_crypt_random+0x2c>)
1000bad4:	1c22      	adds	r2, r4, #0
1000bad6:	f7f8 fe2f 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_random();
1000bada:	f7fd f8d7 	bl	10008c8c <example_optiga_crypt_random>
}
1000bade:	bd38      	pop	{r3, r4, r5, pc}
1000bae0:	10010ac6 	.word	0x10010ac6
1000bae4:	10010ad9 	.word	0x10010ad9
1000bae8:	100110a9 	.word	0x100110a9
1000baec:	100110ca 	.word	0x100110ca

1000baf0 <optiga_shell_crypt_tls_prf_sha256>:
	OPTIGA_SHELL_LOG_MESSAGE("Starting Hash Example");
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Hash given data with Start, Update and Finalize calls");
	example_optiga_crypt_hash();
}
static void optiga_shell_crypt_tls_prf_sha256()
{
1000baf0:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting TLS PRF SHA256 (Key Deriviation) Example");
1000baf2:	4d0f      	ldr	r5, [pc, #60]	; (1000bb30 <optiga_shell_crypt_tls_prf_sha256+0x40>)
1000baf4:	4c0f      	ldr	r4, [pc, #60]	; (1000bb34 <optiga_shell_crypt_tls_prf_sha256+0x44>)
1000baf6:	1c29      	adds	r1, r5, #0
1000baf8:	1c22      	adds	r2, r4, #0
1000bafa:	480f      	ldr	r0, [pc, #60]	; (1000bb38 <optiga_shell_crypt_tls_prf_sha256+0x48>)
1000bafc:	f7f8 fe1c 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write prepared Shared Secret into an Arbitrary Data Object");
1000bb00:	1c29      	adds	r1, r5, #0
1000bb02:	1c22      	adds	r2, r4, #0
1000bb04:	480d      	ldr	r0, [pc, #52]	; (1000bb3c <optiga_shell_crypt_tls_prf_sha256+0x4c>)
1000bb06:	f7f8 fe17 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Update Metadata of the Object to use the Arbitrary Data Object only via Shielded I2C Connection");
1000bb0a:	1c29      	adds	r1, r5, #0
1000bb0c:	1c22      	adds	r2, r4, #0
1000bb0e:	480c      	ldr	r0, [pc, #48]	; (1000bb40 <optiga_shell_crypt_tls_prf_sha256+0x50>)
1000bb10:	f7f8 fe12 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Generate Shared Secret using the Shared Secret from the Arbitrary Data Object");
1000bb14:	1c29      	adds	r1, r5, #0
1000bb16:	1c22      	adds	r2, r4, #0
1000bb18:	480a      	ldr	r0, [pc, #40]	; (1000bb44 <optiga_shell_crypt_tls_prf_sha256+0x54>)
1000bb1a:	f7f8 fe0d 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Restore Metadata of the Arbitrary Data Object");
1000bb1e:	1c29      	adds	r1, r5, #0
1000bb20:	4809      	ldr	r0, [pc, #36]	; (1000bb48 <optiga_shell_crypt_tls_prf_sha256+0x58>)
1000bb22:	1c22      	adds	r2, r4, #0
1000bb24:	f7f8 fe08 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_tls_prf_sha256();
1000bb28:	f7fd fc8a 	bl	10009440 <example_optiga_crypt_tls_prf_sha256>
}
1000bb2c:	bd38      	pop	{r3, r4, r5, pc}
1000bb2e:	46c0      	nop			; (mov r8, r8)
1000bb30:	10010ac6 	.word	0x10010ac6
1000bb34:	10010ad9 	.word	0x10010ad9
1000bb38:	100110eb 	.word	0x100110eb
1000bb3c:	1001111d 	.word	0x1001111d
1000bb40:	10011160 	.word	0x10011160
1000bb44:	100111c8 	.word	0x100111c8
1000bb48:	1001121e 	.word	0x1001121e

1000bb4c <optiga_shell_crypt_hash>:
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write Trust Anchor used by the Trust M to verify the update");
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Start Protected update with prepared manifest and fragments");
	example_optiga_util_protected_update();
}
static void optiga_shell_crypt_hash()
{
1000bb4c:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Hash Example");
1000bb4e:	4d07      	ldr	r5, [pc, #28]	; (1000bb6c <optiga_shell_crypt_hash+0x20>)
1000bb50:	4c07      	ldr	r4, [pc, #28]	; (1000bb70 <optiga_shell_crypt_hash+0x24>)
1000bb52:	1c29      	adds	r1, r5, #0
1000bb54:	1c22      	adds	r2, r4, #0
1000bb56:	4807      	ldr	r0, [pc, #28]	; (1000bb74 <optiga_shell_crypt_hash+0x28>)
1000bb58:	f7f8 fdee 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Hash given data with Start, Update and Finalize calls");
1000bb5c:	1c29      	adds	r1, r5, #0
1000bb5e:	4806      	ldr	r0, [pc, #24]	; (1000bb78 <optiga_shell_crypt_hash+0x2c>)
1000bb60:	1c22      	adds	r2, r4, #0
1000bb62:	f7f8 fde9 	bl	10004738 <optiga_lib_print_message>
	example_optiga_crypt_hash();
1000bb66:	f7fd f811 	bl	10008b8c <example_optiga_crypt_hash>
}
1000bb6a:	bd38      	pop	{r3, r4, r5, pc}
1000bb6c:	10010ac6 	.word	0x10010ac6
1000bb70:	10010ad9 	.word	0x10010ad9
1000bb74:	10011254 	.word	0x10011254
1000bb78:	1001126a 	.word	0x1001126a

1000bb7c <optiga_shell_util_protected_update>:
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Initial Counter Value");
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Increase Counter Object");
	example_optiga_util_update_count();
}
static void optiga_shell_util_protected_update()
{
1000bb7c:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Protected Update Example");
1000bb7e:	4d0c      	ldr	r5, [pc, #48]	; (1000bbb0 <optiga_shell_util_protected_update+0x34>)
1000bb80:	4c0c      	ldr	r4, [pc, #48]	; (1000bbb4 <optiga_shell_util_protected_update+0x38>)
1000bb82:	1c29      	adds	r1, r5, #0
1000bb84:	1c22      	adds	r2, r4, #0
1000bb86:	480c      	ldr	r0, [pc, #48]	; (1000bbb8 <optiga_shell_util_protected_update+0x3c>)
1000bb88:	f7f8 fdd6 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Update Metadata for the Object to be updated and the Trust Anchor used to verify the update");
1000bb8c:	1c29      	adds	r1, r5, #0
1000bb8e:	1c22      	adds	r2, r4, #0
1000bb90:	480a      	ldr	r0, [pc, #40]	; (1000bbbc <optiga_shell_util_protected_update+0x40>)
1000bb92:	f7f8 fdd1 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write Trust Anchor used by the Trust M to verify the update");
1000bb96:	1c29      	adds	r1, r5, #0
1000bb98:	1c22      	adds	r2, r4, #0
1000bb9a:	4809      	ldr	r0, [pc, #36]	; (1000bbc0 <optiga_shell_util_protected_update+0x44>)
1000bb9c:	f7f8 fdcc 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Start Protected update with prepared manifest and fragments");
1000bba0:	1c29      	adds	r1, r5, #0
1000bba2:	4808      	ldr	r0, [pc, #32]	; (1000bbc4 <optiga_shell_util_protected_update+0x48>)
1000bba4:	1c22      	adds	r2, r4, #0
1000bba6:	f7f8 fdc7 	bl	10004738 <optiga_lib_print_message>
	example_optiga_util_protected_update();
1000bbaa:	f7fd fe35 	bl	10009818 <example_optiga_util_protected_update>
}
1000bbae:	bd38      	pop	{r3, r4, r5, pc}
1000bbb0:	10010ac6 	.word	0x10010ac6
1000bbb4:	10010ad9 	.word	0x10010ad9
1000bbb8:	100112a8 	.word	0x100112a8
1000bbbc:	100112ca 	.word	0x100112ca
1000bbc0:	1001132e 	.word	0x1001132e
1000bbc4:	10011372 	.word	0x10011372

1000bbc8 <optiga_shell_util_update_count>:
	OPTIGA_SHELL_LOG_MESSAGE("10 Step: Close Applicaiton on the chip");
	OPTIGA_SHELL_LOG_MESSAGE("Important note: To continue with other examples you need to call the init parameter once again");
	example_optiga_util_hibernate_restore();
}
static void optiga_shell_util_update_count()
{
1000bbc8:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Update Counter Example");
1000bbca:	4d0a      	ldr	r5, [pc, #40]	; (1000bbf4 <optiga_shell_util_update_count+0x2c>)
1000bbcc:	4c0a      	ldr	r4, [pc, #40]	; (1000bbf8 <optiga_shell_util_update_count+0x30>)
1000bbce:	1c29      	adds	r1, r5, #0
1000bbd0:	1c22      	adds	r2, r4, #0
1000bbd2:	480a      	ldr	r0, [pc, #40]	; (1000bbfc <optiga_shell_util_update_count+0x34>)
1000bbd4:	f7f8 fdb0 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Initial Counter Value");
1000bbd8:	1c29      	adds	r1, r5, #0
1000bbda:	1c22      	adds	r2, r4, #0
1000bbdc:	4808      	ldr	r0, [pc, #32]	; (1000bc00 <optiga_shell_util_update_count+0x38>)
1000bbde:	f7f8 fdab 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Increase Counter Object");
1000bbe2:	1c29      	adds	r1, r5, #0
1000bbe4:	4807      	ldr	r0, [pc, #28]	; (1000bc04 <optiga_shell_util_update_count+0x3c>)
1000bbe6:	1c22      	adds	r2, r4, #0
1000bbe8:	f7f8 fda6 	bl	10004738 <optiga_lib_print_message>
	example_optiga_util_update_count();
1000bbec:	f7fd ff3a 	bl	10009a64 <example_optiga_util_update_count>
}
1000bbf0:	bd38      	pop	{r3, r4, r5, pc}
1000bbf2:	46c0      	nop			; (mov r8, r8)
1000bbf4:	10010ac6 	.word	0x10010ac6
1000bbf8:	10010ad9 	.word	0x10010ad9
1000bbfc:	100113b6 	.word	0x100113b6
1000bc00:	100113d6 	.word	0x100113d6
1000bc04:	100113fa 	.word	0x100113fa

1000bc08 <optiga_shell_util_hibernate_restore>:
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Write new Binding Secret");
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Store new Binding Secret on the Host");
	example_pair_host_and_optiga_using_pre_shared_secret();
}
static void optiga_shell_util_hibernate_restore()
{
1000bc08:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Hibernate and Restore Example");
1000bc0a:	4d20      	ldr	r5, [pc, #128]	; (1000bc8c <optiga_shell_util_hibernate_restore+0x84>)
1000bc0c:	4c20      	ldr	r4, [pc, #128]	; (1000bc90 <optiga_shell_util_hibernate_restore+0x88>)
1000bc0e:	1c29      	adds	r1, r5, #0
1000bc10:	1c22      	adds	r2, r4, #0
1000bc12:	4820      	ldr	r0, [pc, #128]	; (1000bc94 <optiga_shell_util_hibernate_restore+0x8c>)
1000bc14:	f7f8 fd90 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Open Application on the security chip");
1000bc18:	1c29      	adds	r1, r5, #0
1000bc1a:	1c22      	adds	r2, r4, #0
1000bc1c:	481e      	ldr	r0, [pc, #120]	; (1000bc98 <optiga_shell_util_hibernate_restore+0x90>)
1000bc1e:	f7f8 fd8b 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Pair the host and the security chip");
1000bc22:	1c29      	adds	r1, r5, #0
1000bc24:	1c22      	adds	r2, r4, #0
1000bc26:	481d      	ldr	r0, [pc, #116]	; (1000bc9c <optiga_shell_util_hibernate_restore+0x94>)
1000bc28:	f7f8 fd86 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
1000bc2c:	1c29      	adds	r1, r5, #0
1000bc2e:	1c22      	adds	r2, r4, #0
1000bc30:	481b      	ldr	r0, [pc, #108]	; (1000bca0 <optiga_shell_util_hibernate_restore+0x98>)
1000bc32:	f7f8 fd81 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Generate ECC NIST P-256 Key pair and store it in Session Data Object, export the public key");
1000bc36:	1c29      	adds	r1, r5, #0
1000bc38:	1c22      	adds	r2, r4, #0
1000bc3a:	481a      	ldr	r0, [pc, #104]	; (1000bca4 <optiga_shell_util_hibernate_restore+0x9c>)
1000bc3c:	f7f8 fd7c 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("5 Step: Check Security Event Counter and wait till it reaches 0");
1000bc40:	1c29      	adds	r1, r5, #0
1000bc42:	1c22      	adds	r2, r4, #0
1000bc44:	4818      	ldr	r0, [pc, #96]	; (1000bca8 <optiga_shell_util_hibernate_restore+0xa0>)
1000bc46:	f7f8 fd77 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("6 Step: Perform Close application with Hibernate parameter set to True");
1000bc4a:	1c29      	adds	r1, r5, #0
1000bc4c:	1c22      	adds	r2, r4, #0
1000bc4e:	4817      	ldr	r0, [pc, #92]	; (1000bcac <optiga_shell_util_hibernate_restore+0xa4>)
1000bc50:	f7f8 fd72 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("7 Step: Open Application on the security chip");
1000bc54:	1c29      	adds	r1, r5, #0
1000bc56:	1c22      	adds	r2, r4, #0
1000bc58:	4815      	ldr	r0, [pc, #84]	; (1000bcb0 <optiga_shell_util_hibernate_restore+0xa8>)
1000bc5a:	f7f8 fd6d 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("8 Step: Sign prepared data with private key stored in Session Data Object");
1000bc5e:	1c29      	adds	r1, r5, #0
1000bc60:	1c22      	adds	r2, r4, #0
1000bc62:	4814      	ldr	r0, [pc, #80]	; (1000bcb4 <optiga_shell_util_hibernate_restore+0xac>)
1000bc64:	f7f8 fd68 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("9 Step: Verify the signature with the public key generated previously");
1000bc68:	1c29      	adds	r1, r5, #0
1000bc6a:	1c22      	adds	r2, r4, #0
1000bc6c:	4812      	ldr	r0, [pc, #72]	; (1000bcb8 <optiga_shell_util_hibernate_restore+0xb0>)
1000bc6e:	f7f8 fd63 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("10 Step: Close Applicaiton on the chip");
1000bc72:	1c29      	adds	r1, r5, #0
1000bc74:	1c22      	adds	r2, r4, #0
1000bc76:	4811      	ldr	r0, [pc, #68]	; (1000bcbc <optiga_shell_util_hibernate_restore+0xb4>)
1000bc78:	f7f8 fd5e 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("Important note: To continue with other examples you need to call the init parameter once again");
1000bc7c:	1c29      	adds	r1, r5, #0
1000bc7e:	4810      	ldr	r0, [pc, #64]	; (1000bcc0 <optiga_shell_util_hibernate_restore+0xb8>)
1000bc80:	1c22      	adds	r2, r4, #0
1000bc82:	f7f8 fd59 	bl	10004738 <optiga_lib_print_message>
	example_optiga_util_hibernate_restore();
1000bc86:	f7fd fcaf 	bl	100095e8 <example_optiga_util_hibernate_restore>
}
1000bc8a:	bd38      	pop	{r3, r4, r5, pc}
1000bc8c:	10010ac6 	.word	0x10010ac6
1000bc90:	10010ad9 	.word	0x10010ad9
1000bc94:	1001141a 	.word	0x1001141a
1000bc98:	10011441 	.word	0x10011441
1000bc9c:	1001146f 	.word	0x1001146f
1000bca0:	10010b56 	.word	0x10010b56
1000bca4:	1001149b 	.word	0x1001149b
1000bca8:	100114ff 	.word	0x100114ff
1000bcac:	1001153f 	.word	0x1001153f
1000bcb0:	10011586 	.word	0x10011586
1000bcb4:	100115b4 	.word	0x100115b4
1000bcb8:	100115fe 	.word	0x100115fe
1000bcbc:	10011644 	.word	0x10011644
1000bcc0:	1001166b 	.word	0x1001166b

1000bcc4 <optiga_shell_pair_host_optiga>:
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Sample Certificate in Trust Anchor Data Object (640 bytes)");
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write new Metadata");
	example_optiga_util_write_data();
}
static void optiga_shell_pair_host_optiga()
{
1000bcc4:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Pairing of Host and Trust M Example");
1000bcc6:	4d0f      	ldr	r5, [pc, #60]	; (1000bd04 <optiga_shell_pair_host_optiga+0x40>)
1000bcc8:	4c0f      	ldr	r4, [pc, #60]	; (1000bd08 <optiga_shell_pair_host_optiga+0x44>)
1000bcca:	1c29      	adds	r1, r5, #0
1000bccc:	1c22      	adds	r2, r4, #0
1000bcce:	480f      	ldr	r0, [pc, #60]	; (1000bd0c <optiga_shell_pair_host_optiga+0x48>)
1000bcd0:	f7f8 fd32 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read and Check existing Metadata for the Binding Secret");
1000bcd4:	1c29      	adds	r1, r5, #0
1000bcd6:	1c22      	adds	r2, r4, #0
1000bcd8:	480d      	ldr	r0, [pc, #52]	; (1000bd10 <optiga_shell_pair_host_optiga+0x4c>)
1000bcda:	f7f8 fd2d 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Generate Random for the new Binding Secret");
1000bcde:	1c29      	adds	r1, r5, #0
1000bce0:	1c22      	adds	r2, r4, #0
1000bce2:	480c      	ldr	r0, [pc, #48]	; (1000bd14 <optiga_shell_pair_host_optiga+0x50>)
1000bce4:	f7f8 fd28 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("3 Step: Write new Binding Secret");
1000bce8:	1c29      	adds	r1, r5, #0
1000bcea:	1c22      	adds	r2, r4, #0
1000bcec:	480a      	ldr	r0, [pc, #40]	; (1000bd18 <optiga_shell_pair_host_optiga+0x54>)
1000bcee:	f7f8 fd23 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("4 Step: Store new Binding Secret on the Host");
1000bcf2:	1c29      	adds	r1, r5, #0
1000bcf4:	4809      	ldr	r0, [pc, #36]	; (1000bd1c <optiga_shell_pair_host_optiga+0x58>)
1000bcf6:	1c22      	adds	r2, r4, #0
1000bcf8:	f7f8 fd1e 	bl	10004738 <optiga_lib_print_message>
	example_pair_host_and_optiga_using_pre_shared_secret();
1000bcfc:	f7fd ff80 	bl	10009c00 <example_pair_host_and_optiga_using_pre_shared_secret>
}
1000bd00:	bd38      	pop	{r3, r4, r5, pc}
1000bd02:	46c0      	nop			; (mov r8, r8)
1000bd04:	10010ac6 	.word	0x10010ac6
1000bd08:	10010ad9 	.word	0x10010ad9
1000bd0c:	100116ca 	.word	0x100116ca
1000bd10:	100116f7 	.word	0x100116f7
1000bd14:	10011737 	.word	0x10011737
1000bd18:	1001176a 	.word	0x1001176a
1000bd1c:	1001178b 	.word	0x1001178b

1000bd20 <optiga_shell_util_write_data>:
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read Certificate (~500 bytes)");
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Read Certificate Metadata");
	example_optiga_util_read_data();
}
static void optiga_shell_util_write_data()
{
1000bd20:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Write Data/Metadata Example");
1000bd22:	4d0a      	ldr	r5, [pc, #40]	; (1000bd4c <optiga_shell_util_write_data+0x2c>)
1000bd24:	4c0a      	ldr	r4, [pc, #40]	; (1000bd50 <optiga_shell_util_write_data+0x30>)
1000bd26:	1c29      	adds	r1, r5, #0
1000bd28:	1c22      	adds	r2, r4, #0
1000bd2a:	480a      	ldr	r0, [pc, #40]	; (1000bd54 <optiga_shell_util_write_data+0x34>)
1000bd2c:	f7f8 fd04 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Sample Certificate in Trust Anchor Data Object (640 bytes)");
1000bd30:	1c29      	adds	r1, r5, #0
1000bd32:	1c22      	adds	r2, r4, #0
1000bd34:	4808      	ldr	r0, [pc, #32]	; (1000bd58 <optiga_shell_util_write_data+0x38>)
1000bd36:	f7f8 fcff 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write new Metadata");
1000bd3a:	1c29      	adds	r1, r5, #0
1000bd3c:	4807      	ldr	r0, [pc, #28]	; (1000bd5c <optiga_shell_util_write_data+0x3c>)
1000bd3e:	1c22      	adds	r2, r4, #0
1000bd40:	f7f8 fcfa 	bl	10004738 <optiga_lib_print_message>
	example_optiga_util_write_data();
1000bd44:	f7fd fef0 	bl	10009b28 <example_optiga_util_write_data>
}
1000bd48:	bd38      	pop	{r3, r4, r5, pc}
1000bd4a:	46c0      	nop			; (mov r8, r8)
1000bd4c:	10010ac6 	.word	0x10010ac6
1000bd50:	10010ad9 	.word	0x10010ad9
1000bd54:	100117b8 	.word	0x100117b8
1000bd58:	100117dd 	.word	0x100117dd
1000bd5c:	10011826 	.word	0x10011826

1000bd60 <optiga_shell_util_read_data>:
		optiga_util_destroy(me_util);
	}while(FALSE);
}

static void optiga_shell_util_read_data()
{
1000bd60:	b538      	push	{r3, r4, r5, lr}
	OPTIGA_SHELL_LOG_MESSAGE("Starting Read Data/Metadata Example");
1000bd62:	4d0a      	ldr	r5, [pc, #40]	; (1000bd8c <optiga_shell_util_read_data+0x2c>)
1000bd64:	4c0a      	ldr	r4, [pc, #40]	; (1000bd90 <optiga_shell_util_read_data+0x30>)
1000bd66:	1c29      	adds	r1, r5, #0
1000bd68:	1c22      	adds	r2, r4, #0
1000bd6a:	480a      	ldr	r0, [pc, #40]	; (1000bd94 <optiga_shell_util_read_data+0x34>)
1000bd6c:	f7f8 fce4 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read Certificate (~500 bytes)");
1000bd70:	1c29      	adds	r1, r5, #0
1000bd72:	1c22      	adds	r2, r4, #0
1000bd74:	4808      	ldr	r0, [pc, #32]	; (1000bd98 <optiga_shell_util_read_data+0x38>)
1000bd76:	f7f8 fcdf 	bl	10004738 <optiga_lib_print_message>
	OPTIGA_SHELL_LOG_MESSAGE("2 Step: Read Certificate Metadata");
1000bd7a:	1c29      	adds	r1, r5, #0
1000bd7c:	4807      	ldr	r0, [pc, #28]	; (1000bd9c <optiga_shell_util_read_data+0x3c>)
1000bd7e:	1c22      	adds	r2, r4, #0
1000bd80:	f7f8 fcda 	bl	10004738 <optiga_lib_print_message>
	example_optiga_util_read_data();
1000bd84:	f7fd fdf4 	bl	10009970 <example_optiga_util_read_data>
}
1000bd88:	bd38      	pop	{r3, r4, r5, pc}
1000bd8a:	46c0      	nop			; (mov r8, r8)
1000bd8c:	10010ac6 	.word	0x10010ac6
1000bd90:	10010ad9 	.word	0x10010ad9
1000bd94:	10011841 	.word	0x10011841
1000bd98:	10011865 	.word	0x10011865
1000bd9c:	1001188b 	.word	0x1001188b

1000bda0 <optiga_shell_init>:
	const char_t * cmd_options;
	void (*cmd_handler)();
}optiga_example_cmd_t;

static void optiga_shell_init()
{
1000bda0:	b5f0      	push	{r4, r5, r6, r7, lr}
	optiga_lib_status_t return_status;
	uint16_t optiga_oid = 0xE0C4;
	uint8_t required_current = 0x0F;
1000bda2:	270f      	movs	r7, #15
	const char_t * cmd_options;
	void (*cmd_handler)();
}optiga_example_cmd_t;

static void optiga_shell_init()
{
1000bda4:	b087      	sub	sp, #28
	optiga_lib_status_t return_status;
	uint16_t optiga_oid = 0xE0C4;
	uint8_t required_current = 0x0F;
1000bda6:	ab02      	add	r3, sp, #8

	do
	{
		//Create an instance of optiga_util to open the application on OPTIGA.
		me_util = optiga_util_create(0, optiga_util_callback, NULL);
1000bda8:	2000      	movs	r0, #0

static void optiga_shell_init()
{
	optiga_lib_status_t return_status;
	uint16_t optiga_oid = 0xE0C4;
	uint8_t required_current = 0x0F;
1000bdaa:	18ff      	adds	r7, r7, r3
1000bdac:	230f      	movs	r3, #15

	do
	{
		//Create an instance of optiga_util to open the application on OPTIGA.
		me_util = optiga_util_create(0, optiga_util_callback, NULL);
1000bdae:	4926      	ldr	r1, [pc, #152]	; (1000be48 <optiga_shell_init+0xa8>)
1000bdb0:	1c02      	adds	r2, r0, #0

static void optiga_shell_init()
{
	optiga_lib_status_t return_status;
	uint16_t optiga_oid = 0xE0C4;
	uint8_t required_current = 0x0F;
1000bdb2:	703b      	strb	r3, [r7, #0]

	do
	{
		//Create an instance of optiga_util to open the application on OPTIGA.
		me_util = optiga_util_create(0, optiga_util_callback, NULL);
1000bdb4:	f7f5 fd12 	bl	100017dc <optiga_util_create>
1000bdb8:	4c24      	ldr	r4, [pc, #144]	; (1000be4c <optiga_shell_init+0xac>)

		OPTIGA_EXAMPLE_LOG_MESSAGE("Initializing OPTIGA for example demonstration...\n");
1000bdba:	4925      	ldr	r1, [pc, #148]	; (1000be50 <optiga_shell_init+0xb0>)
	uint8_t required_current = 0x0F;

	do
	{
		//Create an instance of optiga_util to open the application on OPTIGA.
		me_util = optiga_util_create(0, optiga_util_callback, NULL);
1000bdbc:	6020      	str	r0, [r4, #0]

		OPTIGA_EXAMPLE_LOG_MESSAGE("Initializing OPTIGA for example demonstration...\n");
1000bdbe:	4a25      	ldr	r2, [pc, #148]	; (1000be54 <optiga_shell_init+0xb4>)
1000bdc0:	4825      	ldr	r0, [pc, #148]	; (1000be58 <optiga_shell_init+0xb8>)
1000bdc2:	f7f8 fcb9 	bl	10004738 <optiga_lib_print_message>
		/**
		 * Open the application on OPTIGA which is a precondition to perform any other operations
		 * using optiga_util_open_application
		 */
		optiga_lib_status = OPTIGA_LIB_BUSY;
1000bdc6:	2301      	movs	r3, #1
1000bdc8:	4e24      	ldr	r6, [pc, #144]	; (1000be5c <optiga_shell_init+0xbc>)
		return_status = optiga_util_open_application(me_util, 0);
1000bdca:	6820      	ldr	r0, [r4, #0]
1000bdcc:	2100      	movs	r1, #0
		OPTIGA_EXAMPLE_LOG_MESSAGE("Initializing OPTIGA for example demonstration...\n");
		/**
		 * Open the application on OPTIGA which is a precondition to perform any other operations
		 * using optiga_util_open_application
		 */
		optiga_lib_status = OPTIGA_LIB_BUSY;
1000bdce:	8033      	strh	r3, [r6, #0]
		return_status = optiga_util_open_application(me_util, 0);
1000bdd0:	f7f5 fd44 	bl	1000185c <optiga_util_open_application>
1000bdd4:	9403      	str	r4, [sp, #12]

		if (OPTIGA_LIB_SUCCESS != return_status)
1000bdd6:	2800      	cmp	r0, #0
1000bdd8:	d133      	bne.n	1000be42 <optiga_shell_init+0xa2>
		{
			break;
		}
		while (optiga_lib_status == OPTIGA_LIB_BUSY)
1000bdda:	8833      	ldrh	r3, [r6, #0]
1000bddc:	2b01      	cmp	r3, #1
1000bdde:	d0fc      	beq.n	1000bdda <optiga_shell_init+0x3a>
		{
			//Wait until the optiga_util_open_application is completed
		}
		if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000bde0:	8833      	ldrh	r3, [r6, #0]
1000bde2:	b29b      	uxth	r3, r3
1000bde4:	9302      	str	r3, [sp, #8]
1000bde6:	2b00      	cmp	r3, #0
1000bde8:	d12b      	bne.n	1000be42 <optiga_shell_init+0xa2>
		{
			//optiga util open application failed
			break;
		}

		OPTIGA_SHELL_LOG_MESSAGE("Initializing OPTIGA completed...\n\n");
1000bdea:	4d1d      	ldr	r5, [pc, #116]	; (1000be60 <optiga_shell_init+0xc0>)
1000bdec:	4c1d      	ldr	r4, [pc, #116]	; (1000be64 <optiga_shell_init+0xc4>)
1000bdee:	481e      	ldr	r0, [pc, #120]	; (1000be68 <optiga_shell_init+0xc8>)
1000bdf0:	1c29      	adds	r1, r5, #0
1000bdf2:	1c22      	adds	r2, r4, #0
1000bdf4:	f7f8 fca0 	bl	10004738 <optiga_lib_print_message>
		OPTIGA_SHELL_LOG_MESSAGE("Begin pairing of host and OPTIGA...");
1000bdf8:	481c      	ldr	r0, [pc, #112]	; (1000be6c <optiga_shell_init+0xcc>)
1000bdfa:	1c29      	adds	r1, r5, #0
1000bdfc:	1c22      	adds	r2, r4, #0
1000bdfe:	f7f8 fc9b 	bl	10004738 <optiga_lib_print_message>
		// Usercase: Generate the pre-shared secret on host and write it to OPTIGA
		example_pair_host_and_optiga_using_pre_shared_secret();
1000be02:	f7fd fefd 	bl	10009c00 <example_pair_host_and_optiga_using_pre_shared_secret>
		OPTIGA_SHELL_LOG_MESSAGE("Pairing of host and OPTIGA completed...");
1000be06:	481a      	ldr	r0, [pc, #104]	; (1000be70 <optiga_shell_init+0xd0>)
1000be08:	1c29      	adds	r1, r5, #0
1000be0a:	1c22      	adds	r2, r4, #0
1000be0c:	f7f8 fc94 	bl	10004738 <optiga_lib_print_message>
		// Usercase: Generate the pre-shared secret on host and write it to OPTIGA
        return_status = optiga_util_write_data(me_util,
1000be10:	2301      	movs	r3, #1
1000be12:	9301      	str	r3, [sp, #4]
1000be14:	9b03      	ldr	r3, [sp, #12]
1000be16:	9700      	str	r7, [sp, #0]
1000be18:	6818      	ldr	r0, [r3, #0]
1000be1a:	4916      	ldr	r1, [pc, #88]	; (1000be74 <optiga_shell_init+0xd4>)
1000be1c:	2240      	movs	r2, #64	; 0x40
1000be1e:	9b02      	ldr	r3, [sp, #8]
1000be20:	f7f5 fe48 	bl	10001ab4 <optiga_util_write_data>
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
											   &required_current,
                                               1);

        if (OPTIGA_LIB_SUCCESS != return_status)
1000be24:	2800      	cmp	r0, #0
1000be26:	d10c      	bne.n	1000be42 <optiga_shell_init+0xa2>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
1000be28:	8833      	ldrh	r3, [r6, #0]
1000be2a:	2b01      	cmp	r3, #1
1000be2c:	d0fc      	beq.n	1000be28 <optiga_shell_init+0x88>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        OPTIGA_SHELL_LOG_MESSAGE("Setting current limitation to minimum...");
1000be2e:	4812      	ldr	r0, [pc, #72]	; (1000be78 <optiga_shell_init+0xd8>)
1000be30:	1c29      	adds	r1, r5, #0
1000be32:	1c22      	adds	r2, r4, #0
1000be34:	f7f8 fc80 	bl	10004738 <optiga_lib_print_message>
        OPTIGA_SHELL_LOG_MESSAGE("Starting OPTIGA example demonstration..\n");
1000be38:	4810      	ldr	r0, [pc, #64]	; (1000be7c <optiga_shell_init+0xdc>)
1000be3a:	1c29      	adds	r1, r5, #0
1000be3c:	1c22      	adds	r2, r4, #0
1000be3e:	f7f8 fc7b 	bl	10004738 <optiga_lib_print_message>
	}while(FALSE);
}
1000be42:	b007      	add	sp, #28
1000be44:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be46:	46c0      	nop			; (mov r8, r8)
1000be48:	1000b815 	.word	0x1000b815
1000be4c:	20002fe4 	.word	0x20002fe4
1000be50:	10010644 	.word	0x10010644
1000be54:	1000d2dc 	.word	0x1000d2dc
1000be58:	100118ad 	.word	0x100118ad
1000be5c:	20002fe8 	.word	0x20002fe8
1000be60:	10010ac6 	.word	0x10010ac6
1000be64:	10010ad9 	.word	0x10010ad9
1000be68:	100118df 	.word	0x100118df
1000be6c:	10011902 	.word	0x10011902
1000be70:	10011926 	.word	0x10011926
1000be74:	0000e0c4 	.word	0x0000e0c4
1000be78:	1001194e 	.word	0x1001194e
1000be7c:	10011977 	.word	0x10011977

1000be80 <optiga_shell_selftest>:
		OPTIGA_SHELL_LOG_MESSAGE(buffer_string); \
		optiga_lib_print_string_with_newline(""); \
		pal_os_timer_delay_in_milliseconds(2000);

static void optiga_shell_selftest()
{
1000be80:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be82:	b089      	sub	sp, #36	; 0x24
	char buffer_string[30];
	int timestamp = pal_os_timer_get_time_in_milliseconds();
1000be84:	f7f5 fc2c 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>

	PRINT_PERFORMANCE_RESULTS(optiga_shell_init);
1000be88:	f7f5 fc2a 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000be8c:	1c04      	adds	r4, r0, #0
1000be8e:	f7ff ff87 	bl	1000bda0 <optiga_shell_init>
1000be92:	f7f5 fc25 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000be96:	4eef      	ldr	r6, [pc, #956]	; (1000c254 <optiga_shell_selftest+0x3d4>)
1000be98:	1b02      	subs	r2, r0, r4
1000be9a:	1c31      	adds	r1, r6, #0
1000be9c:	4668      	mov	r0, sp
1000be9e:	f000 fe53 	bl	1000cb48 <siprintf>
1000bea2:	4ded      	ldr	r5, [pc, #948]	; (1000c258 <optiga_shell_selftest+0x3d8>)
1000bea4:	4ced      	ldr	r4, [pc, #948]	; (1000c25c <optiga_shell_selftest+0x3dc>)
1000bea6:	1c29      	adds	r1, r5, #0
1000bea8:	1c22      	adds	r2, r4, #0
1000beaa:	4668      	mov	r0, sp
1000beac:	f7f8 fc44 	bl	10004738 <optiga_lib_print_message>
1000beb0:	48eb      	ldr	r0, [pc, #940]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000beb2:	f7f8 fc25 	bl	10004700 <optiga_lib_print_string_with_newline>
1000beb6:	20fa      	movs	r0, #250	; 0xfa
1000beb8:	00c0      	lsls	r0, r0, #3
1000beba:	f7f5 fc17 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_util_read_data);
1000bebe:	f7f5 fc0f 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bec2:	1c07      	adds	r7, r0, #0
1000bec4:	f7ff ff4c 	bl	1000bd60 <optiga_shell_util_read_data>
1000bec8:	f7f5 fc0a 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000becc:	1c31      	adds	r1, r6, #0
1000bece:	1bc2      	subs	r2, r0, r7
1000bed0:	4668      	mov	r0, sp
1000bed2:	f000 fe39 	bl	1000cb48 <siprintf>
1000bed6:	1c29      	adds	r1, r5, #0
1000bed8:	1c22      	adds	r2, r4, #0
1000beda:	4668      	mov	r0, sp
1000bedc:	f7f8 fc2c 	bl	10004738 <optiga_lib_print_message>
1000bee0:	48df      	ldr	r0, [pc, #892]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000bee2:	f7f8 fc0d 	bl	10004700 <optiga_lib_print_string_with_newline>
1000bee6:	20fa      	movs	r0, #250	; 0xfa
1000bee8:	00c0      	lsls	r0, r0, #3
1000beea:	f7f5 fbff 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_util_write_data);
1000beee:	f7f5 fbf7 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bef2:	1c07      	adds	r7, r0, #0
1000bef4:	f7ff ff14 	bl	1000bd20 <optiga_shell_util_write_data>
1000bef8:	f7f5 fbf2 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000befc:	1c31      	adds	r1, r6, #0
1000befe:	1bc2      	subs	r2, r0, r7
1000bf00:	4668      	mov	r0, sp
1000bf02:	f000 fe21 	bl	1000cb48 <siprintf>
1000bf06:	1c29      	adds	r1, r5, #0
1000bf08:	1c22      	adds	r2, r4, #0
1000bf0a:	4668      	mov	r0, sp
1000bf0c:	f7f8 fc14 	bl	10004738 <optiga_lib_print_message>
1000bf10:	48d3      	ldr	r0, [pc, #844]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000bf12:	f7f8 fbf5 	bl	10004700 <optiga_lib_print_string_with_newline>
1000bf16:	20fa      	movs	r0, #250	; 0xfa
1000bf18:	00c0      	lsls	r0, r0, #3
1000bf1a:	f7f5 fbe7 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_pair_host_optiga);
1000bf1e:	f7f5 fbdf 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bf22:	1c07      	adds	r7, r0, #0
1000bf24:	f7ff fece 	bl	1000bcc4 <optiga_shell_pair_host_optiga>
1000bf28:	f7f5 fbda 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bf2c:	1c31      	adds	r1, r6, #0
1000bf2e:	1bc2      	subs	r2, r0, r7
1000bf30:	4668      	mov	r0, sp
1000bf32:	f000 fe09 	bl	1000cb48 <siprintf>
1000bf36:	1c29      	adds	r1, r5, #0
1000bf38:	1c22      	adds	r2, r4, #0
1000bf3a:	4668      	mov	r0, sp
1000bf3c:	f7f8 fbfc 	bl	10004738 <optiga_lib_print_message>
1000bf40:	48c7      	ldr	r0, [pc, #796]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000bf42:	f7f8 fbdd 	bl	10004700 <optiga_lib_print_string_with_newline>
1000bf46:	20fa      	movs	r0, #250	; 0xfa
1000bf48:	00c0      	lsls	r0, r0, #3
1000bf4a:	f7f5 fbcf 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_util_update_count);
1000bf4e:	f7f5 fbc7 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bf52:	1c07      	adds	r7, r0, #0
1000bf54:	f7ff fe38 	bl	1000bbc8 <optiga_shell_util_update_count>
1000bf58:	f7f5 fbc2 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bf5c:	1c31      	adds	r1, r6, #0
1000bf5e:	1bc2      	subs	r2, r0, r7
1000bf60:	4668      	mov	r0, sp
1000bf62:	f000 fdf1 	bl	1000cb48 <siprintf>
1000bf66:	1c29      	adds	r1, r5, #0
1000bf68:	1c22      	adds	r2, r4, #0
1000bf6a:	4668      	mov	r0, sp
1000bf6c:	f7f8 fbe4 	bl	10004738 <optiga_lib_print_message>
1000bf70:	48bb      	ldr	r0, [pc, #748]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000bf72:	f7f8 fbc5 	bl	10004700 <optiga_lib_print_string_with_newline>
1000bf76:	20fa      	movs	r0, #250	; 0xfa
1000bf78:	00c0      	lsls	r0, r0, #3
1000bf7a:	f7f5 fbb7 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_util_protected_update);
1000bf7e:	f7f5 fbaf 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bf82:	1c07      	adds	r7, r0, #0
1000bf84:	f7ff fdfa 	bl	1000bb7c <optiga_shell_util_protected_update>
1000bf88:	f7f5 fbaa 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bf8c:	1c31      	adds	r1, r6, #0
1000bf8e:	1bc2      	subs	r2, r0, r7
1000bf90:	4668      	mov	r0, sp
1000bf92:	f000 fdd9 	bl	1000cb48 <siprintf>
1000bf96:	1c29      	adds	r1, r5, #0
1000bf98:	1c22      	adds	r2, r4, #0
1000bf9a:	4668      	mov	r0, sp
1000bf9c:	f7f8 fbcc 	bl	10004738 <optiga_lib_print_message>
1000bfa0:	48af      	ldr	r0, [pc, #700]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000bfa2:	f7f8 fbad 	bl	10004700 <optiga_lib_print_string_with_newline>
1000bfa6:	20fa      	movs	r0, #250	; 0xfa
1000bfa8:	00c0      	lsls	r0, r0, #3
1000bfaa:	f7f5 fb9f 	bl	100016ec <pal_os_timer_delay_in_milliseconds>

	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_hash);
1000bfae:	f7f5 fb97 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bfb2:	1c07      	adds	r7, r0, #0
1000bfb4:	f7ff fdca 	bl	1000bb4c <optiga_shell_crypt_hash>
1000bfb8:	f7f5 fb92 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bfbc:	1c31      	adds	r1, r6, #0
1000bfbe:	1bc2      	subs	r2, r0, r7
1000bfc0:	4668      	mov	r0, sp
1000bfc2:	f000 fdc1 	bl	1000cb48 <siprintf>
1000bfc6:	1c29      	adds	r1, r5, #0
1000bfc8:	1c22      	adds	r2, r4, #0
1000bfca:	4668      	mov	r0, sp
1000bfcc:	f7f8 fbb4 	bl	10004738 <optiga_lib_print_message>
1000bfd0:	48a3      	ldr	r0, [pc, #652]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000bfd2:	f7f8 fb95 	bl	10004700 <optiga_lib_print_string_with_newline>
1000bfd6:	20fa      	movs	r0, #250	; 0xfa
1000bfd8:	00c0      	lsls	r0, r0, #3
1000bfda:	f7f5 fb87 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_tls_prf_sha256);
1000bfde:	f7f5 fb7f 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bfe2:	1c07      	adds	r7, r0, #0
1000bfe4:	f7ff fd84 	bl	1000baf0 <optiga_shell_crypt_tls_prf_sha256>
1000bfe8:	f7f5 fb7a 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000bfec:	1c31      	adds	r1, r6, #0
1000bfee:	1bc2      	subs	r2, r0, r7
1000bff0:	4668      	mov	r0, sp
1000bff2:	f000 fda9 	bl	1000cb48 <siprintf>
1000bff6:	1c29      	adds	r1, r5, #0
1000bff8:	1c22      	adds	r2, r4, #0
1000bffa:	4668      	mov	r0, sp
1000bffc:	f7f8 fb9c 	bl	10004738 <optiga_lib_print_message>
1000c000:	4897      	ldr	r0, [pc, #604]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c002:	f7f8 fb7d 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c006:	20fa      	movs	r0, #250	; 0xfa
1000c008:	00c0      	lsls	r0, r0, #3
1000c00a:	f7f5 fb6f 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_random);
1000c00e:	f7f5 fb67 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c012:	1c07      	adds	r7, r0, #0
1000c014:	f7ff fd54 	bl	1000bac0 <optiga_shell_crypt_random>
1000c018:	f7f5 fb62 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c01c:	1c31      	adds	r1, r6, #0
1000c01e:	1bc2      	subs	r2, r0, r7
1000c020:	4668      	mov	r0, sp
1000c022:	f000 fd91 	bl	1000cb48 <siprintf>
1000c026:	1c29      	adds	r1, r5, #0
1000c028:	1c22      	adds	r2, r4, #0
1000c02a:	4668      	mov	r0, sp
1000c02c:	f7f8 fb84 	bl	10004738 <optiga_lib_print_message>
1000c030:	488b      	ldr	r0, [pc, #556]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c032:	f7f8 fb65 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c036:	20fa      	movs	r0, #250	; 0xfa
1000c038:	00c0      	lsls	r0, r0, #3
1000c03a:	f7f5 fb57 	bl	100016ec <pal_os_timer_delay_in_milliseconds>

	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_ecc_generate_keypair);
1000c03e:	f7f5 fb4f 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c042:	1c07      	adds	r7, r0, #0
1000c044:	f7ff fd24 	bl	1000ba90 <optiga_shell_crypt_ecc_generate_keypair>
1000c048:	f7f5 fb4a 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c04c:	1c31      	adds	r1, r6, #0
1000c04e:	1bc2      	subs	r2, r0, r7
1000c050:	4668      	mov	r0, sp
1000c052:	f000 fd79 	bl	1000cb48 <siprintf>
1000c056:	1c29      	adds	r1, r5, #0
1000c058:	1c22      	adds	r2, r4, #0
1000c05a:	4668      	mov	r0, sp
1000c05c:	f7f8 fb6c 	bl	10004738 <optiga_lib_print_message>
1000c060:	487f      	ldr	r0, [pc, #508]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c062:	f7f8 fb4d 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c066:	20fa      	movs	r0, #250	; 0xfa
1000c068:	00c0      	lsls	r0, r0, #3
1000c06a:	f7f5 fb3f 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_ecdsa_sign);
1000c06e:	f7f5 fb37 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c072:	1c07      	adds	r7, r0, #0
1000c074:	f7ff fcf4 	bl	1000ba60 <optiga_shell_crypt_ecdsa_sign>
1000c078:	f7f5 fb32 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c07c:	1c31      	adds	r1, r6, #0
1000c07e:	1bc2      	subs	r2, r0, r7
1000c080:	4668      	mov	r0, sp
1000c082:	f000 fd61 	bl	1000cb48 <siprintf>
1000c086:	1c29      	adds	r1, r5, #0
1000c088:	1c22      	adds	r2, r4, #0
1000c08a:	4668      	mov	r0, sp
1000c08c:	f7f8 fb54 	bl	10004738 <optiga_lib_print_message>
1000c090:	4873      	ldr	r0, [pc, #460]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c092:	f7f8 fb35 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c096:	20fa      	movs	r0, #250	; 0xfa
1000c098:	00c0      	lsls	r0, r0, #3
1000c09a:	f7f5 fb27 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_ecdsa_verify);
1000c09e:	f7f5 fb1f 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c0a2:	1c07      	adds	r7, r0, #0
1000c0a4:	f7ff fcc4 	bl	1000ba30 <optiga_shell_crypt_ecdsa_verify>
1000c0a8:	f7f5 fb1a 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c0ac:	1c31      	adds	r1, r6, #0
1000c0ae:	1bc2      	subs	r2, r0, r7
1000c0b0:	4668      	mov	r0, sp
1000c0b2:	f000 fd49 	bl	1000cb48 <siprintf>
1000c0b6:	1c29      	adds	r1, r5, #0
1000c0b8:	1c22      	adds	r2, r4, #0
1000c0ba:	4668      	mov	r0, sp
1000c0bc:	f7f8 fb3c 	bl	10004738 <optiga_lib_print_message>
1000c0c0:	4867      	ldr	r0, [pc, #412]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c0c2:	f7f8 fb1d 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c0c6:	20fa      	movs	r0, #250	; 0xfa
1000c0c8:	00c0      	lsls	r0, r0, #3
1000c0ca:	f7f5 fb0f 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_ecdh);
1000c0ce:	f7f5 fb07 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c0d2:	1c07      	adds	r7, r0, #0
1000c0d4:	f7ff fc7e 	bl	1000b9d4 <optiga_shell_crypt_ecdh>
1000c0d8:	f7f5 fb02 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c0dc:	1c31      	adds	r1, r6, #0
1000c0de:	1bc2      	subs	r2, r0, r7
1000c0e0:	4668      	mov	r0, sp
1000c0e2:	f000 fd31 	bl	1000cb48 <siprintf>
1000c0e6:	1c29      	adds	r1, r5, #0
1000c0e8:	1c22      	adds	r2, r4, #0
1000c0ea:	4668      	mov	r0, sp
1000c0ec:	f7f8 fb24 	bl	10004738 <optiga_lib_print_message>
1000c0f0:	485b      	ldr	r0, [pc, #364]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c0f2:	f7f8 fb05 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c0f6:	20fa      	movs	r0, #250	; 0xfa
1000c0f8:	00c0      	lsls	r0, r0, #3
1000c0fa:	f7f5 faf7 	bl	100016ec <pal_os_timer_delay_in_milliseconds>

	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_generate_keypair);
1000c0fe:	f7f5 faef 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c102:	1c07      	adds	r7, r0, #0
1000c104:	f7ff fc4e 	bl	1000b9a4 <optiga_shell_crypt_generate_keypair>
1000c108:	f7f5 faea 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c10c:	1c31      	adds	r1, r6, #0
1000c10e:	1bc2      	subs	r2, r0, r7
1000c110:	4668      	mov	r0, sp
1000c112:	f000 fd19 	bl	1000cb48 <siprintf>
1000c116:	1c29      	adds	r1, r5, #0
1000c118:	1c22      	adds	r2, r4, #0
1000c11a:	4668      	mov	r0, sp
1000c11c:	f7f8 fb0c 	bl	10004738 <optiga_lib_print_message>
1000c120:	484f      	ldr	r0, [pc, #316]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c122:	f7f8 faed 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c126:	20fa      	movs	r0, #250	; 0xfa
1000c128:	00c0      	lsls	r0, r0, #3
1000c12a:	f7f5 fadf 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_sign);
1000c12e:	f7f5 fad7 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c132:	1c07      	adds	r7, r0, #0
1000c134:	f7ff fc1e 	bl	1000b974 <optiga_shell_crypt_rsa_sign>
1000c138:	f7f5 fad2 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c13c:	1c31      	adds	r1, r6, #0
1000c13e:	1bc2      	subs	r2, r0, r7
1000c140:	4668      	mov	r0, sp
1000c142:	f000 fd01 	bl	1000cb48 <siprintf>
1000c146:	1c29      	adds	r1, r5, #0
1000c148:	1c22      	adds	r2, r4, #0
1000c14a:	4668      	mov	r0, sp
1000c14c:	f7f8 faf4 	bl	10004738 <optiga_lib_print_message>
1000c150:	4843      	ldr	r0, [pc, #268]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c152:	f7f8 fad5 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c156:	20fa      	movs	r0, #250	; 0xfa
1000c158:	00c0      	lsls	r0, r0, #3
1000c15a:	f7f5 fac7 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_verify);
1000c15e:	f7f5 fabf 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c162:	1c07      	adds	r7, r0, #0
1000c164:	f7ff fbee 	bl	1000b944 <optiga_shell_crypt_rsa_verify>
1000c168:	f7f5 faba 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c16c:	1c31      	adds	r1, r6, #0
1000c16e:	1bc2      	subs	r2, r0, r7
1000c170:	4668      	mov	r0, sp
1000c172:	f000 fce9 	bl	1000cb48 <siprintf>
1000c176:	1c29      	adds	r1, r5, #0
1000c178:	1c22      	adds	r2, r4, #0
1000c17a:	4668      	mov	r0, sp
1000c17c:	f7f8 fadc 	bl	10004738 <optiga_lib_print_message>
1000c180:	4837      	ldr	r0, [pc, #220]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c182:	f7f8 fabd 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c186:	20fa      	movs	r0, #250	; 0xfa
1000c188:	00c0      	lsls	r0, r0, #3
1000c18a:	f7f5 faaf 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_encrypt_message);
1000c18e:	f7f5 faa7 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c192:	1c07      	adds	r7, r0, #0
1000c194:	f7ff fbbe 	bl	1000b914 <optiga_shell_crypt_rsa_encrypt_message>
1000c198:	f7f5 faa2 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c19c:	1c31      	adds	r1, r6, #0
1000c19e:	1bc2      	subs	r2, r0, r7
1000c1a0:	4668      	mov	r0, sp
1000c1a2:	f000 fcd1 	bl	1000cb48 <siprintf>
1000c1a6:	1c29      	adds	r1, r5, #0
1000c1a8:	1c22      	adds	r2, r4, #0
1000c1aa:	4668      	mov	r0, sp
1000c1ac:	f7f8 fac4 	bl	10004738 <optiga_lib_print_message>
1000c1b0:	482b      	ldr	r0, [pc, #172]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c1b2:	f7f8 faa5 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c1b6:	20fa      	movs	r0, #250	; 0xfa
1000c1b8:	00c0      	lsls	r0, r0, #3
1000c1ba:	f7f5 fa97 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_encrypt_session);
1000c1be:	f7f5 fa8f 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c1c2:	1c07      	adds	r7, r0, #0
1000c1c4:	f7ff fb8e 	bl	1000b8e4 <optiga_shell_crypt_rsa_encrypt_session>
1000c1c8:	f7f5 fa8a 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c1cc:	1c31      	adds	r1, r6, #0
1000c1ce:	1bc2      	subs	r2, r0, r7
1000c1d0:	4668      	mov	r0, sp
1000c1d2:	f000 fcb9 	bl	1000cb48 <siprintf>
1000c1d6:	1c29      	adds	r1, r5, #0
1000c1d8:	1c22      	adds	r2, r4, #0
1000c1da:	4668      	mov	r0, sp
1000c1dc:	f7f8 faac 	bl	10004738 <optiga_lib_print_message>
1000c1e0:	481f      	ldr	r0, [pc, #124]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c1e2:	f7f8 fa8d 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c1e6:	20fa      	movs	r0, #250	; 0xfa
1000c1e8:	00c0      	lsls	r0, r0, #3
1000c1ea:	f7f5 fa7f 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_decrypt_and_store);
1000c1ee:	f7f5 fa77 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c1f2:	1c07      	adds	r7, r0, #0
1000c1f4:	f7ff fb42 	bl	1000b87c <optiga_shell_crypt_rsa_decrypt_and_store>
1000c1f8:	f7f5 fa72 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c1fc:	1c31      	adds	r1, r6, #0
1000c1fe:	1bc2      	subs	r2, r0, r7
1000c200:	4668      	mov	r0, sp
1000c202:	f000 fca1 	bl	1000cb48 <siprintf>
1000c206:	1c29      	adds	r1, r5, #0
1000c208:	1c22      	adds	r2, r4, #0
1000c20a:	4668      	mov	r0, sp
1000c20c:	f7f8 fa94 	bl	10004738 <optiga_lib_print_message>
1000c210:	4813      	ldr	r0, [pc, #76]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c212:	f7f8 fa75 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c216:	20fa      	movs	r0, #250	; 0xfa
1000c218:	00c0      	lsls	r0, r0, #3
1000c21a:	f7f5 fa67 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
	PRINT_PERFORMANCE_RESULTS(optiga_shell_crypt_rsa_decrypt_and_export);
1000c21e:	f7f5 fa5f 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c222:	1c07      	adds	r7, r0, #0
1000c224:	f7ff fafc 	bl	1000b820 <optiga_shell_crypt_rsa_decrypt_and_export>
1000c228:	f7f5 fa5a 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c22c:	1c31      	adds	r1, r6, #0
1000c22e:	1bc2      	subs	r2, r0, r7
1000c230:	4668      	mov	r0, sp
1000c232:	f000 fc89 	bl	1000cb48 <siprintf>
1000c236:	1c29      	adds	r1, r5, #0
1000c238:	1c22      	adds	r2, r4, #0
1000c23a:	4668      	mov	r0, sp
1000c23c:	f7f8 fa7c 	bl	10004738 <optiga_lib_print_message>
1000c240:	4807      	ldr	r0, [pc, #28]	; (1000c260 <optiga_shell_selftest+0x3e0>)
1000c242:	f7f8 fa5d 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c246:	20fa      	movs	r0, #250	; 0xfa
1000c248:	00c0      	lsls	r0, r0, #3
1000c24a:	f7f5 fa4f 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
}
1000c24e:	b009      	add	sp, #36	; 0x24
1000c250:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c252:	46c0      	nop			; (mov r8, r8)
1000c254:	100119a0 	.word	0x100119a0
1000c258:	10010ac6 	.word	0x10010ac6
1000c25c:	10010ad9 	.word	0x10010ad9
1000c260:	10011901 	.word	0x10011901

1000c264 <optiga_shell_show_usage>:
};

#define OPTIGA_SIZE_OF_CMDS			(sizeof(optiga_cmds)/sizeof(optiga_example_cmd_t))

static void optiga_shell_show_usage()
{
1000c264:	b538      	push	{r3, r4, r5, lr}
	uint8_t number_of_cmds = OPTIGA_SIZE_OF_CMDS;
	uint8_t index = 0;
	optiga_example_cmd_t * current_cmd;
	optiga_lib_print_string_with_newline("");
1000c266:	480e      	ldr	r0, [pc, #56]	; (1000c2a0 <optiga_shell_show_usage+0x3c>)
1000c268:	f7f8 fa4a 	bl	10004700 <optiga_lib_print_string_with_newline>
	optiga_lib_print_string_with_newline("    usage                : optiga -<cmd>");
1000c26c:	480d      	ldr	r0, [pc, #52]	; (1000c2a4 <optiga_shell_show_usage+0x40>)
1000c26e:	f7f8 fa47 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c272:	4b0d      	ldr	r3, [pc, #52]	; (1000c2a8 <optiga_shell_show_usage+0x44>)
1000c274:	1d1c      	adds	r4, r3, #4
1000c276:	3325      	adds	r3, #37	; 0x25
1000c278:	33ff      	adds	r3, #255	; 0xff
1000c27a:	1c1d      	adds	r5, r3, #0
	for(index = 0; index < number_of_cmds; index++)
	{
		current_cmd = &optiga_cmds[index];
		if(0 != strcmp("help",current_cmd->cmd_options))
1000c27c:	480b      	ldr	r0, [pc, #44]	; (1000c2ac <optiga_shell_show_usage+0x48>)
1000c27e:	6821      	ldr	r1, [r4, #0]
1000c280:	f000 fc91 	bl	1000cba6 <strcmp>
1000c284:	2800      	cmp	r0, #0
1000c286:	d006      	beq.n	1000c296 <optiga_shell_show_usage+0x32>
1000c288:	1f23      	subs	r3, r4, #4
		{
			optiga_lib_print_string(current_cmd->cmd_description);
1000c28a:	6818      	ldr	r0, [r3, #0]
1000c28c:	f7f8 fa2a 	bl	100046e4 <optiga_lib_print_string>
			optiga_lib_print_string_with_newline(current_cmd->cmd_options);
1000c290:	6820      	ldr	r0, [r4, #0]
1000c292:	f7f8 fa35 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c296:	340c      	adds	r4, #12
	uint8_t number_of_cmds = OPTIGA_SIZE_OF_CMDS;
	uint8_t index = 0;
	optiga_example_cmd_t * current_cmd;
	optiga_lib_print_string_with_newline("");
	optiga_lib_print_string_with_newline("    usage                : optiga -<cmd>");
	for(index = 0; index < number_of_cmds; index++)
1000c298:	42ac      	cmp	r4, r5
1000c29a:	d1ef      	bne.n	1000c27c <optiga_shell_show_usage+0x18>
		{
			optiga_lib_print_string(current_cmd->cmd_description);
			optiga_lib_print_string_with_newline(current_cmd->cmd_options);
		}
	}
}
1000c29c:	bd38      	pop	{r3, r4, r5, pc}
1000c29e:	46c0      	nop			; (mov r8, r8)
1000c2a0:	10011901 	.word	0x10011901
1000c2a4:	100119b6 	.word	0x100119b6
1000c2a8:	20002714 	.word	0x20002714
1000c2ac:	100119df 	.word	0x100119df

1000c2b0 <optiga_shell_deinit>:
        OPTIGA_SHELL_LOG_MESSAGE("Starting OPTIGA example demonstration..\n");
	}while(FALSE);
}

static void optiga_shell_deinit()
{
1000c2b0:	b538      	push	{r3, r4, r5, lr}
	{
		/**
		 * Close the application on OPTIGA after all the operations are executed
		 * using optiga_util_close_application
		 */
		optiga_lib_status = OPTIGA_LIB_BUSY;
1000c2b2:	2301      	movs	r3, #1
		return_status = optiga_util_close_application(me_util, 0);
1000c2b4:	4d09      	ldr	r5, [pc, #36]	; (1000c2dc <optiga_shell_deinit+0x2c>)
	{
		/**
		 * Close the application on OPTIGA after all the operations are executed
		 * using optiga_util_close_application
		 */
		optiga_lib_status = OPTIGA_LIB_BUSY;
1000c2b6:	4c0a      	ldr	r4, [pc, #40]	; (1000c2e0 <optiga_shell_deinit+0x30>)
		return_status = optiga_util_close_application(me_util, 0);
1000c2b8:	6828      	ldr	r0, [r5, #0]
1000c2ba:	2100      	movs	r1, #0
	{
		/**
		 * Close the application on OPTIGA after all the operations are executed
		 * using optiga_util_close_application
		 */
		optiga_lib_status = OPTIGA_LIB_BUSY;
1000c2bc:	8023      	strh	r3, [r4, #0]
		return_status = optiga_util_close_application(me_util, 0);
1000c2be:	f7f5 fb0f 	bl	100018e0 <optiga_util_close_application>

		if (OPTIGA_LIB_SUCCESS != return_status)
1000c2c2:	2800      	cmp	r0, #0
1000c2c4:	d108      	bne.n	1000c2d8 <optiga_shell_deinit+0x28>
		{
			break;
		}

		while (optiga_lib_status == OPTIGA_LIB_BUSY)
1000c2c6:	8823      	ldrh	r3, [r4, #0]
1000c2c8:	2b01      	cmp	r3, #1
1000c2ca:	d0fc      	beq.n	1000c2c6 <optiga_shell_deinit+0x16>
		{
			//Wait until the optiga_util_close_application is completed
		}

		if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
1000c2cc:	8823      	ldrh	r3, [r4, #0]
1000c2ce:	2b00      	cmp	r3, #0
1000c2d0:	d102      	bne.n	1000c2d8 <optiga_shell_deinit+0x28>
			//optiga util close application failed
			break;
		}

		// destroy util and crypt instances
		optiga_util_destroy(me_util);
1000c2d2:	6828      	ldr	r0, [r5, #0]
1000c2d4:	f7f5 faaa 	bl	1000182c <optiga_util_destroy>
	}while(FALSE);
}
1000c2d8:	bd38      	pop	{r3, r4, r5, pc}
1000c2da:	46c0      	nop			; (mov r8, r8)
1000c2dc:	20002fe4 	.word	0x20002fe4
1000c2e0:	20002fe8 	.word	0x20002fe8

1000c2e4 <optiga_shell_begin>:
{
	optiga_lib_print_string("$");
}

void optiga_shell_begin(void)
{
1000c2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t ch = 0;
1000c2e6:	2500      	movs	r5, #0
{
	optiga_lib_print_string("$");
}

void optiga_shell_begin(void)
{
1000c2e8:	b099      	sub	sp, #100	; 0x64

}

static void optiga_shell_show_prompt()
{
	optiga_lib_print_string("$");
1000c2ea:	4c38      	ldr	r4, [pc, #224]	; (1000c3cc <optiga_shell_begin+0xe8>)
}

void optiga_shell_begin(void)
{
	uint8_t ch = 0;
1000c2ec:	ab02      	add	r3, sp, #8
1000c2ee:	1cde      	adds	r6, r3, #3

}

static void optiga_shell_show_prompt()
{
	optiga_lib_print_string("$");
1000c2f0:	1c20      	adds	r0, r4, #0
}

void optiga_shell_begin(void)
{
	uint8_t ch = 0;
1000c2f2:	7035      	strb	r5, [r6, #0]

}

static void optiga_shell_show_prompt()
{
	optiga_lib_print_string("$");
1000c2f4:	f7f8 f9f6 	bl	100046e4 <optiga_lib_print_string>
	uint8_t ch = 0;
	char_t user_cmd[50];
	uint8_t index = 0;

	optiga_shell_show_prompt();
	optiga_shell_show_usage();
1000c2f8:	f7ff ffb4 	bl	1000c264 <optiga_shell_show_usage>

}

static void optiga_shell_show_prompt()
{
	optiga_lib_print_string("$");
1000c2fc:	1c20      	adds	r0, r4, #0
1000c2fe:	f7f8 f9f1 	bl	100046e4 <optiga_lib_print_string>
1000c302:	9400      	str	r4, [sp, #0]
	optiga_shell_show_usage();
	optiga_shell_show_prompt();

	while(TRUE)
	{
		if (0 == pal_logger_read(&logger_console,&ch,1))
1000c304:	4f32      	ldr	r7, [pc, #200]	; (1000c3d0 <optiga_shell_begin+0xec>)
1000c306:	1c31      	adds	r1, r6, #0
1000c308:	1c38      	adds	r0, r7, #0
1000c30a:	2201      	movs	r2, #1
1000c30c:	f7f5 f926 	bl	1000155c <pal_logger_read>
1000c310:	2800      	cmp	r0, #0
1000c312:	d1f7      	bne.n	1000c304 <optiga_shell_begin+0x20>
		{

			if(ch == 0x0d || ch == 0x0a)
1000c314:	7833      	ldrb	r3, [r6, #0]
1000c316:	ac0b      	add	r4, sp, #44	; 0x2c
1000c318:	2b0d      	cmp	r3, #13
1000c31a:	d001      	beq.n	1000c320 <optiga_shell_begin+0x3c>
1000c31c:	2b0a      	cmp	r3, #10
1000c31e:	d14b      	bne.n	1000c3b8 <optiga_shell_begin+0xd4>
			{
				user_cmd[index++] = 0;
1000c320:	2700      	movs	r7, #0
1000c322:	5567      	strb	r7, [r4, r5]
				index = 0;
				optiga_lib_print_string_with_newline("");
1000c324:	4d2b      	ldr	r5, [pc, #172]	; (1000c3d4 <optiga_shell_begin+0xf0>)
1000c326:	1c28      	adds	r0, r5, #0
1000c328:	f7f8 f9ea 	bl	10004700 <optiga_lib_print_string_with_newline>
	}
}

static void optiga_shell_trim_cmd(char_t * user_cmd)
{
	char_t* i = user_cmd;
1000c32c:	1c22      	adds	r2, r4, #0
1000c32e:	9501      	str	r5, [sp, #4]
	char_t* j = user_cmd;
	while(*j != 0)
1000c330:	5de3      	ldrb	r3, [r4, r7]
	{
		*i = *j++;
1000c332:	7013      	strb	r3, [r2, #0]

static void optiga_shell_trim_cmd(char_t * user_cmd)
{
	char_t* i = user_cmd;
	char_t* j = user_cmd;
	while(*j != 0)
1000c334:	2b00      	cmp	r3, #0
1000c336:	d005      	beq.n	1000c344 <optiga_shell_begin+0x60>
	{
		*i = *j++;
		if(*i != ' ')
			i++;
1000c338:	3b20      	subs	r3, #32
1000c33a:	1e59      	subs	r1, r3, #1
1000c33c:	418b      	sbcs	r3, r1
1000c33e:	3701      	adds	r7, #1
1000c340:	18d2      	adds	r2, r2, r3
1000c342:	e7f5      	b.n	1000c330 <optiga_shell_begin+0x4c>
	}
	*i = 0;
	if(strlen(user_cmd)>strlen(OPTIGA_SHELL))
1000c344:	1c20      	adds	r0, r4, #0
1000c346:	f000 fc40 	bl	1000cbca <strlen>
1000c34a:	2809      	cmp	r0, #9
1000c34c:	d903      	bls.n	1000c356 <optiga_shell_begin+0x72>
	{
		strcpy(user_cmd,user_cmd+strlen(OPTIGA_SHELL)-1);
1000c34e:	1c20      	adds	r0, r4, #0
1000c350:	a90d      	add	r1, sp, #52	; 0x34
1000c352:	f000 fc32 	bl	1000cbba <strcpy>
	}
}

static void optiga_shell_trim_cmd(char_t * user_cmd)
{
	char_t* i = user_cmd;
1000c356:	2700      	movs	r7, #0
1000c358:	250c      	movs	r5, #12
1000c35a:	437d      	muls	r5, r7
1000c35c:	4b1e      	ldr	r3, [pc, #120]	; (1000c3d8 <optiga_shell_begin+0xf4>)
	optiga_shell_trim_cmd(user_cmd);

	for(index = 0; index < number_of_cmds; index++)
	{
		current_cmd = &optiga_cmds[index];
		if((0 == strcmp(user_cmd,current_cmd->cmd_options)))
1000c35e:	1c20      	adds	r0, r4, #0
1000c360:	195d      	adds	r5, r3, r5
1000c362:	6869      	ldr	r1, [r5, #4]
1000c364:	f000 fc1f 	bl	1000cba6 <strcmp>
1000c368:	2800      	cmp	r0, #0
1000c36a:	d11b      	bne.n	1000c3a4 <optiga_shell_begin+0xc0>
		{
			if(NULL != current_cmd->cmd_handler)
1000c36c:	68ab      	ldr	r3, [r5, #8]
1000c36e:	2b00      	cmp	r3, #0
1000c370:	d014      	beq.n	1000c39c <optiga_shell_begin+0xb8>
			{
				int timestamp = pal_os_timer_get_time_in_milliseconds();
1000c372:	f7f5 f9b5 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
				current_cmd->cmd_handler();
1000c376:	68ab      	ldr	r3, [r5, #8]
		current_cmd = &optiga_cmds[index];
		if((0 == strcmp(user_cmd,current_cmd->cmd_options)))
		{
			if(NULL != current_cmd->cmd_handler)
			{
				int timestamp = pal_os_timer_get_time_in_milliseconds();
1000c378:	1c04      	adds	r4, r0, #0
				current_cmd->cmd_handler();
1000c37a:	4798      	blx	r3
				char buffer_string[30];
				sprintf(buffer_string, "Example takes %d msec", (int) pal_os_timer_get_time_in_milliseconds() - timestamp);
1000c37c:	f7f5 f9b0 	bl	100016e0 <pal_os_timer_get_time_in_milliseconds>
1000c380:	4916      	ldr	r1, [pc, #88]	; (1000c3dc <optiga_shell_begin+0xf8>)
1000c382:	1b02      	subs	r2, r0, r4
1000c384:	a803      	add	r0, sp, #12
1000c386:	f000 fbdf 	bl	1000cb48 <siprintf>
				OPTIGA_EXAMPLE_LOG_MESSAGE(buffer_string);
1000c38a:	a803      	add	r0, sp, #12
1000c38c:	4914      	ldr	r1, [pc, #80]	; (1000c3e0 <optiga_shell_begin+0xfc>)
1000c38e:	4a15      	ldr	r2, [pc, #84]	; (1000c3e4 <optiga_shell_begin+0x100>)
1000c390:	f7f8 f9d2 	bl	10004738 <optiga_lib_print_message>
				optiga_lib_print_string_with_newline("");
1000c394:	9801      	ldr	r0, [sp, #4]
1000c396:	f7f8 f9b3 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c39a:	e008      	b.n	1000c3ae <optiga_shell_begin+0xca>
				cmd_found = 1;
				break;
			}
			else
			{
				optiga_lib_print_string_with_newline("No example exists for this request");
1000c39c:	4812      	ldr	r0, [pc, #72]	; (1000c3e8 <optiga_shell_begin+0x104>)
1000c39e:	f7f8 f9af 	bl	10004700 <optiga_lib_print_string_with_newline>
1000c3a2:	e002      	b.n	1000c3aa <optiga_shell_begin+0xc6>
1000c3a4:	3701      	adds	r7, #1
	uint8_t index = 0,cmd_found = 0;
	optiga_example_cmd_t * current_cmd;

	optiga_shell_trim_cmd(user_cmd);

	for(index = 0; index < number_of_cmds; index++)
1000c3a6:	2f18      	cmp	r7, #24
1000c3a8:	d1d6      	bne.n	1000c358 <optiga_shell_begin+0x74>
			}
		}
	}
	if(!cmd_found)
	{
		optiga_shell_show_usage();
1000c3aa:	f7ff ff5b 	bl	1000c264 <optiga_shell_show_usage>

}

static void optiga_shell_show_prompt()
{
	optiga_lib_print_string("$");
1000c3ae:	9800      	ldr	r0, [sp, #0]
1000c3b0:	f7f8 f998 	bl	100046e4 <optiga_lib_print_string>
		{

			if(ch == 0x0d || ch == 0x0a)
			{
				user_cmd[index++] = 0;
				index = 0;
1000c3b4:	2500      	movs	r5, #0
1000c3b6:	e7a5      	b.n	1000c304 <optiga_shell_begin+0x20>
				optiga_shell_show_prompt();
			}
			else
			{
				//keep adding
				pal_logger_write(&logger_console, &ch, 1);
1000c3b8:	2201      	movs	r2, #1
1000c3ba:	1c38      	adds	r0, r7, #0
1000c3bc:	1c31      	adds	r1, r6, #0
1000c3be:	f7f5 f8ab 	bl	10001518 <pal_logger_write>
				user_cmd[index++] = ch;
1000c3c2:	7832      	ldrb	r2, [r6, #0]
1000c3c4:	1c6b      	adds	r3, r5, #1
1000c3c6:	5562      	strb	r2, [r4, r5]
1000c3c8:	b2dd      	uxtb	r5, r3
1000c3ca:	e79b      	b.n	1000c304 <optiga_shell_begin+0x20>
1000c3cc:	100119e4 	.word	0x100119e4
1000c3d0:	2000156c 	.word	0x2000156c
1000c3d4:	10011901 	.word	0x10011901
1000c3d8:	20002714 	.word	0x20002714
1000c3dc:	100119a0 	.word	0x100119a0
1000c3e0:	10010644 	.word	0x10010644
1000c3e4:	1000d2dc 	.word	0x1000d2dc
1000c3e8:	100119e6 	.word	0x100119e6

1000c3ec <optiga_shell_wait_for_user>:
		}
	}
}

void optiga_shell_wait_for_user(void)
{
1000c3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t ch = 0;
1000c3ee:	466b      	mov	r3, sp
1000c3f0:	1ddd      	adds	r5, r3, #7
1000c3f2:	2300      	movs	r3, #0

	optiga_lib_print_string_with_newline("Press any key to start optiga mini shell");
1000c3f4:	4c0a      	ldr	r4, [pc, #40]	; (1000c420 <optiga_shell_wait_for_user+0x34>)
	}
}

void optiga_shell_wait_for_user(void)
{
	uint8_t ch = 0;
1000c3f6:	702b      	strb	r3, [r5, #0]

	optiga_lib_print_string_with_newline("Press any key to start optiga mini shell");
1000c3f8:	1c20      	adds	r0, r4, #0
1000c3fa:	f7f8 f981 	bl	10004700 <optiga_lib_print_string_with_newline>
	while(1U)
	{
		pal_logger_read(&logger_console,&ch,1);
1000c3fe:	4809      	ldr	r0, [pc, #36]	; (1000c424 <optiga_shell_wait_for_user+0x38>)
1000c400:	1c29      	adds	r1, r5, #0
1000c402:	2201      	movs	r2, #1
1000c404:	f7f5 f8aa 	bl	1000155c <pal_logger_read>
		if (ch != 0)
1000c408:	782b      	ldrb	r3, [r5, #0]
1000c40a:	2b00      	cmp	r3, #0
1000c40c:	d107      	bne.n	1000c41e <optiga_shell_wait_for_user+0x32>
		{
			break;
		}
		else
		{
			optiga_lib_print_string_with_newline("Press any key to start optiga mini shell");
1000c40e:	1c20      	adds	r0, r4, #0
1000c410:	f7f8 f976 	bl	10004700 <optiga_lib_print_string_with_newline>
			pal_os_timer_delay_in_milliseconds(2000);
1000c414:	20fa      	movs	r0, #250	; 0xfa
1000c416:	00c0      	lsls	r0, r0, #3
1000c418:	f7f5 f968 	bl	100016ec <pal_os_timer_delay_in_milliseconds>
		}
	}
1000c41c:	e7ef      	b.n	1000c3fe <optiga_shell_wait_for_user+0x12>
}
1000c41e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
1000c420:	10011a09 	.word	0x10011a09
1000c424:	2000156c 	.word	0x2000156c

1000c428 <__gnu_thumb1_case_uqi>:
1000c428:	b402      	push	{r1}
1000c42a:	4671      	mov	r1, lr
1000c42c:	0849      	lsrs	r1, r1, #1
1000c42e:	0049      	lsls	r1, r1, #1
1000c430:	5c09      	ldrb	r1, [r1, r0]
1000c432:	0049      	lsls	r1, r1, #1
1000c434:	448e      	add	lr, r1
1000c436:	bc02      	pop	{r1}
1000c438:	4770      	bx	lr
1000c43a:	46c0      	nop			; (mov r8, r8)

1000c43c <__gnu_thumb1_case_uhi>:
1000c43c:	b403      	push	{r0, r1}
1000c43e:	4671      	mov	r1, lr
1000c440:	0849      	lsrs	r1, r1, #1
1000c442:	0040      	lsls	r0, r0, #1
1000c444:	0049      	lsls	r1, r1, #1
1000c446:	5a09      	ldrh	r1, [r1, r0]
1000c448:	0049      	lsls	r1, r1, #1
1000c44a:	448e      	add	lr, r1
1000c44c:	bc03      	pop	{r0, r1}
1000c44e:	4770      	bx	lr

1000c450 <__aeabi_llsr>:
1000c450:	40d0      	lsrs	r0, r2
1000c452:	1c0b      	adds	r3, r1, #0
1000c454:	40d1      	lsrs	r1, r2
1000c456:	469c      	mov	ip, r3
1000c458:	3a20      	subs	r2, #32
1000c45a:	40d3      	lsrs	r3, r2
1000c45c:	4318      	orrs	r0, r3
1000c45e:	4252      	negs	r2, r2
1000c460:	4663      	mov	r3, ip
1000c462:	4093      	lsls	r3, r2
1000c464:	4318      	orrs	r0, r3
1000c466:	4770      	bx	lr

1000c468 <__aeabi_uldivmod>:
1000c468:	2b00      	cmp	r3, #0
1000c46a:	d111      	bne.n	1000c490 <__aeabi_uldivmod+0x28>
1000c46c:	2a00      	cmp	r2, #0
1000c46e:	d10f      	bne.n	1000c490 <__aeabi_uldivmod+0x28>
1000c470:	2900      	cmp	r1, #0
1000c472:	d100      	bne.n	1000c476 <__aeabi_uldivmod+0xe>
1000c474:	2800      	cmp	r0, #0
1000c476:	d002      	beq.n	1000c47e <__aeabi_uldivmod+0x16>
1000c478:	2100      	movs	r1, #0
1000c47a:	43c9      	mvns	r1, r1
1000c47c:	1c08      	adds	r0, r1, #0
1000c47e:	b407      	push	{r0, r1, r2}
1000c480:	4802      	ldr	r0, [pc, #8]	; (1000c48c <__aeabi_uldivmod+0x24>)
1000c482:	a102      	add	r1, pc, #8	; (adr r1, 1000c48c <__aeabi_uldivmod+0x24>)
1000c484:	1840      	adds	r0, r0, r1
1000c486:	9002      	str	r0, [sp, #8]
1000c488:	bd03      	pop	{r0, r1, pc}
1000c48a:	46c0      	nop			; (mov r8, r8)
1000c48c:	000000dd 	.word	0x000000dd
1000c490:	b403      	push	{r0, r1}
1000c492:	4668      	mov	r0, sp
1000c494:	b501      	push	{r0, lr}
1000c496:	9802      	ldr	r0, [sp, #8]
1000c498:	f000 f84c 	bl	1000c534 <__gnu_uldivmod_helper>
1000c49c:	9b01      	ldr	r3, [sp, #4]
1000c49e:	469e      	mov	lr, r3
1000c4a0:	b002      	add	sp, #8
1000c4a2:	bc0c      	pop	{r2, r3}
1000c4a4:	4770      	bx	lr
1000c4a6:	46c0      	nop			; (mov r8, r8)

1000c4a8 <__aeabi_lmul>:
1000c4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4aa:	464f      	mov	r7, r9
1000c4ac:	4646      	mov	r6, r8
1000c4ae:	0405      	lsls	r5, r0, #16
1000c4b0:	0c2d      	lsrs	r5, r5, #16
1000c4b2:	1c2c      	adds	r4, r5, #0
1000c4b4:	b4c0      	push	{r6, r7}
1000c4b6:	0417      	lsls	r7, r2, #16
1000c4b8:	0c16      	lsrs	r6, r2, #16
1000c4ba:	0c3f      	lsrs	r7, r7, #16
1000c4bc:	4699      	mov	r9, r3
1000c4be:	0c03      	lsrs	r3, r0, #16
1000c4c0:	437c      	muls	r4, r7
1000c4c2:	4375      	muls	r5, r6
1000c4c4:	435f      	muls	r7, r3
1000c4c6:	4373      	muls	r3, r6
1000c4c8:	197d      	adds	r5, r7, r5
1000c4ca:	0c26      	lsrs	r6, r4, #16
1000c4cc:	19ad      	adds	r5, r5, r6
1000c4ce:	469c      	mov	ip, r3
1000c4d0:	42af      	cmp	r7, r5
1000c4d2:	d903      	bls.n	1000c4dc <__aeabi_lmul+0x34>
1000c4d4:	2380      	movs	r3, #128	; 0x80
1000c4d6:	025b      	lsls	r3, r3, #9
1000c4d8:	4698      	mov	r8, r3
1000c4da:	44c4      	add	ip, r8
1000c4dc:	464b      	mov	r3, r9
1000c4de:	4351      	muls	r1, r2
1000c4e0:	4343      	muls	r3, r0
1000c4e2:	0424      	lsls	r4, r4, #16
1000c4e4:	0c2e      	lsrs	r6, r5, #16
1000c4e6:	0c24      	lsrs	r4, r4, #16
1000c4e8:	042d      	lsls	r5, r5, #16
1000c4ea:	4466      	add	r6, ip
1000c4ec:	192c      	adds	r4, r5, r4
1000c4ee:	1859      	adds	r1, r3, r1
1000c4f0:	1989      	adds	r1, r1, r6
1000c4f2:	1c20      	adds	r0, r4, #0
1000c4f4:	bc0c      	pop	{r2, r3}
1000c4f6:	4690      	mov	r8, r2
1000c4f8:	4699      	mov	r9, r3
1000c4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000c4fc <__gnu_ldivmod_helper>:
1000c4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4fe:	b083      	sub	sp, #12
1000c500:	1c16      	adds	r6, r2, #0
1000c502:	1c1f      	adds	r7, r3, #0
1000c504:	9000      	str	r0, [sp, #0]
1000c506:	9101      	str	r1, [sp, #4]
1000c508:	f000 f84e 	bl	1000c5a8 <__divdi3>
1000c50c:	1c04      	adds	r4, r0, #0
1000c50e:	1c0d      	adds	r5, r1, #0
1000c510:	1c22      	adds	r2, r4, #0
1000c512:	1c2b      	adds	r3, r5, #0
1000c514:	1c30      	adds	r0, r6, #0
1000c516:	1c39      	adds	r1, r7, #0
1000c518:	f7ff ffc6 	bl	1000c4a8 <__aeabi_lmul>
1000c51c:	9a00      	ldr	r2, [sp, #0]
1000c51e:	9b01      	ldr	r3, [sp, #4]
1000c520:	1a12      	subs	r2, r2, r0
1000c522:	418b      	sbcs	r3, r1
1000c524:	9908      	ldr	r1, [sp, #32]
1000c526:	1c20      	adds	r0, r4, #0
1000c528:	600a      	str	r2, [r1, #0]
1000c52a:	604b      	str	r3, [r1, #4]
1000c52c:	1c29      	adds	r1, r5, #0
1000c52e:	b003      	add	sp, #12
1000c530:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c532:	46c0      	nop			; (mov r8, r8)

1000c534 <__gnu_uldivmod_helper>:
1000c534:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c536:	1c14      	adds	r4, r2, #0
1000c538:	b083      	sub	sp, #12
1000c53a:	1c1d      	adds	r5, r3, #0
1000c53c:	9000      	str	r0, [sp, #0]
1000c53e:	9101      	str	r1, [sp, #4]
1000c540:	f000 f92a 	bl	1000c798 <__udivdi3>
1000c544:	1c22      	adds	r2, r4, #0
1000c546:	1c2b      	adds	r3, r5, #0
1000c548:	1c06      	adds	r6, r0, #0
1000c54a:	1c0f      	adds	r7, r1, #0
1000c54c:	f7ff ffac 	bl	1000c4a8 <__aeabi_lmul>
1000c550:	9a00      	ldr	r2, [sp, #0]
1000c552:	9b01      	ldr	r3, [sp, #4]
1000c554:	1a12      	subs	r2, r2, r0
1000c556:	418b      	sbcs	r3, r1
1000c558:	9908      	ldr	r1, [sp, #32]
1000c55a:	1c30      	adds	r0, r6, #0
1000c55c:	600a      	str	r2, [r1, #0]
1000c55e:	604b      	str	r3, [r1, #4]
1000c560:	1c39      	adds	r1, r7, #0
1000c562:	b003      	add	sp, #12
1000c564:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c566:	46c0      	nop			; (mov r8, r8)

1000c568 <__aeabi_idiv0>:
1000c568:	4770      	bx	lr
1000c56a:	46c0      	nop			; (mov r8, r8)

1000c56c <__clzsi2>:
1000c56c:	211c      	movs	r1, #28
1000c56e:	2301      	movs	r3, #1
1000c570:	041b      	lsls	r3, r3, #16
1000c572:	4298      	cmp	r0, r3
1000c574:	d301      	bcc.n	1000c57a <__clzsi2+0xe>
1000c576:	0c00      	lsrs	r0, r0, #16
1000c578:	3910      	subs	r1, #16
1000c57a:	0a1b      	lsrs	r3, r3, #8
1000c57c:	4298      	cmp	r0, r3
1000c57e:	d301      	bcc.n	1000c584 <__clzsi2+0x18>
1000c580:	0a00      	lsrs	r0, r0, #8
1000c582:	3908      	subs	r1, #8
1000c584:	091b      	lsrs	r3, r3, #4
1000c586:	4298      	cmp	r0, r3
1000c588:	d301      	bcc.n	1000c58e <__clzsi2+0x22>
1000c58a:	0900      	lsrs	r0, r0, #4
1000c58c:	3904      	subs	r1, #4
1000c58e:	a202      	add	r2, pc, #8	; (adr r2, 1000c598 <__clzsi2+0x2c>)
1000c590:	5c10      	ldrb	r0, [r2, r0]
1000c592:	1840      	adds	r0, r0, r1
1000c594:	4770      	bx	lr
1000c596:	46c0      	nop			; (mov r8, r8)
1000c598:	02020304 	.word	0x02020304
1000c59c:	01010101 	.word	0x01010101
	...

1000c5a8 <__divdi3>:
1000c5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c5aa:	4644      	mov	r4, r8
1000c5ac:	465f      	mov	r7, fp
1000c5ae:	4656      	mov	r6, sl
1000c5b0:	464d      	mov	r5, r9
1000c5b2:	b4f0      	push	{r4, r5, r6, r7}
1000c5b4:	1c1c      	adds	r4, r3, #0
1000c5b6:	b085      	sub	sp, #20
1000c5b8:	2900      	cmp	r1, #0
1000c5ba:	da00      	bge.n	1000c5be <__divdi3+0x16>
1000c5bc:	e0a9      	b.n	1000c712 <__divdi3+0x16a>
1000c5be:	1c0f      	adds	r7, r1, #0
1000c5c0:	2100      	movs	r1, #0
1000c5c2:	1c06      	adds	r6, r0, #0
1000c5c4:	4688      	mov	r8, r1
1000c5c6:	1c10      	adds	r0, r2, #0
1000c5c8:	1c19      	adds	r1, r3, #0
1000c5ca:	2c00      	cmp	r4, #0
1000c5cc:	da00      	bge.n	1000c5d0 <__divdi3+0x28>
1000c5ce:	e097      	b.n	1000c700 <__divdi3+0x158>
1000c5d0:	1c34      	adds	r4, r6, #0
1000c5d2:	1c3d      	adds	r5, r7, #0
1000c5d4:	4682      	mov	sl, r0
1000c5d6:	4689      	mov	r9, r1
1000c5d8:	42b9      	cmp	r1, r7
1000c5da:	d873      	bhi.n	1000c6c4 <__divdi3+0x11c>
1000c5dc:	d070      	beq.n	1000c6c0 <__divdi3+0x118>
1000c5de:	4649      	mov	r1, r9
1000c5e0:	4650      	mov	r0, sl
1000c5e2:	f000 f985 	bl	1000c8f0 <__clzdi2>
1000c5e6:	4683      	mov	fp, r0
1000c5e8:	1c39      	adds	r1, r7, #0
1000c5ea:	1c30      	adds	r0, r6, #0
1000c5ec:	f000 f980 	bl	1000c8f0 <__clzdi2>
1000c5f0:	465b      	mov	r3, fp
1000c5f2:	1a18      	subs	r0, r3, r0
1000c5f4:	1c03      	adds	r3, r0, #0
1000c5f6:	4683      	mov	fp, r0
1000c5f8:	3b20      	subs	r3, #32
1000c5fa:	469c      	mov	ip, r3
1000c5fc:	d500      	bpl.n	1000c600 <__divdi3+0x58>
1000c5fe:	e09c      	b.n	1000c73a <__divdi3+0x192>
1000c600:	2300      	movs	r3, #0
1000c602:	2200      	movs	r2, #0
1000c604:	4651      	mov	r1, sl
1000c606:	9200      	str	r2, [sp, #0]
1000c608:	9301      	str	r3, [sp, #4]
1000c60a:	4663      	mov	r3, ip
1000c60c:	4099      	lsls	r1, r3
1000c60e:	9101      	str	r1, [sp, #4]
1000c610:	4651      	mov	r1, sl
1000c612:	4081      	lsls	r1, r0
1000c614:	9b01      	ldr	r3, [sp, #4]
1000c616:	9100      	str	r1, [sp, #0]
1000c618:	42bb      	cmp	r3, r7
1000c61a:	d900      	bls.n	1000c61e <__divdi3+0x76>
1000c61c:	e083      	b.n	1000c726 <__divdi3+0x17e>
1000c61e:	d100      	bne.n	1000c622 <__divdi3+0x7a>
1000c620:	e07e      	b.n	1000c720 <__divdi3+0x178>
1000c622:	9a00      	ldr	r2, [sp, #0]
1000c624:	9b01      	ldr	r3, [sp, #4]
1000c626:	1c34      	adds	r4, r6, #0
1000c628:	1c3d      	adds	r5, r7, #0
1000c62a:	1aa4      	subs	r4, r4, r2
1000c62c:	419d      	sbcs	r5, r3
1000c62e:	4663      	mov	r3, ip
1000c630:	2b00      	cmp	r3, #0
1000c632:	da00      	bge.n	1000c636 <__divdi3+0x8e>
1000c634:	e09a      	b.n	1000c76c <__divdi3+0x1c4>
1000c636:	2600      	movs	r6, #0
1000c638:	2700      	movs	r7, #0
1000c63a:	9602      	str	r6, [sp, #8]
1000c63c:	9703      	str	r7, [sp, #12]
1000c63e:	3601      	adds	r6, #1
1000c640:	409e      	lsls	r6, r3
1000c642:	9603      	str	r6, [sp, #12]
1000c644:	2601      	movs	r6, #1
1000c646:	4086      	lsls	r6, r0
1000c648:	9602      	str	r6, [sp, #8]
1000c64a:	2800      	cmp	r0, #0
1000c64c:	d100      	bne.n	1000c650 <__divdi3+0xa8>
1000c64e:	e071      	b.n	1000c734 <__divdi3+0x18c>
1000c650:	9900      	ldr	r1, [sp, #0]
1000c652:	9a01      	ldr	r2, [sp, #4]
1000c654:	07d3      	lsls	r3, r2, #31
1000c656:	4699      	mov	r9, r3
1000c658:	464b      	mov	r3, r9
1000c65a:	084e      	lsrs	r6, r1, #1
1000c65c:	431e      	orrs	r6, r3
1000c65e:	0857      	lsrs	r7, r2, #1
1000c660:	2300      	movs	r3, #0
1000c662:	2201      	movs	r2, #1
1000c664:	e00c      	b.n	1000c680 <__divdi3+0xd8>
1000c666:	42af      	cmp	r7, r5
1000c668:	d101      	bne.n	1000c66e <__divdi3+0xc6>
1000c66a:	42a6      	cmp	r6, r4
1000c66c:	d80a      	bhi.n	1000c684 <__divdi3+0xdc>
1000c66e:	1ba4      	subs	r4, r4, r6
1000c670:	41bd      	sbcs	r5, r7
1000c672:	1924      	adds	r4, r4, r4
1000c674:	416d      	adcs	r5, r5
1000c676:	3801      	subs	r0, #1
1000c678:	18a4      	adds	r4, r4, r2
1000c67a:	415d      	adcs	r5, r3
1000c67c:	2800      	cmp	r0, #0
1000c67e:	d006      	beq.n	1000c68e <__divdi3+0xe6>
1000c680:	42af      	cmp	r7, r5
1000c682:	d9f0      	bls.n	1000c666 <__divdi3+0xbe>
1000c684:	3801      	subs	r0, #1
1000c686:	1924      	adds	r4, r4, r4
1000c688:	416d      	adcs	r5, r5
1000c68a:	2800      	cmp	r0, #0
1000c68c:	d1f8      	bne.n	1000c680 <__divdi3+0xd8>
1000c68e:	2220      	movs	r2, #32
1000c690:	9e02      	ldr	r6, [sp, #8]
1000c692:	9f03      	ldr	r7, [sp, #12]
1000c694:	465b      	mov	r3, fp
1000c696:	4252      	negs	r2, r2
1000c698:	1936      	adds	r6, r6, r4
1000c69a:	416f      	adcs	r7, r5
1000c69c:	1899      	adds	r1, r3, r2
1000c69e:	d45a      	bmi.n	1000c756 <__divdi3+0x1ae>
1000c6a0:	1c28      	adds	r0, r5, #0
1000c6a2:	40c8      	lsrs	r0, r1
1000c6a4:	1c2c      	adds	r4, r5, #0
1000c6a6:	465b      	mov	r3, fp
1000c6a8:	40dc      	lsrs	r4, r3
1000c6aa:	2900      	cmp	r1, #0
1000c6ac:	db68      	blt.n	1000c780 <__divdi3+0x1d8>
1000c6ae:	1c04      	adds	r4, r0, #0
1000c6b0:	408c      	lsls	r4, r1
1000c6b2:	1c23      	adds	r3, r4, #0
1000c6b4:	4659      	mov	r1, fp
1000c6b6:	4088      	lsls	r0, r1
1000c6b8:	1c02      	adds	r2, r0, #0
1000c6ba:	1ab6      	subs	r6, r6, r2
1000c6bc:	419f      	sbcs	r7, r3
1000c6be:	e003      	b.n	1000c6c8 <__divdi3+0x120>
1000c6c0:	42b0      	cmp	r0, r6
1000c6c2:	d98c      	bls.n	1000c5de <__divdi3+0x36>
1000c6c4:	2600      	movs	r6, #0
1000c6c6:	2700      	movs	r7, #0
1000c6c8:	4641      	mov	r1, r8
1000c6ca:	1e4b      	subs	r3, r1, #1
1000c6cc:	4199      	sbcs	r1, r3
1000c6ce:	2300      	movs	r3, #0
1000c6d0:	9100      	str	r1, [sp, #0]
1000c6d2:	9301      	str	r3, [sp, #4]
1000c6d4:	9a00      	ldr	r2, [sp, #0]
1000c6d6:	9b01      	ldr	r3, [sp, #4]
1000c6d8:	2500      	movs	r5, #0
1000c6da:	4254      	negs	r4, r2
1000c6dc:	419d      	sbcs	r5, r3
1000c6de:	1c33      	adds	r3, r6, #0
1000c6e0:	4063      	eors	r3, r4
1000c6e2:	1c18      	adds	r0, r3, #0
1000c6e4:	1c3b      	adds	r3, r7, #0
1000c6e6:	406b      	eors	r3, r5
1000c6e8:	1c19      	adds	r1, r3, #0
1000c6ea:	9b00      	ldr	r3, [sp, #0]
1000c6ec:	9c01      	ldr	r4, [sp, #4]
1000c6ee:	18c0      	adds	r0, r0, r3
1000c6f0:	4161      	adcs	r1, r4
1000c6f2:	b005      	add	sp, #20
1000c6f4:	bc3c      	pop	{r2, r3, r4, r5}
1000c6f6:	4690      	mov	r8, r2
1000c6f8:	4699      	mov	r9, r3
1000c6fa:	46a2      	mov	sl, r4
1000c6fc:	46ab      	mov	fp, r5
1000c6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c700:	4643      	mov	r3, r8
1000c702:	43db      	mvns	r3, r3
1000c704:	1c0c      	adds	r4, r1, #0
1000c706:	4698      	mov	r8, r3
1000c708:	1c13      	adds	r3, r2, #0
1000c70a:	2100      	movs	r1, #0
1000c70c:	4258      	negs	r0, r3
1000c70e:	41a1      	sbcs	r1, r4
1000c710:	e75e      	b.n	1000c5d0 <__divdi3+0x28>
1000c712:	2700      	movs	r7, #0
1000c714:	4246      	negs	r6, r0
1000c716:	418f      	sbcs	r7, r1
1000c718:	2101      	movs	r1, #1
1000c71a:	4249      	negs	r1, r1
1000c71c:	4688      	mov	r8, r1
1000c71e:	e752      	b.n	1000c5c6 <__divdi3+0x1e>
1000c720:	42b1      	cmp	r1, r6
1000c722:	d800      	bhi.n	1000c726 <__divdi3+0x17e>
1000c724:	e77d      	b.n	1000c622 <__divdi3+0x7a>
1000c726:	2600      	movs	r6, #0
1000c728:	2700      	movs	r7, #0
1000c72a:	9602      	str	r6, [sp, #8]
1000c72c:	9703      	str	r7, [sp, #12]
1000c72e:	2800      	cmp	r0, #0
1000c730:	d000      	beq.n	1000c734 <__divdi3+0x18c>
1000c732:	e78d      	b.n	1000c650 <__divdi3+0xa8>
1000c734:	9e02      	ldr	r6, [sp, #8]
1000c736:	9f03      	ldr	r7, [sp, #12]
1000c738:	e7c6      	b.n	1000c6c8 <__divdi3+0x120>
1000c73a:	2120      	movs	r1, #32
1000c73c:	4653      	mov	r3, sl
1000c73e:	1a09      	subs	r1, r1, r0
1000c740:	40cb      	lsrs	r3, r1
1000c742:	2200      	movs	r2, #0
1000c744:	1c19      	adds	r1, r3, #0
1000c746:	2300      	movs	r3, #0
1000c748:	9200      	str	r2, [sp, #0]
1000c74a:	9301      	str	r3, [sp, #4]
1000c74c:	464b      	mov	r3, r9
1000c74e:	4083      	lsls	r3, r0
1000c750:	430b      	orrs	r3, r1
1000c752:	9301      	str	r3, [sp, #4]
1000c754:	e75c      	b.n	1000c610 <__divdi3+0x68>
1000c756:	465a      	mov	r2, fp
1000c758:	2320      	movs	r3, #32
1000c75a:	1a9b      	subs	r3, r3, r2
1000c75c:	1c2a      	adds	r2, r5, #0
1000c75e:	409a      	lsls	r2, r3
1000c760:	1c20      	adds	r0, r4, #0
1000c762:	1c13      	adds	r3, r2, #0
1000c764:	465a      	mov	r2, fp
1000c766:	40d0      	lsrs	r0, r2
1000c768:	4318      	orrs	r0, r3
1000c76a:	e79b      	b.n	1000c6a4 <__divdi3+0xfc>
1000c76c:	2620      	movs	r6, #32
1000c76e:	2700      	movs	r7, #0
1000c770:	1a33      	subs	r3, r6, r0
1000c772:	2600      	movs	r6, #0
1000c774:	9602      	str	r6, [sp, #8]
1000c776:	9703      	str	r7, [sp, #12]
1000c778:	2701      	movs	r7, #1
1000c77a:	40df      	lsrs	r7, r3
1000c77c:	9703      	str	r7, [sp, #12]
1000c77e:	e761      	b.n	1000c644 <__divdi3+0x9c>
1000c780:	465b      	mov	r3, fp
1000c782:	2120      	movs	r1, #32
1000c784:	465d      	mov	r5, fp
1000c786:	1ac9      	subs	r1, r1, r3
1000c788:	1c03      	adds	r3, r0, #0
1000c78a:	40ac      	lsls	r4, r5
1000c78c:	40cb      	lsrs	r3, r1
1000c78e:	1c19      	adds	r1, r3, #0
1000c790:	1c23      	adds	r3, r4, #0
1000c792:	430b      	orrs	r3, r1
1000c794:	e78e      	b.n	1000c6b4 <__divdi3+0x10c>
1000c796:	46c0      	nop			; (mov r8, r8)

1000c798 <__udivdi3>:
1000c798:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c79a:	4645      	mov	r5, r8
1000c79c:	464e      	mov	r6, r9
1000c79e:	4657      	mov	r7, sl
1000c7a0:	b4e0      	push	{r5, r6, r7}
1000c7a2:	1c04      	adds	r4, r0, #0
1000c7a4:	b082      	sub	sp, #8
1000c7a6:	1c0d      	adds	r5, r1, #0
1000c7a8:	4691      	mov	r9, r2
1000c7aa:	4698      	mov	r8, r3
1000c7ac:	428b      	cmp	r3, r1
1000c7ae:	d862      	bhi.n	1000c876 <__udivdi3+0xde>
1000c7b0:	d05f      	beq.n	1000c872 <__udivdi3+0xda>
1000c7b2:	4641      	mov	r1, r8
1000c7b4:	4648      	mov	r0, r9
1000c7b6:	f000 f89b 	bl	1000c8f0 <__clzdi2>
1000c7ba:	1c29      	adds	r1, r5, #0
1000c7bc:	1c06      	adds	r6, r0, #0
1000c7be:	1c20      	adds	r0, r4, #0
1000c7c0:	f000 f896 	bl	1000c8f0 <__clzdi2>
1000c7c4:	2320      	movs	r3, #32
1000c7c6:	1a31      	subs	r1, r6, r0
1000c7c8:	425b      	negs	r3, r3
1000c7ca:	468a      	mov	sl, r1
1000c7cc:	18c8      	adds	r0, r1, r3
1000c7ce:	d465      	bmi.n	1000c89c <__udivdi3+0x104>
1000c7d0:	464b      	mov	r3, r9
1000c7d2:	4083      	lsls	r3, r0
1000c7d4:	1c1f      	adds	r7, r3, #0
1000c7d6:	464b      	mov	r3, r9
1000c7d8:	408b      	lsls	r3, r1
1000c7da:	1c1e      	adds	r6, r3, #0
1000c7dc:	42af      	cmp	r7, r5
1000c7de:	d858      	bhi.n	1000c892 <__udivdi3+0xfa>
1000c7e0:	d055      	beq.n	1000c88e <__udivdi3+0xf6>
1000c7e2:	1ba4      	subs	r4, r4, r6
1000c7e4:	41bd      	sbcs	r5, r7
1000c7e6:	2800      	cmp	r0, #0
1000c7e8:	da00      	bge.n	1000c7ec <__udivdi3+0x54>
1000c7ea:	e077      	b.n	1000c8dc <__udivdi3+0x144>
1000c7ec:	2200      	movs	r2, #0
1000c7ee:	2300      	movs	r3, #0
1000c7f0:	9200      	str	r2, [sp, #0]
1000c7f2:	9301      	str	r3, [sp, #4]
1000c7f4:	3201      	adds	r2, #1
1000c7f6:	4082      	lsls	r2, r0
1000c7f8:	9201      	str	r2, [sp, #4]
1000c7fa:	2301      	movs	r3, #1
1000c7fc:	408b      	lsls	r3, r1
1000c7fe:	9300      	str	r3, [sp, #0]
1000c800:	2900      	cmp	r1, #0
1000c802:	d03c      	beq.n	1000c87e <__udivdi3+0xe6>
1000c804:	07fb      	lsls	r3, r7, #31
1000c806:	4698      	mov	r8, r3
1000c808:	4640      	mov	r0, r8
1000c80a:	0872      	lsrs	r2, r6, #1
1000c80c:	087b      	lsrs	r3, r7, #1
1000c80e:	4302      	orrs	r2, r0
1000c810:	2601      	movs	r6, #1
1000c812:	2700      	movs	r7, #0
1000c814:	e00c      	b.n	1000c830 <__udivdi3+0x98>
1000c816:	42ab      	cmp	r3, r5
1000c818:	d101      	bne.n	1000c81e <__udivdi3+0x86>
1000c81a:	42a2      	cmp	r2, r4
1000c81c:	d80a      	bhi.n	1000c834 <__udivdi3+0x9c>
1000c81e:	1aa4      	subs	r4, r4, r2
1000c820:	419d      	sbcs	r5, r3
1000c822:	1924      	adds	r4, r4, r4
1000c824:	416d      	adcs	r5, r5
1000c826:	3901      	subs	r1, #1
1000c828:	19a4      	adds	r4, r4, r6
1000c82a:	417d      	adcs	r5, r7
1000c82c:	2900      	cmp	r1, #0
1000c82e:	d006      	beq.n	1000c83e <__udivdi3+0xa6>
1000c830:	42ab      	cmp	r3, r5
1000c832:	d9f0      	bls.n	1000c816 <__udivdi3+0x7e>
1000c834:	3901      	subs	r1, #1
1000c836:	1924      	adds	r4, r4, r4
1000c838:	416d      	adcs	r5, r5
1000c83a:	2900      	cmp	r1, #0
1000c83c:	d1f8      	bne.n	1000c830 <__udivdi3+0x98>
1000c83e:	2220      	movs	r2, #32
1000c840:	9800      	ldr	r0, [sp, #0]
1000c842:	9901      	ldr	r1, [sp, #4]
1000c844:	4653      	mov	r3, sl
1000c846:	4252      	negs	r2, r2
1000c848:	1900      	adds	r0, r0, r4
1000c84a:	4169      	adcs	r1, r5
1000c84c:	189e      	adds	r6, r3, r2
1000c84e:	d43a      	bmi.n	1000c8c6 <__udivdi3+0x12e>
1000c850:	1c2f      	adds	r7, r5, #0
1000c852:	40f7      	lsrs	r7, r6
1000c854:	4653      	mov	r3, sl
1000c856:	40dd      	lsrs	r5, r3
1000c858:	2e00      	cmp	r6, #0
1000c85a:	db29      	blt.n	1000c8b0 <__udivdi3+0x118>
1000c85c:	1c3c      	adds	r4, r7, #0
1000c85e:	40b4      	lsls	r4, r6
1000c860:	1c23      	adds	r3, r4, #0
1000c862:	4654      	mov	r4, sl
1000c864:	40a7      	lsls	r7, r4
1000c866:	1c3a      	adds	r2, r7, #0
1000c868:	1a80      	subs	r0, r0, r2
1000c86a:	4199      	sbcs	r1, r3
1000c86c:	9000      	str	r0, [sp, #0]
1000c86e:	9101      	str	r1, [sp, #4]
1000c870:	e005      	b.n	1000c87e <__udivdi3+0xe6>
1000c872:	4282      	cmp	r2, r0
1000c874:	d99d      	bls.n	1000c7b2 <__udivdi3+0x1a>
1000c876:	2300      	movs	r3, #0
1000c878:	2400      	movs	r4, #0
1000c87a:	9300      	str	r3, [sp, #0]
1000c87c:	9401      	str	r4, [sp, #4]
1000c87e:	9800      	ldr	r0, [sp, #0]
1000c880:	9901      	ldr	r1, [sp, #4]
1000c882:	b002      	add	sp, #8
1000c884:	bc1c      	pop	{r2, r3, r4}
1000c886:	4690      	mov	r8, r2
1000c888:	4699      	mov	r9, r3
1000c88a:	46a2      	mov	sl, r4
1000c88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c88e:	42a3      	cmp	r3, r4
1000c890:	d9a7      	bls.n	1000c7e2 <__udivdi3+0x4a>
1000c892:	2200      	movs	r2, #0
1000c894:	2300      	movs	r3, #0
1000c896:	9200      	str	r2, [sp, #0]
1000c898:	9301      	str	r3, [sp, #4]
1000c89a:	e7b1      	b.n	1000c800 <__udivdi3+0x68>
1000c89c:	2220      	movs	r2, #32
1000c89e:	464b      	mov	r3, r9
1000c8a0:	1a52      	subs	r2, r2, r1
1000c8a2:	40d3      	lsrs	r3, r2
1000c8a4:	1c1a      	adds	r2, r3, #0
1000c8a6:	4643      	mov	r3, r8
1000c8a8:	408b      	lsls	r3, r1
1000c8aa:	1c1f      	adds	r7, r3, #0
1000c8ac:	4317      	orrs	r7, r2
1000c8ae:	e792      	b.n	1000c7d6 <__udivdi3+0x3e>
1000c8b0:	4653      	mov	r3, sl
1000c8b2:	2420      	movs	r4, #32
1000c8b4:	4656      	mov	r6, sl
1000c8b6:	1ae4      	subs	r4, r4, r3
1000c8b8:	1c3b      	adds	r3, r7, #0
1000c8ba:	40b5      	lsls	r5, r6
1000c8bc:	40e3      	lsrs	r3, r4
1000c8be:	1c1c      	adds	r4, r3, #0
1000c8c0:	1c2b      	adds	r3, r5, #0
1000c8c2:	4323      	orrs	r3, r4
1000c8c4:	e7cd      	b.n	1000c862 <__udivdi3+0xca>
1000c8c6:	4652      	mov	r2, sl
1000c8c8:	2320      	movs	r3, #32
1000c8ca:	1a9b      	subs	r3, r3, r2
1000c8cc:	1c2a      	adds	r2, r5, #0
1000c8ce:	409a      	lsls	r2, r3
1000c8d0:	1c27      	adds	r7, r4, #0
1000c8d2:	1c13      	adds	r3, r2, #0
1000c8d4:	4652      	mov	r2, sl
1000c8d6:	40d7      	lsrs	r7, r2
1000c8d8:	431f      	orrs	r7, r3
1000c8da:	e7bb      	b.n	1000c854 <__udivdi3+0xbc>
1000c8dc:	2320      	movs	r3, #32
1000c8de:	2200      	movs	r2, #0
1000c8e0:	1a58      	subs	r0, r3, r1
1000c8e2:	2300      	movs	r3, #0
1000c8e4:	9200      	str	r2, [sp, #0]
1000c8e6:	9301      	str	r3, [sp, #4]
1000c8e8:	3201      	adds	r2, #1
1000c8ea:	40c2      	lsrs	r2, r0
1000c8ec:	9201      	str	r2, [sp, #4]
1000c8ee:	e784      	b.n	1000c7fa <__udivdi3+0x62>

1000c8f0 <__clzdi2>:
1000c8f0:	b510      	push	{r4, lr}
1000c8f2:	2900      	cmp	r1, #0
1000c8f4:	d103      	bne.n	1000c8fe <__clzdi2+0xe>
1000c8f6:	f7ff fe39 	bl	1000c56c <__clzsi2>
1000c8fa:	3020      	adds	r0, #32
1000c8fc:	e002      	b.n	1000c904 <__clzdi2+0x14>
1000c8fe:	1c08      	adds	r0, r1, #0
1000c900:	f7ff fe34 	bl	1000c56c <__clzsi2>
1000c904:	bd10      	pop	{r4, pc}
1000c906:	46c0      	nop			; (mov r8, r8)

1000c908 <calloc>:
1000c908:	b508      	push	{r3, lr}
1000c90a:	1c03      	adds	r3, r0, #0
1000c90c:	1c0a      	adds	r2, r1, #0
1000c90e:	4903      	ldr	r1, [pc, #12]	; (1000c91c <calloc+0x14>)
1000c910:	6808      	ldr	r0, [r1, #0]
1000c912:	1c19      	adds	r1, r3, #0
1000c914:	f000 f85a 	bl	1000c9cc <_calloc_r>
1000c918:	bd08      	pop	{r3, pc}
1000c91a:	46c0      	nop			; (mov r8, r8)
1000c91c:	20002894 	.word	0x20002894

1000c920 <__errno>:
1000c920:	4b01      	ldr	r3, [pc, #4]	; (1000c928 <__errno+0x8>)
1000c922:	6818      	ldr	r0, [r3, #0]
1000c924:	4770      	bx	lr
1000c926:	46c0      	nop			; (mov r8, r8)
1000c928:	20002894 	.word	0x20002894

1000c92c <__libc_init_array>:
1000c92c:	4b0e      	ldr	r3, [pc, #56]	; (1000c968 <__libc_init_array+0x3c>)
1000c92e:	b570      	push	{r4, r5, r6, lr}
1000c930:	2500      	movs	r5, #0
1000c932:	1c1e      	adds	r6, r3, #0
1000c934:	4c0d      	ldr	r4, [pc, #52]	; (1000c96c <__libc_init_array+0x40>)
1000c936:	1ae4      	subs	r4, r4, r3
1000c938:	10a4      	asrs	r4, r4, #2
1000c93a:	42a5      	cmp	r5, r4
1000c93c:	d004      	beq.n	1000c948 <__libc_init_array+0x1c>
1000c93e:	00ab      	lsls	r3, r5, #2
1000c940:	58f3      	ldr	r3, [r6, r3]
1000c942:	4798      	blx	r3
1000c944:	3501      	adds	r5, #1
1000c946:	e7f8      	b.n	1000c93a <__libc_init_array+0xe>
1000c948:	f7fd ff8e 	bl	1000a868 <_init>
1000c94c:	4b08      	ldr	r3, [pc, #32]	; (1000c970 <__libc_init_array+0x44>)
1000c94e:	2500      	movs	r5, #0
1000c950:	1c1e      	adds	r6, r3, #0
1000c952:	4c08      	ldr	r4, [pc, #32]	; (1000c974 <__libc_init_array+0x48>)
1000c954:	1ae4      	subs	r4, r4, r3
1000c956:	10a4      	asrs	r4, r4, #2
1000c958:	42a5      	cmp	r5, r4
1000c95a:	d004      	beq.n	1000c966 <__libc_init_array+0x3a>
1000c95c:	00ab      	lsls	r3, r5, #2
1000c95e:	58f3      	ldr	r3, [r6, r3]
1000c960:	4798      	blx	r3
1000c962:	3501      	adds	r5, #1
1000c964:	e7f8      	b.n	1000c958 <__libc_init_array+0x2c>
1000c966:	bd70      	pop	{r4, r5, r6, pc}
1000c968:	20002898 	.word	0x20002898
1000c96c:	20002898 	.word	0x20002898
1000c970:	20002898 	.word	0x20002898
1000c974:	20002898 	.word	0x20002898

1000c978 <free>:
1000c978:	b508      	push	{r3, lr}
1000c97a:	4b03      	ldr	r3, [pc, #12]	; (1000c988 <free+0x10>)
1000c97c:	1c01      	adds	r1, r0, #0
1000c97e:	6818      	ldr	r0, [r3, #0]
1000c980:	f000 f832 	bl	1000c9e8 <_free_r>
1000c984:	bd08      	pop	{r3, pc}
1000c986:	46c0      	nop			; (mov r8, r8)
1000c988:	20002894 	.word	0x20002894

1000c98c <memcmp>:
1000c98c:	b530      	push	{r4, r5, lr}
1000c98e:	2400      	movs	r4, #0
1000c990:	4294      	cmp	r4, r2
1000c992:	d008      	beq.n	1000c9a6 <memcmp+0x1a>
1000c994:	5d03      	ldrb	r3, [r0, r4]
1000c996:	1c65      	adds	r5, r4, #1
1000c998:	5d0c      	ldrb	r4, [r1, r4]
1000c99a:	42a3      	cmp	r3, r4
1000c99c:	d001      	beq.n	1000c9a2 <memcmp+0x16>
1000c99e:	1b18      	subs	r0, r3, r4
1000c9a0:	e002      	b.n	1000c9a8 <memcmp+0x1c>
1000c9a2:	1c2c      	adds	r4, r5, #0
1000c9a4:	e7f4      	b.n	1000c990 <memcmp+0x4>
1000c9a6:	2000      	movs	r0, #0
1000c9a8:	bd30      	pop	{r4, r5, pc}

1000c9aa <memcpy>:
1000c9aa:	2300      	movs	r3, #0
1000c9ac:	b510      	push	{r4, lr}
1000c9ae:	4293      	cmp	r3, r2
1000c9b0:	d003      	beq.n	1000c9ba <memcpy+0x10>
1000c9b2:	5ccc      	ldrb	r4, [r1, r3]
1000c9b4:	54c4      	strb	r4, [r0, r3]
1000c9b6:	3301      	adds	r3, #1
1000c9b8:	e7f9      	b.n	1000c9ae <memcpy+0x4>
1000c9ba:	bd10      	pop	{r4, pc}

1000c9bc <memset>:
1000c9bc:	1c03      	adds	r3, r0, #0
1000c9be:	1882      	adds	r2, r0, r2
1000c9c0:	4293      	cmp	r3, r2
1000c9c2:	d002      	beq.n	1000c9ca <memset+0xe>
1000c9c4:	7019      	strb	r1, [r3, #0]
1000c9c6:	3301      	adds	r3, #1
1000c9c8:	e7fa      	b.n	1000c9c0 <memset+0x4>
1000c9ca:	4770      	bx	lr

1000c9cc <_calloc_r>:
1000c9cc:	434a      	muls	r2, r1
1000c9ce:	b538      	push	{r3, r4, r5, lr}
1000c9d0:	1c11      	adds	r1, r2, #0
1000c9d2:	1c14      	adds	r4, r2, #0
1000c9d4:	f000 f84e 	bl	1000ca74 <_malloc_r>
1000c9d8:	1e05      	subs	r5, r0, #0
1000c9da:	d003      	beq.n	1000c9e4 <_calloc_r+0x18>
1000c9dc:	2100      	movs	r1, #0
1000c9de:	1c22      	adds	r2, r4, #0
1000c9e0:	f7ff ffec 	bl	1000c9bc <memset>
1000c9e4:	1c28      	adds	r0, r5, #0
1000c9e6:	bd38      	pop	{r3, r4, r5, pc}

1000c9e8 <_free_r>:
1000c9e8:	b530      	push	{r4, r5, lr}
1000c9ea:	2900      	cmp	r1, #0
1000c9ec:	d03e      	beq.n	1000ca6c <_free_r+0x84>
1000c9ee:	3904      	subs	r1, #4
1000c9f0:	680b      	ldr	r3, [r1, #0]
1000c9f2:	2b00      	cmp	r3, #0
1000c9f4:	da00      	bge.n	1000c9f8 <_free_r+0x10>
1000c9f6:	18c9      	adds	r1, r1, r3
1000c9f8:	4a1d      	ldr	r2, [pc, #116]	; (1000ca70 <_free_r+0x88>)
1000c9fa:	6813      	ldr	r3, [r2, #0]
1000c9fc:	1c14      	adds	r4, r2, #0
1000c9fe:	2b00      	cmp	r3, #0
1000ca00:	d102      	bne.n	1000ca08 <_free_r+0x20>
1000ca02:	604b      	str	r3, [r1, #4]
1000ca04:	6011      	str	r1, [r2, #0]
1000ca06:	e031      	b.n	1000ca6c <_free_r+0x84>
1000ca08:	4299      	cmp	r1, r3
1000ca0a:	d20d      	bcs.n	1000ca28 <_free_r+0x40>
1000ca0c:	6808      	ldr	r0, [r1, #0]
1000ca0e:	180a      	adds	r2, r1, r0
1000ca10:	429a      	cmp	r2, r3
1000ca12:	d103      	bne.n	1000ca1c <_free_r+0x34>
1000ca14:	6813      	ldr	r3, [r2, #0]
1000ca16:	18c3      	adds	r3, r0, r3
1000ca18:	600b      	str	r3, [r1, #0]
1000ca1a:	6853      	ldr	r3, [r2, #4]
1000ca1c:	604b      	str	r3, [r1, #4]
1000ca1e:	6021      	str	r1, [r4, #0]
1000ca20:	e024      	b.n	1000ca6c <_free_r+0x84>
1000ca22:	428a      	cmp	r2, r1
1000ca24:	d803      	bhi.n	1000ca2e <_free_r+0x46>
1000ca26:	1c13      	adds	r3, r2, #0
1000ca28:	685a      	ldr	r2, [r3, #4]
1000ca2a:	2a00      	cmp	r2, #0
1000ca2c:	d1f9      	bne.n	1000ca22 <_free_r+0x3a>
1000ca2e:	681d      	ldr	r5, [r3, #0]
1000ca30:	195c      	adds	r4, r3, r5
1000ca32:	428c      	cmp	r4, r1
1000ca34:	d10b      	bne.n	1000ca4e <_free_r+0x66>
1000ca36:	6809      	ldr	r1, [r1, #0]
1000ca38:	1869      	adds	r1, r5, r1
1000ca3a:	1858      	adds	r0, r3, r1
1000ca3c:	6019      	str	r1, [r3, #0]
1000ca3e:	4290      	cmp	r0, r2
1000ca40:	d114      	bne.n	1000ca6c <_free_r+0x84>
1000ca42:	6810      	ldr	r0, [r2, #0]
1000ca44:	6852      	ldr	r2, [r2, #4]
1000ca46:	1809      	adds	r1, r1, r0
1000ca48:	6019      	str	r1, [r3, #0]
1000ca4a:	605a      	str	r2, [r3, #4]
1000ca4c:	e00e      	b.n	1000ca6c <_free_r+0x84>
1000ca4e:	428c      	cmp	r4, r1
1000ca50:	d902      	bls.n	1000ca58 <_free_r+0x70>
1000ca52:	230c      	movs	r3, #12
1000ca54:	6003      	str	r3, [r0, #0]
1000ca56:	e009      	b.n	1000ca6c <_free_r+0x84>
1000ca58:	6808      	ldr	r0, [r1, #0]
1000ca5a:	180c      	adds	r4, r1, r0
1000ca5c:	4294      	cmp	r4, r2
1000ca5e:	d103      	bne.n	1000ca68 <_free_r+0x80>
1000ca60:	6814      	ldr	r4, [r2, #0]
1000ca62:	6852      	ldr	r2, [r2, #4]
1000ca64:	1900      	adds	r0, r0, r4
1000ca66:	6008      	str	r0, [r1, #0]
1000ca68:	604a      	str	r2, [r1, #4]
1000ca6a:	6059      	str	r1, [r3, #4]
1000ca6c:	bd30      	pop	{r4, r5, pc}
1000ca6e:	46c0      	nop			; (mov r8, r8)
1000ca70:	20002ff0 	.word	0x20002ff0

1000ca74 <_malloc_r>:
1000ca74:	2303      	movs	r3, #3
1000ca76:	b570      	push	{r4, r5, r6, lr}
1000ca78:	1ccc      	adds	r4, r1, #3
1000ca7a:	439c      	bics	r4, r3
1000ca7c:	3408      	adds	r4, #8
1000ca7e:	1c05      	adds	r5, r0, #0
1000ca80:	2c0c      	cmp	r4, #12
1000ca82:	d201      	bcs.n	1000ca88 <_malloc_r+0x14>
1000ca84:	240c      	movs	r4, #12
1000ca86:	e005      	b.n	1000ca94 <_malloc_r+0x20>
1000ca88:	2c00      	cmp	r4, #0
1000ca8a:	da03      	bge.n	1000ca94 <_malloc_r+0x20>
1000ca8c:	230c      	movs	r3, #12
1000ca8e:	2000      	movs	r0, #0
1000ca90:	602b      	str	r3, [r5, #0]
1000ca92:	e042      	b.n	1000cb1a <_malloc_r+0xa6>
1000ca94:	428c      	cmp	r4, r1
1000ca96:	d3f9      	bcc.n	1000ca8c <_malloc_r+0x18>
1000ca98:	4a20      	ldr	r2, [pc, #128]	; (1000cb1c <_malloc_r+0xa8>)
1000ca9a:	6813      	ldr	r3, [r2, #0]
1000ca9c:	1c10      	adds	r0, r2, #0
1000ca9e:	1c19      	adds	r1, r3, #0
1000caa0:	2900      	cmp	r1, #0
1000caa2:	d013      	beq.n	1000cacc <_malloc_r+0x58>
1000caa4:	680a      	ldr	r2, [r1, #0]
1000caa6:	1b12      	subs	r2, r2, r4
1000caa8:	d40d      	bmi.n	1000cac6 <_malloc_r+0x52>
1000caaa:	2a0b      	cmp	r2, #11
1000caac:	d902      	bls.n	1000cab4 <_malloc_r+0x40>
1000caae:	600a      	str	r2, [r1, #0]
1000cab0:	188b      	adds	r3, r1, r2
1000cab2:	e01f      	b.n	1000caf4 <_malloc_r+0x80>
1000cab4:	428b      	cmp	r3, r1
1000cab6:	d102      	bne.n	1000cabe <_malloc_r+0x4a>
1000cab8:	685a      	ldr	r2, [r3, #4]
1000caba:	6002      	str	r2, [r0, #0]
1000cabc:	e01b      	b.n	1000caf6 <_malloc_r+0x82>
1000cabe:	684a      	ldr	r2, [r1, #4]
1000cac0:	605a      	str	r2, [r3, #4]
1000cac2:	1c0b      	adds	r3, r1, #0
1000cac4:	e017      	b.n	1000caf6 <_malloc_r+0x82>
1000cac6:	1c0b      	adds	r3, r1, #0
1000cac8:	6849      	ldr	r1, [r1, #4]
1000caca:	e7e9      	b.n	1000caa0 <_malloc_r+0x2c>
1000cacc:	4e14      	ldr	r6, [pc, #80]	; (1000cb20 <_malloc_r+0xac>)
1000cace:	6833      	ldr	r3, [r6, #0]
1000cad0:	2b00      	cmp	r3, #0
1000cad2:	d103      	bne.n	1000cadc <_malloc_r+0x68>
1000cad4:	1c28      	adds	r0, r5, #0
1000cad6:	f000 f825 	bl	1000cb24 <_sbrk_r>
1000cada:	6030      	str	r0, [r6, #0]
1000cadc:	1c28      	adds	r0, r5, #0
1000cade:	1c21      	adds	r1, r4, #0
1000cae0:	f000 f820 	bl	1000cb24 <_sbrk_r>
1000cae4:	1c03      	adds	r3, r0, #0
1000cae6:	1c42      	adds	r2, r0, #1
1000cae8:	d0d0      	beq.n	1000ca8c <_malloc_r+0x18>
1000caea:	2203      	movs	r2, #3
1000caec:	1cc6      	adds	r6, r0, #3
1000caee:	4396      	bics	r6, r2
1000caf0:	4286      	cmp	r6, r0
1000caf2:	d10a      	bne.n	1000cb0a <_malloc_r+0x96>
1000caf4:	601c      	str	r4, [r3, #0]
1000caf6:	1c18      	adds	r0, r3, #0
1000caf8:	2107      	movs	r1, #7
1000cafa:	300b      	adds	r0, #11
1000cafc:	1d1a      	adds	r2, r3, #4
1000cafe:	4388      	bics	r0, r1
1000cb00:	1a82      	subs	r2, r0, r2
1000cb02:	d00a      	beq.n	1000cb1a <_malloc_r+0xa6>
1000cb04:	4251      	negs	r1, r2
1000cb06:	5099      	str	r1, [r3, r2]
1000cb08:	e007      	b.n	1000cb1a <_malloc_r+0xa6>
1000cb0a:	1a31      	subs	r1, r6, r0
1000cb0c:	1c28      	adds	r0, r5, #0
1000cb0e:	f000 f809 	bl	1000cb24 <_sbrk_r>
1000cb12:	1c43      	adds	r3, r0, #1
1000cb14:	d0ba      	beq.n	1000ca8c <_malloc_r+0x18>
1000cb16:	1c33      	adds	r3, r6, #0
1000cb18:	e7ec      	b.n	1000caf4 <_malloc_r+0x80>
1000cb1a:	bd70      	pop	{r4, r5, r6, pc}
1000cb1c:	20002ff0 	.word	0x20002ff0
1000cb20:	20002fec 	.word	0x20002fec

1000cb24 <_sbrk_r>:
1000cb24:	b538      	push	{r3, r4, r5, lr}
1000cb26:	2300      	movs	r3, #0
1000cb28:	4c06      	ldr	r4, [pc, #24]	; (1000cb44 <_sbrk_r+0x20>)
1000cb2a:	1c05      	adds	r5, r0, #0
1000cb2c:	1c08      	adds	r0, r1, #0
1000cb2e:	6023      	str	r3, [r4, #0]
1000cb30:	f7fd fe7a 	bl	1000a828 <_sbrk>
1000cb34:	1c43      	adds	r3, r0, #1
1000cb36:	d103      	bne.n	1000cb40 <_sbrk_r+0x1c>
1000cb38:	6823      	ldr	r3, [r4, #0]
1000cb3a:	2b00      	cmp	r3, #0
1000cb3c:	d000      	beq.n	1000cb40 <_sbrk_r+0x1c>
1000cb3e:	602b      	str	r3, [r5, #0]
1000cb40:	bd38      	pop	{r3, r4, r5, pc}
1000cb42:	46c0      	nop			; (mov r8, r8)
1000cb44:	20003040 	.word	0x20003040

1000cb48 <siprintf>:
1000cb48:	b40e      	push	{r1, r2, r3}
1000cb4a:	b510      	push	{r4, lr}
1000cb4c:	b09d      	sub	sp, #116	; 0x74
1000cb4e:	a902      	add	r1, sp, #8
1000cb50:	9002      	str	r0, [sp, #8]
1000cb52:	6108      	str	r0, [r1, #16]
1000cb54:	480b      	ldr	r0, [pc, #44]	; (1000cb84 <siprintf+0x3c>)
1000cb56:	2482      	movs	r4, #130	; 0x82
1000cb58:	6088      	str	r0, [r1, #8]
1000cb5a:	6148      	str	r0, [r1, #20]
1000cb5c:	2001      	movs	r0, #1
1000cb5e:	4240      	negs	r0, r0
1000cb60:	ab1f      	add	r3, sp, #124	; 0x7c
1000cb62:	81c8      	strh	r0, [r1, #14]
1000cb64:	4808      	ldr	r0, [pc, #32]	; (1000cb88 <siprintf+0x40>)
1000cb66:	cb04      	ldmia	r3!, {r2}
1000cb68:	00a4      	lsls	r4, r4, #2
1000cb6a:	6800      	ldr	r0, [r0, #0]
1000cb6c:	9301      	str	r3, [sp, #4]
1000cb6e:	818c      	strh	r4, [r1, #12]
1000cb70:	f000 f892 	bl	1000cc98 <_svfiprintf_r>
1000cb74:	2300      	movs	r3, #0
1000cb76:	9a02      	ldr	r2, [sp, #8]
1000cb78:	7013      	strb	r3, [r2, #0]
1000cb7a:	b01d      	add	sp, #116	; 0x74
1000cb7c:	bc10      	pop	{r4}
1000cb7e:	bc08      	pop	{r3}
1000cb80:	b003      	add	sp, #12
1000cb82:	4718      	bx	r3
1000cb84:	7fffffff 	.word	0x7fffffff
1000cb88:	20002894 	.word	0x20002894

1000cb8c <strcat>:
1000cb8c:	1c02      	adds	r2, r0, #0
1000cb8e:	b510      	push	{r4, lr}
1000cb90:	7813      	ldrb	r3, [r2, #0]
1000cb92:	2b00      	cmp	r3, #0
1000cb94:	d001      	beq.n	1000cb9a <strcat+0xe>
1000cb96:	3201      	adds	r2, #1
1000cb98:	e7fa      	b.n	1000cb90 <strcat+0x4>
1000cb9a:	5ccc      	ldrb	r4, [r1, r3]
1000cb9c:	54d4      	strb	r4, [r2, r3]
1000cb9e:	3301      	adds	r3, #1
1000cba0:	2c00      	cmp	r4, #0
1000cba2:	d1fa      	bne.n	1000cb9a <strcat+0xe>
1000cba4:	bd10      	pop	{r4, pc}

1000cba6 <strcmp>:
1000cba6:	7802      	ldrb	r2, [r0, #0]
1000cba8:	780b      	ldrb	r3, [r1, #0]
1000cbaa:	2a00      	cmp	r2, #0
1000cbac:	d003      	beq.n	1000cbb6 <strcmp+0x10>
1000cbae:	3001      	adds	r0, #1
1000cbb0:	3101      	adds	r1, #1
1000cbb2:	429a      	cmp	r2, r3
1000cbb4:	d0f7      	beq.n	1000cba6 <strcmp>
1000cbb6:	1ad0      	subs	r0, r2, r3
1000cbb8:	4770      	bx	lr

1000cbba <strcpy>:
1000cbba:	1c03      	adds	r3, r0, #0
1000cbbc:	780a      	ldrb	r2, [r1, #0]
1000cbbe:	3101      	adds	r1, #1
1000cbc0:	701a      	strb	r2, [r3, #0]
1000cbc2:	3301      	adds	r3, #1
1000cbc4:	2a00      	cmp	r2, #0
1000cbc6:	d1f9      	bne.n	1000cbbc <strcpy+0x2>
1000cbc8:	4770      	bx	lr

1000cbca <strlen>:
1000cbca:	2300      	movs	r3, #0
1000cbcc:	5cc2      	ldrb	r2, [r0, r3]
1000cbce:	3301      	adds	r3, #1
1000cbd0:	2a00      	cmp	r2, #0
1000cbd2:	d1fb      	bne.n	1000cbcc <strlen+0x2>
1000cbd4:	1e58      	subs	r0, r3, #1
1000cbd6:	4770      	bx	lr

1000cbd8 <__ssputs_r>:
1000cbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cbda:	688e      	ldr	r6, [r1, #8]
1000cbdc:	b085      	sub	sp, #20
1000cbde:	1c07      	adds	r7, r0, #0
1000cbe0:	1c0c      	adds	r4, r1, #0
1000cbe2:	9203      	str	r2, [sp, #12]
1000cbe4:	9301      	str	r3, [sp, #4]
1000cbe6:	42b3      	cmp	r3, r6
1000cbe8:	d345      	bcc.n	1000cc76 <__ssputs_r+0x9e>
1000cbea:	2390      	movs	r3, #144	; 0x90
1000cbec:	898a      	ldrh	r2, [r1, #12]
1000cbee:	00db      	lsls	r3, r3, #3
1000cbf0:	421a      	tst	r2, r3
1000cbf2:	d03d      	beq.n	1000cc70 <__ssputs_r+0x98>
1000cbf4:	2503      	movs	r5, #3
1000cbf6:	6909      	ldr	r1, [r1, #16]
1000cbf8:	6823      	ldr	r3, [r4, #0]
1000cbfa:	9801      	ldr	r0, [sp, #4]
1000cbfc:	1a5b      	subs	r3, r3, r1
1000cbfe:	9302      	str	r3, [sp, #8]
1000cc00:	6963      	ldr	r3, [r4, #20]
1000cc02:	435d      	muls	r5, r3
1000cc04:	0feb      	lsrs	r3, r5, #31
1000cc06:	195d      	adds	r5, r3, r5
1000cc08:	9b02      	ldr	r3, [sp, #8]
1000cc0a:	106d      	asrs	r5, r5, #1
1000cc0c:	3301      	adds	r3, #1
1000cc0e:	181b      	adds	r3, r3, r0
1000cc10:	429d      	cmp	r5, r3
1000cc12:	d200      	bcs.n	1000cc16 <__ssputs_r+0x3e>
1000cc14:	1c1d      	adds	r5, r3, #0
1000cc16:	1c38      	adds	r0, r7, #0
1000cc18:	0553      	lsls	r3, r2, #21
1000cc1a:	d50f      	bpl.n	1000cc3c <__ssputs_r+0x64>
1000cc1c:	1c29      	adds	r1, r5, #0
1000cc1e:	f7ff ff29 	bl	1000ca74 <_malloc_r>
1000cc22:	1e06      	subs	r6, r0, #0
1000cc24:	d013      	beq.n	1000cc4e <__ssputs_r+0x76>
1000cc26:	9a02      	ldr	r2, [sp, #8]
1000cc28:	6921      	ldr	r1, [r4, #16]
1000cc2a:	f7ff febe 	bl	1000c9aa <memcpy>
1000cc2e:	89a2      	ldrh	r2, [r4, #12]
1000cc30:	4b18      	ldr	r3, [pc, #96]	; (1000cc94 <__ssputs_r+0xbc>)
1000cc32:	4013      	ands	r3, r2
1000cc34:	2280      	movs	r2, #128	; 0x80
1000cc36:	4313      	orrs	r3, r2
1000cc38:	81a3      	strh	r3, [r4, #12]
1000cc3a:	e011      	b.n	1000cc60 <__ssputs_r+0x88>
1000cc3c:	1c2a      	adds	r2, r5, #0
1000cc3e:	f000 fac6 	bl	1000d1ce <_realloc_r>
1000cc42:	1e06      	subs	r6, r0, #0
1000cc44:	d10c      	bne.n	1000cc60 <__ssputs_r+0x88>
1000cc46:	1c38      	adds	r0, r7, #0
1000cc48:	6921      	ldr	r1, [r4, #16]
1000cc4a:	f7ff fecd 	bl	1000c9e8 <_free_r>
1000cc4e:	230c      	movs	r3, #12
1000cc50:	2240      	movs	r2, #64	; 0x40
1000cc52:	2001      	movs	r0, #1
1000cc54:	603b      	str	r3, [r7, #0]
1000cc56:	89a3      	ldrh	r3, [r4, #12]
1000cc58:	4240      	negs	r0, r0
1000cc5a:	4313      	orrs	r3, r2
1000cc5c:	81a3      	strh	r3, [r4, #12]
1000cc5e:	e017      	b.n	1000cc90 <__ssputs_r+0xb8>
1000cc60:	9b02      	ldr	r3, [sp, #8]
1000cc62:	6126      	str	r6, [r4, #16]
1000cc64:	18f6      	adds	r6, r6, r3
1000cc66:	6026      	str	r6, [r4, #0]
1000cc68:	6165      	str	r5, [r4, #20]
1000cc6a:	9e01      	ldr	r6, [sp, #4]
1000cc6c:	1aed      	subs	r5, r5, r3
1000cc6e:	60a5      	str	r5, [r4, #8]
1000cc70:	9b01      	ldr	r3, [sp, #4]
1000cc72:	42b3      	cmp	r3, r6
1000cc74:	d200      	bcs.n	1000cc78 <__ssputs_r+0xa0>
1000cc76:	9e01      	ldr	r6, [sp, #4]
1000cc78:	1c32      	adds	r2, r6, #0
1000cc7a:	6820      	ldr	r0, [r4, #0]
1000cc7c:	9903      	ldr	r1, [sp, #12]
1000cc7e:	f000 fa92 	bl	1000d1a6 <memmove>
1000cc82:	2000      	movs	r0, #0
1000cc84:	68a3      	ldr	r3, [r4, #8]
1000cc86:	1b9b      	subs	r3, r3, r6
1000cc88:	60a3      	str	r3, [r4, #8]
1000cc8a:	6823      	ldr	r3, [r4, #0]
1000cc8c:	199e      	adds	r6, r3, r6
1000cc8e:	6026      	str	r6, [r4, #0]
1000cc90:	b005      	add	sp, #20
1000cc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cc94:	fffffb7f 	.word	0xfffffb7f

1000cc98 <_svfiprintf_r>:
1000cc98:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc9a:	b09f      	sub	sp, #124	; 0x7c
1000cc9c:	9002      	str	r0, [sp, #8]
1000cc9e:	9305      	str	r3, [sp, #20]
1000cca0:	898b      	ldrh	r3, [r1, #12]
1000cca2:	1c0e      	adds	r6, r1, #0
1000cca4:	1c17      	adds	r7, r2, #0
1000cca6:	061b      	lsls	r3, r3, #24
1000cca8:	d510      	bpl.n	1000cccc <_svfiprintf_r+0x34>
1000ccaa:	690b      	ldr	r3, [r1, #16]
1000ccac:	2b00      	cmp	r3, #0
1000ccae:	d10d      	bne.n	1000cccc <_svfiprintf_r+0x34>
1000ccb0:	2140      	movs	r1, #64	; 0x40
1000ccb2:	f7ff fedf 	bl	1000ca74 <_malloc_r>
1000ccb6:	6030      	str	r0, [r6, #0]
1000ccb8:	6130      	str	r0, [r6, #16]
1000ccba:	2800      	cmp	r0, #0
1000ccbc:	d104      	bne.n	1000ccc8 <_svfiprintf_r+0x30>
1000ccbe:	230c      	movs	r3, #12
1000ccc0:	9a02      	ldr	r2, [sp, #8]
1000ccc2:	3801      	subs	r0, #1
1000ccc4:	6013      	str	r3, [r2, #0]
1000ccc6:	e0d0      	b.n	1000ce6a <_svfiprintf_r+0x1d2>
1000ccc8:	2340      	movs	r3, #64	; 0x40
1000ccca:	6173      	str	r3, [r6, #20]
1000cccc:	2300      	movs	r3, #0
1000ccce:	ad06      	add	r5, sp, #24
1000ccd0:	616b      	str	r3, [r5, #20]
1000ccd2:	3320      	adds	r3, #32
1000ccd4:	766b      	strb	r3, [r5, #25]
1000ccd6:	3310      	adds	r3, #16
1000ccd8:	76ab      	strb	r3, [r5, #26]
1000ccda:	1c3c      	adds	r4, r7, #0
1000ccdc:	7823      	ldrb	r3, [r4, #0]
1000ccde:	2b00      	cmp	r3, #0
1000cce0:	d103      	bne.n	1000ccea <_svfiprintf_r+0x52>
1000cce2:	1be3      	subs	r3, r4, r7
1000cce4:	9304      	str	r3, [sp, #16]
1000cce6:	d012      	beq.n	1000cd0e <_svfiprintf_r+0x76>
1000cce8:	e003      	b.n	1000ccf2 <_svfiprintf_r+0x5a>
1000ccea:	2b25      	cmp	r3, #37	; 0x25
1000ccec:	d0f9      	beq.n	1000cce2 <_svfiprintf_r+0x4a>
1000ccee:	3401      	adds	r4, #1
1000ccf0:	e7f4      	b.n	1000ccdc <_svfiprintf_r+0x44>
1000ccf2:	9b04      	ldr	r3, [sp, #16]
1000ccf4:	9802      	ldr	r0, [sp, #8]
1000ccf6:	1c31      	adds	r1, r6, #0
1000ccf8:	1c3a      	adds	r2, r7, #0
1000ccfa:	f7ff ff6d 	bl	1000cbd8 <__ssputs_r>
1000ccfe:	1c43      	adds	r3, r0, #1
1000cd00:	d100      	bne.n	1000cd04 <_svfiprintf_r+0x6c>
1000cd02:	e0ac      	b.n	1000ce5e <_svfiprintf_r+0x1c6>
1000cd04:	696a      	ldr	r2, [r5, #20]
1000cd06:	9b04      	ldr	r3, [sp, #16]
1000cd08:	4694      	mov	ip, r2
1000cd0a:	4463      	add	r3, ip
1000cd0c:	616b      	str	r3, [r5, #20]
1000cd0e:	7823      	ldrb	r3, [r4, #0]
1000cd10:	2b00      	cmp	r3, #0
1000cd12:	d100      	bne.n	1000cd16 <_svfiprintf_r+0x7e>
1000cd14:	e0a3      	b.n	1000ce5e <_svfiprintf_r+0x1c6>
1000cd16:	2201      	movs	r2, #1
1000cd18:	2300      	movs	r3, #0
1000cd1a:	4252      	negs	r2, r2
1000cd1c:	606a      	str	r2, [r5, #4]
1000cd1e:	a902      	add	r1, sp, #8
1000cd20:	3254      	adds	r2, #84	; 0x54
1000cd22:	1852      	adds	r2, r2, r1
1000cd24:	3401      	adds	r4, #1
1000cd26:	602b      	str	r3, [r5, #0]
1000cd28:	60eb      	str	r3, [r5, #12]
1000cd2a:	60ab      	str	r3, [r5, #8]
1000cd2c:	7013      	strb	r3, [r2, #0]
1000cd2e:	65ab      	str	r3, [r5, #88]	; 0x58
1000cd30:	4f4f      	ldr	r7, [pc, #316]	; (1000ce70 <_svfiprintf_r+0x1d8>)
1000cd32:	7821      	ldrb	r1, [r4, #0]
1000cd34:	1c38      	adds	r0, r7, #0
1000cd36:	2205      	movs	r2, #5
1000cd38:	f000 fa2a 	bl	1000d190 <memchr>
1000cd3c:	2800      	cmp	r0, #0
1000cd3e:	d008      	beq.n	1000cd52 <_svfiprintf_r+0xba>
1000cd40:	1bc0      	subs	r0, r0, r7
1000cd42:	2701      	movs	r7, #1
1000cd44:	4087      	lsls	r7, r0
1000cd46:	1c38      	adds	r0, r7, #0
1000cd48:	682b      	ldr	r3, [r5, #0]
1000cd4a:	3401      	adds	r4, #1
1000cd4c:	4318      	orrs	r0, r3
1000cd4e:	6028      	str	r0, [r5, #0]
1000cd50:	e7ee      	b.n	1000cd30 <_svfiprintf_r+0x98>
1000cd52:	682b      	ldr	r3, [r5, #0]
1000cd54:	06da      	lsls	r2, r3, #27
1000cd56:	d504      	bpl.n	1000cd62 <_svfiprintf_r+0xca>
1000cd58:	2253      	movs	r2, #83	; 0x53
1000cd5a:	2120      	movs	r1, #32
1000cd5c:	a802      	add	r0, sp, #8
1000cd5e:	1812      	adds	r2, r2, r0
1000cd60:	7011      	strb	r1, [r2, #0]
1000cd62:	071a      	lsls	r2, r3, #28
1000cd64:	d504      	bpl.n	1000cd70 <_svfiprintf_r+0xd8>
1000cd66:	2253      	movs	r2, #83	; 0x53
1000cd68:	212b      	movs	r1, #43	; 0x2b
1000cd6a:	a802      	add	r0, sp, #8
1000cd6c:	1812      	adds	r2, r2, r0
1000cd6e:	7011      	strb	r1, [r2, #0]
1000cd70:	7822      	ldrb	r2, [r4, #0]
1000cd72:	2a2a      	cmp	r2, #42	; 0x2a
1000cd74:	d001      	beq.n	1000cd7a <_svfiprintf_r+0xe2>
1000cd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000cd78:	e00e      	b.n	1000cd98 <_svfiprintf_r+0x100>
1000cd7a:	9a05      	ldr	r2, [sp, #20]
1000cd7c:	1d11      	adds	r1, r2, #4
1000cd7e:	6812      	ldr	r2, [r2, #0]
1000cd80:	9105      	str	r1, [sp, #20]
1000cd82:	2a00      	cmp	r2, #0
1000cd84:	db01      	blt.n	1000cd8a <_svfiprintf_r+0xf2>
1000cd86:	9209      	str	r2, [sp, #36]	; 0x24
1000cd88:	e004      	b.n	1000cd94 <_svfiprintf_r+0xfc>
1000cd8a:	4252      	negs	r2, r2
1000cd8c:	60ea      	str	r2, [r5, #12]
1000cd8e:	2202      	movs	r2, #2
1000cd90:	4313      	orrs	r3, r2
1000cd92:	602b      	str	r3, [r5, #0]
1000cd94:	3401      	adds	r4, #1
1000cd96:	e009      	b.n	1000cdac <_svfiprintf_r+0x114>
1000cd98:	7822      	ldrb	r2, [r4, #0]
1000cd9a:	3a30      	subs	r2, #48	; 0x30
1000cd9c:	2a09      	cmp	r2, #9
1000cd9e:	d804      	bhi.n	1000cdaa <_svfiprintf_r+0x112>
1000cda0:	210a      	movs	r1, #10
1000cda2:	434b      	muls	r3, r1
1000cda4:	3401      	adds	r4, #1
1000cda6:	189b      	adds	r3, r3, r2
1000cda8:	e7f6      	b.n	1000cd98 <_svfiprintf_r+0x100>
1000cdaa:	9309      	str	r3, [sp, #36]	; 0x24
1000cdac:	7823      	ldrb	r3, [r4, #0]
1000cdae:	2b2e      	cmp	r3, #46	; 0x2e
1000cdb0:	d118      	bne.n	1000cde4 <_svfiprintf_r+0x14c>
1000cdb2:	7863      	ldrb	r3, [r4, #1]
1000cdb4:	2b2a      	cmp	r3, #42	; 0x2a
1000cdb6:	d109      	bne.n	1000cdcc <_svfiprintf_r+0x134>
1000cdb8:	9b05      	ldr	r3, [sp, #20]
1000cdba:	3402      	adds	r4, #2
1000cdbc:	1d1a      	adds	r2, r3, #4
1000cdbe:	681b      	ldr	r3, [r3, #0]
1000cdc0:	9205      	str	r2, [sp, #20]
1000cdc2:	2b00      	cmp	r3, #0
1000cdc4:	da0d      	bge.n	1000cde2 <_svfiprintf_r+0x14a>
1000cdc6:	2301      	movs	r3, #1
1000cdc8:	425b      	negs	r3, r3
1000cdca:	e00a      	b.n	1000cde2 <_svfiprintf_r+0x14a>
1000cdcc:	2300      	movs	r3, #0
1000cdce:	3401      	adds	r4, #1
1000cdd0:	7822      	ldrb	r2, [r4, #0]
1000cdd2:	3a30      	subs	r2, #48	; 0x30
1000cdd4:	2a09      	cmp	r2, #9
1000cdd6:	d804      	bhi.n	1000cde2 <_svfiprintf_r+0x14a>
1000cdd8:	210a      	movs	r1, #10
1000cdda:	434b      	muls	r3, r1
1000cddc:	3401      	adds	r4, #1
1000cdde:	189b      	adds	r3, r3, r2
1000cde0:	e7f6      	b.n	1000cdd0 <_svfiprintf_r+0x138>
1000cde2:	9307      	str	r3, [sp, #28]
1000cde4:	4f23      	ldr	r7, [pc, #140]	; (1000ce74 <_svfiprintf_r+0x1dc>)
1000cde6:	7821      	ldrb	r1, [r4, #0]
1000cde8:	1c38      	adds	r0, r7, #0
1000cdea:	2203      	movs	r2, #3
1000cdec:	f000 f9d0 	bl	1000d190 <memchr>
1000cdf0:	2800      	cmp	r0, #0
1000cdf2:	d007      	beq.n	1000ce04 <_svfiprintf_r+0x16c>
1000cdf4:	1bc0      	subs	r0, r0, r7
1000cdf6:	2740      	movs	r7, #64	; 0x40
1000cdf8:	4087      	lsls	r7, r0
1000cdfa:	1c38      	adds	r0, r7, #0
1000cdfc:	682b      	ldr	r3, [r5, #0]
1000cdfe:	3401      	adds	r4, #1
1000ce00:	4318      	orrs	r0, r3
1000ce02:	6028      	str	r0, [r5, #0]
1000ce04:	7821      	ldrb	r1, [r4, #0]
1000ce06:	481c      	ldr	r0, [pc, #112]	; (1000ce78 <_svfiprintf_r+0x1e0>)
1000ce08:	2206      	movs	r2, #6
1000ce0a:	1c67      	adds	r7, r4, #1
1000ce0c:	7629      	strb	r1, [r5, #24]
1000ce0e:	f000 f9bf 	bl	1000d190 <memchr>
1000ce12:	2800      	cmp	r0, #0
1000ce14:	d012      	beq.n	1000ce3c <_svfiprintf_r+0x1a4>
1000ce16:	4b19      	ldr	r3, [pc, #100]	; (1000ce7c <_svfiprintf_r+0x1e4>)
1000ce18:	2b00      	cmp	r3, #0
1000ce1a:	d106      	bne.n	1000ce2a <_svfiprintf_r+0x192>
1000ce1c:	2207      	movs	r2, #7
1000ce1e:	9b05      	ldr	r3, [sp, #20]
1000ce20:	3307      	adds	r3, #7
1000ce22:	4393      	bics	r3, r2
1000ce24:	3308      	adds	r3, #8
1000ce26:	9305      	str	r3, [sp, #20]
1000ce28:	e014      	b.n	1000ce54 <_svfiprintf_r+0x1bc>
1000ce2a:	ab05      	add	r3, sp, #20
1000ce2c:	9300      	str	r3, [sp, #0]
1000ce2e:	9802      	ldr	r0, [sp, #8]
1000ce30:	1c29      	adds	r1, r5, #0
1000ce32:	1c32      	adds	r2, r6, #0
1000ce34:	4b12      	ldr	r3, [pc, #72]	; (1000ce80 <_svfiprintf_r+0x1e8>)
1000ce36:	e000      	b.n	1000ce3a <_svfiprintf_r+0x1a2>
1000ce38:	bf00      	nop
1000ce3a:	e007      	b.n	1000ce4c <_svfiprintf_r+0x1b4>
1000ce3c:	ab05      	add	r3, sp, #20
1000ce3e:	9300      	str	r3, [sp, #0]
1000ce40:	9802      	ldr	r0, [sp, #8]
1000ce42:	1c29      	adds	r1, r5, #0
1000ce44:	1c32      	adds	r2, r6, #0
1000ce46:	4b0e      	ldr	r3, [pc, #56]	; (1000ce80 <_svfiprintf_r+0x1e8>)
1000ce48:	f000 f88a 	bl	1000cf60 <_printf_i>
1000ce4c:	9003      	str	r0, [sp, #12]
1000ce4e:	9b03      	ldr	r3, [sp, #12]
1000ce50:	3301      	adds	r3, #1
1000ce52:	d004      	beq.n	1000ce5e <_svfiprintf_r+0x1c6>
1000ce54:	696b      	ldr	r3, [r5, #20]
1000ce56:	9a03      	ldr	r2, [sp, #12]
1000ce58:	189b      	adds	r3, r3, r2
1000ce5a:	616b      	str	r3, [r5, #20]
1000ce5c:	e73d      	b.n	1000ccda <_svfiprintf_r+0x42>
1000ce5e:	89b3      	ldrh	r3, [r6, #12]
1000ce60:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000ce62:	065b      	lsls	r3, r3, #25
1000ce64:	d501      	bpl.n	1000ce6a <_svfiprintf_r+0x1d2>
1000ce66:	2001      	movs	r0, #1
1000ce68:	4240      	negs	r0, r0
1000ce6a:	b01f      	add	sp, #124	; 0x7c
1000ce6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ce6e:	46c0      	nop			; (mov r8, r8)
1000ce70:	10011d55 	.word	0x10011d55
1000ce74:	10011d5b 	.word	0x10011d5b
1000ce78:	10011d5f 	.word	0x10011d5f
1000ce7c:	00000000 	.word	0x00000000
1000ce80:	1000cbd9 	.word	0x1000cbd9

1000ce84 <_printf_common>:
1000ce84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ce86:	1c17      	adds	r7, r2, #0
1000ce88:	9301      	str	r3, [sp, #4]
1000ce8a:	690a      	ldr	r2, [r1, #16]
1000ce8c:	688b      	ldr	r3, [r1, #8]
1000ce8e:	9000      	str	r0, [sp, #0]
1000ce90:	1c0c      	adds	r4, r1, #0
1000ce92:	4293      	cmp	r3, r2
1000ce94:	da00      	bge.n	1000ce98 <_printf_common+0x14>
1000ce96:	1c13      	adds	r3, r2, #0
1000ce98:	1c22      	adds	r2, r4, #0
1000ce9a:	603b      	str	r3, [r7, #0]
1000ce9c:	3243      	adds	r2, #67	; 0x43
1000ce9e:	7812      	ldrb	r2, [r2, #0]
1000cea0:	2a00      	cmp	r2, #0
1000cea2:	d001      	beq.n	1000cea8 <_printf_common+0x24>
1000cea4:	3301      	adds	r3, #1
1000cea6:	603b      	str	r3, [r7, #0]
1000cea8:	6823      	ldr	r3, [r4, #0]
1000ceaa:	069b      	lsls	r3, r3, #26
1000ceac:	d502      	bpl.n	1000ceb4 <_printf_common+0x30>
1000ceae:	683b      	ldr	r3, [r7, #0]
1000ceb0:	3302      	adds	r3, #2
1000ceb2:	603b      	str	r3, [r7, #0]
1000ceb4:	2506      	movs	r5, #6
1000ceb6:	6823      	ldr	r3, [r4, #0]
1000ceb8:	401d      	ands	r5, r3
1000ceba:	d01e      	beq.n	1000cefa <_printf_common+0x76>
1000cebc:	1c23      	adds	r3, r4, #0
1000cebe:	3343      	adds	r3, #67	; 0x43
1000cec0:	781b      	ldrb	r3, [r3, #0]
1000cec2:	1e5a      	subs	r2, r3, #1
1000cec4:	4193      	sbcs	r3, r2
1000cec6:	6822      	ldr	r2, [r4, #0]
1000cec8:	0692      	lsls	r2, r2, #26
1000ceca:	d51c      	bpl.n	1000cf06 <_printf_common+0x82>
1000cecc:	2030      	movs	r0, #48	; 0x30
1000cece:	18e1      	adds	r1, r4, r3
1000ced0:	3140      	adds	r1, #64	; 0x40
1000ced2:	70c8      	strb	r0, [r1, #3]
1000ced4:	1c21      	adds	r1, r4, #0
1000ced6:	1c5a      	adds	r2, r3, #1
1000ced8:	3145      	adds	r1, #69	; 0x45
1000ceda:	7809      	ldrb	r1, [r1, #0]
1000cedc:	18a2      	adds	r2, r4, r2
1000cede:	3240      	adds	r2, #64	; 0x40
1000cee0:	3302      	adds	r3, #2
1000cee2:	70d1      	strb	r1, [r2, #3]
1000cee4:	e00f      	b.n	1000cf06 <_printf_common+0x82>
1000cee6:	1c22      	adds	r2, r4, #0
1000cee8:	2301      	movs	r3, #1
1000ceea:	9800      	ldr	r0, [sp, #0]
1000ceec:	9901      	ldr	r1, [sp, #4]
1000ceee:	3219      	adds	r2, #25
1000cef0:	9e08      	ldr	r6, [sp, #32]
1000cef2:	47b0      	blx	r6
1000cef4:	1c43      	adds	r3, r0, #1
1000cef6:	d00e      	beq.n	1000cf16 <_printf_common+0x92>
1000cef8:	3501      	adds	r5, #1
1000cefa:	68e3      	ldr	r3, [r4, #12]
1000cefc:	683a      	ldr	r2, [r7, #0]
1000cefe:	1a9b      	subs	r3, r3, r2
1000cf00:	429d      	cmp	r5, r3
1000cf02:	dbf0      	blt.n	1000cee6 <_printf_common+0x62>
1000cf04:	e7da      	b.n	1000cebc <_printf_common+0x38>
1000cf06:	1c22      	adds	r2, r4, #0
1000cf08:	9800      	ldr	r0, [sp, #0]
1000cf0a:	9901      	ldr	r1, [sp, #4]
1000cf0c:	3243      	adds	r2, #67	; 0x43
1000cf0e:	9d08      	ldr	r5, [sp, #32]
1000cf10:	47a8      	blx	r5
1000cf12:	1c43      	adds	r3, r0, #1
1000cf14:	d102      	bne.n	1000cf1c <_printf_common+0x98>
1000cf16:	2001      	movs	r0, #1
1000cf18:	4240      	negs	r0, r0
1000cf1a:	e020      	b.n	1000cf5e <_printf_common+0xda>
1000cf1c:	2306      	movs	r3, #6
1000cf1e:	6820      	ldr	r0, [r4, #0]
1000cf20:	68e1      	ldr	r1, [r4, #12]
1000cf22:	683a      	ldr	r2, [r7, #0]
1000cf24:	4003      	ands	r3, r0
1000cf26:	2500      	movs	r5, #0
1000cf28:	2b04      	cmp	r3, #4
1000cf2a:	d103      	bne.n	1000cf34 <_printf_common+0xb0>
1000cf2c:	1a8d      	subs	r5, r1, r2
1000cf2e:	43eb      	mvns	r3, r5
1000cf30:	17db      	asrs	r3, r3, #31
1000cf32:	401d      	ands	r5, r3
1000cf34:	68a3      	ldr	r3, [r4, #8]
1000cf36:	6922      	ldr	r2, [r4, #16]
1000cf38:	4293      	cmp	r3, r2
1000cf3a:	dd01      	ble.n	1000cf40 <_printf_common+0xbc>
1000cf3c:	1a9b      	subs	r3, r3, r2
1000cf3e:	18ed      	adds	r5, r5, r3
1000cf40:	2700      	movs	r7, #0
1000cf42:	42af      	cmp	r7, r5
1000cf44:	da0a      	bge.n	1000cf5c <_printf_common+0xd8>
1000cf46:	1c22      	adds	r2, r4, #0
1000cf48:	2301      	movs	r3, #1
1000cf4a:	9800      	ldr	r0, [sp, #0]
1000cf4c:	9901      	ldr	r1, [sp, #4]
1000cf4e:	321a      	adds	r2, #26
1000cf50:	9e08      	ldr	r6, [sp, #32]
1000cf52:	47b0      	blx	r6
1000cf54:	1c43      	adds	r3, r0, #1
1000cf56:	d0de      	beq.n	1000cf16 <_printf_common+0x92>
1000cf58:	3701      	adds	r7, #1
1000cf5a:	e7f2      	b.n	1000cf42 <_printf_common+0xbe>
1000cf5c:	2000      	movs	r0, #0
1000cf5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000cf60 <_printf_i>:
1000cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf62:	b08b      	sub	sp, #44	; 0x2c
1000cf64:	9206      	str	r2, [sp, #24]
1000cf66:	1c0a      	adds	r2, r1, #0
1000cf68:	3243      	adds	r2, #67	; 0x43
1000cf6a:	9307      	str	r3, [sp, #28]
1000cf6c:	9005      	str	r0, [sp, #20]
1000cf6e:	9204      	str	r2, [sp, #16]
1000cf70:	7e0a      	ldrb	r2, [r1, #24]
1000cf72:	1c0c      	adds	r4, r1, #0
1000cf74:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000cf76:	2a6e      	cmp	r2, #110	; 0x6e
1000cf78:	d100      	bne.n	1000cf7c <_printf_i+0x1c>
1000cf7a:	e0a8      	b.n	1000d0ce <_printf_i+0x16e>
1000cf7c:	d811      	bhi.n	1000cfa2 <_printf_i+0x42>
1000cf7e:	2a63      	cmp	r2, #99	; 0x63
1000cf80:	d022      	beq.n	1000cfc8 <_printf_i+0x68>
1000cf82:	d809      	bhi.n	1000cf98 <_printf_i+0x38>
1000cf84:	2a00      	cmp	r2, #0
1000cf86:	d100      	bne.n	1000cf8a <_printf_i+0x2a>
1000cf88:	e0b2      	b.n	1000d0f0 <_printf_i+0x190>
1000cf8a:	2a58      	cmp	r2, #88	; 0x58
1000cf8c:	d000      	beq.n	1000cf90 <_printf_i+0x30>
1000cf8e:	e0c2      	b.n	1000d116 <_printf_i+0x1b6>
1000cf90:	3145      	adds	r1, #69	; 0x45
1000cf92:	700a      	strb	r2, [r1, #0]
1000cf94:	4a7c      	ldr	r2, [pc, #496]	; (1000d188 <_printf_i+0x228>)
1000cf96:	e04f      	b.n	1000d038 <_printf_i+0xd8>
1000cf98:	2a64      	cmp	r2, #100	; 0x64
1000cf9a:	d01d      	beq.n	1000cfd8 <_printf_i+0x78>
1000cf9c:	2a69      	cmp	r2, #105	; 0x69
1000cf9e:	d01b      	beq.n	1000cfd8 <_printf_i+0x78>
1000cfa0:	e0b9      	b.n	1000d116 <_printf_i+0x1b6>
1000cfa2:	2a73      	cmp	r2, #115	; 0x73
1000cfa4:	d100      	bne.n	1000cfa8 <_printf_i+0x48>
1000cfa6:	e0a7      	b.n	1000d0f8 <_printf_i+0x198>
1000cfa8:	d809      	bhi.n	1000cfbe <_printf_i+0x5e>
1000cfaa:	2a6f      	cmp	r2, #111	; 0x6f
1000cfac:	d029      	beq.n	1000d002 <_printf_i+0xa2>
1000cfae:	2a70      	cmp	r2, #112	; 0x70
1000cfb0:	d000      	beq.n	1000cfb4 <_printf_i+0x54>
1000cfb2:	e0b0      	b.n	1000d116 <_printf_i+0x1b6>
1000cfb4:	2220      	movs	r2, #32
1000cfb6:	6809      	ldr	r1, [r1, #0]
1000cfb8:	430a      	orrs	r2, r1
1000cfba:	6022      	str	r2, [r4, #0]
1000cfbc:	e037      	b.n	1000d02e <_printf_i+0xce>
1000cfbe:	2a75      	cmp	r2, #117	; 0x75
1000cfc0:	d01f      	beq.n	1000d002 <_printf_i+0xa2>
1000cfc2:	2a78      	cmp	r2, #120	; 0x78
1000cfc4:	d033      	beq.n	1000d02e <_printf_i+0xce>
1000cfc6:	e0a6      	b.n	1000d116 <_printf_i+0x1b6>
1000cfc8:	1c0d      	adds	r5, r1, #0
1000cfca:	681a      	ldr	r2, [r3, #0]
1000cfcc:	3542      	adds	r5, #66	; 0x42
1000cfce:	1d11      	adds	r1, r2, #4
1000cfd0:	6019      	str	r1, [r3, #0]
1000cfd2:	6813      	ldr	r3, [r2, #0]
1000cfd4:	702b      	strb	r3, [r5, #0]
1000cfd6:	e0a1      	b.n	1000d11c <_printf_i+0x1bc>
1000cfd8:	6821      	ldr	r1, [r4, #0]
1000cfda:	681a      	ldr	r2, [r3, #0]
1000cfdc:	0608      	lsls	r0, r1, #24
1000cfde:	d503      	bpl.n	1000cfe8 <_printf_i+0x88>
1000cfe0:	1d11      	adds	r1, r2, #4
1000cfe2:	6019      	str	r1, [r3, #0]
1000cfe4:	6816      	ldr	r6, [r2, #0]
1000cfe6:	e005      	b.n	1000cff4 <_printf_i+0x94>
1000cfe8:	0649      	lsls	r1, r1, #25
1000cfea:	d5f9      	bpl.n	1000cfe0 <_printf_i+0x80>
1000cfec:	1d11      	adds	r1, r2, #4
1000cfee:	6019      	str	r1, [r3, #0]
1000cff0:	2300      	movs	r3, #0
1000cff2:	5ed6      	ldrsh	r6, [r2, r3]
1000cff4:	2e00      	cmp	r6, #0
1000cff6:	da3b      	bge.n	1000d070 <_printf_i+0x110>
1000cff8:	232d      	movs	r3, #45	; 0x2d
1000cffa:	9a04      	ldr	r2, [sp, #16]
1000cffc:	4276      	negs	r6, r6
1000cffe:	7013      	strb	r3, [r2, #0]
1000d000:	e036      	b.n	1000d070 <_printf_i+0x110>
1000d002:	6821      	ldr	r1, [r4, #0]
1000d004:	681a      	ldr	r2, [r3, #0]
1000d006:	0608      	lsls	r0, r1, #24
1000d008:	d503      	bpl.n	1000d012 <_printf_i+0xb2>
1000d00a:	1d11      	adds	r1, r2, #4
1000d00c:	6019      	str	r1, [r3, #0]
1000d00e:	6816      	ldr	r6, [r2, #0]
1000d010:	e005      	b.n	1000d01e <_printf_i+0xbe>
1000d012:	0649      	lsls	r1, r1, #25
1000d014:	d5f9      	bpl.n	1000d00a <_printf_i+0xaa>
1000d016:	1d11      	adds	r1, r2, #4
1000d018:	6019      	str	r1, [r3, #0]
1000d01a:	6816      	ldr	r6, [r2, #0]
1000d01c:	b2b6      	uxth	r6, r6
1000d01e:	4b5a      	ldr	r3, [pc, #360]	; (1000d188 <_printf_i+0x228>)
1000d020:	7e22      	ldrb	r2, [r4, #24]
1000d022:	9303      	str	r3, [sp, #12]
1000d024:	270a      	movs	r7, #10
1000d026:	2a6f      	cmp	r2, #111	; 0x6f
1000d028:	d11d      	bne.n	1000d066 <_printf_i+0x106>
1000d02a:	2708      	movs	r7, #8
1000d02c:	e01b      	b.n	1000d066 <_printf_i+0x106>
1000d02e:	1c22      	adds	r2, r4, #0
1000d030:	2178      	movs	r1, #120	; 0x78
1000d032:	3245      	adds	r2, #69	; 0x45
1000d034:	7011      	strb	r1, [r2, #0]
1000d036:	4a55      	ldr	r2, [pc, #340]	; (1000d18c <_printf_i+0x22c>)
1000d038:	6819      	ldr	r1, [r3, #0]
1000d03a:	9203      	str	r2, [sp, #12]
1000d03c:	1d08      	adds	r0, r1, #4
1000d03e:	6822      	ldr	r2, [r4, #0]
1000d040:	6018      	str	r0, [r3, #0]
1000d042:	680e      	ldr	r6, [r1, #0]
1000d044:	0610      	lsls	r0, r2, #24
1000d046:	d402      	bmi.n	1000d04e <_printf_i+0xee>
1000d048:	0650      	lsls	r0, r2, #25
1000d04a:	d500      	bpl.n	1000d04e <_printf_i+0xee>
1000d04c:	b2b6      	uxth	r6, r6
1000d04e:	07d3      	lsls	r3, r2, #31
1000d050:	d502      	bpl.n	1000d058 <_printf_i+0xf8>
1000d052:	2320      	movs	r3, #32
1000d054:	431a      	orrs	r2, r3
1000d056:	6022      	str	r2, [r4, #0]
1000d058:	2710      	movs	r7, #16
1000d05a:	2e00      	cmp	r6, #0
1000d05c:	d103      	bne.n	1000d066 <_printf_i+0x106>
1000d05e:	2320      	movs	r3, #32
1000d060:	6822      	ldr	r2, [r4, #0]
1000d062:	439a      	bics	r2, r3
1000d064:	6022      	str	r2, [r4, #0]
1000d066:	1c23      	adds	r3, r4, #0
1000d068:	2200      	movs	r2, #0
1000d06a:	3343      	adds	r3, #67	; 0x43
1000d06c:	701a      	strb	r2, [r3, #0]
1000d06e:	e002      	b.n	1000d076 <_printf_i+0x116>
1000d070:	270a      	movs	r7, #10
1000d072:	4b45      	ldr	r3, [pc, #276]	; (1000d188 <_printf_i+0x228>)
1000d074:	9303      	str	r3, [sp, #12]
1000d076:	6863      	ldr	r3, [r4, #4]
1000d078:	60a3      	str	r3, [r4, #8]
1000d07a:	2b00      	cmp	r3, #0
1000d07c:	db03      	blt.n	1000d086 <_printf_i+0x126>
1000d07e:	2204      	movs	r2, #4
1000d080:	6821      	ldr	r1, [r4, #0]
1000d082:	4391      	bics	r1, r2
1000d084:	6021      	str	r1, [r4, #0]
1000d086:	2e00      	cmp	r6, #0
1000d088:	d102      	bne.n	1000d090 <_printf_i+0x130>
1000d08a:	9d04      	ldr	r5, [sp, #16]
1000d08c:	2b00      	cmp	r3, #0
1000d08e:	d00e      	beq.n	1000d0ae <_printf_i+0x14e>
1000d090:	9d04      	ldr	r5, [sp, #16]
1000d092:	1c30      	adds	r0, r6, #0
1000d094:	1c39      	adds	r1, r7, #0
1000d096:	f7fd fa01 	bl	1000a49c <__aeabi_uidivmod>
1000d09a:	9b03      	ldr	r3, [sp, #12]
1000d09c:	3d01      	subs	r5, #1
1000d09e:	5c5b      	ldrb	r3, [r3, r1]
1000d0a0:	1c30      	adds	r0, r6, #0
1000d0a2:	702b      	strb	r3, [r5, #0]
1000d0a4:	1c39      	adds	r1, r7, #0
1000d0a6:	f7fd f9d9 	bl	1000a45c <__aeabi_uidiv>
1000d0aa:	1e06      	subs	r6, r0, #0
1000d0ac:	d1f1      	bne.n	1000d092 <_printf_i+0x132>
1000d0ae:	2f08      	cmp	r7, #8
1000d0b0:	d109      	bne.n	1000d0c6 <_printf_i+0x166>
1000d0b2:	6823      	ldr	r3, [r4, #0]
1000d0b4:	07db      	lsls	r3, r3, #31
1000d0b6:	d506      	bpl.n	1000d0c6 <_printf_i+0x166>
1000d0b8:	6863      	ldr	r3, [r4, #4]
1000d0ba:	6922      	ldr	r2, [r4, #16]
1000d0bc:	4293      	cmp	r3, r2
1000d0be:	dc02      	bgt.n	1000d0c6 <_printf_i+0x166>
1000d0c0:	2330      	movs	r3, #48	; 0x30
1000d0c2:	3d01      	subs	r5, #1
1000d0c4:	702b      	strb	r3, [r5, #0]
1000d0c6:	9b04      	ldr	r3, [sp, #16]
1000d0c8:	1b5b      	subs	r3, r3, r5
1000d0ca:	6123      	str	r3, [r4, #16]
1000d0cc:	e02b      	b.n	1000d126 <_printf_i+0x1c6>
1000d0ce:	6809      	ldr	r1, [r1, #0]
1000d0d0:	681a      	ldr	r2, [r3, #0]
1000d0d2:	0608      	lsls	r0, r1, #24
1000d0d4:	d407      	bmi.n	1000d0e6 <_printf_i+0x186>
1000d0d6:	0649      	lsls	r1, r1, #25
1000d0d8:	d505      	bpl.n	1000d0e6 <_printf_i+0x186>
1000d0da:	1d11      	adds	r1, r2, #4
1000d0dc:	6019      	str	r1, [r3, #0]
1000d0de:	6813      	ldr	r3, [r2, #0]
1000d0e0:	8aa2      	ldrh	r2, [r4, #20]
1000d0e2:	801a      	strh	r2, [r3, #0]
1000d0e4:	e004      	b.n	1000d0f0 <_printf_i+0x190>
1000d0e6:	1d11      	adds	r1, r2, #4
1000d0e8:	6019      	str	r1, [r3, #0]
1000d0ea:	6813      	ldr	r3, [r2, #0]
1000d0ec:	6962      	ldr	r2, [r4, #20]
1000d0ee:	601a      	str	r2, [r3, #0]
1000d0f0:	2300      	movs	r3, #0
1000d0f2:	9d04      	ldr	r5, [sp, #16]
1000d0f4:	6123      	str	r3, [r4, #16]
1000d0f6:	e016      	b.n	1000d126 <_printf_i+0x1c6>
1000d0f8:	681a      	ldr	r2, [r3, #0]
1000d0fa:	1d11      	adds	r1, r2, #4
1000d0fc:	6019      	str	r1, [r3, #0]
1000d0fe:	6815      	ldr	r5, [r2, #0]
1000d100:	2100      	movs	r1, #0
1000d102:	1c28      	adds	r0, r5, #0
1000d104:	6862      	ldr	r2, [r4, #4]
1000d106:	f000 f843 	bl	1000d190 <memchr>
1000d10a:	2800      	cmp	r0, #0
1000d10c:	d001      	beq.n	1000d112 <_printf_i+0x1b2>
1000d10e:	1b40      	subs	r0, r0, r5
1000d110:	6060      	str	r0, [r4, #4]
1000d112:	6863      	ldr	r3, [r4, #4]
1000d114:	e003      	b.n	1000d11e <_printf_i+0x1be>
1000d116:	1c25      	adds	r5, r4, #0
1000d118:	3542      	adds	r5, #66	; 0x42
1000d11a:	702a      	strb	r2, [r5, #0]
1000d11c:	2301      	movs	r3, #1
1000d11e:	6123      	str	r3, [r4, #16]
1000d120:	2300      	movs	r3, #0
1000d122:	9a04      	ldr	r2, [sp, #16]
1000d124:	7013      	strb	r3, [r2, #0]
1000d126:	9b07      	ldr	r3, [sp, #28]
1000d128:	9805      	ldr	r0, [sp, #20]
1000d12a:	9300      	str	r3, [sp, #0]
1000d12c:	1c21      	adds	r1, r4, #0
1000d12e:	9b06      	ldr	r3, [sp, #24]
1000d130:	aa09      	add	r2, sp, #36	; 0x24
1000d132:	f7ff fea7 	bl	1000ce84 <_printf_common>
1000d136:	1c43      	adds	r3, r0, #1
1000d138:	d102      	bne.n	1000d140 <_printf_i+0x1e0>
1000d13a:	2001      	movs	r0, #1
1000d13c:	4240      	negs	r0, r0
1000d13e:	e021      	b.n	1000d184 <_printf_i+0x224>
1000d140:	1c2a      	adds	r2, r5, #0
1000d142:	6923      	ldr	r3, [r4, #16]
1000d144:	9805      	ldr	r0, [sp, #20]
1000d146:	9906      	ldr	r1, [sp, #24]
1000d148:	9d07      	ldr	r5, [sp, #28]
1000d14a:	47a8      	blx	r5
1000d14c:	1c43      	adds	r3, r0, #1
1000d14e:	d0f4      	beq.n	1000d13a <_printf_i+0x1da>
1000d150:	6823      	ldr	r3, [r4, #0]
1000d152:	079b      	lsls	r3, r3, #30
1000d154:	d405      	bmi.n	1000d162 <_printf_i+0x202>
1000d156:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000d158:	68e0      	ldr	r0, [r4, #12]
1000d15a:	4298      	cmp	r0, r3
1000d15c:	da12      	bge.n	1000d184 <_printf_i+0x224>
1000d15e:	1c18      	adds	r0, r3, #0
1000d160:	e010      	b.n	1000d184 <_printf_i+0x224>
1000d162:	2500      	movs	r5, #0
1000d164:	68e3      	ldr	r3, [r4, #12]
1000d166:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000d168:	1a9b      	subs	r3, r3, r2
1000d16a:	429d      	cmp	r5, r3
1000d16c:	daf3      	bge.n	1000d156 <_printf_i+0x1f6>
1000d16e:	1c22      	adds	r2, r4, #0
1000d170:	2301      	movs	r3, #1
1000d172:	9805      	ldr	r0, [sp, #20]
1000d174:	9906      	ldr	r1, [sp, #24]
1000d176:	3219      	adds	r2, #25
1000d178:	9e07      	ldr	r6, [sp, #28]
1000d17a:	47b0      	blx	r6
1000d17c:	1c43      	adds	r3, r0, #1
1000d17e:	d0dc      	beq.n	1000d13a <_printf_i+0x1da>
1000d180:	3501      	adds	r5, #1
1000d182:	e7ef      	b.n	1000d164 <_printf_i+0x204>
1000d184:	b00b      	add	sp, #44	; 0x2c
1000d186:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d188:	10011d66 	.word	0x10011d66
1000d18c:	10011d77 	.word	0x10011d77

1000d190 <memchr>:
1000d190:	b2c9      	uxtb	r1, r1
1000d192:	1882      	adds	r2, r0, r2
1000d194:	4290      	cmp	r0, r2
1000d196:	d004      	beq.n	1000d1a2 <memchr+0x12>
1000d198:	7803      	ldrb	r3, [r0, #0]
1000d19a:	428b      	cmp	r3, r1
1000d19c:	d002      	beq.n	1000d1a4 <memchr+0x14>
1000d19e:	3001      	adds	r0, #1
1000d1a0:	e7f8      	b.n	1000d194 <memchr+0x4>
1000d1a2:	2000      	movs	r0, #0
1000d1a4:	4770      	bx	lr

1000d1a6 <memmove>:
1000d1a6:	b510      	push	{r4, lr}
1000d1a8:	4281      	cmp	r1, r0
1000d1aa:	d208      	bcs.n	1000d1be <memmove+0x18>
1000d1ac:	188b      	adds	r3, r1, r2
1000d1ae:	4298      	cmp	r0, r3
1000d1b0:	d205      	bcs.n	1000d1be <memmove+0x18>
1000d1b2:	1a9b      	subs	r3, r3, r2
1000d1b4:	3a01      	subs	r2, #1
1000d1b6:	d309      	bcc.n	1000d1cc <memmove+0x26>
1000d1b8:	5c99      	ldrb	r1, [r3, r2]
1000d1ba:	5481      	strb	r1, [r0, r2]
1000d1bc:	e7fa      	b.n	1000d1b4 <memmove+0xe>
1000d1be:	2300      	movs	r3, #0
1000d1c0:	4293      	cmp	r3, r2
1000d1c2:	d003      	beq.n	1000d1cc <memmove+0x26>
1000d1c4:	5ccc      	ldrb	r4, [r1, r3]
1000d1c6:	54c4      	strb	r4, [r0, r3]
1000d1c8:	3301      	adds	r3, #1
1000d1ca:	e7f9      	b.n	1000d1c0 <memmove+0x1a>
1000d1cc:	bd10      	pop	{r4, pc}

1000d1ce <_realloc_r>:
1000d1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d1d0:	1c06      	adds	r6, r0, #0
1000d1d2:	1c0c      	adds	r4, r1, #0
1000d1d4:	1c15      	adds	r5, r2, #0
1000d1d6:	2900      	cmp	r1, #0
1000d1d8:	d104      	bne.n	1000d1e4 <_realloc_r+0x16>
1000d1da:	1c11      	adds	r1, r2, #0
1000d1dc:	f7ff fc4a 	bl	1000ca74 <_malloc_r>
1000d1e0:	1c04      	adds	r4, r0, #0
1000d1e2:	e018      	b.n	1000d216 <_realloc_r+0x48>
1000d1e4:	2a00      	cmp	r2, #0
1000d1e6:	d103      	bne.n	1000d1f0 <_realloc_r+0x22>
1000d1e8:	f7ff fbfe 	bl	1000c9e8 <_free_r>
1000d1ec:	1c2c      	adds	r4, r5, #0
1000d1ee:	e012      	b.n	1000d216 <_realloc_r+0x48>
1000d1f0:	f000 f813 	bl	1000d21a <_malloc_usable_size_r>
1000d1f4:	42a8      	cmp	r0, r5
1000d1f6:	d20e      	bcs.n	1000d216 <_realloc_r+0x48>
1000d1f8:	1c30      	adds	r0, r6, #0
1000d1fa:	1c29      	adds	r1, r5, #0
1000d1fc:	f7ff fc3a 	bl	1000ca74 <_malloc_r>
1000d200:	1e07      	subs	r7, r0, #0
1000d202:	d007      	beq.n	1000d214 <_realloc_r+0x46>
1000d204:	1c21      	adds	r1, r4, #0
1000d206:	1c2a      	adds	r2, r5, #0
1000d208:	f7ff fbcf 	bl	1000c9aa <memcpy>
1000d20c:	1c30      	adds	r0, r6, #0
1000d20e:	1c21      	adds	r1, r4, #0
1000d210:	f7ff fbea 	bl	1000c9e8 <_free_r>
1000d214:	1c3c      	adds	r4, r7, #0
1000d216:	1c20      	adds	r0, r4, #0
1000d218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000d21a <_malloc_usable_size_r>:
1000d21a:	1f0b      	subs	r3, r1, #4
1000d21c:	681a      	ldr	r2, [r3, #0]
1000d21e:	1f10      	subs	r0, r2, #4
1000d220:	2a00      	cmp	r2, #0
1000d222:	da04      	bge.n	1000d22e <_malloc_usable_size_r+0x14>
1000d224:	1889      	adds	r1, r1, r2
1000d226:	3904      	subs	r1, #4
1000d228:	680b      	ldr	r3, [r1, #0]
1000d22a:	18d0      	adds	r0, r2, r3
1000d22c:	3804      	subs	r0, #4
1000d22e:	4770      	bx	lr

1000d230 <__FUNCTION__.5961>:
1000d230:	706f 6974 6167 755f 6974 5f6c 6c63 736f     optiga_util_clos
1000d240:	5f65 7061 6c70 6369 7461 6f69 006e          e_application.

1000d24e <__FUNCTION__.6022>:
1000d24e:	706f 6974 6167 755f 6974 5f6c 7270 746f     optiga_util_prot
1000d25e:	6365 6574 5f64 7075 6164 6574 735f 6174     ected_update_sta
1000d26e:	7472 6f00                                        rt.

1000d271 <__FUNCTION__.5972>:
1000d271:	706f 6974 6167 755f 6974 5f6c 6572 6461     optiga_util_read
1000d281:	645f 7461 0061                              _data.

1000d287 <__FUNCTION__.6030>:
1000d287:	706f 6974 6167 755f 6974 5f6c 7270 746f     optiga_util_prot
1000d297:	6365 6574 5f64 7075 6164 6574 635f 6e6f     ected_update_con
1000d2a7:	6974 756e 0065                              tinue.

1000d2ad <__FUNCTION__.5982>:
1000d2ad:	706f 6974 6167 755f 6974 5f6c 6572 6461     optiga_util_read
1000d2bd:	6d5f 7465 6461 7461 0061 6f5b 7470 6769     _metadata.[optig
1000d2cd:	2061 7475 6c69 205d 2020 2020 203a 1b00     a util]     : ..
1000d2dd:	305b 006d                                   [0m.

1000d2e1 <__FUNCTION__.6038>:
1000d2e1:	706f 6974 6167 755f 6974 5f6c 7270 746f     optiga_util_prot
1000d2f1:	6365 6574 5f64 7075 6164 6574 665f 6e69     ected_update_fin
1000d301:	6c61 6f00                                        al.

1000d304 <__FUNCTION__.5993>:
1000d304:	706f 6974 6167 755f 6974 5f6c 7277 7469     optiga_util_writ
1000d314:	5f65 6164 6174 6f00                              e_data.

1000d31b <__FUNCTION__.6046>:
1000d31b:	706f 6974 6167 755f 6974 5f6c 7075 6164     optiga_util_upda
1000d32b:	6574 635f 756f 746e 6f00                         te_count.

1000d334 <__FUNCTION__.6003>:
1000d334:	706f 6974 6167 755f 6974 5f6c 7277 7469     optiga_util_writ
1000d344:	5f65 656d 6174 6164 6174 6f00                    e_metadata.

1000d34f <__FUNCTION__.5954>:
1000d34f:	706f 6974 6167 755f 6974 5f6c 706f 6e65     optiga_util_open
1000d35f:	615f 7070 696c 6163 6974 6e6f 6f00               _application.

1000d36c <__FUNCTION__.6123>:
1000d36c:	706f 6974 6167 635f 7972 7470 685f 7361     optiga_crypt_has
1000d37c:	5f68 6966 616e 696c 657a 6f00                    h_finalize.

1000d387 <__FUNCTION__.6239>:
1000d387:	706f 6974 6167 635f 7972 7470 725f 6173     optiga_crypt_rsa
1000d397:	655f 636e 7972 7470 735f 7365 6973 6e6f     _encrypt_session
	...

1000d3a8 <__FUNCTION__.6189>:
1000d3a8:	706f 6974 6167 635f 7972 7470 725f 6173     optiga_crypt_rsa
1000d3b8:	675f 6e65 7265 7461 5f65 656b 7079 6961     _generate_keypai
1000d3c8:	0072                                        r.

1000d3ca <__FUNCTION__.6134>:
1000d3ca:	706f 6974 6167 635f 7972 7470 655f 6363     optiga_crypt_ecc
1000d3da:	675f 6e65 7265 7461 5f65 656b 7079 6961     _generate_keypai
1000d3ea:	0072                                        r.

1000d3ec <__FUNCTION__.6254>:
1000d3ec:	706f 6974 6167 635f 7972 7470 725f 6173     optiga_crypt_rsa
1000d3fc:	645f 6365 7972 7470 615f 646e 655f 7078     _decrypt_and_exp
1000d40c:	726f 0074                                   ort.

1000d410 <__FUNCTION__.6143>:
1000d410:	706f 6974 6167 635f 7972 7470 655f 6463     optiga_crypt_ecd
1000d420:	6173 735f 6769 006e                         sa_sign.

1000d428 <__FUNCTION__.6200>:
1000d428:	706f 6974 6167 635f 7972 7470 725f 6173     optiga_crypt_rsa
1000d438:	735f 6769 006e                              _sign.

1000d43e <__FUNCTION__.6096>:
1000d43e:	706f 6974 6167 635f 7972 7470 725f 6e61     optiga_crypt_ran
1000d44e:	6f64 006d 6f5b 7470 6769 2061 7263 7079     dom.[optiga cryp
1000d45e:	5d74 2020 2020 203a 6f00                         t]    : .

1000d467 <__FUNCTION__.6153>:
1000d467:	706f 6974 6167 635f 7972 7470 655f 6463     optiga_crypt_ecd
1000d477:	6173 765f 7265 6669 0079                    sa_verify.

1000d481 <__FUNCTION__.6267>:
1000d481:	706f 6974 6167 635f 7972 7470 725f 6173     optiga_crypt_rsa
1000d491:	645f 6365 7972 7470 615f 646e 735f 6f74     _decrypt_and_sto
1000d4a1:	6572 6f00                                        re.

1000d4a4 <__FUNCTION__.6212>:
1000d4a4:	706f 6974 6167 635f 7972 7470 725f 6173     optiga_crypt_rsa
1000d4b4:	765f 7265 6669 0079                         _verify.

1000d4bc <__FUNCTION__.6163>:
1000d4bc:	706f 6974 6167 635f 7972 7470 655f 6463     optiga_crypt_ecd
1000d4cc:	0068                                        h.

1000d4ce <__FUNCTION__.6104>:
1000d4ce:	706f 6974 6167 635f 7972 7470 685f 7361     optiga_crypt_has
1000d4de:	5f68 7473 7261 0074                         h_start.

1000d4e6 <__FUNCTION__.6114>:
1000d4e6:	706f 6974 6167 635f 7972 7470 685f 7361     optiga_crypt_has
1000d4f6:	5f68 7075 6164 6574 6f00                         h_update.

1000d4ff <__FUNCTION__.6226>:
1000d4ff:	706f 6974 6167 635f 7972 7470 725f 6173     optiga_crypt_rsa
1000d50f:	655f 636e 7972 7470 6d5f 7365 6173 6567     _encrypt_message
	...

1000d520 <__FUNCTION__.6276>:
1000d520:	706f 6974 6167 635f 7972 7470 725f 6173     optiga_crypt_rsa
1000d530:	675f 6e65 7265 7461 5f65 7270 5f65 616d     _generate_pre_ma
1000d540:	7473 7265 735f 6365 6572 0074               ster_secret.

1000d54c <__FUNCTION__.6178>:
1000d54c:	706f 6974 6167 635f 7972 7470 745f 736c     optiga_crypt_tls
1000d55c:	705f 6672 735f 6168 3532 0036 3e3e 3e3e     _prf_sha256.>>>>
1000d56c:	5b00 706f 6974 6167 6320 6d6f 736d 205d     .[optiga comms] 
1000d57c:	2020 3a20 0020 5b1b 3333 006d 5b1b 3639        : ..[33m..[96
1000d58c:	006d 3c3c 3c3c 5000 616c 6674 726f 206d     m.<<<<.Platform 
1000d59c:	6942 646e 6e69 0067                         Binding.

1000d5a4 <g_pctr_states_table>:
1000d5a4:	0400 0400 0201 ffff 0201 ffff ffff 0707     ................
1000d5b4:	0a0d 7325 7325 7325 7325 5000 7361 6573     ..%s%s%s%s.Passe
1000d5c4:	0064 6146 6c69 6465 7720 7469 2068 6572     d.Failed with re
1000d5d4:	7574 6e72 7620 6c61 6575 2d20 0020 3325     turn value - .%3
1000d5e4:	7337 4c00 6e65 7467 2068 666f 6420 7461     7s.Length of dat
1000d5f4:	2061 202d 2500 3532 2573 2573 0073          a - .%25s%s%s.

1000d602 <__FUNCTION__.6428>:
1000d602:	706f 6974 6167 635f 646d 655f 636e 7972     optiga_cmd_encry
1000d612:	7470 615f 7973 006d                         pt_asym.

1000d61a <__FUNCTION__.6487>:
1000d61a:	706f 6974 6167 635f 646d 735f 7465 6f5f     optiga_cmd_set_o
1000d62a:	6a62 6365 5f74 7270 746f 6365 6574 0064     bject_protected.

1000d63a <__FUNCTION__.6243>:
1000d63a:	706f 6974 6167 635f 646d 635f 6f6c 6573     optiga_cmd_close
1000d64a:	615f 7070 696c 6163 6974 6e6f 6f00               _application.

1000d657 <__FUNCTION__.6383>:
1000d657:	706f 6974 6167 635f 646d 645f 7265 7669     optiga_cmd_deriv
1000d667:	5f65 656b 0079                              e_key.

1000d66d <__FUNCTION__.6468>:
1000d66d:	706f 6974 6167 635f 646d 635f 6c61 5f63     optiga_cmd_calc_
1000d67d:	6168 6873 6f00                                   hash.

1000d682 <__FUNCTION__.6359>:
1000d682:	706f 6974 6167 635f 646d 635f 6c61 5f63     optiga_cmd_calc_
1000d692:	7373 6365 6f00                                   ssec.

1000d697 <__FUNCTION__.6449>:
1000d697:	706f 6974 6167 635f 646d 645f 6365 7972     optiga_cmd_decry
1000d6a7:	7470 615f 7973 006d 6553 646e 6e69 2067     pt_asym.Sending 
1000d6b7:	6572 6461 6420 7461 2061 6f63 6d6d 6e61     read data comman
1000d6c7:	2e64 2e2e 5b00 706f 6974 6167 6320 646d     d....[optiga cmd
1000d6d7:	205d 2020 2020 3a20 0020 7250 636f 7365     ]      : .Proces
1000d6e7:	6973 676e 7220 7365 6f70 736e 2065 6f66     sing response fo
1000d6f7:	2072 6572 6461 6420 7461 2061 6f63 6d6d     r read data comm
1000d707:	6e61 2e64 2e2e 4500 7272 726f 6920 206e     and....Error in 
1000d717:	7270 636f 7365 6973 676e 7220 6165 2064     processing read 
1000d727:	6164 6174 7220 7365 6f70 736e 2e65 2e2e     data response...
1000d737:	5200 7365 6f70 736e 2065 666f 7220 6165     .Response of rea
1000d747:	2064 6164 6174 6320 6d6f 616d 646e 6920     d data command i
1000d757:	2073 7270 636f 7365 6573 2e64 2e2e 5300     s processed....S
1000d767:	6e65 6964 676e 7320 7465 6420 7461 2061     ending set data 
1000d777:	6f63 6d6d 6e61 2e64 2e2e 5000 6f72 6563     command....Proce
1000d787:	7373 6e69 2067 6572 7073 6e6f 6573 6620     ssing response f
1000d797:	726f 7320 7465 6420 7461 2061 6f63 6d6d     or set data comm
1000d7a7:	6e61 2e64 2e2e 4500 7272 726f 6920 206e     and....Error in 
1000d7b7:	7270 636f 7365 6973 676e 7320 7465 6420     processing set d
1000d7c7:	7461 2061 6572 7073 6e6f 6573 2e2e 002e     ata response....
1000d7d7:	6552 7073 6e6f 6573 6f20 2066 6573 2074     Response of set 
1000d7e7:	6164 6174 6320 6d6f 616d 646e 6920 2073     data command is 
1000d7f7:	7270 636f 7365 6573 2e64 2e2e 5300 6e65     processed....Sen
1000d807:	6964 676e 6720 7465 7220 6e61 6f64 206d     ding get random 
1000d817:	6f63 6d6d 6e61 2e64 2e2e 5000 6f72 6563     command....Proce
1000d827:	7373 6e69 2067 6572 7073 6e6f 6573 6620     ssing response f
1000d837:	726f 6720 7465 7220 6e61 6f64 206d 6f63     or get random co
1000d847:	6d6d 6e61 2e64 2e2e 4500 7272 726f 6920     mmand....Error i
1000d857:	206e 7270 636f 7365 6973 676e 6720 7465     n processing get
1000d867:	7220 6e61 6f64 206d 6572 7073 6e6f 6573      random response
1000d877:	2e2e 002e 6552 7073 6e6f 6573 6f20 2066     ....Response of 
1000d887:	6567 2074 6172 646e 6d6f 6320 6d6f 616d     get random comma
1000d897:	646e 6920 2073 7270 636f 7365 6573 2e64     nd is processed.
1000d8a7:	2e2e 5300 6e65 6964 676e 6320 6c61 7563     ...Sending calcu
1000d8b7:	616c 6574 7320 6769 206e 6f63 6d6d 6e61     late sign comman
1000d8c7:	2e64 002e 7250 636f 7365 6973 676e 7220     d...Processing r
1000d8d7:	7365 6f70 736e 2065 6f66 2072 6163 636c     esponse for calc
1000d8e7:	6c75 7461 2065 6973 6e67 6320 6d6f 616d     ulate sign comma
1000d8f7:	646e 2e2e 002e 7245 6f72 2072 6e69 7020     nd....Error in p
1000d907:	6f72 6563 7373 6e69 2067 6163 636c 6c75     rocessing calcul
1000d917:	7461 2065 6973 6e67 7220 7365 6f70 736e     ate sign respons
1000d927:	2e65 2e2e 5200 7365 6f70 736e 2065 666f     e....Response of
1000d937:	6320 6c61 7563 616c 6574 7320 6769 206e      calculate sign 
1000d947:	6f63 6d6d 6e61 2064 7369 7020 6f72 6563     command is proce
1000d957:	7373 6465 2e2e 002e 6553 646e 6e69 2067     ssed....Sending 
1000d967:	6576 6972 7966 7320 6769 206e 6f63 6d6d     verify sign comm
1000d977:	6e61 2e64 002e 7250 636f 7365 6973 676e     and...Processing
1000d987:	7220 7365 6f70 736e 2065 6f66 2072 6576      response for ve
1000d997:	6972 7966 7320 6769 206e 6f63 6d6d 6e61     rify sign comman
1000d9a7:	2e64 2e2e 4500 7272 726f 6920 206e 7270     d....Error in pr
1000d9b7:	636f 7365 6973 676e 7620 7265 6669 2079     ocessing verify 
1000d9c7:	6973 6e67 7220 7365 6f70 736e 2e65 2e2e     sign response...
1000d9d7:	5200 7365 6f70 736e 2065 666f 7620 7265     .Response of ver
1000d9e7:	7969 7320 6769 206e 6f63 6d6d 6e61 2064     iy sign command 
1000d9f7:	7369 7020 6f72 6563 7373 6465 2e2e 002e     is processed....
1000da07:	6553 646e 6e69 2067 6163 636c 6c75 7461     Sending calculat
1000da17:	2065 6873 7261 6465 7320 6365 6572 2074     e shared secret 
1000da27:	6f63 6d6d 6e61 2e64 002e 7250 636f 7365     command...Proces
1000da37:	6973 676e 7220 7365 6f70 736e 2065 6f66     sing response fo
1000da47:	2072 6163 636c 6c75 7461 2065 6873 7261     r calculate shar
1000da57:	6465 7320 6365 6572 2074 6f63 6d6d 6e61     ed secret comman
1000da67:	2e64 2e2e 4500 7272 726f 6920 206e 7270     d....Error in pr
1000da77:	636f 7365 6973 676e 6320 6c61 7563 616c     ocessing calcula
1000da87:	6574 7320 6168 6572 2064 6573 7263 7465     te shared secret
1000da97:	7220 7365 6f70 736e 2e65 2e2e 5200 7365      response....Res
1000daa7:	6f70 736e 2065 666f 6320 6c61 7563 616c     ponse of calcula
1000dab7:	6574 7320 6168 6572 2064 6573 7263 7465     te shared secret
1000dac7:	6320 6d6f 616d 646e 6920 2073 7270 636f      command is proc
1000dad7:	7365 6573 2e64 2e2e 5300 6e65 6964 676e     essed....Sending
1000dae7:	6420 7265 7669 2065 656b 2079 6f63 6d6d      derive key comm
1000daf7:	6e61 2e64 002e 7250 636f 7365 6973 676e     and...Processing
1000db07:	7220 7365 6f70 736e 2065 6f66 2072 6564      response for de
1000db17:	6972 6576 6b20 7965 6320 6d6f 616d 646e     rive key command
1000db27:	2e2e 002e 7245 6f72 2072 6e69 7020 6f72     ....Error in pro
1000db37:	6563 7373 6e69 2067 6564 6972 6576 6b20     cessing derive k
1000db47:	7965 7220 7365 6f70 736e 2e65 2e2e 5200     ey response....R
1000db57:	7365 6f70 736e 2065 666f 6420 7265 7669     esponse of deriv
1000db67:	2065 656b 2079 6f63 6d6d 6e61 2064 7369     e key command is
1000db77:	7020 6f72 6563 7373 6465 2e2e 002e 6553      processed....Se
1000db87:	646e 6e69 2067 6573 2074 6164 6174 6f20     nding set data o
1000db97:	6a62 6365 2074 6f63 6d6d 6e61 2e64 002e     bject command...
1000dba7:	7250 636f 7365 6973 676e 7220 7365 6f70     Processing respo
1000dbb7:	736e 2065 6f66 2072 6573 2074 6164 6174     nse for set data
1000dbc7:	6f20 6a62 6365 2074 6164 6174 6320 6d6f      object data com
1000dbd7:	616d 646e 2e2e 002e 7245 6f72 2072 6e69     mand....Error in
1000dbe7:	7020 6f72 6563 7373 6e69 2067 6573 2074      processing set 
1000dbf7:	6164 6174 6f20 6a62 6365 2074 6572 7073     data object resp
1000dc07:	6e6f 6573 2e2e 002e 6552 7073 6e6f 6573     onse....Response
1000dc17:	6f20 2066 6573 2074 6164 6174 6f20 6a62      of set data obj
1000dc27:	6365 2074 6f63 6d6d 6e61 2064 7369 7020     ect command is p
1000dc37:	6f72 6563 7373 6465 2e2e 002e 6553 646e     rocessed....Send
1000dc47:	6e69 2067 6567 656e 6172 6574 6b20 7965     ing generate key
1000dc57:	6170 7269 6320 6d6f 616d 646e 2e2e 5000     pair command...P
1000dc67:	6f72 6563 7373 6e69 2067 6572 7073 6e6f     rocessing respon
1000dc77:	6573 6620 726f 6720 6e65 7265 7461 2065     se for generate 
1000dc87:	656b 7079 6961 2072 6f63 6d6d 6e61 2e64     keypair command.
1000dc97:	2e2e 4500 7272 726f 6920 206e 7270 636f     ...Error in proc
1000dca7:	7365 6973 676e 6720 6e65 7265 7461 2065     essing generate 
1000dcb7:	656b 7079 6961 2072 6572 7073 6e6f 6573     keypair response
1000dcc7:	2e2e 002e 6552 7073 6e6f 6573 6f20 2066     ....Response of 
1000dcd7:	6567 656e 6172 6574 6b20 7965 6170 7269     generate keypair
1000dce7:	6320 6d6f 616d 646e 6920 2073 7270 636f      command is proc
1000dcf7:	7365 6573 2e64 2e2e 5300 6e65 6964 676e     essed....Sending
1000dd07:	6120 7973 6d6d 7465 6972 2063 6e65 7263      asymmetric encr
1000dd17:	7079 6974 6e6f 6320 6d6f 616d 646e 2e2e     yption command..
1000dd27:	5000 6f72 6563 7373 6e69 2067 6572 7073     .Processing resp
1000dd37:	6e6f 6573 6620 726f 6120 7973 6d6d 7465     onse for asymmet
1000dd47:	6972 2063 6e65 7263 7079 6974 6e6f 6320     ric encryption c
1000dd57:	6d6f 616d 646e 2e2e 002e 7245 6f72 2072     ommand....Error 
1000dd67:	6e69 7020 6f72 6563 7373 6e69 2067 7361     in processing as
1000dd77:	6d79 656d 7274 6369 6520 636e 7972 7470     ymmetric encrypt
1000dd87:	6f69 206e 6572 7073 6e6f 6573 2e2e 002e     ion response....
1000dd97:	6552 7073 6e6f 6573 6f20 2066 7361 6d79     Response of asym
1000dda7:	656d 7274 6369 6520 636e 7972 7470 6f69     metric encryptio
1000ddb7:	206e 6f63 6d6d 6e61 2064 7369 7020 6f72     n command is pro
1000ddc7:	6563 7373 6465 2e2e 002e 6553 646e 6e69     cessed....Sendin
1000ddd7:	2067 7361 6d79 656d 7274 6369 6420 6365     g asymmetric dec
1000dde7:	7972 7470 6f69 206e 6f63 6d6d 6e61 2e64     ryption command.
1000ddf7:	002e 7250 636f 7365 6973 676e 7220 7365     ..Processing res
1000de07:	6f70 736e 2065 6f66 2072 7361 6d79 656d     ponse for asymme
1000de17:	7274 6369 6420 6365 7972 7470 6f69 206e     tric decryption 
1000de27:	6f63 6d6d 6e61 2e64 2e2e 4500 7272 726f     command....Error
1000de37:	6920 206e 7270 636f 7365 6973 676e 6120      in processing a
1000de47:	7973 6d6d 7465 6972 2063 6564 7263 7079     symmetric decryp
1000de57:	6974 6e6f 7220 7365 6f70 736e 2e65 2e2e     tion response...
1000de67:	5200 7365 6f70 736e 2065 666f 6120 7973     .Response of asy
1000de77:	6d6d 7465 6972 2063 6564 7263 7079 6974     mmetric decrypti
1000de87:	6e6f 6320 6d6f 616d 646e 6920 2073 7270     on command is pr
1000de97:	636f 7365 6573 2e64 2e2e 5300 6e65 6964     ocessed....Sendi
1000dea7:	676e 6320 6c61 7563 616c 6574 6820 7361     ng calculate has
1000deb7:	2068 6f63 6d6d 6e61 2e64 002e 7250 636f     h command...Proc
1000dec7:	7365 6973 676e 7220 7365 6f70 736e 2065     essing response 
1000ded7:	6f66 2072 6163 636c 6c75 7461 2065 6168     for calculate ha
1000dee7:	6873 6320 6d6f 616d 646e 2e2e 002e 7245     sh command....Er
1000def7:	6f72 2072 6e69 7020 6f72 6563 7373 6e69     ror in processin
1000df07:	2067 6163 636c 6c75 7461 2065 6168 6873     g calculate hash
1000df17:	7220 7365 6f70 736e 2e65 2e2e 5200 7365      response....Res
1000df27:	6f70 736e 2065 666f 6320 6c61 7563 616c     ponse of calcula
1000df37:	6574 6820 7361 2068 6f63 6d6d 6e61 2064     te hash command 
1000df47:	7369 7020 6f72 6563 7373 6465 2e2e 002e     is processed....
1000df57:	6553 646e 6e69 2067 6c63 736f 2065 7061     Sending close ap
1000df67:	2070 6f63 6d6d 6e61 2e64 002e 7250 636f     p command...Proc
1000df77:	7365 6973 676e 7220 7365 6f70 736e 2065     essing response 
1000df87:	6f66 2072 6c63 736f 2065 7061 2070 6f63     for close app co
1000df97:	6d6d 6e61 2e64 2e2e 4500 7272 726f 6920     mmand....Error i
1000dfa7:	206e 7270 636f 7365 6973 676e 6320 6f6c     n processing clo
1000dfb7:	6573 6120 7070 7220 7365 6f70 736e 2e65     se app response.
1000dfc7:	2e2e 5200 7365 6f70 736e 2065 666f 6320     ...Response of c
1000dfd7:	6f6c 6573 6120 7070 6320 6d6f 616d 646e     lose app command
1000dfe7:	6920 2073 7270 636f 7365 6573 2e64 2e2e      is processed...
1000dff7:	5300 6e65 6964 676e 6f20 6570 206e 7061     .Sending open ap
1000e007:	2070 6f63 6d6d 6e61 2e64 2e2e 5000 6f72     p command....Pro
1000e017:	6563 7373 6e69 2067 6572 7073 6e6f 6573     cessing response
1000e027:	6620 726f 6f20 6570 206e 7061 2070 6f63      for open app co
1000e037:	6d6d 6e61 2e64 2e2e 4500 7272 726f 6920     mmand....Error i
1000e047:	206e 7270 636f 7365 6973 676e 6f20 6570     n processing ope
1000e057:	206e 7061 2070 6572 7073 6e6f 6573 2e2e     n app response..
1000e067:	002e 6552 7073 6e6f 6573 6f20 2066 706f     ..Response of op
1000e077:	6e65 6120 7070 6320 6d6f 616d 646e 6920     en app command i
1000e087:	2073 7270 636f 7365 6573 2e64 2e2e 6f00          s processed....

1000e096 <__FUNCTION__.6299>:
1000e096:	706f 6974 6167 635f 646d 675f 7465 725f     optiga_cmd_get_r
1000e0a6:	6e61 6f64 006d                              andom.

1000e0ac <__FUNCTION__.6320>:
1000e0ac:	706f 6974 6167 635f 646d 635f 6c61 5f63     optiga_cmd_calc_
1000e0bc:	6973 6e67 d200                                   sign.

1000e0c1 <g_optiga_unique_application_identifier>:
1000e0c1:	76d2 0000 4704 6e65 7541 6874 7041 6c70     .v...GenAuthAppl

1000e0d1 <__FUNCTION__.6409>:
1000e0d1:	706f 6974 6167 635f 646d 675f 6e65 6b5f     optiga_cmd_gen_k
1000e0e1:	7965 6170 7269 6f00                              eypair.

1000e0e8 <__FUNCTION__.6263>:
1000e0e8:	706f 6974 6167 635f 646d 675f 7465 645f     optiga_cmd_get_d
1000e0f8:	7461 5f61 626f 656a 7463 6f00                    ata_object.

1000e103 <__FUNCTION__.6281>:
1000e103:	706f 6974 6167 635f 646d 735f 7465 645f     optiga_cmd_set_d
1000e113:	7461 5f61 626f 656a 7463 6f00                    ata_object.

1000e11e <__FUNCTION__.6338>:
1000e11e:	706f 6974 6167 635f 646d 765f 7265 6669     optiga_cmd_verif
1000e12e:	5f79 6973 6e67 6f00                              y_sign.

1000e135 <__FUNCTION__.6228>:
1000e135:	706f 6974 6167 635f 646d 6f5f 6570 5f6e     optiga_cmd_open_
1000e145:	7061 6c70 6369 7461 6f69 006e               application.

1000e151 <FSb>:
1000e151:	7c63 7b77 6bf2 c56f 0130 2b67 d7fe 76ab     c|w{.ko.0.g+...v
1000e161:	82ca 7dc9 59fa f047 d4ad afa2 a49c c072     ...}.YG.......r.
1000e171:	fdb7 2693 3f36 ccf7 a534 f1e5 d871 1531     ...&6?..4...q.1.
1000e181:	c704 c323 9618 9a05 1207 e280 27eb 75b2     ..#..........'.u
1000e191:	8309 1a2c 6e1b a05a 3b52 b3d6 e329 842f     ..,..nZ.R;..)./.
1000e1a1:	d153 ed00 fc20 5bb1 cb6a 39be 4c4a cf58     S... ..[j..9JLX.
1000e1b1:	efd0 fbaa 4d43 8533 f945 7f02 3c50 a89f     ....CM3.E...P<..
1000e1c1:	a351 8f40 9d92 f538 b6bc 21da ff10 d2f3     Q.@...8....!....
1000e1d1:	0ccd ec13 975f 1744 a7c4 3d7e 5d64 7319     ...._.D...~=d].s
1000e1e1:	8160 dc4f 2a22 8890 ee46 14b8 5ede db0b     `.O."*..F....^..
1000e1f1:	32e0 0a3a 0649 5c24 d3c2 62ac 9591 79e4     .2:.I.$\...b...y
1000e201:	c8e7 6d37 d58d a94e 566c eaf4 7a65 08ae     ..7m..N.lV..ez..
1000e211:	78ba 2e25 a61c c6b4 dde8 1f74 bd4b 8a8b     .x%.......t.K...
1000e221:	3e70 66b5 0348 0ef6 3561 b957 c186 9e1d     p>.fH...a5W.....
1000e231:	f8e1 1198 d969 948e 1e9b e987 55ce df28     ....i........U(.
1000e241:	a18c 0d89 e6bf 6842 9941 0f2d 54b0 16bb     ......BhA.-..T..
1000e251:	0000 5100                                        ...

1000e254 <RT0>:
1000e254:	f451 50a7 417e 5365 171a c3a4 273a 965e     Q..P~AeS....:'^.
1000e264:	ab3b cb6b 9d1f f145 faac ab58 e34b 9303     ;.k...E...X.K...
1000e274:	3020 55fa 76ad f66d cc88 9176 02f5 254c      0.U.vm...v...L%
1000e284:	e54f fcd7 2ac5 d7cb 3526 8044 62b5 8fa3     O....*..&5D..b..
1000e294:	b1de 495a ba25 671b ea45 980e fe5d e1c0     ..ZI%..gE...]...
1000e2a4:	2fc3 0275 4c81 12f0 468d a397 d36b c6f9     ./u..L...F..k...
1000e2b4:	8f03 e75f 9215 959c 6dbf eb7a 5295 da59     .._......mz..RY.
1000e2c4:	bed4 2d83 7458 d321 e049 2969 c98e 44c8     ...-Xt!.I.i)...D
1000e2d4:	c275 6a89 8ef4 7879 5899 6b3e b927 dd71     u..j..yx.X>k'.q.
1000e2e4:	e1be b64f 88f0 17ad 20c9 66ac ce7d b43a     ..O...... .f}.:.
1000e2f4:	df63 184a 1ae5 8231 5197 6033 5362 457f     c.J...1..Q3`bS.E
1000e304:	64b1 e077 6bbb 84ae 81fe 1ca0 08f9 942b     .dw..k........+.
1000e314:	4870 5868 458f 19fd de94 876c 7b52 b7f8     pHhX.E....l.R{..
1000e324:	73ab 23d3 4b72 e202 1fe3 578f 5566 2aab     .s.#rK.....WfU.*
1000e334:	ebb2 0728 b52f 03c2 c586 9a7b 37d3 a508     ..(./.....{..7..
1000e344:	2830 f287 bf23 b2a5 0302 ba6a 16ed 5c82     0(..#.....j....\
1000e354:	cf8a 2b1c 79a7 92b4 07f3 f0f2 694e a1e2     ...+.y......Ni..
1000e364:	da65 cdf4 0506 d5be 34d1 1f62 a6c4 8afe     e........4b.....
1000e374:	2e34 9d53 f3a2 a055 8a05 32e1 f6a4 75eb     4.S...U....2...u
1000e384:	830b 39ec 6040 aaef 715e 069f 6ebd 5110     ...9@`..^q...n.Q
1000e394:	213e f98a dd96 3d06 3edd ae05 e64d 46bd     >!.....=.>..M..F
1000e3a4:	5491 b58d c471 055d 0604 6fd4 5060 ff15     .T..q.]....o`P..
1000e3b4:	9819 24fb bdd6 97e9 4089 cc43 d967 779e     ...$.....@C.g..w
1000e3c4:	e8b0 bd42 8907 888b 19e7 385b c879 dbee     ..B.......[8y...
1000e3d4:	7ca1 470a 427c e90f 84f8 c91e 0000 0000     .|.G|B..........
1000e3e4:	8009 8386 2b32 48ed 111e ac70 5a6c 4e72     ....2+.H..p.lZrN
1000e3f4:	0efd fbff 850f 5638 ae3d 1ed5 2d36 2739     ......8V=...6-9'
1000e404:	0f0a 64d9 5c68 21a6 5b9b d154 3624 3a2e     ...dh\.!.[T.$6.:
1000e414:	0a0c b167 5793 0fe7 eeb4 d296 9b1b 9e91     ..g..W..........
1000e424:	c080 4fc5 dc61 a220 775a 694b 121c 161a     ...Oa. .ZwKi....
1000e434:	93e2 0aba a0c0 e52a 223c 43e0 1b12 1d17     ......*.<".C....
1000e444:	090e 0b0d 8bf2 adc7 b62d b9a8 1e14 c8a9     ........-.......
1000e454:	f157 8519 75af 4c07 99ee bbdd 7fa3 fd60     W....u.L......`.
1000e464:	01f7 9f26 725c bcf5 6644 c53b fb5b 347e     ..&.\r..Df;.[.~4
1000e474:	438b 7629 23cb dcc6 edb6 68fc e4b8 63f1     .C)v.#.....h...c
1000e484:	31d7 cadc 6342 1085 9713 4022 c684 2011     .1..Bc...."@... 
1000e494:	4a85 7d24 bbd2 f83d f9ae 1132 29c7 6da1     .J$}..=...2..).m
1000e4a4:	9e1d 4b2f b2dc f330 860d ec52 c177 d0e3     ../K..0...R.w...
1000e4b4:	b32b 6c16 70a9 99b9 9411 fa48 e947 2264     +..l.p....H.G.d"
1000e4c4:	fca8 c48c f0a0 1a3f 7d56 d82c 3322 ef90     ......?.V},."3..
1000e4d4:	4987 c74e 38d9 c1d1 ca8c fea2 d498 360b     .IN..8.........6
1000e4e4:	f5a6 cf81 7aa5 28de b7da 268e ad3f a4bf     .....z.(...&?...
1000e4f4:	3a2c e49d 7850 0d92 5f6a 9bcc 7e54 6246     ,:..Px..j_..T~Fb
1000e504:	8df6 c213 d890 e8b8 392e 5ef7 c382 f5af     .........9.^....
1000e514:	5d9f be80 d069 7c93 d56f a92d 25cf b312     .]..i..|o.-..%..
1000e524:	acc8 3b99 1810 a77d 9ce8 6e63 3bdb 7bbb     ...;..}...cn.;.{
1000e534:	26cd 0978 596e f418 9aec 01b7 4f83 a89a     .&x.nY.......O..
1000e544:	95e6 656e ffaa 7ee6 bc21 08cf 15ef e6e8     ..ne...~!.......
1000e554:	e7ba d99b 6f4a ce36 9fea d409 b029 d67c     ....Jo6.....).|.
1000e564:	a431 afb2 3f2a 3123 a5c6 3094 a235 c066     1...*?#1...05.f.
1000e574:	4e74 37bc 82fc a6ca 90e0 b0d0 a733 15d8     tN.7........3...
1000e584:	04f1 4a98 ec41 f7da cd7f 0e50 9117 2ff6     ...JA.....P..../
1000e594:	4d76 8dd6 ef43 4db0 aacc 544d 96e4 df04     vM..C..M..MT....
1000e5a4:	d19e e3b5 6a4c 1b88 2cc1 b81f 6546 7f51     ....Lj...,..FeQ.
1000e5b4:	5e9d 04ea 8c01 5d35 87fa 7374 0bfb 2e41     .^....5]..ts..A.
1000e5c4:	67b3 5a1d db92 52d2 10e9 3356 d66d 1347     .g.Z...R..V3m.G.
1000e5d4:	d79a 8c61 a137 7a0c f859 8e14 13eb 893c     ..a.7..zY.....<.
1000e5e4:	a9ce ee27 61b7 35c9 1ce1 ede5 477a 3cb1     ..'..a.5....zG.<
1000e5f4:	d29c 59df f255 3f73 1418 79ce c773 bf37     ...YU.s?...ys.7.
1000e604:	f753 eacd fd5f 5baa 3ddf 146f 4478 86db     S..._..[.=o.xD..
1000e614:	afca 81f3 68b9 3ec4 2438 2c34 a3c2 5f40     .....h.>8$4,..@_
1000e624:	1d16 72c3 e2bc 0c25 3c28 8b49 0dff 4195     ...r..%.(<I....A
1000e634:	a839 7101 0c08 deb3 b4d8 9ce4 5664 90c1     9..q........dV..
1000e644:	cb7b 6184 32d5 70b6 6c48 745c b8d0 4257     {..a.2.pHl\t..WB

1000e654 <RT1>:
1000e654:	5150 a7f4 7e53 6541 1ac3 a417 3a96 5e27     PQ..S~Ae.....:'^
1000e664:	3bcb 6bab 1ff1 459d acab 58fa 4b93 03e3     .;.k...E...X.K..
1000e674:	2055 fa30 adf6 6d76 8891 76cc f525 4c02     U 0...vm...v%..L
1000e684:	4ffc d7e5 c5d7 cb2a 2680 4435 b58f a362     .O....*..&5D..b.
1000e694:	de49 5ab1 2567 1bba 4598 0eea 5de1 c0fe     I..Zg%...E...]..
1000e6a4:	c302 752f 8112 f04c 8da3 9746 6bc6 f9d3     ../u..L...F..k..
1000e6b4:	03e7 5f8f 1595 9c92 bfeb 7a6d 95da 5952     ..._......mz..RY
1000e6c4:	d42d 83be 58d3 2174 4929 69e0 8e44 c8c9     -....Xt!)I.iD...
1000e6d4:	756a 89c2 f478 798e 996b 3e58 27dd 71b9     ju..x..yk.X>.'.q
1000e6e4:	beb6 4fe1 f017 ad88 c966 ac20 7db4 3ace     ...O....f. ..}.:
1000e6f4:	6318 4adf e582 311a 9760 3351 6245 7f53     .c.J...1`.Q3EbS.
1000e704:	b1e0 7764 bb84 ae6b fe1c a081 f994 2b08     ..dw..k........+
1000e714:	7058 6848 8f19 fd45 9487 6cde 52b7 f87b     XpHh..E....l.R{.
1000e724:	ab23 d373 72e2 024b e357 8f1f 662a ab55     #.s..rK.W...*fU.
1000e734:	b207 28eb 2f03 c2b5 869a 7bc5 d3a5 0837     ...(./.....{..7.
1000e744:	30f2 8728 23b2 a5bf 02ba 6a03 ed5c 8216     .0(..#.....j\...
1000e754:	8a2b 1ccf a792 b479 f3f0 f207 4ea1 e269     +.....y......Ni.
1000e764:	65cd f4da 06d5 be05 d11f 6234 c48a fea6     .e........4b....
1000e774:	349d 532e a2a0 55f3 0532 e18a a475 ebf6     .4.S...U2...u...
1000e784:	0b39 ec83 40aa ef60 5e06 9f71 bd51 106e     9....@`..^q.Q.n.
1000e794:	3ef9 8a21 963d 06dd ddae 053e 4d46 bde6     .>!.=.....>.FM..
1000e7a4:	91b5 8d54 7105 5dc4 046f d406 60ff 1550     ..T..q.]o....`P.
1000e7b4:	1924 fb98 d697 e9bd 89cc 4340 6777 9ed9     $.........@Cwg..
1000e7c4:	b0bd 42e8 0788 8b89 e738 5b19 79db eec8     ...B....8..[.y..
1000e7d4:	a147 0a7c 7ce9 0f42 f8c9 1e84 0000 0000     G.|..|B.........
1000e7e4:	0983 8680 3248 ed2b 1eac 7011 6c4e 725a     ....H2+....pNlZr
1000e7f4:	fdfb ff0e 0f56 3885 3d1e d5ae 3627 392d     ....V..8.=..'6-9
1000e804:	0a64 d90f 6821 a65c 9bd1 545b 243a 2e36     d...!h\...[T:$6.
1000e814:	0cb1 670a 930f e757 b4d2 96ee 1b9e 919b     ...g..W.........
1000e824:	804f c5c0 61a2 20dc 5a69 4b77 1c16 1a12     O....a. iZwK....
1000e834:	e20a ba93 c0e5 2aa0 3c43 e022 121d 171b     .......*C<".....
1000e844:	0e0b 0d09 f2ad c78b 2db9 a8b6 14c8 a91e     .........-......
1000e854:	5785 19f1 af4c 0775 eebb dd99 a3fd 607f     .W..L.u........`
1000e864:	f79f 2601 5cbc f572 44c5 3b66 5b34 7efb     ...&.\r..Df;4[.~
1000e874:	8b76 2943 cbdc c623 b668 fced b863 f1e4     v.C)..#.h...c...
1000e884:	d7ca dc31 4210 8563 1340 2297 8420 11c6     ..1..Bc.@.." ...
1000e894:	857d 244a d2f8 3dbb ae11 32f9 c76d a129     }.J$...=...2m.).
1000e8a4:	1d4b 2f9e dcf3 30b2 0dec 5286 77d0 e3c1     K../...0...R.w..
1000e8b4:	2b6c 16b3 a999 b970 11fa 4894 4722 64e9     l+....p....H"G.d
1000e8c4:	a8c4 8cfc a01a 3ff0 56d8 2c7d 22ef 9033     .......?.V},."3.
1000e8d4:	87c7 4e49 d9c1 d138 8cfe a2ca 9836 0bd4     ..IN..8.....6...
1000e8e4:	a6cf 81f5 a528 de7a da26 8eb7 3fa4 bfad     ....(.z.&....?..
1000e8f4:	2ce4 9d3a 500d 9278 6a9b cc5f 5462 467e     .,:..Px..j_.bT~F
1000e904:	f6c2 138d 90e8 b8d8 2e5e f739 82f5 afc3     ........^.9.....
1000e914:	9fbe 805d 697c 93d0 6fa9 2dd5 cfb3 1225     ..].|i...o.-..%.
1000e924:	c83b 99ac 10a7 7d18 e86e 639c db7b bb3b     ;......}n..c{.;.
1000e934:	cd09 7826 6ef4 1859 ec01 b79a 83a8 9a4f     ..&x.nY.......O.
1000e944:	e665 6e95 aa7e e6ff 2108 cfbc efe6 e815     e..n~....!......
1000e954:	bad9 9be7 4ace 366f ead4 099f 29d6 7cb0     .....Jo6.....).|
1000e964:	31af b2a4 2a31 233f c630 94a5 35c0 66a2     .1..1*?#0....5.f
1000e974:	7437 bc4e fca6 ca82 e0b0 d090 3315 d8a7     7tN..........3..
1000e984:	f14a 9804 41f7 daec 7f0e 50cd 172f f691     J....A.....P/...
1000e994:	768d d64d 434d b0ef cc54 4daa e4df 0496     .vM.MC..T..M....
1000e9a4:	9ee3 b5d1 4c1b 886a c1b8 1f2c 467f 5165     .....Lj...,..FeQ
1000e9b4:	9d04 ea5e 015d 358c fa73 7487 fb2e 410b     ..^.]..5s..t...A
1000e9c4:	b35a 1d67 9252 d2db e933 5610 6d13 47d6     Z.g.R...3..V.m.G
1000e9d4:	9a8c 61d7 377a 0ca1 598e 14f8 eb89 3c13     ...az7...Y.....<
1000e9e4:	ceee 27a9 b735 c961 e1ed e51c 7a3c b147     ...'5.a.....<zG.
1000e9f4:	9c59 dfd2 553f 73f2 1879 ce14 73bf 37c7     Y...?U.sy....s.7
1000ea04:	53ea cdf7 5f5b aafd df14 6f3d 7886 db44     .S..[_....=o.xD.
1000ea14:	ca81 f3af b93e c468 382c 3424 c25f 40a3     ....>.h.,8$4_..@
1000ea24:	1672 c31d bc0c 25e2 288b 493c ff41 950d     r......%.(<IA...
1000ea34:	3971 01a8 08de b30c d89c e4b4 6490 c156     q9...........dV.
1000ea44:	7b61 84cb d570 b632 4874 5c6c d042 57b8     a{..p.2.tHl\B..W

1000ea54 <RT2>:
1000ea54:	50a7 f451 5365 417e c3a4 171a 965e 273a     .PQ.eS~A....^.:'
1000ea64:	cb6b ab3b f145 9d1f ab58 faac 9303 e34b     k.;.E...X.....K.
1000ea74:	55fa 3020 f66d 76ad 9176 cc88 254c 02f5     .U 0m..vv...L%..
1000ea84:	fcd7 e54f d7cb 2ac5 8044 3526 8fa3 62b5     ..O....*D.&5...b
1000ea94:	495a b1de 671b ba25 980e ea45 e1c0 fe5d     ZI...g%...E...].
1000eaa4:	0275 2fc3 12f0 4c81 a397 468d c6f9 d36b     u../...L...F..k.
1000eab4:	e75f 8f03 959c 9215 eb7a 6dbf da59 5295     _.......z..mY..R
1000eac4:	2d83 bed4 d321 7458 2969 e049 44c8 c98e     .-..!.Xti)I..D..
1000ead4:	6a89 c275 7879 8ef4 6b3e 5899 dd71 b927     .ju.yx..>k.Xq.'.
1000eae4:	b64f e1be 17ad 88f0 66ac 20c9 b43a ce7d     O........f. :.}.
1000eaf4:	184a df63 8231 1ae5 6033 5197 457f 5362     J.c.1...3`.Q.EbS
1000eb04:	e077 64b1 84ae 6bbb 1ca0 81fe 942b 08f9     w..d...k....+...
1000eb14:	5868 4870 19fd 458f 876c de94 b7f8 7b52     hXpH...El.....R{
1000eb24:	23d3 73ab e202 4b72 578f 1fe3 2aab 5566     .#.s..rK.W...*fU
1000eb34:	0728 ebb2 03c2 b52f 9a7b c586 a508 37d3     (...../.{......7
1000eb44:	f287 2830 b2a5 bf23 ba6a 0302 5c82 16ed     ..0(..#.j....\..
1000eb54:	2b1c cf8a 92b4 79a7 f0f2 07f3 a1e2 694e     .+.....y......Ni
1000eb64:	cdf4 da65 d5be 0506 1f62 34d1 8afe a6c4     ..e.....b..4....
1000eb74:	9d53 2e34 a055 f3a2 32e1 8a05 75eb f6a4     S.4.U....2...u..
1000eb84:	39ec 830b aaef 6040 069f 715e 5110 6ebd     .9....@`..^q.Q.n
1000eb94:	f98a 213e 3d06 dd96 ae05 3edd 46bd e64d     ..>!.=.....>.FM.
1000eba4:	b58d 5491 055d c471 6fd4 0604 ff15 5060     ...T].q..o....`P
1000ebb4:	24fb 9819 97e9 bdd6 cc43 4089 779e d967     .$......C..@.wg.
1000ebc4:	bd42 e8b0 888b 8907 385b 19e7 dbee c879     B.......[8....y.
1000ebd4:	470a 7ca1 e90f 427c c91e 84f8 0000 0000     .G.|..|B........
1000ebe4:	8386 8009 48ed 2b32 ac70 111e 4e72 5a6c     .....H2+p...rNlZ
1000ebf4:	fbff 0efd 5638 850f 1ed5 ae3d 2739 2d36     ....8V....=.9'6-
1000ec04:	64d9 0f0a 21a6 5c68 d154 5b9b 3a2e 3624     .d...!h\T..[.:$6
1000ec14:	b167 0a0c 0fe7 5793 d296 eeb4 9e91 9b1b     g......W........
1000ec24:	4fc5 c080 a220 dc61 694b 775a 161a 121c     .O.. .a.KiZw....
1000ec34:	0aba 93e2 e52a a0c0 43e0 223c 1d17 1b12     ....*....C<"....
1000ec44:	0b0d 090e adc7 8bf2 b9a8 b62d c8a9 1e14     ..........-.....
1000ec54:	8519 f157 4c07 75af bbdd 99ee fd60 7fa3     ..W..L.u....`...
1000ec64:	9f26 01f7 bcf5 725c c53b 6644 347e fb5b     &.....\r;.Df~4[.
1000ec74:	7629 438b dcc6 23cb 68fc edb6 63f1 e4b8     )v.C...#.h...c..
1000ec84:	cadc 31d7 1085 6342 4022 9713 2011 c684     ...1..Bc"@... ..
1000ec94:	7d24 4a85 f83d bbd2 1132 f9ae 6da1 29c7     $}.J=...2....m.)
1000eca4:	4b2f 9e1d f330 b2dc ec52 860d d0e3 c177     /K..0...R.....w.
1000ecb4:	6c16 b32b 99b9 70a9 fa48 9411 2264 e947     .l+....pH...d"G.
1000ecc4:	c48c fca8 1a3f f0a0 d82c 7d56 ef90 3322     ....?...,.V}.."3
1000ecd4:	c74e 4987 c1d1 38d9 fea2 ca8c 360b d498     N..I...8.....6..
1000ece4:	cf81 f5a6 28de 7aa5 268e b7da a4bf ad3f     .....(.z.&....?.
1000ecf4:	e49d 3a2c 0d92 7850 9bcc 5f6a 6246 7e54     ..,:..Px..j_FbT~
1000ed04:	c213 8df6 e8b8 d890 5ef7 392e f5af c382     .........^.9....
1000ed14:	be80 5d9f 7c93 d069 a92d d56f b312 25cf     ...].|i.-.o....%
1000ed24:	3b99 acc8 a77d 1810 6e63 9ce8 7bbb 3bdb     .;..}...cn...{.;
1000ed34:	0978 26cd f418 596e 01b7 9aec a89a 4f83     x..&..nY.......O
1000ed44:	656e 95e6 7ee6 ffaa 08cf bc21 e6e8 15ef     ne...~....!.....
1000ed54:	d99b e7ba ce36 6f4a d409 9fea d67c b029     ....6.Jo....|.).
1000ed64:	afb2 a431 3123 3f2a 3094 a5c6 c066 a235     ..1.#1*?.0..f.5.
1000ed74:	37bc 4e74 a6ca 82fc b0d0 90e0 15d8 a733     .7tN..........3.
1000ed84:	4a98 04f1 f7da ec41 0e50 cd7f 2ff6 9117     .J....A.P..../..
1000ed94:	8dd6 4d76 4db0 ef43 544d aacc df04 96e4     ..vM.MC.MT......
1000eda4:	e3b5 d19e 1b88 6a4c b81f 2cc1 7f51 6546     ......Lj...,Q.Fe
1000edb4:	04ea 5e9d 5d35 8c01 7374 87fa 2e41 0bfb     ...^5]..ts..A...
1000edc4:	5a1d 67b3 52d2 db92 3356 10e9 1347 d66d     .Z.g.R..V3..G.m.
1000edd4:	8c61 d79a 7a0c a137 8e14 f859 893c 13eb     a....z7...Y.<...
1000ede4:	ee27 a9ce 35c9 61b7 ede5 1ce1 3cb1 477a     '....5.a.....<zG
1000edf4:	59df d29c 3f73 f255 79ce 1418 bf37 c773     .Y..s?U..y..7.s.
1000ee04:	eacd f753 5baa fd5f 146f 3ddf 86db 4478     ..S..[_.o..=..xD
1000ee14:	81f3 afca 3ec4 68b9 2c34 2438 5f40 a3c2     .....>.h4,8$@_..
1000ee24:	72c3 1d16 0c25 e2bc 8b49 3c28 4195 0dff     .r..%...I.(<.A..
1000ee34:	7101 a839 deb3 0c08 9ce4 b4d8 90c1 5664     .q9...........dV
1000ee44:	6184 cb7b 70b6 32d5 745c 6c48 4257 b8d0     .a{..p.2\tHlWB..

1000ee54 <RT3>:
1000ee54:	a7f4 5150 6541 7e53 a417 1ac3 5e27 3a96     ..PQAeS~....'^.:
1000ee64:	6bab 3bcb 459d 1ff1 58fa acab 03e3 4b93     .k.;.E...X.....K
1000ee74:	fa30 2055 6d76 adf6 76cc 8891 4c02 f525     0.U vm...v...L%.
1000ee84:	d7e5 4ffc cb2a c5d7 4435 2680 a362 b58f     ...O*...5D.&b...
1000ee94:	5ab1 de49 1bba 2567 0eea 4598 c0fe 5de1     .ZI...g%...E...]
1000eea4:	752f c302 f04c 8112 9746 8da3 f9d3 6bc6     /u..L...F......k
1000eeb4:	5f8f 03e7 9c92 1595 7a6d bfeb 5952 95da     ._......mz..RY..
1000eec4:	83be d42d 2174 58d3 69e0 4929 c8c9 8e44     ..-.t!.X.i)I..D.
1000eed4:	89c2 756a 798e f478 3e58 996b 71b9 27dd     ..ju.yx.X>k..q.'
1000eee4:	4fe1 beb6 ad88 f017 ac20 c966 3ace 7db4     .O...... .f..:.}
1000eef4:	4adf 6318 311a e582 3351 9760 7f53 6245     .J.c.1..Q3`.S.Eb
1000ef04:	7764 b1e0 ae6b bb84 a081 fe1c 2b08 f994     dw..k........+..
1000ef14:	6848 7058 fd45 8f19 6cde 9487 f87b 52b7     HhXpE....l..{..R
1000ef24:	d373 ab23 024b 72e2 8f1f e357 ab55 662a     s.#.K..r..W.U.*f
1000ef34:	28eb b207 c2b5 2f03 7bc5 869a 0837 d3a5     .(...../.{..7...
1000ef44:	8728 30f2 a5bf 23b2 6a03 02ba 8216 ed5c     (..0...#.j....\.
1000ef54:	1ccf 8a2b b479 a792 f207 f3f0 e269 4ea1     ..+.y.......i..N
1000ef64:	f4da 65cd be05 06d5 6234 d11f fea6 c48a     ...e....4b......
1000ef74:	532e 349d 55f3 a2a0 e18a 0532 ebf6 a475     .S.4.U....2...u.
1000ef84:	ec83 0b39 ef60 40aa 9f71 5e06 106e bd51     ..9.`..@q..^n.Q.
1000ef94:	8a21 3ef9 06dd 963d 053e ddae bde6 4d46     !..>..=.>.....FM
1000efa4:	8d54 91b5 5dc4 7105 d406 046f 1550 60ff     T....].q..o.P..`
1000efb4:	fb98 1924 e9bd d697 4340 89cc 9ed9 6777     ..$.....@C....wg
1000efc4:	42e8 b0bd 8b89 0788 5b19 e738 eec8 79db     .B.......[8....y
1000efd4:	0a7c a147 0f42 7ce9 1e84 f8c9 0000 0000     |.G.B..|........
1000efe4:	8680 0983 ed2b 3248 7011 1eac 725a 6c4e     ....+.H2.p..ZrNl
1000eff4:	ff0e fdfb 3885 0f56 d5ae 3d1e 392d 3627     .....8V....=-9'6
1000f004:	d90f 0a64 a65c 6821 545b 9bd1 2e36 243a     ..d.\.!h[T..6.:$
1000f014:	670a 0cb1 e757 930f 96ee b4d2 919b 1b9e     .g..W...........
1000f024:	c5c0 804f 20dc 61a2 4b77 5a69 1a12 1c16     ..O.. .awKiZ....
1000f034:	ba93 e20a 2aa0 c0e5 e022 3c43 171b 121d     .....*..".C<....
1000f044:	0d09 0e0b c78b f2ad a8b6 2db9 a91e 14c8     ...........-....
1000f054:	19f1 5785 0775 af4c dd99 eebb 607f a3fd     ...Wu.L......`..
1000f064:	2601 f79f f572 5cbc 3b66 44c5 7efb 5b34     .&..r..\f;.D.~4[
1000f074:	2943 8b76 c623 cbdc fced b668 f1e4 b863     C)v.#.....h...c.
1000f084:	dc31 d7ca 8563 4210 2297 1340 11c6 8420     1...c..B."@... .
1000f094:	244a 857d 3dbb d2f8 32f9 ae11 a129 c76d     J$}..=...2..).m.
1000f0a4:	2f9e 1d4b 30b2 dcf3 5286 0dec e3c1 77d0     ./K..0...R.....w
1000f0b4:	16b3 2b6c b970 a999 4894 11fa 64e9 4722     ..l+p....H...d"G
1000f0c4:	8cfc a8c4 3ff0 a01a 2c7d 56d8 9033 22ef     .....?..},.V3.."
1000f0d4:	4e49 87c7 d138 d9c1 a2ca 8cfe 0bd4 9836     IN..8.........6.
1000f0e4:	81f5 a6cf de7a a528 8eb7 da26 bfad 3fa4     ....z.(...&....?
1000f0f4:	9d3a 2ce4 9278 500d cc5f 6a9b 467e 5462     :..,x..P_..j~FbT
1000f104:	138d f6c2 b8d8 90e8 f739 2e5e afc3 82f5     ........9.^.....
1000f114:	805d 9fbe 93d0 697c 2dd5 6fa9 1225 cfb3     ].....|i.-.o%...
1000f124:	99ac c83b 7d18 10a7 639c e86e bb3b db7b     ..;..}...cn.;.{.
1000f134:	7826 cd09 1859 6ef4 b79a ec01 9a4f 83a8     &x..Y..n....O...
1000f144:	6e95 e665 e6ff aa7e cfbc 2108 e815 efe6     .ne...~....!....
1000f154:	9be7 bad9 366f 4ace 099f ead4 7cb0 29d6     ....o6.J.....|.)
1000f164:	b2a4 31af 233f 2a31 94a5 c630 66a2 35c0     ...1?#1*..0..f.5
1000f174:	bc4e 7437 ca82 fca6 d090 e0b0 d8a7 3315     N.7t...........3
1000f184:	9804 f14a daec 41f7 50cd 7f0e f691 172f     ..J....A.P..../.
1000f194:	d64d 768d b0ef 434d 4daa cc54 0496 e4df     M..v..MC.MT.....
1000f1a4:	b5d1 9ee3 886a 4c1b 1f2c c1b8 5165 467f     ....j..L,...eQ.F
1000f1b4:	ea5e 9d04 358c 015d 7487 fa73 410b fb2e     ^....5]..ts..A..
1000f1c4:	1d67 b35a d2db 9252 5610 e933 47d6 6d13     g.Z...R..V3..G.m
1000f1d4:	61d7 9a8c 0ca1 377a 14f8 598e 3c13 eb89     .a....z7...Y.<..
1000f1e4:	27a9 ceee c961 b735 e51c e1ed b147 7a3c     .'..a.5.....G.<z
1000f1f4:	dfd2 9c59 73f2 553f ce14 1879 37c7 73bf     ..Y..s?U..y..7.s
1000f204:	cdf7 53ea aafd 5f5b 6f3d df14 db44 7886     ...S..[_=o..D..x
1000f214:	f3af ca81 c468 b93e 3424 382c 40a3 c25f     ....h.>.$4,8.@_.
1000f224:	c31d 1672 25e2 bc0c 493c 288b 950d ff41     ..r..%..<I.(..A.
1000f234:	01a8 3971 b30c 08de e4b4 d89c c156 6490     ..q9........V..d
1000f244:	84cb 7b61 b632 d570 5c6c 4874 57b8 d042     ..a{2.p.l\tH.WB.

1000f254 <RCON>:
1000f254:	0001 0000 0002 0000 0004 0000 0008 0000     ................
1000f264:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
1000f274:	001b 0000 0036 0000                         ....6...

1000f27c <FT0>:
1000f27c:	63c6 a563 7cf8 847c 77ee 9977 7bf6 8d7b     .cc..||..ww..{{.
1000f28c:	f2ff 0df2 6bd6 bd6b 6fde b16f c591 54c5     .....kk..oo....T
1000f29c:	3060 5030 0102 0301 67ce a967 2b56 7d2b     `00P.....gg.V++}
1000f2ac:	fee7 19fe d7b5 62d7 ab4d e6ab 76ec 9a76     .......bM....vv.
1000f2bc:	ca8f 45ca 821f 9d82 c989 40c9 7dfa 877d     ...E.......@.}}.
1000f2cc:	faef 15fa 59b2 eb59 478e c947 f0fb 0bf0     .....YY..GG.....
1000f2dc:	ad41 ecad d4b3 67d4 a25f fda2 af45 eaaf     A......g_...E...
1000f2ec:	9c23 bf9c a453 f7a4 72e4 9672 c09b 5bc0     #...S....rr....[
1000f2fc:	b775 c2b7 fde1 1cfd 933d ae93 264c 6a26     u.......=...L&&j
1000f30c:	366c 5a36 3f7e 413f f7f5 02f7 cc83 4fcc     l66Z~??A.......O
1000f31c:	3468 5c34 a551 f4a5 e5d1 34e5 f1f9 08f1     h44\Q......4....
1000f32c:	71e2 9371 d8ab 73d8 3162 5331 152a 3f15     .qq....sb11S*..?
1000f33c:	0408 0c04 c795 52c7 2346 6523 c39d 5ec3     .......RF##e...^
1000f34c:	1830 2818 9637 a196 050a 0f05 9a2f b59a     0..(7......./...
1000f35c:	070e 0907 1224 3612 801b 9b80 e2df 3de2     ....$..6.......=
1000f36c:	ebcd 26eb 274e 6927 b27f cdb2 75ea 9f75     ...&N''i.....uu.
1000f37c:	0912 1b09 831d 9e83 2c58 742c 1a34 2e1a     ........X,,t4...
1000f38c:	1b36 2d1b 6edc b26e 5ab4 ee5a a05b fba0     6..-.nn..ZZ.[...
1000f39c:	52a4 f652 3b76 4d3b d6b7 61d6 b37d ceb3     .RR.v;;M...a}...
1000f3ac:	2952 7b29 e3dd 3ee3 2f5e 712f 8413 9784     R)){...>^//q....
1000f3bc:	53a6 f553 d1b9 68d1 0000 0000 edc1 2ced     .SS....h.......,
1000f3cc:	2040 6020 fce3 1ffc b179 c8b1 5bb6 ed5b     @  `....y....[[.
1000f3dc:	6ad4 be6a cb8d 46cb be67 d9be 3972 4b39     .jj....Fg...r99K
1000f3ec:	4a94 de4a 4c98 d44c 58b0 e858 cf85 4acf     .JJ..LL..XX....J
1000f3fc:	d0bb 6bd0 efc5 2aef aa4f e5aa fbed 16fb     ...k...*O.......
1000f40c:	4386 c543 4d9a d74d 3366 5533 8511 9485     .CC..MM.f33U....
1000f41c:	458a cf45 f9e9 10f9 0204 0602 7ffe 817f     .EE.............
1000f42c:	50a0 f050 3c78 443c 9f25 ba9f a84b e3a8     .PP.x<<D%...K...
1000f43c:	51a2 f351 a35d fea3 4080 c040 8f05 8a8f     .QQ.]....@@.....
1000f44c:	923f ad92 9d21 bc9d 3870 4838 f5f1 04f5     ?...!...p88H....
1000f45c:	bc63 dfbc b677 c1b6 daaf 75da 2142 6321     c...w......uB!!c
1000f46c:	1020 3010 ffe5 1aff f3fd 0ef3 d2bf 6dd2      ..0...........m
1000f47c:	cd81 4ccd 0c18 140c 1326 3513 ecc3 2fec     ...L....&..5.../
1000f48c:	5fbe e15f 9735 a297 4488 cc44 172e 3917     .__.5....DD....9
1000f49c:	c493 57c4 a755 f2a7 7efc 827e 3d7a 473d     ...WU....~~.z==G
1000f4ac:	64c8 ac64 5dba e75d 1932 2b19 73e6 9573     .dd..]].2..+.ss.
1000f4bc:	60c0 a060 8119 9881 4f9e d14f dca3 7fdc     .``......OO.....
1000f4cc:	2244 6622 2a54 7e2a 903b ab90 880b 8388     D""fT**~;.......
1000f4dc:	468c ca46 eec7 29ee b86b d3b8 1428 3c14     .FF....)k...(..<
1000f4ec:	dea7 79de 5ebc e25e 0b16 1d0b dbad 76db     ...y.^^........v
1000f4fc:	e0db 3be0 3264 5632 3a74 4e3a 0a14 1e0a     ...;d22Vt::N....
1000f50c:	4992 db49 060c 0a06 2448 6c24 5cb8 e45c     .II.....H$$l.\\.
1000f51c:	c29f 5dc2 d3bd 6ed3 ac43 efac 62c4 a662     ...]...nC....bb.
1000f52c:	9139 a891 9531 a495 e4d3 37e4 79f2 8b79     9...1......7.yy.
1000f53c:	e7d5 32e7 c88b 43c8 376e 5937 6dda b76d     ...2...Cn77Y.mm.
1000f54c:	8d01 8c8d d5b1 64d5 4e9c d24e a949 e0a9     .......d.NN.I...
1000f55c:	6cd8 b46c 56ac fa56 f4f3 07f4 eacf 25ea     .ll..VV........%
1000f56c:	65ca af65 7af4 8e7a ae47 e9ae 0810 1808     .ee..zz.G.......
1000f57c:	ba6f d5ba 78f0 8878 254a 6f25 2e5c 722e     o....xx.J%%o\..r
1000f58c:	1c38 241c a657 f1a6 b473 c7b4 c697 51c6     8..$W...s......Q
1000f59c:	e8cb 23e8 dda1 7cdd 74e8 9c74 1f3e 211f     ...#...|.tt.>..!
1000f5ac:	4b96 dd4b bd61 dcbd 8b0d 868b 8a0f 858a     .KK.a...........
1000f5bc:	70e0 9070 3e7c 423e b571 c4b5 66cc aa66     .pp.|>>Bq....ff.
1000f5cc:	4890 d848 0306 0503 f6f7 01f6 0e1c 120e     .HH.............
1000f5dc:	61c2 a361 356a 5f35 57ae f957 b969 d0b9     .aa.j55_.WW.i...
1000f5ec:	8617 9186 c199 58c1 1d3a 271d 9e27 b99e     .......X:..''...
1000f5fc:	e1d9 38e1 f8eb 13f8 982b b398 1122 3311     ...8....+..."..3
1000f60c:	69d2 bb69 d9a9 70d9 8e07 898e 9433 a794     .ii....p....3...
1000f61c:	9b2d b69b 1e3c 221e 8715 9287 e9c9 20e9     -...<.."....... 
1000f62c:	ce87 49ce 55aa ff55 2850 7828 dfa5 7adf     ...I.UU.P((x...z
1000f63c:	8c03 8f8c a159 f8a1 8909 8089 0d1a 170d     ....Y...........
1000f64c:	bf65 dabf e6d7 31e6 4284 c642 68d0 b868     e......1.BB..hh.
1000f65c:	4182 c341 9929 b099 2d5a 772d 0f1e 110f     .AA.)...Z--w....
1000f66c:	b07b cbb0 54a8 fc54 bb6d d6bb 162c 3a16     {....TT.m...,..:

1000f67c <FT1>:
1000f67c:	c6a5 6363 f884 7c7c ee99 7777 f68d 7b7b     ..cc..||..ww..{{
1000f68c:	ff0d f2f2 d6bd 6b6b deb1 6f6f 9154 c5c5     ......kk..ooT...
1000f69c:	6050 3030 0203 0101 cea9 6767 567d 2b2b     P`00......gg}V++
1000f6ac:	e719 fefe b562 d7d7 4de6 abab ec9a 7676     ....b....M....vv
1000f6bc:	8f45 caca 1f9d 8282 8940 c9c9 fa87 7d7d     E.......@.....}}
1000f6cc:	ef15 fafa b2eb 5959 8ec9 4747 fb0b f0f0     ......YY..GG....
1000f6dc:	41ec adad b367 d4d4 5ffd a2a2 45ea afaf     .A..g...._...E..
1000f6ec:	23bf 9c9c 53f7 a4a4 e496 7272 9b5b c0c0     .#...S....rr[...
1000f6fc:	75c2 b7b7 e11c fdfd 3dae 9393 4c6a 2626     .u.......=..jL&&
1000f70c:	6c5a 3636 7e41 3f3f f502 f7f7 834f cccc     Zl66A~??....O...
1000f71c:	685c 3434 51f4 a5a5 d134 e5e5 f908 f1f1     \h44.Q..4.......
1000f72c:	e293 7171 ab73 d8d8 6253 3131 2a3f 1515     ..qqs...Sb11?*..
1000f73c:	080c 0404 9552 c7c7 4665 2323 9d5e c3c3     ....R...eF##^...
1000f74c:	3028 1818 37a1 9696 0a0f 0505 2fb5 9a9a     (0...7......./..
1000f75c:	0e09 0707 2436 1212 1b9b 8080 df3d e2e2     ....6$......=...
1000f76c:	cd26 ebeb 4e69 2727 7fcd b2b2 ea9f 7575     &...iN''......uu
1000f77c:	121b 0909 1d9e 8383 5874 2c2c 342e 1a1a     ........tX,,.4..
1000f78c:	362d 1b1b dcb2 6e6e b4ee 5a5a 5bfb a0a0     -6....nn..ZZ.[..
1000f79c:	a4f6 5252 764d 3b3b b761 d6d6 7dce b3b3     ..RRMv;;a....}..
1000f7ac:	527b 2929 dd3e e3e3 5e71 2f2f 1397 8484     {R))>...q^//....
1000f7bc:	a6f5 5353 b968 d1d1 0000 0000 c12c eded     ..SSh.......,...
1000f7cc:	4060 2020 e31f fcfc 79c8 b1b1 b6ed 5b5b     `@  .....y....[[
1000f7dc:	d4be 6a6a 8d46 cbcb 67d9 bebe 724b 3939     ..jjF....g..Kr99
1000f7ec:	94de 4a4a 98d4 4c4c b0e8 5858 854a cfcf     ..JJ..LL..XXJ...
1000f7fc:	bb6b d0d0 c52a efef 4fe5 aaaa ed16 fbfb     k...*....O......
1000f80c:	86c5 4343 9ad7 4d4d 6655 3333 1194 8585     ..CC..MMUf33....
1000f81c:	8acf 4545 e910 f9f9 0406 0202 fe81 7f7f     ..EE............
1000f82c:	a0f0 5050 7844 3c3c 25ba 9f9f 4be3 a8a8     ..PPDx<<.%...K..
1000f83c:	a2f3 5151 5dfe a3a3 80c0 4040 058a 8f8f     ..QQ.]....@@....
1000f84c:	3fad 9292 21bc 9d9d 7048 3838 f104 f5f5     .?...!..Hp88....
1000f85c:	63df bcbc 77c1 b6b6 af75 dada 4263 2121     .c...w..u...cB!!
1000f86c:	2030 1010 e51a ffff fd0e f3f3 bf6d d2d2     0 ..........m...
1000f87c:	814c cdcd 1814 0c0c 2635 1313 c32f ecec     L.......5&../...
1000f88c:	bee1 5f5f 35a2 9797 88cc 4444 2e39 1717     ..__.5....DD9...
1000f89c:	9357 c4c4 55f2 a7a7 fc82 7e7e 7a47 3d3d     W....U....~~Gz==
1000f8ac:	c8ac 6464 bae7 5d5d 322b 1919 e695 7373     ..dd..]]+2....ss
1000f8bc:	c0a0 6060 1998 8181 9ed1 4f4f a37f dcdc     ..``......OO....
1000f8cc:	4466 2222 547e 2a2a 3bab 9090 0b83 8888     fD""~T**.;......
1000f8dc:	8cca 4646 c729 eeee 6bd3 b8b8 283c 1414     ..FF)....k..<(..
1000f8ec:	a779 dede bce2 5e5e 161d 0b0b ad76 dbdb     y.....^^....v...
1000f8fc:	db3b e0e0 6456 3232 744e 3a3a 141e 0a0a     ;...Vd22Nt::....
1000f90c:	92db 4949 0c0a 0606 486c 2424 b8e4 5c5c     ..II....lH$$..\\
1000f91c:	9f5d c2c2 bd6e d3d3 43ef acac c4a6 6262     ]...n....C....bb
1000f92c:	39a8 9191 31a4 9595 d337 e4e4 f28b 7979     .9...1..7.....yy
1000f93c:	d532 e7e7 8b43 c8c8 6e59 3737 dab7 6d6d     2...C...Yn77..mm
1000f94c:	018c 8d8d b164 d5d5 9cd2 4e4e 49e0 a9a9     ....d.....NN.I..
1000f95c:	d8b4 6c6c acfa 5656 f307 f4f4 cf25 eaea     ..ll..VV....%...
1000f96c:	caaf 6565 f48e 7a7a 47e9 aeae 1018 0808     ..ee..zz.G......
1000f97c:	6fd5 baba f088 7878 4a6f 2525 5c72 2e2e     .o....xxoJ%%r\..
1000f98c:	3824 1c1c 57f1 a6a6 73c7 b4b4 9751 c6c6     $8...W...s..Q...
1000f99c:	cb23 e8e8 a17c dddd e89c 7474 3e21 1f1f     #...|.....tt!>..
1000f9ac:	96dd 4b4b 61dc bdbd 0d86 8b8b 0f85 8a8a     ..KK.a..........
1000f9bc:	e090 7070 7c42 3e3e 71c4 b5b5 ccaa 6666     ..ppB|>>.q....ff
1000f9cc:	90d8 4848 0605 0303 f701 f6f6 1c12 0e0e     ..HH............
1000f9dc:	c2a3 6161 6a5f 3535 aef9 5757 69d0 b9b9     ..aa_j55..WW.i..
1000f9ec:	1791 8686 9958 c1c1 3a27 1d1d 27b9 9e9e     ....X...':...'..
1000f9fc:	d938 e1e1 eb13 f8f8 2bb3 9898 2233 1111     8........+..3"..
1000fa0c:	d2bb 6969 a970 d9d9 0789 8e8e 33a7 9494     ..iip........3..
1000fa1c:	2db6 9b9b 3c22 1e1e 1592 8787 c920 e9e9     .-.."<...... ...
1000fa2c:	8749 cece aaff 5555 5078 2828 a57a dfdf     I.....UUxP((z...
1000fa3c:	038f 8c8c 59f8 a1a1 0980 8989 1a17 0d0d     .....Y..........
1000fa4c:	65da bfbf d731 e6e6 84c6 4242 d0b8 6868     .e..1.....BB..hh
1000fa5c:	82c3 4141 29b0 9999 5a77 2d2d 1e11 0f0f     ..AA.)..wZ--....
1000fa6c:	7bcb b0b0 a8fc 5454 6dd6 bbbb 2c3a 1616     .{....TT.m..:,..

1000fa7c <FT2>:
1000fa7c:	a563 63c6 847c 7cf8 9977 77ee 8d7b 7bf6     c..c|..|w..w{..{
1000fa8c:	0df2 f2ff bd6b 6bd6 b16f 6fde 54c5 c591     ....k..ko..o.T..
1000fa9c:	5030 3060 0301 0102 a967 67ce 7d2b 2b56     0P`0....g..g+}V+
1000faac:	19fe fee7 62d7 d7b5 e6ab ab4d 9a76 76ec     .....b....M.v..v
1000fabc:	45ca ca8f 9d82 821f 40c9 c989 877d 7dfa     .E.......@..}..}
1000facc:	15fa faef eb59 59b2 c947 478e 0bf0 f0fb     ....Y..YG..G....
1000fadc:	ecad ad41 67d4 d4b3 fda2 a25f eaaf af45     ..A..g...._...E.
1000faec:	bf9c 9c23 f7a4 a453 9672 72e4 5bc0 c09b     ..#...S.r..r.[..
1000fafc:	c2b7 b775 1cfd fde1 ae93 933d 6a26 264c     ..u.......=.&jL&
1000fb0c:	5a36 366c 413f 3f7e 02f7 f7f5 4fcc cc83     6Zl6?A~?.....O..
1000fb1c:	5c34 3468 f4a5 a551 34e5 e5d1 08f1 f1f9     4\h4..Q..4......
1000fb2c:	9371 71e2 73d8 d8ab 5331 3162 3f15 152a     q..q.s..1Sb1.?*.
1000fb3c:	0c04 0408 52c7 c795 6523 2346 5ec3 c39d     .....R..#eF#.^..
1000fb4c:	2818 1830 a196 9637 0f05 050a b59a 9a2f     .(0...7......./.
1000fb5c:	0907 070e 3612 1224 9b80 801b 3de2 e2df     .....6$......=..
1000fb6c:	26eb ebcd 6927 274e cdb2 b27f 9f75 75ea     .&..'iN'....u..u
1000fb7c:	1b09 0912 9e83 831d 742c 2c58 2e1a 1a34     ........,tX,..4.
1000fb8c:	2d1b 1b36 b26e 6edc ee5a 5ab4 fba0 a05b     .-6.n..nZ..Z..[.
1000fb9c:	f652 52a4 4d3b 3b76 61d6 d6b7 ceb3 b37d     R..R;Mv;.a....}.
1000fbac:	7b29 2952 3ee3 e3dd 712f 2f5e 9784 8413     ){R).>../q^/....
1000fbbc:	f553 53a6 68d1 d1b9 0000 0000 2ced edc1     S..S.h.......,..
1000fbcc:	6020 2040 1ffc fce3 c8b1 b179 ed5b 5bb6      `@ ......y.[..[
1000fbdc:	be6a 6ad4 46cb cb8d d9be be67 4b39 3972     j..j.F....g.9Kr9
1000fbec:	de4a 4a94 d44c 4c98 e858 58b0 4acf cf85     J..JL..LX..X.J..
1000fbfc:	6bd0 d0bb 2aef efc5 e5aa aa4f 16fb fbed     .k...*....O.....
1000fc0c:	c543 4386 d74d 4d9a 5533 3366 9485 8511     C..CM..M3Uf3....
1000fc1c:	cf45 458a 10f9 f9e9 0602 0204 817f 7ffe     E..E............
1000fc2c:	f050 50a0 443c 3c78 ba9f 9f25 e3a8 a84b     P..P<Dx<..%...K.
1000fc3c:	f351 51a2 fea3 a35d c040 4080 8a8f 8f05     Q..Q..].@..@....
1000fc4c:	ad92 923f bc9d 9d21 4838 3870 04f5 f5f1     ..?...!.8Hp8....
1000fc5c:	dfbc bc63 c1b6 b677 75da daaf 6321 2142     ..c...w..u..!cB!
1000fc6c:	3010 1020 1aff ffe5 0ef3 f3fd 6dd2 d2bf     .0 ..........m..
1000fc7c:	4ccd cd81 140c 0c18 3513 1326 2fec ecc3     .L.......5&../..
1000fc8c:	e15f 5fbe a297 9735 cc44 4488 3917 172e     _.._..5.D..D.9..
1000fc9c:	57c4 c493 f2a7 a755 827e 7efc 473d 3d7a     .W....U.~..~=Gz=
1000fcac:	ac64 64c8 e75d 5dba 2b19 1932 9573 73e6     d..d]..].+2.s..s
1000fcbc:	a060 60c0 9881 8119 d14f 4f9e 7fdc dca3     `..`....O..O....
1000fccc:	6622 2244 7e2a 2a54 ab90 903b 8388 880b     "fD"*~T*..;.....
1000fcdc:	ca46 468c 29ee eec7 d3b8 b86b 3c14 1428     F..F.)....k..<(.
1000fcec:	79de dea7 e25e 5ebc 1d0b 0b16 76db dbad     .y..^..^.....v..
1000fcfc:	3be0 e0db 5632 3264 4e3a 3a74 1e0a 0a14     .;..2Vd2:Nt:....
1000fd0c:	db49 4992 0a06 060c 6c24 2448 e45c 5cb8     I..I....$lH$\..\
1000fd1c:	5dc2 c29f 6ed3 d3bd efac ac43 a662 62c4     .]...n....C.b..b
1000fd2c:	a891 9139 a495 9531 37e4 e4d3 8b79 79f2     ..9...1..7..y..y
1000fd3c:	32e7 e7d5 43c8 c88b 5937 376e b76d 6dda     .2...C..7Yn7m..m
1000fd4c:	8c8d 8d01 64d5 d5b1 d24e 4e9c e0a9 a949     .....d..N..N..I.
1000fd5c:	b46c 6cd8 fa56 56ac 07f4 f4f3 25ea eacf     l..lV..V.....%..
1000fd6c:	af65 65ca 8e7a 7af4 e9ae ae47 1808 0810     e..ez..z..G.....
1000fd7c:	d5ba ba6f 8878 78f0 6f25 254a 722e 2e5c     ..o.x..x%oJ%.r\.
1000fd8c:	241c 1c38 f1a6 a657 c7b4 b473 51c6 c697     .$8...W...s..Q..
1000fd9c:	23e8 e8cb 7cdd dda1 9c74 74e8 211f 1f3e     .#...|..t..t.!>.
1000fdac:	dd4b 4b96 dcbd bd61 868b 8b0d 858a 8a0f     K..K..a.........
1000fdbc:	9070 70e0 423e 3e7c c4b5 b571 aa66 66cc     p..p>B|>..q.f..f
1000fdcc:	d848 4890 0503 0306 01f6 f6f7 120e 0e1c     H..H............
1000fddc:	a361 61c2 5f35 356a f957 57ae d0b9 b969     a..a5_j5W..W..i.
1000fdec:	9186 8617 58c1 c199 271d 1d3a b99e 9e27     .....X...':...'.
1000fdfc:	38e1 e1d9 13f8 f8eb b398 982b 3311 1122     .8........+..3".
1000fe0c:	bb69 69d2 70d9 d9a9 898e 8e07 a794 9433     i..i.p........3.
1000fe1c:	b69b 9b2d 221e 1e3c 9287 8715 20e9 e9c9     ..-.."<...... ..
1000fe2c:	49ce ce87 ff55 55aa 7828 2850 7adf dfa5     .I..U..U(xP(.z..
1000fe3c:	8f8c 8c03 f8a1 a159 8089 8909 170d 0d1a     ......Y.........
1000fe4c:	dabf bf65 31e6 e6d7 c642 4284 b868 68d0     ..e..1..B..Bh..h
1000fe5c:	c341 4182 b099 9929 772d 2d5a 110f 0f1e     A..A..).-wZ-....
1000fe6c:	cbb0 b07b fc54 54a8 d6bb bb6d 3a16 162c     ..{.T..T..m..:,.

1000fe7c <FT3>:
1000fe7c:	6363 c6a5 7c7c f884 7777 ee99 7b7b f68d     cc..||..ww..{{..
1000fe8c:	f2f2 ff0d 6b6b d6bd 6f6f deb1 c5c5 9154     ....kk..oo....T.
1000fe9c:	3030 6050 0101 0203 6767 cea9 2b2b 567d     00P`....gg..++}V
1000feac:	fefe e719 d7d7 b562 abab 4de6 7676 ec9a     ......b....Mvv..
1000febc:	caca 8f45 8282 1f9d c9c9 8940 7d7d fa87     ..E.......@.}}..
1000fecc:	fafa ef15 5959 b2eb 4747 8ec9 f0f0 fb0b     ....YY..GG......
1000fedc:	adad 41ec d4d4 b367 a2a2 5ffd afaf 45ea     ...A..g...._...E
1000feec:	9c9c 23bf a4a4 53f7 7272 e496 c0c0 9b5b     ...#...Srr....[.
1000fefc:	b7b7 75c2 fdfd e11c 9393 3dae 2626 4c6a     ...u.......=&&jL
1000ff0c:	3636 6c5a 3f3f 7e41 f7f7 f502 cccc 834f     66Zl??A~......O.
1000ff1c:	3434 685c a5a5 51f4 e5e5 d134 f1f1 f908     44\h...Q..4.....
1000ff2c:	7171 e293 d8d8 ab73 3131 6253 1515 2a3f     qq....s.11Sb..?*
1000ff3c:	0404 080c c7c7 9552 2323 4665 c3c3 9d5e     ......R.##eF..^.
1000ff4c:	1818 3028 9696 37a1 0505 0a0f 9a9a 2fb5     ..(0...7......./
1000ff5c:	0707 0e09 1212 2436 8080 1b9b e2e2 df3d     ......6$......=.
1000ff6c:	ebeb cd26 2727 4e69 b2b2 7fcd 7575 ea9f     ..&.''iN....uu..
1000ff7c:	0909 121b 8383 1d9e 2c2c 5874 1a1a 342e     ........,,tX...4
1000ff8c:	1b1b 362d 6e6e dcb2 5a5a b4ee a0a0 5bfb     ..-6nn..ZZ.....[
1000ff9c:	5252 a4f6 3b3b 764d d6d6 b761 b3b3 7dce     RR..;;Mv..a....}
1000ffac:	2929 527b e3e3 dd3e 2f2f 5e71 8484 1397     )){R..>.//q^....
1000ffbc:	5353 a6f5 d1d1 b968 0000 0000 eded c12c     SS....h.......,.
1000ffcc:	2020 4060 fcfc e31f b1b1 79c8 5b5b b6ed       `@.......y[[..
1000ffdc:	6a6a d4be cbcb 8d46 bebe 67d9 3939 724b     jj....F....g99Kr
1000ffec:	4a4a 94de 4c4c 98d4 5858 b0e8 cfcf 854a     JJ..LL..XX....J.
1000fffc:	d0d0 bb6b efef c52a aaaa 4fe5 fbfb ed16     ..k...*....O....
1001000c:	4343 86c5 4d4d 9ad7 3333 6655 8585 1194     CC..MM..33Uf....
1001001c:	4545 8acf f9f9 e910 0202 0406 7f7f fe81     EE..............
1001002c:	5050 a0f0 3c3c 7844 9f9f 25ba a8a8 4be3     PP..<<Dx...%...K
1001003c:	5151 a2f3 a3a3 5dfe 4040 80c0 8f8f 058a     QQ.....]@@......
1001004c:	9292 3fad 9d9d 21bc 3838 7048 f5f5 f104     ...?...!88Hp....
1001005c:	bcbc 63df b6b6 77c1 dada af75 2121 4263     ...c...w..u.!!cB
1001006c:	1010 2030 ffff e51a f3f3 fd0e d2d2 bf6d     ..0 ..........m.
1001007c:	cdcd 814c 0c0c 1814 1313 2635 ecec c32f     ..L.......5&../.
1001008c:	5f5f bee1 9797 35a2 4444 88cc 1717 2e39     __.....5DD....9.
1001009c:	c4c4 9357 a7a7 55f2 7e7e fc82 3d3d 7a47     ..W....U~~..==Gz
100100ac:	6464 c8ac 5d5d bae7 1919 322b 7373 e695     dd..]]....+2ss..
100100bc:	6060 c0a0 8181 1998 4f4f 9ed1 dcdc a37f     ``......OO......
100100cc:	2222 4466 2a2a 547e 9090 3bab 8888 0b83     ""fD**~T...;....
100100dc:	4646 8cca eeee c729 b8b8 6bd3 1414 283c     FF....)....k..<(
100100ec:	dede a779 5e5e bce2 0b0b 161d dbdb ad76     ..y.^^........v.
100100fc:	e0e0 db3b 3232 6456 3a3a 744e 0a0a 141e     ..;.22Vd::Nt....
1001010c:	4949 92db 0606 0c0a 2424 486c 5c5c b8e4     II......$$lH\\..
1001011c:	c2c2 9f5d d3d3 bd6e acac 43ef 6262 c4a6     ..]...n....Cbb..
1001012c:	9191 39a8 9595 31a4 e4e4 d337 7979 f28b     ...9...1..7.yy..
1001013c:	e7e7 d532 c8c8 8b43 3737 6e59 6d6d dab7     ..2...C.77Ynmm..
1001014c:	8d8d 018c d5d5 b164 4e4e 9cd2 a9a9 49e0     ......d.NN.....I
1001015c:	6c6c d8b4 5656 acfa f4f4 f307 eaea cf25     ll..VV........%.
1001016c:	6565 caaf 7a7a f48e aeae 47e9 0808 1018     ee..zz.....G....
1001017c:	baba 6fd5 7878 f088 2525 4a6f 2e2e 5c72     ...oxx..%%oJ..r\
1001018c:	1c1c 3824 a6a6 57f1 b4b4 73c7 c6c6 9751     ..$8...W...s..Q.
1001019c:	e8e8 cb23 dddd a17c 7474 e89c 1f1f 3e21     ..#...|.tt....!>
100101ac:	4b4b 96dd bdbd 61dc 8b8b 0d86 8a8a 0f85     KK.....a........
100101bc:	7070 e090 3e3e 7c42 b5b5 71c4 6666 ccaa     pp..>>B|...qff..
100101cc:	4848 90d8 0303 0605 f6f6 f701 0e0e 1c12     HH..............
100101dc:	6161 c2a3 3535 6a5f 5757 aef9 b9b9 69d0     aa..55_jWW.....i
100101ec:	8686 1791 c1c1 9958 1d1d 3a27 9e9e 27b9     ......X...':...'
100101fc:	e1e1 d938 f8f8 eb13 9898 2bb3 1111 2233     ..8........+..3"
1001020c:	6969 d2bb d9d9 a970 8e8e 0789 9494 33a7     ii....p........3
1001021c:	9b9b 2db6 1e1e 3c22 8787 1592 e9e9 c920     ...-.."<...... .
1001022c:	cece 8749 5555 aaff 2828 5078 dfdf a57a     ..I.UU..((xP..z.
1001023c:	8c8c 038f a1a1 59f8 8989 0980 0d0d 1a17     .......Y........
1001024c:	bfbf 65da e6e6 d731 4242 84c6 6868 d0b8     ...e..1.BB..hh..
1001025c:	4141 82c3 9999 29b0 2d2d 5a77 0f0f 1e11     AA.....)--wZ....
1001026c:	b0b0 7bcb 5454 a8fc bbbb 6dd6 1616 2c3a     ...{TT.....m..:,

1001027c <RSb>:
1001027c:	0952 d56a 3630 38a5 40bf 9ea3 f381 fbd7     R.j.06.8.@......
1001028c:	e37c 8239 2f9b 87ff 8e34 4443 dec4 cbe9     |.9../..4.CD....
1001029c:	7b54 3294 c2a6 3d23 4cee 0b95 fa42 4ec3     T{.2..#=.L..B..N
100102ac:	2e08 66a1 d928 b224 5b76 49a2 8b6d 25d1     ...f(.$.v[.Im..%
100102bc:	f872 64f6 6886 1698 a4d4 cc5c 655d 92b6     r..d.h....\.]e..
100102cc:	706c 5048 edfd dab9 155e 5746 8da7 849d     lpHP....^.FW....
100102dc:	d890 00ab bc8c 0ad3 e4f7 0558 b3b8 0645     ..........X...E.
100102ec:	2cd0 8f1e 3fca 020f afc1 03bd 1301 6b8a     .,...?.........k
100102fc:	913a 4111 674f eadc f297 cecf b4f0 73e6     :..AOg.........s
1001030c:	ac96 2274 ade7 8535 f9e2 e837 751c 6edf     ..t"..5...7..u.n
1001031c:	f147 711a 291d 89c5 b76f 0e62 18aa 1bbe     G..q.)..o.b.....
1001032c:	56fc 4b3e d2c6 2079 db9a fec0 cd78 f45a     .V>K..y ....x.Z.
1001033c:	dd1f 33a8 0788 31c7 12b1 5910 8027 5fec     ...3...1...Y'.._
1001034c:	5160 a97f b519 0d4a e52d 9f7a c993 ef9c     `Q....J.-.z.....
1001035c:	e0a0 4d3b 2aae b0f5 ebc8 3cbb 5383 6199     ..;M.*.....<.S.a
1001036c:	2b17 7e04 77ba 26d6 69e1 6314 2155 7d0c     .+.~.w.&.i.cU!.}

1001037c <aes_info>:
1001037c:	0002 0000 79bf 1000 79b7 1000 79af 1000     .....y...y...y..
1001038c:	7997 1000 7987 1000                         .y...y..

10010394 <aes_192_ccm_info>:
10010394:	082c 0000 00c0 0000 0410 1001 000c 0000     ,...............
100103a4:	0001 0000 0010 0000 044c 1001               ........L...

100103b0 <mbedtls_cipher_definitions>:
100103b0:	0002 0000 04b8 1001 0003 0000 0480 1001     ................
100103c0:	0004 0000 049c 1001 002b 0000 03e8 1001     ........+.......
100103d0:	002c 0000 0394 1001 002d 0000 0464 1001     ,.......-...d...
	...

100103e8 <aes_128_ccm_info>:
100103e8:	082b 0000 0080 0000 041c 1001 000c 0000     +...............
100103f8:	0001 0000 0010 0000 044c 1001 4541 2d53     ........L...AES-
10010408:	3532 2d36 4343 004d 4541 2d53 3931 2d32     256-CCM.AES-192-
10010418:	4343 004d 4541 2d53 3231 2d38 4343 004d     CCM.AES-128-CCM.
10010428:	4541 2d53 3532 2d36 4345 0042 4541 2d53     AES-256-ECB.AES-
10010438:	3931 2d32 4345 0042 4541 2d53 3231 2d38     192-ECB.AES-128-
10010448:	4345 0042                                   ECB.

1001044c <ccm_aes_info>:
1001044c:	0002 0000 0000 0000 7977 1000 7977 1000     ........wy..wy..
1001045c:	7961 1000 7951 1000                         ay..Qy..

10010464 <aes_256_ccm_info>:
10010464:	082d 0000 0100 0000 0404 1001 000c 0000     -...............
10010474:	0001 0000 0010 0000 044c 1001               ........L...

10010480 <aes_192_ecb_info>:
10010480:	0103 0000 00c0 0000 0434 1001 0000 0000     ........4.......
10010490:	0000 0000 0010 0000 037c 1001               ........|...

1001049c <aes_256_ecb_info>:
1001049c:	0104 0000 0100 0000 0428 1001 0000 0000     ........(.......
100104ac:	0000 0000 0010 0000 037c 1001               ........|...

100104b8 <aes_128_ecb_info>:
100104b8:	0102 0000 0080 0000 0440 1001 0000 0000     ........@.......
100104c8:	0000 0000 0010 0000 037c 1001               ........|...

100104d4 <mbedtls_sha224_info>:
100104d4:	0005 0000 050b 1001 001c 0000 0040 0000     ............@...
100104e4:	7c4f 1000 7c47 1000 7c3f 1000 7c2b 1000     O|..G|..?|..+|..
100104f4:	7c15 1000 7c05 1000 7bfd 1000 7bf5 1000     .|...|...{...{..
10010504:	4853 3241 3635 5300 4148 3232 0034 0000     SHA256.SHA224...

10010514 <mbedtls_sha256_info>:
10010514:	0006 0000 0504 1001 0020 0000 0040 0000     ........ ...@...
10010524:	7c59 1000 7c47 1000 7c3f 1000 7c35 1000     Y|..G|..?|..5|..
10010534:	7c15 1000 7c05 1000 7bfd 1000 7bf5 1000     .|...|...{...{..

10010544 <K>:
10010544:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
10010554:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
10010564:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
10010574:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
10010584:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
10010594:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
100105a4:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
100105b4:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
100105c4:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
100105d4:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
100105e4:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
100105f4:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
10010604:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
10010614:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
10010624:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
10010634:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
10010644:	6f5b 7470 6769 2061 7865 6d61 6c70 5d65     [optiga example]
10010654:	2020 203a 1b00 335b 6d31 6500                      : ..[31m.

1001065f <__FUNCTION__.6003>:
1001065f:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
1001066f:	7972 7470 655f 6363 675f 6e65 7265 7461     rypt_ecc_generat
1001067f:	5f65 656b 7079 6961 0072                    e_keypair.

10010689 <__FUNCTION__.6006>:
10010689:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
10010699:	7972 7470 655f 6463 0068                    rypt_ecdh.

100106a3 <__FUNCTION__.6003>:
100106a3:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
100106b3:	7972 7470 655f 6463 6173 735f 6769 006e     rypt_ecdsa_sign.
100106c3:	1a00 001b 4420 0300 6500                         .... D...

100106cc <__FUNCTION__.6004>:
100106cc:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
100106dc:	7972 7470 655f 6463 6173 765f 7265 6669     rypt_ecdsa_verif
100106ec:	0079 504f 5449 4147 202c 6e49 6966 656e     y.OPITGA, Infine
100106fc:	6e6f 5420 6365 6e68 6c6f 676f 6569 2073     on Technologies 
1001070c:	4741 6500                                        AG.

1001070f <__FUNCTION__.6005>:
1001070f:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
1001071f:	7972 7470 685f 7361 0068                    rypt_hash.

10010729 <__FUNCTION__.6001>:
10010729:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
10010739:	7972 7470 725f 6e61 6f64 006d 0201          rypt_random...

10010747 <__FUNCTION__.6035>:
10010747:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
10010757:	7972 7470 725f 6173 645f 6365 7972 7470     rypt_rsa_decrypt
10010767:	615f 646e 735f 6f74 6572 5200 4153 5020     _and_store.RSA P
10010777:	434b 3153 765f 2e31 2035 6e45 7263 7079     KCS1_v1.5 Encryp
10010787:	6974 6e6f 6f20 2066 7375 7265 6d20 7365     tion of user mes
10010797:	6173 6567 6500                                   sage.

1001079c <__FUNCTION__.6011>:
1001079c:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
100107ac:	7972 7470 725f 6173 645f 6365 7972 7470     rypt_rsa_decrypt
100107bc:	615f 646e 655f 7078 726f 0074               _and_export.

100107c8 <__FUNCTION__.6006>:
100107c8:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
100107d8:	7972 7470 725f 6173 655f 636e 7972 7470     rypt_rsa_encrypt
100107e8:	6d5f 7365 6173 6567 0100 6502                    _message...

100107f3 <__FUNCTION__.6009>:
100107f3:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
10010803:	7972 7470 725f 6173 655f 636e 7972 7470     rypt_rsa_encrypt
10010813:	735f 7365 6973 6e6f 6500                         _session.

1001081c <__FUNCTION__.6003>:
1001081c:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
1001082c:	7972 7470 725f 6173 675f 6e65 7265 7461     rypt_rsa_generat
1001083c:	5f65 656b 7079 6961 0072                    e_keypair.

10010846 <__FUNCTION__.6003>:
10010846:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
10010856:	7972 7470 725f 6173 735f 6769 006e 1cd9     rypt_rsa_sign...
10010866:	2000 0091 0041                              . ..A.

1001086c <__FUNCTION__.6004>:
1001086c:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
1001087c:	7972 7470 725f 6173 765f 7265 6669 0079     rypt_rsa_verify.

1001088c <__FUNCTION__.6077>:
1001088c:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
1001089c:	7972 7470 745f 736c 705f 6672 735f 6168     rypt_tls_prf_sha
100108ac:	3532 0036                                   256.

100108b0 <__FUNCTION__.6097>:
100108b0:	7865 6d61 6c70 5f65 706f 6974 6167 755f     example_optiga_u
100108c0:	6974 5f6c 6968 6562 6e72 7461 5f65 6572     til_hibernate_re
100108d0:	7473 726f 0065                              store.

100108d6 <__FUNCTION__.5925>:
100108d6:	7865 6d61 6c70 5f65 706f 6974 6167 755f     example_optiga_u
100108e6:	6974 5f6c 7270 746f 6365 6574 5f64 7075     til_protected_up
100108f6:	6164 6574 6500                                   date.

100108fb <__FUNCTION__.5919>:
100108fb:	7865 6d61 6c70 5f65 706f 6974 6167 755f     example_optiga_u
1001090b:	6974 5f6c 6572 6461 645f 7461 0061          til_read_data.

10010919 <__FUNCTION__.5918>:
10010919:	7865 6d61 6c70 5f65 706f 6974 6167 755f     example_optiga_u
10010929:	6974 5f6c 7075 6164 6574 635f 756f 746e     til_update_count
	...

1001093a <__FUNCTION__.5919>:
1001093a:	7865 6d61 6c70 5f65 706f 6974 6167 755f     example_optiga_u
1001094a:	6974 5f6c 7277 7469 5f65 6164 6174 6500          til_write_data.

10010959 <__FUNCTION__.6089>:
10010959:	7865 6d61 6c70 5f65 6170 7269 685f 736f     example_pair_hos
10010969:	5f74 6e61 5f64 706f 6974 6167 755f 6973     t_and_optiga_usi
10010979:	676e 705f 6572 735f 6168 6572 5f64 6573     ng_pre_shared_se
10010989:	7263 7465 0300                                   cret.

1001098e <CSWTCH.36>:
1001098e:	0003 0003 000c 000c 3000 3000 3000 3000     .........0.0.0.0
1001099e:	0300 0c00                                   ....

100109a2 <CSWTCH.35>:
100109a2:	0000 0202 0c0c 0c0c 0a08                    ..........

100109ac <cunit_logger_config>:
100109ac:	09d8 1001 a9bd 1000 14fd 1000 0000 0000     ................
	...
100109cc:	09e4 1001 0200 0400 0004 0000               ............

100109d8 <cunit_logger_channel_config>:
100109d8:	c200 0001 0800 0108 0010 0000               ............

100109e4 <cunit_logger_tx_pin>:
100109e4:	0100 4004 0002 0000 09f0 1001               ...@........

100109f0 <cunit_logger_tx_pin_config>:
100109f0:	009c 0000 0001 0000                         ........

100109f8 <cunit_logger_rx_pin_config>:
100109f8:	0000 0000 0001 0000                         ........

10010a00 <scheduler_timer_intr>:
10010a00:	0002 0307 0001                              ......

10010a06 <tick_timer_intr>:
10010a06:	0002 0300 0001                              ......

10010a0c <i2c_master_0_sda_pin_config>:
10010a0c:	00dc 0000 0001 0000                         ........

10010a14 <i2c_master_0_scl_pin_config>:
10010a14:	00e0 0000 0001 0000                         ........

10010a1c <i2c_master_0_config>:
10010a1c:	0a48 1001 b565 1000 b545 1000 b525 1000     H...e...E...%...
10010a2c:	1361 1000 1375 1000 13dd 1000 13e5 1000     a...u...........
10010a3c:	1389 1000 0000 0404 090a 0000               ............

10010a48 <i2c_master_0_channel_config>:
10010a48:	1a80 0006 0000 0000                         ........

10010a50 <io_test>:
10010a50:	0200 4004 0000 0000 0000 0000 0009 0000     ...@............

10010a60 <reset_pin>:
10010a60:	0300 4004 0080 0000 0001 0000 0002 0000     ...@............

10010a70 <vdd_pin>:
10010a70:	0200 4004 0080 0000 0000 0001 000a 0000     ...@............
10010a80:	0000 0001 0000 0330 0000 0001 0000 0000     ......0.........
10010a90:	7453 7261 6974 676e 4420 6365 7972 7470     Starting Decrypt
10010aa0:	6120 646e 4520 7078 726f 2074 6144 6174      and Export Data
10010ab0:	7720 7469 2068 5352 2041 654b 2079 7845      with RSA Key Ex
10010ac0:	6d61 6c70 0065 6f5b 7470 6769 2061 6873     ample.[optiga sh
10010ad0:	6c65 5d6c 2020 203a 1b00 395b 6d32 3100     ell]  : ..[92m.1
10010ae0:	5320 6574 3a70 4720 6e65 7265 7461 2065      Step: Generate 
10010af0:	5352 2041 3031 3432 4b20 7965 5020 6961     RSA 1024 Key Pai
10010b00:	2072 6e61 2064 7865 6f70 7472 7420 6568     r and export the
10010b10:	7020 6275 696c 2063 656b 0079 2032 7453      public key.2 St
10010b20:	7065 203a 6e45 7263 7079 2074 2061 656d     ep: Encrypt a me
10010b30:	7373 6761 2065 6977 6874 5220 4153 5345     ssage with RSAES
10010b40:	5020 434b 2353 2031 6556 3172 352e 5320      PKCS#1 Ver1.5 S
10010b50:	6863 6d65 0065 2033 7453 7065 203a 6553     cheme.3 Step: Se
10010b60:	656c 7463 5020 6f72 6574 7463 6465 4920     lect Protected I
10010b70:	4332 4320 6e6f 656e 7463 6f69 006e 2034     2C Connection.4 
10010b80:	7453 7065 203a 6544 7263 7079 2074 6874     Step: Decrypt th
10010b90:	2065 656d 7373 6761 2065 6977 6874 5220     e message with R
10010ba0:	4153 5345 5020 434b 2353 2031 6556 3172     SAES PKCS#1 Ver1
10010bb0:	352e 5320 6863 6d65 2065 6e61 2064 7865     .5 Scheme and ex
10010bc0:	6f70 7472 6920 0074 7453 7261 6974 676e     port it.Starting
10010bd0:	4420 6365 7972 7470 6120 646e 5320 6f74      Decrypt and Sto
10010be0:	6572 4420 7461 2061 6e6f 7420 6568 6320     re Data on the c
10010bf0:	6968 2070 6977 6874 5220 4153 4b20 7965     hip with RSA Key
10010c00:	4520 6178 706d 656c 3200 5320 6574 3a70      Example.2 Step:
10010c10:	4720 6e65 7265 7461 2065 3037 6220 7479      Generate 70 byt
10010c20:	7365 5220 4153 5020 6572 6d20 7361 6574     es RSA Pre maste
10010c30:	2072 6573 7263 7465 7720 6968 6863 6920     r secret which i
10010c40:	2073 7473 726f 6465 6920 206e 6361 7571     s stored in acqu
10010c50:	7269 6465 7320 7365 6973 6e6f 4f20 4449     ired session OID
10010c60:	3400 5320 6574 3a70 4520 636e 7972 7470     .4 Step: Encrypt
10010c70:	5320 7365 6973 6e6f 4420 7461 2061 6977      Session Data wi
10010c80:	6874 5220 4153 5020 6275 696c 2063 654b     th RSA Public Ke
10010c90:	0079 2035 7453 7065 203a 6544 7263 7079     y.5 Step: Decryp
10010ca0:	2074 6874 2065 656d 7373 6761 2065 6977     t the message wi
10010cb0:	6874 5220 4153 5345 5020 434b 2353 2031     th RSAES PKCS#1 
10010cc0:	6556 3172 352e 5320 6863 6d65 2065 6e61     Ver1.5 Scheme an
10010cd0:	2064 7473 726f 2065 7469 6f20 206e 6863     d store it on ch
10010ce0:	7069 5300 6174 7472 6e69 2067 6e45 7263     ip.Starting Encr
10010cf0:	7079 2074 6144 6174 6920 206e 6553 7373     ypt Data in Sess
10010d00:	6f69 206e 624f 656a 7463 6f20 206e 6863     ion Object on ch
10010d10:	7069 7720 7469 2068 5352 2041 654b 2079     ip with RSA Key 
10010d20:	7845 6d61 6c70 0065 2031 7453 7065 203a     Example.1 Step: 
10010d30:	6e45 7263 7079 2074 2061 656d 7373 6761     Encrypt a messag
10010d40:	2065 6977 6874 5220 4153 5345 5020 434b     e with RSAES PKC
10010d50:	2353 2031 6556 3172 352e 5320 6863 6d65     S#1 Ver1.5 Schem
10010d60:	2065 7473 726f 6465 6f20 206e 6863 7069     e stored on chip
10010d70:	6920 206e 6553 7373 6f69 206e 624f 656a      in Session Obje
10010d80:	7463 5300 6174 7472 6e69 2067 6e45 7263     ct.Starting Encr
10010d90:	7079 2074 6144 6174 7720 7469 2068 5352     ypt Data with RS
10010da0:	2041 654b 2079 7845 6d61 6c70 0065 2031     A Key Example.1 
10010db0:	7453 7065 203a 6e45 7263 7079 2074 2061     Step: Encrypt a 
10010dc0:	656d 7373 6761 2065 6977 6874 5220 4153     message with RSA
10010dd0:	5345 5020 434b 2353 2031 6556 3172 352e     ES PKCS#1 Ver1.5
10010de0:	5320 6863 6d65 0065 7453 7261 6974 676e      Scheme.Starting
10010df0:	7320 6769 696e 676e 6520 6178 706d 656c      signing example
10010e00:	6620 726f 5020 434b 2353 2031 6556 3172      for PKCS#1 Ver1
10010e10:	352e 5320 4148 3532 2036 6953 6e67 7461     .5 SHA256 Signat
10010e20:	7275 2065 6373 6568 656d 2820 5352 2941     ure scheme (RSA)
10010e30:	3100 5320 6574 3a70 5620 7265 6669 2079     .1 Step: Verify 
10010e40:	7270 7065 7261 6465 7320 6769 616e 7574     prepared signatu
10010e50:	6572 202c 6977 6874 7020 6572 6170 6572     re, with prepare
10010e60:	2064 7570 6c62 6369 6b20 7965 6120 646e     d public key and
10010e70:	6420 6769 7365 0074 2031 7453 7065 203a      digest.1 Step: 
10010e80:	6953 6e67 7020 6572 6170 6572 2064 6144     Sign prepared Da
10010e90:	6174 6120 646e 6520 7078 726f 2074 6874     ta and export th
10010ea0:	2065 6973 6e67 7461 7275 0065 7453 7261     e signature.Star
10010eb0:	6974 676e 6720 6e65 7265 7461 2065 5352     ting generate RS
10010ec0:	2041 654b 2079 7845 6d61 6c70 0065 7453     A Key Example.St
10010ed0:	7261 6974 676e 4520 6c6c 7069 6974 2d63     arting Elliptic-
10010ee0:	7563 7672 2065 6944 6666 6569 80e2 4893     curve Diffie...H
10010ef0:	6c65 6d6c 6e61 2820 4345 4844 2029 654b     ellman (ECDH) Ke
10010f00:	2079 6741 6572 6d65 6e65 2074 7250 746f     y Agreement Prot
10010f10:	636f 6c6f 4520 6178 706d 656c 3100 5320     ocol Example.1 S
10010f20:	6574 3a70 5320 6c65 6365 2074 7250 746f     tep: Select Prot
10010f30:	6365 6574 2064 3249 2043 6f43 6e6e 6365     ected I2C Connec
10010f40:	6974 6e6f 3200 5320 6574 3a70 4720 6e65     tion.2 Step: Gen
10010f50:	7265 7461 2065 656e 2077 4345 2043 494e     erate new ECC NI
10010f60:	5453 5020 322d 3635 4b20 7965 5020 6961     ST P-256 Key Pai
10010f70:	0072 2034 7453 7065 203a 6547 656e 6172     r.4 Step: Genera
10010f80:	6574 5320 6168 6572 2064 6553 7263 7465     te Shared Secret
10010f90:	6120 646e 6520 7078 726f 2074 7469 5300      and export it.S
10010fa0:	6174 7472 6e69 2067 6576 6972 6966 6163     tarting verifica
10010fb0:	6974 6e6f 6520 6178 706d 656c 6620 726f     tion example for
10010fc0:	4520 6c6c 7069 6974 2d63 7563 7672 2065      Elliptic-curve 
10010fd0:	6944 6967 6174 206c 6953 6e67 7461 7275     Digital Signatur
10010fe0:	2065 6c41 6f67 6972 6874 206d 4528 4443     e Algorithm (ECD
10010ff0:	4153 0029 7453 7261 6974 676e 7320 6769     SA).Starting sig
10011000:	696e 676e 6520 6178 706d 656c 6620 726f     ning example for
10011010:	4520 6c6c 7069 6974 2d63 7563 7672 2065      Elliptic-curve 
10011020:	6944 6967 6174 206c 6953 6e67 7461 7275     Digital Signatur
10011030:	2065 6c41 6f67 6972 6874 206d 4528 4443     e Algorithm (ECD
10011040:	4153 0029 7453 7261 6974 676e 6720 6e65     SA).Starting gen
10011050:	7265 7461 2065 4345 2043 654b 2079 7845     erate ECC Key Ex
10011060:	6d61 6c70 0065 2031 7453 7065 203a 6547     ample.1 Step: Ge
10011070:	656e 6172 6574 4520 4343 4e20 5349 2054     nerate ECC NIST 
10011080:	2d50 3532 2036 654b 2079 6150 7269 6120     P-256 Key Pair a
10011090:	646e 6520 7078 726f 2074 6874 2065 7570     nd export the pu
100110a0:	6c62 6369 6b20 7965 5300 6174 7472 6e69     blic key.Startin
100110b0:	2067 6547 656e 6172 6574 5220 6e61 6f64     g Generate Rando
100110c0:	206d 7845 6d61 6c70 0065 2031 7453 7065     m Example.1 Step
100110d0:	203a 6547 656e 6172 6574 3320 2032 7962     : Generate 32 by
100110e0:	6574 2073 6172 646e 6d6f 5300 6174 7472     tes random.Start
100110f0:	6e69 2067 4c54 2053 5250 2046 4853 3241     ing TLS PRF SHA2
10011100:	3635 2820 654b 2079 6544 6972 6976 7461     56 (Key Deriviat
10011110:	6f69 296e 4520 6178 706d 656c 3100 5320     ion) Example.1 S
10011120:	6574 3a70 5720 6972 6574 7020 6572 6170     tep: Write prepa
10011130:	6572 2064 6853 7261 6465 5320 6365 6572     red Shared Secre
10011140:	2074 6e69 6f74 6120 206e 7241 6962 7274     t into an Arbitr
10011150:	7261 2079 6144 6174 4f20 6a62 6365 0074     ary Data Object.
10011160:	2032 7453 7065 203a 7055 6164 6574 4d20     2 Step: Update M
10011170:	7465 6461 7461 2061 666f 7420 6568 4f20     etadata of the O
10011180:	6a62 6365 2074 6f74 7520 6573 7420 6568     bject to use the
10011190:	4120 6272 7469 6172 7972 4420 7461 2061      Arbitrary Data 
100111a0:	624f 656a 7463 6f20 6c6e 2079 6976 2061     Object only via 
100111b0:	6853 6569 646c 6465 4920 4332 4320 6e6f     Shielded I2C Con
100111c0:	656e 7463 6f69 006e 2033 7453 7065 203a     nection.3 Step: 
100111d0:	6547 656e 6172 6574 5320 6168 6572 2064     Generate Shared 
100111e0:	6553 7263 7465 7520 6973 676e 7420 6568     Secret using the
100111f0:	5320 6168 6572 2064 6553 7263 7465 6620      Shared Secret f
10011200:	6f72 206d 6874 2065 7241 6962 7274 7261     rom the Arbitrar
10011210:	2079 6144 6174 4f20 6a62 6365 0074 2034     y Data Object.4 
10011220:	7453 7065 203a 6552 7473 726f 2065 654d     Step: Restore Me
10011230:	6174 6164 6174 6f20 2066 6874 2065 7241     tadata of the Ar
10011240:	6962 7274 7261 2079 6144 6174 4f20 6a62     bitrary Data Obj
10011250:	6365 0074 7453 7261 6974 676e 4820 7361     ect.Starting Has
10011260:	2068 7845 6d61 6c70 0065 2031 7453 7065     h Example.1 Step
10011270:	203a 6148 6873 6720 7669 6e65 6420 7461     : Hash given dat
10011280:	2061 6977 6874 5320 6174 7472 202c 7055     a with Start, Up
10011290:	6164 6574 6120 646e 4620 6e69 6c61 7a69     date and Finaliz
100112a0:	2065 6163 6c6c 0073 7453 7261 6974 676e     e calls.Starting
100112b0:	5020 6f72 6574 7463 6465 5520 6470 7461      Protected Updat
100112c0:	2065 7845 6d61 6c70 0065 2031 7453 7065     e Example.1 Step
100112d0:	203a 7055 6164 6574 4d20 7465 6461 7461     : Update Metadat
100112e0:	2061 6f66 2072 6874 2065 624f 656a 7463     a for the Object
100112f0:	7420 206f 6562 7520 6470 7461 6465 6120      to be updated a
10011300:	646e 7420 6568 5420 7572 7473 4120 636e     nd the Trust Anc
10011310:	6f68 2072 7375 6465 7420 206f 6576 6972     hor used to veri
10011320:	7966 7420 6568 7520 6470 7461 0065 2032     fy the update.2 
10011330:	7453 7065 203a 7257 7469 2065 7254 7375     Step: Write Trus
10011340:	2074 6e41 6863 726f 7520 6573 2064 7962     t Anchor used by
10011350:	7420 6568 5420 7572 7473 4d20 7420 206f      the Trust M to 
10011360:	6576 6972 7966 7420 6568 7520 6470 7461     verify the updat
10011370:	0065 2033 7453 7065 203a 7453 7261 2074     e.3 Step: Start 
10011380:	7250 746f 6365 6574 2064 7075 6164 6574     Protected update
10011390:	7720 7469 2068 7270 7065 7261 6465 6d20      with prepared m
100113a0:	6e61 6669 7365 2074 6e61 2064 7266 6761     anifest and frag
100113b0:	656d 746e 0073 7453 7261 6974 676e 5520     ments.Starting U
100113c0:	6470 7461 2065 6f43 6e75 6574 2072 7845     pdate Counter Ex
100113d0:	6d61 6c70 0065 2031 7453 7065 203a 7257     ample.1 Step: Wr
100113e0:	7469 2065 6e49 7469 6169 206c 6f43 6e75     ite Initial Coun
100113f0:	6574 2072 6156 756c 0065 2032 7453 7065     ter Value.2 Step
10011400:	203a 6e49 7263 6165 6573 4320 756f 746e     : Increase Count
10011410:	7265 4f20 6a62 6365 0074 7453 7261 6974     er Object.Starti
10011420:	676e 4820 6269 7265 616e 6574 6120 646e     ng Hibernate and
10011430:	5220 7365 6f74 6572 4520 6178 706d 656c      Restore Example
10011440:	3100 5320 6574 3a70 4f20 6570 206e 7041     .1 Step: Open Ap
10011450:	6c70 6369 7461 6f69 206e 6e6f 7420 6568     plication on the
10011460:	7320 6365 7275 7469 2079 6863 7069 3200      security chip.2
10011470:	5320 6574 3a70 5020 6961 2072 6874 2065      Step: Pair the 
10011480:	6f68 7473 6120 646e 7420 6568 7320 6365     host and the sec
10011490:	7275 7469 2079 6863 7069 3400 5320 6574     urity chip.4 Ste
100114a0:	3a70 4720 6e65 7265 7461 2065 4345 2043     p: Generate ECC 
100114b0:	494e 5453 5020 322d 3635 4b20 7965 7020     NIST P-256 Key p
100114c0:	6961 2072 6e61 2064 7473 726f 2065 7469     air and store it
100114d0:	6920 206e 6553 7373 6f69 206e 6144 6174      in Session Data
100114e0:	4f20 6a62 6365 2c74 6520 7078 726f 2074      Object, export 
100114f0:	6874 2065 7570 6c62 6369 6b20 7965 3500     the public key.5
10011500:	5320 6574 3a70 4320 6568 6b63 5320 6365      Step: Check Sec
10011510:	7275 7469 2079 7645 6e65 2074 6f43 6e75     urity Event Coun
10011520:	6574 2072 6e61 2064 6177 7469 7420 6c69     ter and wait til
10011530:	206c 7469 7220 6165 6863 7365 3020 3600     l it reaches 0.6
10011540:	5320 6574 3a70 5020 7265 6f66 6d72 4320      Step: Perform C
10011550:	6f6c 6573 6120 7070 696c 6163 6974 6e6f     lose application
10011560:	7720 7469 2068 6948 6562 6e72 7461 2065      with Hibernate 
10011570:	6170 6172 656d 6574 2072 6573 2074 6f74     parameter set to
10011580:	5420 7572 0065 2037 7453 7065 203a 704f      True.7 Step: Op
10011590:	6e65 4120 7070 696c 6163 6974 6e6f 6f20     en Application o
100115a0:	206e 6874 2065 6573 7563 6972 7974 6320     n the security c
100115b0:	6968 0070 2038 7453 7065 203a 6953 6e67     hip.8 Step: Sign
100115c0:	7020 6572 6170 6572 2064 6164 6174 7720      prepared data w
100115d0:	7469 2068 7270 7669 7461 2065 656b 2079     ith private key 
100115e0:	7473 726f 6465 6920 206e 6553 7373 6f69     stored in Sessio
100115f0:	206e 6144 6174 4f20 6a62 6365 0074 2039     n Data Object.9 
10011600:	7453 7065 203a 6556 6972 7966 7420 6568     Step: Verify the
10011610:	7320 6769 616e 7574 6572 7720 7469 2068      signature with 
10011620:	6874 2065 7570 6c62 6369 6b20 7965 6720     the public key g
10011630:	6e65 7265 7461 6465 7020 6572 6976 756f     enerated previou
10011640:	6c73 0079 3031 5320 6574 3a70 4320 6f6c     sly.10 Step: Clo
10011650:	6573 4120 7070 696c 6163 7469 6e6f 6f20     se Applicaiton o
10011660:	206e 6874 2065 6863 7069 4900 706d 726f     n the chip.Impor
10011670:	6174 746e 6e20 746f 3a65 5420 206f 6f63     tant note: To co
10011680:	746e 6e69 6575 7720 7469 2068 746f 6568     ntinue with othe
10011690:	2072 7865 6d61 6c70 7365 7920 756f 6e20     r examples you n
100116a0:	6565 2064 6f74 6320 6c61 206c 6874 2065     eed to call the 
100116b0:	6e69 7469 7020 7261 6d61 7465 7265 6f20     init parameter o
100116c0:	636e 2065 6761 6961 006e 7453 7261 6974     nce again.Starti
100116d0:	676e 5020 6961 6972 676e 6f20 2066 6f48     ng Pairing of Ho
100116e0:	7473 6120 646e 5420 7572 7473 4d20 4520     st and Trust M E
100116f0:	6178 706d 656c 3100 5320 6574 3a70 5220     xample.1 Step: R
10011700:	6165 2064 6e61 2064 6843 6365 206b 7865     ead and Check ex
10011710:	7369 6974 676e 4d20 7465 6461 7461 2061     isting Metadata 
10011720:	6f66 2072 6874 2065 6942 646e 6e69 2067     for the Binding 
10011730:	6553 7263 7465 3200 5320 6574 3a70 4720     Secret.2 Step: G
10011740:	6e65 7265 7461 2065 6152 646e 6d6f 6620     enerate Random f
10011750:	726f 7420 6568 6e20 7765 4220 6e69 6964     or the new Bindi
10011760:	676e 5320 6365 6572 0074 2033 7453 7065     ng Secret.3 Step
10011770:	203a 7257 7469 2065 656e 2077 6942 646e     : Write new Bind
10011780:	6e69 2067 6553 7263 7465 3400 5320 6574     ing Secret.4 Ste
10011790:	3a70 5320 6f74 6572 6e20 7765 4220 6e69     p: Store new Bin
100117a0:	6964 676e 5320 6365 6572 2074 6e6f 7420     ding Secret on t
100117b0:	6568 4820 736f 0074 7453 7261 6974 676e     he Host.Starting
100117c0:	5720 6972 6574 4420 7461 2f61 654d 6174      Write Data/Meta
100117d0:	6164 6174 4520 6178 706d 656c 3100 5320     data Example.1 S
100117e0:	6574 3a70 5720 6972 6574 5320 6d61 6c70     tep: Write Sampl
100117f0:	2065 6543 7472 6669 6369 7461 2065 6e69     e Certificate in
10011800:	5420 7572 7473 4120 636e 6f68 2072 6144      Trust Anchor Da
10011810:	6174 4f20 6a62 6365 2074 3628 3034 6220     ta Object (640 b
10011820:	7479 7365 0029 2032 7453 7065 203a 7257     ytes).2 Step: Wr
10011830:	7469 2065 656e 2077 654d 6174 6164 6174     ite new Metadata
10011840:	5300 6174 7472 6e69 2067 6552 6461 4420     .Starting Read D
10011850:	7461 2f61 654d 6174 6164 6174 4520 6178     ata/Metadata Exa
10011860:	706d 656c 3100 5320 6574 3a70 5220 6165     mple.1 Step: Rea
10011870:	2064 6543 7472 6669 6369 7461 2065 7e28     d Certificate (~
10011880:	3035 2030 7962 6574 2973 3200 5320 6574     500 bytes).2 Ste
10011890:	3a70 5220 6165 2064 6543 7472 6669 6369     p: Read Certific
100118a0:	7461 2065 654d 6174 6164 6174 4900 696e     ate Metadata.Ini
100118b0:	6974 6c61 7a69 6e69 2067 504f 4954 4147     tializing OPTIGA
100118c0:	6620 726f 6520 6178 706d 656c 6420 6d65      for example dem
100118d0:	6e6f 7473 6172 6974 6e6f 2e2e 0a2e 4900     onstration.....I
100118e0:	696e 6974 6c61 7a69 6e69 2067 504f 4954     nitializing OPTI
100118f0:	4147 6320 6d6f 6c70 7465 6465 2e2e 0a2e     GA completed....
10011900:	000a 6542 6967 206e 6170 7269 6e69 2067     ..Begin pairing 
10011910:	666f 6820 736f 2074 6e61 2064 504f 4954     of host and OPTI
10011920:	4147 2e2e 002e 6150 7269 6e69 2067 666f     GA....Pairing of
10011930:	6820 736f 2074 6e61 2064 504f 4954 4147      host and OPTIGA
10011940:	6320 6d6f 6c70 7465 6465 2e2e 002e 6553      completed....Se
10011950:	7474 6e69 2067 7563 7272 6e65 2074 696c     tting current li
10011960:	696d 6174 6974 6e6f 7420 206f 696d 696e     mitation to mini
10011970:	756d 2e6d 2e2e 5300 6174 7472 6e69 2067     mum....Starting 
10011980:	504f 4954 4147 6520 6178 706d 656c 6420     OPTIGA example d
10011990:	6d65 6e6f 7473 6172 6974 6e6f 2e2e 000a     emonstration....
100119a0:	7845 6d61 6c70 2065 6174 656b 2073 6425     Example takes %d
100119b0:	6d20 6573 0063 2020 2020 7375 6761 2065      msec.    usage 
100119c0:	2020 2020 2020 2020 2020 2020 2020 3a20                    :
100119d0:	6f20 7470 6769 2061 3c2d 6d63 3e64 6800      optiga -<cmd>.h
100119e0:	6c65 0070 0024 6f4e 6520 6178 706d 656c     elp.$.No example
100119f0:	6520 6978 7473 2073 6f66 2072 6874 7369      exists for this
10011a00:	7220 7165 6575 7473 5000 6572 7373 6120      request.Press a
10011a10:	796e 6b20 7965 7420 206f 7473 7261 2074     ny key to start 
10011a20:	706f 6974 6167 6d20 6e69 2069 6873 6c65     optiga mini shel
10011a30:	006c 2020 2020 6e69 7469 6169 696c 657a     l.    initialize
10011a40:	6f20 7470 6769 2061 2020 2020 2020 2020      optiga         
10011a50:	203a 2000 2020 6420 2d65 6e69 7469 6169     : .    de-initia
10011a60:	696c 657a 6f20 7470 6769 2061 2020 2020     lize optiga     
10011a70:	3a20 0020 2020 2020 7572 206e 6c61 206c      : .    run all 
10011a80:	6574 7473 2073 7461 6f20 636e 2065 2020     tests at once   
10011a90:	2020 203a 2000 2020 7220 6165 2064 6164       : .    read da
10011aa0:	6174 2020 2020 2020 2020 2020 2020 2020     ta              
10011ab0:	2020 3a20 0020 2020 2020 7277 7469 2065        : .    write 
10011ac0:	6164 6174 2020 2020 2020 2020 2020 2020     data            
10011ad0:	2020 2020 203a 2000 2020 6220 6e69 6964         : .    bindi
10011ae0:	676e 6820 736f 2074 6977 6874 6f20 7470     ng host with opt
10011af0:	6769 2061 3a20 0020 2020 2020 6968 6562     iga  : .    hibe
10011b00:	6e72 7461 2065 6e61 2064 6572 7473 726f     rnate and restor
10011b10:	2065 2020 2020 203a 2000 2020 7520 6470     e     : .    upd
10011b20:	7461 2065 6f63 6e75 6574 2072 2020 2020     ate counter     
10011b30:	2020 2020 2020 3a20 0020 2020 2020 7270            : .    pr
10011b40:	746f 6365 6574 2064 7075 6164 6574 2020     otected update  
10011b50:	2020 2020 2020 2020 203a 2000 2020 6820             : .    h
10011b60:	7361 6968 676e 6f20 2066 6164 6174 2020     ashing of data  
10011b70:	2020 2020 2020 2020 3a20 0020 3031 2000              : .10. 
10011b80:	2020 7420 736c 7020 7266 7320 6168 3532        tls pfr sha25
10011b90:	2036 2020 2020 2020 2020 2020 3a20 0020     6            : .
10011ba0:	3131 2000 2020 7220 6e61 6f64 206d 756e     11.    random nu
10011bb0:	626d 7265 6720 6e65 7265 7461 6f69 206e     mber generation 
10011bc0:	3a20 0020 3231 2000 2020 6520 6363 6b20      : .12.    ecc k
10011bd0:	7965 7020 6961 2072 6567 656e 6172 6974     ey pair generati
10011be0:	6e6f 2020 3a20 0020 3331 2000 2020 6520     on   : .13.    e
10011bf0:	6463 6173 7320 6769 206e 2020 2020 2020     cdsa sign       
10011c00:	2020 2020 2020 2020 3a20 0020 3431 2000              : .14. 
10011c10:	2020 6520 6463 6173 7620 7265 6669 2079        ecdsa verify 
10011c20:	6973 6e67 2020 2020 2020 2020 3a20 0020     sign         : .
10011c30:	3531 2000 2020 6520 6363 6420 6669 6966     15.    ecc diffi
10011c40:	2065 6568 6c6c 616d 206e 2020 2020 2020     e hellman       
10011c50:	3a20 0020 3631 2000 2020 7220 6173 6b20      : .16.    rsa k
10011c60:	7965 7020 6961 2072 6567 656e 6172 6974     ey pair generati
10011c70:	6e6f 2020 3a20 0020 3731 2000 2020 7220     on   : .17.    r
10011c80:	6173 7320 6769 206e 2020 2020 2020 2020     sa sign         
10011c90:	2020 2020 2020 2020 3a20 0020 3831 2000              : .18. 
10011ca0:	2020 7220 6173 7620 7265 6669 2079 6973        rsa verify si
10011cb0:	6e67 2020 2020 2020 2020 2020 3a20 0020     gn           : .
10011cc0:	3931 2000 2020 7220 6173 6520 636e 7972     19.    rsa encry
10011cd0:	7470 6d20 7365 6173 6567 2020 2020 2020     pt message      
10011ce0:	3a20 0020 3032 2000 2020 7220 6173 6520      : .20.    rsa e
10011cf0:	636e 7972 7470 7320 7365 6973 6e6f 2020     ncrypt session  
10011d00:	2020 2020 3a20 0020 3132 2000 2020 7220          : .21.    r
10011d10:	6173 6420 6365 7972 7470 6120 646e 7320     sa decrypt and s
10011d20:	6f74 6572 2020 2020 3a20 0020 3232 2000     tore     : .22. 
10011d30:	2020 7220 6173 6420 6365 7972 7470 6120        rsa decrypt a
10011d40:	646e 6520 7078 726f 2074 2020 3a20 0020     nd export    : .
10011d50:	3332 4300 2300 302d 202b 6800 4c6c 6500     23.C.#-0+ .hlL.e
10011d60:	6766 4645 0047 3130 3332 3534 3736 3938     fgEFG.0123456789
10011d70:	4241 4443 4645 3000 3231 3433 3635 3837     ABCDEF.012345678
10011d80:	6139 6362 6564 0066                         9abcdef.

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000169d 	.word	0x1000169d
	
	Insert_InterruptVeener IRQ0	
200000d0:	100016ad 	.word	0x100016ad
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	10001615 	.word	0x10001615
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	1000b68d 	.word	0x1000b68d
	Insert_InterruptVeener IRQ10	
200000f8:	1000b67d 	.word	0x1000b67d
	Insert_InterruptVeener IRQ11	
200000fc:	1000aa75 	.word	0x1000aa75
	Insert_InterruptVeener IRQ12	
20000100:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
